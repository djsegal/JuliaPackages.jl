<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-franklinutilsjl" class="anchor" aria-hidden="true" href="#franklinutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FranklinUtils.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/tlienart/FranklinUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dca0d1dc2677f9d3dcf0e7c95499aa6a276929b026b29bb3767aedb44a648746/68747470733a2f2f7472617669732d63692e636f6d2f746c69656e6172742f4672616e6b6c696e5574696c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tlienart/FranklinUtils.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tlienart/FranklinUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f491da9b055514d300ac62ad0319bf5fab896c2f223e5571f79256afb4be3ae0/68747470733a2f2f636f6465636f762e696f2f67682f746c69656e6172742f4672616e6b6c696e5574696c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tlienart/FranklinUtils.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package aims to simplify building plugins for <a href="https://github.com/tlienart/Franklin.jl">Franklin</a>. In particular, the definition of</p>
<ul dir="auto">
<li><code>hfun_*</code> (functions which will be called with <code>{{fname ...}}</code> either from Markdown or from HTML),</li>
<li><code>lx_*</code> (functions which will be called with <code>\fname{...}</code> from Markdown only).</li>
</ul>
<p dir="auto"><strong>Which one should you use?</strong>: both can be useful, as a rough guideline, <code>hfun_*</code> are simpler and <code>lx_*</code> are more flexible.
If you would like to build a plugin package (e.g.: something like <a href="https://github.com/tlienart/FranklinBootstrap.jl">FranklinBootstrap.jl</a> which makes it easy to work with Bootstrap), you should generally prefer <code>lx_*</code> as they will offer more flexibility, particularly in dealing with arguments etc.
The present package will be particularly helpful for definitions of <code>lx_*</code> commands.</p>
<h2 dir="auto"><a id="user-content-what-this-package-exports" class="anchor" aria-hidden="true" href="#what-this-package-exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What this package exports</h2>
<p dir="auto"><strong>main</strong></p>
<ul dir="auto">
<li><code>lxproc</code> extract the content of a single-brace lx command/environment (returns the string contained in the first brace)</li>
<li><code>lxargs</code> same as <code>lxproc</code> except it treats the string as a Julia function treats its arguments, returns <code>args, kwargs</code>. This allows options passed as <code>{1, 2, opt="hello", bar=true}</code>. Typically you'll want to use <code>kwargs</code> to keep things clear.</li>
</ul>
<p dir="auto"><strong>other</strong></p>
<ul dir="auto">
<li><code>html</code> a dummy function to wrap something in <code>~~~</code></li>
<li><code>isapproxstr</code> a dummy function to compare two strings ignoring <code>\s</code> chars</li>
<li><code>lxd</code> create a dummy latex definition (for testing)</li>
</ul>
<h2 dir="auto"><a id="user-content-where-to-put-definitions" class="anchor" aria-hidden="true" href="#where-to-put-definitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Where to put definitions</h2>
<h3 dir="auto"><a id="user-content-general-user" class="anchor" aria-hidden="true" href="#general-user"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General user</h3>
<p dir="auto">You should put <code>lx_*</code> and <code>hfun_*</code> functions in the <code>utils.jl</code> file.</p>
<p dir="auto"><strong>Note</strong>: the <code>utils.jl</code> file can itself load other packages and include other files.</p>
<h3 dir="auto"><a id="user-content-package-developper" class="anchor" aria-hidden="true" href="#package-developper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package developper</h3>
<p dir="auto">Say you're developping a package like <code>FranklinBootstrap</code>. Then the corresponding module would export all <code>lx_*</code> and <code>hfun_*</code> definitions that you want to make available.</p>
<p dir="auto">Users of your package should then just add in their <code>utils.jl</code> file either:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FranklinBootstrap"><pre><span class="pl-k">using</span> FranklinBootstrap</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FranklinBootstrap: lx_fun1, lx_fun2, hfun_3"><pre><span class="pl-k">using</span> FranklinBootstrap<span class="pl-k">:</span> lx_fun1, lx_fun2, hfun_3</pre></div>
<p dir="auto">depending on whether they want a finer control over what they want to use (the former should be preferred).</p>
<h2 dir="auto"><a id="user-content-defining-hfun_" class="anchor" aria-hidden="true" href="#defining-hfun_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining <code>hfun_*</code></h2>
<p dir="auto">Let's say we want to define a function <code>hfun_foo</code> which will be called <code>{{foo ...}}</code>.
To define such function, we must write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function hfun_foo(...)::String
    # definition
    return html_string
end"><pre><span class="pl-k">function</span> <span class="pl-en">hfun_foo</span>(<span class="pl-k">...</span>)<span class="pl-k">::</span><span class="pl-c1">String</span>
    <span class="pl-c"><span class="pl-c">#</span> definition</span>
    <span class="pl-k">return</span> html_string
<span class="pl-k">end</span></pre></div>
<p dir="auto">that function <strong>must</strong> return a (possibly empty) String which is expected to be in HTML format.</p>
<h3 dir="auto"><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments</h3>
<h4 dir="auto"><a id="user-content-no-arguments" class="anchor" aria-hidden="true" href="#no-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>No arguments</h4>
<p dir="auto">You could have a function without argument which would then be called <code>{{foo}}</code>.
For this, without surprise, just leave the arguments empty in the definition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function hfun_foo()::String
    # definition
    return html_string
end"><pre><span class="pl-k">function</span> <span class="pl-en">hfun_foo</span>()<span class="pl-k">::</span><span class="pl-c1">String</span>
    <span class="pl-c"><span class="pl-c">#</span> definition</span>
    <span class="pl-k">return</span> html_string
<span class="pl-k">end</span></pre></div>
<h4 dir="auto"><a id="user-content-with-arguments" class="anchor" aria-hidden="true" href="#with-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>With arguments</h4>
<p dir="auto">Arguments are passed as a string separated by spaces and passed as a <code>Vector{String}</code>, it is <em>expected</em> that these strings correspond to names of page variables though of course you can do whatever you want with them.</p>
<p dir="auto">The <em>expected</em> workflow is:</p>
<ol dir="auto">
<li>define some page variables <code>var1</code>, <code>var2</code> (note that the definition can itself use Julia code),</li>
<li>call the function with <code>{{foo var1 var2}}</code></li>
<li>the function <code>hfun_foo</code> checks the page variables <code>var1</code> and <code>var2</code>, accesses their value and proceeds.</li>
</ol>
<p dir="auto">In all cases, the definition must now look like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function hfun_foo(args::Vector{String})::String
    # definition
    return html_string
end"><pre><span class="pl-k">function</span> <span class="pl-en">hfun_foo</span>(args<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>)<span class="pl-k">::</span><span class="pl-c1">String</span>
    <span class="pl-c"><span class="pl-c">#</span> definition</span>
    <span class="pl-k">return</span> html_string
<span class="pl-k">end</span></pre></div>
<p dir="auto">The difference will lie in how you process the <code>args</code>.</p>
<h3 dir="auto"><a id="user-content-access-to-page-variables" class="anchor" aria-hidden="true" href="#access-to-page-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Access to page variables</h3>
<p dir="auto">In both <code>hfun_*</code> and <code>lx_*</code> function you have access to the page variables defined on the page which calls the function and to page variables defined on other pages.</p>
<p dir="auto">To access <em>local</em> page variables, call <code>locvar("name_of_var")</code>, to access a page variable defined on another page, call <code>pagevar("relative_path", "name_of_var")</code> where <code>relative_path</code> is the path to the page that defines the variable.
In both case, if the variable is not found then <code>nothing</code> is returned.</p>
<p dir="auto"><strong>Example</strong>: page <code>bish/blah.md</code> defines <code>var1</code>, you can access it via <code>locvar("var1")</code> for any function called on <code>blah.md</code> and via <code>pagevar("bish/blah")</code> anywhere else.</p>
<p dir="auto"><strong>Note</strong>: the relative path for <code>pagevar</code> can have the extension, it will be ignored so <code>"bish/blah.md"</code> or <code>"bish/blah"</code> will be interpreted identically.</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<h4 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1</h4>
<p dir="auto">In file <code>blah.md</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{{foo}}"><pre class="notranslate"><code>{{foo}}
</code></pre></div>
<p dir="auto">In file <code>utils.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function hfun_foo()
    return &quot;&lt;h1&gt;Hello!&lt;/h1&gt;&quot;
end"><pre><span class="pl-k">function</span> <span class="pl-en">hfun_foo</span>()
    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;Hello!&lt;/h1&gt;<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<h4 dir="auto"><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2</h4>
<p dir="auto">In file <code>blah.md</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@def var1 = 5
{{foo var1}}"><pre class="notranslate"><code>@def var1 = 5
{{foo var1}}
</code></pre></div>
<p dir="auto">In file <code>utils.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function hfun_foo(args)
    vname = args[1]
    val = locvar(vname)
    io = IOBuffer()
    for i in 1:val
        write(io, &quot;&lt;p&gt;&quot; * &quot;*&quot;^i * &quot;&lt;/p&gt;&quot;)
    end
    return String(take!(io))
end"><pre><span class="pl-k">function</span> <span class="pl-en">hfun_foo</span>(args)
    vname <span class="pl-k">=</span> args[<span class="pl-c1">1</span>]
    val <span class="pl-k">=</span> <span class="pl-c1">locvar</span>(vname)
    io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>val
        <span class="pl-c1">write</span>(io, <span class="pl-s"><span class="pl-pds">"</span>&lt;p&gt;<span class="pl-pds">"</span></span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span><span class="pl-k">^</span>i <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;/p&gt;<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(io))
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-defining-lx_" class="anchor" aria-hidden="true" href="#defining-lx_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining <code>lx_*</code></h2>
<p dir="auto">Let's say we want to define a function <code>lx_bar</code> which will be called <code>\bar{...}</code>.
To define such function, we must write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function lx_bar(lxc, lxd)::String
    # definition
    return markdown_string
end"><pre><span class="pl-k">function</span> <span class="pl-en">lx_bar</span>(lxc, lxd)<span class="pl-k">::</span><span class="pl-c1">String</span>
    <span class="pl-c"><span class="pl-c">#</span> definition</span>
    <span class="pl-k">return</span> markdown_string
<span class="pl-k">end</span></pre></div>
<p dir="auto">that function <strong>must</strong> return a (possibly empty) String which is expected to be in Markdown format.</p>
<h3 dir="auto"><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments</h3>
<ul dir="auto">
<li><code>lxc</code> is a Franklin object which essentially contains the content of the braces.</li>
<li><code>lxd</code> is a Franklin object which contains all the LaTeX-like definitions that have been defined up to the point where <code>\bar</code> is called, you should generally not use it.</li>
</ul>
<p dir="auto">The <strong>recommended</strong> workflow is to use the <code>lxargs</code> function from <code>FranklinUtils</code> to read the content of the first brace as if it was the arguments passed to a Julia function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function lx_bar(lxc, _)
    args, kwargs = lxargs(lxc)
    # work with args, kwargs
    return markdown_string
end"><pre><span class="pl-k">function</span> <span class="pl-en">lx_bar</span>(lxc, _)
    args, kwargs <span class="pl-k">=</span> <span class="pl-c1">lxargs</span>(lxc)
    <span class="pl-c"><span class="pl-c">#</span> work with args, kwargs</span>
    <span class="pl-k">return</span> markdown_string
<span class="pl-k">end</span></pre></div>
<p dir="auto"><strong>Note</strong>: a <code>lx_*</code> function can also build raw HTML, in that case just use the <code>html</code> function at the end so that it gets considered as such e.g.: <code>return html(html_string)</code>.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<h3 dir="auto"><a id="user-content-nesting" class="anchor" aria-hidden="true" href="#nesting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nesting</h3>
<p dir="auto">...</p>
</article></div>