<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gurobijl" class="anchor" aria-hidden="true" href="#gurobijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gurobi.jl</h1>
<p>The <a href="http://www.gurobi.com" rel="nofollow">Gurobi</a> Optimizer is a commercial optimization solver for a variety of mathematical programming problems, including linear programming (LP), quadratic programming (QP), quadratically constrained programming (QCP), mixed integer linear programming (MILP), mixed-integer quadratic programming (MIQP), and mixed-integer quadratically constrained programming (MIQCP).</p>
<p><em>The Gurobi wrapper for Julia is community driven and not officially supported by Gurobi. If you are a commercial customer interested in official support for Julia from Gurobi, let them know!</em></p>
<h2><a id="user-content-using-gurobi-v90-and-you-got-an-error-like-q-not-psd" class="anchor" aria-hidden="true" href="#using-gurobi-v90-and-you-got-an-error-like-q-not-psd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using Gurobi v9.0 and you got an error like <code>Q not PSD</code>?</h2>
<p>You need to set the NonConvex parameter:</p>
<div class="highlight highlight-source-julia"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>NonConvex<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)</pre></div>
<h2><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use with JuMP</h2>
<p>We highly recommend that you use the <em>Gurobi.jl</em> package with higher level packages such as <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a>.</p>
<p>This can be done using the <code>Gurobi.Optimizer</code> object. Here is how to create a <em>JuMP</em> model that uses Gurobi as the solver.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Gurobi

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>TimeLimit<span class="pl-pds">"</span></span>, <span class="pl-c1">100</span>)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Presolve<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<p>See the <a href="https://www.gurobi.com/documentation/current/refman/parameters.html" rel="nofollow">Gurobi Documentation</a> for a list and description of allowable parameters.</p>
<h2><a id="user-content-reusing-the-same-gurobi-environment-for-multiple-solves" class="anchor" aria-hidden="true" href="#reusing-the-same-gurobi-environment-for-multiple-solves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reusing the same Gurobi environment for multiple solves</h2>
<p>When using this package via other packages such as <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a>, the default behavior is to obtain a new Gurobi license token every time a model is created and solved. If you are using Gurobi in a setting where the number of concurrent Gurobi uses is limited (e.g. <a href="http://www.gurobi.com/products/licensing-pricing/licensing-overview" rel="nofollow">"Single-Use" or "Floating-Use" licenses</a>), you might instead prefer to obtain a single license token that is shared by all models that your program solves. You can do this by passing a Gurobi Environment object as the first parameter to <code>Gurobi.Optimizer</code>. For example, the follow code snippet solves multiple problems with JuMP using the same license token:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Gurobi

<span class="pl-k">const</span> GRB_ENV <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model1 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(GRB_ENV))
<span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> The solvers can have different options too</span>
model2 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(() <span class="pl-k">-&gt;</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(GRB_ENV), <span class="pl-s"><span class="pl-pds">"</span>OutputFlag<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>))
<span class="pl-k">...</span></pre></div>
<h3><a id="user-content-common-performance-pitfall-with-jump" class="anchor" aria-hidden="true" href="#common-performance-pitfall-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Common Performance Pitfall with JuMP</h3>
<p>Gurobi API works differently than most solvers. Any changes to the model are not applied immediately, but instead go sit in a internal buffer (making any modifications appear to be instantaneous) waiting for a call to <code>update_model!</code> (where the work is  done). If Gurobi.jl is used directly, it is the user responsability to call <code>update_model!</code> when necessary (for example, before solving the model), as it would be if the user was using the official C interface. However, if Gurobi.jl is used with JuMP, it becomes Gurobi.jl responsibility to call <code>update_model!</code> when necessary, as a valid JuMP program should work for solvers with and without such lazy update semantics (i.e., with and without a <code>update_model!</code>-like method).</p>
<p>This leads to a common performance pitfall that has the following message as its main symptom: <code>Warning: excessive time spent in model updates. Consider calling update less frequently.</code> This often means the JuMP program was structured in such a way that Gurobi.jl ends up calling <code>update_model!</code> each iteration of a loop. Usually, it is possible (and easy) to restructure the JuMP program in a way it stays solver-agnostic and has a close-to-ideal performance with Gurobi. To guide such restructuring it is good to keep in mind the following bits of information:</p>
<ol>
<li><code>update_model!</code> is only called if changes were done since last <code>update_model!</code> (i.e., the internal buffer is not empty).</li>
<li><code>update_model!</code> is called when <code>JuMP.optimize!</code> is called, but this often is not the source of the problem.</li>
<li><code>update_model!</code> <em>may</em> be called when <em>ANY</em> model attribute is queried <em>even if that specific attribute was not changed</em>, and this often the source of the problem.</li>
<li>The worst-case scenario is, therefore, a loop of modify-query-modify-query, even if what is being modified and what is being queried are two completely distinct things.</li>
</ol>
<p>Finally, for an example, prefer:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> GOOD</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>  <span class="pl-c"><span class="pl-c">#</span> all modifications are done before any queries</span>
    <span class="pl-c1">set_upper_bound</span>(x[i], i)
<span class="pl-k">end</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> only the first `lower_bound` query may trigger an `update_model!` </span>
    <span class="pl-c1">println</span>(<span class="pl-c1">lower_bound</span>(x[i]))
<span class="pl-k">end</span></pre></div>
<p>to:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> BAD</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c1">set_upper_bound</span>(x[i], i)
    <span class="pl-c"><span class="pl-c">#</span> there is a potential `update_model!` each iteration of this loop</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">lower_bound</span>(x[i]))
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Here is the procedure to setup this package:</p>
<ol>
<li>
<p>Obtain a license of Gurobi and install Gurobi solver, following the instructions on <a href="http://www.gurobi.com" rel="nofollow">Gurobi's website</a>.</p>
<p><strong>The minimum version supported by <em>Gurobi.jl</em> is Gurobi v7.0.</strong></p>
</li>
<li>
<p>Make sure the <code>GUROBI_HOME</code> environmental variable is set to the path of the Gurobi directory. This is part of a standard installation. The Gurobi library will be searched for in <code>GUROBI_HOME/lib</code> on unix platforms and <code>GUROBI_HOME\bin</code> on Windows. If the library is not found, check that your version is listed in <code>deps/build.jl</code>.</p>
</li>
<li>
<p>Install this package using <code>Pkg.add("Gurobi")</code>.</p>
</li>
<li>
<p>Now, you can start using it.</p>
</li>
</ol>
<p>By default, <code>build</code>ing <em>Gurobi.jl</em> will fail if the Gurobi library is not found. This may not be desirable in certain cases, for example when part of a package's test suite uses Gurobi as an optional test dependency, but Gurobi cannot be installed on a CI server running the test suite. To support this use case, the <code>GUROBI_JL_SKIP_LIB_CHECK</code> environment variable may be set (to any value) to make <em>Gurobi.jl</em> installable (but not usable).</p>
<h2><a id="user-content-loaderror-unable-to-locate-gurobi-installation" class="anchor" aria-hidden="true" href="#loaderror-unable-to-locate-gurobi-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>"LoadError: Unable to locate Gurobi installation"</h2>
<ul>
<li>
<p>Make sure that you have downloaded and installed Gurobi from <a href="https://gurobi.com" rel="nofollow">gurobi.com</a>. Also, make sure that you validate the license.</p>
</li>
<li>
<p>Check that your Gurobi version is at least 7.0</p>
</li>
<li>
<p>Make sure that the <code>GUROBI_HOME</code> environment variable is set correctly. You can see the current value as follows</p>
</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>GUROBI_HOME<span class="pl-pds">"</span></span>]
<span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>gurobi902<span class="pl-cce">\\</span>win64<span class="pl-pds">"</span></span></pre></div>
<p>If it is not set correctly (e.g., you get an error <code>Key "GUROBI_HOME" not found</code>), you can set it as follows</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>GUROBI_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/replace/this/with/the/path/to/gurobi<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>)</pre></div>
<p>The Gurobi library (<code>gurobiXX.dll</code> on Windows, <code>gurobiXX.so</code> on Unix, and <code>gurobiXX.dylib</code> in OSX where <code>XX</code> is a version) will be searched for in <code>GUROBI_HOME/lib</code> on unix platforms and <code>GUROBI_HOME\bin</code> on Windows.</p>
<h2><a id="user-content-accessing-gurobi-specific-attributes-via-jump" class="anchor" aria-hidden="true" href="#accessing-gurobi-specific-attributes-via-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Gurobi-specific attributes via JuMP</h2>
<p>You can get and set Gurobi-specific variable, constraint, and model attributes via JuMP as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Gurobi

model <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">direct_model</span>(Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(OutputFlag<span class="pl-k">=</span><span class="pl-c1">0</span>))
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@constraint</span>(model, c, <span class="pl-c1">2</span>x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@objective</span>(model, Min, x)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">ConstraintAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>Lazy<span class="pl-pds">"</span></span>), c, <span class="pl-c1">2</span>)
<span class="pl-c1">optimize!</span>(model)

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">VariableAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>LB<span class="pl-pds">"</span></span>), x)  <span class="pl-c"><span class="pl-c">#</span> Returns 0.0</span>

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">ModelAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>NumConstrs<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> Returns 1</span></pre></div>
<p>Note that we are using <a href="https://www.juliaopt.org/JuMP.jl/v0.20.0/solvers/#Direct-mode-1" rel="nofollow">JuMP in direct-mode</a>.
A complete list of supported Gurobi attributes can be found in <a href="https://www.gurobi.com/documentation/8.1/refman/attributes.html" rel="nofollow">their online documentation</a>.</p>
<p><em>Most users should not need to use the low-level API detailed in the following sections.</em></p>
<h2><a id="user-content-api-overview" class="anchor" aria-hidden="true" href="#api-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API Overview</h2>
<p>This package provides both APIs at different levels for constructing models and solving optimization problems.</p>
<h4><a id="user-content-gurobi-environment" class="anchor" aria-hidden="true" href="#gurobi-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gurobi Environment</h4>
<p>A Gurobi model is always associated with an Gurobi environment, which maintains a solver configuration. By setting parameters to this environment, one can control or tune the behavior of a Gurobi solver.</p>
<p>To construct a Gurobi Environment, one can write:</p>
<pre><code>env = Gurobi.Env()
</code></pre>
<p>This package provides functions to get and set parameters:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">getparam</span>(env, name)       <span class="pl-c"><span class="pl-c">#</span> get the value of a parameter</span>
<span class="pl-c1">setparam!</span>(env, name, v)   <span class="pl-c"><span class="pl-c">#</span> set the value of a parameter</span>
<span class="pl-c1">setparams!</span>(env, name1<span class="pl-k">=</span>value1, name2<span class="pl-k">=</span>value2, <span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> set parameters using keyword arguments</span></pre></div>
<p>You may refer to Gurobi's <a href="http://www.gurobi.com/documentation/8.1/refman/parameters.html" rel="nofollow">Parameter Reference</a> for the whole list of parameters.</p>
<p>Here are some simple examples</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setparam!</span>(env, <span class="pl-s"><span class="pl-pds">"</span>Method<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)   <span class="pl-c"><span class="pl-c">#</span> choose to use Barrier method</span>
<span class="pl-c1">setparams!</span>(env; IterationLimit<span class="pl-k">=</span><span class="pl-c1">100</span>, Method<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> set the maximum iterations and choose to use Simplex method</span></pre></div>
<p>These parameters may be used directly with the <code>GurobiSolver</code> object used by MathProgBase. For example:</p>
<div class="highlight highlight-source-julia"><pre>solver <span class="pl-k">=</span> <span class="pl-c1">GurobiSolver</span>(Method<span class="pl-k">=</span><span class="pl-c1">2</span>)
solver <span class="pl-k">=</span> <span class="pl-c1">GurobiSolver</span>(Method<span class="pl-k">=</span><span class="pl-c1">1</span>, IterationLimit<span class="pl-k">=</span><span class="pl-c1">100.</span>)</pre></div>
<h4><a id="user-content-high-level-api" class="anchor" aria-hidden="true" href="#high-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-level API</h4>
<p>If the objective coefficients and the constraints have already been given, one may use a high-level function <code>gurobi_model</code> to construct a model:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">gurobi_model</span>(env, <span class="pl-k">...</span>)</pre></div>
<p>One can use keyword arguments to specify the models:</p>
<ul>
<li><code>name</code>:  the model name.</li>
<li><code>sense</code>: the sense of optimization (a symbol, which can be either <code>:minimize</code> (default) or <code>:maximize</code>).</li>
<li><code>f</code>:   the linear coefficient vector.</li>
<li><code>H</code>:   the quadratic coefficient matrix (can be dense or sparse).</li>
<li><code>A</code>:   the coefficient matrix of the linear inequality constraints.</li>
<li><code>b</code>:   the right-hand-side of the linear inequality constraints.</li>
<li><code>Aeq</code>:  the coefficient matrix of the equality constraints.</li>
<li><code>beq</code>:  the right-hand-side of the equality constraints.</li>
<li><code>lb</code>:   the variable lower bounds.</li>
<li><code>ub</code>:   the variable upper bounds.</li>
</ul>
<p>This function constructs a model that represents the following problem:</p>
<pre><code>objective:  (1/2) x' H x + f' x

      s.t.   A x &lt;= b
           Aeq x = beq
         lb &lt;= x &lt;= ub
</code></pre>
<p>The caller <em>must</em> specify <code>f</code> using a non-empty vector, while other keyword arguments are optional. When <code>H</code> is omitted, this reduces to an LP problem. When <code>lb</code> is omitted, the variables are not lower bounded, and when <code>ub</code> is omitted, the variables are not upper bounded.</p>
<h4><a id="user-content-low-level-api" class="anchor" aria-hidden="true" href="#low-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-level API</h4>
<p>This package also provides functions to build the model from scratch and gradually add variables and constraints.
To construct an empty model, one can write:</p>
<div class="highlight highlight-source-julia"><pre>env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()    <span class="pl-c"><span class="pl-c">#</span> creates a Gurobi environment</span>

model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, name)   <span class="pl-c"><span class="pl-c">#</span> creates an empty model</span>
model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, name, sense)</pre></div>
<p>Here, <code>sense</code> is a symbol, which can be either <code>:minimize</code> or <code>:maximize</code> (default to <code>:minimize</code> when omitted).</p>
<p>Then, the following functions can be used to add variables and constraints to the model:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># add variables</span>

<span class="pl-c1">add_var!</span>(model, vtype, c)   <span class="pl-c"><span class="pl-c">#</span> add an variable with coefficient c</span>
                            <span class="pl-c"><span class="pl-c">#</span> vtype can be either of</span>
                            <span class="pl-c"><span class="pl-c">#</span> - GRB_CONTINUOUS  (for continuous variable)</span>
                            <span class="pl-c"><span class="pl-c">#</span> - GRB_INTEGER (for integer variable)</span>
                            <span class="pl-c"><span class="pl-c">#</span> - GRB_BINARY (for binary variable, i.e. 0/1)</span>

<span class="pl-c1">add_cvar!</span>(model, c)            <span class="pl-c"><span class="pl-c">#</span> add a continuous variable</span>
<span class="pl-c1">add_cvar!</span>(model, c, lb, ub)    <span class="pl-c"><span class="pl-c">#</span> add a continuous variable with specified bounds</span>

<span class="pl-c1">add_ivar!</span>(model, c)            <span class="pl-c"><span class="pl-c">#</span> add an integer variable</span>
<span class="pl-c1">add_ivar!</span>(model, c, lb, ub)    <span class="pl-c"><span class="pl-c">#</span> add an integer variable with specified bounds</span>

<span class="pl-c1">add_bvar!</span>(model, c)            <span class="pl-c"><span class="pl-c">#</span> add a binary variable</span>

<span class="pl-c"><span class="pl-c">#</span># add constraints</span>

<span class="pl-c"><span class="pl-c">#</span> add a constraint with non-zero coefficients on specific variables.</span>
<span class="pl-c"><span class="pl-c">#</span> rel can be '&lt;', '&gt;', or '='</span>
<span class="pl-c1">add_constr!</span>(model, inds, coeffs, rel, rhs)

<span class="pl-c"><span class="pl-c">#</span> add a constraint with coefficient vector for all variables.</span>
<span class="pl-c1">add_constr!</span>(model, coeffs, rel, rhs)

<span class="pl-c"><span class="pl-c">#</span> add constraints using CSR format</span>
<span class="pl-c1">add_constrs!</span>(model, cbegin, inds, coeffs, rel, rhs)

<span class="pl-c"><span class="pl-c">#</span> add constraints using a matrix: A x (rel) rhs</span>
<span class="pl-c1">add_constrs!</span>(model, A, rel, rhs)  <span class="pl-c"><span class="pl-c">#</span> here A can be dense or sparse</span>

<span class="pl-c"><span class="pl-c">#</span> add constraints using a transposed matrix: At' x (rel) rhs</span>
<span class="pl-c"><span class="pl-c">#</span> this is usually more efficient than add_constrs!</span>
<span class="pl-c1">add_constrs_t!</span>(model, At, rel, rhs)  <span class="pl-c"><span class="pl-c">#</span> here At can be dense or sparse</span>

<span class="pl-c"><span class="pl-c">#</span> add a range constraint</span>
<span class="pl-c1">add_rangeconstr!</span>(model, inds, coeffs, lb, ub)

<span class="pl-c"><span class="pl-c">#</span> add range constraints using CSR format</span>
<span class="pl-c1">add_rangeconstrs!</span>(model, cbegin, inds, coeffs, lb, ub)

<span class="pl-c"><span class="pl-c">#</span> add range constraints using a matrix:  lb &lt;= A x &lt;= ub</span>
<span class="pl-c1">add_rangeconstrs!</span>(model, A, lb, ub)  <span class="pl-c"><span class="pl-c">#</span> here A can be dense or sparse</span>

<span class="pl-c"><span class="pl-c">#</span> add range constraints using a transposed matrix: lb &lt;= At' x &lt;= ub</span>
<span class="pl-c"><span class="pl-c">#</span> this is usually more efficient than add_rangeconstrs!</span>
<span class="pl-c1">add_rangeconstrs_t!</span>(model, At, lb, ub)  <span class="pl-c"><span class="pl-c">#</span> here At can be dense or sparse</span></pre></div>
<h4><a id="user-content-modify-problem" class="anchor" aria-hidden="true" href="#modify-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Modify Problem</h4>
<p>It is not uncommon in practice that one would like to adjust the objective coefficients and solve the problem again. This package provides a function <code>set_objcoeffs!</code> for this purpose:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">set_objcoeffs!</span>(model, new_coeffs)
 <span class="pl-c"><span class="pl-c">#</span> ... one can also call add_constr! and friends to add additional constraints ...</span>
<span class="pl-c1">update_model!</span>(model)   <span class="pl-c"><span class="pl-c">#</span> changes take effect after this</span>
<span class="pl-c1">optimize</span>(model)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The usage of this package is straight forward. Below, we use several examples to demonstrate the use of this package to solve optimization problems.</p>
<h3><a id="user-content-linear-programming-examples" class="anchor" aria-hidden="true" href="#linear-programming-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linear Programming Examples</h3>
<p>Problem formulation:</p>
<pre><code>maximize x + y

s.t. 50 x + 24 y &lt;= 2400
     30 x + 33 y &lt;= 2100
     x &gt;= 45, y &gt;= 5
</code></pre>
<p>Below, we show how this problem can be constructed and solved in different ways.</p>
<h5><a id="user-content-example-11-high-level-linear-programming-api" class="anchor" aria-hidden="true" href="#example-11-high-level-linear-programming-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1.1: High-level Linear Programming API</h5>
<p>Using the <code>gurobi_model</code> function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

<span class="pl-c"><span class="pl-c">#</span> set presolve to 0</span>
<span class="pl-c1">setparam!</span>(env, <span class="pl-s"><span class="pl-pds">"</span>Presolve<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)

 <span class="pl-c"><span class="pl-c">#</span> construct the model</span>
model <span class="pl-k">=</span> <span class="pl-c1">gurobi_model</span>(env;
    name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>lp_01<span class="pl-pds">"</span></span>,
    f <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>),
    A <span class="pl-k">=</span> [<span class="pl-c1">50.</span> <span class="pl-c1">24.</span>; <span class="pl-c1">30.</span> <span class="pl-c1">33.</span>],
    b <span class="pl-k">=</span> [<span class="pl-c1">2400.</span>, <span class="pl-c1">2100.</span>],
    lb <span class="pl-k">=</span> [<span class="pl-c1">5.</span>, <span class="pl-c1">45.</span>])

 <span class="pl-c"><span class="pl-c">#</span> run optimization</span>
<span class="pl-c1">optimize</span>(model)

 <span class="pl-c"><span class="pl-c">#</span> show results</span>
sol <span class="pl-k">=</span> <span class="pl-c1">get_solution</span>(model)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>soln = <span class="pl-v">$(sol)</span><span class="pl-pds">"</span></span>)

objv <span class="pl-k">=</span> <span class="pl-c1">get_objval</span>(model)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>objv = <span class="pl-v">$(objv)</span><span class="pl-pds">"</span></span>)</pre></div>
<h5><a id="user-content-example-12-low-level-linear-programming-api" class="anchor" aria-hidden="true" href="#example-12-low-level-linear-programming-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1.2: Low-level Linear Programming API</h5>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

<span class="pl-c"><span class="pl-c">#</span> set presolve to 0</span>
<span class="pl-c1">setparam!</span>(env, <span class="pl-s"><span class="pl-pds">"</span>Presolve<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)

 <span class="pl-c"><span class="pl-c">#</span> creates an empty model ("lp_01" is the model name)</span>
model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, <span class="pl-s"><span class="pl-pds">"</span>lp_01<span class="pl-pds">"</span></span>, <span class="pl-c1">:maximize</span>)

 <span class="pl-c"><span class="pl-c">#</span> add variables</span>
 <span class="pl-c"><span class="pl-c">#</span> add_cvar!(model, obj_coef, lower_bound, upper_bound)</span>
<span class="pl-c1">add_cvar!</span>(model, <span class="pl-c1">1.0</span>, <span class="pl-c1">45.</span>, <span class="pl-c1">Inf</span>)  <span class="pl-c"><span class="pl-c">#</span> x: x &gt;= 45</span>
<span class="pl-c1">add_cvar!</span>(model, <span class="pl-c1">1.0</span>,  <span class="pl-c1">5.</span>, <span class="pl-c1">Inf</span>)  <span class="pl-c"><span class="pl-c">#</span> y: y &gt;= 5</span>

 <span class="pl-c"><span class="pl-c">#</span> For Gurobi, you have to call update_model to have the</span>
 <span class="pl-c"><span class="pl-c">#</span> lastest changes take effect</span>
<span class="pl-c1">update_model!</span>(model)

 <span class="pl-c"><span class="pl-c">#</span> add constraints</span>
 <span class="pl-c"><span class="pl-c">#</span> add_constr!(model, coefs, sense, rhs)</span>
<span class="pl-c1">add_constr!</span>(model, [<span class="pl-c1">50.</span>, <span class="pl-c1">24.</span>], <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-c1">2400.</span>) <span class="pl-c"><span class="pl-c">#</span> 50 x + 24 y &lt;= 2400</span>
<span class="pl-c1">add_constr!</span>(model, [<span class="pl-c1">30.</span>, <span class="pl-c1">33.</span>], <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-c1">2100.</span>) <span class="pl-c"><span class="pl-c">#</span> 30 x + 33 y &lt;= 2100</span>
<span class="pl-c1">update_model!</span>(model)

<span class="pl-c1">println</span>(model)

 <span class="pl-c"><span class="pl-c">#</span> perform optimization</span>
<span class="pl-c1">optimize</span>(model)</pre></div>
<p>You may also add variables and constraints in batch, as:</p>
<div class="highlight highlight-source-julia"><pre> <span class="pl-c"><span class="pl-c">#</span> add mutliple variables in batch</span>
<span class="pl-c1">add_cvars!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>], [<span class="pl-c1">45.</span>, <span class="pl-c1">5.</span>], <span class="pl-c1">Inf</span>)

 <span class="pl-c"><span class="pl-c">#</span> add multiple constraints in batch</span>
A <span class="pl-k">=</span> [<span class="pl-c1">50.</span> <span class="pl-c1">24.</span>; <span class="pl-c1">30.</span> <span class="pl-c1">33.</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">2400.</span>, <span class="pl-c1">2100.</span>]
<span class="pl-c1">add_constrs!</span>(model, A, <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, b)</pre></div>
<h5><a id="user-content-example-13-linear-programming-matlab-like-style" class="anchor" aria-hidden="true" href="#example-13-linear-programming-matlab-like-style"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1.3: Linear programming (MATLAB-like style)</h5>
<p>You may also specify and solve the entire problem in one function call, using the
solver-independent <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> package.</p>
<p>Julia code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MathProgBase, Gurobi

f <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>]
A <span class="pl-k">=</span> [<span class="pl-c1">50.</span> <span class="pl-c1">24.</span>; <span class="pl-c1">30.</span> <span class="pl-c1">33.</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">2400.</span>, <span class="pl-c1">2100.</span>]
lb <span class="pl-k">=</span> [<span class="pl-c1">5.</span>, <span class="pl-c1">45.</span>]

<span class="pl-c"><span class="pl-c">#</span> pass params as keyword arguments to GurobiSolver</span>
solution <span class="pl-k">=</span> <span class="pl-c1">linprog</span>(f, A, <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, b, lb, <span class="pl-c1">Inf</span>, <span class="pl-c1">GurobiSolver</span>(Presolve<span class="pl-k">=</span><span class="pl-c1">0</span>))</pre></div>
<h5><a id="user-content-example-14-linear-programming-with-jump-algebraic-model" class="anchor" aria-hidden="true" href="#example-14-linear-programming-with-jump-algebraic-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1.4: Linear programming with JuMP (Algebraic model)</h5>
<p>Using <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a>, we can specify linear programming problems using a more
natural algebraic approach.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Gurobi

<span class="pl-c"><span class="pl-c">#</span> pass params as keyword arguments to GurobiSolver</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(Gurobi<span class="pl-k">.</span>Optimizer, Presolve<span class="pl-k">=</span><span class="pl-c1">0</span>))

<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">@variable</span>(model, y <span class="pl-k">&gt;=</span> <span class="pl-c1">45</span>)

<span class="pl-c1">@objective</span>(model, Min, x <span class="pl-k">+</span> y)
<span class="pl-c1">@constraint</span>(model, <span class="pl-c1">50</span>x <span class="pl-k">+</span> <span class="pl-c1">24</span>y <span class="pl-k">&lt;=</span> <span class="pl-c1">2400</span>)
<span class="pl-c1">@constraint</span>(model, <span class="pl-c1">30</span>x <span class="pl-k">+</span> <span class="pl-c1">33</span>y <span class="pl-k">&lt;=</span> <span class="pl-c1">2100</span>)

<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Optimal objective: <span class="pl-pds">"</span></span>, <span class="pl-c1">objective_value</span>(model),
	<span class="pl-s"><span class="pl-pds">"</span>. x = <span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(x), <span class="pl-s"><span class="pl-pds">"</span> y = <span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(y))</pre></div>
<h3><a id="user-content-quadratic-programming-examples" class="anchor" aria-hidden="true" href="#quadratic-programming-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quadratic programming Examples</h3>
<p>Problem formulation:</p>
<pre><code>minimize x^2 + xy + y^2 + yz + z^2

s.t.  x + 2 y + 3 z &gt;= 4
      x +   y       &gt;= 1
</code></pre>
<h5><a id="user-content-example-21-high-level-quadratic-programming-api" class="anchor" aria-hidden="true" href="#example-21-high-level-quadratic-programming-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2.1: High-level Quadratic Programming API</h5>
<p>using the function <code>gurobi_model</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model <span class="pl-k">=</span> <span class="pl-c1">gurobi_model</span>(env;
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>qp_01<span class="pl-pds">"</span></span>,
        H <span class="pl-k">=</span> [<span class="pl-c1">2.</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.</span>; <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">1.</span>; <span class="pl-c1">0.</span> <span class="pl-c1">1.</span> <span class="pl-c1">2.</span>],
        f <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>],
        A <span class="pl-k">=</span> <span class="pl-k">-</span>[<span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">3.</span>; <span class="pl-c1">1.</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.</span>],
        b <span class="pl-k">=</span> <span class="pl-k">-</span>[<span class="pl-c1">4.</span>, <span class="pl-c1">1.</span>])
<span class="pl-c1">optimize</span>(model)</pre></div>
<h5><a id="user-content-example-22-low-level-quadratic-programming-api" class="anchor" aria-hidden="true" href="#example-22-low-level-quadratic-programming-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2.2: Low-level Quadratic Programming API</h5>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, <span class="pl-s"><span class="pl-pds">"</span>qp_01<span class="pl-pds">"</span></span>)

<span class="pl-c1">add_cvars!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>], <span class="pl-c1">0.</span>, <span class="pl-c1">Inf</span>)
<span class="pl-c1">update_model!</span>(model)

 <span class="pl-c"><span class="pl-c">#</span> add quadratic terms: x^2, x * y, y^2</span>
 <span class="pl-c"><span class="pl-c">#</span> add_qpterms!(model, rowinds, colinds, coeffs)</span>
<span class="pl-c1">add_qpterms!</span>(model, [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>])

 <span class="pl-c"><span class="pl-c">#</span> add linear constraints</span>
<span class="pl-c1">add_constr!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>], <span class="pl-s"><span class="pl-pds">'</span>&gt;<span class="pl-pds">'</span></span>, <span class="pl-c1">4.</span>)
<span class="pl-c1">add_constr!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>], <span class="pl-s"><span class="pl-pds">'</span>&gt;<span class="pl-pds">'</span></span>, <span class="pl-c1">1.</span>)
<span class="pl-c1">update_model!</span>(model)

<span class="pl-c1">optimize</span>(model)</pre></div>
<h3><a id="user-content-mixed-integer-programming" class="anchor" aria-hidden="true" href="#mixed-integer-programming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixed Integer Programming</h3>
<p>This package also supports mixed integer programming.</p>
<p>Problem formulation:</p>
<pre><code>maximize x + 2 y + 5 z

s.t.  x + y + z &lt;= 10
      x + 2 y + z &lt;= 15
      x is continuous: 0 &lt;= x &lt;= 5
      y is integer: 0 &lt;= y &lt;= 10
      z is binary
</code></pre>
<h5><a id="user-content-example-31-low-level-mip-api" class="anchor" aria-hidden="true" href="#example-31-low-level-mip-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 3.1: Low-level MIP API</h5>
<p>Julia code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, <span class="pl-s"><span class="pl-pds">"</span>mip_01<span class="pl-pds">"</span></span>, <span class="pl-c1">:maximize</span>)

 <span class="pl-c"><span class="pl-c">#</span> add continuous variable</span>
<span class="pl-c1">add_cvar!</span>(model, <span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">5.</span>)  <span class="pl-c"><span class="pl-c">#</span> x</span>

 <span class="pl-c"><span class="pl-c">#</span> add integer variable</span>
<span class="pl-c1">add_ivar!</span>(model, <span class="pl-c1">2.</span>, <span class="pl-c1">0</span>, <span class="pl-c1">10</span>)   <span class="pl-c"><span class="pl-c">#</span> y</span>

 <span class="pl-c"><span class="pl-c">#</span> add binary variable</span>
<span class="pl-c1">add_bvar!</span>(model, <span class="pl-c1">5.</span>)          <span class="pl-c"><span class="pl-c">#</span> z</span>

 <span class="pl-c"><span class="pl-c">#</span> have the variables incorporated into the model</span>
<span class="pl-c1">update_model!</span>(model)

<span class="pl-c1">add_constr!</span>(model, <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>), <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-c1">10.</span>)
<span class="pl-c1">add_constr!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">1.</span>], <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-c1">15.</span>)

<span class="pl-c1">optimize</span>(model)</pre></div>
<p>Note that you can use <code>add_ivars!</code> and <code>add_bvars!</code> to add multiple integer or binary variables in batch.</p>
<h5><a id="user-content-example-32-mip-using-jump-with-gurobi" class="anchor" aria-hidden="true" href="#example-32-mip-using-jump-with-gurobi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 3.2: MIP using JuMP with Gurobi</h5>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Gurobi

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)

<span class="pl-c1">@variables</span>(model, <span class="pl-k">begin</span>
    <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>
    <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>, Int
    z, Bin
<span class="pl-k">end</span>)

<span class="pl-c1">@objective</span>(model, Max, x <span class="pl-k">+</span> <span class="pl-c1">2</span>y <span class="pl-k">+</span> <span class="pl-c1">5</span>z)
<span class="pl-c1">@constraint</span>(model, x <span class="pl-k">+</span> y <span class="pl-k">+</span> z <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)
<span class="pl-c1">@constraint</span>(model, x <span class="pl-k">+</span> <span class="pl-c1">2</span>y <span class="pl-k">+</span> z <span class="pl-k">&lt;=</span> <span class="pl-c1">15</span>)

<span class="pl-c1">optimize!</span>(model)</pre></div>
<h3><a id="user-content-quadratic-constraints" class="anchor" aria-hidden="true" href="#quadratic-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quadratic constraints</h3>
<p>The <code>add_qconstr!</code> function may be used to add quadratic constraints to a model.</p>
<p>Problem formulation:</p>
<pre><code>maximize x + y

s.t.  x, y &gt;= 0
      x^2 + y^2 &lt;= 1
</code></pre>
<p>Julia code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gurobi

env <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Model</span>(env, <span class="pl-s"><span class="pl-pds">"</span>qcqp_01<span class="pl-pds">"</span></span>, <span class="pl-c1">:maximize</span>)

<span class="pl-c1">add_cvars!</span>(model, [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>], <span class="pl-c1">0.</span>, <span class="pl-c1">Inf</span>)
<span class="pl-c1">update_model!</span>(model)

 <span class="pl-c"><span class="pl-c">#</span> add_qpconstr!(model, linearindices, linearcoeffs, qrowinds, qcolinds, qcoeffs, sense, rhs)</span>
<span class="pl-c1">add_qconstr!</span>(model, [], [], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">1.</span>], <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">update_model!</span>(model)

<span class="pl-c1">optimize</span>(model)</pre></div>
<p>SOCP constraints of the form <code>x'x &lt;= y^2</code> and <code>x'x &lt;= yz</code> can be added using this method as well.</p>
</article></div>