<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><strong>Gurobi.jl underwent a major rewrite between versions 0.8.1 and 0.9.0. Users of
JuMP should see no breaking changes, but if you used the lower-level C API
(e.g., for callbacks), you will need to update your code accordingly. For a full
description of the changes, read <a href="https://discourse.julialang.org/t/ann-upcoming-breaking-changes-to-cplex-jl-and-gurobi-jl/47814" rel="nofollow">this discourse post</a>.</strong></p>
<p><strong>To revert to the old API, use:</strong></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(Pkg.PackageSpec(name = &quot;Gurobi&quot;, version = v&quot;0.8&quot;))
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.8<span class="pl-pds">"</span></span>))</pre></div>
<p><strong>Then restart Julia for the change to take effect.</strong></p>
<h1><a id="user-content-gurobijl" class="anchor" aria-hidden="true" href="#gurobijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gurobi.jl</h1>
<p>Gurobi.jl is a wrapper for the <a href="https://www.gurobi.com" rel="nofollow">Gurobi Optimizer</a>.</p>
<p>It has two components:</p>
<ul>
<li>a thin wrapper around the complete C API</li>
<li>an interface to <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a></li>
</ul>
<p>The C API can be accessed via <code>Gurobi.GRBxx</code> functions, where the names and
arguments are identical to the C API. See the <a href="https://www.gurobi.com/documentation/9.0/refman/c_api_details.html" rel="nofollow">Gurobi documentation</a>
for details.</p>
<p><em>The Gurobi wrapper for Julia is community driven and not officially supported
by Gurobi. If you are a commercial customer interested in official support for
Julia from Gurobi, let them know!</em></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>Minimum version requirement:</strong> Gurobi.jl requires Gurobi version 9.0 or 9.1.</p>
<p>First, obtain a license of Gurobi and install Gurobi solver, following the
instructions on <a href="http://www.gurobi.com" rel="nofollow">Gurobi's website</a>. Then, set the
<code>GUROBI_HOME</code> environment variable as appropriate and run <code>Pkg.add("Gurobi")</code>,
the <code>Pkg.build("Gurobi")</code>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# On Windows, this might be
ENV[&quot;GUROBI_HOME&quot;] = &quot;C:\\Program Files\\gurobi910\\win64&quot;
# ... or perhaps ...
ENV[&quot;GUROBI_HOME&quot;] = &quot;C:\\gurobi910\\win64&quot;
import Pkg
Pkg.add(&quot;Gurobi&quot;)
Pkg.build(&quot;Gurobi&quot;)

# On Mac, this might be
ENV[&quot;GUROBI_HOME&quot;] = &quot;/Library/gurobi910/mac64&quot;
import Pkg
Pkg.add(&quot;Gurobi&quot;)
Pkg.build(&quot;Gurobi&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> On Windows, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GUROBI_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>Program Files<span class="pl-cce">\\</span>gurobi910<span class="pl-cce">\\</span>win64<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> ... or perhaps ...</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GUROBI_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>gurobi910<span class="pl-cce">\\</span>win64<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> On Mac, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GUROBI_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Library/gurobi910/mac64<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Gurobi<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Note: your path may differ. Check which folder you installed Gurobi in, and
update the path accordingly.</strong></p>
<p>By default, <code>build</code>ing <em>Gurobi.jl</em> will fail if the Gurobi library is not found.
This may not be desirable in certain cases, for example when part of a package's
test suite uses Gurobi as an optional test dependency, but Gurobi cannot be
installed on a CI server running the test suite. To support this use case, the
<code>GUROBI_JL_SKIP_LIB_CHECK</code> environment variable may be set (to any value) to
make <em>Gurobi.jl</em> installable (but not usable).</p>
<h2><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use with JuMP</h2>
<p>We highly recommend that you use the <em>Gurobi.jl</em> package with higher level
packages such as <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>.</p>
<p>This can be done using the <code>Gurobi.Optimizer</code> object. Here is how to create a
<em>JuMP</em> model that uses Gurobi as the solver.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Gurobi

model = Model(Gurobi.Optimizer)
set_optimizer_attribute(model, &quot;TimeLimit&quot;, 100)
set_optimizer_attribute(model, &quot;Presolve&quot;, 0)
"><pre><span class="pl-k">using</span> JuMP, Gurobi

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>TimeLimit<span class="pl-pds">"</span></span>, <span class="pl-c1">100</span>)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Presolve<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<p>See the <a href="https://www.gurobi.com/documentation/current/refman/parameters.html" rel="nofollow">Gurobi Documentation</a>
for a list and description of allowable parameters.</p>
<h2><a id="user-content-reusing-the-same-gurobi-environment-for-multiple-solves" class="anchor" aria-hidden="true" href="#reusing-the-same-gurobi-environment-for-multiple-solves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reusing the same Gurobi environment for multiple solves</h2>
<p>When using this package via other packages such as <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>,
the default behavior is to obtain a new Gurobi license token every time a model
is created. If you are using Gurobi in a setting where the number of concurrent
Gurobi uses is limited (e.g. <a href="http://www.gurobi.com/products/licensing-pricing/licensing-overview" rel="nofollow">"Single-Use" or "Floating-Use" licenses</a>),
you might instead prefer to obtain a single license token that is shared by all
models that your program solves. You can do this by passing a Gurobi Environment
object as the first parameter to <code>Gurobi.Optimizer</code>. For example, the follow
code snippet solves multiple problems with JuMP using the same license token:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Gurobi

const GRB_ENV = Gurobi.Env()

model1 = Model(() -&gt; Gurobi.Optimizer(GRB_ENV))

# The solvers can have different options too
model2 = Model(() -&gt; Gurobi.Optimizer(GRB_ENV))
set_optimizer_attribute(model2, &quot;OutputFlag&quot;, 0)
"><pre><span class="pl-k">using</span> JuMP, Gurobi

<span class="pl-k">const</span> GRB_ENV <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()

model1 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(GRB_ENV))

<span class="pl-c"><span class="pl-c">#</span> The solvers can have different options too</span>
model2 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(GRB_ENV))
<span class="pl-c1">set_optimizer_attribute</span>(model2, <span class="pl-s"><span class="pl-pds">"</span>OutputFlag<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<h2><a id="user-content-accessing-gurobi-specific-attributes-via-jump" class="anchor" aria-hidden="true" href="#accessing-gurobi-specific-attributes-via-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Gurobi-specific attributes via JuMP</h2>
<p>You can get and set Gurobi-specific variable, constraint, and model attributes
via JuMP as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Gurobi

model = direct_model(Gurobi.Optimizer())
@variable(model, x &gt;= 0)
@constraint(model, c, 2x &gt;= 1)
@objective(model, Min, x)
MOI.set(model, Gurobi.ConstraintAttribute(&quot;Lazy&quot;), c, 2)
optimize!(model)

MOI.get(model, Gurobi.VariableAttribute(&quot;LB&quot;), x)  # Returns 0.0
MOI.get(model, Gurobi.ModelAttribute(&quot;NumConstrs&quot;)) # Returns 1
"><pre><span class="pl-k">using</span> JuMP, Gurobi

model <span class="pl-k">=</span> <span class="pl-c1">direct_model</span>(Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>())
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@constraint</span>(model, c, <span class="pl-c1">2</span>x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@objective</span>(model, Min, x)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">ConstraintAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>Lazy<span class="pl-pds">"</span></span>), c, <span class="pl-c1">2</span>)
<span class="pl-c1">optimize!</span>(model)

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">VariableAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>LB<span class="pl-pds">"</span></span>), x)  <span class="pl-c"><span class="pl-c">#</span> Returns 0.0</span>
MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">ModelAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>NumConstrs<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> Returns 1</span></pre></div>
<p>Note that we are using <a href="https://jump.dev/JuMP.jl/v0.20.0/solvers/#Direct-mode-1" rel="nofollow">JuMP in direct-mode</a>.</p>
<p>A complete list of supported Gurobi attributes can be found in
<a href="https://www.gurobi.com/documentation/8.1/refman/attributes.html" rel="nofollow">their online documentation</a>.</p>
<h2><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Callbacks</h2>
<p>Here is an example using Gurobi's solver-specific callbacks.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Gurobi, Test

model = direct_model(Gurobi.Optimizer())
@variable(model, 0 &lt;= x &lt;= 2.5, Int)
@variable(model, 0 &lt;= y &lt;= 2.5, Int)
@objective(model, Max, y)
cb_calls = Cint[]
function my_callback_function(cb_data, cb_where::Cint)
    # You can reference variables outside the function as normal
    push!(cb_calls, cb_where)
    # You can select where the callback is run
    if cb_where != GRB_CB_MIPSOL &amp;&amp; cb_where != GRB_CB_MIPNODE
        return
    end
    # You can query a callback attribute using GRBcbget
    if cb_where == GRB_CB_MIPNODE
        resultP = Ref{Cint}()
        GRBcbget(cb_data, cb_where, GRB_CB_MIPNODE_STATUS, resultP)
        if resultP[] != GRB_OPTIMAL
            return  # Solution is something other than optimal.
        end
    end
    # Before querying `callback_value`, you must call:
    Gurobi.load_callback_variable_primal(cb_data, cb_where)
    x_val = callback_value(cb_data, x)
    y_val = callback_value(cb_data, y)
    # You can submit solver-independent MathOptInterface attributes such as
    # lazy constraints, user-cuts, and heuristic solutions.
    if y_val - x_val &gt; 1 + 1e-6
        con = @build_constraint(y - x &lt;= 1)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    elseif y_val + x_val &gt; 3 + 1e-6
        con = @build_constraint(y + x &lt;= 3)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    end
    if rand() &lt; 0.1
        # You can terminate the callback as follows:
        GRBterminate(backend(model))
    end
    return
end
# You _must_ set this parameter if using lazy constraints.
MOI.set(model, MOI.RawParameter(&quot;LazyConstraints&quot;), 1)
MOI.set(model, Gurobi.CallbackFunction(), my_callback_function)
optimize!(model)
@test termination_status(model) == MOI.OPTIMAL
@test primal_status(model) == MOI.FEASIBLE_POINT
@test value(x) == 1
@test value(y) == 2
"><pre><span class="pl-k">using</span> JuMP, Gurobi, Test

model <span class="pl-k">=</span> <span class="pl-c1">direct_model</span>(Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>())
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@objective</span>(model, Max, y)
cb_calls <span class="pl-k">=</span> Cint[]
<span class="pl-k">function</span> <span class="pl-en">my_callback_function</span>(cb_data, cb_where<span class="pl-k">::</span><span class="pl-c1">Cint</span>)
    <span class="pl-c"><span class="pl-c">#</span> You can reference variables outside the function as normal</span>
    <span class="pl-c1">push!</span>(cb_calls, cb_where)
    <span class="pl-c"><span class="pl-c">#</span> You can select where the callback is run</span>
    <span class="pl-k">if</span> cb_where <span class="pl-k">!=</span> GRB_CB_MIPSOL <span class="pl-k">&amp;&amp;</span> cb_where <span class="pl-k">!=</span> GRB_CB_MIPNODE
        <span class="pl-k">return</span>
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> You can query a callback attribute using GRBcbget</span>
    <span class="pl-k">if</span> cb_where <span class="pl-k">==</span> GRB_CB_MIPNODE
        resultP <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cint}</span>()
        <span class="pl-c1">GRBcbget</span>(cb_data, cb_where, GRB_CB_MIPNODE_STATUS, resultP)
        <span class="pl-k">if</span> resultP[] <span class="pl-k">!=</span> GRB_OPTIMAL
            <span class="pl-k">return</span>  <span class="pl-c"><span class="pl-c">#</span> Solution is something other than optimal.</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> Before querying `callback_value`, you must call:</span>
    Gurobi<span class="pl-k">.</span><span class="pl-c1">load_callback_variable_primal</span>(cb_data, cb_where)
    x_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, x)
    y_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, y)
    <span class="pl-c"><span class="pl-c">#</span> You can submit solver-independent MathOptInterface attributes such as</span>
    <span class="pl-c"><span class="pl-c">#</span> lazy constraints, user-cuts, and heuristic solutions.</span>
    <span class="pl-k">if</span> y_val <span class="pl-k">-</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">-</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">elseif</span> y_val <span class="pl-k">+</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">+</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">0.1</span>
        <span class="pl-c"><span class="pl-c">#</span> You can terminate the callback as follows:</span>
        <span class="pl-c1">GRBterminate</span>(<span class="pl-c1">backend</span>(model))
    <span class="pl-k">end</span>
    <span class="pl-k">return</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> You _must_ set this parameter if using lazy constraints.</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>LazyConstraints<span class="pl-pds">"</span></span>), <span class="pl-c1">1</span>)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, Gurobi<span class="pl-k">.</span><span class="pl-c1">CallbackFunction</span>(), my_callback_function)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@test</span> <span class="pl-c1">termination_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL
<span class="pl-c1">@test</span> <span class="pl-c1">primal_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>FEASIBLE_POINT
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(x) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(y) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
<p>See the <a href="https://www.gurobi.com/documentation/9.0/refman/cb_codes.html" rel="nofollow">Gurobi documentation</a>
for other information that can be queried with <code>GRBcbget</code>.</p>
<h3><a id="user-content-common-performance-pitfall-with-jump" class="anchor" aria-hidden="true" href="#common-performance-pitfall-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Common Performance Pitfall with JuMP</h3>
<p>Gurobi's API works differently than most solvers. Any changes to the model are
not applied immediately, but instead go sit in a internal buffer (making any
modifications appear to be instantaneous) waiting for a call to <a href="https://www.gurobi.com/documentation/9.0/refman/c_updatemodel.html" rel="nofollow"><code>GRBupdatemodel</code></a>
(where the work is  done).</p>
<p>This leads to a common performance pitfall that has the following message as its
main symptom:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Warning: excessive time spent in model updates. Consider calling update less
frequently.
"><pre><code>Warning: excessive time spent in model updates. Consider calling update less
frequently.
</code></pre></div>
<p>This often means the JuMP program was structured in such a way that Gurobi.jl
ends up calling <code>GRBupdatemodel</code> each iteration of a loop. Usually, it is
possible (and easy) to restructure the JuMP program in a way it stays
solver-agnostic and has a close-to-ideal performance with Gurobi.</p>
<p>To guide such restructuring it is good to keep in mind the following bits of
information:</p>
<ol>
<li><code>GRBupdatemodel</code> is only called if changes were done since last
<code>GRBupdatemodel</code> (i.e., the internal buffer is not empty).</li>
<li><code>GRBupdatemodel</code> is called when <code>JuMP.optimize!</code> is called, but this often is
not the source of the problem.</li>
<li><code>GRBupdatemodel</code> <em>may</em> be called when <em>ANY</em> model attribute is queried <em>even
if that specific attribute was not changed</em>, and this often the source of the
problem.</li>
<li>The worst-case scenario is, therefore, a loop of modify-query-modify-query,
even if what is being modified and what is being queried are two completely
distinct things.</li>
</ol>
<p>As an example, prefer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# GOOD
model = Model(Gurobi.Optimizer)
@variable(model, x[1:100] &gt;= 0)
# All modifications are done before any queries.
for i = 1:100
    set_upper_bound(x[i], i)
end
for i = 1:100
    # Only the first `lower_bound` query may trigger an `GRBupdatemodel`.
    println(lower_bound(x[i]))
end
"><pre><span class="pl-c"><span class="pl-c">#</span> GOOD</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c"><span class="pl-c">#</span> All modifications are done before any queries.</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c1">set_upper_bound</span>(x[i], i)
<span class="pl-k">end</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c"><span class="pl-c">#</span> Only the first `lower_bound` query may trigger an `GRBupdatemodel`.</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">lower_bound</span>(x[i]))
<span class="pl-k">end</span></pre></div>
<p>to:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# BAD
model = Model(Gurobi.Optimizer)
@variable(model, x[1:100] &gt;= 0)
for i = 1:100
    set_upper_bound(x[i], i)
    # `GRBupdatemodel` called on each iteration of this loop.
    println(lower_bound(x[i]))
end
"><pre><span class="pl-c"><span class="pl-c">#</span> BAD</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c1">set_upper_bound</span>(x[i], i)
    <span class="pl-c"><span class="pl-c">#</span> `GRBupdatemodel` called on each iteration of this loop.</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">lower_bound</span>(x[i]))
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-using-gurobi-v90-and-you-got-an-error-like-q-not-psd" class="anchor" aria-hidden="true" href="#using-gurobi-v90-and-you-got-an-error-like-q-not-psd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using Gurobi v9.0 and you got an error like <code>Q not PSD</code>?</h2>
<p>You need to set the NonConvex parameter:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Model(Gurobi.Optimizer)
set_optimizer_attribute(model, &quot;NonConvex&quot;, 2)
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Gurobi<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>NonConvex<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)</pre></div>
</article></div>