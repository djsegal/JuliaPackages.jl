<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-minhash" class="anchor" aria-hidden="true" href="#minhash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MinHash</h1>
<p><a href="https://jakobnissen.github.io/MinHash.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jakobnissen.github.io/MinHash.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/jakobnissen/MinHash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cd9ebc9e28d6fa691c1708b2aba01301c8f192b3/68747470733a2f2f7472617669732d63692e636f6d2f6a616b6f626e697373656e2f4d696e486173682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jakobnissen/MinHash.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/MinHash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0c3801c83f37fe2226318326e5a35dfb9c5d5b8e/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f4d696e486173682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/MinHash.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><em>Efficient minhashing in Julia</em></p>
<p><code>MinHash.jl</code> offers generic, efficient MinHash sketching, and functions to efficiently compute the number of shared minhashes between sketches. This package is envisioned to be used as a dependency for other Julia packages that needs minhashing.</p>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interface</h2>
<h3><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Types</h3>
<p><strong><code>MinHasher{F}(s::Integer)</code></strong></p>
<p>A MinHasher object performs the minhashing, using function <code>F</code> as a hash function, and storing the <code>s</code> smallest hashes only. <code>F</code> defaults to <code>Base.hash</code>.</p>
<p><strong><code>MinHashSketch(::MinHasher)</code></strong></p>
<p>Stores the information of a <code>MinHasher</code> (namely, the hash function, maximal number of hashes, and the hashes themselves) in a more efficient type. This type should be used to store the actual hashes.</p>
<h3><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods</h3>
<p><strong><code>update!(::MinHasher, it)</code></strong></p>
<p>Iterate over <code>it</code>, adding each element to the minhasher.</p>
<p><strong><code>sketch(F, it, s::Integer)</code></strong>
Hash all elements of <code>it</code> using function <code>F</code>, storing at most the <code>s</code> smallest hashes. Equivalent to:</p>
<pre><code>hasher = MinHasher{F}(s)
update!(hasher, it)
return MinHashSketch(hasher)
</code></pre>
<p><strong><code>sketch(it, s::Integer)</code></strong></p>
<p>Same as <code>sketch(Base.hash, it, s)</code></p>
<p><strong><code>intersectionlength(a::MinHashSketch, b::MinHashSketch)</code></strong></p>
<p>Efficiently compute the number of hashes both in <code>a</code> and <code>b</code>. Does not check that the hash functions for the two sketches are the same, result will be meaningless if they are not.</p>
<p><strong><code>intersectionlength(::AbstractVector{MinHashSketch})</code></strong></p>
<p>Efficiently compute a lower triangular matrix (of type <code>Matrix{Int}</code>) of shared hashes for all pairs in the input vector. For long vectors, this is much more efficient than calculating the distances pairwise.</p>
</article></div>