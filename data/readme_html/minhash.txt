<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-minhash" class="anchor" aria-hidden="true" href="#minhash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MinHash</h1>
<p dir="auto"><a href="https://jakobnissen.github.io/MinHash.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/jakobnissen/MinHash.jl/workflows/CI/badge.svg"><img src="https://github.com/jakobnissen/MinHash.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/MinHash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/26e05b4bd8d9fbb145b4bf4cd6ab028aa937a21bf9460e2a2b5cbe40c341755e/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f4d696e486173682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/MinHash.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Efficient minhashing in Julia</em></p>
<p dir="auto"><code>MinHash.jl</code> offers generic, efficient MinHash sketching, and functions to efficiently compute the number of shared minhashes between sketches. This package is envisioned to be used as a dependency for other Julia packages that needs minhashing.</p>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<h3 dir="auto"><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types</h3>
<p dir="auto"><strong><code>MinHasher{F}(s::Integer)</code></strong></p>
<p dir="auto">A MinHasher object performs the minhashing, using function <code>F</code> as a hash function, and storing the <code>s</code> smallest hashes only. <code>F</code> defaults to <code>Base.hash</code>.</p>
<p dir="auto"><strong><code>MinHashSketch(::MinHasher)</code></strong></p>
<p dir="auto">Stores the information of a <code>MinHasher</code> (namely, the hash function, maximal number of hashes, and the hashes themselves) in a more efficient type. This type should be used to store the actual hashes.</p>
<h3 dir="auto"><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h3>
<p dir="auto"><strong><code>update!(::MinHasher, it)</code></strong></p>
<p dir="auto">Iterate over <code>it</code>, adding each element to the minhasher.</p>
<p dir="auto"><strong><code>minhash(F, it, s::Integer)</code></strong>
Hash all elements of <code>it</code> using function <code>F</code>, storing at most the <code>s</code> smallest hashes. Equivalent to:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="hasher = MinHasher{F}(s)
update!(hasher, it)
return MinHashSketch(hasher)"><pre class="notranslate"><code>hasher = MinHasher{F}(s)
update!(hasher, it)
return MinHashSketch(hasher)
</code></pre></div>
<p dir="auto"><strong><code>minhash(it, s::Integer)</code></strong></p>
<p dir="auto">Same as <code>minhash(Base.hash, it, s)</code></p>
<p dir="auto"><strong><code>intersectionlength(a::MinHashSketch, b::MinHashSketch)</code></strong></p>
<p dir="auto">Efficiently compute the number of hashes both in <code>a</code> and <code>b</code>. Does not check that the hash functions for the two sketches are the same, result will be meaningless if they are not.</p>
<p dir="auto"><strong><code>intersectionlength(::AbstractVector{MinHashSketch})</code></strong></p>
<p dir="auto">Efficiently compute a lower triangular matrix (of type <code>Matrix{Int}</code>) of shared hashes for all pairs in the input vector. For long vectors, this is much more efficient than calculating the distances pairwise.</p>
</article></div>