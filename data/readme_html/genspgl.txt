<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-genspgljl" class="anchor" aria-hidden="true" href="#genspgljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GenSPGL.jl</h1>
<p>A Julia solver for large scale minimization problems using any provided norm.
GenSPGL supports implicit arrays(JOLI), explicit arrays, and functions as modelling
operators (<strong><strong>A</strong></strong>).</p>
<p>This code is an adaptation of Michael P. Friedlander, Ewout van den Berg, and
Aleksandr Aravkin's MATLAB program <a href="http://www.cs.ubc.ca/~mpf/spgl1/" rel="nofollow">SPGL1</a>.</p>
<p>Please note that while it is largely based off of SPGL1, this package is NOT a direct port of SPGL1. Various changes have been made to generalize the solver and make it more applicable to SLIM's research on large datasets.</p>
<p>Notable changes include:</p>
<ul>
<li><strong><strong>A</strong></strong> can be non-linear</li>
<li>L1 and L2 projections</li>
<li>Nuclear or L1 norms and their corresponding dual norms</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>GenSPGL requires the JOLI package, and the instructions below will add JOLI as well. Skip the lines adding JOLI if you already have it installed.</p>
<h3><a id="user-content-using-slim-registry-preferred-method" class="anchor" aria-hidden="true" href="#using-slim-registry-preferred-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using SLIM Registry (preferred method)</h3>
<p>First switch to package manager prompt (using ']') and add SLIM registry:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	registry add https://github.com/slimgroup/SLIMregistryJL.git
"><pre><code>	registry add https://github.com/slimgroup/SLIMregistryJL.git
</code></pre></div>
<p>Then still from package manager prompt add GenSPGL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	add GenSPGL
"><pre><code>	add GenSPGL
</code></pre></div>
<h3><a id="user-content-adding-without-slim-registry" class="anchor" aria-hidden="true" href="#adding-without-slim-registry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding without SLIM registry</h3>
<p>After switching to package manager prompt (using ']') type:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	add https://github.com/slimgroup/JOLI.jl.git
	add https://github.com/slimgroup/GenSPGL.jl.git
"><pre><code>	add https://github.com/slimgroup/JOLI.jl.git
	add https://github.com/slimgroup/GenSPGL.jl.git
</code></pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The scripts for the following examples have been included in the package in the package directory.
If you don't know the package directory, in the Julia REPL run</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="import GenSPGL; joinpath(dirname(pathof(GenSPGL)), &quot;..&quot;)
"><pre><code>import GenSPGL; joinpath(dirname(pathof(GenSPGL)), "..")
</code></pre></div>
<p>All paths in the rest of this document and relative to the package directory.</p>
<h3><a id="user-content-implicit-array-modelling-operators" class="anchor" aria-hidden="true" href="#implicit-array-modelling-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implicit Array Modelling Operators</h3>
<p><strong>/src/Examples/pres/jl_cs.jl</strong></p>
<p>The script solves a small compressive sensing problem using Basis Pursuit Denoise. Data is generated by applying a restriction operator, <strong>R</strong>, and the DCT as a sparsifying transform, <strong>S</strong>, on the sparse vector, <strong>x</strong>, such that:</p>
<p><strong>RSx</strong> = <strong>b</strong></p>
<p>To run the example start a Julia instance, load the GenSPGL module, and run the example by entering the following in the Julia REPL.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using GenSPGL
julia&gt; x, r, g, info, SNR = ex_cs()
"><pre><code>julia&gt; using GenSPGL
julia&gt; x, r, g, info, SNR = ex_cs()
</code></pre></div>
<p><code>ex_cs</code> computes the following problem.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
An example of using implicit JOLI operators to solve a system using GenSPGL
Use: x, r, g, info, SNR = jl_cs()
&quot;&quot;&quot;
function jl_cs()
    n = 1024
    k = 200

    # Create a system
    p = randperm(n)
    x0 = zeros(n)
    x0[p[1:k]] = sign.(randn(k))

    # Create a modelling op
    F = joDFT(n)

    # Create a restriction op
    ind = randperm(n)
    ind = ind[1:Int(floor(0.6*n))]
    R = joRestriction(n,ind)

    # Create data
    b = R*F*x0

    # Solve
    opts = spgOptions(optTol = 1e-4,
                     verbosity = 1)

    @time x, r, g, info = spgl1(R*F, vec(b), tau = 0., sigma = 1e-3, options = opts) 

    # Calc SNR of recovery
    SNR = -20*log10(norm(x0-x)/norm(x0));

    return x, r, g, info, SNR
end
"><pre><code>"""
An example of using implicit JOLI operators to solve a system using GenSPGL
Use: x, r, g, info, SNR = jl_cs()
"""
function jl_cs()
    n = 1024
    k = 200

    # Create a system
    p = randperm(n)
    x0 = zeros(n)
    x0[p[1:k]] = sign.(randn(k))

    # Create a modelling op
    F = joDFT(n)

    # Create a restriction op
    ind = randperm(n)
    ind = ind[1:Int(floor(0.6*n))]
    R = joRestriction(n,ind)

    # Create data
    b = R*F*x0

    # Solve
    opts = spgOptions(optTol = 1e-4,
                     verbosity = 1)

    @time x, r, g, info = spgl1(R*F, vec(b), tau = 0., sigma = 1e-3, options = opts) 

    # Calc SNR of recovery
    SNR = -20*log10(norm(x0-x)/norm(x0));

    return x, r, g, info, SNR
end
</code></pre></div>
<p>For additional information of the ouput, see the package documentation.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="help?&gt; spgl1
"><pre><code>help?&gt; spgl1
</code></pre></div>
<p>A MATLAB version of the script is provided to compare accuracy and performance.</p>
<h3><a id="user-content-factorization-based-rank-minimization" class="anchor" aria-hidden="true" href="#factorization-based-rank-minimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Factorization Based Rank Minimization</h3>
<p><strong>/src/Examples/compare/jl_complex.jl</strong></p>
<p>This example loads a subsampled frequency slice from a seismic data set, and recovers it using factorization based rank-minimization framework.</p>
<p>GenSPGL supports function handles as modelling operators given in place of explicit/implicit arrays. In addition to this, the package supports applying any norm on <strong>x</strong> by allowing users to define their own projection, dual norm, and primal norm functions. This can easily be done by creating an spgOptions type and changing the default options. Any unspecified parameters will be set to their default values, and if no spgOptions type is given to spgl1 the default options will be used.</p>
<p>In this example user defined projection, dual norm, and primal norm functions are used instead of the defaults.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="opts = spgOptions(project     = TraceNorm_project,
                  primal_norm = TraceNorm_primal,
                  dual_norm   = TraceNorm_dual)
"><pre><code>opts = spgOptions(project     = TraceNorm_project,
                  primal_norm = TraceNorm_primal,
                  dual_norm   = TraceNorm_dual)
</code></pre></div>
<p>To run the example, if you have not already done so, load GenSPGL</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using GenSPGL
"><pre><code>julia&gt; using GenSPGL
</code></pre></div>
<p>And call the example function</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; x, r, g, info = jl_complex()
"><pre><code>julia&gt; x, r, g, info = jl_complex()
</code></pre></div>
<p>In addition to returning the output, this function will write the results into the example directory as "xLS_jl.mat".</p>
<p><strong>/GenSPGL/src/Examples/compare/mat_complex.m</strong> solves the same problem using the MATLAB implementation of the code, and is provided as a means of comparison.</p>
<h2><a id="user-content-performance-notes" class="anchor" aria-hidden="true" href="#performance-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance Notes</h2>
<ul>
<li>
<p>GenSPGL is currently in development, so the module has not been precompiled. Measuring the perfomance of spgl1 the first time it is called is really measuring the perfomance of Julia's JIT compiler. To get a true sense of the packages perfomance, profile the code after it has been ran atleast once.</p>
</li>
<li>
<p>Julia calls Open BLAS for linear aglebra routines, and defaults to 16 threads. Each machine should be tested, but we have found that, in general, setting the number of threads to the number of memory channels gives the best performance. Open BLAS threads can be set using:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="  julia&gt; BLAS.set_num_threads()
"><pre><code>  julia&gt; BLAS.set_num_threads()
</code></pre></div>
</li>
</ul>
</article></div>