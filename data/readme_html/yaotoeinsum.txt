<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-yaotoeinsum" class="anchor" aria-hidden="true" href="#yaotoeinsum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>YaoToEinsum</h1>
<p dir="auto"><a href="https://github.com/QuantumBFS/YaoToEinsum.jl/actions"><img src="https://github.com/QuantumBFS/YaoToEinsum.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Convert Yao circuit to OMEinsum notation for tensor network based simulation.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">
YaoToEinsum is a  
    <a href="https://julialang.org" rel="nofollow">
        <img src="https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico" width="16em" style="max-width: 100%;">
        Julia Language
    </a>
      package. To install YaoToEinsum,
    please <a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">open
    Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command
</p>
<p dir="auto">For stable release</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add YaoToEinsum"><pre>pkg<span class="pl-k">&gt;</span> add YaoToEinsum</pre></div>
<p dir="auto">For current master</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add YaoToEinsum#master"><pre>pkg<span class="pl-k">&gt;</span> add YaoToEinsum<span class="pl-c"><span class="pl-c">#</span>master</span></pre></div>
<p dir="auto">If you have problem to install the package, please <a href="https://github.com/QuantumBFS/YaoToEinsum.jl/issues/new">file us an issue</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">This package contains one main function <code>yao2einsum(circuit; initial_state=Dict(), final_state=Dict())</code>.
It transform a <a href="https://github.com/QuantumBFS/Yao.jl"><code>Yao</code></a> circuit to a generalized tensor network (einsum) notation.
This function returns a 2-tuple of (einsum code, input tensors).
<code>initial_state</code> and <code>final_state</code> specifies the initial state and final state.
They can specified as a dictionary with integer keys, with value either integer or a single qubit register.
If a qubit of initial state or final state is not specified, the circuit will have open edges.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Yao, YaoToEinsum

julia&gt; using YaoExtensions: qft_circuit

julia&gt; n = 10;

julia&gt; circuit = qft_circuit(n);

# convert circuit (open in both left and right) to einsum notation (code) and tensors.
julia&gt; code, tensors = YaoToEinsum.yao2einsum(circuit);

# optimize contraction order, for more algorithms, please check `OMEinsumContractionOrders`.
julia&gt; optcode = optimize_code(code, uniformsize(code, 2), TreeSA(ntrials=1));

julia&gt; reshape(optcode(tensors...; size_info=uniformsize(code, 2)), 1&lt;&lt;n, 1&lt;&lt;n) ≈ Yao.mat(circuit)
true

# convert circuit (applied on product state `initial_state` and projected to output state `final_state`)
julia&gt; code, tensors = YaoToEinsum.yao2einsum(circuit;
        initial_state=Dict([i=&gt;0 for i=1:n]), final_state=Dict([i=&gt;0 for i=1:n]));

julia&gt; optcode = optimize_code(code, uniformsize(code, 2), TreeSA(ntrials=1));

julia&gt; optcode(tensors...; size_info=uniformsize(code, 2))[] ≈ Yao.zero_state(n)' * (Yao.zero_state(n) |&gt; circuit)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Yao, YaoToEinsum

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> YaoExtensions<span class="pl-k">:</span> qft_circuit

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">10</span>;

julia<span class="pl-k">&gt;</span> circuit <span class="pl-k">=</span> <span class="pl-c1">qft_circuit</span>(n);

<span class="pl-c"><span class="pl-c">#</span> convert circuit (open in both left and right) to einsum notation (code) and tensors.</span>
julia<span class="pl-k">&gt;</span> code, tensors <span class="pl-k">=</span> YaoToEinsum<span class="pl-k">.</span><span class="pl-c1">yao2einsum</span>(circuit);

<span class="pl-c"><span class="pl-c">#</span> optimize contraction order, for more algorithms, please check `OMEinsumContractionOrders`.</span>
julia<span class="pl-k">&gt;</span> optcode <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>), <span class="pl-c1">TreeSA</span>(ntrials<span class="pl-k">=</span><span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">optcode</span>(tensors<span class="pl-k">...</span>; size_info<span class="pl-k">=</span><span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>)), <span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>n, <span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>n) <span class="pl-k">≈</span> Yao<span class="pl-k">.</span><span class="pl-c1">mat</span>(circuit)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> convert circuit (applied on product state `initial_state` and projected to output state `final_state`)</span>
julia<span class="pl-k">&gt;</span> code, tensors <span class="pl-k">=</span> YaoToEinsum<span class="pl-k">.</span><span class="pl-c1">yao2einsum</span>(circuit;
        initial_state<span class="pl-k">=</span><span class="pl-c1">Dict</span>([i<span class="pl-k">=&gt;</span><span class="pl-c1">0</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n]), final_state<span class="pl-k">=</span><span class="pl-c1">Dict</span>([i<span class="pl-k">=&gt;</span><span class="pl-c1">0</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n]));

julia<span class="pl-k">&gt;</span> optcode <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>), <span class="pl-c1">TreeSA</span>(ntrials<span class="pl-k">=</span><span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">optcode</span>(tensors<span class="pl-k">...</span>; size_info<span class="pl-k">=</span><span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))[] <span class="pl-k">≈</span> Yao<span class="pl-k">.</span><span class="pl-c1">zero_state</span>(n)<span class="pl-k">'</span> <span class="pl-k">*</span> (Yao<span class="pl-k">.</span><span class="pl-c1">zero_state</span>(n) <span class="pl-k">|&gt;</span> circuit)
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>
<p dir="auto">Simulating quantum computation by contracting tensor networks
<a href="https://arxiv.org/abs/quant-ph/0511069" rel="nofollow">https://arxiv.org/abs/quant-ph/0511069</a></p>
</li>
<li>
<p dir="auto">Simulating the Sycamore quantum supremacy circuits
<a href="https://arxiv.org/abs/2103.03074" rel="nofollow">https://arxiv.org/abs/2103.03074</a></p>
</li>
<li>
<p dir="auto">Solving the sampling problem of the Sycamore quantum supremacy circuits
<a href="https://arxiv.org/abs/2111.03011" rel="nofollow">https://arxiv.org/abs/2111.03011</a></p>
</li>
</ul>
</article></div>