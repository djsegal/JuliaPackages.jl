<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/EconometricsBySimulation/AbstractLogic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e77bfcddf1b5c44b6de049cc653bfb0ce8b5614/68747470733a2f2f7472617669732d63692e6f72672f45636f6e6f6d657472696373427953696d756c6174696f6e2f41627374726163744c6f6769632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/EconometricsBySimulation/AbstractLogic.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/EconometricsBySimulation/AbstractLogic.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/852ebdd73d153d5d2e8291572cbb69813554a81d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f45636f6e6f6d657472696373427953696d756c6174696f6e2f41627374726163744c6f6769632e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/EconometricsBySimulation/AbstractLogic.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://econometricsbysimulation.github.io/AbstractLogic.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation-Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-abstractlogicjl" class="anchor" aria-hidden="true" href="#abstractlogicjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AbstractLogic.jl</h1>
<p>An Abstract Reasoning Logic Interface for Julia.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The AbstractLogic package can be installed using the following commands after entering the package REPL by typing <code>]</code> in the console.</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add AbstractLogic</pre></div>
<p>Leave the package REPL by hitting <code>&lt;backspace&gt;</code>. Now you can use the <code>AbstractLogic</code> package anytime by typing <code>using AbstractLogic</code> in Julia.</p>
<h2><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Simple Example</h2>
<p>A typical kind of problem which one might have encountered in an aptitude test
at some point in ones life might look like the following.</p>
<pre><code>Peter is younger than Susan. Sam is younger than Susan but older than Ali.
Li is older than Ali younger than Peter.

Who must be the oldest?
a) Peter b) Susan c) Sam d) Li e) Ali f) Cannot Tell

Who must be the youngest?
a) Peter b) Susan c) Sam d) Li e) Ali f) Cannot Tell

Who could be the same age as Li?
a) Peter b) Susan c) Sam d) Ali e) Nobody f) Cannot Tell
</code></pre>
<p>The package AbstractLogic provides a tool for easily evaluating such problems.
First lets load in the feasible matches. Because there are 5 people in the
problem we can assign them 5 age categories which represent cardinal ordered
ages.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AbstractLogic
Start the repl <span class="pl-k">in</span> command prompt by typing <span class="pl-s"><span class="pl-pds">`</span>=<span class="pl-pds">`</span></span>.

abstractlogic<span class="pl-k">&gt;</span> Peter, Susan, Sam, Li, Ali <span class="pl-k">∈</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>
Peter, Susan, Sam, Li, Ali <span class="pl-k">∈</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>       feasible outcomes <span class="pl-c1">3125</span> ✓        :<span class="pl-c1">4</span> <span class="pl-c1">2</span> <span class="pl-c1">4</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>

abstractlogic<span class="pl-k">&gt;</span> Peter <span class="pl-k">&lt;</span> Susan; Sam <span class="pl-k">&lt;</span> Susan
Peter <span class="pl-k">&lt;</span> Susan            feasible outcomes <span class="pl-c1">1250</span> ✓        :<span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">4</span>
Sam <span class="pl-k">&lt;</span> Susan              feasible outcomes <span class="pl-c1">750</span> ✓         :<span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">4</span>

abstractlogic<span class="pl-k">&gt;</span> Sam <span class="pl-k">&gt;</span> Ali; Li <span class="pl-k">&gt;</span> Ali; Li <span class="pl-k">&lt;</span> Peter
Sam <span class="pl-k">&gt;</span> Ali                feasible outcomes <span class="pl-c1">175</span> ✓         :<span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">1</span>
Li <span class="pl-k">&gt;</span> Ali                 feasible outcomes <span class="pl-c1">121</span> ✓         :<span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">2</span> <span class="pl-c1">5</span> <span class="pl-c1">1</span>
Li <span class="pl-k">&lt;</span> Peter               feasible outcomes <span class="pl-c1">13</span> ✓          :<span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">4</span> <span class="pl-c1">3</span> <span class="pl-c1">2</span>

abstractlogic<span class="pl-k">&gt;</span> search {{i}} <span class="pl-k">&gt;</span> {{<span class="pl-k">!</span>i}}
Checking<span class="pl-k">:</span> Peter <span class="pl-k">&gt;</span> Susan
Checking<span class="pl-k">:</span> Peter <span class="pl-k">&gt;</span> Sam
<span class="pl-k">...</span>
Checking<span class="pl-k">:</span> Ali <span class="pl-k">&gt;</span> Sam
Checking<span class="pl-k">:</span> Ali <span class="pl-k">&gt;</span> Li

<span class="pl-c1">:Peter</span> is a not match with <span class="pl-c1">0</span> feasible combinations out of <span class="pl-c1">13.</span>
<span class="pl-c1">:Susan</span> is a match with <span class="pl-c1">13</span> feasible combinations out of <span class="pl-c1">13.</span>
<span class="pl-c1">:Sam</span> is a not match with <span class="pl-c1">0</span> feasible combinations out of <span class="pl-c1">13.</span>
<span class="pl-c1">:Li</span> is a not match with <span class="pl-c1">0</span> feasible combinations out of <span class="pl-c1">13.</span>
<span class="pl-c1">:Ali</span> is a not match with <span class="pl-c1">0</span> feasible combinations out of <span class="pl-c1">13.</span></pre></div>
<h2><a id="user-content-more-interesting-examples" class="anchor" aria-hidden="true" href="#more-interesting-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>More Interesting Examples</h2>
<p>The best way to see the functionality of <code>AbstractLogic</code> is to see it in action.</p>
<p><a href="examples/repl/harrypotter.jl"><em>Snape's</em> potions problem in J.K. Rowling's "Harry Potter"</a></p>
<p><a href="examples/repl/LSATlogicalQ1.jl">June LSAC 2007 by the Law School Admission Council q1-5</a></p>
<p><a href="examples/repl/LSATlogicalQ2.jl">June LSAC 2007 by the Law School Admission Council q6-10</a></p>
<p><a href="examples/repl/LSATlogicalQ3.jl">June LSAC 2007 by the Law School Admission Council q11-17</a></p>
</article></div>