<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-highleveltypes" class="anchor" aria-hidden="true" href="#highleveltypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HighLevelTypes</h1>
<p><a href="https://travis-ci.org/ResourceMind/HighLevelTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b671ac525a7facd23bde0cd8b82377f70b1583eaf19f725f60a8800f3a3037b/68747470733a2f2f7472617669732d63692e6f72672f5265736f757263654d696e642f486967684c6576656c54797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ResourceMind/HighLevelTypes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ResourceMind/HighLevelTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1db64bc79f987253b3f185bd9def7c6f80971c26526c603cbc021de91ff64dee/68747470733a2f2f636f6465636f762e696f2f67682f5265736f757263654d696e642f486967684c6576656c54797065732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/ResourceMind/HighLevelTypes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/ResourceMind/HighLevelTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/realopt/Scanner.jl" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p>The goal of HighLevelTypes.jl is to relieve the user from having to answer the question that we often face. Should this be a concrete or abstract type? This question is important because both have their own limitations.</p>
<ul>
<li>
<p><strong>For concrete types:</strong> Any behavior defined using concrete types can not be inherited.  Sometimes you even don't know whether you will have in the future a specialization of your type or not. Take for example the case of Diagonal matrices defined <a href="https://github.com/JuliaLang/julia/blob/0d7248e2ff65bd6886ba3f003bf5aeab929edab5/base/linalg/diagonal.jl">here</a>. Assume someone works with diagonal matrices such that all elements of a matrix are taking only 3 values. It is natural to create a new type that additionally stores those values. But since all the functions were defined for the concrete type <code>Diagonal</code>, it is not possible to reuse this behavior. And inheriting behavior is more important than inheriting fields.</p>
</li>
<li>
<p><strong>For abstract types:</strong> If there is a field that would naturally fit in the abstract type, its definition needs to be delayed until the definition of the concrete types. This second issue is probably less important than the first one, although for some cases it makes the code really awkward.</p>
</li>
</ul>
<p>As a high level language, Julia deserves a high level type. doesn't it?</p>
<h2><a id="user-content-what-is-a-high-level-type-" class="anchor" aria-hidden="true" href="#what-is-a-high-level-type-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is a high level type ?</h2>
<p>A high level type is an abstraction for two underlying types: one is abstract and one is concrete. The user only defines high level types. By default, the concrete type will be only used for instantiation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@hl struct Person
    name::String
end
    
@hl struct Developer &lt;: Person
    salary::Int32
end

@hl struct SepecializedDeveloper &lt;: Developer
    language::String
end

function sumsalaries(first::Developer, second::Developer)
    return first.salary + second.salary
end

bob = Developer(&quot;Bob&quot;, 10000)
bob.name #returns &quot;Bob&quot; 
bob.salary #returns 10000

alice = SepecializedDeveloper(&quot;Alice&quot;, 15000, &quot;Julia&quot;)    
alice.name # returns &quot;Alice&quot; 
alice.salary # returns 15000    
alice.language # returns &quot;Julia&quot;
    
sumsalaries(bob, alice) #returns 25000
"><pre><span class="pl-c1">@hl</span> <span class="pl-k">struct</span> Person
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>
    
<span class="pl-c1">@hl</span> <span class="pl-k">struct</span> Developer <span class="pl-k">&lt;:</span> <span class="pl-c1">Person</span>
    salary<span class="pl-k">::</span><span class="pl-c1">Int32</span>
<span class="pl-k">end</span>

<span class="pl-c1">@hl</span> <span class="pl-k">struct</span> SepecializedDeveloper <span class="pl-k">&lt;:</span> <span class="pl-c1">Developer</span>
    language<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">sumsalaries</span>(first<span class="pl-k">::</span><span class="pl-c1">Developer</span>, second<span class="pl-k">::</span><span class="pl-c1">Developer</span>)
    <span class="pl-k">return</span> first<span class="pl-k">.</span>salary <span class="pl-k">+</span> second<span class="pl-k">.</span>salary
<span class="pl-k">end</span>

bob <span class="pl-k">=</span> <span class="pl-c1">Developer</span>(<span class="pl-s"><span class="pl-pds">"</span>Bob<span class="pl-pds">"</span></span>, <span class="pl-c1">10000</span>)
bob<span class="pl-k">.</span>name <span class="pl-c"><span class="pl-c">#</span>returns "Bob" </span>
bob<span class="pl-k">.</span>salary <span class="pl-c"><span class="pl-c">#</span>returns 10000</span>

alice <span class="pl-k">=</span> <span class="pl-c1">SepecializedDeveloper</span>(<span class="pl-s"><span class="pl-pds">"</span>Alice<span class="pl-pds">"</span></span>, <span class="pl-c1">15000</span>, <span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>)    
alice<span class="pl-k">.</span>name <span class="pl-c"><span class="pl-c">#</span> returns "Alice" </span>
alice<span class="pl-k">.</span>salary <span class="pl-c"><span class="pl-c">#</span> returns 15000    </span>
alice<span class="pl-k">.</span>language <span class="pl-c"><span class="pl-c">#</span> returns "Julia"</span>
    
<span class="pl-c1">sumsalaries</span>(bob, alice) <span class="pl-c"><span class="pl-c">#</span>returns 25000</span></pre></div>
<h2><a id="user-content-how-about-performance-" class="anchor" aria-hidden="true" href="#how-about-performance-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How about performance ?</h2>
<p>This is not the best choice for performance-critical code. Using abstract types instead of concrete types may increase the running time. Therefore the package provides the macro <code>@concretify</code> which can be applied on a block to use only the concrete types for all high level types within that block.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vec1 = Vector{Developer}()
push!(vec, bob) # OK
push!(vec, alice) # OK

@concretify vec2 = Vector{Developer}()
push!(vec2, bob) # OK
push!(vec2, alice) # throws MethodError (wrong concrete type for alice)
"><pre>vec1 <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Developer}</span>()
<span class="pl-c1">push!</span>(vec, bob) <span class="pl-c"><span class="pl-c">#</span> OK</span>
<span class="pl-c1">push!</span>(vec, alice) <span class="pl-c"><span class="pl-c">#</span> OK</span>

<span class="pl-c1">@concretify</span> vec2 <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Developer}</span>()
<span class="pl-c1">push!</span>(vec2, bob) <span class="pl-c"><span class="pl-c">#</span> OK</span>
<span class="pl-c1">push!</span>(vec2, alice) <span class="pl-c"><span class="pl-c">#</span> throws MethodError (wrong concrete type for alice)</span></pre></div>
<p>In particular, <code>@concretify</code> can be used to create concrete types.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@hl struct Job
    nb_hours::Int
    assigned_dev::Developer
end

Job(10, bob) # OK 
Job(100, alice) # OK

@concretify @hl struct ConcreteJob
    nb_hours::Int
    assigned_dev::Developer
end

ConcreteJob(10, bob) # OK
ConcreteJob(100, alice) # throws MethodError (wrong concrete type for alice)
"><pre><span class="pl-c1">@hl</span> <span class="pl-k">struct</span> Job
    nb_hours<span class="pl-k">::</span><span class="pl-c1">Int</span>
    assigned_dev<span class="pl-k">::</span><span class="pl-c1">Developer</span>
<span class="pl-k">end</span>

<span class="pl-c1">Job</span>(<span class="pl-c1">10</span>, bob) <span class="pl-c"><span class="pl-c">#</span> OK </span>
<span class="pl-c1">Job</span>(<span class="pl-c1">100</span>, alice) <span class="pl-c"><span class="pl-c">#</span> OK</span>

<span class="pl-c1">@concretify</span> <span class="pl-c1">@hl</span> <span class="pl-k">struct</span> ConcreteJob
    nb_hours<span class="pl-k">::</span><span class="pl-c1">Int</span>
    assigned_dev<span class="pl-k">::</span><span class="pl-c1">Developer</span>
<span class="pl-k">end</span>

<span class="pl-c1">ConcreteJob</span>(<span class="pl-c1">10</span>, bob) <span class="pl-c"><span class="pl-c">#</span> OK</span>
<span class="pl-c1">ConcreteJob</span>(<span class="pl-c1">100</span>, alice) <span class="pl-c"><span class="pl-c">#</span> throws MethodError (wrong concrete type for alice)</span></pre></div>
<h2><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Current limitations</h2>
<ul>
<li>A high level type can not have a tuple as its field (will be fixed soon).</li>
</ul>
<h2><a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgment</h2>
<p>This package was inspired by ConcreteAbstractions.jl</p>
</article></div>