<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://coveralls.io/github/konkam/FeynmanKacParticleFilters.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/942275fa664775f3b0163cea38d992994727a3eb7793c6dba5ed76436446302e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6f6e6b616d2f4665796e6d616e4b61635061727469636c6546696c746572732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/konkam/FeynmanKacParticleFilters.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/konkam/FeynmanKacParticleFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/061089f9d763a3d7b7069e0b31b1309e5c830436dcdb6e0c95006c90868a4845/68747470733a2f2f636f6465636f762e696f2f67682f6b6f6e6b616d2f4665796e6d616e4b61635061727469636c6546696c746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/konkam/FeynmanKacParticleFilters.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/konkam/FeynmanKacParticleFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/656ae4a4dffdf11babcac8dd3e46a7038e571fe0507e0d79dd49c6fdfdb51fc9/68747470733a2f2f7472617669732d63692e6f72672f6b6f6e6b616d2f4665796e6d616e4b61635061727469636c6546696c746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/konkam/FeynmanKacParticleFilters.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-feynmankacparticlefilters" class="anchor" aria-hidden="true" href="#feynmankacparticlefilters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FeynmanKacParticleFilters</h1>
<p dir="auto">A package to perform particle filtering (as well as likelihood estimation and smoothing) using the Feynman-Kac formalism.</p>
<p dir="auto">Filtering and likelihood estimation are illustrated on two stochastic diffusion equation models:</p>
<ul dir="auto">
<li>The <a href="https://en.wikipedia.org/wiki/Cox%E2%80%93Ingersoll%E2%80%93Ross_model" rel="nofollow">Cox-Ingersoll-Ross</a> (CIR) model</li>
<li>The K dimensional continuous Wright Fisher model (continuous time, infinite population, see Jenkins &amp; Spanò (2017) for instance)</li>
</ul>
<p dir="auto"><em>Particle smoothing for the Wright-Fisher model is not implemented for lack of a tractable form of the transition density.</em></p>
<p dir="auto">Outputs:</p>
<ul dir="auto">
<li>Marginal likelihood</li>
<li>Samples from the filtering distribution</li>
<li>Samples from the marginal smoothing distribution</li>
</ul>
<p dir="auto">Implemented:</p>
<ul dir="auto">
<li>Bootstrap particle filter with adaptive resampling.</li>
<li>Forward Filtering Backward Sampling (FFBS) algorithm</li>
</ul>

<p dir="auto">Potentially useful functions:</p>
<ul dir="auto">
<li>Evaluation of the transition density for the Cox-Ingersoll-Ross process (<em>based on the representation with the Bessel function</em>)</li>
<li>Random trajectory generation from the Cox-Ingersoll-Ross process (<em>based on the Gamma Poisson expansion of the transition density</em>)</li>
</ul>
<h1 dir="auto"><a id="user-content-preliminary-notions-on-the-feynman-kac-formalism" class="anchor" aria-hidden="true" href="#preliminary-notions-on-the-feynman-kac-formalism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preliminary notions on the Feynman-Kac formalism</h1>
<p dir="auto">The Feynman-Kac formalism allows to formulate different types of particle filters using the same abstract elements.
The input of a generic particle filter are:</p>
<ul dir="auto">
<li>A Feynman-Kac model M_t, G_t, where:
<ul dir="auto">
<li>G_t is a potential function which can be evaluated for all values of t</li>
<li>It is possible to simulate from M_0(dx0) and M_t(x_t-1, dxt)</li>
</ul>
</li>
<li>The number of particles N</li>
<li>The choice of an unbiased resampling scheme (e.g. multinomial), i.e. an algorithm to draw variables <a target="_blank" rel="noopener noreferrer" href="Latex_equations/rs.gif"><img src="Latex_equations/rs.gif" width="90" data-animated-image="" style="max-width: 100%;"></a> in 1:N where RS is a distribution such that: <a target="_blank" rel="noopener noreferrer" href="Latex_equations/expect.gif"><img src="Latex_equations/expect.gif" width="120" data-animated-image="" style="max-width: 100%;"></a>.</li>
</ul>
<p dir="auto">For adaptive resampling, one needs in addition:</p>
<ul dir="auto">
<li>a scalar <a target="_blank" rel="noopener noreferrer" href="Latex_equations/ess.gif"><img src="Latex_equations/ess.gif" width="90" data-animated-image="" style="max-width: 100%;"></a></li>
</ul>
<p dir="auto">Using this formalism, the boostrap filter is expressed as:</p>
<ul dir="auto">
<li>G_0(x_0) = f_0(y_0|x_0), where f is the emission density</li>
<li>G_t(x_t-1, x_t) = f_0(y_t|x_t)</li>
<li>M_0(dx0) = P_0(dx0) the prior on the hidden state</li>
<li>M_t(x_t-1, dxt) = P_t(x_t-1, dxt) given by the transition function</li>
</ul>
<h1 dir="auto"><a id="user-content-how-to-install-the-package" class="anchor" aria-hidden="true" href="#how-to-install-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install the package</h1>
<p dir="auto">Press <code>]</code> in the Julia interpreter to enter the Pkg mode and input:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/konkam/FeynmanKacParticleFilters.jl"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>konkam<span class="pl-k">/</span>FeynmanKacParticleFilters<span class="pl-k">.</span>jl</pre></div>
<h1 dir="auto"><a id="user-content-how-to-use-the-package-example-with-the-cir-model" class="anchor" aria-hidden="true" href="#how-to-use-the-package-example-with-the-cir-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use the package (Example with the CIR model)</h1>

<p dir="auto">The transition density of the 1-D CIR process is available as:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="Latex_equations/CIR_trans.gif"><img src="Latex_equations/CIR_trans.gif" width="450" data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto">from which it easy to simulate.
Moreover, we consider a Poisson distribution as the emission density:</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="Latex_equations/poisson_dens.gif"><img src="Latex_equations/poisson_dens.gif" width="150" data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto">We start by simulating some data (a function to simulate from the transition density is available in the package):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FeynmanKacParticleFilters, Distributions, Random

Random.seed!(0)

Δt = 0.1
δ = 3.
γ = 2.5
σ = 4.
Nobs = 2
Nsteps = 4
λ = 1.
Nparts = 10
α = δ/2
β = γ/σ^2

time_grid = [k*Δt for k in 0:(Nsteps-1)]
times = [k*Δt for k in 0:(Nsteps-1)]
X = FeynmanKacParticleFilters.generate_CIR_trajectory(time_grid, 3, δ*1.2, γ/1.2, σ*0.7)
Y = map(λ -&gt; rand(Poisson(λ), Nobs), X);
data = zip(times, Y) |&gt; Dict

4-element Array{Float64,1}:
 0.0
 0.1
 0.2
 0.30000000000000004"><pre><span class="pl-k">using</span> FeynmanKacParticleFilters, Distributions, Random

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">0</span>)

Δt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
δ <span class="pl-k">=</span> <span class="pl-c1">3.</span>
γ <span class="pl-k">=</span> <span class="pl-c1">2.5</span>
σ <span class="pl-k">=</span> <span class="pl-c1">4.</span>
Nobs <span class="pl-k">=</span> <span class="pl-c1">2</span>
Nsteps <span class="pl-k">=</span> <span class="pl-c1">4</span>
λ <span class="pl-k">=</span> <span class="pl-c1">1.</span>
Nparts <span class="pl-k">=</span> <span class="pl-c1">10</span>
α <span class="pl-k">=</span> δ<span class="pl-k">/</span><span class="pl-c1">2</span>
β <span class="pl-k">=</span> γ<span class="pl-k">/</span>σ<span class="pl-k">^</span><span class="pl-c1">2</span>

time_grid <span class="pl-k">=</span> [k<span class="pl-k">*</span>Δt <span class="pl-k">for</span> k <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span>(Nsteps<span class="pl-k">-</span><span class="pl-c1">1</span>)]
times <span class="pl-k">=</span> [k<span class="pl-k">*</span>Δt <span class="pl-k">for</span> k <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span>(Nsteps<span class="pl-k">-</span><span class="pl-c1">1</span>)]
X <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">generate_CIR_trajectory</span>(time_grid, <span class="pl-c1">3</span>, δ<span class="pl-k">*</span><span class="pl-c1">1.2</span>, γ<span class="pl-k">/</span><span class="pl-c1">1.2</span>, σ<span class="pl-k">*</span><span class="pl-c1">0.7</span>)
Y <span class="pl-k">=</span> <span class="pl-c1">map</span>(λ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Poisson</span>(λ), Nobs), X);
data <span class="pl-k">=</span> <span class="pl-c1">zip</span>(times, Y) <span class="pl-k">|&gt;</span> Dict

<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.1</span>
 <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.30000000000000004</span></pre></div>
<h2 dir="auto"><a id="user-content-filtering" class="anchor" aria-hidden="true" href="#filtering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filtering</h2>
<p dir="auto">Now we define the (log)potential function Gt,  a simulator from the transition kernel for the Cox-Ingersoll-Ross model and a resampling scheme (here multinomial):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Mt = FeynmanKacParticleFilters.create_transition_kernels_CIR(data, δ, γ, σ)
logGt = FeynmanKacParticleFilters.create_log_potential_functions_CIR(data)
RS(W) = rand(Categorical(W), length(W))"><pre>Mt <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">create_transition_kernels_CIR</span>(data, δ, γ, σ)
logGt <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">create_log_potential_functions_CIR</span>(data)
<span class="pl-en">RS</span>(W) <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Categorical</span>(W), <span class="pl-c1">length</span>(W))</pre></div>
<p dir="auto">Running the boostrap filter algorithm is performed as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pf = FeynmanKacParticleFilters.generic_particle_filtering_adaptive_resampling_logweights(Mt, logGt, Nparts, RS)"><pre>pf <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">generic_particle_filtering_adaptive_resampling_logweights</span>(Mt, logGt, Nparts, RS)</pre></div>
<p dir="auto">To sample <code>nsamples</code> values from the i-th filtering distributions, do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n_samples = 100
i = 4
FeynmanKacParticleFilters.sample_from_filtering_distributions_logweights(pf, n_samples, i)
100-element Array{Float64,1}:
  5.371960182098351
  5.371960182098351
  3.3924167451813956
  3.3924167451813956
  3.3924167451813956
  ⋮"><pre>n_samples <span class="pl-k">=</span> <span class="pl-c1">100</span>
i <span class="pl-k">=</span> <span class="pl-c1">4</span>
FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">sample_from_filtering_distributions_logweights</span>(pf, n_samples, i)
<span class="pl-c1">100</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">5.371960182098351</span>
  <span class="pl-c1">5.371960182098351</span>
  <span class="pl-c1">3.3924167451813956</span>
  <span class="pl-c1">3.3924167451813956</span>
  <span class="pl-c1">3.3924167451813956</span>
  ⋮</pre></div>
<h2 dir="auto"><a id="user-content-smoothing" class="anchor" aria-hidden="true" href="#smoothing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Smoothing</h2>
<h3 dir="auto"><a id="user-content-forward-filtering-backward-sampling-ffbs" class="anchor" aria-hidden="true" href="#forward-filtering-backward-sampling-ffbs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Forward Filtering Backward Sampling (FFBS)</h3>
<p dir="auto">To perform a simple particle smoothing on the CIR process using the FFBS algorithm, we additionally need a function which evaluates the transition density of the CIR process.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="transition_logdensity_CIR(Xtp1, Xt, Δtp1) = FeynmanKacParticleFilters.CIR_transition_logdensity(Xtp1, Xt, Δtp1, δ, γ, σ)"><pre><span class="pl-en">transition_logdensity_CIR</span>(Xtp1, Xt, Δtp1) <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">CIR_transition_logdensity</span>(Xtp1, Xt, Δtp1, δ, γ, σ)</pre></div>
<p dir="auto">With the transition density, we can obtain the FFBS filter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ps = FeynmanKacParticleFilters.generic_FFBS_algorithm_logweights(Mt, logGt, Nparts, Nparts, RS, transition_logdensity_CIR)"><pre>ps <span class="pl-k">=</span> FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">generic_FFBS_algorithm_logweights</span>(Mt, logGt, Nparts, Nparts, RS, transition_logdensity_CIR)</pre></div>
<p dir="auto">To sample <code>nsamples</code> values from the i-th smoothing distribution, do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n_samples = 100
i = 4
FeynmanKacParticleFilters.sample_from_smoothing_distributions_logweights(ps, n_samples, i)
100-element Array{Float64,1}:
 7.134633585387236
 2.513540876531395
 5.0555536713845814
 7.983322471825221
 4.651221100411266
 ⋮"><pre>n_samples <span class="pl-k">=</span> <span class="pl-c1">100</span>
i <span class="pl-k">=</span> <span class="pl-c1">4</span>
FeynmanKacParticleFilters<span class="pl-k">.</span><span class="pl-c1">sample_from_smoothing_distributions_logweights</span>(ps, n_samples, i)
<span class="pl-c1">100</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">7.134633585387236</span>
 <span class="pl-c1">2.513540876531395</span>
 <span class="pl-c1">5.0555536713845814</span>
 <span class="pl-c1">7.983322471825221</span>
 <span class="pl-c1">4.651221100411266</span>
 ⋮</pre></div>
 
<p dir="auto"><strong>References:</strong></p>
<ul dir="auto">
<li>
<p dir="auto">Briers, M., Doucet, A. and Maskell, S. <em>Smoothing algorithms for state–space models.</em> Annals of the Institute of Statistical Mathematics 62.1 (2010): 61.</p>
</li>
<li>
<p dir="auto">Chopin, N. &amp; Papaspiliopoulos, O. <em>A concise introduction to Sequential Monte Carlo</em>, to appear.</p>
</li>
<li>
<p dir="auto">Del Moral, P. (2004). <em>Feynman-Kac formulae. Genealogical and interacting particle
systems with applications.</em> Probability and its Applications. Springer Verlag, New York.</p>
</li>
<li>
<p dir="auto">Jenkins, P. A., &amp; Spanò, D. (2017). Exact simulation of the Wright--Fisher diffusion. The Annals of Applied Probability, 27(3), 1478–1509.</p>
</li>
</ul>
</article></div>