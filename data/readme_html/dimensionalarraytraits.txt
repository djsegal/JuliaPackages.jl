<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dimensionalarraytraitsjl" class="anchor" aria-hidden="true" href="#dimensionalarraytraitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DimensionalArrayTraits.jl</h1>
<p>Abstract base package for dimensional arrays and their specific traits
<strong>Note this is package currently in the discussion stage.</strong></p>
<h2><a id="user-content-requirements-on-spatial-datadomain-types-from-the-users-perspective" class="anchor" aria-hidden="true" href="#requirements-on-spatial-datadomain-types-from-the-users-perspective"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements on spatial data/domain types from the user's perspective</h2>
<p>It is proposed to add behind each point, a possible interface (from the user point of view)</p>
<ul>
<li>Return coordinates lon/lat/depth/time (and arbitrary dimension) for a given index i,j,k,...</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">coord</span>(A,<span class="pl-c1">:latitude</span>,i,j,k) <span class="pl-c"><span class="pl-c">#</span> or better coord(A,Lat(),i,j,k)  </span>
<span class="pl-c1">lat</span>(A,i,j,k) <span class="pl-c"><span class="pl-c">#</span> for common dimension names</span>
<span class="pl-c1">lat</span>(A,j) <span class="pl-c"><span class="pl-c">#</span> if grids are aligned with longitude/latitude/depth/time...; otherwise an error</span>
lon</pre></div>
<ul>
<li>Return the value at a given index i,j,k... (the result is no longer georeferenced).</li>
</ul>
<pre><code>value(A,i,j,k)
</code></pre>
<ul>
<li>Tell what each coordinate represent (is the 3rd dimension time or depth or something else?).</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">coordnames</span>(x) <span class="pl-c"><span class="pl-c">#</span> would return :longitude, :latitude, ... or Lon(), Lat()</span></pre></div>
<p>Use the CF convention names (longitude, latitude, time, â€¦)</p>
<ul>
<li>Subsetting based on lon/lat/depth/time (and arbitrary dimension) bounding box</li>
<li>Irregular grid subsetting returns either: a masked array or a vector of points - need to decide
which occurs on <code>getinidex</code>.</li>
</ul>
<pre><code>A[Lat(x), Lon(y), Time(At(t))]
</code></pre>
<ul>
<li>Find the k nearest points for a given location</li>
<li>Integral over a raster (knowing the "volume" of each grid cell)</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">volume</span>(A,i,j,k)</pre></div>
<ul>
<li>Is the cell value for the start, middle or (probably never) the end of the duration/span? Is it an average of the whole period or a specific point in the cell. These specifications should also generalise to any dimension type.</li>
<li>Categorical dimensions with no size and optional ordered/unordered status</li>
<li>Arrays can be plotted correctly using the grid information</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(A[:,:,n])</pre></div>
<h3><a id="user-content-out-of-scope-at-least-initially" class="anchor" aria-hidden="true" href="#out-of-scope-at-least-initially"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Out-of-scope (at least initially)</h3>
<ul>
<li>units and other metadata</li>
</ul>
<h2><a id="user-content-implementationperformance" class="anchor" aria-hidden="true" href="#implementationperformance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation/Performance</h2>
<ul>
<li>Zero cost indexing (only works on regular grids?)</li>
<li>Lazy affine transformations on the data</li>
</ul>
<h2><a id="user-content-minimal-interface-to-be-implemented-for-different-array-types-of-spatial-data" class="anchor" aria-hidden="true" href="#minimal-interface-to-be-implemented-for-different-array-types-of-spatial-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Minimal interface to be implemented for different array types of spatial data</h2>
<p><a href="https://gist.github.com/meggart/e29e6381d9400ff789eefbccc109d6f9">https://gist.github.com/meggart/e29e6381d9400ff789eefbccc109d6f9</a></p>
</article></div>