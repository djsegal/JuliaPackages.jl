<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-muttsdictsjl" class="anchor" aria-hidden="true" href="#muttsdictsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MuttsDicts.jl</h1>
<p>Versioned dictionaries following the mutable-until-shared (Mutts) discipline</p>
<p>MuttsDict{K,V} provides a dictionary similar to Julia's Dict{K,V}, but with versioning
and improved worst-case asymptotics.  Lookups (getindex) take O(1) time.  Inserts
and updates (<code>setindex!</code>) take O(1) amortized time on unversioned dictionaries. You can
create a mutable copy of a dictionary (branch a new version) in O(1) amortized time,
and <code>setindex!</code> on a fresh branch is Θ(n^(1/7)).</p>
<p>MuttsDict has been optimized for both space use and cost of immutable inserts. Space use
for small dictionaries is low. For real-time or low-latency applications, MuttsDict
offers a Θ(n^(1/7)) worst case insert/delete time, which is an improvement over
Base.Dict's Θ(n) worst case.</p>
<p>MuttsDict implements the standard dictionary methods <code>getindex</code>, <code>setindex!</code>, <code>length</code>,
<code>setdiff</code>, <code>delete!</code>, and <code>iterate</code>. It is not a subtype of <code>AbstractDict</code>, due to
differences between the MuttsDict semantics and those expected by standard library
functions on <code>AbstractDict</code>.</p>
<p>MuttsDict implements the "mutable until shared" philosophy for multithreaded programming.
An object local to a single thread can be mutable, and enjoy the more efficient O(1)
amortized insert/delete performance. When objects become shared, they should first be
made immutable (by calling <code>mark_immutable!</code> or <code>branch!</code>) before sharing. Immutable
MuttsDicts are read-only, and can be safely shared among multiple threads. For lockfree
operation, a thread can branch a shared dictionary, modify it, mark it immutable, then
write the pointer back with an atomic compare-and-swap.</p>
<p>Branching and versioning is handled by the mutts functions <code>branch!</code>, <code>mark_immutable!</code>,
<code>is_mutable</code>, and <code>get_mutable_version</code>:</p>
<ul>
<li><code>dict2=branch!(dict1)</code> returns a new mutable copy of <code>dict1</code>, and marks <code>dict1</code>
immutable.</li>
<li><code>mark_immutable!(dict)</code> marks <code>dict</code> as immutable. Once immutable, a MuttsDict can
safely be shared by multiple threads.</li>
<li><code>is_mutable(dict)</code> returns true when <code>dict</code> is mutable.</li>
<li><code>get_mutable_version(dict)</code> returns <code>dict</code> if it is mutable, otherwise returns
<code>branch!(dict)</code>.</li>
</ul>
</article></div>