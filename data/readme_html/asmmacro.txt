<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-asmmacrojl" class="anchor" aria-hidden="true" href="#asmmacrojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AsmMacro.jl</h1>
<p><a href="https://travis-ci.org/YingboMa/AsmMacro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5a7281fd44b643d87b3ba7a153ddc2d1239908b2/68747470733a2f2f7472617669732d63692e6f72672f59696e67626f4d612f41736d4d6163726f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/YingboMa/AsmMacro.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/YingboMa/AsmMacro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65f4e93028c7cd5bf52cb87d3e8dc191e483d8cd/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f41736d4d6163726f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/YingboMa/AsmMacro.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>AsmMacro.jl</code> provides a relatively simple way to write assembly code in Julia.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AsmMacro

<span class="pl-c"><span class="pl-c">#</span> z[1:4] &lt;- x[1:4]*n (with a loop)</span>
<span class="pl-c1">@asm</span> <span class="pl-k">function</span> <span class="pl-en">add_loop_sse</span>(x<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>,n<span class="pl-k">::</span><span class="pl-c1">Int</span>,z<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>)
    <span class="pl-c1">movq</span>(n, rcx)
    <span class="pl-c1">movapd</span>(x[<span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">16</span>], xmm0)
    <span class="pl-c1">movapd</span>(x[<span class="pl-c1">1</span><span class="pl-k">*</span><span class="pl-c1">16</span>], xmm1)
    <span class="pl-c1">xorpd</span>(xmm2,xmm2)
    <span class="pl-c1">xorpd</span>(xmm3,xmm3)
    <span class="pl-c1">@loop</span>
    <span class="pl-c1">addpd</span>(xmm0,xmm2)
    <span class="pl-c1">addpd</span>(xmm1,xmm3)
    <span class="pl-c1">dec</span>(rcx)
    <span class="pl-c1">jnz</span>(<span class="pl-c1">@loop</span>)
    <span class="pl-c1">movapd</span>(xmm2, z[<span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">16</span>])
    <span class="pl-c1">movapd</span>(xmm3, z[<span class="pl-c1">1</span><span class="pl-k">*</span><span class="pl-c1">16</span>])
<span class="pl-k">end</span>

x <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>]
n <span class="pl-k">=</span> <span class="pl-c1">10</span>
z <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x)
<span class="pl-c1">add_loop_sse</span>(<span class="pl-c1">pointer</span>(x),n,<span class="pl-c1">pointer</span>(z))

julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">10.0</span>
 <span class="pl-c1">20.0</span>
 <span class="pl-c1">40.0</span>
 <span class="pl-c1">50.0</span></pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AsmMacro

<span class="pl-c"><span class="pl-c">#</span> z[1:4] &lt;- x[1:4] + y[1:4]</span>
<span class="pl-c1">@asm</span> <span class="pl-k">function</span> <span class="pl-en">add_avx256</span>(x<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>,y<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>,z<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>)
    <span class="pl-c1">vmovupd</span>(x[<span class="pl-c1">0</span>], ymm0)
    <span class="pl-c1">vmovupd</span>(y[<span class="pl-c1">0</span>], ymm1)
    <span class="pl-c1">vaddpd</span>(ymm0, ymm1, ymm1)
    <span class="pl-c1">vmovupd</span>(ymm1, z[<span class="pl-c1">0</span>])
<span class="pl-k">end</span>

x <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">4.0</span>]
y <span class="pl-k">=</span> [<span class="pl-c1">4.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>]
z <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x)
<span class="pl-c1">add_avx256</span>(<span class="pl-c1">pointer</span>(x),<span class="pl-c1">pointer</span>(y),<span class="pl-c1">pointer</span>(z))

julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span></pre></div>
<h2><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgement</h2>
<p>This package is based on the original code by <a href="https://github.com/carnaval">Oscar Blumberg</a>.</p>
</article></div>