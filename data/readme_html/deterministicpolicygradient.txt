<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-deterministicpolicygradient" class="anchor" aria-hidden="true" href="#deterministicpolicygradient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DeterministicPolicyGradient</h1>
<p><a href="http://pkg.julialang.org/?pkg=DeterministicPolicyGradient" rel="nofollow"><img src="https://camo.githubusercontent.com/23c9fb58ef30da896f54f883e4a3fa1f431d0f12ce936dbfc3bf455178a31c2c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f44657465726d696e6973746963506f6c6963794772616469656e745f302e342e737667" alt="DeterministicPolicyGradient" data-canonical-src="http://pkg.julialang.org/badges/DeterministicPolicyGradient_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=DeterministicPolicyGradient" rel="nofollow"><img src="https://camo.githubusercontent.com/1eb8d6a8d1c66c3b89083b6282d05b809b3f78f2dd065af23a95c7c9ecd6ae03/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f44657465726d696e6973746963506f6c6963794772616469656e745f302e352e737667" alt="DeterministicPolicyGradient" data-canonical-src="http://pkg.julialang.org/badges/DeterministicPolicyGradient_0.5.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=DeterministicPolicyGradient" rel="nofollow"><img src="https://camo.githubusercontent.com/91e04edec755a2d5193cb205d95e31578251761f656a1c848c0a87a09b05767b/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f44657465726d696e6973746963506f6c6963794772616469656e745f302e362e737667" alt="DeterministicPolicyGradient" data-canonical-src="http://pkg.julialang.org/badges/DeterministicPolicyGradient_0.6.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/baggepinnen/DeterministicPolicyGradient.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/203e8acf73440174a605d23dfe07ec3721e53b29d8f0b77bbc555e6b6fcf7a1f/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f44657465726d696e6973746963506f6c6963794772616469656e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/DeterministicPolicyGradient.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides an implementation of the algorithm in the paper
"David Silver et al.. Deterministic Policy Gradient Algorithms. 2014."</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;DeterministicPolicyGradient&quot;)
Pkg.checkout(&quot;DeterministicPolicyGradient&quot;) # Recommended to get the latest version
using DeterministicPolicyGradient
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DeterministicPolicyGradient<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">checkout</span>(<span class="pl-s"><span class="pl-pds">"</span>DeterministicPolicyGradient<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Recommended to get the latest version</span>
<span class="pl-k">using</span> DeterministicPolicyGradient</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>See file <code>second_order_sys.jl</code>, which requires <code>Plots.jl</code> and <code>PyPlot.jl</code> to display the results.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ControlSystems
using DeterministicPolicyGradient
import PyPlot

try
  close(&quot;all&quot;)
catch
end
const G = tf(0.1,[1,0.01,0.1])

const T = 20
const t = 1:T
const m = 1
const n = 2
const p = 5
x0 = [0,1.]


# Cost function             ==========================================
const Q1 = diagm([5,1])
const Q2 = 1eye(m)
r(s,a,i) = (-(s)'Q1*(s) - a'Q2*a)[1]
L = lqr(ss(G),Q1,Q2)
μlqr(x) = -L*x

# Initialize solver options ==========================================
σβ      = 2
αΘ      = 0.005
αw      = 0.001
αv      = 0.001
αu      = 0.01
γ       = 0.999
τ       = 0.01
iters   = 30_000
critic_update = :rls # Choose between :rls and :gradient
λrls    = 0.99999
stepreduce_interval = 5000
stepreduce_factor = 0.995
hold_actor = 1000
opts = DPGopts(σβ,αΘ,αw,αv,αu,γ,τ,iters,m,critic_update,λrls,stepreduce_interval,stepreduce_factor,hold_actor)

# Initialize functions      ==========================================
cp = linspace(-5,5,p)
cv = linspace(-5,5,p)

grid1 = meshgrid(cp,cv)
const c1 = [grid1[1][:] grid1[2][:]]
P = size(c1,1)

function ϕ(s)
    a = exp(-1/(2*2)*sum((s'.-c1).^2,2))#exp(-1/2*(s.-c).^2)
    a ./= sum(a)
    a
    # [a; s[2]]
end

μ(s,Θ,t)          = Θ'ϕ(s)
∇μ(s)           = ϕ(s)
β(s,Θ,noise,i)  = Θ'ϕ(s) + noise[i]
ϕ(s,a,Θ)        = ∇μ(s)*(a-μ(s,Θ,t))
V(s,v)          = v'ϕ(s) # It's a good idea to bias V to some mean of the final landscape
Q(s,a,v,w,Θ,t)    = (ϕ(s,a,Θ)'w + V(s,v))[1]

function gradients(s1,s,a1,a,Θ,w,v,t)
    ϕi = ϕ(s)
    ∇μ = ϕi
    ∇aQ = ∇μ'w
    ∇wQ = ∇μ*(a-Θ'ϕi)
    ∇vQ = ϕi
    ∇aQ, ∇wQ, ∇vQ, ∇μ
end
simulate(Θ,x0, noise) = lsim(G, (t,s)-&gt;β(s,Θ,noise,t), t, x0)[3:4]
simulate(Θ,x0) = lsim(G, (t,s)-&gt;μ(s,Θ,t), t, x0)[3:4]
exploration(σβ) = filt(ones(5),[5],σβ*randn(T))
funs            = DPGfuns(μ,Q, gradients, simulate, exploration, r)

Θ               = zeros(P*m) # Weights
w               = 0.001randn(P*m)
v               = 0.001randn(P)
initial_state   = DPGstate(Θ,w,v)

# Train the actor and critic ==========================================
cost, Θ, w, v = dpg(opts, funs, initial_state, x0)

# Plots results              ==========================================
plot(cost[1:100:end])
gui()

lsimplot(G, (i,s)-&gt;[μ(s,Θ)], linspace(0,T,200),x0), plot!(title=&quot;After&quot;)
gui()
lsimplot(G, (i,s)-&gt;[μlqr(s)], linspace(0,T,200),x0), plot!(title=&quot;LQR&quot;)
gui()


Qpv_map = Float64[Q([sv,sp],0,v,w,Θ)[1] for sp in linspace(-5,5,100), sv in linspace(-5,5,100)]
PyPlot.matshow(Qpv_map); PyPlot.colorbar()
PyPlot.title(&quot;Q map&quot;);PyPlot.xlabel(&quot;Velocity&quot;);PyPlot.ylabel(&quot;Position&quot;)
PyPlot.yticks(0:10:100,-5:5);PyPlot.xticks(0:10:100,-5:5)


Qpa_map = Float64[Q([0,sp],a,v,w,Θ)[1] for sp in linspace(-5,5,100), a in linspace(-10,10,100)]
PyPlot.matshow(Qpa_map); PyPlot.colorbar()
PyPlot.title(&quot;Q map&quot;);PyPlot.xlabel(&quot;Control&quot;);PyPlot.ylabel(&quot;Position&quot;)
PyPlot.yticks(0:10:100,-5:5);PyPlot.xticks(0:10:100,-10:2:10)


control_map = Float64[μ([sv,sp],Θ)[1] for sp in linspace(-5,5,100), sv in linspace(-5,5,100)]
PyPlot.matshow(control_map); PyPlot.colorbar()
PyPlot.title(&quot;Control map&quot;);PyPlot.xlabel(&quot;Velocity&quot;);PyPlot.ylabel(&quot;Position&quot;)
PyPlot.yticks(0:10:100,-5:5);PyPlot.xticks(0:10:100,-5:5)


control_map = Float64[μlqr([sv,sp])[1] for sp in linspace(-5,5,100), sv in linspace(-5,5,100)]
PyPlot.matshow(control_map); PyPlot.colorbar()
PyPlot.title(&quot;Control map LQR&quot;);PyPlot.xlabel(&quot;Velocity&quot;);PyPlot.ylabel(&quot;Position&quot;)
PyPlot.yticks(0:10:100,-5:5);PyPlot.xticks(0:10:100,-5:5)

show()

"><pre><span class="pl-k">using</span> ControlSystems
<span class="pl-k">using</span> DeterministicPolicyGradient
<span class="pl-k">import</span> PyPlot

<span class="pl-k">try</span>
  <span class="pl-c1">close</span>(<span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span>)
<span class="pl-k">catch</span>
<span class="pl-k">end</span>
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">tf</span>(<span class="pl-c1">0.1</span>,[<span class="pl-c1">1</span>,<span class="pl-c1">0.01</span>,<span class="pl-c1">0.1</span>])

<span class="pl-k">const</span> T <span class="pl-k">=</span> <span class="pl-c1">20</span>
<span class="pl-k">const</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T
<span class="pl-k">const</span> m <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">const</span> n <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-k">const</span> p <span class="pl-k">=</span> <span class="pl-c1">5</span>
x0 <span class="pl-k">=</span> [<span class="pl-c1">0</span>,<span class="pl-c1">1.</span>]


<span class="pl-c"><span class="pl-c">#</span> Cost function             ==========================================</span>
<span class="pl-k">const</span> Q1 <span class="pl-k">=</span> <span class="pl-c1">diagm</span>([<span class="pl-c1">5</span>,<span class="pl-c1">1</span>])
<span class="pl-k">const</span> Q2 <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-c1">eye</span>(m)
<span class="pl-en">r</span>(s,a,i) <span class="pl-k">=</span> (<span class="pl-k">-</span>(s)<span class="pl-k">'</span>Q1<span class="pl-k">*</span>(s) <span class="pl-k">-</span> a<span class="pl-k">'</span>Q2<span class="pl-k">*</span>a)[<span class="pl-c1">1</span>]
L <span class="pl-k">=</span> <span class="pl-c1">lqr</span>(<span class="pl-c1">ss</span>(G),Q1,Q2)
<span class="pl-en">μlqr</span>(x) <span class="pl-k">=</span> <span class="pl-k">-</span>L<span class="pl-k">*</span>x

<span class="pl-c"><span class="pl-c">#</span> Initialize solver options ==========================================</span>
σβ      <span class="pl-k">=</span> <span class="pl-c1">2</span>
αΘ      <span class="pl-k">=</span> <span class="pl-c1">0.005</span>
αw      <span class="pl-k">=</span> <span class="pl-c1">0.001</span>
αv      <span class="pl-k">=</span> <span class="pl-c1">0.001</span>
αu      <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
γ       <span class="pl-k">=</span> <span class="pl-c1">0.999</span>
τ       <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
iters   <span class="pl-k">=</span> <span class="pl-c1">30_000</span>
critic_update <span class="pl-k">=</span> <span class="pl-c1">:rls</span> <span class="pl-c"><span class="pl-c">#</span> Choose between :rls and :gradient</span>
λrls    <span class="pl-k">=</span> <span class="pl-c1">0.99999</span>
stepreduce_interval <span class="pl-k">=</span> <span class="pl-c1">5000</span>
stepreduce_factor <span class="pl-k">=</span> <span class="pl-c1">0.995</span>
hold_actor <span class="pl-k">=</span> <span class="pl-c1">1000</span>
opts <span class="pl-k">=</span> <span class="pl-c1">DPGopts</span>(σβ,αΘ,αw,αv,αu,γ,τ,iters,m,critic_update,λrls,stepreduce_interval,stepreduce_factor,hold_actor)

<span class="pl-c"><span class="pl-c">#</span> Initialize functions      ==========================================</span>
cp <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,p)
cv <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,p)

grid1 <span class="pl-k">=</span> <span class="pl-c1">meshgrid</span>(cp,cv)
<span class="pl-k">const</span> c1 <span class="pl-k">=</span> [grid1[<span class="pl-c1">1</span>][:] grid1[<span class="pl-c1">2</span>][:]]
P <span class="pl-k">=</span> <span class="pl-c1">size</span>(c1,<span class="pl-c1">1</span>)

<span class="pl-k">function</span> <span class="pl-en">ϕ</span>(s)
    a <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">sum</span>((s<span class="pl-k">'</span><span class="pl-k">.-</span>c1)<span class="pl-k">.^</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>))<span class="pl-c"><span class="pl-c">#</span>exp(-1/2*(s.-c).^2)</span>
    a <span class="pl-k">./=</span> <span class="pl-c1">sum</span>(a)
    a
    <span class="pl-c"><span class="pl-c">#</span> [a; s[2]]</span>
<span class="pl-k">end</span>

<span class="pl-en">μ</span>(s,Θ,t)          <span class="pl-k">=</span> Θ<span class="pl-k">'</span><span class="pl-c1">ϕ</span>(s)
<span class="pl-en">∇μ</span>(s)           <span class="pl-k">=</span> <span class="pl-c1">ϕ</span>(s)
<span class="pl-en">β</span>(s,Θ,noise,i)  <span class="pl-k">=</span> Θ<span class="pl-k">'</span><span class="pl-c1">ϕ</span>(s) <span class="pl-k">+</span> noise[i]
<span class="pl-en">ϕ</span>(s,a,Θ)        <span class="pl-k">=</span> <span class="pl-c1">∇μ</span>(s)<span class="pl-k">*</span>(a<span class="pl-k">-</span><span class="pl-c1">μ</span>(s,Θ,t))
<span class="pl-en">V</span>(s,v)          <span class="pl-k">=</span> v<span class="pl-k">'</span><span class="pl-c1">ϕ</span>(s) <span class="pl-c"><span class="pl-c">#</span> It's a good idea to bias V to some mean of the final landscape</span>
<span class="pl-en">Q</span>(s,a,v,w,Θ,t)    <span class="pl-k">=</span> (<span class="pl-c1">ϕ</span>(s,a,Θ)<span class="pl-k">'</span>w <span class="pl-k">+</span> <span class="pl-c1">V</span>(s,v))[<span class="pl-c1">1</span>]

<span class="pl-k">function</span> <span class="pl-en">gradients</span>(s1,s,a1,a,Θ,w,v,t)
    ϕi <span class="pl-k">=</span> <span class="pl-c1">ϕ</span>(s)
    ∇μ <span class="pl-k">=</span> ϕi
    ∇aQ <span class="pl-k">=</span> ∇μ<span class="pl-k">'</span>w
    ∇wQ <span class="pl-k">=</span> ∇μ<span class="pl-k">*</span>(a<span class="pl-k">-</span>Θ<span class="pl-k">'</span>ϕi)
    ∇vQ <span class="pl-k">=</span> ϕi
    ∇aQ, ∇wQ, ∇vQ, ∇μ
<span class="pl-k">end</span>
<span class="pl-en">simulate</span>(Θ,x0, noise) <span class="pl-k">=</span> <span class="pl-c1">lsim</span>(G, (t,s)<span class="pl-k">-&gt;</span><span class="pl-c1">β</span>(s,Θ,noise,t), t, x0)[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>]
<span class="pl-en">simulate</span>(Θ,x0) <span class="pl-k">=</span> <span class="pl-c1">lsim</span>(G, (t,s)<span class="pl-k">-&gt;</span><span class="pl-c1">μ</span>(s,Θ,t), t, x0)[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>]
<span class="pl-en">exploration</span>(σβ) <span class="pl-k">=</span> <span class="pl-c1">filt</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">5</span>),[<span class="pl-c1">5</span>],σβ<span class="pl-k">*</span><span class="pl-c1">randn</span>(T))
funs            <span class="pl-k">=</span> <span class="pl-c1">DPGfuns</span>(μ,Q, gradients, simulate, exploration, r)

Θ               <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(P<span class="pl-k">*</span>m) <span class="pl-c"><span class="pl-c">#</span> Weights</span>
w               <span class="pl-k">=</span> <span class="pl-c1">0.001</span><span class="pl-c1">randn</span>(P<span class="pl-k">*</span>m)
v               <span class="pl-k">=</span> <span class="pl-c1">0.001</span><span class="pl-c1">randn</span>(P)
initial_state   <span class="pl-k">=</span> <span class="pl-c1">DPGstate</span>(Θ,w,v)

<span class="pl-c"><span class="pl-c">#</span> Train the actor and critic ==========================================</span>
cost, Θ, w, v <span class="pl-k">=</span> <span class="pl-c1">dpg</span>(opts, funs, initial_state, x0)

<span class="pl-c"><span class="pl-c">#</span> Plots results              ==========================================</span>
<span class="pl-c1">plot</span>(cost[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">end</span>])
<span class="pl-c1">gui</span>()

<span class="pl-c1">lsimplot</span>(G, (i,s)<span class="pl-k">-&gt;</span>[<span class="pl-c1">μ</span>(s,Θ)], <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>,T,<span class="pl-c1">200</span>),x0), <span class="pl-c1">plot!</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>After<span class="pl-pds">"</span></span>)
<span class="pl-c1">gui</span>()
<span class="pl-c1">lsimplot</span>(G, (i,s)<span class="pl-k">-&gt;</span>[<span class="pl-c1">μlqr</span>(s)], <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>,T,<span class="pl-c1">200</span>),x0), <span class="pl-c1">plot!</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>LQR<span class="pl-pds">"</span></span>)
<span class="pl-c1">gui</span>()


Qpv_map <span class="pl-k">=</span> Float64[<span class="pl-c1">Q</span>([sv,sp],<span class="pl-c1">0</span>,v,w,Θ)[<span class="pl-c1">1</span>] <span class="pl-k">for</span> sp <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>), sv <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>)]
PyPlot<span class="pl-k">.</span><span class="pl-c1">matshow</span>(Qpv_map); PyPlot<span class="pl-k">.</span><span class="pl-c1">colorbar</span>()
PyPlot<span class="pl-k">.</span><span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Q map<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Position<span class="pl-pds">"</span></span>)
PyPlot<span class="pl-k">.</span><span class="pl-c1">yticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>)


Qpa_map <span class="pl-k">=</span> Float64[<span class="pl-c1">Q</span>([<span class="pl-c1">0</span>,sp],a,v,w,Θ)[<span class="pl-c1">1</span>] <span class="pl-k">for</span> sp <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>), a <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">100</span>)]
PyPlot<span class="pl-k">.</span><span class="pl-c1">matshow</span>(Qpa_map); PyPlot<span class="pl-k">.</span><span class="pl-c1">colorbar</span>()
PyPlot<span class="pl-k">.</span><span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Q map<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Control<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Position<span class="pl-pds">"</span></span>)
PyPlot<span class="pl-k">.</span><span class="pl-c1">yticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)


control_map <span class="pl-k">=</span> Float64[<span class="pl-c1">μ</span>([sv,sp],Θ)[<span class="pl-c1">1</span>] <span class="pl-k">for</span> sp <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>), sv <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>)]
PyPlot<span class="pl-k">.</span><span class="pl-c1">matshow</span>(control_map); PyPlot<span class="pl-k">.</span><span class="pl-c1">colorbar</span>()
PyPlot<span class="pl-k">.</span><span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Control map<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Position<span class="pl-pds">"</span></span>)
PyPlot<span class="pl-k">.</span><span class="pl-c1">yticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>)


control_map <span class="pl-k">=</span> Float64[<span class="pl-c1">μlqr</span>([sv,sp])[<span class="pl-c1">1</span>] <span class="pl-k">for</span> sp <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>), sv <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>)]
PyPlot<span class="pl-k">.</span><span class="pl-c1">matshow</span>(control_map); PyPlot<span class="pl-k">.</span><span class="pl-c1">colorbar</span>()
PyPlot<span class="pl-k">.</span><span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Control map LQR<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Position<span class="pl-pds">"</span></span>)
PyPlot<span class="pl-k">.</span><span class="pl-c1">yticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>);PyPlot<span class="pl-k">.</span><span class="pl-c1">xticks</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>)

<span class="pl-c1">show</span>()
</pre></div>
</article></div>