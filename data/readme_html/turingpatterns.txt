<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multi-scale-turing-patterns" class="anchor" aria-hidden="true" href="#multi-scale-turing-patterns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-Scale Turing Patterns</h1>
<p><a href="https://github.com/yurivish/TuringPatterns.jl/actions"><img src="https://camo.githubusercontent.com/fd71f0b9f1df175ea15e7e871a453be02e51d22b2ee9a0dc3ad9e2e74eba0740/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f79757269766973682f547572696e675061747465726e732e6a6c2f4349" alt="" data-canonical-src="https://img.shields.io/github/workflow/status/yurivish/TuringPatterns.jl/CI" style="max-width:100%;"></a> <a href="https://codecov.io/gh/yurivish/TuringPatterns.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1d9eaadcae7a17fa1bb73e925d64c8b7e476f1ed67efac2bef02a0fc57a68554/68747470733a2f2f636f6465636f762e696f2f67682f79757269766973682f547572696e675061747465726e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/yurivish/TuringPatterns.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A quick example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TuringPatterns

sz = (200, 200)

patterns = [
    SimplePattern(Params(2,   4,   0.01), sz),
    SimplePattern(Params(5,   10,  0.02), sz),
    SimplePattern(Params(10,  20,  0.03), sz),
    SimplePattern(Params(20,  40,  0.04), sz),
    SimplePattern(Params(50,  100, 0.05), sz),
]

saveframe(
    simulate(
        rand(sz...),    # initial conditions
        patterns,    # patterns
        BoxBlur(sz), # blur
        100          # iterations
    ),
    &quot;picture.png&quot;
)

# `open` on macOS or `xdg-open` on linux
run(`open picture.png`)
"><pre><span class="pl-k">using</span> TuringPatterns

sz <span class="pl-k">=</span> (<span class="pl-c1">200</span>, <span class="pl-c1">200</span>)

patterns <span class="pl-k">=</span> [
    <span class="pl-c1">SimplePattern</span>(<span class="pl-c1">Params</span>(<span class="pl-c1">2</span>,   <span class="pl-c1">4</span>,   <span class="pl-c1">0.01</span>), sz),
    <span class="pl-c1">SimplePattern</span>(<span class="pl-c1">Params</span>(<span class="pl-c1">5</span>,   <span class="pl-c1">10</span>,  <span class="pl-c1">0.02</span>), sz),
    <span class="pl-c1">SimplePattern</span>(<span class="pl-c1">Params</span>(<span class="pl-c1">10</span>,  <span class="pl-c1">20</span>,  <span class="pl-c1">0.03</span>), sz),
    <span class="pl-c1">SimplePattern</span>(<span class="pl-c1">Params</span>(<span class="pl-c1">20</span>,  <span class="pl-c1">40</span>,  <span class="pl-c1">0.04</span>), sz),
    <span class="pl-c1">SimplePattern</span>(<span class="pl-c1">Params</span>(<span class="pl-c1">50</span>,  <span class="pl-c1">100</span>, <span class="pl-c1">0.05</span>), sz),
]

<span class="pl-c1">saveframe</span>(
    <span class="pl-c1">simulate</span>(
        <span class="pl-c1">rand</span>(sz<span class="pl-k">...</span>),    <span class="pl-c"><span class="pl-c">#</span> initial conditions</span>
        patterns,    <span class="pl-c"><span class="pl-c">#</span> patterns</span>
        <span class="pl-c1">BoxBlur</span>(sz), <span class="pl-c"><span class="pl-c">#</span> blur</span>
        <span class="pl-c1">100</span>          <span class="pl-c"><span class="pl-c">#</span> iterations</span>
    ),
    <span class="pl-s"><span class="pl-pds">"</span>picture.png<span class="pl-pds">"</span></span>
)

<span class="pl-c"><span class="pl-c">#</span> `open` on macOS or `xdg-open` on linux</span>
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>open picture.png<span class="pl-pds">`</span></span>)</pre></div>
<p>You should see something like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/picture.png"><img src="docs/picture.png" alt="A multi-scale Turing pattern" style="max-width:100%;"></a></p>
<h2><a id="user-content-integration-with-geostatsjl" class="anchor" aria-hidden="true" href="#integration-with-geostatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integration with GeoStats.jl</h2>
<p>Multiple images can be generated using:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GeoStats
using TuringPatterns
using Plots

# define simulation problem for a variable &quot;z&quot;
# request 3 realizations (i.e. images)
problem = SimulationProblem(RegularGrid{Float64}(200,200), :z =&gt; Float64, 3)

# solve problem with Turing patterns solver
solution = solve(problem, TPS())

plot(solution)
"><pre><span class="pl-k">using</span> GeoStats
<span class="pl-k">using</span> TuringPatterns
<span class="pl-k">using</span> Plots

<span class="pl-c"><span class="pl-c">#</span> define simulation problem for a variable "z"</span>
<span class="pl-c"><span class="pl-c">#</span> request 3 realizations (i.e. images)</span>
problem <span class="pl-k">=</span> <span class="pl-c1">SimulationProblem</span>(<span class="pl-c1">RegularGrid</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">200</span>,<span class="pl-c1">200</span>), <span class="pl-c1">:z</span> <span class="pl-k">=&gt;</span> Float64, <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> solve problem with Turing patterns solver</span>
solution <span class="pl-k">=</span> <span class="pl-c1">solve</span>(problem, <span class="pl-c1">TPS</span>())

<span class="pl-c1">plot</span>(solution)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/geostats.png"><img src="docs/geostats.png" alt="GeoStats.jl solution" style="max-width:100%;"></a></p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li><a href="http://www.jonathanmccabe.com/Cyclic_Symmetric_Multi-Scale_Turing_Patterns.pdf" rel="nofollow">McCabe, J. Cyclic Symmetric Multi-Scale Turing Patterns</a></li>
<li><a href="https://www.flickr.com/photos/jonathanmccabe/sets/72157644907151060" rel="nofollow">Example gallery 1</a> and <a href="https://www.flickr.com/photos/jonathanmccabe/sets/72157673446623356" rel="nofollow">Example gallery 2</a></li>
</ul>
</article></div>