<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto">
  <a href="https://github.com/oheil/NormalizeQuantiles.jl/actions">
    <img src="https://camo.githubusercontent.com/ff1dcc32b912b04b33f31b9c69a93bc1c2bd8c0b6c377cd1ba20b97baa2e997d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6f6865696c2f4e6f726d616c697a655175616e74696c65732e6a6c2f6d61635f6e696768746c792e796d6c3f6272616e63683d6d6173746572" data-canonical-src="https://img.shields.io/github/actions/workflow/status/oheil/NormalizeQuantiles.jl/mac_nightly.yml?branch=master" style="max-width: 100%;">
  </a>
  <a href="https://github.com/oheil/NormalizeQuantiles.jl/actions">
    <img src="https://camo.githubusercontent.com/39d9a1dd9de82e7ad441d4b3843cc7f11a93a8c637987d40b7017655ab43c9fc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6f6865696c2f4e6f726d616c697a655175616e74696c65732e6a6c2f6c696e75785f6e696768746c792e796d6c3f6272616e63683d6d6173746572" data-canonical-src="https://img.shields.io/github/actions/workflow/status/oheil/NormalizeQuantiles.jl/linux_nightly.yml?branch=master" style="max-width: 100%;">
  </a>
  <a href="https://github.com/oheil/NormalizeQuantiles.jl/actions">
    <img src="https://camo.githubusercontent.com/cfa40fd681333f52b2b1cbf203fed73181c39b129a362697d47a3f4ea9c179e8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6f6865696c2f4e6f726d616c697a655175616e74696c65732e6a6c2f77696e646f77735f6e696768746c792e796d6c3f6272616e63683d6d6173746572" data-canonical-src="https://img.shields.io/github/actions/workflow/status/oheil/NormalizeQuantiles.jl/windows_nightly.yml?branch=master" style="max-width: 100%;">
  </a>
  <a href="https://codecov.io/gh/oheil/NormalizeQuantiles.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/de0410c864a77710dede099bb8e175f7394d01bc640455153fd4314f0e24516a/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6f6865696c2f4e6f726d616c697a655175616e74696c65732e6a6c2f6d61737465723f6c6162656c3d436f6465636f76266c6f676f3d636f6465636f76266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/codecov/c/github/oheil/NormalizeQuantiles.jl/master?label=Codecov&amp;logo=codecov&amp;logoColor=white&amp;style=flat-square" style="max-width: 100%;">
  </a>
</p>
<p dir="auto"><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/ed51270ad41e2b842f9423b165977ac42f8498581be7c17c78818d1a45b834d5/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/580470157261ae542f56351c931e41f07d47fd7ed689fca35a222c1e62ef9ccb/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e6f726d616c697a655175616e74696c65732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NormalizeQuantiles.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/NormalizeQuantiles/D7PQ0?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/236d293bdf4464fcc158353719c65c532efe0f1ee02fa29e533d048e0c88b833/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4e6f726d616c697a655175616e74696c65732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/NormalizeQuantiles/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/NormalizeQuantiles/D7PQ0" rel="nofollow"><img src="https://camo.githubusercontent.com/d036f495d15cd0ab2f210b58658b4809c700102af3be42859b349ca706aa548b/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4e6f726d616c697a655175616e74696c65732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/NormalizeQuantiles/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/NormalizeQuantiles/D7PQ0" rel="nofollow"><img src="https://camo.githubusercontent.com/976fe59629136e26d40608f8593d7de8db3c3dcd89c998b7562eac1eff5b2f73/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4e6f726d616c697a655175616e74696c65732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/NormalizeQuantiles/pkgeval.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-normalizequantiles" class="anchor" aria-hidden="true" href="#normalizequantiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NormalizeQuantiles</h1>
<p dir="auto">For julia 0.4, 0.5, 0.6 see: <a href="https://github.com/oheil/NormalizeQuantiles.jl/tree/backport-0.6">https://github.com/oheil/NormalizeQuantiles.jl/tree/backport-0.6</a></p>
<p dir="auto">Package NormalizeQuantiles implements quantile normalization</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qn = normalizeQuantiles(array);"><pre>qn <span class="pl-k">=</span> <span class="pl-c1">normalizeQuantiles</span>(array);</pre></div>
<p dir="auto">and provides a function to calculate sample ranks</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(array);"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(array);</pre></div>
<p dir="auto">of a given vector or matrix.</p>
<p dir="auto"><strong>References</strong></p>
<ul dir="auto">
<li>Amaratunga, D.; Cabrera, J. (2001). "Analysis of Data from Viral DNA Microchips". Journal of the American Statistical Association. 96 (456): 1161. <a href="https://doi.org/10.1198/016214501753381814" rel="nofollow">doi:10.1198/016214501753381814</a></li>
<li>Bolstad, B. M.; Irizarry, R. A.; Astrand, M.; Speed, T. P. (2003). "A comparison of normalization methods for high density oligonucleotide array data based on variance and bias". Bioinformatics. 19 (2): 185–193. <a href="https://doi.org/10.1093/bioinformatics/19.2.185" rel="nofollow">doi:10.1093/bioinformatics/19.2.185</a> <a href="https://www.ncbi.nlm.nih.gov/pubmed/12538238" rel="nofollow">PMID 12538238</a></li>
<li>Wikipedia contributors. (2018, June 12). Quantile normalization. In Wikipedia, The Free Encyclopedia. Retrieved 11:54, August 3, 2018, from <a href="https://en.wikipedia.org/w/index.php?title=Quantile_normalization" rel="nofollow">https://en.wikipedia.org/w/index.php?title=Quantile_normalization</a></li>
</ul>
<p dir="auto"><strong>Table of Contents</strong></p>
<ul dir="auto">
<li><a href="#dependencies">Dependencies</a></li>
<li><a href="#remarks">Remarks</a></li>
<li><a href="#usage-examples-normalizequantiles">Usage examples <code>normalizeQuantiles</code></a>
<ul dir="auto">
<li><a href="#general-usage">General usage</a></li>
<li><a href="#missing-values">Missing Values</a></li>
<li><a href="#sharedarray-and-multicore-usage-examples">SharedArray and multicore usage examples</a></li>
<li><a href="#offsetarrays">OffsetArrays</a></li>
</ul>
</li>
<li><a href="#behaviour-of-function-normalizequantiles">Behaviour of function <code>normalizeQuantiles</code></a></li>
<li><a href="#data-prerequisites">Data prerequisites</a></li>
<li><a href="#remarks-on-data-with-missing-values">Remarks on data with missing values</a></li>
<li><a href="#list-of-all-exported-definitions-for-normalizequantiles">List of all exported definitions for <code>normalizeQuantiles</code></a></li>
<li><a href="#usage-examples-sampleranks">Usage examples <code>sampleRanks</code></a></li>
<li><a href="#list-of-all-exported-definitions-for-sampleranks">List of all exported definitions for <code>sampleRanks</code></a></li>
</ul>
<h2 dir="auto"><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependencies</h2>
<h4 dir="auto"><a id="user-content-julia-versions" class="anchor" aria-hidden="true" href="#julia-versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia versions</h4>
<ul dir="auto">
<li>Julia 0.7 or above</li>
</ul>
<h4 dir="auto"><a id="user-content-third-party-packages" class="anchor" aria-hidden="true" href="#third-party-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Third party packages</h4>
<ul dir="auto">
<li>none</li>
</ul>
<h4 dir="auto"><a id="user-content-standard-library-packages" class="anchor" aria-hidden="true" href="#standard-library-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Standard Library packages</h4>
<ul dir="auto">
<li><a href="https://docs.julialang.org/en/v1/stdlib/Distributed/" rel="nofollow">Distributed</a></li>
<li><a href="https://docs.julialang.org/en/v1/stdlib/SharedArrays/" rel="nofollow">SharedArrays</a></li>
<li><a href="https://docs.julialang.org/en/v1/stdlib/Random/" rel="nofollow">Random</a></li>
<li><a href="https://docs.julialang.org/en/v1/stdlib/Statistics/" rel="nofollow">Statistics</a></li>
</ul>
<h2 dir="auto"><a id="user-content-remarks" class="anchor" aria-hidden="true" href="#remarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Remarks</h2>
<ul dir="auto">
<li>for julia 0.4, 0.5, 0.6 see: <a href="https://github.com/oheil/NormalizeQuantiles.jl/tree/backport-0.6">https://github.com/oheil/NormalizeQuantiles.jl/tree/backport-0.6</a></li>
<li>Code examples and output on this page have been used on and copied from the julia 0.7 <a href="https://docs.julialang.org/en/latest/manual/interacting-with-julia/" rel="nofollow">REPL</a></li>
<li>Last commit with julia 0.3 support: <a href="https://github.com/oheil/NormalizeQuantiles.jl/tree/eb97d24ff77d470d0d121fabf83d59979ad0db36">Jan 20, 2017, eb97d24ff77d470d0d121fabf83d59979ad0db36</a>
<ul dir="auto">
<li>git checkout eb97d24ff77d470d0d121fabf83d59979ad0db36</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-usage-examples-normalizequantiles" class="anchor" aria-hidden="true" href="#usage-examples-normalizequantiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage examples <code>normalizeQuantiles</code></h2>
<h4 dir="auto"><a id="user-content-general-usage" class="anchor" aria-hidden="true" href="#general-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General usage</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;NormalizeQuantiles&quot;);
using NormalizeQuantiles;"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NormalizeQuantiles<span class="pl-pds">"</span></span>);
<span class="pl-k">using</span> NormalizeQuantiles;</pre></div>
<p dir="auto">The following <code>array</code> is interpreted as a matrix with 4 rows and 3 columns:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="array = [ 3.0 2.0 1.0 ; 4.0 5.0 6.0 ; 9.0 7.0 8.0 ; 5.0 2.0 8.0 ];
qn = normalizeQuantiles(array)"><pre>array <span class="pl-k">=</span> [ <span class="pl-c1">3.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ; <span class="pl-c1">4.0</span> <span class="pl-c1">5.0</span> <span class="pl-c1">6.0</span> ; <span class="pl-c1">9.0</span> <span class="pl-c1">7.0</span> <span class="pl-c1">8.0</span> ; <span class="pl-c1">5.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">8.0</span> ];
qn <span class="pl-k">=</span> <span class="pl-c1">normalizeQuantiles</span>(array)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; qn
	4×3 Array{Float64,2}:
	 2.0  3.0  2.0
	 4.0  6.0  4.0
	 8.0  8.0  7.0
	 6.0  3.0  7.0"><pre class="notranslate"><code>	julia&gt; qn
	4×3 Array{Float64,2}:
	 2.0  3.0  2.0
	 4.0  6.0  4.0
	 8.0  8.0  7.0
	 6.0  3.0  7.0
</code></pre></div>
<p dir="auto">The columns in <code>qn</code> are now quantile normalized to each other.</p>
<p dir="auto">The input array must not have dimension larger than 2.</p>
<p dir="auto">Return type of function normalizeQuantiles is always Array{Float64,2}</p>
<h4 dir="auto"><a id="user-content-missing-values" class="anchor" aria-hidden="true" href="#missing-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Missing Values</h4>
<p dir="auto">If your data contain some missing values like <code>NaN</code> (Not a Number) or something else, they will be changed to <code>NaN</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="array = [ NaN 2.0 1.0 ; 4.0 &quot;empty&quot; 6.0 ; 9.0 7.0 8.0 ; 5.0 2.0 8.0 ];"><pre>array <span class="pl-k">=</span> [ <span class="pl-c1">NaN</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ; <span class="pl-c1">4.0</span> <span class="pl-s"><span class="pl-pds">"</span>empty<span class="pl-pds">"</span></span> <span class="pl-c1">6.0</span> ; <span class="pl-c1">9.0</span> <span class="pl-c1">7.0</span> <span class="pl-c1">8.0</span> ; <span class="pl-c1">5.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">8.0</span> ];</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; array
	4×3 Array{Any,2}:
	 NaN    2.0       1.0
	4.0   &quot;empty&quot;  6.0
	9.0  7.0       8.0
	5.0  2.0       8.0"><pre class="notranslate"><code>	julia&gt; array
	4×3 Array{Any,2}:
	 NaN    2.0       1.0
	4.0   "empty"  6.0
	9.0  7.0       8.0
	5.0  2.0       8.0
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qn = normalizeQuantiles(array)"><pre>qn <span class="pl-k">=</span> <span class="pl-c1">normalizeQuantiles</span>(array)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; qn
	4×3 Array{Float64,2}:
	 NaN      3.25  1.5
	   5.0  NaN     5.0
	   8.0    8.0   6.5
	   5.0    3.25  6.5"><pre class="notranslate"><code>	julia&gt; qn
	4×3 Array{Float64,2}:
	 NaN      3.25  1.5
	   5.0  NaN     5.0
	   8.0    8.0   6.5
	   5.0    3.25  6.5
</code></pre></div>
<p dir="auto">NaN is of type Float64, so there is nothing similar for Int types.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; typeof(NaN)
	Float64"><pre class="notranslate"><code>	julia&gt; typeof(NaN)
	Float64
</code></pre></div>
<p dir="auto">You can convert the result to <code>Array{Union{Missing, Float64},2}</code> with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qnMissing = convert(Array{Union{Missing,Float64}},qn)"><pre>qnMissing <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array{Union{Missing,Float64}},qn)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; qnMissing
	4×3 Array{Union{Missing, Float64},2}:
	 NaN      3.25  1.5
	   5.0  NaN     5.0
	   8.0    8.0   6.5
	   5.0    3.25  6.5"><pre class="notranslate"><code>	julia&gt; qnMissing
	4×3 Array{Union{Missing, Float64},2}:
	 NaN      3.25  1.5
	   5.0  NaN     5.0
	   8.0    8.0   6.5
	   5.0    3.25  6.5
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qnMissing[isnan.(qnMissing)] = missing;"><pre>qnMissing[<span class="pl-c1">isnan</span>.(qnMissing)] <span class="pl-k">=</span> <span class="pl-c1">missing</span>;</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; qnMissing
	4×3 Array{Union{Missing, Float64},2}:
	  missing  3.25      1.5
	 5.0        missing  5.0
	 8.0       8.0       6.5
	 5.0       3.25      6.5"><pre class="notranslate"><code>	julia&gt; qnMissing
	4×3 Array{Union{Missing, Float64},2}:
	  missing  3.25      1.5
	 5.0        missing  5.0
	 8.0       8.0       6.5
	 5.0       3.25      6.5
</code></pre></div>
<h4 dir="auto"><a id="user-content-sharedarray-and-multicore-usage-examples" class="anchor" aria-hidden="true" href="#sharedarray-and-multicore-usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SharedArray and multicore usage examples</h4>
<blockquote>
<p dir="auto">Remark: restart julia now. <code>addprocs()</code> must be called before <code>using NormalizeQuantiles;</code>.</p>
</blockquote>
<p dir="auto">To use multiple cores on a single machine you can use the standard packages <code>Distributed</code> and <code>SharedArrays</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs();
@everywhere using SharedArrays
@everywhere using NormalizeQuantiles

sa = SharedArray{Float64}([ 3.0 2.0 1.0 ; 4.0 5.0 6.0 ; 9.0 7.0 8.0 ; 5.0 2.0 8.0 ])"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>();
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> SharedArrays
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> NormalizeQuantiles

sa <span class="pl-k">=</span> <span class="pl-c1">SharedArray</span><span class="pl-c1">{Float64}</span>([ <span class="pl-c1">3.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ; <span class="pl-c1">4.0</span> <span class="pl-c1">5.0</span> <span class="pl-c1">6.0</span> ; <span class="pl-c1">9.0</span> <span class="pl-c1">7.0</span> <span class="pl-c1">8.0</span> ; <span class="pl-c1">5.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">8.0</span> ])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; sa
	4×3 SharedArray{Float64,2}:
	 3.0  2.0  1.0
	 4.0  5.0  6.0
	 9.0  7.0  8.0
	 5.0  2.0  8.0"><pre class="notranslate"><code>	julia&gt; sa
	4×3 SharedArray{Float64,2}:
	 3.0  2.0  1.0
	 4.0  5.0  6.0
	 9.0  7.0  8.0
	 5.0  2.0  8.0
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qn = normalizeQuantiles(sa)"><pre>qn <span class="pl-k">=</span> <span class="pl-c1">normalizeQuantiles</span>(sa)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; qn
	4×3 Array{Float64,2}:
	 2.0  3.0  2.0
	 4.0  6.0  4.0
	 8.0  8.0  7.0
	 6.0  3.0  7.0"><pre class="notranslate"><code>	julia&gt; qn
	4×3 Array{Float64,2}:
	 2.0  3.0  2.0
	 4.0  6.0  4.0
	 8.0  8.0  7.0
	 6.0  3.0  7.0
</code></pre></div>
<blockquote>
<p dir="auto">Remark: restart julia again.</p>
</blockquote>
<p dir="auto">For small data sets using <code>Distributed</code> and <code>SharedArrays</code> decreases performance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NormalizeQuantiles
la = randn((100,100));
normalizeQuantiles(la); @time normalizeQuantiles(la);"><pre><span class="pl-k">using</span> NormalizeQuantiles
la <span class="pl-k">=</span> <span class="pl-c1">randn</span>((<span class="pl-c1">100</span>,<span class="pl-c1">100</span>));
<span class="pl-c1">normalizeQuantiles</span>(la); <span class="pl-c1">@time</span> <span class="pl-c1">normalizeQuantiles</span>(la);</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; @time normalizeQuantiles(la);
	  0.003178 seconds (8.35 k allocations: 2.813 MiB)"><pre class="notranslate"><code>	julia&gt; @time normalizeQuantiles(la);
	  0.003178 seconds (8.35 k allocations: 2.813 MiB)
</code></pre></div>
<blockquote>
<p dir="auto">Remark: restart julia.</p>
</blockquote>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs();
@everywhere using SharedArrays
@everywhere using NormalizeQuantiles
sa = SharedArray{Float64}( randn((100,100)) );
normalizeQuantiles(sa); @time normalizeQuantiles(sa);"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>();
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> SharedArrays
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> NormalizeQuantiles
sa <span class="pl-k">=</span> <span class="pl-c1">SharedArray</span><span class="pl-c1">{Float64}</span>( <span class="pl-c1">randn</span>((<span class="pl-c1">100</span>,<span class="pl-c1">100</span>)) );
<span class="pl-c1">normalizeQuantiles</span>(sa); <span class="pl-c1">@time</span> <span class="pl-c1">normalizeQuantiles</span>(sa);</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; @time normalizeQuantiles(sa);
	  0.013014 seconds (12.10 k allocations: 432.146 KiB)"><pre class="notranslate"><code>	julia&gt; @time normalizeQuantiles(sa);
	  0.013014 seconds (12.10 k allocations: 432.146 KiB)
</code></pre></div>
<blockquote>
<p dir="auto">Remark: restart julia.</p>
</blockquote>
<p dir="auto">For larger data sets performance increases with multicore processors:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NormalizeQuantiles
la = randn((1000,10000));
normalizeQuantiles(la); @time normalizeQuantiles(la);"><pre><span class="pl-k">using</span> NormalizeQuantiles
la <span class="pl-k">=</span> <span class="pl-c1">randn</span>((<span class="pl-c1">1000</span>,<span class="pl-c1">10000</span>));
<span class="pl-c1">normalizeQuantiles</span>(la); <span class="pl-c1">@time</span> <span class="pl-c1">normalizeQuantiles</span>(la);</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; @time normalizeQuantiles(la);
	  2.959431 seconds (784.18 k allocations: 2.281 GiB, 12.13% gc time)"><pre class="notranslate"><code>	julia&gt; @time normalizeQuantiles(la);
	  2.959431 seconds (784.18 k allocations: 2.281 GiB, 12.13% gc time)
</code></pre></div>
<blockquote>
<p dir="auto">Remark: restart julia.</p>
</blockquote>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs();
@everywhere using SharedArrays
@everywhere using NormalizeQuantiles
la = randn((1000,10000));
sa = SharedArray{Float64}(la);
normalizeQuantiles(sa); @time normalizeQuantiles(sa);"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>();
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> SharedArrays
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> NormalizeQuantiles
la <span class="pl-k">=</span> <span class="pl-c1">randn</span>((<span class="pl-c1">1000</span>,<span class="pl-c1">10000</span>));
sa <span class="pl-k">=</span> <span class="pl-c1">SharedArray</span><span class="pl-c1">{Float64}</span>(la);
<span class="pl-c1">normalizeQuantiles</span>(sa); <span class="pl-c1">@time</span> <span class="pl-c1">normalizeQuantiles</span>(sa);</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; @time normalizeQuantiles(sa);
	  1.030016 seconds (83.85 k allocations: 80.754 MiB, 5.77% gc time)"><pre class="notranslate"><code>	julia&gt; @time normalizeQuantiles(sa);
	  1.030016 seconds (83.85 k allocations: 80.754 MiB, 5.77% gc time)
</code></pre></div>
<p dir="auto">Using non-SharedArrays in a multicore setup is slowest:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; normalizeQuantiles(la); @time normalizeQuantiles(la);
	  5.776685 seconds (294.06 k allocations: 92.532 MiB, 0.28% gc time)"><pre class="notranslate"><code>	julia&gt; normalizeQuantiles(la); @time normalizeQuantiles(la);
	  5.776685 seconds (294.06 k allocations: 92.532 MiB, 0.28% gc time)
</code></pre></div>
<h4 dir="auto"><a id="user-content-offsetarrays" class="anchor" aria-hidden="true" href="#offsetarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OffsetArrays</h4>
<blockquote>
<p dir="auto">Remark: with Julia 1.3.1 OffsetArrays are not supported until <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="571341967" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/34886" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/34886/hovercard" href="https://github.com/JuliaLang/julia/pull/34886">JuliaLang/julia#34886</a> is released (expected in Julia 1.5)</p>
</blockquote>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using NormalizeQuantiles, OffsetArrays

array = [ 3 missing 1 ; 4 5 6 ; missing 7 8 ; 5 2 8 ];
oa = OffsetArray(array,-1,-1);"><pre class="notranslate"><code>using NormalizeQuantiles, OffsetArrays

array = [ 3 missing 1 ; 4 5 6 ; missing 7 8 ; 5 2 8 ];
oa = OffsetArray(array,-1,-1);
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; oa
4×3 OffsetArray(::Array{Union{Missing, Int64},2}, 0:3, 0:2) with eltype Union{Missing, Int64} with indices 0:3×0:2:
 3          missing  1
 4         5         6
  missing  7         8
 5         2         8"><pre class="notranslate"><code>julia&gt; oa
4×3 OffsetArray(::Array{Union{Missing, Int64},2}, 0:3, 0:2) with eltype Union{Missing, Int64} with indices 0:3×0:2:
 3          missing  1
 4         5         6
  missing  7         8
 5         2         8
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="qn = normalizeQuantiles(oa);"><pre class="notranslate"><code>qn = normalizeQuantiles(oa);
</code></pre></div>
<p dir="auto">The quantile normalized result is not an OffsetArray:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; qn
4×3 Array{Float64,2}:
   2.0      NaN        2.0
   4.0        6.5      4.0
 NaN          6.66667  6.58333
   6.66667    4.0      6.58333"><pre class="notranslate"><code>julia&gt; qn
4×3 Array{Float64,2}:
   2.0      NaN        2.0
   4.0        6.5      4.0
 NaN          6.66667  6.58333
   6.66667    4.0      6.58333
</code></pre></div>
<h2 dir="auto"><a id="user-content-behaviour-of-function-normalizequantiles" class="anchor" aria-hidden="true" href="#behaviour-of-function-normalizequantiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Behaviour of function <code>normalizeQuantiles</code></h2>
<p dir="auto">After quantile normalization the sets of values of each column have the same statistical properties.
This is quantile normalization without a reference column.</p>
<p dir="auto">The function <code>normalizeQuantiles</code> expects an array with dimension &lt;= 2 and always returns a matrix of same dimensions as the input matrix and of type <code>Array{Float64,2}</code>.</p>
<p dir="auto"><code>NaN</code> values of type <code>Float64</code> and any other non-numbers, like strings, are treated as random missing values and the result value will be <code>NaN</code>. See "Remarks on data with missing values" below.</p>
<p dir="auto">Equal values in a column of the input matrix will have different quantile normalized values. Those different result values can't be assigned back to the proper original positions because they are indistinguishable. The mean value of the different result values are therefor put back into original positions.</p>
<p dir="auto">Example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; array = [ 1 2 ; 2  3 ; 2 5 ]
3×2 Matrix{Int64}:
 1  2
 2  3
 2  5

julia&gt; qn = normalizeQuantiles(array)
3×2 Matrix{Float64}:
 1.5  1.5
 3.0  2.5
 3.0  3.5"><pre class="notranslate"><code>julia&gt; array = [ 1 2 ; 2  3 ; 2 5 ]
3×2 Matrix{Int64}:
 1  2
 2  3
 2  5

julia&gt; qn = normalizeQuantiles(array)
3×2 Matrix{Float64}:
 1.5  1.5
 3.0  2.5
 3.0  3.5
</code></pre></div>
<p dir="auto">In row 2 and 3 instead if <code>2.5</code> and <code>3.5</code> the mean <code>3.0</code> is the result in both rows.</p>
<h2 dir="auto"><a id="user-content-data-prerequisites" class="anchor" aria-hidden="true" href="#data-prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data prerequisites</h2>
<p dir="auto">To use quantile normalization your data should have the following properties:</p>
<ul dir="auto">
<li>the distribution of values in each column should be similar</li>
<li>number of values for each column should be large</li>
<li>number of missing values in the data should be small and of random nature</li>
</ul>
<h2 dir="auto"><a id="user-content-remarks-on-data-with-missing-values" class="anchor" aria-hidden="true" href="#remarks-on-data-with-missing-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Remarks on data with missing values</h2>
<p dir="auto">Currently there seems to be no general agreement on how to deal with missing values during quantile normalization. Here we put any given missing value back into the sorted column at the original position before calculating the mean of the rows.</p>
<h2 dir="auto"><a id="user-content-list-of-all-exported-definitions-for-normalizequantiles" class="anchor" aria-hidden="true" href="#list-of-all-exported-definitions-for-normalizequantiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List of all exported definitions for <code>normalizeQuantiles</code></h2>
<table>
<thead>
<tr>
<th align="right"></th>
<th>normalizeQuantiles</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><strong>Definition:</strong></td>
<td><code>Array{Float64,2} function normalizeQuantiles(matrix::AbstractArray)</code></td>
</tr>
<tr>
<td align="right">Input type:</td>
<td><code>matrix::AbstractArray</code></td>
</tr>
<tr>
<td align="right">Return type:</td>
<td><code>Array{Float64,2}</code></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-usage-examples-sampleranks" class="anchor" aria-hidden="true" href="#usage-examples-sampleranks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage examples <code>sampleRanks</code></h2>
<p dir="auto"><code>sampleRanks</code> of a given vector calculates for each element the rank, which is the position of the element in the sorted vector.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NormalizeQuantiles
a = [ 5.0 2.0 4.0 3.0 1.0 ];
(r,m) = sampleRanks(a);   # here only return value r is relevant, for m see below
r"><pre><span class="pl-k">using</span> NormalizeQuantiles
a <span class="pl-k">=</span> [ <span class="pl-c1">5.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">4.0</span> <span class="pl-c1">3.0</span> <span class="pl-c1">1.0</span> ];
(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a);   <span class="pl-c"><span class="pl-c">#</span> here only return value r is relevant, for m see below</span>
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 2
	 4
	 3
	 1"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 2
	 4
	 3
	 1
</code></pre></div>
<p dir="auto">If you provide a matrix like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="array = [ 1.0 2.0 3.0 ; 4.0 5.0 6.0 ; 7.0 8.0 9.0 ; 10.0 11.0 12.0 ]"><pre>array <span class="pl-k">=</span> [ <span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span> ; <span class="pl-c1">4.0</span> <span class="pl-c1">5.0</span> <span class="pl-c1">6.0</span> ; <span class="pl-c1">7.0</span> <span class="pl-c1">8.0</span> <span class="pl-c1">9.0</span> ; <span class="pl-c1">10.0</span> <span class="pl-c1">11.0</span> <span class="pl-c1">12.0</span> ]</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; array
	4×3 Array{Float64,2}:
	  1.0   2.0   3.0
	  4.0   5.0   6.0
	  7.0   8.0   9.0
	 10.0  11.0  12.0"><pre class="notranslate"><code>	julia&gt; array
	4×3 Array{Float64,2}:
	  1.0   2.0   3.0
	  4.0   5.0   6.0
	  7.0   8.0   9.0
	 10.0  11.0  12.0
</code></pre></div>
<p dir="auto">ranks are calculated column wise, or in other words, array is treated as <code>array[:]</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(array);
r"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(array);
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	12-element Array{Union{Missing, Int64},1}:
	  1
	  4
	  7
	 10
	  2
	  5
	  8
	 11
	  3
	  6
	  9
	 12"><pre class="notranslate"><code>	julia&gt; r
	12-element Array{Union{Missing, Int64},1}:
	  1
	  4
	  7
	 10
	  2
	  5
	  8
	 11
	  3
	  6
	  9
	 12
</code></pre></div>
<p dir="auto">There are three optional keyword parameters <code>tiesMethod</code>, <code>naIncreasesRank</code> and <code>resultMatrix</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(a,tiesMethod=tmMin,naIncreasesRank=false,resultMatrix=true);
(r,m) = sampleRanks(a,resultMatrix=true);"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,tiesMethod<span class="pl-k">=</span>tmMin,naIncreasesRank<span class="pl-k">=</span><span class="pl-c1">false</span>,resultMatrix<span class="pl-k">=</span><span class="pl-c1">true</span>);
(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,resultMatrix<span class="pl-k">=</span><span class="pl-c1">true</span>);</pre></div>
<p dir="auto">Equal values in the vector are called ties. There are several methods available on how to treat ties:</p>
<ul dir="auto">
<li>tmMin : the smallest rank for all ties (default)</li>
<li>tmMax : the largest rank</li>
<li>tmOrder : increasing ranks</li>
<li>tmReverse : decreasing ranks</li>
<li>tmRandom : the ranks are randomly distributed</li>
<li>tmAverage : the average rounded to the next integer</li>
</ul>
<p dir="auto">These methods are defined and exported as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="	@enum qnTiesMethods tmMin tmMax tmOrder tmReverse tmRandom tmAverage"><pre>	<span class="pl-c1">@enum</span> qnTiesMethods tmMin tmMax tmOrder tmReverse tmRandom tmAverage</pre></div>
<p dir="auto">Internally ties have increasing ranks. On these the chosen method is applied.</p>
<p dir="auto">The next rank for the successive values after the ties is the so far highest used rank plus 1.</p>
<p dir="auto">Examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = [ 7.0 2.0 4.0 2.0 1.0 ];
(r,m) = sampleRanks(a); #which is the same as (r,m)=sampleRanks(a,tiesMethod=tmMin)
r"><pre>a <span class="pl-k">=</span> [ <span class="pl-c1">7.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">4.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ];
(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a); <span class="pl-c"><span class="pl-c">#</span>which is the same as (r,m)=sampleRanks(a,tiesMethod=tmMin)</span>
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 4
	 2
	 3
	 2
	 1"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 4
	 2
	 3
	 2
	 1
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(a,tiesMethod=tmMax);
r"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,tiesMethod<span class="pl-k">=</span>tmMax);
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 3
	 4
	 3
	 1"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 3
	 4
	 3
	 1
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(a,tiesMethod=tmReverse);
r"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,tiesMethod<span class="pl-k">=</span>tmReverse);
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 3
	 4
	 2
	 1"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	 5
	 3
	 4
	 2
	 1
</code></pre></div>
<p dir="auto">One or more missing values in the vector are never equal and remain on there position after sorting. The rank of each missing value is always missing::Missing. The default is that a missing value does not increase the rank for successive values. Giving true keyword parameter <code>naIncreasesRank</code> changes that behavior to increasing the rank by 1 for successive values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = [ 7.0 2.0 4.0 2.0 1.0 ];
a[1] = NaN;
(r,m) = sampleRanks(a);
r"><pre>a <span class="pl-k">=</span> [ <span class="pl-c1">7.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">4.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ];
a[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">NaN</span>;
(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a);
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	  missing
	 2
	 3
	 2
	 1"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	  missing
	 2
	 3
	 2
	 1
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(r,m) = sampleRanks(a,naIncreasesRank=true);
r"><pre>(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,naIncreasesRank<span class="pl-k">=</span><span class="pl-c1">true</span>);
r</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	  missing
	 3
	 4
	 3
	 2"><pre class="notranslate"><code>	julia&gt; r
	5-element Array{Union{Missing, Int64},1}:
	  missing
	 3
	 4
	 3
	 2
</code></pre></div>
<p dir="auto">The keyword parameter <code>resultMatrix</code> lets you generate a dictionary of rank indices to allow direct access to all values with a given rank. For large vectors this may have a large memory consumption therefor the default is to return an empty dictionary of type <code>Dict{Int64,Array{Int64,N}}</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = [ 7.0 2.0 4.0 2.0 1.0 ];
(r,m) = sampleRanks(a,resultMatrix=true);
m"><pre>a <span class="pl-k">=</span> [ <span class="pl-c1">7.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">4.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span> ];
(r,m) <span class="pl-k">=</span> <span class="pl-c1">sampleRanks</span>(a,resultMatrix<span class="pl-k">=</span><span class="pl-c1">true</span>);
m</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; m
	Dict{Int64,Array{Int64,N} where N} with 4 entries:
	  4 =&gt; [1]
	  2 =&gt; [2,4]
	  3 =&gt; [3]
	  1 =&gt; [5]"><pre class="notranslate"><code>	julia&gt; m
	Dict{Int64,Array{Int64,N} where N} with 4 entries:
	  4 =&gt; [1]
	  2 =&gt; [2,4]
	  3 =&gt; [3]
	  1 =&gt; [5]
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="haskey(m,2)   #does rank 2 exist?"><pre><span class="pl-c1">haskey</span>(m,<span class="pl-c1">2</span>)   <span class="pl-c"><span class="pl-c">#</span>does rank 2 exist?</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; haskey(m,2)
	true"><pre class="notranslate"><code>	julia&gt; haskey(m,2)
	true
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a[m[2]]   #all values of rank 2"><pre>a[m[<span class="pl-c1">2</span>]]   <span class="pl-c"><span class="pl-c">#</span>all values of rank 2</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; a[m[2]]
	2-element Array{Float64,1}:
	 2.0
	 2.0"><pre class="notranslate"><code>	julia&gt; a[m[2]]
	2-element Array{Float64,1}:
	 2.0
	 2.0
</code></pre></div>
<h2 dir="auto"><a id="user-content-list-of-all-exported-definitions-for-sampleranks" class="anchor" aria-hidden="true" href="#list-of-all-exported-definitions-for-sampleranks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List of all exported definitions for <code>sampleRanks</code></h2>
<table>
<thead>
<tr>
<th align="right"></th>
<th>sampleRanks</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><strong>Definition:</strong></td>
<td><code>@enum qnTiesMethods tmMin tmMax tmOrder tmReverse tmRandom tmAverage</code></td>
</tr>
<tr>
<td align="right">Description:</td>
<td></td>
</tr>
<tr>
<td align="right">tmMin</td>
<td>the smallest rank for all ties</td>
</tr>
<tr>
<td align="right">tmMax</td>
<td>the largest rank</td>
</tr>
<tr>
<td align="right">tmOrder</td>
<td>increasing ranks</td>
</tr>
<tr>
<td align="right">tmReverse</td>
<td>decreasing ranks</td>
</tr>
<tr>
<td align="right">tmRandom</td>
<td>the ranks are randomly distributed</td>
</tr>
<tr>
<td align="right">tmAverage</td>
<td>the average rounded to the next integer</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="right"></th>
<th>sampleRanks</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><strong>Definition:</strong></td>
<td><code>(Array{Union{Missing,Int},1},Dict{Int,Array{Int}}) sampleRanks(array::AbstractArray; tiesMethod::qnTiesMethods=tmMin, naIncreasesRank=false, resultMatrix=false)</code></td>
<td><strong>keyword arguments</strong></td>
</tr>
<tr>
<td align="right">Input type:</td>
<td><code>array::AbstractArray</code></td>
<td>data</td>
</tr>
<tr>
<td align="right">Input type:</td>
<td><code>tiesMethod::qnTiesMethods</code></td>
<td>how to treat ties (default: <code>tmMin</code>)</td>
</tr>
<tr>
<td align="right">Input type:</td>
<td><code>naIncreasesRank::bool</code></td>
<td>increase rank by one if NA (default: <code>false</code>)</td>
</tr>
<tr>
<td align="right">Input type:</td>
<td><code>resultMatrix::bool</code></td>
<td>create rank dictionary (default: <code>false</code>)</td>
</tr>
<tr>
<td align="right">Return type:</td>
<td><code>(Array{Union{Missing,Int},1},Dict{Int,Array{Int}})</code></td>
<td></td>
</tr>
</tbody>
</table>
</article></div>