<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-this-package-has-been-deprecated-in-favor-of-the-more-general-fouriertoolsjl" class="anchor" aria-hidden="true" href="#this-package-has-been-deprecated-in-favor-of-the-more-general-fouriertoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>This package has been deprecated in favor of the more general <a href="https://github.com/bionanoimaging/FourierTools.jl">FourierTools.jl</a></h1>
<h2 dir="auto"><a id="user-content-fftresamplingjl" class="anchor" aria-hidden="true" href="#fftresamplingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FFTResampling.jl</h2>
<p dir="auto">This package provides a simple sinc interpolation routine (up and downsampling) written in Julia.
It works with real and complex N-dimensional arrays.</p>
<p dir="auto"><strong>As this package is at an early stage of development, we would be excited to welcome any new contributers!</strong></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://roflmaostc.github.io/FFTResampling.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/cc6b08e8d34d9dd3cd286b76a01eea35e322fb53484b3cf1c624d63032266dcb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d6461726b677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-darkgreen.svg" style="max-width: 100%;"></a> <a href="https://roflmaostc.github.io/FFTResampling.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/e480e7641a2acdc69c99dea647ce01068124b5171ec2d92c72ebb25f9f7b6a26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d70696e6b2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-pink.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/roflmaostc/FFTResampling.jl/actions?query=workflow%3ACI"><img src="https://github.com/roflmaostc/FFTResampling.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/roflmaostc/FFTResampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d49c42e59b2b21a6c4d9666bf7fcaa6c3c10cae78e15fe180f48c8419b990d3/68747470733a2f2f636f6465636f762e696f2f67682f726f666c6d616f7374632f464654526573616d706c696e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/roflmaostc/FFTResampling.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>FFTResampling.jl</code> is has been tested version Julia from 1.3 to 1.6. It won't be maintained further.
It can be installed with the following command</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add FFTResampling"><pre>julia<span class="pl-k">&gt;</span> ] add FFTResampling</pre></div>
<p dir="auto">However, please prefer <a href="https://github.com/bionanoimaging/FourierTools.jl">FourierTools.jl</a> which is maintained and is also more performant.</p>
<h2 dir="auto"><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functionality</h2>
<p dir="auto">The FFTW based methods require periodic, bandwidth limited (and properly Nyquist sampled) signals.
Currently the algorithms work only with equidistant spaced signals. We offer one main method: <code>resample</code>
It offers upsampling of a signal by zero padding the spectrum in Fourier space.
Secondly, a signal can be downsampled by cropping frequencies around the center spot in Fourier space. We therefore reduce resolution without aliasing.</p>
<p dir="auto">This package also works partially with CUDA arrays. You need to set the keyword argument <code>boundary_handling=false</code> in <code>resample</code> to prevent a scalar indexing allowing a fast execution.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<h3 dir="auto"><a id="user-content-sinc-interpolation" class="anchor" aria-hidden="true" href="#sinc-interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sinc interpolation</h3>
<p dir="auto">Below you can find a simple example for up sampling using <code>resample</code> and <code>sinc_interpolate_sum</code>.
<code>sinc_interpolate_sum</code> is a slow sum based method.
Furthermore, there is an image interpolation <a href="https://github.com/fonsp/Pluto.jl">Pluto.jl</a> notebook in the <a href="examples/">examples folder</a>.
We can see that the interpolated signal matches the higher sampled signal well.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" begin
	N_low = 128
	x_min = 0.0
	x_max = 16Ï€
	
	xs_low = range(x_min, x_max, length=N_low+1)[1:N_low]
	xs_high = range(x_min, x_max, length=5000)[1:end-1]
	f(x) = sin(0.5*x) + cos(x) + cos(2 * x) + sin(0.25*x)
	arr_low = f.(xs_low)
	arr_high = f.(xs_high)
end

begin
	N = 1000
	xs_interp = range(x_min, x_max, length=N+1)[1:N]
	arr_interp = resample(arr_low, N)

	N2 = 1000
	xs_interp_s = range(x_min, x_max, length=N2+1)[1:N2]
	arr_interp_s = FFTResampling.sinc_interpolate_sum(arr_low, N2)
end

begin
	scatter(xs_low, arr_low, legend=:bottomleft, markersize=2, label=&quot;Low sampling&quot;)
	plot!(xs_interp, arr_interp, label=&quot;FFT based sinc interpolation&quot;, linestyle=:dash)
	plot!(xs_interp_s, arr_interp_s, label=&quot;sum based sinc interpolation&quot;, linestyle=:dot)
	plot!(xs_high, arr_high, linestyle=:dashdotdot, label=&quot;High sampling&quot;)
end"><pre> <span class="pl-k">begin</span>
	N_low <span class="pl-k">=</span> <span class="pl-c1">128</span>
	x_min <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
	x_max <span class="pl-k">=</span> <span class="pl-c1">16</span>Ï€
	
	xs_low <span class="pl-k">=</span> <span class="pl-c1">range</span>(x_min, x_max, length<span class="pl-k">=</span>N_low<span class="pl-k">+</span><span class="pl-c1">1</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span>N_low]
	xs_high <span class="pl-k">=</span> <span class="pl-c1">range</span>(x_min, x_max, length<span class="pl-k">=</span><span class="pl-c1">5000</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
	<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>x) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(x) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(<span class="pl-c1">2</span> <span class="pl-k">*</span> x) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>x)
	arr_low <span class="pl-k">=</span> <span class="pl-c1">f</span>.(xs_low)
	arr_high <span class="pl-k">=</span> <span class="pl-c1">f</span>.(xs_high)
<span class="pl-k">end</span>

<span class="pl-k">begin</span>
	N <span class="pl-k">=</span> <span class="pl-c1">1000</span>
	xs_interp <span class="pl-k">=</span> <span class="pl-c1">range</span>(x_min, x_max, length<span class="pl-k">=</span>N<span class="pl-k">+</span><span class="pl-c1">1</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span>N]
	arr_interp <span class="pl-k">=</span> <span class="pl-c1">resample</span>(arr_low, N)

	N2 <span class="pl-k">=</span> <span class="pl-c1">1000</span>
	xs_interp_s <span class="pl-k">=</span> <span class="pl-c1">range</span>(x_min, x_max, length<span class="pl-k">=</span>N2<span class="pl-k">+</span><span class="pl-c1">1</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span>N2]
	arr_interp_s <span class="pl-k">=</span> FFTResampling<span class="pl-k">.</span><span class="pl-c1">sinc_interpolate_sum</span>(arr_low, N2)
<span class="pl-k">end</span>

<span class="pl-k">begin</span>
	<span class="pl-c1">scatter</span>(xs_low, arr_low, legend<span class="pl-k">=</span><span class="pl-c1">:bottomleft</span>, markersize<span class="pl-k">=</span><span class="pl-c1">2</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Low sampling<span class="pl-pds">"</span></span>)
	<span class="pl-c1">plot!</span>(xs_interp, arr_interp, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>FFT based sinc interpolation<span class="pl-pds">"</span></span>, linestyle<span class="pl-k">=</span><span class="pl-c1">:dash</span>)
	<span class="pl-c1">plot!</span>(xs_interp_s, arr_interp_s, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sum based sinc interpolation<span class="pl-pds">"</span></span>, linestyle<span class="pl-k">=</span><span class="pl-c1">:dot</span>)
	<span class="pl-c1">plot!</span>(xs_high, arr_high, linestyle<span class="pl-k">=</span><span class="pl-c1">:dashdotdot</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>High sampling<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/plot.png"><img src="examples/plot.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-downsampling" class="anchor" aria-hidden="true" href="#downsampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Downsampling</h3>
<p dir="auto">32 samples in the downsampled signal should be sufficient for Nyquist sampling.
And as we can see, the downsampled signal still matches the original one.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="begin
	N_ds = 32
	xs_ds = range(x_min, x_max, length=N_ds+1)[1:N_ds]
	arr_ds = resample(arr_high, N_ds)
end

begin
	scatter(xs_low, arr_low, legend=:bottomleft, markersize=2, label=&quot;Low sampling&quot;)
	plot!(xs_interp, arr_interp, label=&quot;FFT based sinc interpolation&quot;, linestyle=:dash)
	plot!(xs_ds, arr_ds, label=&quot;resampled array&quot;, linestyle=:dot)	
end"><pre><span class="pl-k">begin</span>
	N_ds <span class="pl-k">=</span> <span class="pl-c1">32</span>
	xs_ds <span class="pl-k">=</span> <span class="pl-c1">range</span>(x_min, x_max, length<span class="pl-k">=</span>N_ds<span class="pl-k">+</span><span class="pl-c1">1</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span>N_ds]
	arr_ds <span class="pl-k">=</span> <span class="pl-c1">resample</span>(arr_high, N_ds)
<span class="pl-k">end</span>

<span class="pl-k">begin</span>
	<span class="pl-c1">scatter</span>(xs_low, arr_low, legend<span class="pl-k">=</span><span class="pl-c1">:bottomleft</span>, markersize<span class="pl-k">=</span><span class="pl-c1">2</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Low sampling<span class="pl-pds">"</span></span>)
	<span class="pl-c1">plot!</span>(xs_interp, arr_interp, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>FFT based sinc interpolation<span class="pl-pds">"</span></span>, linestyle<span class="pl-k">=</span><span class="pl-c1">:dash</span>)
	<span class="pl-c1">plot!</span>(xs_ds, arr_ds, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>resampled array<span class="pl-pds">"</span></span>, linestyle<span class="pl-k">=</span><span class="pl-c1">:dot</span>)	
<span class="pl-k">end</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/plot_ds.png"><img src="examples/plot_ds.png" alt="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-image-upsampling" class="anchor" aria-hidden="true" href="#image-upsampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Image Upsampling</h1>
<p dir="auto">Having a Nyquist sampled image, it is possible to perform a sinc interpolation and creating visually much nicer images.
However, the information content does not change between both images.
The full Pluto notebook is <a href="examples/image_interpolation.jl">here</a>.
The right image is the upsampled version of the left one.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/image_low_res.png"><img src="examples/image_low_res.png" alt="" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="examples/image_high_res.png"><img src="examples/image_high_res.png" alt="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h1>
<p dir="auto">There is also a discussion on <a href="https://discourse.julialang.org/t/sinc-interpolation-based-on-fft/52512" rel="nofollow">Discourse</a> about some of the issues that were encountered during creation of that package.</p>
</article></div>