<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-crystallinejl" class="anchor" aria-hidden="true" href="#crystallinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Crystalline.jl</h1>
<p><a href="https://thchr.github.io/Crystalline.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation (stable)" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://thchr.github.io/Crystalline.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation (dev)" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a> <a href="https://github.com/thchr/Crystalline.jl/actions"><img src="https://github.com/thchr/Crystalline.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/thchr/Crystalline.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5d74833fb89028b5f30145c9aff2a79d0fddb5cbcb34eb747bfa6c3f3ff9c3ef/68747470733a2f2f636f6465636f762e696f2f67682f74686368722f4372797374616c6c696e652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/thchr/Crystalline.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Tools for crystalline symmetry implemented in the Julia language.</p>
<p>This package provides access e.g. to the symmetry operations of crystalline point groups, space groups, Wyckoff positions, their irreducible representations and band representations, as well as tools for their associated manipulation.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in the General registry and can be installed from the <code>pkg&gt;</code> prompt (accessed by typing <code>]</code> at the Julia REPL) by executing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Crystalline
"><pre>pkg<span class="pl-k">&gt;</span> add Crystalline</pre></div>
<p>whereafter Crystalline.jl can be loaded via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Crystalline
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Crystalline</pre></div>
<h2><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functionality</h2>
<p>Crystalline.jl currently provides several functionalities for line groups, plane groups, and space groups, as well as crystallographic point groups.</p>
<p>Example usage includes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# construct a 3D `SymOperation` from its triplet form
julia&gt; S&quot;x,-y,-z&quot;
2₁₀₀ ─────────────────────────── (x,-y,-z)
 ┌ 1  0  0 ╷ 0 ┐
 │ 0 -1  0 ┆ 0 │
 └ 0  0 -1 ╵ 0 ┘

# load the `SymOperation`s of the 3D space group #16 in a conventional setting
julia&gt; sg = spacegroup(16, Val(3))
SpaceGroup{3} #16 (P222) with 4 operations:
 1 ──────────────────────────────── (x,y,z)
 2₀₀₁ ─────────────────────────── (-x,-y,z)
 2₀₁₀ ─────────────────────────── (-x,y,-z)
 2₁₀₀ ─────────────────────────── (x,-y,-z)

# load a dictionary of small irreps and their little groups for space group #16, indexed by their k-point labels; then inspect the small irreps at the A point
julia&gt; lgirs = get_lgirreps(16, Val(3));
julia&gt; lgirs[&quot;A&quot;]
LGIrrep{3}: #16 (P222) at A = [α, 0.0, 0.5]
A₁ ─┬─────────────────────────────────────────────
    ├─ 1: ──────────────────────────────── (x,y,z)
    │     1.0
    │     
    ├─ 2₁₀₀: ─────────────────────────── (x,-y,-z)
    │     1.0
    └─────────────────────────────────────────────
A₂ ─┬─────────────────────────────────────────────
    ├─ 1: ──────────────────────────────── (x,y,z)
    │     1.0
    │     
    ├─ 2₁₀₀: ─────────────────────────── (x,-y,-z)
    │     -1.0
    └─────────────────────────────────────────────

# compute the character table for the small irreps at the Γ point
julia&gt; CharacterTable(lgirs[&quot;Γ&quot;])
CharacterTable{3}: #16 (P222 at Γ = [0.0, 0.0, 0.0])
──────┬────────────────
      │ Γ₁  Γ₂  Γ₃  Γ₄ 
──────┼────────────────
    1 │  1   1   1   1 
 2₁₀₀ │  1  -1   1  -1
 2₀₁₀ │  1  -1  -1   1
 2₀₀₁ │  1   1  -1  -1
──────┴────────────────
"><pre><span class="pl-c"><span class="pl-c">#</span> construct a 3D `SymOperation` from its triplet form</span>
julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">S</span>"</span>x,-y,-z<span class="pl-pds">"</span></span>
<span class="pl-c1">2</span>₁₀₀ ─────────────────────────── (x,<span class="pl-k">-</span>y,<span class="pl-k">-</span>z)
 ┌ <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span> ╷ <span class="pl-c1">0</span> ┐
 │ <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">0</span> ┆ <span class="pl-c1">0</span> │
 └ <span class="pl-c1">0</span>  <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span> ╵ <span class="pl-c1">0</span> ┘

<span class="pl-c"><span class="pl-c">#</span> load the `SymOperation`s of the 3D space group #16 in a conventional setting</span>
julia<span class="pl-k">&gt;</span> sg <span class="pl-k">=</span> <span class="pl-c1">spacegroup</span>(<span class="pl-c1">16</span>, <span class="pl-c1">Val</span>(<span class="pl-c1">3</span>))
SpaceGroup{<span class="pl-c1">3</span>} <span class="pl-c"><span class="pl-c">#</span>16 (P222) with 4 operations:</span>
 <span class="pl-c1">1</span> ──────────────────────────────── (x,y,z)
 <span class="pl-c1">2</span>₀₀₁ ─────────────────────────── (<span class="pl-k">-</span>x,<span class="pl-k">-</span>y,z)
 <span class="pl-c1">2</span>₀₁₀ ─────────────────────────── (<span class="pl-k">-</span>x,y,<span class="pl-k">-</span>z)
 <span class="pl-c1">2</span>₁₀₀ ─────────────────────────── (x,<span class="pl-k">-</span>y,<span class="pl-k">-</span>z)

<span class="pl-c"><span class="pl-c">#</span> load a dictionary of small irreps and their little groups for space group #16, indexed by their k-point labels; then inspect the small irreps at the A point</span>
julia<span class="pl-k">&gt;</span> lgirs <span class="pl-k">=</span> <span class="pl-c1">get_lgirreps</span>(<span class="pl-c1">16</span>, <span class="pl-c1">Val</span>(<span class="pl-c1">3</span>));
julia<span class="pl-k">&gt;</span> lgirs[<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>]
LGIrrep{<span class="pl-c1">3</span>}<span class="pl-k">:</span> <span class="pl-c"><span class="pl-c">#</span>16 (P222) at A = [α, 0.0, 0.5]</span>
A₁ ─┬─────────────────────────────────────────────
    ├─ <span class="pl-c1">1</span><span class="pl-k">:</span> ──────────────────────────────── (x,y,z)
    │     <span class="pl-c1">1.0</span>
    │     
    ├─ <span class="pl-c1">2</span>₁₀₀<span class="pl-k">:</span> ─────────────────────────── (x,<span class="pl-k">-</span>y,<span class="pl-k">-</span>z)
    │     <span class="pl-c1">1.0</span>
    └─────────────────────────────────────────────
A₂ ─┬─────────────────────────────────────────────
    ├─ <span class="pl-c1">1</span><span class="pl-k">:</span> ──────────────────────────────── (x,y,z)
    │     <span class="pl-c1">1.0</span>
    │     
    ├─ <span class="pl-c1">2</span>₁₀₀<span class="pl-k">:</span> ─────────────────────────── (x,<span class="pl-k">-</span>y,<span class="pl-k">-</span>z)
    │     <span class="pl-k">-</span><span class="pl-c1">1.0</span>
    └─────────────────────────────────────────────

<span class="pl-c"><span class="pl-c">#</span> compute the character table for the small irreps at the Γ point</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">CharacterTable</span>(lgirs[<span class="pl-s"><span class="pl-pds">"</span>Γ<span class="pl-pds">"</span></span>])
CharacterTable{<span class="pl-c1">3</span>}<span class="pl-k">:</span> <span class="pl-c"><span class="pl-c">#</span>16 (P222 at Γ = [0.0, 0.0, 0.0])</span>
──────┬────────────────
      │ Γ₁  Γ₂  Γ₃  Γ₄ 
──────┼────────────────
    <span class="pl-c1">1</span> │  <span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">1</span> 
 <span class="pl-c1">2</span>₁₀₀ │  <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">2</span>₀₁₀ │  <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>₀₀₁ │  <span class="pl-c1">1</span>   <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
──────┴────────────────</pre></div>
<p>Additional functionality includes e.g. point group operations (<code>pointgroup</code>) and irreps (<code>get_pgirreps</code>), elementary band representations (<code>bandreps</code>), Wyckoff positions (<code>get_wycks</code>), physically real irreps (<code>realify</code>), transformation between conventional and primitive settings (<code>primitivize</code> and <code>conventionalize</code>), and Bravais lattice utilities and conventions.
For a full description of the public API, see the <a href="https://thchr.github.io/Crystalline.jl/dev" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<p>At present, the package's emphasis is on spinless systems (i.e., double groups and spinful irreps are not implemented).</p>
<h2><a id="user-content-api-stability" class="anchor" aria-hidden="true" href="#api-stability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API stability</h2>
<p>Crystalline.jl is a research package in active development: breaking changes are likely (but we will strive to follow semantic versioning).</p>
</article></div>