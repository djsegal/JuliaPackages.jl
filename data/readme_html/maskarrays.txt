<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-maskarrays" class="anchor" aria-hidden="true" href="#maskarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MaskArrays</h1>
<p><a href="https://cscherrer.github.io/MaskArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cscherrer.github.io/MaskArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cscherrer/MaskArrays.jl/actions"><img src="https://github.com/cscherrer/MaskArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cscherrer/MaskArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/93db12abb62253bd38043929a34c336c1067defa54d939b5f6a6edf3ab346533/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f4d61736b4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/MaskArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>When working with missing values in an array, there are a few challenges:</p>
<ol>
<li><code>::Missing</code> values have some overhead, and prevent BLAS operations</li>
<li>For imputations, we need to track which values were imputed</li>
<li>For many inference algorithms, it's convenient to have the imputed values together in a dense array</li>
</ol>
<p><code>MaskArrays</code> addresses these issues. For example, say you're given an array like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x
7-element Vector{Union{Missing, Float64}}:
 -0.742
   missing
 -0.301
 -0.954
   missing
   missing
 -0.436
"><pre>julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Union{Missing, Float64}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742</span>
   <span class="pl-c1">missing</span>
 <span class="pl-k">-</span><span class="pl-c1">0.301</span>
 <span class="pl-k">-</span><span class="pl-c1">0.954</span>
   <span class="pl-c1">missing</span>
   <span class="pl-c1">missing</span>
 <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
<p>Then we can convert this easily:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ma = maskarray(x)
7-element MaskArray{Float64,1}:
 -0.742
  6.9439480399727e-310
 -0.301
 -0.954
  0.0
  0.0
 -0.436
"><pre>julia<span class="pl-k">&gt;</span> ma <span class="pl-k">=</span> <span class="pl-c1">maskarray</span>(x)
<span class="pl-c1">7</span><span class="pl-k">-</span>element MaskArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742</span>
  <span class="pl-c1">6.9439480399727e-310</span>
 <span class="pl-k">-</span><span class="pl-c1">0.301</span>
 <span class="pl-k">-</span><span class="pl-c1">0.954</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
<p>The imputed values are represented as a <code>view</code> into the data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; imputed(ma)
3-element view(::Vector{Float64}, [2, 5, 6]) with eltype Float64:
 6.9439480399727e-310
 0.0
 0.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">imputed</span>(ma)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">6.9439480399727e-310</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<p>For example, we can easily do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; imputed(ma) .= 1:3
3-element view(::Vector{Float64}, [2, 5, 6]) with eltype Float64:
 1.0
 2.0
 3.0

julia&gt; ma
7-element MaskArray{Float64,1}:
 -0.742
  1.0
 -0.301
 -0.954
  2.0
  3.0
 -0.436
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">imputed</span>(ma) <span class="pl-k">.=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> ma
<span class="pl-c1">7</span><span class="pl-k">-</span>element MaskArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742</span>
  <span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.301</span>
 <span class="pl-k">-</span><span class="pl-c1">0.954</span>
  <span class="pl-c1">2.0</span>
  <span class="pl-c1">3.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
<h1><a id="user-content-buffers" class="anchor" aria-hidden="true" href="#buffers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Buffers</h1>
<p>A <code>MaskArray</code> has a "buffer" to allow it to easily connect to outside data sources. By default, this is identical to the <code>imputed</code> values (so extra allocation is avoided).</p>
<p>For example, say we have</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; outside_data = randn(10)
10-element Vector{Float64}:
 -0.42452477906454783
  0.03203787170597264
  1.1366181451933932
 -2.018667288063533
  1.3208417491973015
  0.07966694888217887
  1.063328831016872
  0.07649454253602395
 -2.4029119018577814
  0.6908031059739369
"><pre>julia<span class="pl-k">&gt;</span> outside_data <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.42452477906454783</span>
  <span class="pl-c1">0.03203787170597264</span>
  <span class="pl-c1">1.1366181451933932</span>
 <span class="pl-k">-</span><span class="pl-c1">2.018667288063533</span>
  <span class="pl-c1">1.3208417491973015</span>
  <span class="pl-c1">0.07966694888217887</span>
  <span class="pl-c1">1.063328831016872</span>
  <span class="pl-c1">0.07649454253602395</span>
 <span class="pl-k">-</span><span class="pl-c1">2.4029119018577814</span>
  <span class="pl-c1">0.6908031059739369</span></pre></div>
<p>we can connect a subset of this to our imputed values like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ma2 = replace_buffer(ma, view(outside_data, 3:5))
7-element MaskArray{Float64,1}:
 -0.742
  1.0
 -0.301
 -0.954
  2.0
  3.0
 -0.436
"><pre>julia<span class="pl-k">&gt;</span> ma2 <span class="pl-k">=</span> <span class="pl-c1">replace_buffer</span>(ma, <span class="pl-c1">view</span>(outside_data, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>))
<span class="pl-c1">7</span><span class="pl-k">-</span>element MaskArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742</span>
  <span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.301</span>
 <span class="pl-k">-</span><span class="pl-c1">0.954</span>
  <span class="pl-c1">2.0</span>
  <span class="pl-c1">3.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
<p>After a change in the buffer, we need to <code>sync!</code> to push the results to the data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; sync!(ma2)
7-element MaskArray{Float64,1}:
 -0.742
  1.1366181451933932
 -0.301
 -0.954
 -2.018667288063533
  1.3208417491973015
 -0.436
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sync!</span>(ma2)
<span class="pl-c1">7</span><span class="pl-k">-</span>element MaskArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742</span>
  <span class="pl-c1">1.1366181451933932</span>
 <span class="pl-k">-</span><span class="pl-c1">0.301</span>
 <span class="pl-k">-</span><span class="pl-c1">0.954</span>
 <span class="pl-k">-</span><span class="pl-c1">2.018667288063533</span>
  <span class="pl-c1">1.3208417491973015</span>
 <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
<p>Now say we make a change to the outside data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; outside_data .= 99999
10-element Vector{Float64}:
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0
 99999.0

julia&gt; sync!(ma2)
7-element MaskArray{Float64,1}:
    -0.742
 99999.0
    -0.301
    -0.954
 99999.0
 99999.0
    -0.436
"><pre>julia<span class="pl-k">&gt;</span> outside_data <span class="pl-k">.=</span> <span class="pl-c1">99999</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sync!</span>(ma2)
<span class="pl-c1">7</span><span class="pl-k">-</span>element MaskArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-k">-</span><span class="pl-c1">0.742</span>
 <span class="pl-c1">99999.0</span>
    <span class="pl-k">-</span><span class="pl-c1">0.301</span>
    <span class="pl-k">-</span><span class="pl-c1">0.954</span>
 <span class="pl-c1">99999.0</span>
 <span class="pl-c1">99999.0</span>
    <span class="pl-k">-</span><span class="pl-c1">0.436</span></pre></div>
</article></div>