<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-leveldb" class="anchor" aria-hidden="true" href="#leveldb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LevelDB</h1>
<p><a href="https://www.travis-ci.org/jerryzhenleicai/LevelDB.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0c24665e933dc1e47c4d4f070c5d70359406da48d11e966256c92e2971ea07de/68747470733a2f2f6170692e7472617669732d63692e6f72672f6a657272797a68656e6c65696361692f4c6576656c44422e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/jerryzhenleicai/LevelDB.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/jerryzhenleicai/LevelDB.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b1a1106d31aea518e33916c44dd6378e101150a520f93e7a6e7506a081b2234a/687474703a2f2f636f6465636f762e696f2f6769746875622f6a657272797a68656e6c65696361692f4c6576656c44422e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jerryzhenleicai/LevelDB.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>LevelDB</code> is Google's open source on-disk key-value storage library that
provides an ordered mapping from string keys to binary values. In many
applications where only key based accesses are needed, it tends to be a faster
alternative than databases. LevelDB was written in C++ with a C calling API
included. This module provides a Julia interface to LevelDB using Julia's
<code>ccall</code> mechanism.</p>
<h2><a id="user-content-install-leveldb" class="anchor" aria-hidden="true" href="#install-leveldb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install LevelDB</h2>
<p>You can build <code>LevelDB</code> from its source code at
<a href="https://github.com/google/leveldb">https://github.com/google/leveldb</a>. Please install the final dynamic library into
a system directory such as /usr/lib or make sure <code>libleveldb.so</code> is in one of
your <code>LD_LIBRARY_PATH</code> directories. If <code>libleveldb.so</code> is not installed, Julia
will try to download and build it automatically.</p>
<h2><a id="user-content-run-testing-code" class="anchor" aria-hidden="true" href="#run-testing-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Run Testing Code</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.1) pkg&gt; test LevelDB
"><pre>(v1.<span class="pl-c1">1</span>) pkg<span class="pl-k">&gt;</span> test LevelDB</pre></div>
<p>This will exercise batched and non-batched writes and reads for string and float array values.</p>
<h2><a id="user-content-createopenclose-a-leveldb-database" class="anchor" aria-hidden="true" href="#createopenclose-a-leveldb-database"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create/Open/Close a LevelDB database</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; db = LevelDB.DB(file_path; create_if_missing = false, error_if_exists = false)
"><pre>julia<span class="pl-k">&gt;</span> db <span class="pl-k">=</span> LevelDB<span class="pl-k">.</span><span class="pl-c1">DB</span>(file_path; create_if_missing <span class="pl-k">=</span> <span class="pl-c1">false</span>, error_if_exists <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>Here <code>file_path</code> is the full path to a directory that hosts a <code>LevelDB</code> database.
<code>create_if_missing</code> is a boolean flag when true the database will be created if
it does not exist. <code>error_if_exists</code> is a boolean flag when true an error will
be thrown if the database already exists. The return value is a database object
for passing to read/write calls.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; close(db)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">close</span>(db)</pre></div>
<p>Close a database, <code>db</code> is the object returned from a <code>LevelDB.DB</code> call. A
directory can only be opened by a single <code>LevelDB.DB</code> at a time.</p>
<h2><a id="user-content-read-and-write-operations" class="anchor" aria-hidden="true" href="#read-and-write-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Read and Write Operations</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; db[key] = value
"><pre>julia<span class="pl-k">&gt;</span> db[key] <span class="pl-k">=</span> value</pre></div>
<p><code>key</code> and <code>value</code> are <code>Array{UInt8}</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; db[key]
"><pre>julia<span class="pl-k">&gt;</span> db[key]</pre></div>
<p>Return value is an <code>Array{UInt8}</code>, one can use the <code>reinterpret</code> function to
cast it into the right array type (see test code).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; delete!(db, key)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete!</span>(db, key)</pre></div>
<p>Delete a key from <code>db</code>.</p>
<h2><a id="user-content-batched-write" class="anchor" aria-hidden="true" href="#batched-write"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Batched Write</h2>
<p><code>LevelDB</code> supports grouping a number of put operations into a write batch, the
batch will either succeed as a whole or fail altogether, behaving like an atomic
update.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; db[keys] = values
"><pre>julia<span class="pl-k">&gt;</span> db[keys] <span class="pl-k">=</span> values</pre></div>
<p><code>keys</code> and <code>values</code> must behave like iterators returning <code>Array{UInt8}</code>. Creates
a write batch internally which is then commited to <code>db</code>.</p>
<h2><a id="user-content-iterate" class="anchor" aria-hidden="true" href="#iterate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Iterate</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; for (key, value) in db
           #do something with the key value pair
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (key, value) <span class="pl-k">in</span> db
           <span class="pl-c"><span class="pl-c">#</span>do something with the key value pair</span>
       <span class="pl-k">end</span></pre></div>
<p>Iterate over all <code>key =&gt; value</code> pairs in a <code>LevelDB.DB</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; for (key, value) in LevelDB.RangeView(db, key1, key2)
           #do something with the key value pair
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (key, value) <span class="pl-k">in</span> LevelDB<span class="pl-k">.</span><span class="pl-c1">RangeView</span>(db, key1, key2)
           <span class="pl-c"><span class="pl-c">#</span>do something with the key value pair</span>
       <span class="pl-k">end</span></pre></div>
<p>Iterate over a range between key1 and key2 (inclusive)</p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<ul>
<li>Jerry Zhenlei Cai ( jpenguin at gmail dot com )</li>
<li>Guido Kraemer</li>
</ul>
<p>additional contributions by</p>
<ul>
<li><code>@huwenshuo</code></li>
<li><code>@tmlbl</code></li>
</ul>
</article></div>