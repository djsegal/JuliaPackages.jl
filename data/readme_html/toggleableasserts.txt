<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.com/MasonProtter/ToggleableAsserts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be9d37ba5fcc4af7af55b3d323631d653c9539ba63332c38b72c619dd2536228/68747470733a2f2f7472617669732d63692e636f6d2f4d61736f6e50726f747465722f546f67676c6561626c65417373657274732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MasonProtter/ToggleableAsserts.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">To install, simply do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]

(v1.x) pkg&gt; add ToggleableAsserts"><pre>julia<span class="pl-k">&gt;</span> ]

(v1<span class="pl-k">.</span>x) pkg<span class="pl-k">&gt;</span> add ToggleableAsserts</pre></div>
<p dir="auto">at the julia prompt.</p>
<h1 dir="auto"><a id="user-content-toggleableasserts" class="anchor" aria-hidden="true" href="#toggleableasserts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ToggleableAsserts</h1>
<p dir="auto">Suppose we have a function with an assertion we only want to be on while debugging:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ToggleableAsserts

function foo(u, v)
    @toggled_assert length(u) == length(v)
    1
end"><pre><span class="pl-k">using</span> ToggleableAsserts

<span class="pl-k">function</span> <span class="pl-en">foo</span>(u, v)
    <span class="pl-c1">@toggled_assert</span> <span class="pl-c1">length</span>(u) <span class="pl-k">==</span> <span class="pl-c1">length</span>(v)
    <span class="pl-c1">1</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">We can now make sure our assertions work:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; foo([1, 2], [1])
ERROR: AssertionError: length(u) == length(v)
Stacktrace:
 [1] foo(::Array{Int64,1}, ::Array{Int64,1}) at ./REPL[1]:2
 [2] top-level scope at REPL[2]:1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])
ERROR<span class="pl-k">:</span> AssertionError<span class="pl-k">:</span> <span class="pl-c1">length</span>(u) <span class="pl-k">==</span> <span class="pl-c1">length</span>(v)
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">foo</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
</pre></div>
<p dir="auto">and also turn them off</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; toggle(false)
[ Info: Toggleable asserts turned off.

julia&gt; foo([1, 2], [1])
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">toggle</span>(<span class="pl-c1">false</span>)
[ Info<span class="pl-k">:</span> Toggleable asserts turned off.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])
<span class="pl-c1">1</span></pre></div>
<p dir="auto">Once assertions are turned off, any function depending on them is recompiled with the assertions removed. For instance, the LLVM code for <code>foo</code> now simply returns <code>1</code> without any bounds checking at runtime:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @code_llvm foo([1,2], [1])
;  @ REPL[1]:2 within `foo'
define i64 @julia_foo_16854(%jl_value_t addrspace(10)* nonnull align 16 dereferenceable(40), %jl_value_t addrspace(10)* nonnull align 16 dereferenceable(40)) {
top:
  ret i64 1
}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_llvm</span> <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])
;  @ REPL[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">2</span> within <span class="pl-s"><span class="pl-pds">`</span>foo'</span>
<span class="pl-s">define i64 @julia_foo_16854(%jl_value_t addrspace(10)* nonnull align 16 dereferenceable(40), %jl_value_t addrspace(10)* nonnull align 16 dereferenceable(40)) {</span>
<span class="pl-s">top:</span>
<span class="pl-s">  ret i64 1</span>
<span class="pl-s">}</span>
<span class="pl-s"></span></pre></div>
<hr>
<p dir="auto">Just like the standard <code>@assert</code> macro, you can add custom error text to a <code>@toggled_assert</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @toggled_assert iseven(3) &quot;3 is an odd number!&quot;
ERROR: AssertionError: 3 is an odd number!
Stacktrace:
 [1] top-level scope at REPL[21]:1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@toggled_assert</span> <span class="pl-c1">iseven</span>(<span class="pl-c1">3</span>) <span class="pl-s"><span class="pl-pds">"</span>3 is an odd number!<span class="pl-pds">"</span></span>
ERROR<span class="pl-k">:</span> AssertionError<span class="pl-k">:</span> <span class="pl-c1">3</span> is an odd number!
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">21</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-safety" class="anchor" aria-hidden="true" href="#safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Safety</h3>
<p dir="auto">If you try to set <code>toggle</code> outside of the global scope, you may suffer world-age issues until you return to the global scope. e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function bar()
           toggle(false)
           foo([1, 2], [1])
           toggle(true)
           foo([1, 2], [1])    
       end
bar (generic function with 1 method)

julia&gt; bar()
[ Info: Toggleable asserts turned off.
[ Info: Toggleable asserts turned on.
1

julia&gt; foo([1, 2], [1])
ERROR: AssertionError: length(u) == length(v)
Stacktrace:
 [1] foo(::Array{Int64,1}, ::Array{Int64,1}) at ./REPL[45]:2
 [2] top-level scope at REPL[48]:1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">bar</span>()
           <span class="pl-c1">toggle</span>(<span class="pl-c1">false</span>)
           <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])
           <span class="pl-c1">toggle</span>(<span class="pl-c1">true</span>)
           <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])    
       <span class="pl-k">end</span>
bar (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bar</span>()
[ Info<span class="pl-k">:</span> Toggleable asserts turned off.
[ Info<span class="pl-k">:</span> Toggleable asserts turned on.
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span>])
ERROR<span class="pl-k">:</span> AssertionError<span class="pl-k">:</span> <span class="pl-c1">length</span>(u) <span class="pl-k">==</span> <span class="pl-c1">length</span>(v)
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">foo</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">45</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">48</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">Hence, it should be preferred to only use <code>toggle</code> in the global scope.</p>
<h3 dir="auto"><a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Attribution</h3>
<p dir="auto">This isn't my idea, I just packaged it up. The idea came from <a href="https://discourse.julialang.org/t/assert-alternatives/24775/14" rel="nofollow">this Julia Discourse thread</a></p>
</article></div>