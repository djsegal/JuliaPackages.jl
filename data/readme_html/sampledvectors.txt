<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sampledvectorsjl" class="anchor" aria-hidden="true" href="#sampledvectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SampledVectors.jl</h1>
<p dir="auto"><a href="https://github.com/guo-yong-zhi/SampledVectors.jl/actions/workflows/ci.yml"><img src="https://github.com/guo-yong-zhi/SampledVectors.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://github.com/guo-yong-zhi/SampledVectors.jl/actions/workflows/ci-nightly.yml"><img src="https://github.com/guo-yong-zhi/SampledVectors.jl/actions/workflows/ci-nightly.yml/badge.svg" alt="CI-nightly" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/guo-yong-zhi/SampledVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/834b3203cf1377fc44958a901077bead0bb1fda5a442eeb385e93c73a4229085/68747470733a2f2f636f6465636f762e696f2f67682f67756f2d796f6e672d7a68692f53616d706c6564566563746f72732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d3738355a4e5847514b4c" alt="codecov" data-canonical-src="https://codecov.io/gh/guo-yong-zhi/SampledVectors.jl/branch/main/graph/badge.svg?token=785ZNXGQKL" style="max-width: 100%;"></a><br>
<code>SampledVector</code> is of limited capacity, but has unlimited logical length. If a new element pushed leads to the vector exceeding its maximum capacity, an automatical <a href="https://en.wikipedia.org/wiki/Downsampling_(signal_processing)" rel="nofollow">downsampling</a> by an integer factor of <em>M</em> will be performed. That is, keep only every <em>Mth</em> sample. <code>SampledVector</code> can be used to record metrics, such as training loss curve in machine learning.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;SampledVectors&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SampledVectors<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-sampling-and-interpolation" class="anchor" aria-hidden="true" href="#sampling-and-interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sampling and Interpolation</h2>
<p dir="auto">There are 1 exported type, <code>SampledVector</code>, and 3 important methods, <code>push!</code>, <code>sampled</code> and <code>sampledindexes</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
y = [cos(x^2/900) for x in 1:100]
plot(y, label=&quot;original curve&quot;)

using SampledVectors
vector = SampledVector{Float64}(20) #20 is the capacity (maximum number of stored elements)
for yy in y
    push!(vector, yy)
end
# For visualization purposes, `sampled(vector)` would be enough when the vector is set at proper capacity. 
# And it runs fast.
plot!(collect(sampledindexes(vector)), sampled(vector), color=&quot;gray&quot;, label=&quot;sampling points&quot;) 
scatter!(collect(sampledindexes(vector)), sampled(vector), color=&quot;gray&quot;, label=nothing)
# `collect(vector)` can be seen as an interpolation result, but its length may be very large.
@assert length(collect(vector)) == length(y)
plot!(collect(vector), linestyle=:dash, label=&quot;basic interpolation&quot;)

# We can also use the package `Interpolations` to get a better result.
using Interpolations
sx = 1:step(vector):length(vector)
sy = sampled(vector)[1:length(sx)] #The last point may be lost
itp_cubic = CubicSplineInterpolation(sx, sy, extrapolation_bc=Line())
plot!(1:100, itp_cubic.(1:100), linestyle=:dash, label=&quot;better interpolation&quot;)
plot!(legend = :bottomleft)"><pre><span class="pl-k">using</span> Plots
y <span class="pl-k">=</span> [<span class="pl-c1">cos</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">900</span>) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]
<span class="pl-c1">plot</span>(y, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>original curve<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> SampledVectors
vector <span class="pl-k">=</span> <span class="pl-c1">SampledVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">20</span>) <span class="pl-c"><span class="pl-c">#</span>20 is the capacity (maximum number of stored elements)</span>
<span class="pl-k">for</span> yy <span class="pl-k">in</span> y
    <span class="pl-c1">push!</span>(vector, yy)
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> For visualization purposes, `sampled(vector)` would be enough when the vector is set at proper capacity. </span>
<span class="pl-c"><span class="pl-c">#</span> And it runs fast.</span>
<span class="pl-c1">plot!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector)), <span class="pl-c1">sampled</span>(vector), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sampling points<span class="pl-pds">"</span></span>) 
<span class="pl-c1">scatter!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector)), <span class="pl-c1">sampled</span>(vector), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>)
<span class="pl-c"><span class="pl-c">#</span> `collect(vector)` can be seen as an interpolation result, but its length may be very large.</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">length</span>(<span class="pl-c1">collect</span>(vector)) <span class="pl-k">==</span> <span class="pl-c1">length</span>(y)
<span class="pl-c1">plot!</span>(<span class="pl-c1">collect</span>(vector), linestyle<span class="pl-k">=</span><span class="pl-c1">:dash</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>basic interpolation<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> We can also use the package `Interpolations` to get a better result.</span>
<span class="pl-k">using</span> Interpolations
sx <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">step</span>(vector)<span class="pl-k">:</span><span class="pl-c1">length</span>(vector)
sy <span class="pl-k">=</span> <span class="pl-c1">sampled</span>(vector)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(sx)] <span class="pl-c"><span class="pl-c">#</span>The last point may be lost</span>
itp_cubic <span class="pl-k">=</span> <span class="pl-c1">CubicSplineInterpolation</span>(sx, sy, extrapolation_bc<span class="pl-k">=</span><span class="pl-c1">Line</span>())
<span class="pl-c1">plot!</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">itp_cubic</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>), linestyle<span class="pl-k">=</span><span class="pl-c1">:dash</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>better interpolation<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(legend <span class="pl-k">=</span> <span class="pl-c1">:bottomleft</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="sampling_and_interpolation.svg"><img src="sampling_and_interpolation.svg" alt="sampling and interpolation" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-filtering" class="anchor" aria-hidden="true" href="#filtering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filtering</h2>
<p dir="auto">If the original signal contains high frequency components, an anti-aliasing filter may be required.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
y = [cos(x^2/90000)+0.6cos(0.75x) for x in 1:1000]
plot(y, label=&quot;original curve&quot;)

using SampledVectors
vector = SampledVector{Float64}(200)
for yy in y
    push!(vector, yy)
end
# Aliasing occurs
plot!(collect(sampledindexes(vector)), sampled(vector), color=&quot;gray&quot;, label=&quot;sampled &amp; unfiltered&quot;) 
scatter!(collect(sampledindexes(vector)), sampled(vector), color=&quot;gray&quot;, label=nothing)

using DSP
using OnlineStats
# In order to prevent aliasing, the original signal should be removed of its high-frequency components before pushed.
# Here, a moving window is used to implement an online filter.
kernel = digitalfilter(Lowpass(0.1), FIRWindow(hanning(25)))
window = MovingWindow(Float64, length(kernel))
fit!(window, repeat([0.], length(kernel))) #zero padding
vector2 = SampledVector{Float64}(200)
for yy in y
    fit!(window, yy)
    push!(vector2, kernel'value(window))
end
plot!(collect(sampledindexes(vector2)), sampled(vector2), color=&quot;orange&quot;, label=&quot;sampled &amp; online filtered&quot;) 
scatter!(collect(sampledindexes(vector2)), sampled(vector2), color=&quot;orange&quot;, label=nothing)

# Let's plot the output of the offline filter for comparison.
plot!(filt(kernel, y), color=&quot;red&quot;, label=&quot;unsampled &amp; filtered&quot;)
plot!(legend = :bottomleft)"><pre><span class="pl-k">using</span> Plots
y <span class="pl-k">=</span> [<span class="pl-c1">cos</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">90000</span>)<span class="pl-k">+</span><span class="pl-c1">0.6</span><span class="pl-c1">cos</span>(<span class="pl-c1">0.75</span>x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>]
<span class="pl-c1">plot</span>(y, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>original curve<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> SampledVectors
vector <span class="pl-k">=</span> <span class="pl-c1">SampledVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">200</span>)
<span class="pl-k">for</span> yy <span class="pl-k">in</span> y
    <span class="pl-c1">push!</span>(vector, yy)
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Aliasing occurs</span>
<span class="pl-c1">plot!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector)), <span class="pl-c1">sampled</span>(vector), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sampled &amp; unfiltered<span class="pl-pds">"</span></span>) 
<span class="pl-c1">scatter!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector)), <span class="pl-c1">sampled</span>(vector), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>)

<span class="pl-k">using</span> DSP
<span class="pl-k">using</span> OnlineStats
<span class="pl-c"><span class="pl-c">#</span> In order to prevent aliasing, the original signal should be removed of its high-frequency components before pushed.</span>
<span class="pl-c"><span class="pl-c">#</span> Here, a moving window is used to implement an online filter.</span>
kernel <span class="pl-k">=</span> <span class="pl-c1">digitalfilter</span>(<span class="pl-c1">Lowpass</span>(<span class="pl-c1">0.1</span>), <span class="pl-c1">FIRWindow</span>(<span class="pl-c1">hanning</span>(<span class="pl-c1">25</span>)))
window <span class="pl-k">=</span> <span class="pl-c1">MovingWindow</span>(Float64, <span class="pl-c1">length</span>(kernel))
<span class="pl-c1">fit!</span>(window, <span class="pl-c1">repeat</span>([<span class="pl-c1">0.</span>], <span class="pl-c1">length</span>(kernel))) <span class="pl-c"><span class="pl-c">#</span>zero padding</span>
vector2 <span class="pl-k">=</span> <span class="pl-c1">SampledVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">200</span>)
<span class="pl-k">for</span> yy <span class="pl-k">in</span> y
    <span class="pl-c1">fit!</span>(window, yy)
    <span class="pl-c1">push!</span>(vector2, kernel<span class="pl-k">'</span><span class="pl-c1">value</span>(window))
<span class="pl-k">end</span>
<span class="pl-c1">plot!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector2)), <span class="pl-c1">sampled</span>(vector2), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sampled &amp; online filtered<span class="pl-pds">"</span></span>) 
<span class="pl-c1">scatter!</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">sampledindexes</span>(vector2)), <span class="pl-c1">sampled</span>(vector2), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>)

<span class="pl-c"><span class="pl-c">#</span> Let's plot the output of the offline filter for comparison.</span>
<span class="pl-c1">plot!</span>(<span class="pl-c1">filt</span>(kernel, y), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>unsampled &amp; filtered<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(legend <span class="pl-k">=</span> <span class="pl-c1">:bottomleft</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="unfiltered_vs_filtered.svg"><img src="unfiltered_vs_filtered.svg" alt="unfiltered vs filtered" style="max-width: 100%;"></a></p>
</article></div>