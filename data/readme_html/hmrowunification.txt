<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hmrowunification" class="anchor" aria-hidden="true" href="#hmrowunification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HMRowUnification</h1>
<p dir="auto"><a href="https://thautwarm.github.io/HMRowUnification.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://thautwarm.github.io/HMRowUnification.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/thautwarm/HMRowUnification.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/10c99b35848786ecb753219fcd009b7f51cd444cd5e2de9abe5e4a96cf620886/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f484d526f77556e696669636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/HMRowUnification.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/HMRowUnification.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4977d333a2f49ec15c53fa232a713da5c6ea0b16d247a1a7cbc7f36239127ff3/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f484d526f77556e696669636174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/thautwarm/HMRowUnification.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/thautwarm/HMRowUnification.jl/master/fig.png"><img width="250px" src="https://raw.githubusercontent.com/thautwarm/HMRowUnification.jl/master/fig.png" style="max-width: 100%;"></a>
</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HMRowUnification

tctx = HMT[]

st = mk_tcstate(tctx);

tvar1 = st.new_tvar()
tvar2 = st.new_tvar()
int_t = Nom(:int)


# int -&gt; int ~ 'tvar1 -&gt; 'tvar2
# =&gt;
# 'tvar1 = int
# 'tvar2 = int
st.unify(Arrow(int_t, int_t), Arrow(tvar1, tvar2))
# true

st.prune.([tvar1, tvar1])
# 2-element Array{Nom,1}:
# int
# int

tv3 = st.new_tvar()
tv4 = st.new_tvar()

# rec1 ~ {a : int, b : int | 'tv3}
rec1 = row_of_pairs(
    Dict(:a =&gt; int_t, :b =&gt; int_t),
    RowPoly(tv3)
)
# rec2 ~ {a : int, c : int | 'tv4}
rec2 = row_of_pairs(
    Dict(:a =&gt; int_t, :c =&gt; int_t),
    RowPoly(tv4)
)

st.unify(Record(rec1), Record(rec2))
# true
println(st.prune(tv3), &quot;  &quot;, st.prune(tv4))
# {c::int|'5}  {b::int|'5}"><pre><span class="pl-k">using</span> HMRowUnification

tctx <span class="pl-k">=</span> HMT[]

st <span class="pl-k">=</span> <span class="pl-c1">mk_tcstate</span>(tctx);

tvar1 <span class="pl-k">=</span> st<span class="pl-k">.</span><span class="pl-c1">new_tvar</span>()
tvar2 <span class="pl-k">=</span> st<span class="pl-k">.</span><span class="pl-c1">new_tvar</span>()
int_t <span class="pl-k">=</span> <span class="pl-c1">Nom</span>(<span class="pl-c1">:int</span>)


<span class="pl-c"><span class="pl-c">#</span> int -&gt; int ~ 'tvar1 -&gt; 'tvar2</span>
<span class="pl-c"><span class="pl-c">#</span> =&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> 'tvar1 = int</span>
<span class="pl-c"><span class="pl-c">#</span> 'tvar2 = int</span>
st<span class="pl-k">.</span><span class="pl-c1">unify</span>(<span class="pl-c1">Arrow</span>(int_t, int_t), <span class="pl-c1">Arrow</span>(tvar1, tvar2))
<span class="pl-c"><span class="pl-c">#</span> true</span>

st<span class="pl-k">.</span><span class="pl-c1">prune</span>.([tvar1, tvar1])
<span class="pl-c"><span class="pl-c">#</span> 2-element Array{Nom,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> int</span>
<span class="pl-c"><span class="pl-c">#</span> int</span>

tv3 <span class="pl-k">=</span> st<span class="pl-k">.</span><span class="pl-c1">new_tvar</span>()
tv4 <span class="pl-k">=</span> st<span class="pl-k">.</span><span class="pl-c1">new_tvar</span>()

<span class="pl-c"><span class="pl-c">#</span> rec1 ~ {a : int, b : int | 'tv3}</span>
rec1 <span class="pl-k">=</span> <span class="pl-c1">row_of_pairs</span>(
    <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> int_t, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> int_t),
    <span class="pl-c1">RowPoly</span>(tv3)
)
<span class="pl-c"><span class="pl-c">#</span> rec2 ~ {a : int, c : int | 'tv4}</span>
rec2 <span class="pl-k">=</span> <span class="pl-c1">row_of_pairs</span>(
    <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> int_t, <span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> int_t),
    <span class="pl-c1">RowPoly</span>(tv4)
)

st<span class="pl-k">.</span><span class="pl-c1">unify</span>(<span class="pl-c1">Record</span>(rec1), <span class="pl-c1">Record</span>(rec2))
<span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">println</span>(st<span class="pl-k">.</span><span class="pl-c1">prune</span>(tv3), <span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-pds">"</span></span>, st<span class="pl-k">.</span><span class="pl-c1">prune</span>(tv4))
<span class="pl-c"><span class="pl-c">#</span> {c::int|'5}  {b::int|'5}</span></pre></div>
<h1 dir="auto"><a id="user-content-type-representation" class="anchor" aria-hidden="true" href="#type-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type Representation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@data TVar begin
    Refvar(i::UInt)
    Genvar(g::UInt, n::Symbol)
end

@data RowT begin
    RowMono
    RowCons(Symbol, HMT, RowT)
    RowPoly(HMT)
end

@data HMT begin
    Var(var::TVar)
    Nom(n::Symbol)
    Fresh(Symbol)
    App(f::HMT, arg::HMT)
    Arrow(from::HMT, to::HMT)
    Tup{N}::(NTuple{N,HMT}) =&gt; HMT
    Forall{N}::(NTuple{N,Symbol}, HMT) =&gt; HMT
    Record(RowT)
end"><pre><span class="pl-c1">@data</span> TVar <span class="pl-k">begin</span>
    <span class="pl-c1">Refvar</span>(i<span class="pl-k">::</span><span class="pl-c1">UInt</span>)
    <span class="pl-c1">Genvar</span>(g<span class="pl-k">::</span><span class="pl-c1">UInt</span>, n<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)
<span class="pl-k">end</span>

<span class="pl-c1">@data</span> RowT <span class="pl-k">begin</span>
    RowMono
    <span class="pl-c1">RowCons</span>(Symbol, HMT, RowT)
    <span class="pl-c1">RowPoly</span>(HMT)
<span class="pl-k">end</span>

<span class="pl-c1">@data</span> HMT <span class="pl-k">begin</span>
    <span class="pl-c1">Var</span>(var<span class="pl-k">::</span><span class="pl-c1">TVar</span>)
    <span class="pl-c1">Nom</span>(n<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)
    <span class="pl-c1">Fresh</span>(Symbol)
    <span class="pl-c1">App</span>(f<span class="pl-k">::</span><span class="pl-c1">HMT</span>, arg<span class="pl-k">::</span><span class="pl-c1">HMT</span>)
    <span class="pl-c1">Arrow</span>(from<span class="pl-k">::</span><span class="pl-c1">HMT</span>, to<span class="pl-k">::</span><span class="pl-c1">HMT</span>)
    Tup{N}<span class="pl-k">::</span><span class="pl-c1">(NTuple{N,HMT})</span> <span class="pl-k">=&gt;</span> HMT
    Forall{N}<span class="pl-k">::</span><span class="pl-c1">(NTuple{N,Symbol}, HMT)</span> <span class="pl-k">=&gt;</span> HMT
    <span class="pl-c1">Record</span>(RowT)
<span class="pl-k">end</span></pre></div>
</article></div>