<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-perftests" class="anchor" aria-hidden="true" href="#perftests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Perftests</h1>
<p>A redo of the main Julia <code>test/perf</code> directory.  Retooled to use <a href="https://github.com/johnmyleswhite/Benchmarks.jl"><code>Benchmarks.jl</code></a>, this repository will spit out a bunch of .csv files into the <code>test/results-$COMMIT</code> directory (Where <code>$COMMIT</code> is the commit hash of the version of Julia you are running) and display small summary statistics as it does so.</p>
<p>To run a specific group of tests, use <code>run_perf_groups()</code>.  For example, to run and output the <code>.csv</code> files for the <code>kernel</code> and <code>simd</code> performance tests, one would write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Perftests
<span class="pl-c1">run_perf_groups</span>([<span class="pl-s"><span class="pl-pds">"</span>kernel<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>simd<span class="pl-pds">"</span></span>])</pre></div>
<h1><a id="user-content-test-organization" class="anchor" aria-hidden="true" href="#test-organization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Test organization</h1>
<p>Tests are organized foremost by group, then name, then variant.  Not all tests are required to have variants, but they fit into a natural hierarchy when running the same test across multiple element types, for example.  The resultant <code>.csv</code> files are named <code>$group-$name-$variant.csv</code>, for ease of access.</p>
<h1><a id="user-content-test-environment" class="anchor" aria-hidden="true" href="#test-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Test environment</h1>
<p>Information about the test environment (the commit hash of this repository used to create the results, the word size of the running machine, the number of CPU cores, etc...) is saved in the <code>env.csv</code> file put into the <code>results-$COMMIT</code> directory when testing.</p>
</article></div>