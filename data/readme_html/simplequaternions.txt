<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplequaternions" class="anchor" aria-hidden="true" href="#simplequaternions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleQuaternions</h1>
<p><a href="https://travis-ci.com/scheinerman/SimpleQuaternions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73c62c6b99df9d31ce8a023197c50188e2c3249a0351ddd63b5deee5d0b49085/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f53696d706c655175617465726e696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/SimpleQuaternions.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The <em>quaternions</em> are an extension to the real (and complex) numbers. See
<a href="https://en.wikipedia.org/wiki/Quaternion" rel="nofollow">this article</a>.</p>
<h2><a id="user-content-fundamentals" class="anchor" aria-hidden="true" href="#fundamentals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fundamentals</h2>
<p>This module provides the <code>SimpleQuaternion</code> type. To create the quaternion
<em>a + bi + cj + dk</em> use <code>SimpleQuaternion(a,b,c,d)</code> or, alternatively
<code>a + b*im + c*jm + d*km</code>.</p>
<p>Note that <code>im</code> is the usual Julia representation for <em>i</em>; this module adds <code>jm</code>
and <code>km</code>. Thus, the expression <code>1+im</code> yields a <code>Complex</code> value, but <code>1+jm</code> yields
a <code>SimpleQuaternion</code>.</p>
<p>Some examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = 3im - 4 + km
-4 + 3im + 0jm + 1km

julia&gt; get_parts(a)
(-4, 3, 0, 1)

julia&gt; real(a)   # Return the real part of a
-4

julia&gt; isreal(a)
false

julia&gt; a'        # return the conjugate of a
-4 - 3im + 0jm - 1km

julia&gt; b = 1 - 4im + jm
1 - 4im + 1jm + 0km

julia&gt; a+b
-3 - 1im + 1jm + 1km

julia&gt; a-b
-5 + 7im - 1jm + 1km

julia&gt; a*b
8 + 18im - 8jm + 4km

julia&gt; inv(a)
-0.15384615384615385 - 0.11538461538461539im + 0.0jm - 0.038461538461538464km

julia&gt; 1//a
-2//13 - 3//26im + 0//1jm - 1//26km

julia&gt; a/b
-0.8888888888888888 - 0.6666666666666666im + 0.4444444444444444jm - 0.1111111111111111km

julia&gt; a//b
-8//9 - 2//3im + 4//9jm - 1//9km

julia&gt; im*jm == km
true

julia&gt; jm*im == -km
true

julia&gt; im*im == jm*jm == km*km == -1
true
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">3im</span> <span class="pl-k">-</span> <span class="pl-c1">4</span> <span class="pl-k">+</span> km
<span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span> <span class="pl-k">+</span> <span class="pl-c1">0</span>jm <span class="pl-k">+</span> <span class="pl-c1">1</span>km

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_parts</span>(a)
(<span class="pl-k">-</span><span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">real</span>(a)   <span class="pl-c"><span class="pl-c">#</span> Return the real part of a</span>
<span class="pl-k">-</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isreal</span>(a)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> a<span class="pl-k">'</span>        <span class="pl-c"><span class="pl-c">#</span> return the conjugate of a</span>
<span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">3im</span> <span class="pl-k">+</span> <span class="pl-c1">0</span>jm <span class="pl-k">-</span> <span class="pl-c1">1</span>km

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">4im</span> <span class="pl-k">+</span> jm
<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">4im</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>jm <span class="pl-k">+</span> <span class="pl-c1">0</span>km

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">1im</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>jm <span class="pl-k">+</span> <span class="pl-c1">1</span>km

julia<span class="pl-k">&gt;</span> a<span class="pl-k">-</span>b
<span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">7im</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>jm <span class="pl-k">+</span> <span class="pl-c1">1</span>km

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span>b
<span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">18im</span> <span class="pl-k">-</span> <span class="pl-c1">8</span>jm <span class="pl-k">+</span> <span class="pl-c1">4</span>km

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inv</span>(a)
<span class="pl-k">-</span><span class="pl-c1">0.15384615384615385</span> <span class="pl-k">-</span> <span class="pl-c1">0.11538461538461539im</span> <span class="pl-k">+</span> <span class="pl-c1">0.0</span>jm <span class="pl-k">-</span> <span class="pl-c1">0.038461538461538464</span>km

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">//</span>a
<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">13</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">26im</span> <span class="pl-k">+</span> <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>jm <span class="pl-k">-</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">26</span>km

julia<span class="pl-k">&gt;</span> a<span class="pl-k">/</span>b
<span class="pl-k">-</span><span class="pl-c1">0.8888888888888888</span> <span class="pl-k">-</span> <span class="pl-c1">0.6666666666666666im</span> <span class="pl-k">+</span> <span class="pl-c1">0.4444444444444444</span>jm <span class="pl-k">-</span> <span class="pl-c1">0.1111111111111111</span>km

julia<span class="pl-k">&gt;</span> a<span class="pl-k">//</span>b
<span class="pl-k">-</span><span class="pl-c1">8</span><span class="pl-k">//</span><span class="pl-c1">9</span> <span class="pl-k">-</span> <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3im</span> <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">9</span>jm <span class="pl-k">-</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">9</span>km

julia<span class="pl-k">&gt;</span> im<span class="pl-k">*</span>jm <span class="pl-k">==</span> km
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> jm<span class="pl-k">*</span>im <span class="pl-k">==</span> <span class="pl-k">-</span>km
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> im<span class="pl-k">*</span>im <span class="pl-k">==</span> jm<span class="pl-k">*</span>jm <span class="pl-k">==</span> km<span class="pl-k">*</span>km <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-matrix-representation" class="anchor" aria-hidden="true" href="#matrix-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Matrix representation</h2>
<p>Quaternions can be represented by 4-by-4 real matrices or by 2-by-2 complex matrices.
The functions <code>real_matrix</code> and <code>complex_matrix</code> produce these.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = 3im-4 + km
-4 + 3im + 0jm + 1km

julia&gt; isreal(a)
false

julia&gt; a = 3im-4 + km^C

julia&gt; a = 3im - 4 + km
-4 + 3im + 0jm + 1km

julia&gt; get_parts(a)
(-4, 3, 0, 1)

julia&gt; b = SimpleQuaternion(-8,0,2,6)^C

julia&gt; b = 1 - 4im + jm
1 - 4im + 1jm + 0km

julia&gt; a = 3im - 4 + km
-4 + 3im + 0jm + 1km

julia&gt; b = 1 - 4im + jm
1 - 4im + 1jm + 0km

julia&gt; A = real_matrix(a); B = real_matrix(b)
4Ã—4 Array{Int64,2}:
  1   4  -1  0
 -4   1   0  1
  1   0   1  4
  0  -1  -4  1

julia&gt; A*B == real_matrix(a*b)
true

julia&gt; A = complex_matrix(a); B = complex_matrix(b)
2Ã—2 Array{Complex{Int64},2}:
  1-4im  1+0im
 -1+0im  1+4im

julia&gt; A*B == complex_matrix(a*b)
true
"><pre><code>julia&gt; a = 3im-4 + km
-4 + 3im + 0jm + 1km

julia&gt; isreal(a)
false

julia&gt; a = 3im-4 + km^C

julia&gt; a = 3im - 4 + km
-4 + 3im + 0jm + 1km

julia&gt; get_parts(a)
(-4, 3, 0, 1)

julia&gt; b = SimpleQuaternion(-8,0,2,6)^C

julia&gt; b = 1 - 4im + jm
1 - 4im + 1jm + 0km

julia&gt; a = 3im - 4 + km
-4 + 3im + 0jm + 1km

julia&gt; b = 1 - 4im + jm
1 - 4im + 1jm + 0km

julia&gt; A = real_matrix(a); B = real_matrix(b)
4Ã—4 Array{Int64,2}:
  1   4  -1  0
 -4   1   0  1
  1   0   1  4
  0  -1  -4  1

julia&gt; A*B == real_matrix(a*b)
true

julia&gt; A = complex_matrix(a); B = complex_matrix(b)
2Ã—2 Array{Complex{Int64},2}:
  1-4im  1+0im
 -1+0im  1+4im

julia&gt; A*B == complex_matrix(a*b)
true
</code></pre></div>
<p>After either <code>A = real_matrix(x)</code> or <code>A = complex_matrix(x)</code> we can use
<code>SimpleQuaternion(A)</code> to recover <code>x</code>. If <code>A</code> is not a valid matrix, an
error is thrown.</p>
<h2><a id="user-content-random-quaternions" class="anchor" aria-hidden="true" href="#random-quaternions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random quaternions</h2>
<p>Use <code>rand(SimpleQuaternion)</code> to yield a random quaternion each of whose
four components is a uniform [0,1] random value.</p>
<p>Use <code>randn(SimpleQuaternion)</code> to yield a random quaternion each of whose
four components is a standard normal random value.</p>
</article></div>