<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-randombasedarrays" class="anchor" aria-hidden="true" href="#randombasedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RandomBasedArrays</h1>
<p><a href="https://travis-ci.com/giordano/RandomBasedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/58b394b0fd3dce9d06d0d9bf6f9568ef8d3d7622/68747470733a2f2f7472617669732d63692e636f6d2f67696f7264616e6f2f52616e646f6d42617365644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/giordano/RandomBasedArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/giordano/RandomBasedArrays-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f11ddd090e4dc2e653e5d141116f585c57cebe9/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f67696f7264616e6f2f52616e646f6d42617365644172726179732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/giordano/RandomBasedArrays.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/giordano/RandomBasedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50841507bb834cc20fd17f07bd8ecfc1ea218db7/68747470733a2f2f636f6465636f762e696f2f67682f67696f7264616e6f2f52616e646f6d42617365644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/giordano/RandomBasedArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/giordano/RandomBasedArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7364cad3b817b96e8cd4866f2a62504f1defd390/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f67696f7264616e6f2f52616e646f6d42617365644172726179732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/giordano/RandomBasedArrays.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/308bc23d6af886bafc7ca5bff03cf99dbbb993c1/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f646f6e616c645f6b6e7574682e706e67"><img src="https://camo.githubusercontent.com/308bc23d6af886bafc7ca5bff03cf99dbbb993c1/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f646f6e616c645f6b6e7574682e706e67" alt="image" data-canonical-src="https://imgs.xkcd.com/comics/donald_knuth.png" style="max-width:100%;"></a></p>
<p><em>Image credit: "<a href="https://xkcd.com/163/" rel="nofollow">xkcd: Donald Knuth</a>" (<a href="https://creativecommons.org/licenses/by-nc/2.5/" rel="nofollow">CC-BY-NC
2.5</a>)</em></p>
<p><code>RandomBasedArrays.jl</code> is a hassle-free package in the Julia programming
language for dealing with arrays: every time you access an element of an array,
the first index is random, so you don’t have to remember whether Julia uses 0-
or 1-based indexing: you simply cannot ever know what the initial element will
be.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Motivation</h2>
<p>This package takes a new stance in the longstanding debate whether arrays should
have <a href="https://en.wikipedia.org/wiki/Zero-based_numbering" rel="nofollow">0-based</a> or 1-based
indexing.</p>
<p>It is incredibly hard to convince people that there is no "one size fits all"
indexing in programming, both alternatives have their merits:</p>
<ul>
<li>0-based indexing is natural every time you deal with offsets, e.g., when
referencing memory addresses</li>
<li>1-based indexing is natural when you are counting elements: the 1st element is
"1", the 2nd element is "2", etc...</li>
</ul>
<p>It is pointless to claim the superiority of one indexing over the other one, as
they’re useful in different situations.</p>
<p>As a matter of fact, many "math-oriented" languages (e.g., Fortran, Julia,
Mathematica, MATLAB, R), that are less likely to fiddle with pointers'
addresses, default to 1-based indexing, even though probably the majority of the
programming languages nowadays uses 0-based indexing.</p>
<p>A good programming language, whatever indexing convention it uses, should
provide an abstraction layer to let users forget which is the initial index.
For example, Fortran has <a href="http://fortranwiki.org/fortran/show/lbound" rel="nofollow"><code>lbound</code></a>
to reference the first element of an array.  Besides the
<a href="https://docs.julialang.org/en/v1/base/collections/#Base.first" rel="nofollow"><code>first</code></a>
function to reference the first element of a collection, the Julia programming
language has different utilities to iterate over collections:</p>
<ul>
<li>arrays are iterables, this means that you can write a <code>for</code> loop like
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> element <span class="pl-k">in</span> my_array
    <span class="pl-c"><span class="pl-c">#</span> do things with the `element`...</span>
<span class="pl-k">end</span></pre></div>
without using indices at all</li>
<li><a href="https://docs.julialang.org/en/v1/base/arrays/#Base.eachindex" rel="nofollow"><code>eachindex</code></a> is
a function that returns an iterable object with all the indices of the array.</li>
</ul>
<p>Certainly, some times you need to use the indices of an array and know which is
the first one.  In this case, the abstraction layer above is not useful.  Thus,
it is important for a programming language to provide also a way to easily
switch to the most appropriate indexing for the task at hand.  In Fortran you
can set a different initial index for an array with the
<a href="https://docs.oracle.com/cd/E19957-01/805-4939/6j4m0vn8a/index.html" rel="nofollow"><code>dimension</code></a>
statement.  Julia allows you to define custom indices for you new array-like
type, as described in the
<a href="https://docs.julialang.org/en/v1/devdocs/offset-arrays/" rel="nofollow">documentation</a>.  The
most notable application of custom indices is probably the
<a href="https://github.com/JuliaArrays/OffsetArrays.jl"><code>OffsetArrays.jl</code></a> package.
Other use cases of custom indices are shown in <a href="https://julialang.org/blog/2017/04/offset-arrays" rel="nofollow">this blog
post</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The latest version of <code>RandomBasedArrays.jl</code> is available for Julia v1.0 and
later releases, and can be installed with <a href="https://julialang.github.io/Pkg.jl/stable/" rel="nofollow">Julia built-in package
manager</a>.  In a Julia session, after
entering the package manager mode with <code>]</code>, run the command</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add RandomBasedArrays</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RandomBasedArrays

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">RandomBasedArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">25</span>), <span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">15</span>   <span class="pl-c1">7</span>   <span class="pl-c1">4</span>   <span class="pl-c1">2</span>   <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>  <span class="pl-c1">10</span>   <span class="pl-c1">9</span>  <span class="pl-c1">18</span>
  <span class="pl-c1">8</span>   <span class="pl-c1">7</span>  <span class="pl-c1">16</span>   <span class="pl-c1">6</span>  <span class="pl-c1">13</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">21</span>  <span class="pl-c1">17</span>  <span class="pl-c1">13</span>   <span class="pl-c1">2</span>
 <span class="pl-c1">22</span>   <span class="pl-c1">6</span>  <span class="pl-c1">18</span>  <span class="pl-c1">19</span>  <span class="pl-c1">20</span>

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">15</span>   <span class="pl-c1">3</span>   <span class="pl-c1">6</span>  <span class="pl-c1">12</span>   <span class="pl-c1">8</span>
 <span class="pl-c1">20</span>   <span class="pl-c1">3</span>   <span class="pl-c1">6</span>  <span class="pl-c1">22</span>   <span class="pl-c1">7</span>
 <span class="pl-c1">22</span>   <span class="pl-c1">2</span>  <span class="pl-c1">20</span>  <span class="pl-c1">15</span>   <span class="pl-c1">7</span>
 <span class="pl-c1">18</span>  <span class="pl-c1">22</span>  <span class="pl-c1">16</span>   <span class="pl-c1">1</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">5</span>   <span class="pl-c1">6</span>   <span class="pl-c1">6</span>  <span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">8</span>  <span class="pl-c1">14</span>   <span class="pl-c1">2</span>  <span class="pl-c1">18</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">7</span>  <span class="pl-c1">17</span>   <span class="pl-c1">8</span>  <span class="pl-c1">19</span>   <span class="pl-c1">4</span>
 <span class="pl-c1">25</span>  <span class="pl-c1">17</span>  <span class="pl-c1">15</span>   <span class="pl-c1">8</span>  <span class="pl-c1">15</span>
  <span class="pl-c1">6</span>  <span class="pl-c1">19</span>  <span class="pl-c1">10</span>  <span class="pl-c1">23</span>  <span class="pl-c1">23</span>
  <span class="pl-c1">7</span>   <span class="pl-c1">8</span>   <span class="pl-c1">1</span>  <span class="pl-c1">22</span>  <span class="pl-c1">25</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">-</span><span class="pl-c1">35</span>]
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">-</span><span class="pl-c1">35</span>]
<span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">-</span><span class="pl-c1">35</span>]
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">28</span>,<span class="pl-k">-</span><span class="pl-c1">19</span>] <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">13</span>  <span class="pl-c1">16</span>   <span class="pl-c1">3</span>  <span class="pl-c1">25</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">23</span>  <span class="pl-c1">20</span>  <span class="pl-c1">16</span>  <span class="pl-c1">18</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">5</span>  <span class="pl-c1">17</span>  <span class="pl-c1">21</span>   <span class="pl-c1">6</span>   <span class="pl-c1">8</span>
  <span class="pl-c1">5</span>   <span class="pl-c1">3</span>  <span class="pl-c1">42</span>  <span class="pl-c1">10</span>  <span class="pl-c1">13</span>
 <span class="pl-c1">25</span>   <span class="pl-c1">6</span>  <span class="pl-c1">23</span>   <span class="pl-c1">4</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">9</span>  <span class="pl-c1">25</span>  <span class="pl-c1">25</span>   <span class="pl-c1">3</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>  <span class="pl-c1">14</span>   <span class="pl-c1">9</span>   <span class="pl-c1">7</span>  <span class="pl-c1">18</span>
 <span class="pl-c1">22</span>  <span class="pl-c1">14</span>  <span class="pl-c1">13</span>  <span class="pl-c1">21</span>   <span class="pl-c1">2</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">12</span>  <span class="pl-c1">19</span>  <span class="pl-c1">14</span>  <span class="pl-c1">19</span>
 <span class="pl-c1">19</span>   <span class="pl-c1">2</span>  <span class="pl-c1">21</span>   <span class="pl-c1">2</span>  <span class="pl-c1">21</span>

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">14</span>  <span class="pl-c1">42</span>  <span class="pl-c1">21</span>  <span class="pl-c1">21</span>  <span class="pl-c1">25</span>
 <span class="pl-c1">14</span>   <span class="pl-c1">8</span>  <span class="pl-c1">24</span>  <span class="pl-c1">13</span>  <span class="pl-c1">17</span>
  <span class="pl-c1">6</span>   <span class="pl-c1">4</span>  <span class="pl-c1">23</span>  <span class="pl-c1">12</span>   <span class="pl-c1">4</span>
 <span class="pl-c1">12</span>   <span class="pl-c1">6</span>  <span class="pl-c1">19</span>  <span class="pl-c1">11</span>   <span class="pl-c1">8</span>
  <span class="pl-c1">6</span>  <span class="pl-c1">12</span>   <span class="pl-c1">2</span>  <span class="pl-c1">18</span>   <span class="pl-c1">3</span></pre></div>
<h2><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related projects</h2>
<ul>
<li><a href="https://github.com/JuliaArrays/OffsetArrays.jl"><code>OffsetArrays.jl</code></a>:
Fortran-like arrays with arbitrary, zero or negative starting indices</li>
<li><a href="https://github.com/simonster/TwoBasedIndexing.jl"><code>TwoBasedIndexing.jl</code></a>:
Two-based indexing</li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>The <code>RandomBasedArrays.jl</code> package is licensed under the MIT "Expat" License.
The original author is Mosè Giordano.</p>
</article></div>