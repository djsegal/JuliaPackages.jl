<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-besselsjl" class="anchor" aria-hidden="true" href="#besselsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bessels.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/Bessels.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/JuliaMath/Bessels.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliamath.github.io/Bessels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/Bessels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/71e51ca50050477cb89ca63d02c9676d6ef686b6ecebedb105841ae2b65904a7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f42657373656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaMath/Bessels.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Bessels/29L49" rel="nofollow"><img src="https://camo.githubusercontent.com/b6096619aa14c35ba5175fd6c899579598e9c860da83066caf4b8dce58e51968/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f42657373656c732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Bessels/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Bessels/29L49?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/fd157fa38b5524aae9ae1300b854fbf0f1a681e85c6f4624fdf71c24b64dc3fd/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f42657373656c732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Bessels/deps.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=Bessels" rel="nofollow"><img src="https://camo.githubusercontent.com/fa2566d2bba7fea68a1f2715c7e59870078fa484d1c08d2fa67e6922c73766ef/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f42657373656c73" alt="Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/Bessels" style="max-width: 100%;"></a></p>
<p dir="auto">Numerical routines for computing Bessel, Airy, and Hankel functions for real arguments. These routines are written in the Julia programming language and are self contained without any external dependencies.</p>
<p dir="auto">The goal of the library is to provide high quality numerical implementations of Bessel functions with high accuracy without comprimising on computational time. In general, we try to match (and often exceed) the accuracy of other open source routines such as those provided by <a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>. There are instances where we don't quite match that desired accuracy (within a digit or two) but in general will provide implementations that are 5-10x faster (see <a href="https://github.com/JuliaMath/Bessels.jl#benchmarks">benchmarks</a>).</p>
<p dir="auto">The library currently supports Bessel functions, modified Bessel functions, Hankel functions, spherical Bessel functions, and Airy functions of the first and second kind for positive real arguments and integer and noninteger orders. Negative arguments are also supported only if the return value is real. <a href="https://github.com/JuliaMath/Bessels.jl#complex-numbers">Limited support</a> is provided for complex arguments. An unexported gamma function is also provided.</p>
<h1 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add the package
pkg&gt; add https://github.com/JuliaMath/Bessels.jl.git

julia&gt; using Bessels

julia&gt; x = 12.3; nu = 1.3

julia&gt; besselj(nu, x)
-0.2267581644816917"><pre><span class="pl-c"><span class="pl-c">#</span> add the package</span>
pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaMath<span class="pl-k">/</span>Bessels<span class="pl-k">.</span>jl<span class="pl-k">.</span>git

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Bessels

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">12.3</span>; nu <span class="pl-k">=</span> <span class="pl-c1">1.3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj</span>(nu, x)
<span class="pl-k">-</span><span class="pl-c1">0.2267581644816917</span></pre></div>
<h1 dir="auto"><a id="user-content-supported-functions" class="anchor" aria-hidden="true" href="#supported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported functions</h1>
<h3 dir="auto"><a id="user-content-bessel-functions-of-the-first-kind" class="anchor" aria-hidden="true" href="#bessel-functions-of-the-first-kind"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bessel functions of the first kind</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$$ J_{\nu}(x) = \sum_{m=0}^{\infty} \frac{(-1)^m}{m!\Gamma(m+\nu+1)}(\frac{x}{2})^{2m+\nu} $$</math-renderer></p>
<p dir="auto">Bessel functions of the first kind, denoted as <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$J_{\nu}(x)$</math-renderer>, can be called with <code>besselj(nu, x)</code> where <code>nu</code> is the order of the Bessel function with argument <code>x</code>. Routines are also available for orders <code>0</code> and <code>1</code> which can be called with <code>besselj0(x)</code> and <code>besselj1(x)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ν, x = 1.4, 12.3

# generic call for any order ν
julia&gt; besselj(ν, x)
-0.22796228516266345

# ν = 0
julia&gt; besselj0(x)
0.11079795030758544

# ν = 1
julia&gt; besselj1(x)
-0.1942588480405914"><pre>julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">1.4</span>, <span class="pl-c1">12.3</span>

<span class="pl-c"><span class="pl-c">#</span> generic call for any order ν</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj</span>(ν, x)
<span class="pl-k">-</span><span class="pl-c1">0.22796228516266345</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj0</span>(x)
<span class="pl-c1">0.11079795030758544</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj1</span>(x)
<span class="pl-k">-</span><span class="pl-c1">0.1942588480405914</span></pre></div>
<h3 dir="auto">
<a id="user-content-bessel-functions-of-the-second-kind" class="anchor" aria-hidden="true" href="#bessel-functions-of-the-second-kind"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bessel functions of the second kind</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$$ Y_{\nu}(x) = \frac{J_{\nu}(x) \cos(\nu \pi) - J_{-\nu}(x)}{\sin(\nu \pi)} $$</math-renderer></p>
<p dir="auto">Bessel functions of the second kind, denoted as <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$Y_{\nu}(x)$</math-renderer>, can be called with <code>bessely(nu, x)</code>. Routines are also available for orders <code>0</code> and <code>1</code> which can be called with <code>bessely0(x)</code> and <code>bessely1(x)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ν, x = 1.4, 12.3

# generic call for any order ν
julia&gt; bessely(ν, x)
0.00911009829832235

# ν = 0
julia&gt; bessely0(x)
-0.19859309463502633

# ν = 1
julia&gt; bessely1(x)
-0.11894840329926631"><pre>julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">1.4</span>, <span class="pl-c1">12.3</span>

<span class="pl-c"><span class="pl-c">#</span> generic call for any order ν</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bessely</span>(ν, x)
<span class="pl-c1">0.00911009829832235</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bessely0</span>(x)
<span class="pl-k">-</span><span class="pl-c1">0.19859309463502633</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bessely1</span>(x)
<span class="pl-k">-</span><span class="pl-c1">0.11894840329926631</span></pre></div>
<h3 dir="auto">
<a id="user-content-modified-bessel-functions-of-the-first-kind" class="anchor" aria-hidden="true" href="#modified-bessel-functions-of-the-first-kind"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Modified Bessel functions of the first kind</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$$ I_{\nu}(x) = \sum_{m=0}^{\infty} \frac{1}{m!\Gamma(m+\nu+1)}(\frac{x}{2})^{2m+\nu} $$</math-renderer></p>
<p dir="auto">Modified Bessel functions of the first kind, denoted as <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$I_{\nu}(x)$</math-renderer>, can be called with <code>besseli(nu, x)</code> where <code>nu</code> is the order of the Bessel function with argument <code>x</code>. Routines are also available for orders <code>0</code> and <code>1</code> which can be called with <code>besseli0(x)</code> and <code>besseli1(x)</code>. Exponentially scaled versions of these functions <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$I_{\nu}(x) \cdot e^{-x}$</math-renderer> are also provided which can be called with <code>besseli0x(x)</code>, <code>besseli1x(x)</code>, and <code>besselix(nu, x)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ν, x = 1.4, 12.3

# generic call for any order v
julia&gt; besseli(ν, x)
23242.698263113296

# exponentially scaled version
julia&gt; besselix(ν, x)
0.10579482312624018

# ν = 0
julia&gt; besseli0(x)
25257.48759692308
julia&gt; besseli0x(x)
0.11496562932068803

# ν = 1
julia&gt; besseli1(x)
24207.933018435186
julia&gt; besseli1x(x)
0.11018832507935208"><pre>julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">1.4</span>, <span class="pl-c1">12.3</span>

<span class="pl-c"><span class="pl-c">#</span> generic call for any order v</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli</span>(ν, x)
<span class="pl-c1">23242.698263113296</span>

<span class="pl-c"><span class="pl-c">#</span> exponentially scaled version</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselix</span>(ν, x)
<span class="pl-c1">0.10579482312624018</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli0</span>(x)
<span class="pl-c1">25257.48759692308</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli0x</span>(x)
<span class="pl-c1">0.11496562932068803</span>

<span class="pl-c"><span class="pl-c">#</span> ν = 1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli1</span>(x)
<span class="pl-c1">24207.933018435186</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli1x</span>(x)
<span class="pl-c1">0.11018832507935208</span></pre></div>
<h3 dir="auto">
<a id="user-content-modified-bessel-functions-of-the-second-kind" class="anchor" aria-hidden="true" href="#modified-bessel-functions-of-the-second-kind"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Modified Bessel functions of the second kind</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$$ K_{\nu}(x) = \frac{\pi}{2} \frac{I_{-\nu}(x) - I_{\nu}(x)}{\sin(\nu \pi)} $$</math-renderer></p>
<p dir="auto">Modified Bessel functions of the second kind, denoted as <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$K_{\nu}(x)$</math-renderer>, can be called with <code>besselk(nu, x)</code>. Routines are available for orders <code>0</code> and <code>1</code> which can be called with <code>besselk0(x)</code> and <code>besselk1(x)</code>. Exponentially scaled versions of these functions <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$K_{\nu}(x) \cdot e^{x}$</math-renderer> are also provided which can be called with <code>besselk0x(x)</code>, <code>besselk1x(x)</code>, and <code>besselkx(nu, x)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ν, x = 1.4, 12.3

julia&gt; besselk(ν, x)
1.739055243080153e-6

julia&gt; besselk0(x)
1.6107849768886856e-6

julia&gt; besselk1(x)
1.6750295538365835e-6"><pre>julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">1.4</span>, <span class="pl-c1">12.3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselk</span>(ν, x)
<span class="pl-c1">1.739055243080153e-6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselk0</span>(x)
<span class="pl-c1">1.6107849768886856e-6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselk1</span>(x)
<span class="pl-c1">1.6750295538365835e-6</span></pre></div>
<h2 dir="auto">
<a id="user-content-support-for-sequence-of-orders" class="anchor" aria-hidden="true" href="#support-for-sequence-of-orders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Support for sequence of orders</h2>
<p dir="auto">We also provide support for <code>besselj(nu::M, x::T)</code>, <code>bessely(nu::M, x::T)</code>, <code>besseli(nu::M, x::T)</code>, <code>besselk(nu::M, x::T)</code>, <code>besseli(nu::M, x::T)</code>, <code>besselh(nu::M, k, x::T)</code> when <code>M</code> is some <code>AbstractRange</code> and <code>T</code> is some float.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; besselj(0:10, 1.0)
11-element Vector{Float64}:
 0.7651976865579666
 0.44005058574493355
 0.11490348493190049
 0.019563353982668407
 0.0024766389641099553
 0.00024975773021123444
 2.0938338002389273e-5
 1.5023258174368085e-6
 9.422344172604502e-8
 5.249250179911876e-9
 2.630615123687453e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.7651976865579666</span>
 <span class="pl-c1">0.44005058574493355</span>
 <span class="pl-c1">0.11490348493190049</span>
 <span class="pl-c1">0.019563353982668407</span>
 <span class="pl-c1">0.0024766389641099553</span>
 <span class="pl-c1">0.00024975773021123444</span>
 <span class="pl-c1">2.0938338002389273e-5</span>
 <span class="pl-c1">1.5023258174368085e-6</span>
 <span class="pl-c1">9.422344172604502e-8</span>
 <span class="pl-c1">5.249250179911876e-9</span>
 <span class="pl-c1">2.630615123687453e-10</span></pre></div>
<p dir="auto">In general, this provides a fast way to generate a sequence of Bessel functions for many orders.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime besselj(0:100, 50.0)
  398.095 ns (1 allocation: 896 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">besselj</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">50.0</span>)
  <span class="pl-c1">398.095</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">896</span> bytes)</pre></div>
<p dir="auto">This function will allocate so it is recommended that you calculate the Bessel functions at the top level of your function outside any hot loop. You can also call the mutating function on your preallocated vector <code>Bessels.besselj!(out, nu, x)</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = zeros(10)
out = Bessels.besselj!(a, 1:10, 1.0)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>)
out <span class="pl-k">=</span> Bessels<span class="pl-k">.</span><span class="pl-c1">besselj!</span>(a, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1.0</span>)</pre></div>
<h3 dir="auto">
<a id="user-content-complex-numbers" class="anchor" aria-hidden="true" href="#complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Complex numbers</h3>
<p dir="auto">Support for complex numbers is only provided for the Airy functions (<code>airyai</code>, <code>airyaiprime</code>, <code>airybi</code>, <code>airybiprime</code>) and the Bessel functions of the first kind with orders 0 and 1 (<code>besselj0</code>, <code>besselj1</code>, <code>besseli0</code>, <code>besseli1</code>).</p>
<h3 dir="auto">
<a id="user-content-support-for-negative-arguments" class="anchor" aria-hidden="true" href="#support-for-negative-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Support for negative arguments</h3>
<p dir="auto">Support is provided for negative arguments and orders only if the return value is real. A domain error will be thrown if the return value is complex. See <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="1328721851" data-permission-text="Title is private" data-url="https://github.com/JuliaMath/Bessels.jl/issues/30" data-hovercard-type="issue" data-hovercard-url="/JuliaMath/Bessels.jl/issues/30/hovercard" href="https://github.com/JuliaMath/Bessels.jl/issues/30">#30</a> for more details.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ν, x = 13.0, -1.0
julia&gt; besseli(ν, x)
-1.9956316782072005e-14

julia&gt; ν, x = -14.0, -9.9
julia&gt; besseli(ν, x)
0.2892290867115618

julia&gt; ν, x = 12.6, -3.0
julia&gt; besseli(ν, x)
ERROR: DomainError with -3.0:
Complex result returned for real arguments. Complex arguments are currently not supported
Stacktrace:
 [1] _besseli(nu::Float64, x::Float64)
   @ Bessels ~/.julia/packages/Bessels/OBoYU/src/besseli.jl:181
 [2] besseli(nu::Float64, x::Float64)
   @ Bessels ~/.julia/packages/Bessels/OBoYU/src/besseli.jl:167
 [3] top-level scope
   @ REPL[62]:1"><pre>julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">13.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli</span>(ν, x)
<span class="pl-k">-</span><span class="pl-c1">1.9956316782072005e-14</span>

julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">14.0</span>, <span class="pl-k">-</span><span class="pl-c1">9.9</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli</span>(ν, x)
<span class="pl-c1">0.2892290867115618</span>

julia<span class="pl-k">&gt;</span> ν, x <span class="pl-k">=</span> <span class="pl-c1">12.6</span>, <span class="pl-k">-</span><span class="pl-c1">3.0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besseli</span>(ν, x)
ERROR<span class="pl-k">:</span> DomainError with <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-k">:</span>
Complex result returned <span class="pl-k">for</span> real arguments. Complex arguments are currently not supported
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">_besseli</span>(nu<span class="pl-k">::</span><span class="pl-c1">Float64</span>, x<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
   @ Bessels <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>Bessels<span class="pl-k">/</span>OBoYU<span class="pl-k">/</span>src<span class="pl-k">/</span>besseli<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">181</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">besseli</span>(nu<span class="pl-k">::</span><span class="pl-c1">Float64</span>, x<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
   @ Bessels <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>Bessels<span class="pl-k">/</span>OBoYU<span class="pl-k">/</span>src<span class="pl-k">/</span>besseli<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">167</span>
 [<span class="pl-c1">3</span>] top<span class="pl-k">-</span>level scope
   @ REPL[<span class="pl-c1">62</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<h4 dir="auto">
<a id="user-content-gamma" class="anchor" aria-hidden="true" href="#gamma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gamma</h4>
<p dir="auto">We also provide an unexported gamma function for real arguments that can be called with <code>Bessels.gamma(x)</code>.</p>
<h1 dir="auto">
<a id="user-content-accuracy" class="anchor" aria-hidden="true" href="#accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accuracy</h1>
<p dir="auto">We report the relative errors (<code>abs(1 - Bessels.f(x)/ArbNumerics.f(ArbFloat(x)))</code>) compared to <code>ArbNumerics.jl</code> when computed in a higher precision. The working precision was set to <code>setworkingprecision(ArbFloat, 500); setextrabits(128)</code> for the calculations in arbitrary precision. We generate a thousand random points for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d46d1ad93d92cbe20e92d2d56763eea">$x \in (0, 100)$</math-renderer> and compute the mean and maximum absolute relative errors.</p>
<table>
<thead>
<tr>
<th>function</th>
<th><code>mean</code></th>
<th><code>maximum</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>besselj0(x)</td>
<td>3e-16</td>
<td>6e-14</td>
</tr>
<tr>
<td>besselj1(x)</td>
<td>2e-15</td>
<td>7e-13</td>
</tr>
<tr>
<td>besselj(5.0, x)</td>
<td>3e-14</td>
<td>2e-11</td>
</tr>
<tr>
<td>besselj(12.8, x)</td>
<td>2e-14</td>
<td>2e-12</td>
</tr>
<tr>
<td>besselj(111.6, x)</td>
<td>8e-15</td>
<td>4e-14</td>
</tr>
<tr>
<td>bessely0(x)</td>
<td>2e-15</td>
<td>5e-13</td>
</tr>
<tr>
<td>bessely1(x)</td>
<td>1e-15</td>
<td>2e-13</td>
</tr>
<tr>
<td>bessely(4.0, x)</td>
<td>3e-15</td>
<td>2e-12</td>
</tr>
<tr>
<td>bessely(6.92, x)</td>
<td>3e-14</td>
<td>5e-12</td>
</tr>
<tr>
<td>bessely(113.92, x)</td>
<td>8e-15</td>
<td>8e-14</td>
</tr>
<tr>
<td>besselk0(x)</td>
<td>1.2e-16</td>
<td>4e-16</td>
</tr>
<tr>
<td>besselk1(x)</td>
<td>1.2e-16</td>
<td>5e-16</td>
</tr>
<tr>
<td>besselk(14.0, x)</td>
<td>4e-15</td>
<td>3e-14</td>
</tr>
<tr>
<td>besselk(27.32, x)</td>
<td>6e-15</td>
<td>3e-14</td>
</tr>
<tr>
<td>besseli0(x)</td>
<td>1.5e-16</td>
<td>6e-16</td>
</tr>
<tr>
<td>besseli1(x)</td>
<td>1.5e-16</td>
<td>5e-16</td>
</tr>
<tr>
<td>besseli(9.0, x)</td>
<td>2e-16</td>
<td>2e-15</td>
</tr>
<tr>
<td>besseli(92.12, x)</td>
<td>9e-15</td>
<td>7e-14</td>
</tr>
<tr>
<td>Bessels.gamma(x)</td>
<td>1.3e-16</td>
<td>5e-16</td>
</tr>
</tbody>
</table>
<p dir="auto">In general the largest relative errors are observed near the zeros of Bessel functions for <code>besselj</code> and <code>bessely</code>. Accuracy might also be slightly worse for very large arguments when using <code>Float64</code> precision.</p>
<h1 dir="auto">
<a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h1>
<p dir="auto">We give brief performance comparisons to the implementations provided by <a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>. In general, special functions are computed with separate algorithms in different domains leading to computational time being dependent on argument. For these comparisons we show the relative speed increase for computing random values between <code>0</code> and <code>100</code> for <code>x</code> and order <code>nu</code>. In some ranges, performance may be significantly better while others will be more similar.</p>
<table>
<thead>
<tr>
<th>function</th>
<th><code>Float64</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>besselj0(x)</td>
<td>2.5x</td>
</tr>
<tr>
<td>besselj(nu, x)</td>
<td>6x</td>
</tr>
<tr>
<td>bessely0(x)</td>
<td>2.3x</td>
</tr>
<tr>
<td>bessely(nu, x)</td>
<td>5x</td>
</tr>
<tr>
<td>besseli0</td>
<td>10x</td>
</tr>
<tr>
<td>besseli(nu, x)</td>
<td>7x</td>
</tr>
<tr>
<td>besselk0</td>
<td>10x</td>
</tr>
<tr>
<td>besselk(nu, x)</td>
<td>4x</td>
</tr>
<tr>
<td>Bessels.gamma(x)</td>
<td>5x</td>
</tr>
</tbody>
</table>
<p dir="auto">Benchmarks were run using Julia Version 1.7.2 on an Apple M1 using Rosetta.</p>
<h1 dir="auto">
<a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h1>
<ul dir="auto">
<li><code>besselj0(x)</code></li>
<li><code>besselj1(x)</code></li>
<li><code>besselj(nu, x)</code></li>
<li><code>bessely0(x)</code></li>
<li><code>bessely1(x)</code></li>
<li><code>bessely(nu, x)</code></li>
<li><code>besseli0(x)</code></li>
<li><code>besseli1(x)</code></li>
<li><code>besseli(nu, x)</code></li>
<li><code>besselk0(x)</code></li>
<li><code>besselk1(x)</code></li>
<li><code>besselk(nu, x)</code></li>
<li><code>besselh(nu, k, x)</code></li>
<li><code>hankelh1(nu, x)</code></li>
<li><code>hankelh2(nu, x)</code></li>
<li><code>sphericalbesselj(nu, x)</code></li>
<li><code>sphericalbessely(nu, x)</code></li>
<li><code>Bessels.sphericalbesseli(nu, x)</code></li>
<li><code>Bessels.sphericalbesselk(nu, x)</code></li>
<li><code>airyai(x)</code></li>
<li><code>airyaiprime(x)</code></li>
<li><code>airybi(x)</code></li>
<li><code>airybiprime(x)</code></li>
<li><code>Bessels.gamma(x)</code></li>
</ul>
<h1 dir="auto">
<a id="user-content-current-development-plans" class="anchor" aria-hidden="true" href="#current-development-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Development Plans</h1>
<ul dir="auto">
<li>Support for higher precision <code>Double64</code>, <code>Float128</code>
</li>
<li>Support for complex arguments (<code>x</code> and <code>nu</code>)</li>
<li>Support for derivatives with respect to argument and order</li>
</ul>
<h1 dir="auto">
<a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h1>
<p dir="auto">Contributions are very welcome, as are feature requests, suggestions or general discussions. Please open an <a href="https://github.com/JuliaMath/Bessels.jl/issues/new">issue</a> for discussion on newer implementations, share papers, new features, or if you encounter any problems. Our goal is to provide high quality implementations of Bessel functions that match or exceed the accuracy of the implementatations provided by SpecialFunctions.jl. Please let us know if you encounter any accuracy or performance differences.</p>
</article></div>