<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fkmigrationjl" class="anchor" aria-hidden="true" href="#fkmigrationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>fkMigration.jl</h1>
<p>A Julia project demonstrating the fast f-k migration algorithm presented in <em>Wave-based non-line-of-sight imaging using fast f−k migration</em> by Lindell et al. at SIGGRAPH 2019.</p>
<h1><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setup</h1>
<p>If you are new to non-line-of-sight (NLOS) imaging, we have written an <a href="https://analytech-solutions.com/analytech-solutions/blog/nlos.html" rel="nofollow">introductory blog post</a> to provide some background and explain how we wrote this code.</p>
<p>First, clone the repository and run Julia from it.</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> fkMigration.jl
julia --project</pre></div>
<p>Then, enter package mode <code>]</code> and instantiate the project.</p>
<div class="highlight highlight-source-julia"><pre>(fkMigration) pkg<span class="pl-k">&gt;</span> instantiate
Project fkMigration v0<span class="pl-c1">.1.0</span>
    Status <span class="pl-s"><span class="pl-pds">`</span>fkMigration.jl/Project.toml<span class="pl-pds">`</span></span>
  [<span class="pl-c1">7</span>a1cc6ca] <span class="pl-k">+</span> FFTW v0<span class="pl-c1">.3.0</span>
  [<span class="pl-c1">23992714</span>] <span class="pl-k">+</span> MAT v0<span class="pl-c1">.5.0</span>
    Status <span class="pl-s"><span class="pl-pds">`</span>fkMigration.jl/Manifest.toml<span class="pl-pds">`</span></span>
  [<span class="pl-c1">7</span>a1cc6ca] <span class="pl-k">+</span> FFTW v0<span class="pl-c1">.3.0</span>
  [<span class="pl-c1">23992714</span>] <span class="pl-k">+</span> MAT v0<span class="pl-c1">.5.0</span>
</pre></div>
<p>You will need to download and extract NLOS datasets from the <a href="https://drive.google.com/a/stanford.edu/file/d/1_av9TdJ-J22qAUNs1ueZ8ETuRRW2KHg_/view?usp=sharing" rel="nofollow">Stanford Computational Imaging Lab</a> in order to continue.
We used the "teaser" dataset, and have it extracted to <code>../teaser</code>.
You will need to use those directory paths in calls to the fkMigration.jl project.</p>
<table>
<thead>
<tr>
<th><a target="_blank" rel="noopener noreferrer" href="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-waves.png"><img src="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-waves.png" alt="vertical-temporal waves" title="Vertical-Temporal Waves" style="max-width:100%;"></a></th>
<th><a target="_blank" rel="noopener noreferrer" href="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-dataset-frame-271.png"><img src="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-dataset-frame-271.png" alt="vertical-horizontal waves" title="Vertical-Horizontal Waves" style="max-width:100%;"></a></th>
</tr>
</thead>
</table>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>There is a simple <code>demo</code> function which you can run, but it requires a lot of system memory (&gt;=32GB) to run.
A couple of optional arguments can be provided to downsample and crop the data to reduce the memory usage.
Either way, the function returns a dense array 3D volumetric represention of the scene.
Therefore, the array must be collapsed in order to form a more traditional 2D image of the scene, and we simply use <code>maximum</code> as a way to achieve that below.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> fkMigration

julia<span class="pl-k">&gt;</span> fullVolume <span class="pl-k">=</span> <span class="pl-c1">demo</span>(<span class="pl-s"><span class="pl-pds">"</span>../teaser<span class="pl-pds">"</span></span>)
<span class="pl-c1">512</span><span class="pl-k">×</span><span class="pl-c1">512</span><span class="pl-k">×</span><span class="pl-c1">1024</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
⋮

julia<span class="pl-k">&gt;</span> lowResVolume <span class="pl-k">=</span> <span class="pl-c1">demo</span>(<span class="pl-s"><span class="pl-pds">"</span>../teaser<span class="pl-pds">"</span></span>, <span class="pl-c1">64</span>, <span class="pl-c1">512</span>)
<span class="pl-c1">64</span><span class="pl-k">×</span><span class="pl-c1">64</span><span class="pl-k">×</span><span class="pl-c1">512</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
⋮

julia<span class="pl-k">&gt;</span> lowResImage <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(lowResVolume, dims<span class="pl-k">=</span><span class="pl-c1">3</span>)[:, :] <span class="pl-k">/</span> <span class="pl-c1">maximum</span>(lowResVolume)
<span class="pl-c1">64</span><span class="pl-k">×</span><span class="pl-c1">64</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
⋮
</pre></div>
<p>You now have a normalized array which you can further manipulate, view with the <code>ImageView.jl</code> package, or save with the <code>FileIO.jl</code> and <code>ImageMagick.jl</code> packages.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-recon-vs-scene.png"><img src="https://github.com/analytech-solutions/fkMigration.jl/raw/master/docs/images/teaser-recon-vs-scene.png" alt="reconstructed scene" title="Reconstructed Scene" style="max-width:100%;"></a></p>
<p>Also, if you want more control over the whole process, the lower-level functions used by <code>demo</code> are available to use for yourself.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> tau, calib <span class="pl-k">=</span> <span class="pl-c1">loadDataset</span>(<span class="pl-s"><span class="pl-pds">"</span>../teaser<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>meas_10min.mat<span class="pl-pds">"</span></span>) ;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">calibrate!</span>(tau, calib) ;

julia<span class="pl-k">&gt;</span> tau <span class="pl-k">=</span> <span class="pl-c1">downsampleAndCrop</span>(tau, <span class="pl-c1">64</span>, <span class="pl-c1">512</span>) ;

julia<span class="pl-k">&gt;</span> tau <span class="pl-k">=</span> <span class="pl-c1">reconstruct</span>(tau) ;</pre></div>
</article></div>