<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lsljl" class="anchor" aria-hidden="true" href="#lsljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LSL.jl</h1>
<p><a href="https://travis-ci.org/samuelpowell/LSL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c403d364b0c070d38cf96f9e449db2b26aed758/68747470733a2f2f7472617669732d63692e6f72672f73616d75656c706f77656c6c2f4c534c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/samuelpowell/LSL.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/samuelpowell/LSL-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed768ecee8fec6c2be83ea5093d2124caa9536ee/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f73616d75656c706f77656c6c2f4c534c2e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/samuelpowell/LSL.jl?svg=true" style="max-width:100%;"></a></p>
<p>A Julia interface to the lab streaming layer
library.</p>
<h2><a id="user-content-installation--platform-support" class="anchor" aria-hidden="true" href="#installation--platform-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation &amp; platform support</h2>
<p>LSL is a registered package. Install using the package manager:</p>
<div class="highlight highlight-source-julia"><pre>]add LSL</pre></div>
<table>
<thead>
<tr>
<th>Platform</th>
<th>Architecture</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux (x86)</td>
<td>32-bit and 64-bit</td>
<td>CI active</td>
</tr>
<tr>
<td>MacOS</td>
<td>64-bit</td>
<td>CI active</td>
</tr>
<tr>
<td>Windows</td>
<td>64-bit</td>
<td>CI active</td>
</tr>
</tbody>
</table>
<p>For Julia &gt; 1.3, the library is cross-compiled for Windows (x64), Linux (x86, x64, ARMv7, ARMv8),
MacOS, and FreeBSD using the <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl">BinaryBuilder</a>
package, with CI builds undertaken on the <a href="https://github.com/JuliaPackaging/Yggdrasil/tree/master/L/liblsl">Yggdrasil</a>
platform. Binaries are packaged and supplied through the <a href="https://github.com/JuliaBinaryWrappers/liblsl_jll.jl">JuliaBinaryWrappers</a> organisation. Platforms for which the library
are built, but not listed as supported, are untested or known to fail.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>LSL.jl provides an interface similar to the official
<a href="https://github.com/labstreaminglayer/liblsl-Python/">Python bindings</a>, with some changes
to ensure the wrapper follows idiomatic Julia.</p>
<h2><a id="user-content-specifying-a-stream" class="anchor" aria-hidden="true" href="#specifying-a-stream"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Specifying a stream</h2>
<p>A new stream is specified by building a <code>SteamInfo</code> structure:</p>
<div class="highlight highlight-source-julia"><pre>info <span class="pl-k">=</span> <span class="pl-c1">StreamInfo</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>streamname<span class="pl-pds">"</span></span>,
                  type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>streamtype<span class="pl-pds">"</span></span>,
                  channel_count <span class="pl-k">=</span> <span class="pl-c1">16</span>,
                  channel_format <span class="pl-k">=</span> Float64,
                  source_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>streamuuid<span class="pl-pds">"</span></span>)</pre></div>
<p>A stream information structure can be quieried using methods such as <code>name(info)</code>,
<code>type(info)</code>, <code>channel_count(info)</code>, <code>nominal_srate(info)</code>, <code>channel_format(info)</code>,
<code>source_id(info)</code>, <code>version(info)</code>, <code>created_at(info)</code>, <code>session_id(info)</code>, <code>uid(info)</code>,
<code>hostname(info)</code>. Get help on these and all other methods provided by the library using
the Julia help system.</p>
<h2><a id="user-content-creating-a-stream-outlet-and-pushing-data" class="anchor" aria-hidden="true" href="#creating-a-stream-outlet-and-pushing-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating a stream outlet, and pushing data</h2>
<p>To advertise the stream on the network, and allow data to be sent, create a <code>StreamOutlet</code>
structure:</p>
<div class="highlight highlight-source-julia"><pre>outlet <span class="pl-k">=</span> <span class="pl-c1">StreamOutlet</span>(info)</pre></div>
<p>You may push a vector of <code>channel_count(info)</code> samples of type <code>channel_format(info)</code> by
using the <code>push_sample</code> method:</p>
<div class="highlight highlight-source-julia"><pre>sample <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">16</span>)
<span class="pl-c1">push_sample</span>(outlet, sample)</pre></div>
<p>Push a massive chunk of data consisting of many such samples with a matrix of appropriate
dimension:</p>
<div class="highlight highlight-source-julia"><pre>chunk <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">16</span>, <span class="pl-c1">1024</span>)
<span class="pl-c1">push_chunk</span>(outlet, sample)</pre></div>
<p>Check if anyone is listening to the outlet by calling <code>have_consumers(info)</code>, or block
on a connection using <code>wait_for_consumers(info</code>). Note that the latter function is a blocking
C call, and this will prevent Julia from switching between Tasks if you choose to use this
function in an asynchronous operation. It may be preferable to simple poll the former
function.</p>
<h2><a id="user-content-finding-streams-on-the-network" class="anchor" aria-hidden="true" href="#finding-streams-on-the-network"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Finding streams on the network</h2>
<p>Find all streams on the network, waiting two seconds for discovery:</p>
<div class="highlight highlight-source-julia"><pre>streams <span class="pl-k">=</span> <span class="pl-c1">resolve_streams</span>(timeout <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)</pre></div>
<p>This function returns a vector of <code>StreamInfo</code> structures, each of which can be queried or
read from. Alternatively, you may wish to resolve a stream by property:</p>
<div class="highlight highlight-source-julia"><pre>streams <span class="pl-k">=</span> <span class="pl-c1">resolve_byprop</span>(<span class="pl-s"><span class="pl-pds">"</span>source_id<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>streamname<span class="pl-pds">"</span></span>, timeout <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)</pre></div>
<p>Or using a predicate:</p>
<div class="highlight highlight-source-julia"><pre>streams <span class="pl-k">=</span> <span class="pl-c1">resolve_bypred</span>(<span class="pl-s"><span class="pl-pds">"</span>type=streamtype<span class="pl-pds">"</span></span>, timeout <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)</pre></div>
<h2><a id="user-content-creating-a-stream-inlet-and-reading-data" class="anchor" aria-hidden="true" href="#creating-a-stream-inlet-and-reading-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating a stream inlet, and reading data</h2>
<p>To get some data, given a <code>StreamInfo</code> structure, create a <code>StreamInlet</code> structure:</p>
<div class="highlight highlight-source-julia"><pre>inlet <span class="pl-k">=</span> <span class="pl-c1">StreamInlet</span>(streams[<span class="pl-c1">1</span>])</pre></div>
<p>You can <code>open_stream(inlet)</code>, <code>close_stream(inlet)</code>, <code>set_postprocessing(inlet)</code>, and check
if <code>samples_available(inlet)</code>, etc. But probably you're more intersted in getting samples:</p>
<div class="highlight highlight-source-julia"><pre>sample, timestamp <span class="pl-k">=</span> <span class="pl-c1">pull_sample</span>(inlet, timeout <span class="pl-k">=</span> <span class="pl-c1">10.0</span>)</pre></div>
<p>Be careful, the default timeout will wait forever (<code>timeout = LSL.LSL_FOREVER</code>). For high
performance code you may want to reuse an existing vector:</p>
<div class="highlight highlight-source-julia"><pre>timestamp <span class="pl-k">=</span> <span class="pl-c1">pull_sample!</span>(sample, inlet, timeout <span class="pl-k">=</span> <span class="pl-c1">10.0</span>)</pre></div>
<p>To grab a chunk of data:</p>
<div class="highlight highlight-source-julia"><pre>chunk, timestamps <span class="pl-k">=</span> <span class="pl-c1">pull_chunk</span>(inlet, timeout <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, max_samples <span class="pl-k">=</span> <span class="pl-c1">512</span>)</pre></div>
<p>Since the size of the available chunk is not known until the library returns, a large
allocation (equal to a chunk size of <code>max_samples</code>) is made by this function, and resized
accordingly. This may not offer the best performance in a hot loop.</p>
<h2><a id="user-content-adding-extended-metadata-to-stream-information" class="anchor" aria-hidden="true" href="#adding-extended-metadata-to-stream-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding extended metadata to stream information</h2>
<p>Streams can be annotated using structured metadata as described in the
<a href="https://github.com/sccn/xdf">XDF</a> format. For example, an EEG recording may employ
the meta-data in the associated <a href="https://github.com/sccn/xdf/wiki/EEG-Meta-Data">specification</a>.</p>
<div class="highlight highlight-source-julia"><pre>info <span class="pl-k">=</span> <span class="pl-c1">StreamInfo</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>BioSemi<span class="pl-pds">"</span></span>,
                  type<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>EEG<span class="pl-pds">"</span></span>,
                  channel_count<span class="pl-k">=</span><span class="pl-c1">8</span>,
                  nominal_srate<span class="pl-k">=</span><span class="pl-c1">100</span>,
                  channel_format<span class="pl-k">=</span>Float32,
                  source_id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sub_ae852<span class="pl-pds">"</span></span>)

channels <span class="pl-k">=</span> <span class="pl-c1">append_child</span>(<span class="pl-c1">desc</span>(info), <span class="pl-s"><span class="pl-pds">"</span>channels<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> label <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>C3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>FPz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>POz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>CPz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>O1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>O2<span class="pl-pds">"</span></span>]
  ch <span class="pl-k">=</span> <span class="pl-c1">append_child</span>(channels, <span class="pl-s"><span class="pl-pds">"</span>channel<span class="pl-pds">"</span></span>)
  <span class="pl-c1">append_child_value</span>(ch, <span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span>, label)
  <span class="pl-c1">append_child_value</span>(ch, <span class="pl-s"><span class="pl-pds">"</span>unit<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>microvolts<span class="pl-pds">"</span></span>)
  <span class="pl-c1">append_child_value</span>(ch, <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>EEG<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">append_child_value</span>(<span class="pl-c1">desc</span>(info), <span class="pl-s"><span class="pl-pds">"</span>manufacturer<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>SCCN<span class="pl-pds">"</span></span>)
cap <span class="pl-k">=</span> <span class="pl-c1">append_child</span>(<span class="pl-c1">desc</span>(info), <span class="pl-s"><span class="pl-pds">"</span>cap<span class="pl-pds">"</span></span>)
<span class="pl-c1">append_child_value</span>(cap, <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>EasyCap<span class="pl-pds">"</span></span>)
<span class="pl-c1">append_child_value</span>(cap, <span class="pl-s"><span class="pl-pds">"</span>size<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>54<span class="pl-pds">"</span></span>)
<span class="pl-c1">append_child_value</span>(cap, <span class="pl-s"><span class="pl-pds">"</span>labelscheme<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>10-20<span class="pl-pds">"</span></span>)</pre></div>
<p>Full stream metadata can be rendered as XML:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">XML</span>(info)</pre></div>
<h2><a id="user-content-low-level-library-access" class="anchor" aria-hidden="true" href="#low-level-library-access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low level library access</h2>
<p>The full C API of liblsl is wrapped by the package, and the functions can be accessed by
their usual names, in the <code>lib</code> submodule, e.g. <code>LSL.lib.lsl_get_name(info)</code>. Julia structures
such as <code>StreamInfo</code>s, <code>StreamOutlet</code>s, and <code>StreamInlet</code>s will automatically convert to their
C handle when used as arguments to the C library. Alternatively you may get a pointer by
accesing the <code>.handle</code> property of each.</p>
</article></div>