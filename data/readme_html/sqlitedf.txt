<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sqlitedf" class="anchor" aria-hidden="true" href="#sqlitedf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SQLiteDF</h1>
<p dir="auto">Provides a simple Julia macro that allows you to load data from
Tables.jl interface objects into an in-memory SQLite database and then
execute a query to get back a potentially complex result.</p>
<p dir="auto">@sqlitedf(a, b, c, ..., "select ...")</p>
<p dir="auto">creates a new in-memory SQLite database, loads the data from a,b,c,...
into SQL tables named a,b,c,... etc and then executes the query in the
final position, returning the result.</p>
<p dir="auto">The tables can be anything that SQLite is happy running load! on,
which basically means anything that is Tables.jl API compatible.</p>
<p dir="auto">Returns a Tables.jl compatible object that can for example be read
into a DataFrame.</p>
</article></div>