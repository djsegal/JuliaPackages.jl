<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-postprocessing" class="anchor" aria-hidden="true" href="#postprocessing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Postprocessing</h1>
<p dir="auto"><a href="https://github.com/ranocha/Postprocessing.jl/actions"><img src="https://github.com/ranocha/Postprocessing.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ranocha/Postprocessing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb9182c97acc7345f773ca317608501d03c1efba6ffbbc8a794c461407924344/68747470733a2f2f636f6465636f762e696f2f67682f72616e6f6368612f506f737470726f63657373696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ranocha/Postprocessing.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/ranocha/Postprocessing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cfeeae5b81266ebed7ee0f67dedd5d6c8926b234a1877003bf3df2fbdb000429/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f72616e6f6368612f506f737470726f63657373696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/ranocha/Postprocessing.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width: 100%;"></a>
<a href="https://github.com/ranocha/Postprocessing.jl"><img src="https://camo.githubusercontent.com/14d67c31318f65c0c49d64adf02c90e9ccc66fc0fa86e6f5c11e3600ec4d2f82/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f72616e6f6368612f506f737470726f63657373696e672e6a6c2f76302e312e312e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/ranocha/Postprocessing.jl/v0.1.1.svg?style=social&amp;logo=github" style="max-width: 100%;"></a></p>

<p dir="auto">This is work in progress. Currently, the following functions are implemented.</p>
<ul dir="auto">
<li><code>total_variation_denoising(source::AbstractVector, λ::Number)</code>
Compute the solution of the total variation regularized least square problem
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="a8db99a1a1d78fe2901e35a26e5ef36b">$$\\min_x \\frac{1}{2} \\sum_{k} |y_k - x_k|^2 + \\lambda \\sum_{k} |x_{k+1} - x_{k}|$$</math-renderer>
using the explicit algorithm of
<a href="https://doi.org/10.1109/LSP.2013.2278339" rel="nofollow">Condat (2013) A Direct Algorithm for 1-D Total Variation Denoising</a>.
An inplace version <code>total_variation_denoising!(dest::AbstractVector, source::AbstractVector, λ::Number)</code>
is also provided.</li>
<li>
<code>group_sparse_total_variation_denoising(y::AbstractVector, λ::Number; group_size::Integer=1, max_iter::Integer=100)</code>
Compute <code>max_iter</code> iterations of the algorithm described by
<a href="https://doi.org/10.1109/ICASSP.2013.6638755" rel="nofollow">Selesnick and Chen (2013) Total variation denoising with overlapping group sparsity</a>.</li>
<li>
<code>fourier_pade(u, degree_num, degree_den, num_output=length(u))</code>
Compute the Fourier-Padé reconstruction of <code>u</code> with degrees
<code>(degree_num, degree_den)</code> and evaluate it at <code>num_output</code>
equispaced points,
cf. <a href="https://doi.org/10.1023/A:1016648530648" rel="nofollow">Driscoll and Fornberg (2001) A Padé-based algorithm for overcoming the Gibbs phenomenon</a>.</li>
</ul>
</article></div>