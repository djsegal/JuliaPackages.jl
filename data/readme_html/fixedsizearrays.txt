<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fixedsizearrays" class="anchor" aria-hidden="true" href="#fixedsizearrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FixedSizeArrays</h1>
<p><a href="https://gitter.im/SimonDanisch/FixedSizeArrays.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/SimonDanisch/FixedSizeArrays.jl" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/SimonDanisch/FixedSizeArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c14e19ea35b821a83696e4ead53d31f0957f3220e777e9f57f74ab6546d951c/68747470733a2f2f7472617669732d63692e6f72672f53696d6f6e44616e697363682f466978656453697a654172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SimonDanisch/FixedSizeArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/SimonDanisch/FixedSizeArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7719c0bf805a35aabffd8e1aed2ef547dbf455966273161ed5b63b20dd8f42ca/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f53696d6f6e44616e697363682f466978656453697a654172726179732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/SimonDanisch/FixedSizeArrays.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/SimonDanisch/FixedSizeArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/67589d328a2d90f44bb53f3fa3debdca406404a27b868f4680522a3c21a3eb50/687474703a2f2f636f6465636f762e696f2f6769746875622f53696d6f6e44616e697363682f466978656453697a654172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SimonDanisch/FixedSizeArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/SimonDanisch/fixedsizearrays-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e2148e5a986580afeab4b82d280438bb08736c8786a9d90f253ea0206f8f75fd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6b366271793168346a6b3332326367362f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/k6bqy1h4jk322cg6/branch/master?svg=true" style="max-width:100%;"></a></p>
<h4><a id="user-content-this-package-doesnt-support-03-and-its-not-planned-to-update-it-to-06-use-staticarrays-instead" class="anchor" aria-hidden="true" href="#this-package-doesnt-support-03-and-its-not-planned-to-update-it-to-06-use-staticarrays-instead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This package doesn't support 0.3 and it's not planned to update it to 0.6. Use <a href="https://github.com/JuliaArrays/StaticArrays.jl/pull/138">StaticArrays</a> instead.</h4>
<h4><a id="user-content-packages-that-use-fixedsizearrays" class="anchor" aria-hidden="true" href="#packages-that-use-fixedsizearrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Packages that use FixedSizeArrays:</h4>
<p><a href="https://github.com/JuliaGeometry/GeometryTypes.jl">GeometryTypes.jl</a></p>
<h4><a id="user-content-usage-and-advantages" class="anchor" aria-hidden="true" href="#usage-and-advantages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage and advantages:</h4>
<p>FixedSizeArrays is giving any composite type array like behavior by inheriting from FixedSizeArrays.
So you can do something like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="immutable RGB{T} &lt;: FixedVectorNoTuple{3, T}
    r::T
    g::T
    b::T
end
immutable Vec{N, T} &lt;: FixedVector{N, T} # defined in FixedSizeArrays already
    _::NTuple{N, T}
end
Vec{3, Float32}(77) # constructor with 1 argument already defined
rand(Vec{3, Float64})+sin(Vec(0.,2.,2.)) # a lot of array functions are already defined
#There is also a matrix type
eye(Mat{3,3,Float32}) * rand(Vec{3, Float32}) # will also &quot;just work&quot;
a = Vec(1,2,3)[1:2] # returns (1,2)
"><pre>immutable RGB{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">FixedVectorNoTuple{3, T}</span>
    r<span class="pl-k">::</span><span class="pl-c1">T</span>
    g<span class="pl-k">::</span><span class="pl-c1">T</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>
immutable Vec{N, T} <span class="pl-k">&lt;:</span> <span class="pl-c1">FixedVector{N, T}</span> <span class="pl-c"><span class="pl-c">#</span> defined in FixedSizeArrays already</span>
    _<span class="pl-k">::</span><span class="pl-c1">NTuple{N, T}</span>
<span class="pl-k">end</span>
<span class="pl-c1">Vec</span><span class="pl-c1">{3, Float32}</span>(<span class="pl-c1">77</span>) <span class="pl-c"><span class="pl-c">#</span> constructor with 1 argument already defined</span>
<span class="pl-c1">rand</span>(Vec{<span class="pl-c1">3</span>, Float64})<span class="pl-k">+</span><span class="pl-c1">sin</span>(<span class="pl-c1">Vec</span>(<span class="pl-c1">0.</span>,<span class="pl-c1">2.</span>,<span class="pl-c1">2.</span>)) <span class="pl-c"><span class="pl-c">#</span> a lot of array functions are already defined</span>
<span class="pl-c"><span class="pl-c">#</span>There is also a matrix type</span>
<span class="pl-c1">eye</span>(Mat{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,Float32}) <span class="pl-k">*</span> <span class="pl-c1">rand</span>(Vec{<span class="pl-c1">3</span>, Float32}) <span class="pl-c"><span class="pl-c">#</span> will also "just work"</span>
a <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> returns (1,2)</span></pre></div>
<p>Note that all of the above types are stack allocated and the speed of operations should be very fast!
If you find operations to be slow, please file a bug report!</p>
<p>FixedSizeArrays can be used in a lot of different ways.
You can define color types the same way, and arbitrary other point types like normals, vertices etc.
As they all inherit from FixedSizeArray, it's very easy to handle them in the same way.</p>
<p>For some more advantages, you can take a look at <a href="https://github.com/JuliaIO/MeshIO.jl">MeshIO</a>.</p>
<p>Because it's so easy to define different types like Point3, RGB, HSV or Normal3, one can create customized code for these types via multiple dispatch. This is great for visualizing data, as you can offer default visualizations based on the type.
Without FixedSizeArrays, this would end up in a lot of types which would all need to define the same functions over and over again.</p>
<h4><a id="user-content-fixedarray-abstract-types" class="anchor" aria-hidden="true" href="#fixedarray-abstract-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FixedArray abstract types</h4>
<p>The package provides several abstract types:</p>
<ul>
<li><code>FixedArray{T,NDim,SIZE}</code> is the abstract base type for all fixed
arrays.  <code>T</code> and <code>NDim</code> mirror the eltype and number of dimension type
parameters in <code>AbstractArray</code>.  In addition there's a <code>SIZE</code> Tuple which
defines the extent of each fixed dimension as an integer.</li>
</ul>
<p>There's some convenient type aliases:</p>
<ul>
<li><code>FixedVector{N,T}</code> is a convenient type alias for a one dimensional fixed
vector of length <code>N</code> and eltype <code>T</code>.</li>
<li><code>FixedMatrix{N,M,T}</code> is a convenient type alias for a two dimensional fixed
matrix of size <code>(N,M)</code> and eltype <code>T</code>.</li>
</ul>
<p>Finally there's an abstract type <code>FixedVectorNoTuple{N, T}</code> for use when you'd
like to name the fields of a <code>FixedVector</code> explicitly rather than accessing them
via an index.</p>
<h4><a id="user-content-fixedarray-concrete-types" class="anchor" aria-hidden="true" href="#fixedarray-concrete-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FixedArray concrete types</h4>
<p>The package currently provides three concrete FixedArray types</p>
<ul>
<li><code>Vec{N,T}</code> is a length <code>N</code> vector of eltype <code>T</code>.</li>
<li><code>Mat{N,M,T}</code> is an <code>N×M</code> matrix of eltype <code>T</code></li>
</ul>
<p>These two types are intended to behave the same as <code>Base.Vector</code> and
<code>Base.Matrix</code>, but with fixed size.  That is, the interface is a convenient
union of elementwise array-like functionality and vector space / linear algebra
operations.  Hopefully we'll have more general higher dimensional fixed size
containers in the future (note that the total number of elements of a higher
dimensional container quickly grows beyond the size where having a fixed stack
allocated container really makes sense).</p>
<ul>
<li><code>Point{N,T}</code> is a position type which is structurally identical to <code>Vec{N,T}</code>.</li>
</ul>
<p>Semantically <code>Point{N,T}</code> should be used to represent position in an
<code>N</code>-dimensional Cartesian space.  The distinction between this and <code>Vec</code> is
particularly relevant when overloading functions which deal with geometric data.
For instance, a geometric transformation applies differently depending on
whether you're transforming a <em>position</em> (<code>Point</code>) versus a <em>direction</em> (<code>Vec</code>).</p>
<h4><a id="user-content-user-supplied-functions-for-fixedarray-subtypes" class="anchor" aria-hidden="true" href="#user-supplied-functions-for-fixedarray-subtypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User-supplied functions for FixedArray subtypes</h4>
<p>Most array functionality comes for free when inheriting from one of the abstract
types <code>FixedArray</code>, <code>FixedVector</code>, <code>FixedMatrix</code>, or <code>FixedVectorNoTuple</code>.
However, the user may want to overload a few things.  At the moment,
<code>similar_type</code> is the main function you may want to customize.  The signature is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="similar_type{FSA&lt;:FixedArray, T, NDim}(::Type{FSA}, ::Type{T}, sz::NTuple{NDim,Int})
"><pre><span class="pl-c1">similar_type</span><span class="pl-c1">{FSA&lt;:FixedArray, T, NDim}</span>(<span class="pl-k">::</span><span class="pl-c1">Type{FSA}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{T}</span>, sz<span class="pl-k">::</span><span class="pl-c1">NTuple{NDim,Int}</span>)</pre></div>
<p>This is quite similar to <code>Base.similar</code> but the first argument is a type rather
than a value.  Given a custom FixedArray type, eltype and size, this function
should return a similar output type which will be used to store the results of
elementwise operations, general <code>map()</code> invocations, etc.</p>
<p>By default, <code>similar_type</code> introspects <code>FSA</code> to determine whether it can be
reparameterized by both <code>eltype(FSA) == T</code> and <code>size(FSA) == sz</code>.  If not, the
canonical concrete FixedArray type (a <code>Vec</code> or <code>Mat</code>) are returned by calling
the fallback <code>similar_type(FixedArray, T, sz)</code>.  Sometimes this may not make
sense for your custom FixedArray subtype.</p>
<p>For example, suppose you define the type <code>RGB{T}</code> as above, and you'd prefer
relational operators to return a <code>Vec{3,Bool}</code> as a mask rather than an
<code>RGB{Bool}</code>.  In this case you could write something like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function FixedSizeArrays.similar_type{FSA&lt;:RGB,T}(::Type{FSA}, ::Type{T}, n::Tuple{Int})
    n == (3,) &amp;&amp; T != Bool ? RGB{T} : similar_type(FixedArray, T, n)
end
"><pre><span class="pl-k">function</span> FixedSizeArrays<span class="pl-k">.</span><span class="pl-en">similar_type</span><span class="pl-c1">{FSA&lt;:RGB,T}</span>(<span class="pl-k">::</span><span class="pl-c1">Type{FSA}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{T}</span>, n<span class="pl-k">::</span><span class="pl-c1">Tuple{Int}</span>)
    n <span class="pl-k">==</span> (<span class="pl-c1">3</span>,) <span class="pl-k">&amp;&amp;</span> T <span class="pl-k">!=</span> Bool <span class="pl-k">?</span> RGB{T} <span class="pl-k">:</span> <span class="pl-c1">similar_type</span>(FixedArray, T, n)
<span class="pl-k">end</span></pre></div>
<p>We then have <code>RGB(1,2,3) .&lt; RGB(2,2,2) === Vec{3,Bool}(true,false,false)</code>.</p>
<p>Note that <code>similar_type</code> isn't type stable in julia-0.4.  For the internal
use in <code>FixedSizeArrays</code> (type deduction inside <code>@generated</code> functions) this
isn't a problem, but you may want to annotate your custom overlads with
<code>Base.@pure</code> if you're using julia-0.5 and you want to use <code>similar_type</code> in a
normal function.</p>
<h4><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Roadmap</h4>
<ul>
<li>improve coverage</li>
<li>incorperate <a href="https://github.com/StephenVavasis/Modifyfield.jl">https://github.com/StephenVavasis/Modifyfield.jl</a></li>
<li>improve API and consistency</li>
</ul>
<h4><a id="user-content-todos" class="anchor" aria-hidden="true" href="#todos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO's</h4>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Core Array
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> basic array interface</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Inherit from DenseArray (a lot of warnings is caused by this)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> use tuples as a basis</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Indexing:
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> multidimensional access</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> colon access for matrices</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> multidimensional colon access</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> setindex!</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> setindex!/getindex for arrays of FSA (e.g. easy acces to single fields)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> access slices e.g. Matrix{RGBA} -&gt; Matrix{Red} (sort of)</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Constructor
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> generic constructor for arbitrary Nvectors</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> fast constructor for arbitrary types</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> parsing constructor e.g Vec{3, Float32}(["23.", "23.", "0.23"])</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> different constructors for ease of use (zero, eye, from other FSAs, etc...) (could be more)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> clean up constructor code (very messy since its hard to write constructors for abstract types)</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Functions
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> all kinds of unary/binary operators</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> matrix multiplication</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> matrix functions (inv, transpose, etc...) (could be more)</li>
</ul>
</li>
</ul>
<h4><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h4>
<p><a href="https://github.com/twadleigh/ImmutableArrays.jl">ImmutableArrays</a> by <a href="https://github.com/twadleigh">twadleigh</a> was the package that got me going and gave the initial inspirations.
There has been quite a few discussions on <a href="https://github.com/JuliaLang/julia/pull/7568">JuliaLang/julia#7568</a> shaping the implementation.
Also, <a href="https://github.com/aaalexandrov">aaalexandrov</a> supplied some code and inspirations.
Big thanks to all the other <a href="https://github.com/SimonDanisch/FixedSizeArrays.jl/graphs/contributors">contributors</a> !</p>
</article></div>