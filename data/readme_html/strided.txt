<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-stridedjl" class="anchor" aria-hidden="true" href="#stridedjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Strided.jl</h1>
<p><a href="https://travis-ci.org/Jutho/Strided.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a8f515fa0ab314ac903cae7d367df262498b3383/68747470733a2f2f7472617669732d63692e6f72672f4a7574686f2f537472696465642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Jutho/Strided.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Jutho/Strided.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0df8fa2539c85cd7d59369ad78dca2936d3a143e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a7574686f2f537472696465642e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/Jutho/Strided.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/Jutho/Strided.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cdf94dd02f947d4636ee6dd3f6bbff5cda3d5d43/687474703a2f2f636f6465636f762e696f2f6769746875622f4a7574686f2f537472696465642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/Jutho/Strided.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Julia package for working more efficiently with strided arrays, i.e. dense arrays
whose memory layout has a fixed stride along every dimension. Strided.jl does not
make any assumptions about the strides (such as stride 1 along first dimension, or
monotonously increasing strides) and provides multithreaded and cache friendly
implementations for mapping, reducing, broadcasting such arrays, as well as taking
views, reshaping and permuting dimensions.</p>
<hr>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<p>Running Julia with a single thread</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Strided

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4000</span>,<span class="pl-c1">4000</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> (<span class="pl-k">$</span>A <span class="pl-k">.+</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>;
  <span class="pl-c1">145.214</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> (<span class="pl-k">$</span>A <span class="pl-k">.+</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>;
  <span class="pl-c1">56.189</span> ms (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">352</span> bytes)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">3</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>;
  <span class="pl-c1">2.449</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">3</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>;
  <span class="pl-c1">1.459</span> ms (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">288</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-c1">exp</span>.( <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A) <span class="pl-k">.+</span> <span class="pl-c1">sin</span>.( <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-k">$</span>A);
  <span class="pl-c1">22.493</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-c1">exp</span>.( <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A) <span class="pl-k">.+</span> <span class="pl-c1">sin</span>.( <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-k">$</span>A);
  <span class="pl-c1">22.240</span> ms (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">480</span> bytes)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">32</span>,<span class="pl-c1">32</span>,<span class="pl-c1">32</span>,<span class="pl-c1">32</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">permutedims!</span>(<span class="pl-k">$</span>B, <span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));
  <span class="pl-c1">5.203</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">128</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-c1">permutedims!</span>(<span class="pl-k">$</span>B, <span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));
  <span class="pl-c1">2.201</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">320</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>));
  <span class="pl-c1">21.863</span> ms (<span class="pl-c1">32</span> allocations<span class="pl-k">:</span> <span class="pl-c1">32.00</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>));
  <span class="pl-c1">8.495</span> ms (<span class="pl-c1">9</span> allocations<span class="pl-k">:</span> <span class="pl-c1">640</span> bytes)</pre></div>
<p>And now with <code>export JULIA_NUM_THREADS = 4</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Strided

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4000</span>,<span class="pl-c1">4000</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> (<span class="pl-k">$</span>A <span class="pl-k">.+</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>;
  <span class="pl-c1">146.618</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> (<span class="pl-k">$</span>A <span class="pl-k">.+</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>;
  <span class="pl-c1">30.355</span> ms (<span class="pl-c1">12</span> allocations<span class="pl-k">:</span> <span class="pl-c1">912</span> bytes)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">3</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>;
  <span class="pl-c1">2.030</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">3</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A<span class="pl-k">'</span>;
  <span class="pl-c1">808.874</span> μs (<span class="pl-c1">11</span> allocations<span class="pl-k">:</span> <span class="pl-c1">784</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-c1">exp</span>.( <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A) <span class="pl-k">.+</span> <span class="pl-c1">sin</span>.( <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-k">$</span>A);
  <span class="pl-c1">21.971</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-c1">exp</span>.( <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-k">$</span>A) <span class="pl-k">.+</span> <span class="pl-c1">sin</span>.( <span class="pl-k">$</span>A <span class="pl-k">.*</span> <span class="pl-k">$</span>A);
  <span class="pl-c1">5.811</span> ms (<span class="pl-c1">16</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.05</span> KiB)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">32</span>,<span class="pl-c1">32</span>,<span class="pl-c1">32</span>,<span class="pl-c1">32</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">permutedims!</span>(<span class="pl-k">$</span>B, <span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));
  <span class="pl-c1">5.334</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">128</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-c1">permutedims!</span>(<span class="pl-k">$</span>B, <span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));
  <span class="pl-c1">1.192</span> ms (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">928</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>));
  <span class="pl-c1">22.465</span> ms (<span class="pl-c1">32</span> allocations<span class="pl-k">:</span> <span class="pl-c1">32.00</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@strided</span> <span class="pl-k">$</span>B <span class="pl-k">.=</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-k">.+</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>));
  <span class="pl-c1">2.796</span> ms (<span class="pl-c1">15</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.44</span> KiB)</pre></div>
<h1><a id="user-content-design-principles" class="anchor" aria-hidden="true" href="#design-principles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Design principles</h1>
<h2><a id="user-content-stridedview" class="anchor" aria-hidden="true" href="#stridedview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>StridedView</code></h2>
<p>Strided.jl is centered around the type <code>StridedView</code>, which provides a view into a parent
array of type <code>DenseArray</code> such that the resulting view is strided, i.e. any dimension
has an associated stride, such that e.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">getindex</span>(A, i₁, i₂, i₃, <span class="pl-k">...</span>) <span class="pl-k">=</span> A<span class="pl-k">.</span><span class="pl-c1">op</span>(A<span class="pl-k">.</span>parent[offset <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> (i₁<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>s₁ <span class="pl-k">+</span> (i₂<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>s₂ <span class="pl-k">+</span> (i₃<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>s₃ <span class="pl-k">+</span> <span class="pl-k">...</span>])</pre></div>
<p>with <code>sⱼ = stride(A, iⱼ)</code>. There are no further assumptions on the strides, e.g. they are
not assumed to be monotonously increasing or have <code>s₁ == 1</code>. Furthermore, <code>A.op</code> can be
any of the operations <code>identity</code>, <code>conj</code>, <code>transpose</code> or <code>adjoint</code> (the latter two are
equivalent to the former two if <code>eltype(A) &lt;: Number</code>). Since these operations are their own
inverse, they are also used in the corresponding <code>setindex!</code>.</p>
<p>This definition enables a <code>StridedView</code> to be lazy (i.e. returns just another <code>StridedView</code> over
the same parent data) under application of <code>conj</code>, <code>transpose</code>, <code>adjoint</code>, <code>permutedims</code> and
indexing (<code>getindex</code>) with <code>Union{Integer, Colon, AbstractRange{&lt;:Integer}}</code> (a.k.a slicing).</p>
<p>Furthermore, the strided structure can be retained under certain <code>reshape</code> operations, but not
all of them. Any dimension can always be split into smaller dimensions, but two subsequent
dimensions <code>i</code> and <code>i+1</code> can only be joined if <code>stride(A,i+1) == size(A,i)*stride(A,i)</code>. Instead
of overloading <code>reshape</code>, Strided.jl provides a separate function <code>sreshape</code> which returns a
<code>StridedView</code> over the same parent data, or throws a runtime error if this is impossible.</p>
<h2><a id="user-content-broadcasting-and-mapreduce" class="anchor" aria-hidden="true" href="#broadcasting-and-mapreduce"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Broadcasting and <code>map(reduce)</code></h2>
<p>Whenever an expression only contains <code>StridedView</code>s and non-array objects (scalars),
overloaded methods for broadcasting and functions as <code>map(!)</code> and <code>mapreduce</code> are used
that exploit the known strided structure in order to evaluate the result in a more
efficient way, at least for sufficiently large arrays where the overhead of the extra preparatory
work is negligible. In particular, this involves choosing a blocking strategy and loop order
that aims to avoid cache misses. This matters in particular if some of the <code>StridedView</code>s
involved have strides which are not monotonously increasing, e.g. if <code>transpose</code>, <code>adjoint</code> or
<code>permutedims</code> has been applied. The fact that the latter also acts lazily (whereas it creates
a copy of the data in Julia base) can potentially provide a further speedup.</p>
<p>Furthermore, these optimized methods are implemented with support for multithreading. Thus,
if <code>Threads.nthreads() &gt; 1</code> and the arrays involved are sufficiently large, performance can be
boosted even for plain arrays with a strictly sequential memory layout, provided that the
broadcast operation is compute bound and not memory bound (i.e. the broadcast function is
sufficienlty complex).</p>
<h2><a id="user-content-the-strided-macro-annotation" class="anchor" aria-hidden="true" href="#the-strided-macro-annotation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>@strided</code> macro annotation</h2>
<p>Rather than manually wrapping every array in a <code>StridedView</code>, there is the macro annotation
<code>@strided some_expression</code>, which will wrap all <code>DenseArray</code>s appearing in <code>some_expression</code> in
a <code>StridedView</code>. Note that, because <code>StridedView</code>s behave lazily under indexing with ranges,
this acts similar to the <code>@views</code> macro in Julia Base, i.e. there is no need to use a view.</p>
<p>The macro <code>@strided</code> acts as a contract, i.e. the user ensures that all array manipulations in
the following expressions will preserve the strided structure. Therefore, <code>reshape</code> and <code>view</code>
are are replaced by <code>sreshape</code> and <code>sview</code> respectively. As mentioned above, <code>sreshape</code> will
throw an error if the requested new shape is incompatible with preserving the strided structure.
The function <code>sview</code> is only defined for index arguments which are ranges, <code>Int</code>s or <code>Colon</code> (<code>:</code>),
and will thus also throw an error if indexed by anything else.</p>
<h2><a id="user-content-stridedview-versus-stridedarray-and-blaslapack-compatibility" class="anchor" aria-hidden="true" href="#stridedview-versus-stridedarray-and-blaslapack-compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>StridedView</code> versus <code>StridedArray</code> and BLAS/LAPACK compatibility</h2>
<p><code>StridedArray</code> is a union type to denote arrays with a strided structure in Julia Base. Because
of its definition as a type union rather than an abstract type, it is impossible to have user
types be recognized as <code>StridedArray</code>. This is rather unfortunate, since dispatching to BLAS
and LAPACK routines is based on <code>StridedArray</code>. As a consequence, <code>StridedView</code> will not fall
back to BLAS or LAPACK by default. Currently, only matrix multiplication is overloaded so as
to fall back to BLAS (i.e. <code>gemm!</code>) if possible. In general, one should not attempt use e.g.
matrix factorizations or other lapack operations within the <code>@strided</code> context. Support for
this is on the TODO list. Some BLAS inspired methods (<code>axpy!</code>, <code>axpby!</code>, scalar multiplication
via <code>mul!</code>, <code>rmul!</code> or <code>lmul!</code>) are however overloaded by relying on the optimized yet generic
<code>map!</code> implementation.</p>
<p><code>StridedView</code>s can currently only be created with certainty from <code>DenseArray</code> (typically just
<code>Array</code> in Julia Base). For <code>Base.SubArray</code> or <code>Base.ReshapedArray</code> instances, the <code>StridedView</code>
constructor will first act on the underlying parent array, and then try to mimic the corresponding
view or reshape operation using <code>sview</code> and <code>sreshape</code>. These, however, are more limited then
their Base counterparts (because they need to guarantee that the result still has a strided
memory layout with respect to the new dimensions), so an error can result. However, this approach
can also succeed in creating <code>StridedView</code> wrappers around combinations of <code>view</code> and <code>reshape</code>
that are not recognised as <code>Base.StridedArray</code>. For example, <code>reshape(view(randn(40,40), 1:36, 1:20), (6,6,5,4))</code>
is not a <code>Base.StridedArrray</code>, and indeed, it cannot statically be inferred to be strided, from
only knowing the argument types provided to <code>view</code> and <code>reshape</code>. For example, the similarly looking
<code>reshape(view(randn(40,40), 1:36, 1:20), (6,3,10,4))</code> is not strided. The <code>StridedView</code> constructor
will try to act on both, and yield a runtime error in the second case. Note that <code>Base.ReinterpretArray</code>
is currently not supported.</p>
<p>Note again that, unlike <code>StridedArray</code>s, <code>StridedView</code>s behave lazily (i.e. still produce a view
on the same parent array) under <code>permutedims</code> and regular indexing with ranges.</p>
<h2><a id="user-content-unsafestridedview-and-unsafe_strided" class="anchor" aria-hidden="true" href="#unsafestridedview-and-unsafe_strided"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>UnsafeStridedView</code> and <code>@unsafe_strided</code></h2>
<p>Based on the work of <a href="https://github.com/oschulz/UnsafeArrays.jl">UnsafeArrays.jl</a> there is
also an <code>UnsafeStridedView</code>, which references the parent array via a pointer, and therefore
is itself a stack allocated <code>struct</code> (i.e. <code>isbitstype(UnsafeStridedView{...})</code> is true).</p>
<p>It behaves in all respects the same as <code>StridedView</code> (they are both subtypes of <code>AbstractStridedView</code>),
except that by itself it does not keep a reference to the parent array in a way that is visible
to Julia's garbage collector. It can therefore not be the return value of an operation (in
particular <code>similar(::UnsafeStridedView, ...) -&gt; ::StridedView</code>) and an explicit reference to
the parent array needs to be kept alive. Furthermore, <code>UnsafeStridedView</code> wrappers can only
be created of <code>AbstractArray{T}</code> instances with <code>isbitstype(T)</code>.</p>
<p>There is a corresponding <code>@unsafe_strided</code> macro annotation. However, in this case the arrays
in the expression need to be identified explicitly as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@unsafe_strided</span> A₁ A₂ <span class="pl-k">...</span> some_expression</pre></div>
<p>because this will be translated into the expression</p>
<div class="highlight highlight-source-julia"><pre>GC<span class="pl-k">.</span><span class="pl-c1">@preserve</span> A₁ A₂ <span class="pl-k">...</span> <span class="pl-k">let</span> A₁ <span class="pl-k">=</span> <span class="pl-c1">UnsafeStridedView</span>(A₁), A₂ <span class="pl-k">=</span> <span class="pl-k">...</span>
    some_expression
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-planned-features--wish-list" class="anchor" aria-hidden="true" href="#planned-features--wish-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Planned features / wish list</h1>
<ul>
<li>Support for <code>GPUArray</code>s with dedicated GPU kernels?</li>
</ul>
</article></div>