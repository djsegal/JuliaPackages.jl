<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-einsumjl" class="anchor" aria-hidden="true" href="#einsumjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Einsum.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Package Build</strong></th>
<th align="center"><strong>Package Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/ahwillia/Einsum.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/96b3dd0d8d19dd22ed076d4b1da7435283c8d292c5540ef2f8587a15638cd742/68747470733a2f2f7472617669732d63692e6f72672f616877696c6c69612f45696e73756d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ahwillia/Einsum.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="http://pkg.julialang.org/?pkg=Einsum" rel="nofollow"><img src="https://camo.githubusercontent.com/41e0ffd40c01a82f0a4d3b68af1a7eed4ef9d7f43bb80c10f62c8c0b4e479c8f/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f45696e73756d5f302e362e737667" alt="Einsum" data-canonical-src="http://pkg.julialang.org/badges/Einsum_0.6.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://www.repostatus.org/#inactive" rel="nofollow"><img src="https://camo.githubusercontent.com/2739f21502225d22cb616b31de48bf74b7ab2090ae6f29d8c4c7cc2fa4da0bc7/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f696e6163746976652e737667" alt="Project Status: Inactive - The project has reached a stable, usable state but is no longer being actively developed; support/maintenance will be provided as time allows." data-canonical-src="http://www.repostatus.org/badges/latest/inactive.svg" style="max-width: 100%;"></a> - help wanted!</td>
</tr>
</tbody>
</table>
<p dir="auto">This package exports a single macro <code>@einsum</code>, which implements <em>similar</em> notation to the <a href="https://en.wikipedia.org/wiki/Einstein_notation" rel="nofollow">Einstein
summation convention</a> to flexibly specify
operations on Julia <code>Array</code>s, similar to numpy's
<a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.einsum.html" rel="nofollow"><code>einsum</code></a> function
(but more flexible!).</p>
<p dir="auto">For example, basic matrix multiplication can be implemented as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@einsum A[i, j] := B[i, k] * C[k, j]"><pre><span class="pl-c1">@einsum</span> A[i, j] <span class="pl-k">:=</span> B[i, k] <span class="pl-k">*</span> C[k, j]</pre></div>
<p dir="auto">To install: <code>Pkg.add("Einsum")</code>, or else <code>pkg&gt; add Einsum</code> after pressing <code>]</code> on Julia 0.7 and later.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<h3 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics</h3>
<p dir="auto">If the destination array is preallocated, then use <code>=</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = ones(5, 6, 7) # preallocated space
X = randn(5, 2)
Y = randn(6, 2)
Z = randn(7, 2)

# Store the result in A, overwriting as necessary:
@einsum A[i, j, k] = X[i, r] * Y[j, r] * Z[k, r]"><pre>A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>) <span class="pl-c"><span class="pl-c">#</span> preallocated space</span>
X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
Y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">6</span>, <span class="pl-c1">2</span>)
Z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">7</span>, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Store the result in A, overwriting as necessary:</span>
<span class="pl-c1">@einsum</span> A[i, j, k] <span class="pl-k">=</span> X[i, r] <span class="pl-k">*</span> Y[j, r] <span class="pl-k">*</span> Z[k, r]</pre></div>
<p dir="auto">If destination is not preallocated, then use <code>:=</code> to automatically create a new array for the result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="X = randn(5, 2)
Y = randn(6, 2)
Z = randn(7, 2)

# Create new array B with appropriate dimensions:
@einsum B[i, j, k] := X[i, r] * Y[j, r] * Z[k, r]"><pre>X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
Y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">6</span>, <span class="pl-c1">2</span>)
Z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">7</span>, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Create new array B with appropriate dimensions:</span>
<span class="pl-c1">@einsum</span> B[i, j, k] <span class="pl-k">:=</span> X[i, r] <span class="pl-k">*</span> Y[j, r] <span class="pl-k">*</span> Z[k, r]</pre></div>
<h3 dir="auto"><a id="user-content-what-happens-under-the-hood" class="anchor" aria-hidden="true" href="#what-happens-under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What happens under the hood</h3>
<p dir="auto">To execute an expression, <code>@einsum</code> uses <a href="http://docs.julialang.org/en/stable/manual/metaprogramming/" rel="nofollow">Julia's metaprogramming
capabilities</a> to generate and execute a
series of nested for loops.  To see exactly what is generated, use
<a href="https://docs.julialang.org/en/stable/stdlib/base/#Base.@macroexpand" rel="nofollow"><code>@macroexpand</code></a> (or <code>@expand</code>
from <a href="https://github.com/MikeInnes/MacroTools.jl">MacroTools.jl</a>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@macroexpand @einsum A[i, j] := B[i, k] * C[k, j]"><pre><span class="pl-c1">@macroexpand</span> <span class="pl-c1">@einsum</span> A[i, j] <span class="pl-k">:=</span> B[i, k] <span class="pl-k">*</span> C[k, j]</pre></div>
<p dir="auto">The output will look much like the following (note that we "sum out" over the index <code>k</code>, since it
only occurs multiple times on the right hand side of the equation):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# determine type
T = promote_type(eltype(B), eltype(C))

# allocate new array
A = Array{T}(undef, size(B))

# check dimensions
@assert size(B, 2) == size(C, 2)

# main loop
@inbounds begin # skip bounds-checking for speed
    for i = 1:size(B, 1), j = 1:size(C, 2)
        s = zero(T)
        for k = 1:size(B,2)
            s += B[i, k] * C[k, j]
        end
        A[i, j] = s
    end
end"><pre><span class="pl-c"><span class="pl-c">#</span> determine type</span>
T <span class="pl-k">=</span> <span class="pl-c1">promote_type</span>(<span class="pl-c1">eltype</span>(B), <span class="pl-c1">eltype</span>(C))

<span class="pl-c"><span class="pl-c">#</span> allocate new array</span>
A <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{T}</span>(undef, <span class="pl-c1">size</span>(B))

<span class="pl-c"><span class="pl-c">#</span> check dimensions</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(B, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">size</span>(C, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> main loop</span>
<span class="pl-c1">@inbounds</span> <span class="pl-k">begin</span> <span class="pl-c"><span class="pl-c">#</span> skip bounds-checking for speed</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(B, <span class="pl-c1">1</span>), j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(C, <span class="pl-c1">2</span>)
        s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(T)
        <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(B,<span class="pl-c1">2</span>)
            s <span class="pl-k">+=</span> B[i, k] <span class="pl-k">*</span> C[k, j]
        <span class="pl-k">end</span>
        A[i, j] <span class="pl-k">=</span> s
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The actual generated code is a bit more verbose (and not neatly commented/formatted), and will take
care to use the right types and keep hygienic.</p>
<p dir="auto">You can also use updating assignment operators for preallocated arrays.  E.g., <code>@einsum A[i, j, k] *= X[i, r] * Y[j, r] * Z[k, r]</code> will produce something like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for k = 1:size(A, 3)
    for j = 1:size(A, 2)
        for i = 1:size(A, 1)
            s = 0.0
            for r = 1:size(X, 2)
                s += X[i, r] * Y[j, r] * Z[k, r]
            end
            # Difference: here, the updating form is used:
            A[i, j, k] *= s
        end
    end
end"><pre><span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A, <span class="pl-c1">3</span>)
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>)
        <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A, <span class="pl-c1">1</span>)
            s <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
            <span class="pl-k">for</span> r <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(X, <span class="pl-c1">2</span>)
                s <span class="pl-k">+=</span> X[i, r] <span class="pl-k">*</span> Y[j, r] <span class="pl-k">*</span> Z[k, r]
            <span class="pl-k">end</span>
            <span class="pl-c"><span class="pl-c">#</span> Difference: here, the updating form is used:</span>
            A[i, j, k] <span class="pl-k">*=</span> s
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-rules-for-indexing-variables" class="anchor" aria-hidden="true" href="#rules-for-indexing-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rules for indexing variables</h3>
<ul dir="auto">
<li>Indices that show up on the right-hand-side but not the left-hand-side are summed over</li>
<li>Arrays which share an index must be of the same size, in those dimensions</li>
</ul>
<p dir="auto"><code>@einsum</code> iterates over the extent of the right-hand-side indices. For example, the following code
allocates an array <code>A</code> that is the same size as <code>B</code> and copies its data into <code>A</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@einsum A[i,  j] := B[i, j]  # same as A = copy(B)"><pre><span class="pl-c1">@einsum</span> A[i,  j] <span class="pl-k">:=</span> B[i, j]  <span class="pl-c"><span class="pl-c">#</span> same as A = copy(B)</span></pre></div>
<p dir="auto">If an index appears on the right-hand-side, but does not appear on the left-hand-side, then this
variable is summed over. For example, the following code allocates <code>A</code> to be <code>size(B, 1)</code> and sums
over the rows of <code>B</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@einsum A[i] := B[i, j]  # same as A = dropdims(sum(B, dims=2), dims=2)"><pre><span class="pl-c1">@einsum</span> A[i] <span class="pl-k">:=</span> B[i, j]  <span class="pl-c"><span class="pl-c">#</span> same as A = dropdims(sum(B, dims=2), dims=2)</span></pre></div>
<p dir="auto">If an index variable appears multiple times on the right-hand-side, then it is asserted that the
sizes of these dimensions match. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@einsum A[i] := B[i, j] * C[j]"><pre><span class="pl-c1">@einsum</span> A[i] <span class="pl-k">:=</span> B[i, j] <span class="pl-k">*</span> C[j]</pre></div>
<p dir="auto">will check that the second dimension of <code>B</code> matches the first dimension of <code>C</code> in length. In
particular it is equivalent to the following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = zeros(size(B, 1))
@assert size(B, 2) == size(C, 1)

for i = 1:size(B, 1), j = 1:size(B, 2)
    A[i] += B[i, j] * C[j]
end"><pre>A <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">size</span>(B, <span class="pl-c1">1</span>))
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(B, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">size</span>(C, <span class="pl-c1">1</span>)

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(B, <span class="pl-c1">1</span>), j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(B, <span class="pl-c1">2</span>)
    A[i] <span class="pl-k">+=</span> B[i, j] <span class="pl-k">*</span> C[j]
<span class="pl-k">end</span></pre></div>
<p dir="auto">So an error will be thrown if the specified dimensions of <code>B</code> and <code>C</code> don't match.</p>
<h4 dir="auto"><a id="user-content-offset-indexing" class="anchor" aria-hidden="true" href="#offset-indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Offset indexing</h4>
<p dir="auto"><code>@einsum</code> also allows offsets on the right-hand-side, the range over which <code>i</code> is summed is then restricted:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@einsum A[i] = B[i - 5]"><pre><span class="pl-c1">@einsum</span> A[i] <span class="pl-k">=</span> B[i <span class="pl-k">-</span> <span class="pl-c1">5</span>]</pre></div>
<h3 dir="auto"><a id="user-content-vielsum" class="anchor" aria-hidden="true" href="#vielsum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@vielsum</code></h3>
<p dir="auto">This variant of <code>@einsum</code> will run multi-threaded on the outermost loop. For this to be fast, the code must not introduce temporaries like <code>s = 0</code> in the example above. Thus for example <code>@expand @vielsum A[i,j,k] = X[i,r]*Y[j,r]*Z[k,r]</code> results in something equivalent to <code>@expand</code>-ing the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Threads.@threads for k = 1:size(A,3)
    for j = 1:size(A,2)
        for i = 1:size(A,1)
            A[i,j,k] = 0.0
            for r = 1:size(X,2)
                A[i,j,k] += X[i,r] * Y[j,r] * Z[k,r]
            end
        end
    end
end"><pre>Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">3</span>)
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">2</span>)
        <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">1</span>)
            A[i,j,k] <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
            <span class="pl-k">for</span> r <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(X,<span class="pl-c1">2</span>)
                A[i,j,k] <span class="pl-k">+=</span> X[i,r] <span class="pl-k">*</span> Y[j,r] <span class="pl-k">*</span> Z[k,r]
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">For this to be useful, you will need to set an environment variable before starting Julia, such as <code>export JULIA_NUM_THREADS=4</code>. See <a href="https://docs.julialang.org/en/latest/manual/parallel-computing/#Multi-Threading-(Experimental)-1" rel="nofollow">the manual</a> for details, and note that this is somewhat experimental. This will not always be faster, especially for small arrays, as there is some overhead to dividing up the work.</p>
<p dir="auto">At present you cannot use updating assignment operators like <code>+=</code> with this macro (only <code>=</code> or <code>:=</code>) and you cannot assign to a scalar left-hand-side (only an array). These limitations prevent different threads from writing to the same memory at the same time.</p>
<h3 dir="auto"><a id="user-content-einsimd" class="anchor" aria-hidden="true" href="#einsimd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@einsimd</code></h3>
<p dir="auto">This is a variant of <code>@einsum</code> which will put <code>@simd</code> in front of the innermost loop, encouraging Julia's compiler vectorize this loop (although it may do so already). For example <code>@einsimd A[i,j,k] = X[i,r]*Y[j,r]*Z[k,r]</code> will result in approximately</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inbounds for k = 1:size(A,3)
    for j = 1:size(A,2)
        for i = 1:size(A,1)
            s = 0.0
            @simd for r = 1:size(X,2)
                s += X[i,r] * Y[j,r] * Z[k,r]
            end
            A[i,j,k] = s
        end
    end
end"><pre><span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">3</span>)
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">2</span>)
        <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A,<span class="pl-c1">1</span>)
            s <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
            <span class="pl-c1">@simd</span> <span class="pl-k">for</span> r <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(X,<span class="pl-c1">2</span>)
                s <span class="pl-k">+=</span> X[i,r] <span class="pl-k">*</span> Y[j,r] <span class="pl-k">*</span> Z[k,r]
            <span class="pl-k">end</span>
            A[i,j,k] <span class="pl-k">=</span> s
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Whether this is a good idea or not you have to decide and benchmark for yourself in every specific case.  <code>@simd</code> makes sense for certain kinds of operations; make yourself familiar with <a href="https://docs.julialang.org/en/latest/base/base/#Base.SimdLoop.@simd" rel="nofollow">its documentation</a> and the inner workings of it <a href="https://software.intel.com/en-us/articles/vectorization-in-julia" rel="nofollow">in general</a>.</p>
<h3 dir="auto"><a id="user-content-other-functionality" class="anchor" aria-hidden="true" href="#other-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other functionality</h3>
<p dir="auto">The <code>@einsum</code> macro can implement function calls within the nested for loop structure. For example, consider transposing a block matrix:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z = Any[rand(2,2) for i=1:2, j=1:2]
@einsum t[i,j] := transpose(z[j,i])"><pre>z <span class="pl-k">=</span> Any[<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]
<span class="pl-c1">@einsum</span> t[i,j] <span class="pl-k">:=</span> <span class="pl-c1">transpose</span>(z[j,i])</pre></div>
<p dir="auto">This produces a for loop structure with a <code>transpose</code> function call in the middle. Approximately:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for j = 1:size(z,1)
    for i = 1:size(z,2)
        t[i,j] = transpose(z[j,i])
    end
end"><pre><span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(z,<span class="pl-c1">1</span>)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(z,<span class="pl-c1">2</span>)
        t[i,j] <span class="pl-k">=</span> <span class="pl-c1">transpose</span>(z[j,i])
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This will work as long the function calls are outside the array names. Again, you can use <a href="https://docs.julialang.org/en/stable/stdlib/base/#Base.@macroexpand" rel="nofollow"><code>@macroexpand</code></a> to see the exact code that is generated.</p>
<p dir="auto">The output need not be an array. But note that on Julia 0.7 and 1.0, the rules for evaluating in global scope (for example at the REPL prompt) are a little different -- see <a href="https://github.com/stevengj/SoftGlobalScope.jl">this package</a> for instance (which is loaded in <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a> notebooks). To get the same behavior as you would have inside a function, you use a <code>let</code> block:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = rand(5); p .= p ./ sum(p)
let
    global S
    @einsum S := - p[i] * log(p[i])
end"><pre>p <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>); p <span class="pl-k">.=</span> p <span class="pl-k">./</span> <span class="pl-c1">sum</span>(p)
<span class="pl-k">let</span>
    <span class="pl-k">global</span> S
    <span class="pl-c1">@einsum</span> S <span class="pl-k">:=</span> <span class="pl-k">-</span> p[i] <span class="pl-k">*</span> <span class="pl-c1">log</span>(p[i])
<span class="pl-k">end</span></pre></div>
<p dir="auto">Or perhaps clearer, explicitly define a function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m(pq, p, q) = @einsum I := pq[i,j] * log(pq[i,j] / p[i] / q[j])

m(rand(5,10), rand(5), rand(10))"><pre><span class="pl-en">m</span>(pq, p, q) <span class="pl-k">=</span> <span class="pl-c1">@einsum</span> I <span class="pl-k">:=</span> pq[i,j] <span class="pl-k">*</span> <span class="pl-c1">log</span>(pq[i,j] <span class="pl-k">/</span> p[i] <span class="pl-k">/</span> q[j])

<span class="pl-c1">m</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">10</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>))</pre></div>
<h3 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages:</h3>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/Jutho/TensorOperations.jl">TensorOperations.jl</a> has less flexible syntax (only allowing strict Einstein convention contractions), but can produce much more efficient code.  Instead of generating “naive” loops, it transforms the expressions into optimized contraction functions and takes care to use a good (cache-friendly) order for the looping.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/shashi/ArrayMeta.jl">ArrayMeta.jl</a> aims to produce cache-friendly operations for more general loops (but is Julia 0.6 only).</p>
</li>
</ul>
</article></div>