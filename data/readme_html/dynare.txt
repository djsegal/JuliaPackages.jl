<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/DynareTeam/Dynare.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f3e563ad09a0b42500f21bded699a1b7a42c1a5ed6f2e8f392326e843a3ede9/68747470733a2f2f7472617669732d63692e6f72672f44796e6172655465616d2f44796e6172652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/DynareTeam/Dynare.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-dynare-for-julia" class="anchor" aria-hidden="true" href="#dynare-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dynare for Julia</h2>
<p>This package aims at bringing to Julia some of the functionality provided by
<a href="http://www.dynare.org" rel="nofollow">Dynare</a>, a platform for solving economic models and in
particular DSGE models.</p>
<p>Please note that this Julia package is very incomplete compared to the original
Dynare for MATLAB/Octave, but hopefully it will become more featureful over
time.</p>
<p>For the moment the package is only able to compute a modelâ€™s steady state,
first order decision rules and perfect foresight simulations.</p>
<p>The package is tested against Julia 0.5.x.</p>
<h2><a id="user-content-a-rational-expectations-example" class="anchor" aria-hidden="true" href="#a-rational-expectations-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A rational expectations example</h2>
<p>The following example is a translation of <code>example1.mod</code> that is shipped with
Dynare. It computes the steady state and first order decision rules.</p>
<p>Note that the syntax for the model block has been kept as close as possible to
the original format.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Dynare

# Create a model object
m =
@modfile begin
    @var y c k a h b
    @varexo e u
    @parameters beta rho alpha delta theta psi tau
    @model begin
        c*theta*h^(1+psi) = (1-alpha)*y
        k = beta*(((exp(b)*c)/(exp(b(+1))*c(+1)))*(exp(b(+1))*alpha*y(+1)+(1-delta)*k))
        y = exp(a)*(k(-1)^alpha)*(h^(1-alpha))
        k = exp(b)*(y-c)+(1-delta)*k(-1)
        a = rho*a(-1)+tau*b(-1) + e
        b = tau*a(-1)+rho*b(-1) + u
    end
end

# Do some preliminary computations
compute_model_info(m)

# Define a calibration and some starting values for the nonlinear solver

calib = Dict(
         :alpha =&gt; 0.36,
         :rho   =&gt; 0.95,
         :tau   =&gt; 0.025,
         :beta  =&gt; 0.99,
         :delta =&gt; 0.025,
         :psi   =&gt; 0.0,
         :theta =&gt; 2.95
        )

initval = Dict(
           :y =&gt; 1.08068253095672,
           :c =&gt; 0.80359242014163,
           :h =&gt; 0.29175631001732,
           :k =&gt; 11.08360443260358,
           :a =&gt; 0.0,
           :b =&gt; 0.0
           )

# Compute and print the steady state for the given calibration

s = steady_state(m, calib, initval)

print_steady_state(m, s)

# Compute and print eigenvalues and first order decision rules

(gy, gu, eigs) = decision_rules(m, calib, s)

println(&quot;Eigenvalues: &quot;, eigs)
println()

print_decision_rules(m, gy, gu)
"><pre><span class="pl-k">using</span> Dynare

<span class="pl-c"><span class="pl-c">#</span> Create a model object</span>
m <span class="pl-k">=</span>
<span class="pl-c1">@modfile</span> <span class="pl-k">begin</span>
    <span class="pl-c1">@var</span> y c k a h b
    <span class="pl-c1">@varexo</span> e u
    <span class="pl-c1">@parameters</span> beta rho alpha delta theta psi tau
    <span class="pl-c1">@model</span> <span class="pl-k">begin</span>
        c<span class="pl-k">*</span>theta<span class="pl-k">*</span>h<span class="pl-k">^</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>psi) <span class="pl-k">=</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>alpha)<span class="pl-k">*</span>y
        k <span class="pl-k">=</span> beta<span class="pl-k">*</span>(((<span class="pl-c1">exp</span>(b)<span class="pl-k">*</span>c)<span class="pl-k">/</span>(<span class="pl-c1">exp</span>(<span class="pl-c1">b</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>))<span class="pl-k">*</span><span class="pl-c1">c</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>)))<span class="pl-k">*</span>(<span class="pl-c1">exp</span>(<span class="pl-c1">b</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>))<span class="pl-k">*</span>alpha<span class="pl-k">*</span><span class="pl-c1">y</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>delta)<span class="pl-k">*</span>k))
        y <span class="pl-k">=</span> <span class="pl-c1">exp</span>(a)<span class="pl-k">*</span>(<span class="pl-c1">k</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span>alpha)<span class="pl-k">*</span>(h<span class="pl-k">^</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>alpha))
        k <span class="pl-k">=</span> <span class="pl-c1">exp</span>(b)<span class="pl-k">*</span>(y<span class="pl-k">-</span>c)<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>delta)<span class="pl-k">*</span><span class="pl-c1">k</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
        a <span class="pl-k">=</span> rho<span class="pl-k">*</span><span class="pl-c1">a</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>tau<span class="pl-k">*</span><span class="pl-c1">b</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> e
        b <span class="pl-k">=</span> tau<span class="pl-k">*</span><span class="pl-c1">a</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>rho<span class="pl-k">*</span><span class="pl-c1">b</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> u
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Do some preliminary computations</span>
<span class="pl-c1">compute_model_info</span>(m)

<span class="pl-c"><span class="pl-c">#</span> Define a calibration and some starting values for the nonlinear solver</span>

calib <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
         <span class="pl-c1">:alpha</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.36</span>,
         <span class="pl-c1">:rho</span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">0.95</span>,
         <span class="pl-c1">:tau</span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">0.025</span>,
         <span class="pl-c1">:beta</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">0.99</span>,
         <span class="pl-c1">:delta</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.025</span>,
         <span class="pl-c1">:psi</span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>,
         <span class="pl-c1">:theta</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.95</span>
        )

initval <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
           <span class="pl-c1">:y</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.08068253095672</span>,
           <span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.80359242014163</span>,
           <span class="pl-c1">:h</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.29175631001732</span>,
           <span class="pl-c1">:k</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">11.08360443260358</span>,
           <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>,
           <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
           )

<span class="pl-c"><span class="pl-c">#</span> Compute and print the steady state for the given calibration</span>

s <span class="pl-k">=</span> <span class="pl-c1">steady_state</span>(m, calib, initval)

<span class="pl-c1">print_steady_state</span>(m, s)

<span class="pl-c"><span class="pl-c">#</span> Compute and print eigenvalues and first order decision rules</span>

(gy, gu, eigs) <span class="pl-k">=</span> <span class="pl-c1">decision_rules</span>(m, calib, s)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Eigenvalues: <span class="pl-pds">"</span></span>, eigs)
<span class="pl-c1">println</span>()

<span class="pl-c1">print_decision_rules</span>(m, gy, gu)</pre></div>
<h2><a id="user-content-a-perfect-foresight-example" class="anchor" aria-hidden="true" href="#a-perfect-foresight-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A perfect foresight example</h2>
<p>The following example is a translation of <code>ramst.mod</code> that is shipped with
Dynare. It computes the steady state and a perfect foresight simulation.</p>
<p>Note that we had to introduce an endogenous variable <code>x1</code> equal to the
exogenous variable <code>x</code>, because leads on exogenous variables are not yet supported.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Dynare

m =
@modfile begin
    @var c k x1
    @varexo x
    @parameters alph gam delt bet aa
    @model begin
        c + k - aa*x*k(-1)^alph - (1-delt)*k(-1)
        c^(-gam) - (1+bet)^(-1)*(aa*alph*x1(+1)*k^(alph-1) + 1 - delt)*c(+1)^(-gam)
        x1 = x
    end
end

compute_model_info(m)

calib = Dict(
         :alph =&gt; 0.5,
         :gam =&gt; 0.5,
         :delt =&gt; 0.02,
         :bet =&gt; 0.05,
         :aa =&gt; 0.5
        )

exoval = Dict( :x =&gt; 1.0 )

initval = Dict{Symbol, Float64}()
initval[:k] = ((calib[:delt]+calib[:bet])/(exoval[:x]*calib[:aa]*calib[:alph]))^(1/(calib[:alph]-1))
initval[:c] = calib[:aa]*initval[:k]^calib[:alph]-calib[:delt]*initval[:k]
initval[:x1] = exoval[:x]

s = steady_state(m, calib, initval, exoval)

# Compute a 200 periods perfect foresight simulation
# Start and end at the steady state corresponding to x=1
# There is a shock x=1.2 in t=1
# The results will be in endopath (which includes initial and terminal
#  condition, i.e. it goes from t=0 to t=201)

T = 200
endopath = repmat(s, 1, T+2)
exopath = ones(m.n_exo, T)
exopath[1, 1] = 1.2

perfect_foresight_simul!(m, endopath, exopath, calib)
"><pre><span class="pl-k">using</span> Dynare

m <span class="pl-k">=</span>
<span class="pl-c1">@modfile</span> <span class="pl-k">begin</span>
    <span class="pl-c1">@var</span> c k x1
    <span class="pl-c1">@varexo</span> x
    <span class="pl-c1">@parameters</span> alph gam delt bet aa
    <span class="pl-c1">@model</span> <span class="pl-k">begin</span>
        c <span class="pl-k">+</span> k <span class="pl-k">-</span> aa<span class="pl-k">*</span>x<span class="pl-k">*</span><span class="pl-c1">k</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span>alph <span class="pl-k">-</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>delt)<span class="pl-k">*</span><span class="pl-c1">k</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
        c<span class="pl-k">^</span>(<span class="pl-k">-</span>gam) <span class="pl-k">-</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>bet)<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(aa<span class="pl-k">*</span>alph<span class="pl-k">*</span><span class="pl-c1">x1</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>k<span class="pl-k">^</span>(alph<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> delt)<span class="pl-k">*</span><span class="pl-c1">c</span>(<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">^</span>(<span class="pl-k">-</span>gam)
        x1 <span class="pl-k">=</span> x
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">compute_model_info</span>(m)

calib <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
         <span class="pl-c1">:alph</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>,
         <span class="pl-c1">:gam</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>,
         <span class="pl-c1">:delt</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.02</span>,
         <span class="pl-c1">:bet</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.05</span>,
         <span class="pl-c1">:aa</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>
        )

exoval <span class="pl-k">=</span> <span class="pl-c1">Dict</span>( <span class="pl-c1">:x</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> )

initval <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Float64}</span>()
initval[<span class="pl-c1">:k</span>] <span class="pl-k">=</span> ((calib[<span class="pl-c1">:delt</span>]<span class="pl-k">+</span>calib[<span class="pl-c1">:bet</span>])<span class="pl-k">/</span>(exoval[<span class="pl-c1">:x</span>]<span class="pl-k">*</span>calib[<span class="pl-c1">:aa</span>]<span class="pl-k">*</span>calib[<span class="pl-c1">:alph</span>]))<span class="pl-k">^</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>(calib[<span class="pl-c1">:alph</span>]<span class="pl-k">-</span><span class="pl-c1">1</span>))
initval[<span class="pl-c1">:c</span>] <span class="pl-k">=</span> calib[<span class="pl-c1">:aa</span>]<span class="pl-k">*</span>initval[<span class="pl-c1">:k</span>]<span class="pl-k">^</span>calib[<span class="pl-c1">:alph</span>]<span class="pl-k">-</span>calib[<span class="pl-c1">:delt</span>]<span class="pl-k">*</span>initval[<span class="pl-c1">:k</span>]
initval[<span class="pl-c1">:x1</span>] <span class="pl-k">=</span> exoval[<span class="pl-c1">:x</span>]

s <span class="pl-k">=</span> <span class="pl-c1">steady_state</span>(m, calib, initval, exoval)

<span class="pl-c"><span class="pl-c">#</span> Compute a 200 periods perfect foresight simulation</span>
<span class="pl-c"><span class="pl-c">#</span> Start and end at the steady state corresponding to x=1</span>
<span class="pl-c"><span class="pl-c">#</span> There is a shock x=1.2 in t=1</span>
<span class="pl-c"><span class="pl-c">#</span> The results will be in endopath (which includes initial and terminal</span>
<span class="pl-c"><span class="pl-c">#</span>  condition, i.e. it goes from t=0 to t=201)</span>

T <span class="pl-k">=</span> <span class="pl-c1">200</span>
endopath <span class="pl-k">=</span> <span class="pl-c1">repmat</span>(s, <span class="pl-c1">1</span>, T<span class="pl-k">+</span><span class="pl-c1">2</span>)
exopath <span class="pl-k">=</span> <span class="pl-c1">ones</span>(m<span class="pl-k">.</span>n_exo, T)
exopath[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1.2</span>

<span class="pl-c1">perfect_foresight_simul!</span>(m, endopath, exopath, calib)</pre></div>
</article></div>