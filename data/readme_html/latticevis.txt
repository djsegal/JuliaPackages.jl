<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-latticevis" class="anchor" aria-hidden="true" href="#latticevis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LatticeVis</h1>
<p><a href="https://travis-ci.org/ffreyer/LatticeVis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/388f868721e76eb8495caad31bd46f96621cd5ba/68747470733a2f2f7472617669732d63692e6f72672f666672657965722f4c6174746963655669732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ffreyer/LatticeVis.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ffreyer/LatticeVis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/74b8bf857e28af5484d3d4e056462e1fe95484d1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f666672657965722f4c6174746963655669732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/ffreyer/LatticeVis.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/ffreyer/LatticeVis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/037f305f7135aa2f3f6d2b3b181a0b9de76a34e2/687474703a2f2f636f6465636f762e696f2f6769746875622f666672657965722f4c6174746963655669732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ffreyer/LatticeVis.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Install the package with</p>
<p><code>Pkg.clone("git://github.com/ffreyer/LatticeVis.jl.git")</code></p>
<p>This package offers a way to create lattices from unit cells, that is a combination of basis positions and translation vectors. The dimensionality of the lattice can be choosen freely, as can the number of neighbor orders (i.e. first and second for 2).</p>
<p>A lattice can be created with <code>Lattice(name_of_lattice, Ls=(Lx, Ly))</code>, e.g. <code>Lattice(honeycomb, Ls=(8, 6))</code>. For this <code>name_of_lattice</code> has to be implemented as a <code>::UnitCell</code>. Additional unit cells can be implemented fairly easily, see <code>UnitCell.jl</code>. They can also be passed by value, e.g. <code>Lattice(honeycomb(), L=3)</code>.</p>
<p>A simple 2D plot can be generated with <code>plot(lattice_object)</code> where <code>lattice_object</code> is the Graph returned from <code>Lattice</code>.</p>
<pre><code>l = Lattice(honeycomb)
plot(l)
</code></pre>
<hr>
<p>Implemented 2D UnitCells:</p>
<ul>
<li><code>square</code></li>
<li><code>triangle</code></li>
<li><code>honeycomb</code></li>
</ul>
<p>Implemented 3D UnitCells</p>
<ul>
<li><code>sc</code></li>
<li><code>bcc</code></li>
<li><code>fcc</code></li>
<li><code>diamond</code></li>
</ul>
<p>Each UnitCell constructor can take the keyword arguments:</p>
<ul>
<li><code>pos::Point{2, T} = Point{2}(0.)</code>: Starting position for this lattice.</li>
<li><code>a::T = 1.0</code>: Scaling along the first lattice vector.</li>
<li><code>b::T = 1.0</code>: Scaling along the second lattice vector.</li>
<li><code>isa::Symbol = :primitive</code>: Lattice shape to use (:cubic or :primitive)</li>
</ul>
<p><code>Lattice</code> has the keyword arguments:</p>
<ul>
<li><code>L::Int64 = 8</code>: The size of the lattice</li>
<li><code>Ls::NTuple{D, Int64} = (L, ..., L)</code>: The size of the lattice in D dimensions.</li>
<li><code>do_periodic::Bool = true</code>: Generate lattice with periodic bonds.</li>
<li><code>N_neighbors::Int64 = 1</code>: The number neighbor levels used.</li>
<li><code>nodetype::Type{N} = StandardSite</code>: Type of Node used to construct the lattice.</li>
<li><code>edgetype::Type{E} = StandardBond</code>: Type of Edge used to construct the lattice.</li>
<li><code>graphtype::Type{G} = StandardGraph</code>: Type of Graph used to construct the lattice.</li>
</ul>
<p>where <code>nodetype</code>, <code>edgetype</code> and <code>graphtype</code> allow for custom nodes, edges and/or graph types to be used in the generation of a lattice. For this, the custom types must inherit from AbstractNode, AbstractEdge and AbstractGraph respectively, and implement fitting constructors. See <code>LatticeGraph.jl</code>.</p>
</article></div>