<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-latticevis" class="anchor" aria-hidden="true" href="#latticevis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LatticeVis</h1>
<p dir="auto"><a href="https://travis-ci.org/ffreyer/LatticeVis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ffffe6fb54671496a76cfdf873a6f1f8423be250c4d929b606385547c309b244/68747470733a2f2f7472617669732d63692e6f72672f666672657965722f4c6174746963655669732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ffreyer/LatticeVis.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/ffreyer/LatticeVis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/052f06274928cde6b46503118f8767d5522f06abe1f35afe776c2579f44af16a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f666672657965722f4c6174746963655669732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/ffreyer/LatticeVis.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/ffreyer/LatticeVis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c09d7de0b0fba0ea4141adad079df9bcfe0bc93494c9ae810cb0004d702d651/687474703a2f2f636f6465636f762e696f2f6769746875622f666672657965722f4c6174746963655669732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ffreyer/LatticeVis.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Install the package with</p>
<p dir="auto"><code>Pkg.clone("git://github.com/ffreyer/LatticeVis.jl.git")</code></p>
<p dir="auto">This package offers a way to create lattices from unit cells, that is a combination of basis positions and translation vectors. The dimensionality of the lattice can be choosen freely, as can the number of neighbor orders (i.e. first and second for 2).</p>
<p dir="auto">A lattice can be created with <code>Lattice(name_of_lattice, Ls=(Lx, Ly))</code>, e.g. <code>Lattice(honeycomb, Ls=(8, 6))</code>. For this <code>name_of_lattice</code> has to be implemented as a <code>::UnitCell</code>. Additional unit cells can be implemented fairly easily, see <code>UnitCell.jl</code>. They can also be passed by value, e.g. <code>Lattice(honeycomb(), L=3)</code>.</p>
<p dir="auto">A simple 2D plot can be generated with <code>plot(lattice_object)</code> where <code>lattice_object</code> is the Graph returned from <code>Lattice</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="l = Lattice(honeycomb)
plot(l)"><pre class="notranslate"><code>l = Lattice(honeycomb)
plot(l)
</code></pre></div>
<hr>
<p dir="auto">Implemented 2D UnitCells:</p>
<ul dir="auto">
<li><code>square</code></li>
<li><code>triangle</code></li>
<li><code>honeycomb</code></li>
</ul>
<p dir="auto">Implemented 3D UnitCells</p>
<ul dir="auto">
<li><code>sc</code></li>
<li><code>bcc</code></li>
<li><code>fcc</code></li>
<li><code>diamond</code></li>
</ul>
<p dir="auto">Each UnitCell constructor can take the keyword arguments:</p>
<ul dir="auto">
<li><code>pos::Point{2, T} = Point{2}(0.)</code>: Starting position for this lattice.</li>
<li><code>a::T = 1.0</code>: Scaling along the first lattice vector.</li>
<li><code>b::T = 1.0</code>: Scaling along the second lattice vector.</li>
<li><code>isa::Symbol = :primitive</code>: Lattice shape to use (:cubic or :primitive)</li>
</ul>
<p dir="auto"><code>Lattice</code> has the keyword arguments:</p>
<ul dir="auto">
<li><code>L::Int64 = 8</code>: The size of the lattice</li>
<li><code>Ls::NTuple{D, Int64} = (L, ..., L)</code>: The size of the lattice in D dimensions.</li>
<li><code>do_periodic::Bool = true</code>: Generate lattice with periodic bonds.</li>
<li><code>N_neighbors::Int64 = 1</code>: The number neighbor levels used.</li>
<li><code>nodetype::Type{N} = StandardSite</code>: Type of Node used to construct the lattice.</li>
<li><code>edgetype::Type{E} = StandardBond</code>: Type of Edge used to construct the lattice.</li>
<li><code>graphtype::Type{G} = StandardGraph</code>: Type of Graph used to construct the lattice.</li>
</ul>
<p dir="auto">where <code>nodetype</code>, <code>edgetype</code> and <code>graphtype</code> allow for custom nodes, edges and/or graph types to be used in the generation of a lattice. For this, the custom types must inherit from AbstractNode, AbstractEdge and AbstractGraph respectively, and implement fitting constructors. See <code>LatticeGraph.jl</code>.</p>
</article></div>