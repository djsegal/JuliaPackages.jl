<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="http://pkg.julialang.org/?pkg=Sims&amp;ver=release" rel="nofollow"><img src="https://camo.githubusercontent.com/238e8b1e2ac7676092da33c940541f1c09bc5898/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53696d735f72656c656173652e737667" alt="Example" data-canonical-src="http://pkg.julialang.org/badges/Sims_release.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Sims&amp;ver=nightly" rel="nofollow"><img src="https://camo.githubusercontent.com/afd3a786bdd77e7dc9c3b8b7a4205b150496d152/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53696d735f6e696768746c792e737667" alt="Example" data-canonical-src="http://pkg.julialang.org/badges/Sims_nightly.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/tshort/Sims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed29e655c87182c69a84e62940aaa6fb5d87ceb0/68747470733a2f2f7472617669732d63692e6f72672f7473686f72742f53696d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tshort/Sims.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/tshort/Sims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ebde9ce076c96566b5907b083174f674e952b7cf/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f7473686f72742f53696d732e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/tshort/Sims.jl.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-simsjl" class="anchor" aria-hidden="true" href="#simsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sims.jl</h1>
<p>A <a href="http://julialang.org" rel="nofollow">Julia</a> package for equation-based modeling
and simulations. For more information, see the documentation:</p>
<ul>
<li><strong><a href="https://tshort.github.io/Sims.jl/stable" rel="nofollow">Documentation for the released version</a></strong>.</li>
<li><strong><a href="https://tshort.github.io/Sims.jl/latest" rel="nofollow">Documentation for the development version</a></strong>.</li>
</ul>
<h2><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Background</h2>
<p>This package is for non-causal modeling in Julia. The idea behind
non-causal modeling is that the user develops models based on
components which are described by a set of equations. A tool can then
transform the equations and solve the differential algebraic
equations. Non-causal models tend to match their physical counterparts
in terms of their specification and implementation.</p>
<p>Causal modeling is where all signals have an input and an output, and
the flow of information is clear. Simulink is the highest-profile
example. The problem with causal modeling is that it is difficult to
build up models from components.</p>
<p>The highest profile noncausal modeling tools are in the
<a href="https://www.modelica.org/" rel="nofollow">Modelica</a> family. The MathWorks company also has
Simscape that uses Matlab notation. Modelica is an object-oriented,
open language with multiple implementations. It is a large, complex,
powerful language with an extensive standard library of components.</p>
<p>This implementation follows the work of
<a href="http://web.ict.kth.se/~dbro/" rel="nofollow">David Broman</a>
(<a href="http://www.bromans.com/david/publ/thesis-2010-david-broman.pdf" rel="nofollow">thesis</a>
and <a href="http://www.bromans.com/software/mkl/mkl-source-1.0.0.zip" rel="nofollow">code</a>)
and <a href="http://db.inf.uni-tuebingen.de/team/giorgidze" rel="nofollow">George Giorgidze</a>
(<a href="https://github.com/giorgidze/Hydra">Hydra code</a> and
<a href="http://db.inf.uni-tuebingen.de/files/giorgidze/phd_thesis.pdf" rel="nofollow">thesis</a>)
and <a href="http://www.cs.nott.ac.uk/~nhn/" rel="nofollow">Henrik Nilsson</a> and their
functional hybrid modeling. Sims is most similar to
<a href="https://github.com/david-broman/modelyze">Modelyze</a> by David Broman
(<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.pdf" rel="nofollow">report</a>).</p>
<p>Two solvers are available to solve the implicit DAE's generated. The
default is DASKR, a derivative of DASSL with root finding. A solver
based on the <a href="https://github.com/tshort/Sundials.jl">Sundials</a> package
is also available.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Sims is an installable package. To install Sims, use the following:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Sims<span class="pl-pds">"</span></span>)</pre></div>
<p>Sims.jl has one main module named <code>Sims</code> and the following submodules:</p>
<ul>
<li>
<p><code>Sims.Lib</code> -- the standard library</p>
</li>
<li>
<p><code>Sims.Examples</code> -- example models, including:</p>
<ul>
<li><code>Sims.Examples.Basics</code></li>
<li><code>Sims.Examples.Lib</code></li>
<li><code>Sims.Examples.Neural</code></li>
</ul>
</li>
</ul>
<h2><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic example</h2>
<p>Sims defines a basic symbolic class used for unknown variables in
the model. As unknown variables are evaluated, expressions (of
type <code>MExpr</code>) are built up.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Sims

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Unknown</span>()
<span class="pl-c"><span class="pl-c">#</span>#1243</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">*</span> (a <span class="pl-k">+</span> <span class="pl-c1">1</span>)
<span class="pl-c1">MExpr</span>(<span class="pl-k">*</span>(<span class="pl-c"><span class="pl-c">#</span>#1243,+(##1243,1)))</span></pre></div>
<p>In a simulation, the unknowns are to be solved based on a set of
equations. Equations are built from device models.</p>
<p>A device model is a function that returns a vector of equations or
other devices that also return lists of equations. The equations
each are assumed equal to zero. So,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">der</span>(y) <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span></pre></div>
<p>Should be entered as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">der</span>(y) <span class="pl-k">-</span> (x<span class="pl-k">+</span><span class="pl-c1">1</span>)</pre></div>
<p><code>der</code> indicates a derivative.</p>
<p>The Van Der Pol oscillator is a simple problem with two equations
and two unknowns:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Vanderpol</span>()
    y <span class="pl-k">=</span> <span class="pl-c1">Unknown</span>(<span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> The 1.0 is the initial value. "y" is for plotting.</span>
    x <span class="pl-k">=</span> <span class="pl-c1">Unknown</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> The initial value is zero if not given.</span>
    <span class="pl-c"><span class="pl-c">#</span> The following gives the return value which is a list of equations.</span>
    <span class="pl-c"><span class="pl-c">#</span> Expressions with Unknowns are kept as expressions. Expressions of</span>
    <span class="pl-c"><span class="pl-c">#</span> regular variables are evaluated immediately.</span>
    Equation[
        <span class="pl-c"><span class="pl-c">#</span> The -1.0 in der(x, -1.0) is the initial value for the derivative </span>
        <span class="pl-c1">der</span>(x, <span class="pl-k">-</span><span class="pl-c1">1.0</span>) <span class="pl-k">-</span> ((<span class="pl-c1">1</span> <span class="pl-k">-</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> x <span class="pl-k">-</span> y)      <span class="pl-c"><span class="pl-c">#</span> == 0 is assumed</span>
        <span class="pl-c1">der</span>(y) <span class="pl-k">-</span> x
    ]
<span class="pl-k">end</span>

y <span class="pl-k">=</span> <span class="pl-c1">sim</span>(<span class="pl-c1">Vanderpol</span>(), <span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> Run the simulation to 10 seconds and return</span>
                           <span class="pl-c"><span class="pl-c">#</span> the result as an array.</span>
<span class="pl-c"><span class="pl-c">#</span> plot the results with Gaston</span>
<span class="pl-c1">gplot</span>(y)</pre></div>
<p>Here are the results:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/tshort/Sims.jl/blob/master/examples/basics/vanderpol.png?raw=true"><img src="https://github.com/tshort/Sims.jl/raw/master/examples/basics/vanderpol.png?raw=true" alt="plot results" title="Van Der Pol results" style="max-width:100%;"></a></p>
<p>An <code>@equations</code> macro is provided to return <code>Equation[]</code> allowing for
the use of equals in equations, so the example above can be:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Vanderpol</span>()
    y <span class="pl-k">=</span> <span class="pl-c1">Unknown</span>(<span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>) 
    x <span class="pl-k">=</span> <span class="pl-c1">Unknown</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@equations</span> <span class="pl-k">begin</span>
        <span class="pl-en">der</span>(x, <span class="pl-k">-</span><span class="pl-c1">1.0</span>) <span class="pl-k">=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> x <span class="pl-k">-</span> y
        <span class="pl-en">der</span>(y) <span class="pl-k">=</span> x
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

y <span class="pl-k">=</span> <span class="pl-c1">sim</span>(<span class="pl-c1">Vanderpol</span>(), <span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> Run the simulation to 10 seconds and return</span>
                           <span class="pl-c"><span class="pl-c">#</span> the result as an array.</span>
<span class="pl-c"><span class="pl-c">#</span> plot the results</span>
<span class="pl-c1">plot</span>(y)</pre></div>
<h2><a id="user-content-electrical-example" class="anchor" aria-hidden="true" href="#electrical-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Electrical example</h2>
<p>This example shows definitions of several electrical components. Each
is again a function that returns a list of equations. Equations are
expressions (type MExpr) that includes other expressions and unknowns
(type Unknown).</p>
<p>Arguments to each function are model parameters. These normally include
nodes specifying connectivity followed by parameters specifying model
characteristics.</p>
<p>Models can contain models or other functions that return equations.
The function <code>Branch</code> is a special function that returns an equation
specifying relationships between nodes and flows. It also acts as an
indicator to mark nodes. In the flattening/elaboration process,
equations are created to sum flows (in this case electrical currents)
to zero at all nodes. <code>RefBranch</code> is another special function for
marking nodes and flow variables.</p>
<p>Nodes passed as parameters or created with <code>ElectricalNode()</code> are simply
unknowns. For these electrical examples, a node is simply an unknown
voltage.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Resistor</span>(n1, n2, R<span class="pl-k">::</span><span class="pl-c1">Real</span>) 
    i <span class="pl-k">=</span> <span class="pl-c1">Current</span>()   <span class="pl-c"><span class="pl-c">#</span> This is simply an Unknown. </span>
    v <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    <span class="pl-c1">@equations</span> <span class="pl-k">begin</span>
        <span class="pl-c1">Branch</span>(n1, n2, v, i)
        R <span class="pl-k">*</span> i <span class="pl-k">=</span> v
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Capacitor</span>(n1, n2, C<span class="pl-k">::</span><span class="pl-c1">Real</span>) 
    i <span class="pl-k">=</span> <span class="pl-c1">Current</span>()
    v <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    <span class="pl-c1">@equations</span> <span class="pl-k">begin</span>
        <span class="pl-c1">Branch</span>(n1, n2, v, i)
        C <span class="pl-k">*</span> <span class="pl-en">der</span>(v) <span class="pl-k">=</span> i
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>What follows is a top-level circuit definition. In this case,
there are no input parameters. The ground reference "g" is
assigned zero volts.</p>
<p>All of the equations returned in the list of equations are other
models with various parameters.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Circuit</span>()
    n1 <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>(<span class="pl-s"><span class="pl-pds">"</span>Source voltage<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> The string indicates labeling for plots</span>
    n2 <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>(<span class="pl-s"><span class="pl-pds">"</span>Output voltage<span class="pl-pds">"</span></span>)
    n3 <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    g <span class="pl-k">=</span> <span class="pl-c1">0.0</span>  <span class="pl-c"><span class="pl-c">#</span> A ground has zero volts; it's not an unknown.</span>
    Equation[
        <span class="pl-c1">SineVoltage</span>(n1, g, <span class="pl-c1">10.0</span>, <span class="pl-c1">60.0</span>)
        <span class="pl-c1">Resistor</span>(n1, n2, <span class="pl-c1">10.0</span>)
        <span class="pl-c1">Resistor</span>(n2, g, <span class="pl-c1">5.0</span>)
        <span class="pl-c1">SeriesProbe</span>(n2, n3, <span class="pl-s"><span class="pl-pds">"</span>Capacitor current<span class="pl-pds">"</span></span>)
        <span class="pl-c1">Capacitor</span>(n3, g, <span class="pl-c1">5.0e-3</span>)
    ]
<span class="pl-k">end</span>

ckt <span class="pl-k">=</span> <span class="pl-c1">Circuit</span>()
ckt_y <span class="pl-k">=</span> <span class="pl-c1">sim</span>(ckt, <span class="pl-c1">0.1</span>)
<span class="pl-c1">gplot</span>(ckt_y)</pre></div>
<p>Here are the results:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/tshort/Sims.jl/blob/master/examples/basics/circuit.png?raw=true"><img src="https://github.com/tshort/Sims.jl/raw/master/examples/basics/circuit.png?raw=true" alt="plot results" title="Circuit results" style="max-width:100%;"></a></p>
<h2><a id="user-content-initialization-and-solving-sets-of-equations" class="anchor" aria-hidden="true" href="#initialization-and-solving-sets-of-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initialization and Solving Sets of Equations</h2>
<p>Sims initialization is still weak, but it is developed enough to be
able to solve non-differential equations. Here is a small example
where two Unknowns, <code>x</code> and <code>y</code>, are solved based on the following two
equations:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">test</span>()
    <span class="pl-c1">@unknown</span> x y
    <span class="pl-c1">@equations</span> <span class="pl-k">begin</span>
        <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">-</span> y   <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x)
         <span class="pl-k">-</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>y)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

solution <span class="pl-k">=</span> <span class="pl-c1">solve</span>(<span class="pl-c1">create_sim</span>(<span class="pl-c1">test</span>()))</pre></div>
<h2><a id="user-content-hybrid-modeling-and-structural-variability" class="anchor" aria-hidden="true" href="#hybrid-modeling-and-structural-variability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hybrid Modeling and Structural Variability</h2>
<p>Sims supports basic hybrid modeling, including the ability to handle
structural model changes. Consider the following example:</p>
<p><a href="https://github.com/tshort/Sims.jl/blob/master/examples/basics/breaking_pendulum_in_box.jl">Breaking pendulum</a></p>
<p>This model starts as a pendulum, then the wire breaks, and the ball
goes into free fall. Sims handles this much like
<a href="https://github.com/giorgidze/Hydra">Hydra</a>; the model is recompiled.
Because Julia can compile code just-in-time (JIT), this happens
relatively quickly. After the pendulum breaks, the ball bounces around
in a box. This shows off another feature of Sims: handling
nonstructural events. Each time the wall is hit, the velocity is
adjusted for the "bounce".</p>
<p>Here is an animation of the results. Note that the actual animation
was done in R, not Julia.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/tshort/Sims.jl/blob/master/examples/basics/pendulum.gif?raw=true"><img src="https://github.com/tshort/Sims.jl/raw/master/examples/basics/pendulum.gif?raw=true" alt="plot results" title="Pendulum" style="max-width:100%;"></a></p>
</article></div>