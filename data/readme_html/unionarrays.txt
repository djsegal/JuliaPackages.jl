<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unionarrays-storage-agnostic-array-type-with-union-elements" class="anchor" aria-hidden="true" href="#unionarrays-storage-agnostic-array-type-with-union-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnionArrays: storage-agnostic array type with <code>Union</code> elements</h1>
<p dir="auto"><a href="https://juliafolds.github.io/UnionArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafolds.github.io/UnionArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/UnionArrays.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/JuliaFolds/UnionArrays.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaFolds/UnionArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62dca9828b455daa03269d5f48495544a5f97505cd6f17aebeb5eaa5184be5a3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961466f6c64732f556e696f6e4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaFolds/UnionArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/UnionArrays.jl"><img src="https://camo.githubusercontent.com/e38569f1f05f560dacbd25ebdd2b110a5cc23d47f8ed73084f7f1f0223118a58/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f4a756c6961466f6c64732f556e696f6e4172726179732e6a6c2e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub last commit" data-canonical-src="https://img.shields.io/github/last-commit/JuliaFolds/UnionArrays.jl.svg?style=social&amp;logo=github" style="max-width: 100%;"></a></p>
<p dir="auto">UnionArrays.jl provides an array type with <code>Union</code> element types that is
generic over the data storage type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using UnionArrays

julia&gt; xs = UnionVector(undef, Vector, Union{Float32,Tuple{},UInt8}, 3);

julia&gt; fill!(xs, ());

julia&gt; xs[1]
()

julia&gt; xs[2] = 1.0f0;

julia&gt; xs[3] = UInt8(2);

julia&gt; collect(xs)
3-element Vector{Union{Tuple{}, Float32, UInt8}}:
     ()
    1.0f0
 0x02"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnionArrays

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">UnionVector</span>(undef, Vector, Union{Float32,Tuple{},UInt8}, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill!</span>(xs, ());

julia<span class="pl-k">&gt;</span> xs[<span class="pl-c1">1</span>]
()

julia<span class="pl-k">&gt;</span> xs[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1.0f0</span>;

julia<span class="pl-k">&gt;</span> xs[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">UInt8</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(xs)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Union{Tuple{}, Float32, UInt8}}<span class="pl-k">:</span>
     ()
    <span class="pl-c1">1.0f0</span>
 <span class="pl-c1">0x02</span></pre></div>
<p dir="auto">For example, it can be used for bringing <code>Union</code> element types to GPU:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CUDA

julia&gt; xs = UnionVector(undef, CuVector, Union{Float32,Nothing}, 3);

julia&gt; fill!(xs, nothing);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CUDA

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">UnionVector</span>(undef, CuVector, Union{Float32,Nothing}, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill!</span>(xs, <span class="pl-c1">nothing</span>);</pre></div>
<p dir="auto">Packages like <a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a>
and <a href="https://github.com/JuliaFolds/Folds.jl">Folds.jl</a> support computations
with <code>UnionArray</code>s on GPU:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Folds, FoldsCUDA

julia&gt; Folds.all(==(nothing), xs)
true

julia&gt; CUDA.@allowscalar begin
           xs[2] = 1.0f0
           xs[3] = 2.0f0
       end;

julia&gt; Folds.sum(x -&gt; x === nothing ? 0.0f0 : x, xs; init = 0.0f0)
3.0f0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Folds, FoldsCUDA

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">all</span>(<span class="pl-k">==</span>(<span class="pl-c1">nothing</span>), xs)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> CUDA<span class="pl-k">.</span><span class="pl-c1">@allowscalar</span> <span class="pl-k">begin</span>
           xs[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1.0f0</span>
           xs[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2.0f0</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">?</span> <span class="pl-c1">0.0f0</span> <span class="pl-k">:</span> x, xs; init <span class="pl-k">=</span> <span class="pl-c1">0.0f0</span>)
<span class="pl-c1">3.0f0</span></pre></div>
</article></div>