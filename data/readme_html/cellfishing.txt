<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cellfishingjl-" class="anchor" aria-hidden="true" href="#cellfishingjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CellFishing.jl <g-emoji class="g-emoji" alias="fishing_pole_and_fish" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png">ðŸŽ£</g-emoji></h1>
<p><a href="https://zenodo.org/badge/latestdoi/138121738" rel="nofollow"><img src="https://camo.githubusercontent.com/b94f827a1886485cb71f1bb3633a7975dc05d7e5/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3133383132313733382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/138121738.svg" style="max-width:100%;"></a></p>
<p>CellFishing.jl (<strong>cell</strong> <strong>fi</strong>nder via ha<strong>shing</strong>) is a tool to find similar
cells of query cells based on their transcriptome expression profiles.</p>
<p>Kenta Sato, Koki Tsuyuzaki, Kentaro Shimizu, and Itoshi Nikaido. "CellFishing.jl: an ultrafast and scalable cell search method for single-cell RNA sequencing." <em>Genome Biology</em>, 2019 20:31. <a href="https://doi.org/10.1186/s13059-019-1639-x" rel="nofollow">https://doi.org/10.1186/s13059-019-1639-x</a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Import packages.</span>
<span class="pl-k">using</span> CellFishing
<span class="pl-k">using</span> TableReader

<span class="pl-c"><span class="pl-c">#</span> Load expression profiles of database cells.</span>
<span class="pl-c"><span class="pl-c">#</span> Note: We highly recommend using the Loom format (http://loompy.org/) to</span>
<span class="pl-c"><span class="pl-c">#</span> load expression data, because loading a large matrix in plain text takes</span>
<span class="pl-c"><span class="pl-c">#</span> extremely long time.</span>
data <span class="pl-k">=</span> <span class="pl-c1">readtsv</span>(<span class="pl-s"><span class="pl-pds">"</span>database.txt<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> use readcsv if your file is comma-separated</span>
cellnames <span class="pl-k">=</span> <span class="pl-c1">string</span>.(<span class="pl-c1">names</span>(data))
featurenames <span class="pl-k">=</span> <span class="pl-c1">string</span>.(data[:,<span class="pl-c1">1</span>])
counts <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Int}</span>(data[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])

<span class="pl-c"><span class="pl-c">#</span> Select features and create an index (or a database).</span>
features <span class="pl-k">=</span> CellFishing<span class="pl-k">.</span><span class="pl-c1">selectfeatures</span>(counts, featurenames)
database <span class="pl-k">=</span> CellFishing<span class="pl-k">.</span><span class="pl-c1">CellIndex</span>(counts, features, metadata<span class="pl-k">=</span>cellnames)

<span class="pl-c"><span class="pl-c">#</span> Save/load the database to/from a file (optional).</span>
<span class="pl-c"><span class="pl-c">#</span> CellFishing.save("database.cf", database)</span>
<span class="pl-c"><span class="pl-c">#</span> database = CellFishing.load("database.cf")</span>

<span class="pl-c"><span class="pl-c">#</span> Load expression profiles of query cells.</span>
data <span class="pl-k">=</span> <span class="pl-c1">readtsv</span>(<span class="pl-s"><span class="pl-pds">"</span>query.txt<span class="pl-pds">"</span></span>)
cellnames <span class="pl-k">=</span> <span class="pl-c1">string</span>.(<span class="pl-c1">names</span>(data))
featurenames <span class="pl-k">=</span> <span class="pl-c1">string</span>.(data[:,<span class="pl-c1">1</span>])
counts <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Int}</span>(data[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])

<span class="pl-c"><span class="pl-c">#</span> Search the database for similar cells; k cells will be returned per query.</span>
k <span class="pl-k">=</span> <span class="pl-c1">10</span>
neighbors <span class="pl-k">=</span> CellFishing<span class="pl-k">.</span><span class="pl-c1">findneighbors</span>(k, counts, featurenames, database)

<span class="pl-c"><span class="pl-c">#</span> Write the neighboring cells to a file.</span>
<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>neighbors.tsv<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">println</span>(file, <span class="pl-c1">join</span>([<span class="pl-s"><span class="pl-pds">"</span>cell<span class="pl-pds">"</span></span>; <span class="pl-c1">string</span>.(<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span><span class="pl-k">:</span>k)], <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\t</span><span class="pl-pds">'</span></span>))
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(cellnames)
        <span class="pl-c1">print</span>(file, cellnames[j])
        <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>k
            <span class="pl-c1">print</span>(file, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\t</span><span class="pl-pds">'</span></span>, database<span class="pl-k">.</span>metadata[neighbors<span class="pl-k">.</span>indexes[i,j]])
        <span class="pl-k">end</span>
        <span class="pl-c1">println</span>(file)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First of all, you need to install a Julia compiler.  A recommended way is to
download a pre-built binary of Julia. The pre-built binaries for several major
platforms are distributed at <a href="https://julialang.org/downloads/" rel="nofollow">https://julialang.org/downloads/</a>.  Currently,
CellFishing.jl supports Julia 1.0 or later.</p>
<p>Then, install CellFishing.jl with the following command:</p>
<pre><code>$ julia -e 'using Pkg; Pkg.add(PackageSpec(url="git://github.com/bicycle1885/CellFishing.jl.git"))'
</code></pre>
<p>Alternatively, you can use the <code>add</code> command in the package management mode of Julia:</p>
<pre><code>(v1.0) pkg&gt; add git@github.com:bicycle1885/CellFishing.jl.git
</code></pre>
<p>To check the installation, you can try <code>using CellFishing</code> in your REPL:</p>
<pre><code>$ julia
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.0.0 (2018-08-08)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; using CellFishing  # load the package
[ Info: Precompiling CellFishing [5ab3512e-c64d-48f6-b1c0-509c1121fdda]

julia&gt;
</code></pre>
<p>No error messages mean you have successfully installed CellFishing.jl.</p>
<p>To run unit tests, execute the following command:</p>
<pre><code>$ julia -e 'using Pkg; Pkg.test("CellFishing")'
</code></pre>
<h2><a id="user-content-command-line-interface-wip" class="anchor" aria-hidden="true" href="#command-line-interface-wip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Command-line interface (WIP)</h2>
<p>The bin/cellfishing script is a command-line interface to CellFishing.jl.</p>
<pre><code>$ ./bin/cellfishing build Plass2018.dge.loom
Build a search database from Plass2018.dge.loom.
  Loading data â€•â€•â€•â€•â€•â€•â€•â€•â€•â€•â€•â€• 13 seconds, 173 milliseconds
  Selecting features â€•â€•â€•â€•â€•â€• 1 second, 376 milliseconds
  Creating a database â€•â€•â€•â€•â€• 16 seconds, 418 milliseconds
  Writing the database â€•â€•â€•â€• 659 milliseconds
The serialized database is in Plass2018.dge.loom.cf.
$ ./bin/cellfishing search Plass2018.dge.loom.cf Plass2018.dge.loom &gt;neighbors.tsv
Search Plass2018.dge.loom.cf for 10 neighbors.
  Loading the database â€•â€•â€•â€• 512 milliseconds
  Loading query data â€•â€•â€•â€•â€•â€• 12 seconds, 960 milliseconds
  Searching the database â€•â€• 31 seconds, 821 milliseconds
  Writing neighbors â€•â€•â€•â€•â€•â€•â€• 64 milliseconds
$ head -5 neighbors.tsv | cut -f1-3
plan1_GACTTTCTCTTC      plan1_GACTTTCTCTTC      h2b_TTTTGCTACGGG
plan1_GTAAGGCGACAN      plan1_GTAAGGCGACAN      gfp_ATTCCTAGCGAT
plan1_TGGCCCAGCTGC      plan1_TGGCCCAGCTGC      plan1_GACTTTCTCTTC
plan1_CTCCTGTAATTT      plan1_CTCCTGTAATTT      plan1_ATCCTCCATTAA
plan1_ATGACGCATAAT      plan1_ATGACGCATAAT      plan1_TACTTGACGGTA
</code></pre>
</article></div>