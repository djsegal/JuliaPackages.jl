<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symdiffjl---symbolic-differentiation" class="anchor" aria-hidden="true" href="#symdiffjl---symbolic-differentiation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymDiff.jl - symbolic differentiation</h1>
<p dir="auto"><a href="https://github.com/ahojukka5/SymDiff.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/ahojukka5/SymDiff.jl/workflows/CI/badge.svg" alt="ci" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ahojukka5/SymDiff.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ea0512cdaa47405f3c84fafe829a811b52df8d78d3ddd6eb998936232d070638/68747470733a2f2f636f6465636f762e696f2f67682f61686f6a756b6b61352f53796d446966662e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d746d30336d76334f5137" alt="codecov" data-canonical-src="https://codecov.io/gh/ahojukka5/SymDiff.jl/branch/master/graph/badge.svg?token=tm03mv3OQ7" style="max-width: 100%;"></a>
<a href="https://ahojukka5.github.io/SymDiff.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://ahojukka5.github.io/SymDiff.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Package author: Jukka Aho (@ahojukka5)</p>
<p dir="auto">SymDiff.jl is a small package demonstrating how one can do expression
manipulations using Julia.</p>
<p dir="auto">With the help of the package, it's possible to evaluate fast polynomials:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SymDiff

julia&gt; f = :(2 * w^2 * u * v^2)
:(2 * w ^ 2 * u * v ^ 2)

julia&gt; df = simplify(differentiate(f, :u))
:(2 * w ^ 2 * v ^ 2)

julia&gt; @eval df1(u, v, w) = $df
df1 (generic function with 1 method)

julia&gt; df2(u, v, w) = 2 * w^2 * v^2
df2 (generic function with 1 method)

julia&gt; using BenchmarkTools

julia&gt; @btime df1(1, 2, 3)
  0.023 ns (0 allocations: 0 bytes)
72

julia&gt; @btime df2(1, 2, 3)
  0.025 ns (0 allocations: 0 bytes)
72"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SymDiff

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> :(<span class="pl-c1">2</span> <span class="pl-k">*</span> w<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> u <span class="pl-k">*</span> v<span class="pl-k">^</span><span class="pl-c1">2</span>)
:(<span class="pl-c1">2</span> <span class="pl-k">*</span> w <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> u <span class="pl-k">*</span> v <span class="pl-k">^</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">simplify</span>(<span class="pl-c1">differentiate</span>(f, <span class="pl-c1">:u</span>))
:(<span class="pl-c1">2</span> <span class="pl-k">*</span> w <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> v <span class="pl-k">^</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@eval</span> <span class="pl-en">df1</span>(u, v, w) <span class="pl-k">=</span> <span class="pl-k">$</span>df
df1 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">df2</span>(u, v, w) <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> w<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> v<span class="pl-k">^</span><span class="pl-c1">2</span>
df2 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">df1</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
  <span class="pl-c1">0.023</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">72</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">df2</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
  <span class="pl-c1">0.025</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">72</span></pre></div>
</article></div>