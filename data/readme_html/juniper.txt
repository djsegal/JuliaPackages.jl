<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-juniper" class="anchor" aria-hidden="true" href="#juniper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Juniper</h1>
<p>Status:
<a href="https://github.com/lanl-ansi/Juniper.jl/actions?query=workflow%3ACI"><img src="https://github.com/lanl-ansi/Juniper.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/lanl-ansi/Juniper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d80ca1de492ffb76f9b112f679cbcd43463b45d240377881fd48652b887e05a/68747470733a2f2f636f6465636f762e696f2f67682f6c616e6c2d616e73692f4a756e697065722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lanl-ansi/Juniper.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://lanl-ansi.github.io/Juniper.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p></p>
<h1><a id="user-content-idea" class="anchor" aria-hidden="true" href="#idea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Idea</h1>
<p>You have a non linear problem with discrete variables (MINLP) and want some more control over the branch and bound part.
The relaxation should be solveable by any solver you prefer. Some solvers might not be able to solve the mixed integer part by themselves.</p>
<p>Juniper (Jump Nonlinear Integer Program solver) is a heuristic for non convex problems.
You need the global optimum? Check out <a href="http://github.com/lanl-ansi/Alpine.jl">Alpine.jl</a></p>
<h1><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h1>
<p>Juniper can be installed via:</p>
<p><code>] add Juniper</code> for Julia v1.</p>
<p>Then adding it to your project by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Juniper
"><pre><span class="pl-k">using</span> Juniper</pre></div>
<p>You also have to import your NLP solver i.e.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Ipopt
"><pre><span class="pl-k">using</span> Ipopt</pre></div>
<p>as well as <a href="http://www.juliaopt.org/JuMP.jl" rel="nofollow">JuMP</a></p>
<p>Define <code>Juniper</code> as the optimizer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="optimizer = Juniper.Optimizer
nl_solver = optimizer_with_attributes(Ipopt.Optimizer, &quot;print_level&quot;=&gt;0)
"><pre>optimizer <span class="pl-k">=</span> Juniper<span class="pl-k">.</span>Optimizer
nl_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Ipopt<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">0</span>)</pre></div>
<p>And give it a go:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LinearAlgebra # for the dot product
m = Model(optimizer_with_attributes(optimizer, &quot;nl_solver&quot;=&gt;nl_solver))

v = [10,20,12,23,42]
w = [12,45,12,22,21]
@variable(m, x[1:5], Bin)

@objective(m, Max, dot(v,x))

@NLconstraint(m, sum(w[i]*x[i]^2 for i=1:5) &lt;= 45)   

optimize!(m)

# retrieve the objective value, corresponding x values and the status
println(JuMP.value.(x))
println(JuMP.objective_value(m))
println(JuMP.termination_status(m))
"><pre><span class="pl-k">using</span> LinearAlgebra <span class="pl-c"><span class="pl-c">#</span> for the dot product</span>
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(optimizer, <span class="pl-s"><span class="pl-pds">"</span>nl_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>nl_solver))

v <span class="pl-k">=</span> [<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">12</span>,<span class="pl-c1">23</span>,<span class="pl-c1">42</span>]
w <span class="pl-k">=</span> [<span class="pl-c1">12</span>,<span class="pl-c1">45</span>,<span class="pl-c1">12</span>,<span class="pl-c1">22</span>,<span class="pl-c1">21</span>]
<span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>], Bin)

<span class="pl-c1">@objective</span>(m, Max, <span class="pl-c1">dot</span>(v,x))

<span class="pl-c1">@NLconstraint</span>(m, <span class="pl-c1">sum</span>(w[i]<span class="pl-k">*</span>x[i]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">&lt;=</span> <span class="pl-c1">45</span>)   

<span class="pl-c1">optimize!</span>(m)

<span class="pl-c"><span class="pl-c">#</span> retrieve the objective value, corresponding x values and the status</span>
<span class="pl-c1">println</span>(JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>.(x))
<span class="pl-c1">println</span>(JuMP<span class="pl-k">.</span><span class="pl-c1">objective_value</span>(m))
<span class="pl-c1">println</span>(JuMP<span class="pl-k">.</span><span class="pl-c1">termination_status</span>(m))</pre></div>
<p>This solver is a NLP solver therefore you should have at least one <code>NLconstraint</code> or <code>NLobjective</code>.</p>
<p>It is recommended to specify a mip solver as well i.e.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Cbc
optimizer = Juniper.Optimizer
nl_solver= optimizer_with_attributes(Ipopt.Optimizer, &quot;print_level&quot; =&gt; 0)
mip_solver = optimizer_with_attributes(Cbc.Optimizer, &quot;logLevel&quot; =&gt; 0)
m = Model(optimizer_with_attributes(optimizer, &quot;nl_solver&quot;=&gt;nl_solver, &quot;mip_solver&quot;=&gt;mip_solver))
"><pre><span class="pl-k">using</span> Cbc
optimizer <span class="pl-k">=</span> Juniper<span class="pl-k">.</span>Optimizer
nl_solver<span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Ipopt<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
mip_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Cbc<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>logLevel<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(optimizer, <span class="pl-s"><span class="pl-pds">"</span>nl_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>nl_solver, <span class="pl-s"><span class="pl-pds">"</span>mip_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>mip_solver))</pre></div>
<p>Then the feasibility pump is used to find a feasible solution before the branch and bound part starts. This turned out to be highly effective.</p>
<h1><a id="user-content-citing-juniper" class="anchor" aria-hidden="true" href="#citing-juniper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing Juniper</h1>
<p>If you find Juniper useful in your work, we kindly request that you cite the following <a href="https://link.springer.com/chapter/10.1007/978-3-319-93031-2_27" rel="nofollow">paper</a> or <a href="https://arxiv.org/abs/1804.07332" rel="nofollow">technical report</a>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@inproceedings{juniper,
     Author = {Ole Kröger and Carleton Coffrin and Hassan Hijazi and Harsha Nagarajan},
     Title = {Juniper: An Open-Source Nonlinear Branch-and-Bound Solver in Julia},
     booktitle=&quot;Integration of Constraint Programming, Artificial Intelligence, and Operations Research&quot;,
     pages=&quot;377--386&quot;,
     year=&quot;2018&quot;,
     publisher=&quot;Springer International Publishing&quot;,
     isbn=&quot;978-3-319-93031-2&quot;
}
"><pre><code>@inproceedings{juniper,
     Author = {Ole Kröger and Carleton Coffrin and Hassan Hijazi and Harsha Nagarajan},
     Title = {Juniper: An Open-Source Nonlinear Branch-and-Bound Solver in Julia},
     booktitle="Integration of Constraint Programming, Artificial Intelligence, and Operations Research",
     pages="377--386",
     year="2018",
     publisher="Springer International Publishing",
     isbn="978-3-319-93031-2"
}
</code></pre></div>
</article></div>