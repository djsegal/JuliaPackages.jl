<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-juniper" class="anchor" aria-hidden="true" href="#juniper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Juniper</h1>
<p dir="auto">Status:
<a href="https://github.com/lanl-ansi/Juniper.jl/actions?query=workflow%3ACI"><img src="https://github.com/lanl-ansi/Juniper.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lanl-ansi/Juniper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d80ca1de492ffb76f9b112f679cbcd43463b45d240377881fd48652b887e05a/68747470733a2f2f636f6465636f762e696f2f67682f6c616e6c2d616e73692f4a756e697065722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lanl-ansi/Juniper.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://lanl-ansi.github.io/Juniper.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"></p>
<h1 dir="auto"><a id="user-content-the-idea" class="anchor" aria-hidden="true" href="#the-idea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Idea</h1>
<p dir="auto">You have a nonlinear problem with discrete variables (MINLP) and want some more control over the branch and bound part.
The relaxation should be solveable by any solver you prefer. Some solvers might not be able to solve the mixed integer part by themselves.</p>
<p dir="auto">Juniper (Jump Nonlinear Integer Program solver) is a heuristic for optimization problems with non-convex functions.
If you need the global optimum, check out <a href="http://github.com/lanl-ansi/Alpine.jl">Alpine</a>.</p>
<h1 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h1>
<p dir="auto">Juniper can be installed via the Julia package manager,</p>
<p dir="auto"><code>] add JuMP, Juniper</code></p>
<p dir="auto">Add it to your project with,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Juniper"><pre><span class="pl-k">using</span> JuMP, Juniper</pre></div>
<p dir="auto">You will also have to have an NLP solver for setting up Juniper (e.g., <a href="https://github.com/jump-dev/Ipopt.jl">Ipopt</a>),</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Ipopt"><pre><span class="pl-k">using</span> Ipopt</pre></div>
<p dir="auto">Define a Juniper optimizer,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nl_solver = optimizer_with_attributes(Ipopt.Optimizer, &quot;print_level&quot;=&gt;0)
minlp_solver = optimizer_with_attributes(Juniper.Optimizer, &quot;nl_solver&quot;=&gt;nl_solver)"><pre>nl_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Ipopt<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">0</span>)
minlp_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Juniper<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>nl_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>nl_solver)</pre></div>
<p dir="auto">The provided <code>nl_solver</code> is used by Juniper to solve continuous nonlinear sub-problems while Juniper searches for acceptable assignments to the discrete variables.</p>
<p dir="auto">Give Juniper a try:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import LinearAlgebra: dot
m = Model(minlp_solver)

v = [10,20,12,23,42]
w = [12,45,12,22,21]
@variable(m, x[1:5], Bin)

@objective(m, Max, dot(v,x))

@constraint(m, sum(w[i]*x[i]^2 for i=1:5) &lt;= 45)

optimize!(m)

# retrieve the objective value, corresponding x values and the solver status
println(termination_status(m))
println(objective_value(m))
println(value.(x))"><pre><span class="pl-k">import</span> LinearAlgebra<span class="pl-k">:</span> dot
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(minlp_solver)

v <span class="pl-k">=</span> [<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">12</span>,<span class="pl-c1">23</span>,<span class="pl-c1">42</span>]
w <span class="pl-k">=</span> [<span class="pl-c1">12</span>,<span class="pl-c1">45</span>,<span class="pl-c1">12</span>,<span class="pl-c1">22</span>,<span class="pl-c1">21</span>]
<span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>], Bin)

<span class="pl-c1">@objective</span>(m, Max, <span class="pl-c1">dot</span>(v,x))

<span class="pl-c1">@constraint</span>(m, <span class="pl-c1">sum</span>(w[i]<span class="pl-k">*</span>x[i]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">&lt;=</span> <span class="pl-c1">45</span>)

<span class="pl-c1">optimize!</span>(m)

<span class="pl-c"><span class="pl-c">#</span> retrieve the objective value, corresponding x values and the solver status</span>
<span class="pl-c1">println</span>(<span class="pl-c1">termination_status</span>(m))
<span class="pl-c1">println</span>(<span class="pl-c1">objective_value</span>(m))
<span class="pl-c1">println</span>(<span class="pl-c1">value</span>.(x))</pre></div>
<p dir="auto">To solve problems with more complex nonlinear functions use the <code>@NLconstraint</code> and <code>@NLobjective</code> features of JuMP models.</p>
<p dir="auto">If Juniper has difficulty finding feasible solutions on your model, try adding a mip solver (e.g., <a href="https://github.com/jump-dev/HiGHS.jl">HiGHS</a>) to run a <em>feasiblity pump</em>,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HiGHS
nl_solver = optimizer_with_attributes(Ipopt.Optimizer, &quot;print_level&quot;=&gt;0)
mip_solver = optimizer_with_attributes(HiGHS.Optimizer, &quot;output_flag&quot;=&gt;false)
minlp_solver = optimizer_with_attributes(Juniper.Optimizer, &quot;nl_solver&quot;=&gt;nl_solver, &quot;mip_solver&quot;=&gt;mip_solver))"><pre><span class="pl-k">using</span> HiGHS
nl_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Ipopt<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">0</span>)
mip_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(HiGHS<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>output_flag<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">false</span>)
minlp_solver <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Juniper<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>nl_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>nl_solver, <span class="pl-s"><span class="pl-pds">"</span>mip_solver<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>mip_solver))</pre></div>
<p dir="auto">The feasibility pump is used at the start of Juniper to find a feasible solution before the branch and bound part starts.  For some classes of problems this can be a highly effective pre-processor.</p>
<h1 dir="auto"><a id="user-content-citing-juniper" class="anchor" aria-hidden="true" href="#citing-juniper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing Juniper</h1>
<p dir="auto">If you find Juniper useful in your work, we kindly request that you cite the following <a href="https://link.springer.com/chapter/10.1007/978-3-319-93031-2_27" rel="nofollow">paper</a> or <a href="https://arxiv.org/abs/1804.07332" rel="nofollow">technical report</a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@inproceedings{juniper,
     Author = {Ole Kröger and Carleton Coffrin and Hassan Hijazi and Harsha Nagarajan},
     Title = {Juniper: An Open-Source Nonlinear Branch-and-Bound Solver in Julia},
     booktitle=&quot;Integration of Constraint Programming, Artificial Intelligence, and Operations Research&quot;,
     pages=&quot;377--386&quot;,
     year=&quot;2018&quot;,
     publisher=&quot;Springer International Publishing&quot;,
     isbn=&quot;978-3-319-93031-2&quot;
}"><pre class="notranslate"><code>@inproceedings{juniper,
     Author = {Ole Kröger and Carleton Coffrin and Hassan Hijazi and Harsha Nagarajan},
     Title = {Juniper: An Open-Source Nonlinear Branch-and-Bound Solver in Julia},
     booktitle="Integration of Constraint Programming, Artificial Intelligence, and Operations Research",
     pages="377--386",
     year="2018",
     publisher="Springer International Publishing",
     isbn="978-3-319-93031-2"
}
</code></pre></div>
</article></div>