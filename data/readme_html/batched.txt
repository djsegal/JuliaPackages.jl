<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-batchedjl" class="anchor" aria-hidden="true" href="#batchedjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Batched.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/Roger-luo/Batched.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f53d74c5e6e4eaeb8bb2c769aaeb41b9b1fe24ffd93f0257e75cc99e7cb5c47d/68747470733a2f2f7472617669732d63692e6f72672f526f6765722d6c756f2f426174636865642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Roger-luo/Batched.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">BatchedArrays in Julia.</p>
<p dir="auto">**This package is not functional for now, please use the <a href="https://github.com/Roger-luo/BatchedRoutines.jl">BatchedRoutines.jl</a> for now.</p>
<p dir="auto"><strong>Warning</strong>: this is still under its early stage, use at your own risk.</p>
<h2 dir="auto"><a id="user-content-batched-arrays" class="anchor" aria-hidden="true" href="#batched-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Batched Arrays</h2>
<p dir="auto"><code>BatchedArray</code> is like an <code>Array</code> of <code>Array</code>s, but with contiguous storage in memory, so we could do some optimization based on that.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = BatchedArray(rand(2, 3, 10));

julia&gt; B = BatchedArray(rand(3, 2, 10));

julia&gt; eltype(A)
Element{Float64,2,P} where P"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">BatchedArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BatchedArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eltype</span>(A)
Element{Float64,<span class="pl-c1">2</span>,P} <span class="pl-k">where</span> P</pre></div>
<p dir="auto">And with Julia's broadcast, this will just work:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A .* B
10-element BatchedArray{Float64,2,1,Array{Float64,3}}:
 [0.947403 1.40625; 0.869711 0.848727] 
 [0.555413 0.699582; 0.465844 0.871226]
 [0.38841 0.381471; 0.551932 0.309496] 
 [0.93626 0.408086; 0.880168 0.311356] 
 [1.49227 0.941464; 1.26334 0.804171]  
 [1.08533 0.536161; 0.468115 0.188942] 
 [0.434965 0.813795; 0.367398 0.264233]
 [0.302816 0.990396; 0.674112 0.966444]
 [0.626944 0.89332; 1.30737 1.82809]   
 [0.582451 1.23067; 0.889868 1.36178]"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">.*</span> B
<span class="pl-c1">10</span><span class="pl-k">-</span>element BatchedArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,Array{Float64,<span class="pl-c1">3</span>}}<span class="pl-k">:</span>
 [<span class="pl-c1">0.947403</span> <span class="pl-c1">1.40625</span>; <span class="pl-c1">0.869711</span> <span class="pl-c1">0.848727</span>] 
 [<span class="pl-c1">0.555413</span> <span class="pl-c1">0.699582</span>; <span class="pl-c1">0.465844</span> <span class="pl-c1">0.871226</span>]
 [<span class="pl-c1">0.38841</span> <span class="pl-c1">0.381471</span>; <span class="pl-c1">0.551932</span> <span class="pl-c1">0.309496</span>] 
 [<span class="pl-c1">0.93626</span> <span class="pl-c1">0.408086</span>; <span class="pl-c1">0.880168</span> <span class="pl-c1">0.311356</span>] 
 [<span class="pl-c1">1.49227</span> <span class="pl-c1">0.941464</span>; <span class="pl-c1">1.26334</span> <span class="pl-c1">0.804171</span>]  
 [<span class="pl-c1">1.08533</span> <span class="pl-c1">0.536161</span>; <span class="pl-c1">0.468115</span> <span class="pl-c1">0.188942</span>] 
 [<span class="pl-c1">0.434965</span> <span class="pl-c1">0.813795</span>; <span class="pl-c1">0.367398</span> <span class="pl-c1">0.264233</span>]
 [<span class="pl-c1">0.302816</span> <span class="pl-c1">0.990396</span>; <span class="pl-c1">0.674112</span> <span class="pl-c1">0.966444</span>]
 [<span class="pl-c1">0.626944</span> <span class="pl-c1">0.89332</span>; <span class="pl-c1">1.30737</span> <span class="pl-c1">1.82809</span>]   
 [<span class="pl-c1">0.582451</span> <span class="pl-c1">1.23067</span>; <span class="pl-c1">0.889868</span> <span class="pl-c1">1.36178</span>]</pre></div>
</article></div>