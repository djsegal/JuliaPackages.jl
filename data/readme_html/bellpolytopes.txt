<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bellpolytopesjl" class="anchor" aria-hidden="true" href="#bellpolytopesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BellPolytopes.jl</h1>
<p dir="auto"><a href="https://zib-iol.github.io/BellPolytopes.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/zib-iol/BellPolytopes.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/zib-iol/BellPolytopes.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=BellPolytopes" rel="nofollow"><img src="https://camo.githubusercontent.com/d08ea176d4e1cda5d8b8d6021175eddeb5e5ee888cb0d41cbea7eaab1943b41a/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f42656c6c506f6c79746f706573" alt="Genie Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/BellPolytopes" style="max-width: 100%;"></a></p>
<p dir="auto">This package addresses the membership problem for local polytopes: it constructs Bell inequalities and local models in multipartite Bell scenarios with binary outcomes.</p>
<p dir="auto">The original article for which it was written can be found here:</p>
<blockquote>
<p dir="auto"><a href="http://arxiv.org/abs/2302.04721" rel="nofollow">Improved local models and new Bell inequalities via Frank-Wolfe algorithms</a>.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The most recent release is available via the julia package manager, e.g., with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;BellPolytopes&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BellPolytopes<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or the main branch:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(url=&quot;https://github.com/ZIB-IOL/BellPolytopes.jl&quot;, rev=&quot;main&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/ZIB-IOL/BellPolytopes.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Let's say we want to characterise the nonlocality threshold obtained with the two-qubit maximally entangled state and measurements whose Bloch vectors form an icosahedron.
Using <code>BellPolytopes.jl</code>, here is what the code looks like.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BellPolytopes, LinearAlgebra

julia&gt; N = 2; # bipartite scenario

julia&gt; rho = rho_GHZ(N) # two-qubit maximally entangled state
4×4 Matrix{Float64}:
 0.5  0.0  0.0  0.5
 0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0
 0.5  0.0  0.0  0.5

julia&gt; measurements_vec = icosahedron_vec() # Bloch vectors forming an icosahedron
6×3 Matrix{Float64}:
 0.0        0.525731   0.850651
 0.0        0.525731  -0.850651
 0.525731   0.850651   0.0
 0.525731  -0.850651   0.0
 0.850651   0.0        0.525731
 0.850651   0.0       -0.525731

julia&gt; _, lower_bound, upper_bound, local_model, bell_inequality, _ =
       nonlocality_threshold(measurements_vec, N; rho = rho);

julia&gt; println([lower_bound, upper_bound])
[0.7784, 0.7784]

julia&gt; p = correlation_tensor(measurements_vec, N; rho = rho)
6×6 Matrix{Float64}:
  0.447214  -1.0       -0.447214   0.447214   0.447214  -0.447214
 -1.0        0.447214  -0.447214   0.447214  -0.447214   0.447214
 -0.447214  -0.447214  -0.447214   1.0        0.447214   0.447214
  0.447214   0.447214   1.0       -0.447214   0.447214   0.447214
  0.447214  -0.447214   0.447214   0.447214   1.0        0.447214
 -0.447214   0.447214   0.447214   0.447214   0.447214   1.0

julia&gt; final_iterate = sum(local_model.weights[i] * local_model.atoms[i] for i in 1:length(local_model));

julia&gt; norm(final_iterate - lower_bound * p) &lt; 1e-3 # checking local model
true

julia&gt; local_bound(bell_inequality)[1] / dot(bell_inequality, p) # checking the Bell inequality
0.7783914488195466"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BellPolytopes, LinearAlgebra

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">#</span> bipartite scenario</span>

julia<span class="pl-k">&gt;</span> rho <span class="pl-k">=</span> <span class="pl-c1">rho_GHZ</span>(N) <span class="pl-c"><span class="pl-c">#</span> two-qubit maximally entangled state</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.5</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.5</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.5</span>

julia<span class="pl-k">&gt;</span> measurements_vec <span class="pl-k">=</span> <span class="pl-c1">icosahedron_vec</span>() <span class="pl-c"><span class="pl-c">#</span> Bloch vectors forming an icosahedron</span>
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>        <span class="pl-c1">0.525731</span>   <span class="pl-c1">0.850651</span>
 <span class="pl-c1">0.0</span>        <span class="pl-c1">0.525731</span>  <span class="pl-k">-</span><span class="pl-c1">0.850651</span>
 <span class="pl-c1">0.525731</span>   <span class="pl-c1">0.850651</span>   <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.525731</span>  <span class="pl-k">-</span><span class="pl-c1">0.850651</span>   <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.850651</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.525731</span>
 <span class="pl-c1">0.850651</span>   <span class="pl-c1">0.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.525731</span>

julia<span class="pl-k">&gt;</span> _, lower_bound, upper_bound, local_model, bell_inequality, _ <span class="pl-k">=</span>
       <span class="pl-c1">nonlocality_threshold</span>(measurements_vec, N; rho <span class="pl-k">=</span> rho);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>([lower_bound, upper_bound])
[<span class="pl-c1">0.7784</span>, <span class="pl-c1">0.7784</span>]

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">correlation_tensor</span>(measurements_vec, N; rho <span class="pl-k">=</span> rho)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>        <span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>
 <span class="pl-k">-</span><span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>
  <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>
  <span class="pl-c1">0.447214</span>  <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.447214</span>
 <span class="pl-k">-</span><span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">0.447214</span>   <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> final_iterate <span class="pl-k">=</span> <span class="pl-c1">sum</span>(local_model<span class="pl-k">.</span>weights[i] <span class="pl-k">*</span> local_model<span class="pl-k">.</span>atoms[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(local_model));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(final_iterate <span class="pl-k">-</span> lower_bound <span class="pl-k">*</span> p) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-3</span> <span class="pl-c"><span class="pl-c">#</span> checking local model</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">local_bound</span>(bell_inequality)[<span class="pl-c1">1</span>] <span class="pl-k">/</span> <span class="pl-c1">dot</span>(bell_inequality, p) <span class="pl-c"><span class="pl-c">#</span> checking the Bell inequality</span>
<span class="pl-c1">0.7783914488195466</span></pre></div>
<h2 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the hood</h2>
<p dir="auto">The computation is based on an efficient variant of the Frank-Wolfe algorithm to iteratively find the local point closest to the input correlation tensor.
See this recent <a href="https://arxiv.org/abs/2211.14103" rel="nofollow">review</a> for an introduction to the method and the package <a href="https://github.com/ZIB-IOL/FrankWolfe.jl">FrankWolfe.jl</a> for the implementation on which this package relies.</p>
<p dir="auto">In a nutshell, each step gets closer to the objective point:</p>
<ul dir="auto">
<li>either by moving towards a <em>good</em> vertex of the local polytope,</li>
<li>or by astutely combining the vertices (or atoms) already found and stored in the <em>active set</em>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = bell_frank_wolfe(p; v0=0.8, verbose=3, callback_interval=10^2, mode_last=-1);

Visibility: 0.8
 Symmetric: true
   #Inputs: 6
 Dimension: 21

Intervals
    Print: 100
   Renorm: 100
   Reduce: 10000
    Upper: 1000
Increment: 1000

   Iteration        Primal      Dual gap    Time (sec)       #It/sec    #Atoms       #LMO
         100    8.7570e-03    6.0089e-02    6.9701e-04    1.4347e+05        11         26
         200    5.9241e-03    5.4948e-02    9.4910e-04    2.1073e+05        16         33
         300    3.5594e-03    3.4747e-02    1.1942e-03    2.5122e+05        18         40
         400    1.9068e-03    3.4747e-02    1.3469e-03    2.9697e+05        16         42
         500    1.8093e-03    5.7632e-06    1.5409e-03    3.2448e+05        14         48

    Primal: 1.81e-03
  Dual gap: 2.60e-08
      Time: 1.63e-03
    It/sec: 3.28e+05
    #Atoms: 14

v_c ≤ 0.778392"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">bell_frank_wolfe</span>(p; v0<span class="pl-k">=</span><span class="pl-c1">0.8</span>, verbose<span class="pl-k">=</span><span class="pl-c1">3</span>, callback_interval<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>, mode_last<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>);

Visibility<span class="pl-k">:</span> <span class="pl-c1">0.8</span>
 Symmetric<span class="pl-k">:</span> <span class="pl-c1">true</span>
   <span class="pl-c"><span class="pl-c">#</span>Inputs: 6</span>
 Dimension<span class="pl-k">:</span> <span class="pl-c1">21</span>

Intervals
    Print<span class="pl-k">:</span> <span class="pl-c1">100</span>
   Renorm<span class="pl-k">:</span> <span class="pl-c1">100</span>
   Reduce<span class="pl-k">:</span> <span class="pl-c1">10000</span>
    Upper<span class="pl-k">:</span> <span class="pl-c1">1000</span>
Increment<span class="pl-k">:</span> <span class="pl-c1">1000</span>

   Iteration        Primal      Dual gap    Time (sec)       <span class="pl-c"><span class="pl-c">#</span>It/sec    #Atoms       #LMO</span>
         <span class="pl-c1">100</span>    <span class="pl-c1">8.7570e-03</span>    <span class="pl-c1">6.0089e-02</span>    <span class="pl-c1">6.9701e-04</span>    <span class="pl-c1">1.4347e+05</span>        <span class="pl-c1">11</span>         <span class="pl-c1">26</span>
         <span class="pl-c1">200</span>    <span class="pl-c1">5.9241e-03</span>    <span class="pl-c1">5.4948e-02</span>    <span class="pl-c1">9.4910e-04</span>    <span class="pl-c1">2.1073e+05</span>        <span class="pl-c1">16</span>         <span class="pl-c1">33</span>
         <span class="pl-c1">300</span>    <span class="pl-c1">3.5594e-03</span>    <span class="pl-c1">3.4747e-02</span>    <span class="pl-c1">1.1942e-03</span>    <span class="pl-c1">2.5122e+05</span>        <span class="pl-c1">18</span>         <span class="pl-c1">40</span>
         <span class="pl-c1">400</span>    <span class="pl-c1">1.9068e-03</span>    <span class="pl-c1">3.4747e-02</span>    <span class="pl-c1">1.3469e-03</span>    <span class="pl-c1">2.9697e+05</span>        <span class="pl-c1">16</span>         <span class="pl-c1">42</span>
         <span class="pl-c1">500</span>    <span class="pl-c1">1.8093e-03</span>    <span class="pl-c1">5.7632e-06</span>    <span class="pl-c1">1.5409e-03</span>    <span class="pl-c1">3.2448e+05</span>        <span class="pl-c1">14</span>         <span class="pl-c1">48</span>

    Primal<span class="pl-k">:</span> <span class="pl-c1">1.81e-03</span>
  Dual gap<span class="pl-k">:</span> <span class="pl-c1">2.60e-08</span>
      Time<span class="pl-k">:</span> <span class="pl-c1">1.63e-03</span>
    It<span class="pl-k">/</span>sec<span class="pl-k">:</span> <span class="pl-c1">3.28e+05</span>
    <span class="pl-c"><span class="pl-c">#</span>Atoms: 14</span>

v_c <span class="pl-k">≤</span> <span class="pl-c1">0.778392</span></pre></div>
<h2 dir="auto"><a id="user-content-going-further" class="anchor" aria-hidden="true" href="#going-further"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Going further</h2>
<p dir="auto">More examples can be found in the corresponding folder of the package.
They include the construction of a Bell inequality with a higher tolerance to noise as CHSH as well as multipartite instances.</p>
</article></div>