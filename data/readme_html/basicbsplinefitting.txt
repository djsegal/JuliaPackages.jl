<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-basicbsplinefitting" class="anchor" aria-hidden="true" href="#basicbsplinefitting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BasicBSplineFitting</h1>
<p dir="auto"><a href="https://hyrodium.github.io/BasicBSpline.jl/dev/math-fitting/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/hyrodium/BasicBSplineFitting.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/179694110ae62d894690f833ad589c69414a4ec21c74ddb4bd88f81847ef2daa/68747470733a2f2f636f6465636f762e696f2f67682f6879726f6469756d2f42617369634253706c696e6546697474696e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/hyrodium/BasicBSplineFitting.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides <code>fittingcontrolpoints</code> and related functions.
These functions have been moved from <a href="https://github.com/hyrodium/BasicBSpline.jl/releases/tag/v0.9.0">BasicBSpline.jl v0.9.0</a>.</p>
<h2 dir="auto"><a id="user-content-fitting-b-spline-manifold" class="anchor" aria-hidden="true" href="#fitting-b-spline-manifold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting B-spline manifold</h2>
<p dir="auto"><a href="https://www.desmos.com/calculator/2hm3b1fbdf" rel="nofollow">Try on Desmos graphing calculator!</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BasicBSplineFitting

p1 = 2
p2 = 2
k1 = KnotVector(-10:10)+p1*KnotVector([-10,10])
k2 = KnotVector(-10:10)+p2*KnotVector([-10,10])
P1 = BSplineSpace{p1}(k1)
P2 = BSplineSpace{p2}(k2)

f(u1, u2) = SVector(2u1 + sin(u1) + cos(u2) + u2 / 2, 3u2 + sin(u2) + sin(u1) / 2 + u1^2 / 6) / 5

a = fittingcontrolpoints(f, (P1, P2))
M = BSplineManifold(a, (P1, P2))
save_png(&quot;fitting.png&quot;, M, unitlength=50, xlims=(-10,10), ylims=(-10,10))"><pre><span class="pl-k">using</span> BasicBSplineFitting

p1 <span class="pl-k">=</span> <span class="pl-c1">2</span>
p2 <span class="pl-k">=</span> <span class="pl-c1">2</span>
k1 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p1<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
k2 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p2<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p1}</span>(k1)
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p2}</span>(k2)

<span class="pl-en">f</span>(u1, u2) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>u1 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(u2) <span class="pl-k">+</span> u2 <span class="pl-k">/</span> <span class="pl-c1">2</span>, <span class="pl-c1">3</span>u2 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u2) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> u1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">6</span>) <span class="pl-k">/</span> <span class="pl-c1">5</span>

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, (P1, P2))
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, (P1, P2))
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>fitting.png<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting_desmos.png"><img src="docs/src/img/fitting_desmos.png" alt="" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting.png"><img src="docs/src/img/fitting.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">If the knot vector span is too coarse, the approximation will be coarse.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p1 = 2
p2 = 2
k1 = KnotVector(-10:5:10)+p1*KnotVector([-10,10])
k2 = KnotVector(-10:5:10)+p2*KnotVector([-10,10])
P1 = BSplineSpace{p1}(k1)
P2 = BSplineSpace{p2}(k2)

f(u1, u2) = SVector(2u1 + sin(u1) + cos(u2) + u2 / 2, 3u2 + sin(u2) + sin(u1) / 2 + u1^2 / 6) / 5

a = fittingcontrolpoints(f, (P1, P2))
M = BSplineManifold(a, (P1, P2))
save_png(&quot;fitting_coarse.png&quot;, M, unitlength=50, xlims=(-10,10), ylims=(-10,10))"><pre>p1 <span class="pl-k">=</span> <span class="pl-c1">2</span>
p2 <span class="pl-k">=</span> <span class="pl-c1">2</span>
k1 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p1<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
k2 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p2<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p1}</span>(k1)
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p2}</span>(k2)

<span class="pl-en">f</span>(u1, u2) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>u1 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(u2) <span class="pl-k">+</span> u2 <span class="pl-k">/</span> <span class="pl-c1">2</span>, <span class="pl-c1">3</span>u2 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u2) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> u1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">6</span>) <span class="pl-k">/</span> <span class="pl-c1">5</span>

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, (P1, P2))
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, (P1, P2))
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>fitting_coarse.png<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting_coarse.png"><img src="docs/src/img/fitting_coarse.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-draw-smooth-vector-graphics" class="anchor" aria-hidden="true" href="#draw-smooth-vector-graphics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Draw smooth vector graphics</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 3
k = KnotVector(range(-2π,2π,length=8))+p*KnotVector(-2π,2π)
P = BSplineSpace{p}(k)

f(u) = SVector(u,sin(u))

a = fittingcontrolpoints(f, P)
M = BSplineManifold(a, P)
save_svg(&quot;sine-curve.svg&quot;, M, unitlength=50, xlims=(-2,2), ylims=(-8,8))
save_svg(&quot;sine-curve_no-points.svg&quot;, M, unitlength=50, xlims=(-2,2), ylims=(-8,8), points=false)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">3</span>
k <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>π,<span class="pl-c1">2</span>π,length<span class="pl-k">=</span><span class="pl-c1">8</span>))<span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>π,<span class="pl-c1">2</span>π)
P <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p}</span>(k)

<span class="pl-en">f</span>(u) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(u,<span class="pl-c1">sin</span>(u))

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, P)
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, P)
<span class="pl-c1">save_svg</span>(<span class="pl-s"><span class="pl-pds">"</span>sine-curve.svg<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">8</span>))
<span class="pl-c1">save_svg</span>(<span class="pl-s"><span class="pl-pds">"</span>sine-curve_no-points.svg<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">8</span>), points<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/sine-curve.svg"><img src="docs/src/img/sine-curve.svg" alt="" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="docs/src/img/sine-curve_no-points.svg"><img src="docs/src/img/sine-curve_no-points.svg" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">This is useful when you edit graphs (or curves) with your favorite vector graphics editor.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/inkscape.png"><img src="docs/src/img/inkscape.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">See <a href="https://forem.julialang.org/hyrodium/plotting-smooth-graphs-with-julia-6mj" rel="nofollow">Plotting smooth graphs with Julia</a> for more tutorials.</p>
</article></div>