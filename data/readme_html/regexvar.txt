<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-regex-var" class="anchor" aria-hidden="true" href="#regex-var"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Regex var</h1>
<p>This library contains <code>@regex_var</code> which fills the regular expression straight
from the string; you can type the variable next to the regular expression
you want it to match. It uses the regular expressions Julia provides.(which is PCRE)</p>
<p>Usage:(<strong>Note:</strong> the throwing is currently poorly tested)</p>
<pre><code>@regex_var input_string "regex string with $var, $(var::SomeType) and $(var::"regex string")" body
@regex_var input_string "regex string" i_happen_on_mismatch() body
</code></pre>
<p>There is also <code>@regex_case</code>, which runs the body of the first (fully)matching
regex string.</p>
<pre><code>@regex_case input_string begin
    if "a thing:.+" 
        do_a()
    end
    "b thing:.+" : do_b()
end
@regex_case input_string { "a thing:.+" : do_a(), "b thing" : do_b() }
</code></pre>
<h3><a id="user-content-regex-string-structure" class="anchor" aria-hidden="true" href="#regex-string-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Regex string structure</h3>
<p>In using the macros effectively you need to look at what the arguments are
that enter the macro body. If you look at <code>:"abc$(var_a)def$(var_b)"</code> you
see the <code>Expr</code> structure does <em>not</em> simply contain a string. The arguments
for the regex string is basically an <code>expr(:macrocall, {:str, interesting_array...})</code>
Everything except the <code>interesting_array</code> is not important.
(but asserted to be there)</p>
<p>Basically each entry has a matcher, starting from the front, you match the
first one, then you start from the <em>beginning</em> of the match to match the next
one. The reason to start from the beginning, is that the matches can then be
very general, but be terminated by the next match.</p>
<p>Going through the different elements we have:</p>
<p><em>Strings</em>: they're just matched as mentioned.</p>
<p>Symbols -<code>$a</code>- they are completely general matches, the variable is defined
to be whatever between the end of the previous and beginning of the next match.</p>
<p>Symbols with regex -<code>$(a::"regex")</code>- are filled with whatever matches, constrained
by when the next match takes place. <code>$(a::".+")</code> is <code>$a</code></p>
<p>Symbols with types -<code>$(a::SomeType)</code>- uses the regular expression returned from
<code>matcher_of_type</code>, the result is then parsed to get the value with
<code>parse_thing(Type,String)</code>, both are ment to be extended by users.</p>
<p>Symbols where the symbol-string ends in <code>!</code>, they're not one of the programmed-in
exceptions; it will take up the regular expression of the corresponding type
without the <code>!</code>. Otherwise it corresponds to regular expressions:</p>
<table>
<tbody><tr><td>Number sequence</td> <td><code>a::n!</code></td> 
    <td><code>"[0-9]+"</code></td></tr>
<tr><td>Lowercase letters</td> <td><code>a::l!</code></td> 
    <td><code>"[a-z]+"</code></td></tr>
<tr><td>Letters</td> <td><code>a::L!</code></td>
    <td><code>"([a-z]|[A-Z])+"</code></td></tr>
<tr><td>Whitespace</td> <td><code>a::w!</code></td>
    <td><code>"[ \t\n]+"</code></td></tr>
</tbody></table>
<p>There are also 'settings' that can be changed with some of them;</p>
<p><strong>TODO</strong> these dont currently work..</p>
<p><code>$now!</code>,<code>$n!</code>: Makes <em>one</em> next regular expression search start from the <em>end</em> of
the match of the the previous one.</p>
<p><code>$always_now!</code>,<code>$an!</code>: Makes all next searches start from the end.</p>
<p><code>$not_now!</code>,<code>$nn!</code>: Disables the above.</p>
<h3><a id="user-content-convention-on-matcher_of_type" class="anchor" aria-hidden="true" href="#convention-on-matcher_of_type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convention on <code>matcher_of_type</code></h3>
<p>The convention on <code>matcher_of_type</code> is to have the regex of a thing to be
'minimal'. For instance none of the  numbers allow whitespace, neither does
<code>matcher_of_type(Uint)=="[0-9]+"</code>; does <em>not</em> allow for a <code>+</code> infront, whereas
<code>Integer</code> does, because it might also be negative. Similarly <code>Float</code> <em>requires</em> a
dot in it, whereas <code>Number</code> doesnt.</p>
<p>In the future i might try add a way to indicate 'allow whitespace around it' or
'widen what is allowed'.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>Note: perhaps these are a bit arbitrary.</p>
<pre><code>@regex_var input "The kittens name is $now!$(name::L!) he is $age weeks old." (name,age)
@regex_var input "$a,$b,$c" (a,b,c) #Comma separated thing.
@regex_var input ".+$(x::Number)" x #Get the first number.
</code></pre>
<p>More edge-case examples</p>
<pre><code>@regex_var "123q" "$(x::Integer)3" x #returns 12
@regex_var "123q" "$(x::Integer)." x #Invalid input; 1 matches . so parser gets empty string!
#Following returns 123,"12"$n! asks to read _just_ the next one as its own match.
@regex_var "123q123" "$n!$(x::Integer).$(y)3" x,y 
</code></pre>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reference</h2>
<h3><a id="user-content-matcher_of_type-tp" class="anchor" aria-hidden="true" href="#matcher_of_type-tp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>matcher_of_type (tp)`</h3>
<p>Returns a regular expression string corresponding to the given type or symbol.
Symbols can have inbuild</p>
<p>Definitions should be minimal in what they allow to match.</p>
<h3><a id="user-content-parse_thingtptype-strstring" class="anchor" aria-hidden="true" href="#parse_thingtptype-strstring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>parse_thing(tp::Type, str::String)</h3>
<p>Tries to parse the string with the type as a guide.</p>
<h3><a id="user-content-regex_var-input-regex_with_variables-throw_out-body" class="anchor" aria-hidden="true" href="#regex_var-input-regex_with_variables-throw_out-body"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@regex_var input regex_with_variables throw_out body</h3>
<p>Parses the input string, using the regular expressions, and filling variables
within the <code>regex_with_variables</code>, which are available in the <code>body</code>.
If it mismatches <code>throw_out</code> is run, it should return or <code>throw()</code> to 'exit',
<code>throw_out</code> can also be omitted; then it will always error if it mismatches.</p>
<p>For the nature of the regular expressions, read the readme.</p>
<h3><a id="user-content-regex_case-input-clauses" class="anchor" aria-hidden="true" href="#regex_case-input-clauses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@regex_case input clauses</h3>
<p>Clauses may be in <code>begin ...... end</code> or <code>{clause,clause,clause}</code> and single clauses
look like</p>
<pre><code>if "regex_thing"
    then...
end #Or
"regex" : then_do()
</code></pre>
<p>The regular expressions themselves are just like in @regex_var</p>
<h2><a id="user-content-license-mit" class="anchor" aria-hidden="true" href="#license-mit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License: MIT</h2>
<p>Written by <a href="http://ojasper.nl/" rel="nofollow">Jasper den Ouden</a>(entirely, currently) put under
the MIT license, see <code>doc/mit.txt</code>.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h2>
<ul>
<li>Get <code>$now!</code> to work.</li>
<li>A 'match' should mean complete match, if throwing is enabled, it should throw
if last matche doesnt reach the end?</li>
<li>More test coverage.</li>
<li>A behavior changer that wides the allowed range, for instance automatically
allowing whitespace around?</li>
<li><code>parse_thing</code> on streams.(Regex until the matcher doesnt match anymore)</li>
</ul>
</article></div>