<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="/images/logo.png"><img src="/images/logo.png" width="400" alt="Normal Splines" style="max-width: 100%;"></a>
</div>
<h1 dir="auto"><a id="user-content-multivariate-normal-hermite-birkhoff-interpolating-splines-in-julia" class="anchor" aria-hidden="true" href="#multivariate-normal-hermite-birkhoff-interpolating-splines-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multivariate Normal Hermite-Birkhoff Interpolating Splines in Julia</h1>
<p dir="auto"><a href="https://IgorKohan.github.io/NormalHermiteSplines.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://IgorKohan.github.io/NormalHermiteSplines.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/IgorKohan/NormalHermiteSplines.jl/actions/workflows/ci.yml"><img src="https://github.com/IgorKohan/NormalHermiteSplines.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/IgorKohan/NormalHermiteSplines.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e5d7a34a78894a2fab2be81e8f6073e209460148866f259dcf1ef9ebc7b8c32/68747470733a2f2f636f6465636f762e696f2f67682f49676f724b6f68616e2f4e6f726d616c4865726d69746553706c696e65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d796e7379535254676771" alt="codecov" data-canonical-src="https://codecov.io/gh/IgorKohan/NormalHermiteSplines.jl/branch/master/graph/badge.svg?token=ynsySRTggq" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/problem-definition.png"><img src="/images/problem-definition.png" alt="Problem definition" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-instalation" class="anchor" aria-hidden="true" href="#instalation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Instalation</h2>
<p dir="auto">Start Julia and run the following commands:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;NormalHermiteSplines&quot;)"><pre class="notranslate"><code>julia&gt; using Pkg
julia&gt; Pkg.add("NormalHermiteSplines")
</code></pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">To use this package, begin your code with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using NormalHermiteSplines"><pre class="notranslate"><code>using NormalHermiteSplines
</code></pre></div>
<p dir="auto">The first example is the function <code>φ(x,y)=sin(4.0*sqrt(x^2+y^2))</code> defined in the region <code>Ω=[-1,1]x[-1,1]</code>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/m-t-6.png"><img src="/images/m-t-6.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/m-cf-6.png"><img src="/images/m-cf-6.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/m-grid-1,4.png"><img src="/images/m-grid-1,4.png" style="max-width: 100%;"></a></p>
<p dir="auto">We'll construct an interpolating normal spline using this function and its gradient values sampled on set of 1000 Halton nodes ([1]) distributed in the [-1,1]x[-1,1] square.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    using NormalHermiteSplines

    nodes = get_2D_halton_nodes(1000)         # generates Halton data set in [0, 1] x [0, 1]
    n_1 = size(nodes, 2)
    u = Vector{Float64}(undef, n_1)           # function values
    d_nodes = Matrix{Float64}(undef, 2, n_1)  # directional derivative nodes
    es = Matrix{Float64}(undef, 2, n_1)       # derivative directions
    du = Vector{Float64}(undef, n_1)          # directional derivative values

    grad = [0.0; 0.0]
    for i = 1:n_1
        nodes[1, i] = nodes[1, i] * 2.0 - 1.0   # transforming Halton nodes to [-1, 1] x [-1, 1]
        nodes[2, i] = nodes[2, i] * 2.0 - 1.0
        d_nodes[1,i] = nodes[1,i]
        d_nodes[2,i] = nodes[2,i]
        d = sqrt(nodes[1, i]^2 + nodes[2, i]^2) # here d &gt; 0   
        u[i] = sin(4.0 * d)
        grad[1] = 4.0 * nodes[1, i] * cos(4.0 * d) / d
        grad[2] = 4.0 * nodes[2, i] * cos(4.0 * d) / d
        es[1,i] = grad[1]                       # no need to normalize 'es' vectors 
        es[2,i] = grad[2]
        du[i] = norm(grad)
    end

    # Hermite spline must be constructed with RK_H1 or RK_H2 kernel.
    # Here value of the 'scaling parameter' ε is estimated in the interpolate procedure.
    rk = RK_H1()               
    #
    spline = interpolate(nodes, u, d_nodes, es, du, rk)

    grid = get_2D_grid2(100)     # regular grid covering [-1, 1] x [-1, 1]
    σ = evaluate(spline, grid)   # spline values on the grid

    σ1 = evaluate_one(spline, [0.5; 0.5])
    #  ≈ 0.308071   
    #
    #  exact function value at [0.5; 0.5]:
    #  ≈ 0.308072

    g1 = evaluate_gradient(spline, [0.5; 0.5])
    #  ≈ -2.69080
    #  ≈ -2.69090
    # 
    # exact function gradient at [0.5; 0.5]:
    #  ≈ -2.69086
    #  ≈ -2.69086"><pre class="notranslate"><code>    using NormalHermiteSplines

    nodes = get_2D_halton_nodes(1000)         # generates Halton data set in [0, 1] x [0, 1]
    n_1 = size(nodes, 2)
    u = Vector{Float64}(undef, n_1)           # function values
    d_nodes = Matrix{Float64}(undef, 2, n_1)  # directional derivative nodes
    es = Matrix{Float64}(undef, 2, n_1)       # derivative directions
    du = Vector{Float64}(undef, n_1)          # directional derivative values

    grad = [0.0; 0.0]
    for i = 1:n_1
        nodes[1, i] = nodes[1, i] * 2.0 - 1.0   # transforming Halton nodes to [-1, 1] x [-1, 1]
        nodes[2, i] = nodes[2, i] * 2.0 - 1.0
        d_nodes[1,i] = nodes[1,i]
        d_nodes[2,i] = nodes[2,i]
        d = sqrt(nodes[1, i]^2 + nodes[2, i]^2) # here d &gt; 0   
        u[i] = sin(4.0 * d)
        grad[1] = 4.0 * nodes[1, i] * cos(4.0 * d) / d
        grad[2] = 4.0 * nodes[2, i] * cos(4.0 * d) / d
        es[1,i] = grad[1]                       # no need to normalize 'es' vectors 
        es[2,i] = grad[2]
        du[i] = norm(grad)
    end

    # Hermite spline must be constructed with RK_H1 or RK_H2 kernel.
    # Here value of the 'scaling parameter' ε is estimated in the interpolate procedure.
    rk = RK_H1()               
    #
    spline = interpolate(nodes, u, d_nodes, es, du, rk)

    grid = get_2D_grid2(100)     # regular grid covering [-1, 1] x [-1, 1]
    σ = evaluate(spline, grid)   # spline values on the grid

    σ1 = evaluate_one(spline, [0.5; 0.5])
    #  ≈ 0.308071   
    #
    #  exact function value at [0.5; 0.5]:
    #  ≈ 0.308072

    g1 = evaluate_gradient(spline, [0.5; 0.5])
    #  ≈ -2.69080
    #  ≈ -2.69090
    # 
    # exact function gradient at [0.5; 0.5]:
    #  ≈ -2.69086
    #  ≈ -2.69086
</code></pre></div>
<p dir="auto">The spline surface and filled 2-D contour plots:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/s-t-6,1,4,1,0.0,-.png"><img src="/images/s-t-6,1,4,1,0.0,-.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/s-cf-6,1,4,1,0.0,-.png"><img src="/images/s-cf-6,1,4,1,0.0,-.png" width="256" style="max-width: 100%;"></a></p>
<p dir="auto">Approximation error plots:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/delta-s-6,1,4,1,0.0,-.png"><img src="/images/delta-s-6,1,4,1,0.0,-.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/delta-cf-6,1,4,1,0.0,-.png"><img src="/images/delta-cf-6,1,4,1,0.0,-.png" width="256" style="max-width: 100%;"></a></p>
<p dir="auto">Spline was evaluated on a uniform Cartesian grid of size 101x101. Accuracy of the interpolation was measured by calculating the Root Mean Square Error (RMSE) and the Maximum Absolute Error (MAE). For this case
<code>RMSE</code>: 1.6E-03, <code>MAE</code>: 1.1E-01, estimated value of the scaling parameter <code>ε</code> is 8.8, estimation of the Gram matrix condition number is 1.0E+11.</p>
<p dir="auto">The second example is the function <code>Ψ(x,y,z)=cos(π*x)*cos(y-0.5)*sin(π*(z-0.5))</code> defined in the region <code>Ω=[0,1]x[0,1]x[0,1]</code>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/m_grid_6,1,50,_.png"><img src="/images/m_grid_6,1,50,_.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/m_grid_6,2,50,_.png"><img src="/images/m_grid_6,2,50,_.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/m_nodes_6,2,4.png"><img src="/images/m_nodes_6,2,4.png" width="256" style="max-width: 100%;"></a></p>
<p dir="auto">We'll construct an interpolating normal spline using function <code>Ψ</code> values sampled on set of 1000 non-uniform random nodes distributed in the unit cube [0,1]x[0,1]x[0,1].</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    using NormalHermiteSplines

    nodes = get_3D_random_grid(9)       # generates 1000 non-uniform random nodes
    n_1 = size(nodes, 2)
    u = Vector{Float64}(undef, n_1)     # function values
    for i = 1:n_1
        x = nodes[1,i]
        y = nodes[2,i]
        z = nodes[3,i]
        u[i] = cos(π*x)*cos(y-0.5)*sin(π*(z-0.5))
    end

    # Here spline is being constructed with RK_H2 kernel,
    # the 'scaling parameter' ε is defined explicitly.
    rk = RK_H2(5.0)
    #
    spline = interpolate(nodes, u, rk)
    grid = get_3D_grid(50) # creates the uniform Cartesian grid of size 51x51x51 in [0, 1]x[0, 1]x[0, 1]
    σ = evaluate(spline, grid)

    σ1 = evaluate_one(spline, [0.8; 0.6; 0.8])
    #  ≈ -0.65122
    #
    #  exact function value at [0.8; 0.6; 0.8]:
    #  ≈ -0.65124
    
    g1 = evaluate_gradient(spline, [0.8; 0.6; 0.8])
    #  ≈ -1.4862
    #  ≈  0.0653
    #  ≈ -1.4863
    # 
    # exact function gradient at [0.8; 0.6; 0.8]:
    #  ≈ -1.4865
    #  ≈  0.0653
    #  ≈ -1.4865"><pre class="notranslate"><code>    using NormalHermiteSplines

    nodes = get_3D_random_grid(9)       # generates 1000 non-uniform random nodes
    n_1 = size(nodes, 2)
    u = Vector{Float64}(undef, n_1)     # function values
    for i = 1:n_1
        x = nodes[1,i]
        y = nodes[2,i]
        z = nodes[3,i]
        u[i] = cos(π*x)*cos(y-0.5)*sin(π*(z-0.5))
    end

    # Here spline is being constructed with RK_H2 kernel,
    # the 'scaling parameter' ε is defined explicitly.
    rk = RK_H2(5.0)
    #
    spline = interpolate(nodes, u, rk)
    grid = get_3D_grid(50) # creates the uniform Cartesian grid of size 51x51x51 in [0, 1]x[0, 1]x[0, 1]
    σ = evaluate(spline, grid)

    σ1 = evaluate_one(spline, [0.8; 0.6; 0.8])
    #  ≈ -0.65122
    #
    #  exact function value at [0.8; 0.6; 0.8]:
    #  ≈ -0.65124
    
    g1 = evaluate_gradient(spline, [0.8; 0.6; 0.8])
    #  ≈ -1.4862
    #  ≈  0.0653
    #  ≈ -1.4863
    # 
    # exact function gradient at [0.8; 0.6; 0.8]:
    #  ≈ -1.4865
    #  ≈  0.0653
    #  ≈ -1.4865
</code></pre></div>
<p dir="auto">The spline plots:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/s_grid_6,false,2,4,2,_5.0,1,50,_.png"><img src="/images/s_grid_6,false,2,4,2,_5.0,1,50,_.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/s_grid_6,false,2,4,2,_5.0,2,50,_.png"><img src="/images/s_grid_6,false,2,4,2,_5.0,2,50,_.png" width="256" style="max-width: 100%;"></a></p>
<p dir="auto">Approximation error plots:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/delta_t_6,false,2,4,2,_5.0,1,50,_.png"><img src="/images/delta_t_6,false,2,4,2,_5.0,1,50,_.png" width="256" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/images/delta_t_6,false,2,4,2,_5.0,2,50,_.png"><img src="/images/delta_t_6,false,2,4,2,_5.0,2,50,_.png" width="256" style="max-width: 100%;"></a></p>
<p dir="auto">Spline was evaluated on a uniform Cartesian grid of size 51x51x51. For this case <code>RMSE</code>: 2.9E-03, <code>MAE</code>: 5.1E-02, value of the scaling parameter <code>ε</code> is 5.0, estimation of the Gram matrix condition number is 1.0E+14.</p>
<p dir="auto">Further examples are given in documentation.</p>
<p dir="auto">The normal splines method for one-dimensional function interpolation and linear ordinary differential and integral equations was proposed in [2]. An idea of the multivariate splines in Sobolev space was initially formulated in [8], however it was not well-suited to solving real-world problems. Using that idea the multivariate generalization of the normal splines method was developed for two-dimensional problem of low-range computerized tomography in [3] and applied for solving a mathematical economics problem in [4]. At the same time an interpolation scheme with Matérn kernels was developed in [9], this scheme coincides with interpolating normal splines method. Further results related to  applications of the normal splines method were reported at the seminars and conferences [5,6,7].</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">For more information and explanation see <a href="https://igorkohan.github.io/NormalHermiteSplines.jl/stable/" rel="nofollow">Documentation</a>.</p>
<p dir="auto"><strong>References</strong></p>
<p dir="auto">[1] <a href="https://en.wikipedia.org/wiki/Halton_sequence" rel="nofollow">Halton sequence</a></p>
<p dir="auto">[2] V. Gorbunov, The method of normal spline collocation. <a href="https://www.researchgate.net/publication/265357408_Method_of_normal_spline-collocation" rel="nofollow">USSR Computational Mathematics and Mathematical Physics, Vol. 29, No. 1, 1989</a></p>
<p dir="auto">[3] I. Kohanovsky, Normal Splines in Computing Tomography (Нормальные сплайны в вычислительной томографии). <a href="https://www.iae.nsk.su/images/stories/5_Autometria/5_Archives/1995/2/84-89.pdf" rel="nofollow">Avtometriya, No.2, 1995</a></p>
<p dir="auto">[4] V. Gorbunov, I. Kohanovsky, K. Makedonsky, Normal splines in reconstruction of multi-dimensional dependencies. <a href="http://www.wseas.us/e-library/conferences/corfu2004/papers/488-312.pdf" rel="nofollow">Papers of WSEAS International Conference on Applied Mathematics, Numerical Analysis Symposium, Corfu, 2004</a></p>
<p dir="auto">[5] I. Kohanovsky, Multidimensional Normal Splines and Problem of Physical Field Approximation, International Conference on Fourier Analysis and its Applications, Kuwait, 1998.</p>
<p dir="auto">[6] I. Kohanovsky, Inequality-Constrained Multivariate Normal Splines with Some Applications in Finance. <a href="https://www.mis.mpg.de/scicomp/gamm27/Igor_Kohanovsky.pdf" rel="nofollow">27th GAMM-Seminar on Approximation of Multiparametric functions</a>, Max-Planck-Institute for Mathematics in the Sciences, Leipzig, Germany, 2011.</p>
<p dir="auto">[7] V. Gorbunov, I. Kohanovsky, Heterogeneous Parallel Method for the Construction of Multi-dimensional Smoothing Splines. <a href="https://www.ana.iusiani.ulpgc.es/proyecto2015-2017/pdfnew/ESCO2014_Book_of_Abstracts.pdf" rel="nofollow">ESCO 2014 4th European Seminar on Computing, 2014</a></p>
<p dir="auto">[8] A. Imamov,  M. Dzhurabaev, Splines in S.L. Sobolev spaces (Сплайны в пространствах С.Л.Соболева). Deposited manuscript. Dep. UzNIINTI, No 880, 1989.</p>
<p dir="auto">[9] J. Dix, R. Ogden, An Interpolation Scheme with Radial Basis in Sobolev Spaces H^s(R^n). <a href="https://projecteuclid.org/download/pdf_1/euclid.rmjm/1181072340" rel="nofollow">Rocky Mountain J. Math. Vol. 24, No.4,  1994.</a></p>
</article></div>