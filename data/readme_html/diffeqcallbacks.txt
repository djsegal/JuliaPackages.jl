<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-diffeqcallbacksjl" class="anchor" aria-hidden="true" href="#diffeqcallbacksjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqCallbacks.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/063a520f1733d1b53d1e2fdb37b70a8016dd36f6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/JuliaDiffEq/DiffEqCallbacks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b380ac5b01166cde0a47dbdb2a735d7672cbb5b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f44696666457143616c6c6261636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/DiffEqCallbacks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/diffeqcallbacks-jl-ufx45" rel="nofollow"><img src="https://camo.githubusercontent.com/5f30828a0cd69c64f902fa8558a555611a2cb3c5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f61336f3161346c3478716377757738363f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/a3o1a4l4xqcwuw86?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DiffEqCallbacks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/33f533de2253dd51aba1d885c51c81725e277ad6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614469666645712f44696666457143616c6c6261636b732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiffEq/DiffEqCallbacks.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/DiffEqCallbacks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/80b164df2ee8684eedba51e85bed90129eb79334/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614469666645712f44696666457143616c6c6261636b732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaDiffEq/DiffEqCallbacks.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a library of callbacks for extending the solvers of DifferentialEquations.jl.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>To use the callbacks provided in this library with DifferentialEquations.jl solvers,
just pass it to the solver via the <code>callback</code> keyword argument:</p>
<div class="highlight highlight-source-julia"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,alg;callback<span class="pl-k">=</span>cb)</pre></div>
<p>For more information on using callbacks, <a href="http://docs.sciml.ai/dev/features/callback_functions" rel="nofollow">see the manual page</a>.</p>
<h2><a id="user-content-manifoldprojection" class="anchor" aria-hidden="true" href="#manifoldprojection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ManifoldProjection</h2>
<p>This projects the solution to a manifold, conserving a property while
conserving the order.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ManifoldProjection</span>(g;nlsolve<span class="pl-k">=</span><span class="pl-c1">NLSOLVEJL_SETUP</span>(),save<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<ul>
<li><code>g</code>: The residual function for the manifold: <code>g(resid,u)</code>. This is an inplace function
which writes to the residual the difference from the manifold components.</li>
<li><code>nlsolve</code>: A nonlinear solver as defined <a href="linear_nonlinear.html">in the nlsolve format</a></li>
<li><code>save</code>: Whether to do the standard saving (applied after the callback)</li>
</ul>
<h2><a id="user-content-autoabstol" class="anchor" aria-hidden="true" href="#autoabstol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoAbstol</h2>
<p>Many problem solving environments <a href="https://www.mathworks.com/help/simulink/gui/absolute-tolerance.html" rel="nofollow">such as MATLAB</a>
provide a way to automatically adapt the absolute tolerance to the problem. This
helps the solvers automatically "learn" what appropriate limits are. Via the
callback interface, DiffEqCallbacks.jl implements a callback <code>AutoAbstol</code> which
has the same behavior as the MATLAB implementation, that is the absolute tolerance
starts at <code>init_curmax</code> (default <code>1-e6</code>), and at each iteration it is set
to the maximum value that the state has thus far reached times the relative tolerance.</p>
<p>To generate the callback, use the constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">AutoAbstol</span>(save<span class="pl-k">=</span><span class="pl-c1">true</span>;init_curmax<span class="pl-k">=</span><span class="pl-c1">1e-6</span>)</pre></div>
<p><code>save</code> determines whether this callback has saving enabled, and <code>init_curmax</code> is
the initial <code>abstol</code>. If this callback is used in isolation, <code>save=true</code> is required
for normal saving behavior. Otherwise, <code>save=false</code> should be set to ensure
extra saves do not occur.</p>
<h2><a id="user-content-domain-controls" class="anchor" aria-hidden="true" href="#domain-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Domain Controls</h2>
<p>The domain controls are efficient methods for preserving a domain relation for
the solution value <code>u</code>. Unlike the <code>isoutofdomain</code> method, these methods use
interpolations and extrapolations to more efficiently choose stepsizes, but
require that the solution is well defined slightly outside of the domain.</p>
<h3><a id="user-content-positivedomain" class="anchor" aria-hidden="true" href="#positivedomain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PositiveDomain</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PositiveDomain</span>(u<span class="pl-k">=</span><span class="pl-c1">nothing</span>; save<span class="pl-k">=</span><span class="pl-c1">true</span>, abstol<span class="pl-k">=</span><span class="pl-c1">nothing</span>, scalefactor<span class="pl-k">=</span><span class="pl-c1">nothing</span>)</pre></div>
<h3><a id="user-content-generaldomain" class="anchor" aria-hidden="true" href="#generaldomain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GeneralDomain</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">GeneralDomain</span>(g, u<span class="pl-k">=</span><span class="pl-c1">nothing</span>; nlsolve<span class="pl-k">=</span><span class="pl-c1">NLSOLVEJL_SETUP</span>(), save<span class="pl-k">=</span><span class="pl-c1">true</span>,
                       abstol<span class="pl-k">=</span><span class="pl-c1">nothing</span>, scalefactor<span class="pl-k">=</span><span class="pl-c1">nothing</span>, autonomous<span class="pl-k">=</span><span class="pl-c1">numargs</span>(g)<span class="pl-k">==</span><span class="pl-c1">2</span>,
                       nlopts<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">:ftol</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">eps</span>()))</pre></div>
<h2><a id="user-content-stepsizelimiter" class="anchor" aria-hidden="true" href="#stepsizelimiter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StepsizeLimiter</h2>
<p>The stepsize limiter lets you define a function <code>dtFE(u,p,t)</code> which changes the
allowed maximal stepsize throughout the computation. The constructor is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">StepsizeLimiter</span>(dtFE;safety_factor<span class="pl-k">=</span><span class="pl-c1">9</span><span class="pl-k">//</span><span class="pl-c1">10</span>,max_step<span class="pl-k">=</span><span class="pl-c1">false</span>,cached_dtcache<span class="pl-k">=</span><span class="pl-c1">0.0</span>)</pre></div>
<p><code>dtFE</code> is the maximal timestep and is calculated using the previous <code>t</code> and <code>u</code>.
<code>safety_factor</code> is the factor below the true maximum that will be stepped to
which defaults to <code>9//10</code>. <code>max_step=true</code> makes every step equal to
<code>safety_factor*dtFE(u,p,t)</code> when the solver is set to <code>adaptive=false</code>. <code>cached_dtcache</code>
should be set to match the type for time when not using Float64 values.</p>
<h2><a id="user-content-functioncallingcallback" class="anchor" aria-hidden="true" href="#functioncallingcallback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FunctionCallingCallback</h2>
<p>The function calling callback lets you define a function <code>func(u,t,integrator)</code>
which gets calls at the time points of interest. The constructor is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">FunctionCallingCallback</span>(func;
               funcat<span class="pl-k">=</span><span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(),
               func_everystep<span class="pl-k">=</span><span class="pl-c1">isempty</span>(funcat),
               func_start <span class="pl-k">=</span> <span class="pl-c1">true</span>
               tdir<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<ul>
<li><code>func(t, u, integrator)</code> is the function to be called.</li>
<li><code>funcat</code> values that the function is sure to be evaluated at.</li>
<li><code>func_everystep</code> whether to call the function after each integrator step.</li>
<li><code>func_start</code> whether the function is called the initial condition.</li>
<li><code>tdir</code> should be <code>sign(tspan[end]-tspan[1])</code>. It defaults to <code>1</code> and should
be adapted if <code>tspan[1] &gt; tspan[end]</code>.</li>
</ul>
<h2><a id="user-content-savingcallback" class="anchor" aria-hidden="true" href="#savingcallback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SavingCallback</h2>
<p>The saving callback lets you define a function <code>save_func(u, t, integrator)</code> which
returns quantities of interest that shall be saved. The constructor is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">SavingCallback</span>(save_func, saved_values<span class="pl-k">::</span><span class="pl-c1">SavedValues</span>;
               saveat<span class="pl-k">=</span><span class="pl-c1">Vector</span><span class="pl-c1">{eltype(saved_values.t)}</span>(),
               save_everystep<span class="pl-k">=</span><span class="pl-c1">isempty</span>(saveat),
               save_start <span class="pl-k">=</span> <span class="pl-c1">true</span>,
               tdir<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<ul>
<li><code>save_func(u, t, integrator)</code> returns the quantities which shall be saved.
Note that this should allocate the output (not as a view to <code>u</code>).</li>
<li><code>saved_values::SavedValues</code> is the types that <code>save_func</code> will return, i.e.
<code>save_func(t, u, integrator)::savevalType</code>. It's specified via
<code>SavedValues(typeof(t),savevalType)</code>, i.e. give the type for time and the
type that <code>save_func</code> will output (or higher compatible type).</li>
<li><code>saveat</code> mimics <code>saveat</code> in <code>solve</code> from <code>solve</code>.</li>
<li><code>save_everystep</code> mimics <code>save_everystep</code> from <code>solve</code>.</li>
<li><code>save_start</code> mimics <code>save_start</code> from <code>solve</code>.</li>
<li><code>tdir</code> should be <code>sign(tspan[end]-tspan[1])</code>. It defaults to <code>1</code> and should
be adapted if <code>tspan[1] &gt; tspan[end]</code>.</li>
</ul>
<p>The outputted values are saved into <code>saved_values</code>. Time points are found via
<code>saved_values.t</code> and the values are <code>saved_values.saveval</code>.</p>
<h2><a id="user-content-presettimecallback" class="anchor" aria-hidden="true" href="#presettimecallback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PresetTimeCallback</h2>
<p><code>PresetTimeCallback</code> is a callback that adds callback <code>affect!</code> calls at preset
times. No playing around with <code>tstops</code> or anything is required: this callback
adds the triggers for you to make it automatic.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PresetTimeCallback</span>(tstops,user_affect!;
                            initialize <span class="pl-k">=</span> DiffEqBase<span class="pl-k">.</span>INITIALIZE_DEFAULT,
                            filter_tstops <span class="pl-k">=</span> <span class="pl-c1">true</span>,
                            kwargs<span class="pl-k">...</span>)</pre></div>
<ul>
<li><code>tstops</code>: the times for the <code>affect!</code> to trigger at.</li>
<li><code>user_affect!</code>: an <code>affect!(integrator)</code> function to use at the time points.</li>
<li><code>filter_tstops</code>: Whether to filter out tstops beyond the end of the integration timespan.
Defaults to true. If false, then tstops can extend the interval of integration.</li>
</ul>
<h2><a id="user-content-iterativecallback" class="anchor" aria-hidden="true" href="#iterativecallback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IterativeCallback</h2>
<p><code>IterativeCallback</code> is a callback to be used to iteratively apply some affect.
For example, if given the first effect at <code>t₁</code>, you can define <code>t₂</code> to apply
the next effect.</p>
<p>A <code>IterativeCallback</code> is constructed as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">IterativeCallback</span>(time_choice, user_affect!,tType <span class="pl-k">=</span> Float64;
                           initial_affect <span class="pl-k">=</span> <span class="pl-c1">false</span>, kwargs<span class="pl-k">...</span>)</pre></div>
<p>where <code>time_choice(integrator)</code> determines the time of the next callback and
<code>user_affect!</code> is the effect applied to the integrator at the stopping points.
If <code>nothing</code> is returned for the time choice then the iterator ends. <code>initial_affect</code>
is whether to apply the affect at <code>t=0</code> which defaults to <code>false</code></p>
<h2><a id="user-content-periodiccallback" class="anchor" aria-hidden="true" href="#periodiccallback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PeriodicCallback</h2>
<p><code>PeriodicCallback</code> can be used when a function should be called periodically in terms of integration time (as opposed to wall time), i.e. at <code>t = tspan[1]</code>, <code>t = tspan[1] + Δt</code>, <code>t = tspan[1] + 2Δt</code>, and so on. This callback can, for example, be used to model a discrete-time controller for a continuous-time system, running at a fixed rate.</p>
<p>A <code>PeriodicCallback</code> can be constructed as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PeriodicCallback</span>(f, Δt<span class="pl-k">::</span><span class="pl-c1">Number</span>; initial_affect <span class="pl-k">=</span> <span class="pl-c1">true</span>, kwargs<span class="pl-k">...</span>)</pre></div>
<p>where <code>f</code> is the function to be called periodically, <code>Δt</code> is the period, <code>initial_affect</code> is whether to apply
the affect at <code>t=0</code> which defaults to <code>true</code>, and <code>kwargs</code> are keyword arguments accepted by the <code>DiscreteCallback</code> constructor.</p>
<h2><a id="user-content-terminatesteadystate" class="anchor" aria-hidden="true" href="#terminatesteadystate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TerminateSteadyState</h2>
<p><code>TerminateSteadyState</code> can be used to solve the problem for the steady-state
by running the solver until the derivatives of the problem converge to 0 or
<code>tspan[2]</code> is reached. This is an alternative approach to root finding (see
the <a href="@ref">Steady State Solvers</a> section). The constructor of this callback is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">TerminateSteadyState</span>(abstol <span class="pl-k">=</span> <span class="pl-c1">1e-8</span>, reltol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>, test <span class="pl-k">=</span> allDerivPass)</pre></div>
<p>where <code>abstol</code> and <code>reltol</code> are the absolute and relative tolerance, respectively.
These tolerances may be specified as scalars or as arrays of the same length
as the states of the problem. <code>test</code> represents the function that evaluates the
condition for termination. The default condition is that all derivatives should
become smaller than <code>abstol</code> and the states times <code>reltol</code>. The user
can pass any other function to implement a different termination condition. Such
function should take four arguments: <code>integrator</code> (see <a href="@ref">Integrator Interface</a>
for details), <code>abstol</code> and <code>reltol</code>.</p>
</article></div>