<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-typedcodeutils" class="anchor" aria-hidden="true" href="#typedcodeutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TypedCodeUtils</h1>
<p>This package performs operations on Julia's typed IR.</p>
<h2><a id="user-content-example-your-own-cthulhujl" class="anchor" aria-hidden="true" href="#example-your-own-cthulhujl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Your own Cthulhu.jl</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TypedCodeUtils
import TypedCodeUtils: reflect, filter, lookthrough,
                       DefaultConsumer, Reflection, Callsite,
                       identify_invoke, identify_call,
                       process_invoke, process_call

# Cthulhu's inner loop
function cthulhu(ref::Reflection)
    callsites = Callsite[]

    invokes      = filter((c)-&gt;lookthrough(identify_invoke,      c), ref.CI.code)
    calls        = filter((c)-&gt;lookthrough(identify_call,        c), ref.CI.code)

    invokes = map((arg) -&gt; process_invoke(DefaultConsumer(), ref, arg...), invokes)
    append!(callsites, invokes)
    calls = map((arg) -&gt; process_call(DefaultConsumer(), ref, arg...), calls)
    append!(callsites, calls)

    sort!(callsites, by=(c)-&gt;c.id)
    return callsites
end

params = TypedCodeUtils.current_params()
ref = reflect(f, Tuple{Int, Int}, params=params)
calls = cthulhu(ref)
nextrefs = collect(reflect(c) for c in calls if TypedCodeUtils.canreflect(c))
"><pre><span class="pl-k">using</span> TypedCodeUtils
<span class="pl-k">import</span> TypedCodeUtils<span class="pl-k">:</span> reflect, filter, lookthrough,
                       DefaultConsumer, Reflection, Callsite,
                       identify_invoke, identify_call,
                       process_invoke, process_call

<span class="pl-c"><span class="pl-c">#</span> Cthulhu's inner loop</span>
<span class="pl-k">function</span> <span class="pl-en">cthulhu</span>(ref<span class="pl-k">::</span><span class="pl-c1">Reflection</span>)
    callsites <span class="pl-k">=</span> Callsite[]

    invokes      <span class="pl-k">=</span> <span class="pl-c1">filter</span>((c)<span class="pl-k">-&gt;</span><span class="pl-c1">lookthrough</span>(identify_invoke,      c), ref<span class="pl-k">.</span>CI<span class="pl-k">.</span>code)
    calls        <span class="pl-k">=</span> <span class="pl-c1">filter</span>((c)<span class="pl-k">-&gt;</span><span class="pl-c1">lookthrough</span>(identify_call,        c), ref<span class="pl-k">.</span>CI<span class="pl-k">.</span>code)

    invokes <span class="pl-k">=</span> <span class="pl-c1">map</span>((arg) <span class="pl-k">-&gt;</span> <span class="pl-c1">process_invoke</span>(<span class="pl-c1">DefaultConsumer</span>(), ref, arg<span class="pl-k">...</span>), invokes)
    <span class="pl-c1">append!</span>(callsites, invokes)
    calls <span class="pl-k">=</span> <span class="pl-c1">map</span>((arg) <span class="pl-k">-&gt;</span> <span class="pl-c1">process_call</span>(<span class="pl-c1">DefaultConsumer</span>(), ref, arg<span class="pl-k">...</span>), calls)
    <span class="pl-c1">append!</span>(callsites, calls)

    <span class="pl-c1">sort!</span>(callsites, by<span class="pl-k">=</span>(c)<span class="pl-k">-&gt;</span>c<span class="pl-k">.</span>id)
    <span class="pl-k">return</span> callsites
<span class="pl-k">end</span>

params <span class="pl-k">=</span> TypedCodeUtils<span class="pl-k">.</span><span class="pl-c1">current_params</span>()
ref <span class="pl-k">=</span> <span class="pl-c1">reflect</span>(f, Tuple{Int, Int}, params<span class="pl-k">=</span>params)
calls <span class="pl-k">=</span> <span class="pl-c1">cthulhu</span>(ref)
nextrefs <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reflect</span>(c) <span class="pl-k">for</span> c <span class="pl-k">in</span> calls <span class="pl-k">if</span> TypedCodeUtils<span class="pl-k">.</span><span class="pl-c1">canreflect</span>(c))</pre></div>
</article></div>