<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-entropystableeuler" class="anchor" aria-hidden="true" href="#entropystableeuler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EntropyStableEuler</h1>
<p><a href="https://github.com/jlchan/EntropyStableEuler.jl/actions"><img src="https://github.com/jlchan/EntropyStableEuler.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jlchan/EntropyStableEuler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8525bce2233f5582492c67cabfec1c5c41fa5f47e4398bf2f3fe5a7d84e685df/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6368616e2f456e74726f7079537461626c6545756c65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jlchan/EntropyStableEuler.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Provides entropy stable finite volume fluxes for the compressible Euler equations, as well as formulas for transformations between conservative and entropy variables.</p>
<p>Code based off of formulas in <a href="https://doi.org/10.4208/cicp.170712.010313a" rel="nofollow">Chandrashekar 2012</a> and <a href="https://link.springer.com/article/10.1007/s10543-019-00789-w" rel="nofollow">Winters et al. 2019</a>. Formulas for entropy variables are from <a href="https://doi.org/10.1016/0045-7825(86)90127-1" rel="nofollow">Hughes, Mallet, Franca 1986</a>.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The package exports</p>
<ul>
<li>The <code>Euler{d}</code> type, which is used to dispatch on 1D, 2D, and 3D formulas.</li>
<li><code>fS(Euler{d}(),UL,UR)</code>, which evaluates d-dimensional EC fluxes using conservative variables.</li>
<li><code>fS_prim(Euler{d}(),QL,QR)</code>, which evaluates entropy conservative fluxes using primitive variables <code>Q = (ρ,uvw...,β)</code>.</li>
<li><code>fS_prim_log(Euler{d}(),QL,QR)</code>, which takes advantage of precomputed logarithms. Solutions are assumed to be of the form <code>Q = (ρ,uvw...,β,log(ρ),log(β))</code>.</li>
<li><code>u_vfun(Euler{d}(),V), v_ufun(Euler{d}(),U)</code> to convert between conservative variables <code>U</code> and entropy variables <code>V</code></li>
<li><code>cons_to_prim_beta(Euler{d}(),U)</code> to convert between conservative and "primitive" variables (involving inverse temperature β) used to evaluate fluxes.</li>
</ul>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EntropyStableEuler

# construct solution at two states
UL = map(x-&gt;x.*ones(4),(1,.1,.2,2))
UR = map(x-&gt;x.*ones(4),(1.1,.2,.3,2.5))

# evaluate fluxes
Fx,Fy = fS(Euler{2}(),UL,UR)

# pass in primitive vars/precomputed logs for efficiency
QL,QR = cons_to_prim_beta.(Euler{2}(),(UL,UR))
Fx,Fy = fS_prim(Euler{2}(),QL,QR)

QlogL = map(x-&gt;log.(x),(first(QL),last(QL)))
QlogR = map(x-&gt;log.(x),(first(QR),last(QR)))
Fx,Fy = fS_prim_log(Euler{2}(),QL,QR,QlogL,QlogR)
"><pre><span class="pl-k">using</span> EntropyStableEuler

<span class="pl-c"><span class="pl-c">#</span> construct solution at two states</span>
UL <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.*</span><span class="pl-c1">ones</span>(<span class="pl-c1">4</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">.1</span>,<span class="pl-c1">.2</span>,<span class="pl-c1">2</span>))
UR <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.*</span><span class="pl-c1">ones</span>(<span class="pl-c1">4</span>),(<span class="pl-c1">1.1</span>,<span class="pl-c1">.2</span>,<span class="pl-c1">.3</span>,<span class="pl-c1">2.5</span>))

<span class="pl-c"><span class="pl-c">#</span> evaluate fluxes</span>
Fx,Fy <span class="pl-k">=</span> <span class="pl-c1">fS</span>(<span class="pl-c1">Euler</span><span class="pl-c1">{2}</span>(),UL,UR)

<span class="pl-c"><span class="pl-c">#</span> pass in primitive vars/precomputed logs for efficiency</span>
QL,QR <span class="pl-k">=</span> <span class="pl-c1">cons_to_prim_beta</span>.(<span class="pl-c1">Euler</span><span class="pl-c1">{2}</span>(),(UL,UR))
Fx,Fy <span class="pl-k">=</span> <span class="pl-c1">fS_prim</span>(<span class="pl-c1">Euler</span><span class="pl-c1">{2}</span>(),QL,QR)

QlogL <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">log</span>.(x),(<span class="pl-c1">first</span>(QL),<span class="pl-c1">last</span>(QL)))
QlogR <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">log</span>.(x),(<span class="pl-c1">first</span>(QR),<span class="pl-c1">last</span>(QR)))
Fx,Fy <span class="pl-k">=</span> <span class="pl-c1">fS_prim_log</span>(<span class="pl-c1">Euler</span><span class="pl-c1">{2}</span>(),QL,QR,QlogL,QlogR)</pre></div>
<h1><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To-do</h1>
<ul>
<li>add Lax-Friedrichs penalty and matrix dissipation from <a href="https://doi.org/10.1016/j.jcp.2016.12.006" rel="nofollow">Winters et al. 2017</a></li>
<li>Jacobians for transforms between conservative and entropy variables</li>
<li>viscous entropy variable matrices for compressible Navier-Stokes</li>
</ul>
</article></div>