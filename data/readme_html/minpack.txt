<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-minpack" class="anchor" aria-hidden="true" href="#minpack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MINPACK</h1>
<p dir="auto"><a href="https://travis-ci.org/sglyon/MINPACK.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/372af96f0af95ce0261e8db7e6c522e760575d824ae9a367f01aeddd427415bf/68747470733a2f2f7472617669732d63692e6f72672f73676c796f6e2f4d494e5041434b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sglyon/MINPACK.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://ci.appveyor.com/project/spencerlyon2/minpack-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df255632ab0d9afe28f6b450d25606f38469fc964979b550caf55ce2f756b989/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f687231666a6c396c646b3632716c38763f7376673d74727565" alt="Windows Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/hr1fjl9ldk62ql8v?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/sglyon/MINPACK.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8c721e5b3591dfc4599c30add00605608af23119e5a9c489ddc4fb15714451d1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73676c796f6e2f4d494e5041434b2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/sglyon/MINPACK.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/sglyon/MINPACK.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/54d4be6fa3b2f7cc61138cb13d679f4844c8c8e60fa07a33e797e8717c31e986/687474703a2f2f636f6465636f762e696f2f6769746875622f73676c796f6e2f4d494e5041434b2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/sglyon/MINPACK.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Julia interface to <a href="https://github.com/devernay/cminpack">cminpack</a>, a C/C++ rewrite of the MINPACK software (originally in fortran).</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Usage is quite simple, there are two main API methods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fsolve(f!::Function, x0::Vector{Float64}, m::Int=length(x0); tol::Float64=1e-8,
       show_trace::Bool=false, tracing::Bool=false, method::Symbol=:hybr,
       iterations::Int=typemax(Int), io::IO=STDOUT, kwargs...)

fsolve(f!::Function, g!::Function, x0::Vector{Float64}, m::Int=length(x0);
       tol::Float64=1e-8, show_trace::Bool=false, tracing::Bool=false,
       method::Symbol=:hybr, iterations::Int=typemax(Int), io::IO=STDOUT,
       kwargs...)"><pre><span class="pl-c1">fsolve</span>(f!<span class="pl-k">::</span><span class="pl-c1">Function</span>, x0<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">length</span>(x0); tol<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1e-8</span>,
       show_trace<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, tracing<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, method<span class="pl-k">::</span><span class="pl-c1">Symbol</span><span class="pl-k">=</span><span class="pl-c1">:hybr</span>,
       iterations<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">typemax</span>(Int), io<span class="pl-k">::</span><span class="pl-c1">IO</span><span class="pl-k">=</span>STDOUT, kwargs<span class="pl-k">...</span>)

<span class="pl-c1">fsolve</span>(f!<span class="pl-k">::</span><span class="pl-c1">Function</span>, g!<span class="pl-k">::</span><span class="pl-c1">Function</span>, x0<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">length</span>(x0);
       tol<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1e-8</span>, show_trace<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, tracing<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>,
       method<span class="pl-k">::</span><span class="pl-c1">Symbol</span><span class="pl-k">=</span><span class="pl-c1">:hybr</span>, iterations<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">typemax</span>(Int), io<span class="pl-k">::</span><span class="pl-c1">IO</span><span class="pl-k">=</span>STDOUT,
       kwargs<span class="pl-k">...</span>)</pre></div>
<p dir="auto">The functions <code>f!</code> and <code>g!</code> should accept the current point (call it <code>x</code>) as the <em>second</em> argument and fill the first argument with the function values and Jacobian matrix, repsectively. If no Jacobian is passed, one will be approximated using finite differences.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MINPACK

julia&gt; function f!(fvec, x)
           fvec[1] = (x[1]+3)*(x[2]^3-7)+18
           fvec[2] = sin(x[2]*exp(x[1])-1)
           fvec
       end;

julia&gt; function g!(fjac, x)
           fjac[1, 1] = x[2]^3 - 7
           fjac[1, 2] = 3 * (x[1] + 3) * x[2]*x[2]
           fjac[2, 1] = x[2] * exp(x[1]) * cos(x[2] * exp(x[1]) - 1)
           fjac[2, 2] = exp(x[1]) * cos(x[2] * exp(x[1]) - 1)
           fjac
       end
g! (generic function with 2 methods)

julia&gt; res_jac = fsolve(f!, g!, ones(2))
Results of Nonlinear Solver Algorithm
 * Algorithm: Modified Powell (User Jac, Expert)
 * Starting Point: [1.0, 1.0]
 * Zero: [6.05177e-12, 1.0]
 * Inf-norm of residuals: 0.000000
 * Convergence: true
 * Message: algorithm estimates that the relative error between x and the solution is at most tol
 * Total time: 0.033416 seconds
 * Function Calls: 0
 * Jacobian Calls (df/dx): 0

julia&gt; res_nojac = fsolve(f!, ones(2))
Results of Nonlinear Solver Algorithm
 * Algorithm: Modified Powell
 * Starting Point: [1.0, 1.0]
 * Zero: [6.05138e-12, 1.0]
 * Inf-norm of residuals: 0.000000
 * Convergence: true
 * Message: algorithm estimates that the relative error between x and the solution is at most tol
 * Total time: 0.000024 seconds
 * Function Calls: 0
 * Jacobian Calls (df/dx): 0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MINPACK

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f!</span>(fvec, x)
           fvec[<span class="pl-c1">1</span>] <span class="pl-k">=</span> (x[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>(x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">7</span>)<span class="pl-k">+</span><span class="pl-c1">18</span>
           fvec[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">exp</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">-</span><span class="pl-c1">1</span>)
           fvec
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">g!</span>(fjac, x)
           fjac[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">7</span>
           fjac[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">3</span>) <span class="pl-k">*</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]
           fjac[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> <span class="pl-c1">exp</span>(x[<span class="pl-c1">1</span>]) <span class="pl-k">*</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> <span class="pl-c1">exp</span>(x[<span class="pl-c1">1</span>]) <span class="pl-k">-</span> <span class="pl-c1">1</span>)
           fjac[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x[<span class="pl-c1">1</span>]) <span class="pl-k">*</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> <span class="pl-c1">exp</span>(x[<span class="pl-c1">1</span>]) <span class="pl-k">-</span> <span class="pl-c1">1</span>)
           fjac
       <span class="pl-k">end</span>
g! (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> res_jac <span class="pl-k">=</span> <span class="pl-c1">fsolve</span>(f!, g!, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>))
Results of Nonlinear Solver Algorithm
 <span class="pl-k">*</span> Algorithm<span class="pl-k">:</span> Modified Powell (User Jac, Expert)
 <span class="pl-k">*</span> Starting Point<span class="pl-k">:</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
 <span class="pl-k">*</span> Zero<span class="pl-k">:</span> [<span class="pl-c1">6.05177e-12</span>, <span class="pl-c1">1.0</span>]
 <span class="pl-k">*</span> <span class="pl-c1">Inf</span><span class="pl-k">-</span>norm of residuals<span class="pl-k">:</span> <span class="pl-c1">0.000000</span>
 <span class="pl-k">*</span> Convergence<span class="pl-k">:</span> <span class="pl-c1">true</span>
 <span class="pl-k">*</span> Message<span class="pl-k">:</span> algorithm estimates that the relative error between x and the solution is at most tol
 <span class="pl-k">*</span> Total time<span class="pl-k">:</span> <span class="pl-c1">0.033416</span> seconds
 <span class="pl-k">*</span> Function Calls<span class="pl-k">:</span> <span class="pl-c1">0</span>
 <span class="pl-k">*</span> Jacobian Calls (df<span class="pl-k">/</span>dx)<span class="pl-k">:</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> res_nojac <span class="pl-k">=</span> <span class="pl-c1">fsolve</span>(f!, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>))
Results of Nonlinear Solver Algorithm
 <span class="pl-k">*</span> Algorithm<span class="pl-k">:</span> Modified Powell
 <span class="pl-k">*</span> Starting Point<span class="pl-k">:</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
 <span class="pl-k">*</span> Zero<span class="pl-k">:</span> [<span class="pl-c1">6.05138e-12</span>, <span class="pl-c1">1.0</span>]
 <span class="pl-k">*</span> <span class="pl-c1">Inf</span><span class="pl-k">-</span>norm of residuals<span class="pl-k">:</span> <span class="pl-c1">0.000000</span>
 <span class="pl-k">*</span> Convergence<span class="pl-k">:</span> <span class="pl-c1">true</span>
 <span class="pl-k">*</span> Message<span class="pl-k">:</span> algorithm estimates that the relative error between x and the solution is at most tol
 <span class="pl-k">*</span> Total time<span class="pl-k">:</span> <span class="pl-c1">0.000024</span> seconds
 <span class="pl-k">*</span> Function Calls<span class="pl-k">:</span> <span class="pl-c1">0</span>
 <span class="pl-k">*</span> Jacobian Calls (df<span class="pl-k">/</span>dx)<span class="pl-k">:</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">The additional available keyword arguments captured by <code>;kwargs...</code> vary by the method used.</p>
<p dir="auto">The keyword argument <code>method</code> can take on different value depending on which method of <code>fsolve</code> you are calling.</p>
<p dir="auto">Available methods for the version where only <code>f!</code> is pased are:</p>
<ul dir="auto">
<li><code>:hybr</code>: Modified version of Powell's algorithm. Uses MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/hybrd1.c"><code>hybrd1</code></a></li>
<li><code>:lm</code>: Levenberg-Marquardt. Uses MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/lmdif1.c"><code>lmdif1</code></a></li>
<li><code>:lmdif</code>: Advanced Levenberg-Marquardt (more options available with <code>;kwargs...</code>). See MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/lmdif.c"><code>lmdif</code></a> for more information</li>
<li><code>:hybrd</code>: Advacned modified version of Powell's algorithm (more options available with <code>;kwargs...</code>). See MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/hybrd.c"><code>hybrd</code></a> for more information</li>
</ul>
<p dir="auto">Available methods for the version where both <code>f!</code> and <code>g!</code> are passed are:</p>
<ul dir="auto">
<li><code>:hybr</code>: Advacned modified version of Powell's algorithm with user supplied Jacobian. Additional arguments are available via <code>;kwargs...</code>. See MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/hybrj.c"><code>hybrj</code></a> for more information</li>
<li><code>:lm</code>: Advanced Levenberg-Marquardt with user supplied Jacobian. Additional arguments are available via <code>;kwargs...</code>. See MINPACK routine <a href="https://github.com/devernay/cminpack/blob/d1f5f5a273862ca1bbcf58394e4ac060d9e22c76/lmder.c"><code>lmder</code></a> for more information</li>
</ul>
</article></div>