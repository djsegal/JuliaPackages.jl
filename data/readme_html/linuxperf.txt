<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linuxperfjl----julia-wrapper-for-linuxs-perf" class="anchor" aria-hidden="true" href="#linuxperfjl----julia-wrapper-for-linuxs-perf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinuxPerf.jl -- Julia wrapper for Linux's perf</h1>
<p dir="auto"><a href="https://github.com/JuliaPerf/LinuxPerf.jl/actions"><img src="https://github.com/JuliaPerf/LinuxPerf.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPerf/LinuxPerf.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d77f490013dbd4752db08ce7cb38135f869fc8e6fde73d22a957f4bc7e97cb29/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506572662f4c696e7578506572662e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaPerf/LinuxPerf.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">the kernel multiplexes event counter that requires limited hardware resources so some counters are only active for a fraction of the running time (% on the right).</p>
<p dir="auto">if you need to compare two quantities you must put them in the same event group so they are always scheduled at the same time (or not at all).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LinuxPerf

julia&gt; @noinline function g(a)
           c = 0
           for x in a
               if x &gt; 0
                   c += 1
               end
           end
           c
       end
g (generic function with 1 method)

julia&gt; g(zeros(10000))
0

julia&gt; data = zeros(10000); @measure g(data)
┌───────────────────────┬────────────┬─────────────┐
│                       │ Events     │ Active Time │
├───────────────────────┼────────────┼─────────────┤
│             hw:cycles │ 25,583,165 │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│       hw:cache_access │ 1,640,429  │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│       hw:cache_misses │ 328,561    │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│           hw:branches │ 6,164,138  │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│ hw:branch_mispredicts │ 223,272    │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│       hw:instructions │ 28,115,285 │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│       sw:ctx_switches │ 0          │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│        sw:page_faults │ 41         │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│  sw:minor_page_faults │ 41         │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│  sw:major_page_faults │ 0          │ 100.0 %     │
├───────────────────────┼────────────┼─────────────┤
│     sw:cpu_migrations │ 0          │ 100.0 %     │
└───────────────────────┴────────────┴─────────────┘"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinuxPerf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(a)
           c <span class="pl-k">=</span> <span class="pl-c1">0</span>
           <span class="pl-k">for</span> x <span class="pl-k">in</span> a
               <span class="pl-k">if</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
                   c <span class="pl-k">+=</span> <span class="pl-c1">1</span>
               <span class="pl-k">end</span>
           <span class="pl-k">end</span>
           c
       <span class="pl-k">end</span>
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">10000</span>))
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">10000</span>); <span class="pl-c1">@measure</span> <span class="pl-c1">g</span>(data)
┌───────────────────────┬────────────┬─────────────┐
│                       │ Events     │ Active Time │
├───────────────────────┼────────────┼─────────────┤
│             hw<span class="pl-k">:</span>cycles │ <span class="pl-c1">25</span>,<span class="pl-c1">583</span>,<span class="pl-c1">165</span> │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│       hw<span class="pl-k">:</span>cache_access │ <span class="pl-c1">1</span>,<span class="pl-c1">640</span>,<span class="pl-c1">429</span>  │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│       hw<span class="pl-k">:</span>cache_misses │ <span class="pl-c1">328</span>,<span class="pl-c1">561</span>    │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│           hw<span class="pl-k">:</span>branches │ <span class="pl-c1">6</span>,<span class="pl-c1">164</span>,<span class="pl-c1">138</span>  │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│ hw<span class="pl-k">:</span>branch_mispredicts │ <span class="pl-c1">223</span>,<span class="pl-c1">272</span>    │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│       hw<span class="pl-k">:</span>instructions │ <span class="pl-c1">28</span>,<span class="pl-c1">115</span>,<span class="pl-c1">285</span> │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│       sw<span class="pl-k">:</span>ctx_switches │ <span class="pl-c1">0</span>          │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│        sw<span class="pl-k">:</span>page_faults │ <span class="pl-c1">41</span>         │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│  sw<span class="pl-k">:</span>minor_page_faults │ <span class="pl-c1">41</span>         │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│  sw<span class="pl-k">:</span>major_page_faults │ <span class="pl-c1">0</span>          │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
├───────────────────────┼────────────┼─────────────┤
│     sw<span class="pl-k">:</span>cpu_migrations │ <span class="pl-c1">0</span>          │ <span class="pl-c1">100.0</span> <span class="pl-k">%</span>     │
└───────────────────────┴────────────┴─────────────┘</pre></div>
<p dir="auto">The <code>@pstats</code> macro provides another (perhaps more concise) tool to measure
performance events, which can be used in the same way as <code>@timed</code> of the
standard library. The following example measures default events and reports its
summary:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using LinuxPerf, Random

julia&gt; mt = MersenneTwister(1234);

julia&gt; @pstats rand(mt, 1_000_000);  # compile

julia&gt; @pstats rand(mt, 1_000_000)  # default events
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┌ cpu-cycles               2.88e+06   58.1%  #  1.2 cycles per ns
│ stalled-cycles-frontend  9.50e+03   58.1%  #  0.3% of cycles
└ stalled-cycles-backend   1.76e+06   58.1%  # 61.2% of cycles
┌ instructions             1.11e+07   41.9%  #  3.9 insns per cycle
│ branch-instructions      5.32e+05   41.9%  #  4.8% of insns
└ branch-misses            2.07e+03   41.9%  #  0.4% of branch insns
┌ task-clock               2.38e+06  100.0%  #  2.4 ms
│ context-switches         0.00e+00  100.0%
│ cpu-migrations           0.00e+00  100.0%
└ page-faults              1.95e+03  100.0%
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

julia&gt; insn = &quot;(instructions,branch-instructions,branch-misses)&quot;

julia&gt; @pstats insn rand(mt, 1_000_000)  # specific events
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┌ instructions             1.05e+07  100.0%
│ branch-instructions      5.03e+05  100.0%  #  4.8% of insns
└ branch-misses            2.01e+03  100.0%  #  0.4% of branch insns
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"><pre class="notranslate"><code>julia&gt; using LinuxPerf, Random

julia&gt; mt = MersenneTwister(1234);

julia&gt; @pstats rand(mt, 1_000_000);  # compile

julia&gt; @pstats rand(mt, 1_000_000)  # default events
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┌ cpu-cycles               2.88e+06   58.1%  #  1.2 cycles per ns
│ stalled-cycles-frontend  9.50e+03   58.1%  #  0.3% of cycles
└ stalled-cycles-backend   1.76e+06   58.1%  # 61.2% of cycles
┌ instructions             1.11e+07   41.9%  #  3.9 insns per cycle
│ branch-instructions      5.32e+05   41.9%  #  4.8% of insns
└ branch-misses            2.07e+03   41.9%  #  0.4% of branch insns
┌ task-clock               2.38e+06  100.0%  #  2.4 ms
│ context-switches         0.00e+00  100.0%
│ cpu-migrations           0.00e+00  100.0%
└ page-faults              1.95e+03  100.0%
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

julia&gt; insn = "(instructions,branch-instructions,branch-misses)"

julia&gt; @pstats insn rand(mt, 1_000_000)  # specific events
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
┌ instructions             1.05e+07  100.0%
│ branch-instructions      5.03e+05  100.0%  #  4.8% of insns
└ branch-misses            2.01e+03  100.0%  #  0.4% of branch insns
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
</code></pre></div>
<p dir="auto">See the documentation of <code>@pstats</code> for more details and available options.</p>
<p dir="auto">For more fine tuned performance profile examples, please check out the <code>test</code>
directory.</p>
<h2 dir="auto"><a id="user-content-similar-tools" class="anchor" aria-hidden="true" href="#similar-tools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar tools</h2>
<p dir="auto">If you're willing to install separate software, you might want to check out <a href="https://github.com/JuliaPerf/LIKWID.jl">LIKWID.jl</a> which provides a simpler and more powerful interface to hardware performance monitoring.</p>
</article></div>