<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-spinebasedrecordlinkagejl" class="anchor" aria-hidden="true" href="#spinebasedrecordlinkagejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpineBasedRecordLinkage.jl</h1>
<p>Spine-based record linkage in Julia.</p>
<h2><a id="user-content-concepts" class="anchor" aria-hidden="true" href="#concepts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concepts</h2>
<ul>
<li>
<p>We start with 1 or more tabular data sets.</p>
</li>
<li>
<p>Each record in each table describes either an entity or an event involving an entity.</p>
</li>
<li>
<p>An <strong>entity</strong> is the unit of interest. It is usually a person, but may be something else such as a business enterprise.</p>
</li>
<li>
<p>A <strong>event</strong> involving an entity may be a sale, a hospital admission, an arrest, a mortgage payment, and so on.
In some contexts, such as healthcare, events are often known as episodes or encounters.
In others, such as sales, events are transactions.</p>
</li>
<li>
<p><strong>Record linkage</strong> is, at its core, the problem of determining whether two events refer to the same entity.</p>
</li>
<li>
<p>Spine-based record linkage links events one at a time to a <strong>spine</strong> - a table in which each record specifies an entity.</p>
</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>This package provides 3 functions:</p>
<ol>
<li>
<p><code>run_linkage</code> is used to construct a spine from one or more tables and link the tables to the spine.
Alternatively, an existing spine can be passed and <code>run_linkage</code> will only perform the linkage step.
<strong>A linkage is configured in a TOML file and can run as a script, so that users needn't write any Julia code.</strong></p>
</li>
<li>
<p><code>summarise_linkage_run</code> provides a summary report of the results of a linkage run as a CSV file.</p>
</li>
<li>
<p><code>compare_linkage_runs</code> provides a summary comparison of 2 linkage runs as a CSV file.</p>
</li>
</ol>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>We demonstrate linkage configuration and execution using an example from the test suite.</p>
<p>In the example we have a population of people (entities) using various health services (each usage is an event).</p>
<p>We have 3 tables in which each row describes a usage of a health service.
That is, we have 3 event-based tables in which each row specifies an event that refers to an entity.
Note that we do not have a linkage spine.</p>
<p>The 3 tables are:</p>
<ul>
<li><code>hospital_admissions</code> describes admissions to various hospitals.</li>
<li><code>emergency_presentations</code> describes presentations to the emergency departments of various hospitals.</li>
<li><code>influenza_cases</code> contains reports cases of influenza that are required to be notified to the central health department.</li>
</ul>
<p>The schema for each of these tables can be found in the <code>test/schema</code> directory.</p>
<p>Each row of each of these tables contains personally identifiable information, such as names and birth dates,
so that the person (entity) that the event refers to can be identified.
Each row also contains enough information to uniquely identify the event, such as a hospital ID and presentation time stamp,
but doesn't contain all of the event's data, such as the reason for the emergency.
This is common practice in data linkage, whereby the information required for linkage and that required for analysis are separated and handled
by different people in order to preserve anonymity.</p>
<p>Our goal is to link these tables so that we can ask question such as:</p>
<ul>
<li>How many influenza cases presented to an emergency department last year?</li>
<li>How many of these were hospitalised?</li>
<li>What were the most common reasons for repeated emergency presentations?</li>
<li>How often do people utilise multiple hospitals for the same underlying problem?</li>
</ul>
<h3><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configuration</h3>
<p>Consider the following linkage configuration file, <code>link_all_health_service_events.toml</code>, which is in the <code>test/config</code> directory.</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="projectname = &quot;health-service-usage&quot;
description = &quot;Construct a spine from 3 health service usage tables and link the tables to the spine.&quot;
output_directory = &quot;output&quot;  # During testing this expands to: /path/to/SpineBasedRecordLinkage.jl/test/output/
spine = {datafile = &quot;&quot;, schemafile = &quot;schema/spine.toml&quot;}
append_to_spine = true
construct_entityid_from = [&quot;firstname&quot;, &quot;lastname&quot;, &quot;birthdate&quot;]
tables = [
    {tablename = &quot;hospital_admissions&quot;,     datafile = &quot;data/hospital_admissions.csv&quot;,     schemafile = &quot;schema/hospital_admissions.toml&quot;},
    {tablename = &quot;emergency_presentations&quot;, datafile = &quot;data/emergency_presentations.csv&quot;, schemafile = &quot;schema/emergency_presentations.toml&quot;},
    {tablename = &quot;influenza_cases&quot;,         datafile = &quot;data/influenza_cases.csv&quot;,         schemafile = &quot;schema/influenza_cases.toml&quot;}
]

[[criteria]]
tablename  = &quot;hospital_admissions&quot;
exactmatch = {firstname = &quot;firstname&quot;, lastname = &quot;lastname&quot;, birthdate = &quot;birthdate&quot;}

[[criteria]]
tablename  = &quot;emergency_presentations&quot;
exactmatch = {firstname = &quot;firstname&quot;, lastname = &quot;lastname&quot;, birthdate = &quot;birthdate&quot;}

[[criteria]]
tablename   = &quot;emergency_presentations&quot;
exactmatch  = {birthdate = &quot;birthdate&quot;}
approxmatch = [
        {datacolumn = &quot;firstname&quot;, spinecolumn = &quot;firstname&quot;, distancemetric = &quot;levenshtein&quot;, threshold = 0.3},
        {datacolumn = &quot;lastname&quot;,  spinecolumn = &quot;lastname&quot;,  distancemetric = &quot;levenshtein&quot;, threshold = 0.3}
]

[[criteria]]
tablename  = &quot;influenza_cases&quot;
exactmatch = {firstname = &quot;firstname&quot;, middlename = &quot;middlename&quot;, lastname = &quot;lastname&quot;, birthdate = &quot;birthdate&quot;}

[[criteria]]
tablename  = &quot;influenza_cases&quot;
exactmatch = {firstname = &quot;firstname&quot;, lastname = &quot;lastname&quot;, birthdate = &quot;birthdate&quot;}

[[criteria]]
tablename   = &quot;influenza_cases&quot;
exactmatch  = {firstname = &quot;firstname&quot;, birthdate = &quot;birthdate&quot;}
approxmatch = [{datacolumn = &quot;lastname&quot;, spinecolumn = &quot;lastname&quot;, distancemetric = &quot;levenshtein&quot;, threshold = 0.3}]

[[criteria]]
tablename   = &quot;influenza_cases&quot;
exactmatch  = {lastname = &quot;lastname&quot;, birthdate = &quot;birthdate&quot;}
approxmatch = [{datacolumn = &quot;firstname&quot;, spinecolumn = &quot;firstname&quot;, distancemetric = &quot;levenshtein&quot;, threshold = 0.5}]
"><pre><span class="pl-smi">projectname</span> = <span class="pl-s"><span class="pl-pds">"</span>health-service-usage<span class="pl-pds">"</span></span>
<span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Construct a spine from 3 health service usage tables and link the tables to the spine.<span class="pl-pds">"</span></span>
<span class="pl-smi">output_directory</span> = <span class="pl-s"><span class="pl-pds">"</span>output<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> During testing this expands to: /path/to/SpineBasedRecordLinkage.jl/test/output/</span>
<span class="pl-smi">spine</span> = {<span class="pl-smi">datafile</span> = <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-smi">schemafile</span> = <span class="pl-s"><span class="pl-pds">"</span>schema/spine.toml<span class="pl-pds">"</span></span>}
<span class="pl-smi">append_to_spine</span> = <span class="pl-c1">true</span>
<span class="pl-smi">construct_entityid_from</span> = [<span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>]
<span class="pl-smi">tables</span> = [
    {<span class="pl-smi">tablename</span> = <span class="pl-s"><span class="pl-pds">"</span>hospital_admissions<span class="pl-pds">"</span></span>,     <span class="pl-smi">datafile</span> = <span class="pl-s"><span class="pl-pds">"</span>data/hospital_admissions.csv<span class="pl-pds">"</span></span>,     <span class="pl-smi">schemafile</span> = <span class="pl-s"><span class="pl-pds">"</span>schema/hospital_admissions.toml<span class="pl-pds">"</span></span>},
    {<span class="pl-smi">tablename</span> = <span class="pl-s"><span class="pl-pds">"</span>emergency_presentations<span class="pl-pds">"</span></span>, <span class="pl-smi">datafile</span> = <span class="pl-s"><span class="pl-pds">"</span>data/emergency_presentations.csv<span class="pl-pds">"</span></span>, <span class="pl-smi">schemafile</span> = <span class="pl-s"><span class="pl-pds">"</span>schema/emergency_presentations.toml<span class="pl-pds">"</span></span>},
    {<span class="pl-smi">tablename</span> = <span class="pl-s"><span class="pl-pds">"</span>influenza_cases<span class="pl-pds">"</span></span>,         <span class="pl-smi">datafile</span> = <span class="pl-s"><span class="pl-pds">"</span>data/influenza_cases.csv<span class="pl-pds">"</span></span>,         <span class="pl-smi">schemafile</span> = <span class="pl-s"><span class="pl-pds">"</span>schema/influenza_cases.toml<span class="pl-pds">"</span></span>}
]

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>  = <span class="pl-s"><span class="pl-pds">"</span>hospital_admissions<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span> = {<span class="pl-smi">firstname</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">lastname</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>  = <span class="pl-s"><span class="pl-pds">"</span>emergency_presentations<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span> = {<span class="pl-smi">firstname</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">lastname</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>   = <span class="pl-s"><span class="pl-pds">"</span>emergency_presentations<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span>  = {<span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}
<span class="pl-smi">approxmatch</span> = [
        {<span class="pl-smi">datacolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">spinecolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">distancemetric</span> = <span class="pl-s"><span class="pl-pds">"</span>levenshtein<span class="pl-pds">"</span></span>, <span class="pl-smi">threshold</span> = <span class="pl-c1">0.3</span>},
        {<span class="pl-smi">datacolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>,  <span class="pl-smi">spinecolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>,  <span class="pl-smi">distancemetric</span> = <span class="pl-s"><span class="pl-pds">"</span>levenshtein<span class="pl-pds">"</span></span>, <span class="pl-smi">threshold</span> = <span class="pl-c1">0.3</span>}
]

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>  = <span class="pl-s"><span class="pl-pds">"</span>influenza_cases<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span> = {<span class="pl-smi">firstname</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">middlename</span> = <span class="pl-s"><span class="pl-pds">"</span>middlename<span class="pl-pds">"</span></span>, <span class="pl-smi">lastname</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>  = <span class="pl-s"><span class="pl-pds">"</span>influenza_cases<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span> = {<span class="pl-smi">firstname</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">lastname</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>   = <span class="pl-s"><span class="pl-pds">"</span>influenza_cases<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span>  = {<span class="pl-smi">firstname</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}
<span class="pl-smi">approxmatch</span> = [{<span class="pl-smi">datacolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">spinecolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">distancemetric</span> = <span class="pl-s"><span class="pl-pds">"</span>levenshtein<span class="pl-pds">"</span></span>, <span class="pl-smi">threshold</span> = <span class="pl-c1">0.3</span>}]

[[<span class="pl-en">criteria</span>]]
<span class="pl-smi">tablename</span>   = <span class="pl-s"><span class="pl-pds">"</span>influenza_cases<span class="pl-pds">"</span></span>
<span class="pl-smi">exactmatch</span>  = {<span class="pl-smi">lastname</span> = <span class="pl-s"><span class="pl-pds">"</span>lastname<span class="pl-pds">"</span></span>, <span class="pl-smi">birthdate</span> = <span class="pl-s"><span class="pl-pds">"</span>birthdate<span class="pl-pds">"</span></span>}
<span class="pl-smi">approxmatch</span> = [{<span class="pl-smi">datacolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">spinecolumn</span> = <span class="pl-s"><span class="pl-pds">"</span>firstname<span class="pl-pds">"</span></span>, <span class="pl-smi">distancemetric</span> = <span class="pl-s"><span class="pl-pds">"</span>levenshtein<span class="pl-pds">"</span></span>, <span class="pl-smi">threshold</span> = <span class="pl-c1">0.5</span>}]</pre></div>
<p>The configuration contains:</p>
<ul>
<li>A <code>projectname</code>, which enables linkage output to be easily identified.</li>
<li>A linkage <code>description</code>, which should describe the purpose of the linkage.</li>
<li>The output of a linkage run will be contained in a directory with the form <code>{output_directory}/linkage-{projectname}-{timestamp}</code></li>
<li>A schema of the spine specified in <code>/path/to/spine_schema.toml</code>.
This file specifies the columns, data types etc of the spine.
See the <code>test/schema</code> directory as well as <a href="https://github.com/JockLawrie/Schemata.jl">Schemata.jl</a> for examples of how to write a schema.</li>
<li>A file path that contains the spine's pre-existing data. If the spine does not already exist, set the spine's <code>datafile</code> value to <code>""</code>.</li>
<li>If constructing a spine from scratch, or appending rows to an existing spine (for example with updated data), set <code>append_to_spine</code> to true.
If <code>append_to_spine</code> is true then records in the input tables that cannot link to an existing row in the spine are appended to the spine and linked.
Otherwise these records are left unlinked.</li>
<li>If <code>append_to_spine</code> is true then <code>construct_entityid_from</code> is required. It is a list of columns from which to construct the <code>EntityId</code> column (the <code>EntityId</code> is a hash of these columns).</li>
<li>Specifications of the 3 tables:
<ul>
<li>The table names are arbitrary.</li>
<li>The locations of each table's data file and schema file are specified in the same way as those of the spine.</li>
</ul>
</li>
<li>A list of linkage criteria.
<ul>
<li>The list is processed in sequence, so that multiple sets of criteria can be compared to the same table in a specified order.
For example, you can match on name and birth date, and if that fails then try matching on name and address.</li>
<li>Each element of the list is a set of criteria.</li>
<li>For each set of criteria:
<ul>
<li>The rows of the specified table are iterated over and the criteria are checked.</li>
<li>For a given row, if the criteria are satisifed then it is linked to a row of the spine.</li>
</ul>
</li>
<li>In our example:
<ul>
<li>The 1st iteration will loop through the rows of the hospital admissions table.
<ul>
<li>A row is linked to a row in the spine if the values of <code>firstname</code>, <code>lastname</code> and <code>birthdate</code> in the row <strong>exactly</strong> match the values of <code>firstname</code>, <code>lastname</code> and <code>birthdate</code> respectively in the spine row.</li>
<li>If no such spine row exists, the row is appended to the spine and linked because <code>append_to_spine</code> is set to <code>true</code>.</li>
<li>This scenario is equvialent to a SQL join, and does not require the hospital admissions table to fit into memory.</li>
<li>Several rows in the hospital admissions table may link to a given spine row, because a person may be admitted many times.
But any given row can only link to 1 row in the spine.
That is, a hospital admission refers to exactly 1 person.</li>
</ul>
</li>
<li>The 2nd iteration is similar but links the emergency presentations table instead.</li>
<li>The 3rd iteration requires birth date to match exactly, but allows some imprecision on first name and last name.
Specifically, this iteration will match a row from the emergency presentations to a row in the spine if:
<ul>
<li>The 2 rows match exactly on birth date.</li>
<li>The Levenshtein distance (see the notes below) between the first names in the 2 rows is no more than 0.3, <em>and</em> ditto for the last names.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Notes on approximate matches</strong></p>
<ul>
<li>Approximate matching relies on <em>edit distances</em>, which measure how different 2 strings are.</li>
<li>In this package edit distances are scaled to be between 0 and 1, where 0 denotes an exact match (no difference) and 1 denotes complete difference.</li>
<li>The distance between a missing value and another value (missing or not) is defined to be 1 (complete difference).</li>
<li>The Levenshtein distance in our example is an example of an edit distance.</li>
<li>For example:
<ul>
<li><code>Levenshtein("robert", "robert") = 0</code></li>
<li><code>Levenshtein("robert", "rob") = 0.5</code></li>
<li><code>Levenshtein("robert", "bob") = 0.667</code></li>
<li><code>Levenshtein("rob",    "bob") = 0.333</code></li>
<li><code>Levenshtein("rob",    "tim") = 1</code></li>
<li><code>Levenshtein("rob",    missing) = 1</code></li>
</ul>
</li>
<li>There are several edit distance measures available, see <a href="https://github.com/matthieugomez/StringDistances.jl">StringDistances.jl</a> for other possibilities.</li>
<li>If approximate matching criteria are specified and several rows in the spine satisfy the criteria for a given data row,
then the best matching spine row is selected as the match for the data row.</li>
<li>The best match is the spine row with the lowest total distance from the data row.</li>
</ul>
<p><strong>Notes on exact matches</strong></p>
<ul>
<li>The notion of distance introduced above implies that a pair of values that match exactly have a distance between them of 0. For example, <code>Levenshtein(value1, value2) = 0</code>.</li>
<li>Similalrly, a missing value cannot be part of an exact match because it has distance 1 from any other value. For example, <code>Levenshtein(value1, missing) = 1</code>.</li>
<li>If no approximate matching criteria are specified then a record can only be linked to the spine if there is exactly 1 candidate match in the spine.</li>
</ul>
<h3><a id="user-content-run-linkage" class="anchor" aria-hidden="true" href="#run-linkage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Run linkage</h3>
<p>Once your schemata and linkage configuration are set up, you can run the following script from the command line on Linux or Mac:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/run_linkage.jl /path/to/link_all_health_service_events.toml
"><pre>$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/run_linkage.jl /path/to/link_all_health_service_events.toml</pre></div>
<p>If you're on Windows you can run this from PowerShell:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="PS julia path\to\SpineBasedRecordLinkage.jl\scripts\run_linkage.jl path\to\link_all_health_service_events.toml
"><pre>PS julia path<span class="pl-cce">\t</span>o<span class="pl-cce">\S</span>pineBasedRecordLinkage.jl<span class="pl-cce">\s</span>cripts<span class="pl-cce">\r</span>un_linkage.jl path<span class="pl-cce">\t</span>o<span class="pl-cce">\l</span>ink_all_health_service_events.toml</pre></div>
<p>Alternatively you can run the following code from the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SpineBasedRecordLinkage

run_linkage(&quot;/path/to/link_all_health_service_events.toml&quot;)
"><pre><span class="pl-k">using</span> SpineBasedRecordLinkage

<span class="pl-c1">run_linkage</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/link_all_health_service_events.toml<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-inspect-the-results" class="anchor" aria-hidden="true" href="#inspect-the-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inspect the results</h3>
<p>The results of <code>run_linkage</code> are structured as follows:</p>
<ol>
<li>
<p>A new directory is created which will contain all output. Its name has the form:</p>
<p><code>{output_directory}/linkage-{projectname}-{timestamp}</code></p>
</li>
<li>
<p>The directory contains <code>input</code> and <code>output</code> directories.</p>
</li>
<li>
<p>The <code>input</code> directory contains a copy of the config file and a file containing the versions of Julia and this package.
The data tables are not copied to the <code>input</code> directory because they may be very large and take a long time.
Ditto for the spine if it exists prior to the linkage run.</p>
</li>
<li>
<p>The <code>output</code> directory contains the information necessary to inspect the linkage results and construct linked content data.
It contains the following files:</p>
<ul>
<li>A <code>spine.tsv</code> file, containing the columns specified in the spine's schema.
The schema <strong>must</strong> include <code>EntityId</code> as the primary key, with data type <code>UInt</code>.</li>
<li>A <code>links.tsv</code> table, that links events to entities.
<ul>
<li>The columns are <code>TableName</code>, <code>EventId</code>, <code>EntityId</code> and <code>CriteriaId</code>.</li>
<li>The <em>links</em> table joins to the spine on <code>EntityId</code> in a many-to-one relationship.</li>
<li>For each row the <code>CriteriaId</code> specifies which set of linkage criteria was satisfied to enable the link.</li>
</ul>
</li>
<li>A <code>criteria.tsv</code> table, in which each row specifies a linkage criterion. It joins to the <em>links</em> table on <code>CriteriaId</code> in a one-to-many relationship.</li>
<li>For each input table there is a file containing the table's primary key and a new <code>EventId</code> column.
<ul>
<li>For each row the <code>EventId</code> is constructed as a hash of the table's name concatenated with the row's primary key.</li>
<li>These tables join to the <em>links</em> table on <code>EventId</code> in a one-to-one relatinship.</li>
<li>Each of these tables also joins to the corresponding table containing de-identified data via the primary key. In this way de-identified data needn't be updated every time a linkage run is performed. Put another way, the output of a linkage run joins to the de-identified data and by doing so links events to entities. Note that this only requires the <em>links</em> and <em>primary key to eventid</em> tables - <strong>the identifiable information in the spine needn't be exposed to those analysing the de-identified data</strong>.</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3><a id="user-content-summarise-the-results" class="anchor" aria-hidden="true" href="#summarise-the-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summarise the results</h3>
<p>We often want to answer questions like:</p>
<ul>
<li>How many links are there?</li>
<li>What links have remained unchanged since the last run?</li>
<li>What links are new? Broken? Intact but now satisfying different criteria?</li>
<li>How many records remain unlinked? And which ones are they?</li>
</ul>
<p>For a quick summary of a given linkage run, use the <code>summarise_linkage_run</code> function which has 2 arguments:</p>
<ul>
<li><code>directory</code>: The directory that contains the results of the linkage run, i.e., <code>{output_directory}/linkage-{projectname}-{timestamp}</code></li>
<li><code>outfile</code> :  The full path of the (csv or tsv) file that contains the report.</li>
</ul>
<p>On Linux/Mac, with the report stored in <code>linkage_report.tsv</code>:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/summarise_linkage_run.jl {output_directory}/linkage-{projectname}-{timestamp} linkage_report.tsv
"><pre>$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/summarise_linkage_run.jl {output_directory}/linkage-{projectname}-{timestamp} linkage_report.tsv</pre></div>
<p>On Windows (from PowerShell):</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="PS julia path\to\SpineBasedRecordLinkage.jl\scripts\summarise_linkage_run.jl {output_directory}\linkage-{projectname}-{timestamp} linkage_report.tsv
"><pre>PS julia path<span class="pl-cce">\t</span>o<span class="pl-cce">\S</span>pineBasedRecordLinkage.jl<span class="pl-cce">\s</span>cripts<span class="pl-cce">\s</span>ummarise_linkage_run.jl {output_directory}<span class="pl-cce">\l</span>inkage-{projectname}-{timestamp} linkage_report.tsv</pre></div>
<p>From the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SpineBasedRecordLinkage

summarise_linkage_run(&quot;{output_directory}/linkage-{projectname}-{timestamp}&quot;, &quot;linkage_report.tsv&quot;)
"><pre><span class="pl-k">using</span> SpineBasedRecordLinkage

<span class="pl-c1">summarise_linkage_run</span>(<span class="pl-s"><span class="pl-pds">"</span>{output_directory}/linkage-{projectname}-{timestamp}<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>linkage_report.tsv<span class="pl-pds">"</span></span>)</pre></div>
<p>To compare the results of 2 linkage runs use the <code>compare_linkage_runs</code> function which has 3 arguments:</p>
<ul>
<li><code>directory1</code>: The directory that contains the results of the first linkage run. Typically this is the earlier run.</li>
<li><code>directory2</code>: The directory that contains the results of the second linkage run.</li>
<li><code>outfile</code> :  The full path of the (csv or tsv) file that contains the report.</li>
</ul>
<p>On Linux/Mac, with the report stored in <code>linkage_comparison.tsv</code>:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/summarise_linkage_run.jl directory1 directory2 linkage_comparison.tsv
"><pre>$ julia /path/to/SpineBasedRecordLinkage.jl/scripts/summarise_linkage_run.jl directory1 directory2 linkage_comparison.tsv</pre></div>
<p>On Windows (from PowerShell):</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="PS julia path\to\SpineBasedRecordLinkage.jl\scripts\summarise_linkage_run.jl directory1 directory2 linkage_comparison.tsv
"><pre>PS julia path<span class="pl-cce">\t</span>o<span class="pl-cce">\S</span>pineBasedRecordLinkage.jl<span class="pl-cce">\s</span>cripts<span class="pl-cce">\s</span>ummarise_linkage_run.jl directory1 directory2 linkage_comparison.tsv</pre></div>
<p>From the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SpineBasedRecordLinkage

summarise_linkage_run(directory1, directory2, &quot;linkage_comparison.tsv&quot;)
"><pre><span class="pl-k">using</span> SpineBasedRecordLinkage

<span class="pl-c1">summarise_linkage_run</span>(directory1, directory2, <span class="pl-s"><span class="pl-pds">"</span>linkage_comparison.tsv<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-tips-for-users" class="anchor" aria-hidden="true" href="#tips-for-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tips for users</h2>
<ul>
<li>When using a pre-existing spine, either comma-separated values (csv) or tab-separated values (tsv) are fine.
Since commas are generally more common in data than tabs, a <code>tsv</code> is usually safer than a <code>csv</code>, though not foolproof.</li>
<li>The spine is currently required to fit into memory, though the tables to be linked to the spine can be arbitrarily large.
For example, the package has been tested with files up to 60 million records on a commodity machine with 8GB of RAM.</li>
<li>For performance this package only compares string values.
Therefore it is important that data be formatted correctly before linkage, and before spine construction if you don't already have a spine.
For example, dates should have a common format in all tables, invalid values should be removed, etc.
Using the <a href="https://github.com/JockLawrie/Schemata.jl">Schemata.jl</a> package is strongly recommended for this purpose,
as it is easy to use and you can reuse the schema files for spine construction and linkage.</li>
<li>When specifying the project name in the config, make it easily recognisable.</li>
<li>For each data table, if a <code>last_updated</code> column exists, include it in the primary key.</li>
<li>Governance (i.e., versioning) of the input tables is the responsibility of the user.
<ul>
<li>It is out of the scope of the linkage engine.</li>
<li>Users must ensure that the spine and data used in a linkage run is preserved without any changes. Otherwise the linkage run may not be reproducible.</li>
</ul>
</li>
</ul>
</article></div>