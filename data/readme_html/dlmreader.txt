<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dlmreader" class="anchor" aria-hidden="true" href="#dlmreader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DLMReader</h1>
<p dir="auto"><a href="https://sl-solution.github.io/DLMReader.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://sl-solution.github.io/DLMReader.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">An efficient multi-threaded package for reading(writing) delimited files. It is designed as a file parser for <code>InMemoryDatasets.jl</code>.</p>
<blockquote>
<p dir="auto">DLMReader writes and reads AbstractDatasets types, i.e. other types must be converted to/from AbstractDatasets.</p>
</blockquote>
<p dir="auto">It works very well for huge files (long or/and wide).</p>
<blockquote>
<p dir="auto"><code>DLMReader</code> does not guess <code>delimiter</code> and if it is different from <code>,</code>, it must be passed via the <code>delimiter</code> keyword argument. By default, the <code>DLMReader</code> package assumes Strings are not quoted, if they are quoted, user must pass the quote character via the <code>quotechar</code> keyword argument.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<ul dir="auto">
<li><a href="https://sl-solution.github.io/DLMReader.jl/stable" rel="nofollow">Stable</a></li>
<li><a href="https://sl-solution.github.io/DLMReader.jl/dev" rel="nofollow">Dev</a></li>
</ul>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto"><code>DLMReader.jl</code> has some interesting features which distinguish it from other packages for reading delimited files. In what follows, we list few of them;</p>
<ul dir="auto">
<li>
<p dir="auto"><strong><code>Informats</code></strong>: The <code>DLMReader</code> package uses  <code>informats</code>  to call a class of functions on the raw text before parsing its value(s). This provides a flexible and extendable approach to parse values with special patterns. For instance, using the predefined informat <code>COMMA!</code> allows users to read a numeric column with "thousands separator" and/or the dollar sign, e.g. using this informat, the raw text like "<code>$12,000.00</code>" will be parsed as "<code>12000.00</code>". Moreover,  <code>informat</code>s support function composing, e.g. <code>COMMA! âˆ˜ ACC!</code>  parses "<code>$(12,000.00)</code>" as "<code>-12000.00</code>", i.e. <code>ACC!</code> is first applied and then <code>COMMA!</code> is applied on its result.</p>
<ul dir="auto">
<li>Additionally, <code>informats</code> can be applied on whole line before processing individual values.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Fixed-width text</strong>: If users pass the columns locations via the <code>fixed</code> keyword argument, the package reads those columns as fixed-width format. For instance, passing <code>fixed = Dict(1=&gt;1:1, 2=&gt;2:2)</code> helps to parse "<code>10</code>" as "<code>[1,0]</code>".  Mixing fixed-width format and delimited format is also allowed.</p>
</li>
<li>
<p dir="auto"><strong>Multiple observations per line</strong>: The package allows reading more than one observation per line. This can be done by passing the <code>multiple_obs = true</code> keyword argument. The multithreading feature (plus some other features) will be switched off if this option is set.</p>
</li>
<li>
<p dir="auto"><strong>Fast file writer</strong>: The <code>DLMReader</code> package exploits the <code>byrow</code> function from <a href="https://github.com/sl-solution/InMemoryDatasets.jl"><code>InMemoryDatasets.jl</code></a> to write delimited files into disk. This enables <code>DLMReader</code> to convert values to string using multiple threads.</p>
</li>
<li>
<p dir="auto"><strong>Alternative delimiters</strong>: User can pass a vector of delimiters to the function. In this case, <code>filereader</code> treats any of the passed delimiters as field delimiter.</p>
</li>
<li>
<p dir="auto"><strong>Multiple Date formats</strong>: User can pass different date formats for different columns.</p>
</li>
<li>
<p dir="auto"><strong>Different integer base</strong>: The <code>DLMReader</code> package allows users pass the integer base if it is different from 10 when parsing integers.</p>
</li>
<li>
<p dir="auto"><strong>String as delimiter</strong>: User can pass a string as delimiter of values. This must be passed via the <code>dlmstr</code> keyword argument.</p>
</li>
<li>
<p dir="auto"><strong>Informative warnings/info</strong>: If something goes wrong during the reading phase, the package will provide detailed warnings/info to help user investigate the issue.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">See <a href="https://discourse.julialang.org/t/ann-dlmreader-the-most-versatile-julia-package-for-reading-delimited-files-yet/81899" rel="nofollow">here</a> for some benchmarks.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">The following files will be used during the examples, it is assumed that the files are located in the current working directory</p>
<p dir="auto">ex1.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="a, b, c
1,2,NA
2,3,2001-1-2
2,4,2020-4-2
1,2,2000-12-1"><pre lang="text" class="notranslate"><code>a, b, c
1,2,NA
2,3,2001-1-2
2,4,2020-4-2
1,2,2000-12-1
</code></pre></div>
<p dir="auto">ex2.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="a::b::C::DD
12::1345::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::::15
12::13::15::15
12::13::15::157"><pre lang="text" class="notranslate"><code>a::b::C::DD
12::1345::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::15::15
12::13::::15
12::13::15::15
12::13::15::157
</code></pre></div>
<p dir="auto">ex3.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1
2
4;5
6
8;9
1
4;"><pre lang="text" class="notranslate"><code>1
2
4;5
6
8;9
1
4;
</code></pre></div>
<p dir="auto">ex4.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1   3,5
2   4,6
33  5,7"><pre lang="text" class="notranslate"><code>1   3,5
2   4,6
33  5,7
</code></pre></div>
<p dir="auto">ex5.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x1;x2:x3,x4
1;2;123;3
2;4,4,5"><pre lang="text" class="notranslate"><code>x1;x2:x3,x4
1;2;123;3
2;4,4,5
</code></pre></div>
<p dir="auto">ex6.csv</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="id1 $2,000,000 3
id2 $34,000 4
id3 $200,000 1"><pre lang="text" class="notranslate"><code>id1 $2,000,000 3
id2 $34,000 4
id3 $200,000 1
</code></pre></div>
<p dir="auto">And the code to read them into Julia</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DLMReader
julia&gt; filereader(&quot;ex1.csv&quot;, dtformat = Dict(3 =&gt; dateformat&quot;y-m-d&quot;))
julia&gt; filereader(&quot;ex2.csv&quot;, dlmstr = &quot;::&quot;)
julia&gt; filereader(&quot;ex3.csv&quot;, types = [Int, Int, Int], header = false, linebreak = ';', delimiter = '\n')
julia&gt; filereader(&quot;ex4.csv&quot;, fixed = Dict(1 =&gt; 1:4), header = false)
julia&gt; filereader(&quot;ex5.csv&quot;, delimiter = [';', ':', ','])
julia&gt; filereader(&quot;ex6.csv&quot;, delimiter = ' ', informat = Dict(2=&gt;COMMA!), header = [:ID, :price, :quarter])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DLMReader
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex1.csv<span class="pl-pds">"</span></span>, dtformat <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">dateformat</span>"</span>y-m-d<span class="pl-pds">"</span></span>))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex2.csv<span class="pl-pds">"</span></span>, dlmstr <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>::<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex3.csv<span class="pl-pds">"</span></span>, types <span class="pl-k">=</span> [Int, Int, Int], header <span class="pl-k">=</span> <span class="pl-c1">false</span>, linebreak <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>;<span class="pl-pds">'</span></span>, delimiter <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex4.csv<span class="pl-pds">"</span></span>, fixed <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>), header <span class="pl-k">=</span> <span class="pl-c1">false</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex5.csv<span class="pl-pds">"</span></span>, delimiter <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>;<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>:<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>])
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-s"><span class="pl-pds">"</span>ex6.csv<span class="pl-pds">"</span></span>, delimiter <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, informat <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">2</span><span class="pl-k">=&gt;</span>COMMA!), header <span class="pl-k">=</span> [<span class="pl-c1">:ID</span>, <span class="pl-c1">:price</span>, <span class="pl-c1">:quarter</span>])</pre></div>
<p dir="auto"><code>COMMA!</code> is a built-in informat which removes the comma from numbers. If number contains dollar or sterling signs, it also removes them. The trimmed text is sent to the parser for converting to a number.</p>
<h2 dir="auto"><a id="user-content-extra-examples" class="anchor" aria-hidden="true" href="#extra-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extra examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; filereader(IOBuffer(&quot;1,2,3,4,5\n6,7,8\n10\n&quot;),
                  header = [:x1, :x2],
                  types = [Int, Int],
                  multiple_obs = true)
5Ã—2 Dataset
 Row â”‚ x1        x2       
     â”‚ identity  identity
     â”‚ Int64?    Int64?   
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚        1         2
   2 â”‚        3         4
   3 â”‚        5         6
   4 â”‚        7         8
   5 â”‚       10   missing

julia&gt; filereader(IOBuffer(&quot;&quot;&quot; name1 name2 avg1 avg2  y
              0   A   D   75   5    32
              1   A   D   75   5    32
              2   D   L   32   7    12
              3   F   C   99   8    42
              4   F   C   99   8    42
              5   C   A   43   6    39
              6   C   A   43   6    39
              7   L   R   53   3    11
              8   R   F   21   2    25
              9   R   F   21   2    25
              &quot;&quot;&quot;), delimiter = ' ', ignorerepeated = true, emptycolname = true)
10Ã—6 Dataset
 Row â”‚ NONAME1   name1     name2     avg1      avg2      y        
     â”‚ identity  identity  identity  identity  identity  identity
     â”‚ Int64?    String?   String?   Int64?    Int64?    Int64?   
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚        0  A         D               75         5        32
   2 â”‚        1  A         D               75         5        32
   3 â”‚        2  D         L               32         7        12
   4 â”‚        3  F         C               99         8        42
   5 â”‚        4  F         C               99         8        42
   6 â”‚        5  C         A               43         6        39
   7 â”‚        6  C         A               43         6        39
   8 â”‚        7  L         R               53         3        11
   9 â”‚        8  R         F               21         2        25
  10 â”‚        9  R         F               21         2        25"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-c1">IOBuffer</span>(<span class="pl-s"><span class="pl-pds">"</span>1,2,3,4,5<span class="pl-cce">\n</span>6,7,8<span class="pl-cce">\n</span>10<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>),
                  header <span class="pl-k">=</span> [<span class="pl-c1">:x1</span>, <span class="pl-c1">:x2</span>],
                  types <span class="pl-k">=</span> [Int, Int],
                  multiple_obs <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">5</span><span class="pl-k">Ã—</span><span class="pl-c1">2</span> Dataset
 Row â”‚ x1        x2       
     â”‚ identity  identity
     â”‚ Int64?    Int64?   
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   <span class="pl-c1">1</span> â”‚        <span class="pl-c1">1</span>         <span class="pl-c1">2</span>
   <span class="pl-c1">2</span> â”‚        <span class="pl-c1">3</span>         <span class="pl-c1">4</span>
   <span class="pl-c1">3</span> â”‚        <span class="pl-c1">5</span>         <span class="pl-c1">6</span>
   <span class="pl-c1">4</span> â”‚        <span class="pl-c1">7</span>         <span class="pl-c1">8</span>
   <span class="pl-c1">5</span> â”‚       <span class="pl-c1">10</span>   <span class="pl-c1">missing</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">filereader</span>(<span class="pl-c1">IOBuffer</span>(<span class="pl-s"><span class="pl-pds">"""</span> name1 name2 avg1 avg2  y</span>
<span class="pl-s">              0   A   D   75   5    32</span>
<span class="pl-s">              1   A   D   75   5    32</span>
<span class="pl-s">              2   D   L   32   7    12</span>
<span class="pl-s">              3   F   C   99   8    42</span>
<span class="pl-s">              4   F   C   99   8    42</span>
<span class="pl-s">              5   C   A   43   6    39</span>
<span class="pl-s">              6   C   A   43   6    39</span>
<span class="pl-s">              7   L   R   53   3    11</span>
<span class="pl-s">              8   R   F   21   2    25</span>
<span class="pl-s">              9   R   F   21   2    25</span>
<span class="pl-s">              <span class="pl-pds">"""</span></span>), delimiter <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, ignorerepeated <span class="pl-k">=</span> <span class="pl-c1">true</span>, emptycolname <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">10</span><span class="pl-k">Ã—</span><span class="pl-c1">6</span> Dataset
 Row â”‚ NONAME1   name1     name2     avg1      avg2      y        
     â”‚ identity  identity  identity  identity  identity  identity
     â”‚ Int64?    String?   String?   Int64?    Int64?    Int64?   
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   <span class="pl-c1">1</span> â”‚        <span class="pl-c1">0</span>  A         D               <span class="pl-c1">75</span>         <span class="pl-c1">5</span>        <span class="pl-c1">32</span>
   <span class="pl-c1">2</span> â”‚        <span class="pl-c1">1</span>  A         D               <span class="pl-c1">75</span>         <span class="pl-c1">5</span>        <span class="pl-c1">32</span>
   <span class="pl-c1">3</span> â”‚        <span class="pl-c1">2</span>  D         L               <span class="pl-c1">32</span>         <span class="pl-c1">7</span>        <span class="pl-c1">12</span>
   <span class="pl-c1">4</span> â”‚        <span class="pl-c1">3</span>  F         C               <span class="pl-c1">99</span>         <span class="pl-c1">8</span>        <span class="pl-c1">42</span>
   <span class="pl-c1">5</span> â”‚        <span class="pl-c1">4</span>  F         C               <span class="pl-c1">99</span>         <span class="pl-c1">8</span>        <span class="pl-c1">42</span>
   <span class="pl-c1">6</span> â”‚        <span class="pl-c1">5</span>  C         A               <span class="pl-c1">43</span>         <span class="pl-c1">6</span>        <span class="pl-c1">39</span>
   <span class="pl-c1">7</span> â”‚        <span class="pl-c1">6</span>  C         A               <span class="pl-c1">43</span>         <span class="pl-c1">6</span>        <span class="pl-c1">39</span>
   <span class="pl-c1">8</span> â”‚        <span class="pl-c1">7</span>  L         R               <span class="pl-c1">53</span>         <span class="pl-c1">3</span>        <span class="pl-c1">11</span>
   <span class="pl-c1">9</span> â”‚        <span class="pl-c1">8</span>  R         F               <span class="pl-c1">21</span>         <span class="pl-c1">2</span>        <span class="pl-c1">25</span>
  <span class="pl-c1">10</span> â”‚        <span class="pl-c1">9</span>  R         F               <span class="pl-c1">21</span>         <span class="pl-c1">2</span>        <span class="pl-c1">25</span></pre></div>
</article></div>