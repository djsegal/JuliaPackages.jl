<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-randomizednmfjl" class="anchor" aria-hidden="true" href="#randomizednmfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RandomizedNMF.jl</h1>
<p><a href="https://github.com/tsano430/RandomizedNMF.jl/actions/workflows/ci.yml"><img src="https://github.com/tsano430/RandomizedNMF.jl/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/github/tsano430/RandomizedNMF.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/78d2c2d380584277c45cfaa3108ef201bf2479838b0ed6445139248ef7b363ea/68747470733a2f2f636f6465636f762e696f2f6769746875622f7473616e6f3433302f52616e646f6d697a65644e4d462e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="CodeCov" data-canonical-src="https://codecov.io/github/tsano430/RandomizedNMF.jl/badge.svg?branch=main" style="max-width:100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width:100%;"></a></p>
<p>Randomized nonnegative matrix factorization in Julia</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;RandomizedNMF&quot;)
"><pre><code>Pkg.add("RandomizedNMF")
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>rnmf</code> decomposes a given matrix <code>X</code> into two nonnegative factor matrices <code>W</code> and <code>H</code>, so that <code>WH</code> is approximately equal to <code>X</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using RandomizedNMF

julia&gt; X = rand(100, 200)

julia&gt; W, H = rnmf(X, 5, maxiter=100, oversampling=20, n_subspace=2)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RandomizedNMF

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">200</span>)

julia<span class="pl-k">&gt;</span> W, H <span class="pl-k">=</span> <span class="pl-c1">rnmf</span>(X, <span class="pl-c1">5</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">100</span>, oversampling<span class="pl-k">=</span><span class="pl-c1">20</span>, n_subspace<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<ul>
<li>
<p><code>maxiter</code>: Maximum number of iterations (default=<code>100</code>).</p>
</li>
<li>
<p><code>oversampling</code>: Oversampling of column space (default=<code>20</code>).</p>
</li>
<li>
<p><code>n_subspace</code>: Number of subspace iterations (default=<code>2</code>).</p>
<p><strong>Note:</strong> Increasing <code>oversampling</code> or <code>n_subspace</code> minimizes the objective function more, but takes a long time to execute <code>rnmf</code>.</p>
</li>
<li>
<p><code>lambda_w</code>: L1 regularization coefficient for W (default=<code>0.0</code>).</p>
</li>
<li>
<p><code>lambda_h</code>: L1 regularization coefficient for H (default=<code>0.0</code>).</p>
</li>
<li>
<p><code>verbose</code>: Whether to be verbose (default=<code>false</code>).</p>
</li>
</ul>
<h2><a id="user-content-advantage" class="anchor" aria-hidden="true" href="#advantage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advantage</h2>
<p>Randomized NMF is much faster than NMF.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using RandomizedNMF, NMF, BenchmarkTools, Random

julia&gt; Random.seed!(1234);

julia&gt; X = rand(100, 200);

julia&gt; @btime nnmf($X, 5, maxiter=500);
  106.128 ms (951 allocations: 5.62 MiB)

julia&gt; @btime rnmf($X, 5, maxiter=500);
  80.503 ms (1097 allocations: 6.81 MiB)

julia&gt; Y = rand(10000, 5000);

julia&gt; @btime nnmf($Y, 5, maxiter=500);
  31.977 s (2069 allocations: 674.64 MiB)

julia&gt; @btime rnmf($Y, 5, maxiter=500);
  18.673 s (2122 allocations: 1.05 GiB)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RandomizedNMF, NMF, BenchmarkTools, Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1234</span>);

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">200</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">nnmf</span>(<span class="pl-k">$</span>X, <span class="pl-c1">5</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">500</span>);
  <span class="pl-c1">106.128</span> ms (<span class="pl-c1">951</span> allocations<span class="pl-k">:</span> <span class="pl-c1">5.62</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">rnmf</span>(<span class="pl-k">$</span>X, <span class="pl-c1">5</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">500</span>);
  <span class="pl-c1">80.503</span> ms (<span class="pl-c1">1097</span> allocations<span class="pl-k">:</span> <span class="pl-c1">6.81</span> MiB)

julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10000</span>, <span class="pl-c1">5000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">nnmf</span>(<span class="pl-k">$</span>Y, <span class="pl-c1">5</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">500</span>);
  <span class="pl-c1">31.977</span> s (<span class="pl-c1">2069</span> allocations<span class="pl-k">:</span> <span class="pl-c1">674.64</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">rnmf</span>(<span class="pl-k">$</span>Y, <span class="pl-c1">5</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">500</span>);
  <span class="pl-c1">18.673</span> s (<span class="pl-c1">2122</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.05</span> GiB)</pre></div>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference</h2>
<p>[1] N. B. Erichson, A. Mendible, S. Wihlborn, and J. N. Kutz,
Randomized nonnegative matrix factorization,
Pattern Recognition Letters, vol. 104, pp. 1â€“7, 2018.</p>
</article></div>