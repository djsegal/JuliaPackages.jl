<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-walker2020sampling" class="anchor" aria-hidden="true" href="#walker2020sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Walker2020Sampling</h1>
<p><a href="https://igutierrezm.github.io/Walker2020Sampling.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://igutierrezm.github.io/Walker2020Sampling.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/igutierrezm/Walker2020Sampling.jl/actions"><img src="https://github.com/igutierrezm/Walker2020Sampling.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/igutierrezm/Walker2020Sampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4c5a9422e12c1a352276d6ed238fca857c4771da390679b1daaca934ad311752/68747470733a2f2f636f6465636f762e696f2f67682f6967757469657272657a6d2f57616c6b65723230323053616d706c696e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/igutierrezm/Walker2020Sampling.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Sampling from a univariate unnormalized <a href="https://en.wikipedia.org/wiki/Probability_density_function" rel="nofollow">pdf</a> in Julia using Li &amp; Walker's MCMC algorithm, see [1] for details.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install with the Julia package manager Pkg, just like any other registered Julia package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Press ']' to enter the Pkg REPL mode.
pkg&gt; add Walker2020Sampling
"><pre><span class="pl-c"><span class="pl-c">#</span> Press ']' to enter the Pkg REPL mode.</span>
pkg<span class="pl-k">&gt;</span> add Walker2020Sampling</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg; 
julia&gt; Pkg.add(&quot;Walker2020Sampling&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; 
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Walker2020Sampling<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Suppose we want to draw the next state in a <a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo" rel="nofollow">MCMC</a> with target (unnormalized) log-pdf <code>q()</code> using Li &amp; Walker's algorithm with parameter <code>θ</code>. Suppose further that the support of <code>q()</code> is <code>[lb, ub]</code>, the current state of the main variable is <code>y0</code>, and the current state of the auxiliary variable is <code>z0</code>.</p>
<p>The first step is to set up the environment:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Random, Walker2020Sampling
rng = MersenneTwister(1)
"><pre><span class="pl-k">using</span> Random, Walker2020Sampling
rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1</span>)</pre></div>
<p>Then, we create a sampler <code>s</code> using <code>Walker2020Sampler()</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = Walker2020Sampler(θ; lb, ub);
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">Walker2020Sampler</span>(θ; lb, ub);</pre></div>
<p>Finally, we draw the next state of the main and auxiliary variables using <code>rand()</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y1, z1 = rand(rng, s, q, y0, z0);
"><pre>y1, z1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(rng, s, q, y0, z0);</pre></div>
<p>Be aware that both <code>rng</code> and <code>s</code> are modified in the process.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1] Li, Y. and Walker, S. G. (2020). A latent slice sampling  algorithm. arXiv e-prints, page arXiv:<a href="https://arxiv.org/abs/2010.08509" rel="nofollow">2010.08509</a>.</p>
</article></div>