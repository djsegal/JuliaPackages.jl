<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-filterhelpersjl" class="anchor" aria-hidden="true" href="#filterhelpersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FilterHelpers.jl</h1>
<p dir="auto"><a href="https://github.com/bradcarman/FilterHelpers.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/bradcarman/FilterHelpers.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/bradcarman/FilterHelpers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b78d8f49afed6bbd5d6fe66e42c4a895bd08f24ca1da1280357d6b173d19c326/68747470733a2f2f636f6465636f762e696f2f67682f627261646361726d616e2f46696c74657248656c706572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/bradcarman/FilterHelpers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides some simple functions I often find I would like to have in the Julia language, similar to the <code>find</code> functions (i.e. <code>findfirst</code>, <code>findlast</code>, etc.), which return the object rather than the index.  This also includes <code>filtersingle</code> which provides the same functionality as c# <a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.single?view=net-7.0" rel="nofollow">Enumerable.Single</a> method.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    struct Person
        id::Int
        name::String
    end

    brad = Person(1, &quot;Brad&quot;)
    julia = Person(1, &quot;Julia&quot;)
    audra = Person(2, &quot;Audra&quot;)
    ellie = Person(3, &quot;Ellie&quot;)

    people = [brad, audra, ellie, julia]

    x = filtersingle(x-&gt;x.id == 3, people) #returns the object `ellie`
    x = filtersingle(x-&gt;x.id == 1, people) #throws an exception
    x = filterfirst(x-&gt;x.id == 1, people) #returns `brad`"><pre>    <span class="pl-k">struct</span> Person
        id<span class="pl-k">::</span><span class="pl-c1">Int</span>
        name<span class="pl-k">::</span><span class="pl-c1">String</span>
    <span class="pl-k">end</span>

    brad <span class="pl-k">=</span> <span class="pl-c1">Person</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Brad<span class="pl-pds">"</span></span>)
    julia <span class="pl-k">=</span> <span class="pl-c1">Person</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>)
    audra <span class="pl-k">=</span> <span class="pl-c1">Person</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>Audra<span class="pl-pds">"</span></span>)
    ellie <span class="pl-k">=</span> <span class="pl-c1">Person</span>(<span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>Ellie<span class="pl-pds">"</span></span>)

    people <span class="pl-k">=</span> [brad, audra, ellie, julia]

    x <span class="pl-k">=</span> <span class="pl-c1">filtersingle</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>id <span class="pl-k">==</span> <span class="pl-c1">3</span>, people) <span class="pl-c"><span class="pl-c">#</span>returns the object `ellie`</span>
    x <span class="pl-k">=</span> <span class="pl-c1">filtersingle</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>id <span class="pl-k">==</span> <span class="pl-c1">1</span>, people) <span class="pl-c"><span class="pl-c">#</span>throws an exception</span>
    x <span class="pl-k">=</span> <span class="pl-c1">filterfirst</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>id <span class="pl-k">==</span> <span class="pl-c1">1</span>, people) <span class="pl-c"><span class="pl-c">#</span>returns `brad`</span></pre></div>
</article></div>