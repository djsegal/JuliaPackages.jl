<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fast-multidimensional-walsh-hadamard-transforms" class="anchor" aria-hidden="true" href="#fast-multidimensional-walsh-hadamard-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fast multidimensional Walsh-Hadamard transforms</h1>
<p><a href="https://travis-ci.org/stevengj/Hadamard.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4dac1a1bc6b469cb7e65e2c414e0327ae83c3fe4/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f486164616d6172642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/Hadamard.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides functions to compute fast Walsh-Hadamard transforms
in Julia, for arbitrary dimensions and arbitrary power-of-two transform sizes,
with the three standard orderings: natural (Hadamard), dyadic (Paley), and
sequency (Walsh) ordering.</p>
<p>It works by calling Julia's interface to the <a href="http://www.fftw.org/" rel="nofollow">FFTW</a>
library, and can often be orders of magnitude faster than the corresponding
<code>fwht</code> functions in the Matlab signal-processing toolbox.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, just use the package manager to run <code>Pkg.add("Hadamard")</code> to
install the files.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>After installation, the <code>using Hadamard</code> statement will import the names
in the Hadamard module so that you can call the function below.</p>
<ul>
<li>The function <code>fwht(X)</code> computes the fast Walsh-Hadamard transform
(WHT) of the multidimensional array <code>X</code> (of real or complex numbers),
returning its output in sequency order.  The inverse transform is
<code>ifwht(X)</code>.</li>
</ul>
<p>By default, <code>fwht</code> and <code>ifwht</code> compute the <em>multidimensional</em> WHT, which
consists of the ordinary (one-dimensional) WHT performed along each dimension
of the input.  To perform only the 1d WHT along dimension <code>d</code>, you can
can instead use <code>fwht(X, d)</code> and <code>ifwht(X, d)</code> functions.  More generally,
<code>d</code> can be a tuple or array or dimensions to transform.</p>
<p>The sizes of the transformed dimensions <em>must</em> be powers of two, or an
exception is thrown.  The non-transformed dimensions are arbitrary.  For
example, given a 16x20 array <code>X</code>, <code>fwht(X,1)</code> is allowed but <code>fwht(X,2)</code> is
not.</p>
<p>These functions compute the WHT normalized similarly to the <code>fwht</code> and
<code>ifwht</code> functions in Matlab.  Given the Walsh functions, which have values
of +1 or -1, <code>fwht</code> multiplies its input by the Walsh functions and divides
by <code>n</code> (the length of the input) to obtain the coefficients of each Walsh
function in the input.  <code>ifwht</code> multiplies its inputs by the Walsh functions
and sums them to recover the signal, with no <code>n</code> factor.</p>
<ul>
<li>Instead of sequency order, one can also compute the WHT in the natural
(Hadamard) ordering with <code>fwht_natural</code> and <code>ifwht_natural</code>, or in the
dyadic (Paley) ordering with <code>fwht_dyadic</code> and <code>ifwht_dyadic</code>.  These
functions take the same arguments as <code>fwht</code> and <code>ifwht</code> and have the
same normalizations, respectively.    The natural-order transforms also
have in-place variants <code>fwht_natural!</code> and <code>ifwht_natural!</code>.</li>
</ul>
<h2><a id="user-content-hadamard-matrices" class="anchor" aria-hidden="true" href="#hadamard-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hadamard matrices</h2>
<p>We also provide a a function <code>hadamard(n)</code> which returns a Hadamard
matrix of order <code>n</code>, similar to the Matlab function of the same name.
The known Hadamard matrices up to size 256 are currently supported
(via a lookup table), along with any size that factorizes into
products of these known sizes and/or powers of two.</p>
<p>The return value of <code>hadamard(n)</code> is a matrix of <code>Int8</code> values.  If
you are planning to do matrix computations with this matrix, you may
want to convert to <code>Float64</code> first via <code>float(hadamard(n))</code>.</p>
<p>For many sizes, the Hadamard matrix is not unique; the <code>hadamard</code>
function returns an arbitrary choice.  For power-of-two sizes, the
choice is equivalent to <code>ifwht_natural(eye(n), 1)</code>.</p>
<p>You can pretty-print a Hadamard matrix as a table of <code>+</code> and <code>-</code>
(characters indicating the signs of the entries) via <code>Hadamard.printsigns</code>, e.g. <code>Hadamard.printsigns(hadamard(28))</code> for the 28Ã—28 Hadamard matrix.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>This package was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a>.</p>
</article></div>