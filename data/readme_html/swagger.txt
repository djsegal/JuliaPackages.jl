<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-swagger" class="anchor" aria-hidden="true" href="#swagger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Swagger</h1>
<p dir="auto"><a href="https://github.com/JuliaComputing/Swagger.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaComputing/Swagger.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaComputing/Swagger.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/44a8b01a33548500fd71e1607fc045542cc19c13f6b34271dd53a5b4117bb012/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961436f6d707574696e672f537761676765722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaComputing/Swagger.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This is a Julia plugin and code generator to generate your own client library with Swagger.</p>
<p dir="auto">The goal of Swaggerâ„¢ is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via Swagger, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, Swagger removes the guesswork in calling the service.</p>
<p dir="auto">Check out <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI-Spec</a> for additional information about the Swagger project, including additional libraries with support for other languages and more.</p>
<h2 dir="auto"><a id="user-content-how-do-i-use-this" class="anchor" aria-hidden="true" href="#how-do-i-use-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How do I use this?</h2>
<p dir="auto">The code generation step required by this package is best done on linux. Generated julia code can of course be run on any platform.</p>
<h3 dir="auto"><a id="user-content-building" class="anchor" aria-hidden="true" href="#building"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building</h3>
<p dir="auto">First, you need to build the Swagger Java libraries. Ensure you have Java and maven installed, and the <code>java</code> and <code>mvn</code> commands available on the path. Then, from the directory where Swagger.jl has been downloaded/installed, run this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plugin/build.sh"><pre class="notranslate"><code>plugin/build.sh
</code></pre></div>
<p dir="auto">A single jar file (julia-swagger-codegen-0.0.4.jar) will be produced in <code>plugin/target</code>.</p>
<p dir="auto">You can now use that for codegen.</p>
<p dir="auto">Note: problems have been reported while building with JDK 9 on MacOS likely because of <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=534460" rel="nofollow">this issue</a></p>
<h3 dir="auto"><a id="user-content-code-generation" class="anchor" aria-hidden="true" href="#code-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Code Generation</h3>
<p dir="auto">Use the supplied script <code>plugin/generate.sh</code> and point it to the specification file and a configuration file. E.g.:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="${SWAGGERDIR}/plugin/generate.sh -i ${SPECDIR}/${SPECFILE} -o ${GENDIR} -c config.json"><pre><span class="pl-smi">${SWAGGERDIR}</span>/plugin/generate.sh -i <span class="pl-smi">${SPECDIR}</span>/<span class="pl-smi">${SPECFILE}</span> -o <span class="pl-smi">${GENDIR}</span> -c config.json</pre></div>
<p dir="auto"><em>where</em>
<code>SWAGGERDIR</code> is the location of this package
<code>SPECDIR</code> is the directory where the openapi specification file resides
<code>SPECFILE</code> the name of the openapi specification file from which you are generating Julia code
<code>GENDIR</code> the directory where the generated Julia code will be written</p>
<p dir="auto">Typically, you would generate the files into a <code>src</code> directory for a package. The generated code is ready to be used as a Julia module directly.</p>
<p dir="auto">The configuration file (<code>config.json</code>) can have the following options:</p>
<ul dir="auto">
<li><code>packageName</code>: the Julia package to generate (<code>SwaggerClient</code> by default)</li>
</ul>
<h2 dir="auto"><a id="user-content-generated-code-structure" class="anchor" aria-hidden="true" href="#generated-code-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generated Code Structure</h2>
<h3 dir="auto"><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>APIs</h3>
<p dir="auto">Each API set is generated into a file named <code>api_&lt;apiname&gt;.jl</code>. It is represented as a <code>struct</code> and the APIs under it are generated as methods. An API set can be constructed by providing the swagger client instance that it can use for communication.</p>
<p dir="auto">The required API parameters are generated as regular function arguments. Optional parameters are generated as keyword arguments. Method documentation is generated with description, parameter information and return value. Two variants of the API are generated. The first variant is suitable for calling synchronously and returns a single instance of the result struct.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# example synchronous API that returns an Order instance
getOrderById(api::StoreApi, orderId::Int64)"><pre><span class="pl-c"><span class="pl-c">#</span> example synchronous API that returns an Order instance</span>
<span class="pl-c1">getOrderById</span>(api<span class="pl-k">::</span><span class="pl-c1">StoreApi</span>, orderId<span class="pl-k">::</span><span class="pl-c1">Int64</span>)</pre></div>
<p dir="auto">The second variant is suitable for asynchronous calls to methods that return chunked transfer encoded responses, where in the API streams the response objects into an output channel.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# example asynchronous API that streams matching Pet instances into response_stream
findPetsByStatus(api::PetApi, response_stream::Channel, status::Vector{String})"><pre><span class="pl-c"><span class="pl-c">#</span> example asynchronous API that streams matching Pet instances into response_stream</span>
<span class="pl-c1">findPetsByStatus</span>(api<span class="pl-k">::</span><span class="pl-c1">PetApi</span>, response_stream<span class="pl-k">::</span><span class="pl-c1">Channel</span>, status<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>)</pre></div>
<p dir="auto">A client context holds common information to be used across APIs. It also holds a connection to the server and uses that across API calls.
The client context needs to be passed as the first parameter of all API calls. It can be created as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Client(root::String;
    headers::Dict{String,String}=Dict{String,String}(),
    get_return_type::Function=(default,data)-&gt;default,
    timeout::Int=DEFAULT_TIMEOUT_SECS,
    long_polling_timeout::Int=DEFAULT_LONGPOLL_TIMEOUT_SECS,
    pre_request_hook::Function,
)"><pre><span class="pl-c1">Client</span>(root<span class="pl-k">::</span><span class="pl-c1">String</span>;
    headers<span class="pl-k">::</span><span class="pl-c1">Dict{String,String}</span><span class="pl-k">=</span><span class="pl-c1">Dict</span><span class="pl-c1">{String,String}</span>(),
    get_return_type<span class="pl-k">::</span><span class="pl-c1">Function</span><span class="pl-k">=</span>(default,data)<span class="pl-k">-&gt;</span>default,
    timeout<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span>DEFAULT_TIMEOUT_SECS,
    long_polling_timeout<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span>DEFAULT_LONGPOLL_TIMEOUT_SECS,
    pre_request_hook<span class="pl-k">::</span><span class="pl-c1">Function</span>,
)</pre></div>
<p dir="auto">Where:</p>
<ul dir="auto">
<li><code>root</code>: the root URI where APIs are hosted (should not end with a <code>/</code>)</li>
<li><code>headers</code>: any additional headers that need to be passed along with all API calls</li>
<li><code>get_return_type</code>: optional method that can map a Julia type to a return type other than what is specified in the API specification by looking at the data (this is used only in special cases, for example when models are allowed to be dynamically loaded)</li>
<li><code>timeout</code>: optional timeout to apply for server methods (default <code>Swagger.DEFAULT_TIMEOUT_SECS</code>)</li>
<li><code>long_polling_timeout</code>: optional timeout to apply for long polling methods (default <code>Swagger.DEFAULT_LONGPOLL_TIMEOUT_SECS</code>)</li>
<li><code>pre_request_hook</code>: user provided hook to modify the request before it is sent</li>
</ul>
<p dir="auto">The <code>pre_request_hook</code> must provide the following two implementations:</p>
<ul dir="auto">
<li><code>pre_request_hook(ctx::Swagger.Ctx) -&gt; ctx</code></li>
<li><code>pre_request_hook(resource_path::AbstractString, body::Any, headers::Dict{String,String}) -&gt; (resource_path, body, headers)</code></li>
</ul>
<p dir="auto">In case of any errors an instance of <code>ApiException</code> is thrown. It has the following fields:</p>
<ul dir="auto">
<li><code>status::Int</code>: HTTP status code</li>
<li><code>reason::String</code>: Optional human readable string</li>
<li><code>resp::Downloads.Response</code>: The HTTP Response for this call</li>
<li><code>error::Union{Nothing,Downloads.RequestError}</code>: The HTTP error on request failure</li>
</ul>
<p dir="auto">An API call involves the following steps:</p>
<ul dir="auto">
<li>If a pre request hook is provided, it is invoked with an instance of <code>Swagger.Ctx</code> that has the request attributes. The hook method is expected to make any modifications it needs to the request attributes before the request is prepared, and return the modified context.</li>
<li>The URL to be invoked is prepared by replacing placeholders in the API URL template with the supplied function parameters.</li>
<li>If this is a POST request, serialize the instance of <code>SwaggerModel</code> provided as the <code>body</code> parameter as a JSON document.</li>
<li>If a pre request hook is provided, it is invoked with the prepared resource path, body and request headers. The hook method is expected to modify and return back a tuple of resource path, body and headers which will be used to make the request.</li>
<li>Make the HTTP call to the API endpoint and collect the response.</li>
<li>Determine the response type / model, invoke the optional user specified mapping function if one was provided.</li>
<li>Convert (deserialize) the response data into the return type and return.</li>
<li>In case of any errors, throw an instance of <code>ApiException</code></li>
</ul>
<h3 dir="auto"><a id="user-content-models" class="anchor" aria-hidden="true" href="#models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Models</h3>
<p dir="auto">Each model from the specification is generated into a file named <code>model_&lt;modelname&gt;.jl</code>. It is represented as a <code>mutable struct</code> that is a subtype of the abstract type <code>SwaggerModel</code>. Models have the following methods defined:</p>
<ul dir="auto">
<li>constructor that takes keyword arguments to fill in values for all model properties.</li>
<li><a href="https://docs.julialang.org/en/v1/base/base/#Base.propertynames" rel="nofollow"><code>propertynames</code></a></li>
<li><a href="https://docs.julialang.org/en/v1/base/base/#Base.hasproperty" rel="nofollow"><code>hasproperty</code></a></li>
<li><a href="https://docs.julialang.org/en/v1/base/base/#Base.getproperty" rel="nofollow"><code>getproperty</code></a></li>
<li><a href="https://docs.julialang.org/en/v1/base/base/#Base.setproperty!" rel="nofollow"><code>setproperty!</code></a></li>
</ul>
<p dir="auto">In addition to these standard Julia methods, these convenience methods are also generated that help in checking value at a hierarchical path of the model.</p>
<ul dir="auto">
<li><code>function haspropertyat(o::T, path...) where {T&lt;:SwaggerModel}</code></li>
<li><code>function getpropertyat(o::T, path...) where {T&lt;:SwaggerModel}</code></li>
</ul>
<p dir="auto">E.g:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# access o.field.subfield1.subfield2
if haspropertyat(o, &quot;field&quot;, &quot;subfield1&quot;, &quot;subfield2&quot;)
    getpropertyat(o, &quot;field&quot;, &quot;subfield1&quot;, &quot;subfield2&quot;)
end

# access nested array elements, e.g. o.field2.subfield1[10].subfield2
if haspropertyat(o, &quot;field&quot;, &quot;subfield1&quot;, 10, &quot;subfield2&quot;)
    getpropertyat(o, &quot;field&quot;, &quot;subfield1&quot;, 10, &quot;subfield2&quot;)
end"><pre><span class="pl-c"><span class="pl-c">#</span> access o.field.subfield1.subfield2</span>
<span class="pl-k">if</span> <span class="pl-c1">haspropertyat</span>(o, <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield2<span class="pl-pds">"</span></span>)
    <span class="pl-c1">getpropertyat</span>(o, <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield2<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> access nested array elements, e.g. o.field2.subfield1[10].subfield2</span>
<span class="pl-k">if</span> <span class="pl-c1">haspropertyat</span>(o, <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield1<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>subfield2<span class="pl-pds">"</span></span>)
    <span class="pl-c1">getpropertyat</span>(o, <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>subfield1<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>subfield2<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-validations" class="anchor" aria-hidden="true" href="#validations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Validations</h3>
<p dir="auto">Following validations are incorporated into models:</p>
<ul dir="auto">
<li>maximum value: must be a numeric value less than or equal to a specified value</li>
<li>minimum value: must be a numeric value greater than or equal to a specified value</li>
<li>maximum length: must be a string value of length less than or equal to a specified value</li>
<li>minimum length: must be a string value of length greater than or equal to a specified value</li>
<li>maximum item count: must be a list value with number of items less than or equal to a specified value</li>
<li>minimum item count: must be a list value with number of items greater than or equal to a specified value</li>
<li>enum: value must be from a list of allowed values</li>
</ul>
<p dir="auto">Validations are imposed in the constructor and <code>setproperty!</code> methods of models.</p>
</article></div>