<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-plasmajl" class="anchor" aria-hidden="true" href="#plasmajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plasma.jl</h1>
<p dir="auto">Plasma.jl is an interface for high-performance simulations of 7D collisionless and electrostatic kinetic plasmas. It models plasma evolution by solving the full <a href="https://en.wikipedia.org/wiki/Vlasov_equation" rel="nofollow">Vlasov-Maxwell and Vlasov-Poisson equations</a>.</p>
<h2 dir="auto"><a id="user-content-problem-domain" class="anchor" aria-hidden="true" href="#problem-domain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Problem Domain</h2>
<p dir="auto">Knowing how plasmas move is essential to solving controlled nuclear fusion and understanding important astrophysical systems. Plasma movement can be approximated by knowing the distribution function of particles averaged over the Debye length. This is not trivial. In fact, the Vlasov equation's non-linearity and high dimensionality makes it unfeasible to solve such equations with standard mesh or PIC algorithms.</p>
<p dir="auto">Plasma.jl handles this by instead using a <a href="https://arxiv.org/abs/2107.09443" rel="nofollow">Physics-informed Neural Network (PINN)</a> architecture to approximate plasma evolution. Thereby reducing the cost of computing high-dimensional plasmas.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install Plasma.jl, use the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Plasma&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Plasma<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Vlasov-Maxwell and Vlasov-Poisson solvers.</li>
<li>An interface for the definition of plasmas with arbitrary dimensions, species, and initial distributions.</li>
<li>An interface to define the geometry of a plasma (WIP).</li>
<li>Plotting functions for easy analysis of results.</li>
<li>Validation methods to evaluate error in models (WIP).</li>
<li>Distributed GPU support (WIP).</li>
</ul>
<p dir="auto"><strong>Parts of this package are still work in progress.</strong> Some of these features might still have bugs. So feel free to create an issue and we'll try to help you out.</p>
<h2 dir="auto"><a id="user-content-example-solving-3d-electrostatic-d-d-plasma" class="anchor" aria-hidden="true" href="#example-solving-3d-electrostatic-d-d-plasma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Solving 3D Electrostatic D-D Plasma</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plasma

TD = 0.3 # eV
Te = 0.2 # eV
D = species.D
e = species.e

D_D = Distribution(Maxwellian(TD, D.m), D)
D_e = Distribution(Maxwellian(Te, e.m), e) 
G = Geometry() 

plasma = ElectrostaticPlasma([D_D, D_e], G)

sol = Plasma.solve(plasma, dim=1, GPU=false, strategy=QuadratureTraining()) "><pre><span class="pl-k">using</span> Plasma

TD <span class="pl-k">=</span> <span class="pl-c1">0.3</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>
Te <span class="pl-k">=</span> <span class="pl-c1">0.2</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>
D <span class="pl-k">=</span> species<span class="pl-k">.</span>D
e <span class="pl-k">=</span> species<span class="pl-k">.</span>e

D_D <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">Maxwellian</span>(TD, D<span class="pl-k">.</span>m), D)
D_e <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">Maxwellian</span>(Te, e<span class="pl-k">.</span>m), e) 
G <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>() 

plasma <span class="pl-k">=</span> <span class="pl-c1">ElectrostaticPlasma</span>([D_D, D_e], G)

sol <span class="pl-k">=</span> Plasma<span class="pl-k">.</span><span class="pl-c1">solve</span>(plasma, dim<span class="pl-k">=</span><span class="pl-c1">1</span>, GPU<span class="pl-k">=</span><span class="pl-c1">false</span>, strategy<span class="pl-k">=</span><span class="pl-c1">QuadratureTraining</span>()) </pre></div>
<h2 dir="auto"><a id="user-content-example-solving-5d-electrostatic-α-plasma-with-a-custom-initial-distribution" class="anchor" aria-hidden="true" href="#example-solving-5d-electrostatic-α-plasma-with-a-custom-initial-distribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Solving 5D Electrostatic α Plasma with a Custom Initial Distribution</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## 2D with custom P and species
using Plasma

Tα = 70000 # eV

α = Species(1.602176634e-19, 6.6446562e-27)

function HotCarrier(T) 
    Kb = 8.617333262145e-5
    function P(x,v)
        v_ = sqrt(sum(v .^2))
        exp(-v_/(Kb*T))
    end
end

Dα = Distribution(HotCarrier(Tα), α)
G = Geometry()

plasma = ElectrostaticPlasma([Dα], G)

sol = Plasma.solve(plasma, dim=2) # with GPU

Plasma.plot(sol)"><pre><span class="pl-c"><span class="pl-c">#</span># 2D with custom P and species</span>
<span class="pl-k">using</span> Plasma

Tα <span class="pl-k">=</span> <span class="pl-c1">70000</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>

α <span class="pl-k">=</span> <span class="pl-c1">Species</span>(<span class="pl-c1">1.602176634e-19</span>, <span class="pl-c1">6.6446562e-27</span>)

<span class="pl-k">function</span> <span class="pl-en">HotCarrier</span>(T) 
    Kb <span class="pl-k">=</span> <span class="pl-c1">8.617333262145e-5</span>
    <span class="pl-k">function</span> <span class="pl-en">P</span>(x,v)
        v_ <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">sum</span>(v <span class="pl-k">.^</span><span class="pl-c1">2</span>))
        <span class="pl-c1">exp</span>(<span class="pl-k">-</span>v_<span class="pl-k">/</span>(Kb<span class="pl-k">*</span>T))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

Dα <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">HotCarrier</span>(Tα), α)
G <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>()

plasma <span class="pl-k">=</span> <span class="pl-c1">ElectrostaticPlasma</span>([Dα], G)

sol <span class="pl-k">=</span> Plasma<span class="pl-k">.</span><span class="pl-c1">solve</span>(plasma, dim<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> with GPU</span>

Plasma<span class="pl-k">.</span><span class="pl-c1">plot</span>(sol)</pre></div>
<h2 dir="auto"><a id="user-content-example-solving-7d-collisionless-d-t-plasma" class="anchor" aria-hidden="true" href="#example-solving-7d-collisionless-d-t-plasma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Solving 7D Collisionless D-T Plasma</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## 3D CollisionlessPlasma
using Plasma

TD = 15000 # eV
TT = 15000 # eV
Te = 13000 # eV

e = species.e
T = species.T
D = species.D

De = Distribution(Maxwellian(Te, e.m), e)
DT = Distribution(Maxwellian(TT, T.m), T)
DD = Distribution(Maxwellian(TD, D.m), D)
G = Geometry()

plasma = CollisionlessPlasma([De,DT,DD], G)

Plasma.solve(plasma)

Plasma.plot(sol)"><pre><span class="pl-c"><span class="pl-c">#</span># 3D CollisionlessPlasma</span>
<span class="pl-k">using</span> Plasma

TD <span class="pl-k">=</span> <span class="pl-c1">15000</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>
TT <span class="pl-k">=</span> <span class="pl-c1">15000</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>
Te <span class="pl-k">=</span> <span class="pl-c1">13000</span> <span class="pl-c"><span class="pl-c">#</span> eV</span>

e <span class="pl-k">=</span> species<span class="pl-k">.</span>e
T <span class="pl-k">=</span> species<span class="pl-k">.</span>T
D <span class="pl-k">=</span> species<span class="pl-k">.</span>D

De <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">Maxwellian</span>(Te, e<span class="pl-k">.</span>m), e)
DT <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">Maxwellian</span>(TT, T<span class="pl-k">.</span>m), T)
DD <span class="pl-k">=</span> <span class="pl-c1">Distribution</span>(<span class="pl-c1">Maxwellian</span>(TD, D<span class="pl-k">.</span>m), D)
G <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>()

plasma <span class="pl-k">=</span> <span class="pl-c1">CollisionlessPlasma</span>([De,DT,DD], G)

Plasma<span class="pl-k">.</span><span class="pl-c1">solve</span>(plasma)

Plasma<span class="pl-k">.</span><span class="pl-c1">plot</span>(sol)</pre></div>
<h2 dir="auto"><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h2>
<p dir="auto">You can build your own plotting functions, or check out <code>src/analyze.jl</code> for a fairly crude way to plot models with Makie. A Makie recipe is a WIP right now.</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">See <a href="https://github.com/killah-t-cell/PlasmaBenchmarks.jl">PlasmaBenchmarks.jl</a> for solved examples and benchmarks against PIC methods w.r.t. performance and accuracy.</p>
</article></div>