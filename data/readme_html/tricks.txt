<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tricks" class="anchor" aria-hidden="true" href="#tricks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tricks</h1>

<p><a href="https://travis-ci.com/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad0ab614e3d47d0ed1fd18bfcbf83890f7e53b39/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f547269636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/Tricks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/Tricks-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9844e96e581fe4649ceafd0f1fd056ff12b15f28/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6f78696e61626f782f547269636b732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/oxinabox/Tricks.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a0a5fabf96bc6194c98eeb0865d92a052a9b0bf/68747470733a2f2f636f6465636f762e696f2f67682f6f78696e61626f782f547269636b732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/oxinabox/Tricks.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e63f78346a52afb257137ac9054998ce8fcfefa2/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f6f78696e61626f782f547269636b732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/oxinabox/Tricks.jl.svg" style="max-width:100%;"></a></p>
<p>Tricks.jl is an experimental package that does tricks with the Julia edge system.</p>
<p>Currently it has 2 tricks:</p>
<h2><a id="user-content-static_hasmethod" class="anchor" aria-hidden="true" href="#static_hasmethod"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>static_hasmethod</code>.</h2>
<p>This is like <code>hasmethod</code> but it does not trigger any dynamic lookup of the method table.
It just returns the constant <code>true</code> or <code>false</code>.
If methods are added, recompilation is triggered.</p>
<p>This is based on <a href="https://github.com/JuliaLang/julia/pull/32732">https://github.com/JuliaLang/julia/pull/32732</a> and that thread should be read before use.</p>
<p><strong>If you can make a reproducible case of <code>static_hasmethod</code> not working please post in <a href="https://github.com/oxinabox/Tricks.jl/issues/2">#2</a>.</strong><br>
I think it can't actually happen, and can't actually be called dynamically in a way that breaks it.</p>
<p>There is also a compatibility version of this function called <code>compat_hasmethod</code>, which picks between <code>static_hasmethod</code> or <code>hasmethod</code> depending on the Julia version.
Use this method inside your package to be compatible with <code>VERSION &lt; v"1.3"</code></p>
<h2><a id="user-content-static_methods" class="anchor" aria-hidden="true" href="#static_methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>static_methods</code></h2>
<p>This is just like <code>methods</code>, but again it doesn't trigger any dynamic lookup of the method tables.</p>
<p><strong>If you can make a reproducible case of <code>static_methods</code> not working please <a href="https://github.com/oxinabox/Tricks.jl/issues/">open an issue</a>.</strong></p>
<h2><a id="user-content-uses" class="anchor" aria-hidden="true" href="#uses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Uses</h2>
<h3><a id="user-content-we-can-use-static_hasmethod-to-declare-traits" class="anchor" aria-hidden="true" href="#we-can-use-static_hasmethod-to-declare-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>We can use <code>static_hasmethod</code> to declare traits.</h3>
<p>For demonstration we include versions based on static and nonstatic <code>has_method</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Tricks<span class="pl-k">:</span> static_hasmethod

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Iterable <span class="pl-k">end</span>; <span class="pl-k">struct</span> NonIterable <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-en">iterableness_dynamic</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">hasmethod</span>(iterate, Tuple{T}) ? <span class="pl-c1">Iterable</span>() : <span class="pl-c1">NonIterable</span>()
iterableness_dynamic (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">iterableness_static</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">static_hasmethod</span>(iterate, Tuple{T}) ? <span class="pl-c1">Iterable</span>() : <span class="pl-c1">NonIterable</span>()
iterableness_static (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<h3><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Demo:</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> examples <span class="pl-k">=</span>  (<span class="pl-c1">:a</span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], rand, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>), <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>,  <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> [<span class="pl-c1">iterableness_dynamic</span>(<span class="pl-c1">typeof</span>(x)) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">$</span>examples]
  <span class="pl-c1">13.608</span> Î¼s (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">304</span> bytes)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> [<span class="pl-c1">iterableness_static</span>(<span class="pl-c1">typeof</span>(x)) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">$</span>examples]
  <span class="pl-c1">582.249</span> ns (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">304</span> bytes)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()</pre></div>
<p>So it is over 20x faster.</p>
<p>this is because doesn't generate any code that has to run at runtime:
(i.e. it is not dynamic)</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">iterableness_static</span>(String)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> â     <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">Iterable</span>()))
) <span class="pl-k">=&gt;</span> Iterable

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">iterableness_dynamic</span>(String)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> â <span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:foreigncall</span>, :(<span class="pl-c1">:jl_gf_invoke_lookup</span>), Any, <span class="pl-c1">svec</span>(Any, UInt64), <span class="pl-c1">0</span>, :(<span class="pl-c1">:ccall</span>), Tuple{<span class="pl-c1">typeof</span>(iterate),String}, <span class="pl-c1">0xffffffffffffffff</span>, <span class="pl-c1">0xffffffffffffffff</span>))<span class="pl-k">::</span><span class="pl-c1">Any</span>
â   <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">===</span> Base<span class="pl-k">.</span><span class="pl-c1">nothing</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
â   <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> Core<span class="pl-k">.</span>Intrinsics<span class="pl-k">.</span><span class="pl-c1">not_int</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
âââ      goto <span class="pl-c"><span class="pl-c">#</span>3 if not %3</span>
<span class="pl-c1">2</span> â      <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">Iterable</span>()))
<span class="pl-c1">3</span> â      <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">NonIterable</span>()))
) <span class="pl-k">=&gt;</span> Union{Iterable, NonIterable}</pre></div>
<h3><a id="user-content-demonstration-of-it-updating" class="anchor" aria-hidden="true" href="#demonstration-of-it-updating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Demonstration of it updating:</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iterableness_static</span>(Foo)
<span class="pl-c1">NonIterable</span>()</pre></div>
<p>Initially, it wasn't iterable,
but now we will add the iteration methods to it:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">iterate</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span>);

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">iterate</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>) <span class="pl-k">=</span> <span class="pl-c1">nothing</span>;

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">length</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) <span class="pl-k">=</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">Foo</span>())
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iterableness_static</span>(Foo)
<span class="pl-c1">Iterable</span>()</pre></div>
</article></div>