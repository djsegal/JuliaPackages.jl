<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tricks" class="anchor" aria-hidden="true" href="#tricks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tricks</h1>

<p><a href="https://travis-ci.com/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad0ab614e3d47d0ed1fd18bfcbf83890f7e53b39/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f547269636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/Tricks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/Tricks-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9844e96e581fe4649ceafd0f1fd056ff12b15f28/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6f78696e61626f782f547269636b732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/oxinabox/Tricks.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a0a5fabf96bc6194c98eeb0865d92a052a9b0bf/68747470733a2f2f636f6465636f762e696f2f67682f6f78696e61626f782f547269636b732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/oxinabox/Tricks.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e63f78346a52afb257137ac9054998ce8fcfefa2/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f6f78696e61626f782f547269636b732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/oxinabox/Tricks.jl.svg" style="max-width:100%;"></a></p>
<p>Tricks.jl is an experimental package that does tricks with the with Julia edge system.</p>
<p>Currently it has 2 tricks:</p>
<h2><a id="user-content-static_hasmethod" class="anchor" aria-hidden="true" href="#static_hasmethod"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>static_hasmethod</code>.</h2>
<p>This is like <code>hasmethod</code> but it does not trigger any dynamic lookup of the method table.
it just returns the constant <code>true</code> or <code>false</code>.
If methods are added, recompilation is triggered.</p>
<p>This is based on <a href="https://github.com/JuliaLang/julia/pull/32732">https://github.com/JuliaLang/julia/pull/32732</a> and that thread should be read before use.</p>
<p><strong>If you can make a reproducable case of <code>static_hasmethod</code> not working please post in <a href="https://github.com/oxinabox/Tricks.jl/issues/2">#2</a>.</strong><br>
I think it can't actually happen, and can't actually be called dynamically in a way that breaks it.</p>
<h2><a id="user-content-static_methods" class="anchor" aria-hidden="true" href="#static_methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>static_methods</code></h2>
<p>This is just like <code>methods</code>, but again it doesn't trigger any dynamic lookup of the method tables.</p>
<p><strong>If you can make a reproducable case of ``static_methods` not working please <a href="https://github.com/oxinabox/Tricks.jl/issues/">open an issue</a>.</strong></p>
<h2><a id="user-content-uses" class="anchor" aria-hidden="true" href="#uses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Uses</h2>
<h3><a id="user-content-we-can-use-static_hasmethod-to-declare-traits" class="anchor" aria-hidden="true" href="#we-can-use-static_hasmethod-to-declare-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>We can use <code>static_hasmethod</code> to declare traits.</h3>
<p>For demonstration we include versions based on static and nonstatic <code>has_method</code>.</p>
<pre><code>julia&gt; using Tricks: static_hasmethod

julia&gt; struct Iterable end; struct NonIterable end;

julia&gt; iterableness_dynamic(::Type{T}) where T = hasmethod(iterate, Tuple{T}) ? Iterable() : NonIterable()
iterableness_dynamic (generic function with 1 method)

julia&gt; iterableness_static(::Type{T}) where T = static_hasmethod(iterate, Tuple{T}) ? Iterable() : NonIterable()
iterableness_static (generic function with 1 method)
</code></pre>
<h3><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demo:</h3>
<pre><code>julia&gt; using BenchmarkTools

julia&gt; const examples =  (:a, "abc", [1,2,3], rand, (2,3), ones(4,10,2), 'a',  1:100);

julia&gt; @btime [iterableness_dynamic(typeof(x)) for x in $examples]
  13.608 μs (5 allocations: 304 bytes)
8-element Array{Any,1}:
 NonIterable()
 Iterable()
 Iterable()
 NonIterable()
 Iterable()
 Iterable()
 Iterable()
 Iterable()

julia&gt; @btime [iterableness_static(typeof(x)) for x in $examples]
  582.249 ns (5 allocations: 304 bytes)
8-element Array{Any,1}:
 NonIterable()
 Iterable()
 Iterable()
 NonIterable()
 Iterable()
 Iterable()
 Iterable()
 Iterable()
</code></pre>
<p>So it is over 20x faster.</p>
<p>this is because doesn't generate any code that has to run at runtime:
(i.e. it is not dynamic)</p>
<pre><code>julia&gt; @code_typed iterableness_static(String)
CodeInfo(
1 ─     return $(QuoteNode(Iterable()))
) =&gt; Iterable

julia&gt; @code_typed iterableness_dynamic(String)
CodeInfo(
1 ─ %1 = $(Expr(:foreigncall, :(:jl_gf_invoke_lookup), Any, svec(Any, UInt64), 0, :(:ccall), Tuple{typeof(iterate),String}, 0xffffffffffffffff, 0xffffffffffffffff))::Any
│   %2 = (%1 === Base.nothing)::Bool
│   %3 = Core.Intrinsics.not_int(%2)::Bool
└──      goto #3 if not %3
2 ─      return $(QuoteNode(Iterable()))
3 ─      return $(QuoteNode(NonIterable()))
) =&gt; Union{Iterable, NonIterable}
</code></pre>
<h3><a id="user-content-demonstration-of-it-updating" class="anchor" aria-hidden="true" href="#demonstration-of-it-updating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demonstration of it updating:</h3>
<pre><code>julia&gt; struct Foo end

julia&gt; iterableness_static(Foo)
NonIterable()
</code></pre>
<p>Initially, it wasn't iterable,
but now we will add the iteration methods to it:</p>
<pre><code>julia&gt; Base.iterate(::Foo) = ("Foo", nothing);

julia&gt; Base.iterate(::Foo, ::Nothing) = nothing;

julia&gt; Base.length(::Foo) = 1;

julia&gt; collect(Foo())
1-element Array{Any,1}:
 "Foo"

julia&gt; iterableness_static(Foo)
Iterable()
</code></pre>
</article></div>