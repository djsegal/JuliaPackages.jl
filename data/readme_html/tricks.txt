<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tricks" class="anchor" aria-hidden="true" href="#tricks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tricks</h1>

<p dir="auto"><a href="https://codecov.io/gh/oxinabox/Tricks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5204316e38941ac0b760e25a9ad40cca530b2829b847583c656fecd3e3f032b1/68747470733a2f2f636f6465636f762e696f2f67682f6f78696e61626f782f547269636b732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/oxinabox/Tricks.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> Notice <g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Tricks.jl</strong> is not required post-Julia v1.10.0-DEV.609.</td>
</tr>
<tr>
<td>The features of running <code>hasmethod</code> at compile-time are now built into the language.</td>
</tr>
<tr>
<td>It can still be used for compatibility with older versions of the language.</td>
</tr>
</tbody>
</table>
<p dir="auto">Tricks.jl is an particularly <del>evil</del> cunning package that does tricks with the Julia edge system.</p>
<p dir="auto">Currently it has the following tricks:</p>
<h3 dir="auto"><a id="user-content-static_hasmethod" class="anchor" aria-hidden="true" href="#static_hasmethod"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>static_hasmethod</code>.</h3>
<p dir="auto">This is like <code>hasmethod</code> but it does not trigger any dynamic lookup of the method table.
It just returns the constant <code>true</code> or <code>false</code>.
If methods are added, recompilation is triggered.</p>
<p dir="auto"><strong>If you can make a reproducible case of <code>static_hasmethod</code> not working please post in <a href="https://github.com/oxinabox/Tricks.jl/issues/2" data-hovercard-type="issue" data-hovercard-url="/oxinabox/Tricks.jl/issues/2/hovercard">#2</a>.</strong><br>
I think it can't actually happen, and can't actually be called dynamically in a way that breaks it.</p>
<h3 dir="auto"><a id="user-content-static_methods" class="anchor" aria-hidden="true" href="#static_methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>static_methods</code></h3>
<p dir="auto">This is just like <code>methods</code>, but again it doesn't trigger any dynamic lookup of the method tables.</p>
<p dir="auto"><strong>If you can make a reproducible case of <code>static_methods</code> not working please <a href="https://github.com/oxinabox/Tricks.jl/issues/">open an issue</a>.</strong></p>
<h3 dir="auto"><a id="user-content-static_fieldnames-static_fieldtypes-static_fieldcount" class="anchor" aria-hidden="true" href="#static_fieldnames-static_fieldtypes-static_fieldcount"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>static_fieldnames</code>, <code>static_fieldtypes</code>, <code>static_fieldcount</code></h3>
<p dir="auto">Just like <code>Base.fieldnames</code> <code>Base.fieldtypes</code>, and <code>Base.fieldcount</code> but will participate in constant
propagation and will be free of runtime dynamism.</p>
<h2 dir="auto"><a id="user-content-uses" class="anchor" aria-hidden="true" href="#uses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Uses</h2>
<h3 dir="auto"><a id="user-content-we-can-use-static_hasmethod-to-declare-traits" class="anchor" aria-hidden="true" href="#we-can-use-static_hasmethod-to-declare-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>We can use <code>static_hasmethod</code> to declare traits.</h3>
<p dir="auto">For demonstration we include versions based on static and nonstatic <code>has_method</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Tricks: static_hasmethod

julia&gt; struct Iterable end; struct NonIterable end;

julia&gt; iterableness_dynamic(::Type{T}) where T = hasmethod(iterate, Tuple{T}) ? Iterable() : NonIterable()
iterableness_dynamic (generic function with 1 method)

julia&gt; iterableness_static(::Type{T}) where T = static_hasmethod(iterate, Tuple{T}) ? Iterable() : NonIterable()
iterableness_static (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Tricks<span class="pl-k">:</span> static_hasmethod

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Iterable <span class="pl-k">end</span>; <span class="pl-k">struct</span> NonIterable <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-en">iterableness_dynamic</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">hasmethod</span>(iterate, Tuple{T}) <span class="pl-k">?</span> <span class="pl-c1">Iterable</span>() <span class="pl-k">:</span> <span class="pl-c1">NonIterable</span>()
iterableness_dynamic (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">iterableness_static</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">static_hasmethod</span>(iterate, Tuple{T}) <span class="pl-k">?</span> <span class="pl-c1">Iterable</span>() <span class="pl-k">:</span> <span class="pl-c1">NonIterable</span>()
iterableness_static (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<h3 dir="auto"><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demo:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; const examples =  (:a, &quot;abc&quot;, [1,2,3], rand, (2,3), ones(4,10,2), 'a',  1:100);

julia&gt; @btime [iterableness_dynamic(typeof(x)) for x in $examples]
  13.608 μs (5 allocations: 304 bytes)
8-element Array{Any,1}:
 NonIterable()
 Iterable()
 Iterable()
 NonIterable()
 Iterable()
 Iterable()
 Iterable()
 Iterable()

julia&gt; @btime [iterableness_static(typeof(x)) for x in $examples]
  582.249 ns (5 allocations: 304 bytes)
8-element Array{Any,1}:
 NonIterable()
 Iterable()
 Iterable()
 NonIterable()
 Iterable()
 Iterable()
 Iterable()
 Iterable()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> examples <span class="pl-k">=</span>  (<span class="pl-c1">:a</span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], rand, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>), <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>,  <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> [<span class="pl-c1">iterableness_dynamic</span>(<span class="pl-c1">typeof</span>(x)) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">$</span>examples]
  <span class="pl-c1">13.608</span> μs (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">304</span> bytes)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> [<span class="pl-c1">iterableness_static</span>(<span class="pl-c1">typeof</span>(x)) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">$</span>examples]
  <span class="pl-c1">582.249</span> ns (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">304</span> bytes)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">NonIterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()
 <span class="pl-c1">Iterable</span>()</pre></div>
<p dir="auto">So it is over 20x faster.</p>
<p dir="auto">this is because doesn't generate any code that has to run at runtime:
(i.e. it is not dynamic)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @code_typed iterableness_static(String)
CodeInfo(
1 ─     return $(QuoteNode(Iterable()))
) =&gt; Iterable

julia&gt; @code_typed iterableness_dynamic(String)
CodeInfo(
1 ─ %1 = $(Expr(:foreigncall, :(:jl_gf_invoke_lookup), Any, svec(Any, UInt64), 0, :(:ccall), Tuple{typeof(iterate),String}, 0xffffffffffffffff, 0xffffffffffffffff))::Any
│   %2 = (%1 === Base.nothing)::Bool
│   %3 = Core.Intrinsics.not_int(%2)::Bool
└──      goto #3 if not %3
2 ─      return $(QuoteNode(Iterable()))
3 ─      return $(QuoteNode(NonIterable()))
) =&gt; Union{Iterable, NonIterable}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">iterableness_static</span>(String)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─     <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">Iterable</span>()))
) <span class="pl-k">=&gt;</span> Iterable

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">iterableness_dynamic</span>(String)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:foreigncall</span>, :(<span class="pl-c1">:jl_gf_invoke_lookup</span>), Any, <span class="pl-c1">svec</span>(Any, UInt64), <span class="pl-c1">0</span>, :(<span class="pl-c1">:ccall</span>), Tuple{<span class="pl-c1">typeof</span>(iterate),String}, <span class="pl-c1">0xffffffffffffffff</span>, <span class="pl-c1">0xffffffffffffffff</span>))<span class="pl-k">::</span><span class="pl-c1">Any</span>
│   <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">===</span> Base<span class="pl-k">.</span><span class="pl-c1">nothing</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
│   <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> Core<span class="pl-k">.</span>Intrinsics<span class="pl-k">.</span><span class="pl-c1">not_int</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
└──      goto <span class="pl-c"><span class="pl-c">#</span>3 if not %3</span>
<span class="pl-c1">2</span> ─      <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">Iterable</span>()))
<span class="pl-c1">3</span> ─      <span class="pl-k">return</span> <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">NonIterable</span>()))
) <span class="pl-k">=&gt;</span> Union{Iterable, NonIterable}</pre></div>
<h3 dir="auto"><a id="user-content-demonstration-of-it-updating" class="anchor" aria-hidden="true" href="#demonstration-of-it-updating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demonstration of it updating:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; struct Foo end

julia&gt; iterableness_static(Foo)
NonIterable()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iterableness_static</span>(Foo)
<span class="pl-c1">NonIterable</span>()</pre></div>
<p dir="auto">Initially, it wasn't iterable,
but now we will add the iteration methods to it:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Base.iterate(::Foo) = (&quot;Foo&quot;, nothing);

julia&gt; Base.iterate(::Foo, ::Nothing) = nothing;

julia&gt; Base.length(::Foo) = 1;

julia&gt; collect(Foo())
1-element Array{Any,1}:
 &quot;Foo&quot;

julia&gt; iterableness_static(Foo)
Iterable()"><pre>julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">iterate</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span>);

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">iterate</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>) <span class="pl-k">=</span> <span class="pl-c1">nothing</span>;

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">length</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) <span class="pl-k">=</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">Foo</span>())
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iterableness_static</span>(Foo)
<span class="pl-c1">Iterable</span>()</pre></div>
<h1 dir="auto"><a id="user-content-julia-version-support" class="anchor" aria-hidden="true" href="#julia-version-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia version support</h1>
<p dir="auto">The core trick that Tricks.jl relies on was introduced in Julia 1.3.
As such most of its methods do not work on earlier julia versions.</p>
<p dir="auto">For compatability purposes we do provide:</p>
<ul dir="auto">
<li><code>compat_hasmethod</code>, which picks between <code>static_hasmethod</code> or <code>hasmethod</code> depending on the Julia version.</li>
</ul>
</article></div>