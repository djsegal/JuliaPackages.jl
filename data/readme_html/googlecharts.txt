<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p>GoogleCharts</p>
<p>Julia interface to Google Chart Tools.</p>
<p>A Google chart involves basically four steps:</p>
<ul>
<li>a specification of a Google "DataTable"</li>
<li>a specification of chart options</li>
<li>a call to make the type of chart desired.</li>
<li>a call to draw the chart</li>
</ul>
<p>This package allows this to be done within <code>julia</code> by</p>
<ul>
<li>
<p>mapping a <code>DataFrame</code> object into a Google DataTable.</p>
</li>
<li>
<p>mapping a Dict of options into a JSON object of chart options. Many
of these options can be specified through keyword arguments.</p>
</li>
<li>
<p>providing various constructors to make the type of chart</p>
</li>
<li>
<p>providing a method to see the charts. This is called through
<code>Julia</code>'s <code>show</code> mechanism.  In general, the <code>render</code> method can draw
the chart or charts to an IOStream or file.</p>
</li>
</ul>
<p>A basic usage (see the test/ directory for more)</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using GoogleCharts, DataFrames

scatter_data = DataFrame(
    Age    = [8,  4,   11, 4, 3,   6.5],
    Weight = [12, 5.5, 14, 5, 3.5, 7  ]
)

options = Dict(:title =&gt; &quot;Age vs. Weight comparison&quot;,
           :hAxis =&gt;  Dict(:title =&gt; &quot;Age&quot;, 
                       :minValue =&gt; 0, 
                       :maxValue =&gt; 15),	
           :vAxis =&gt;  Dict(:title =&gt; &quot;Weight&quot;, 
                       :minValue =&gt; 0, 
                       :maxValue =&gt; 15)
)

scatter_chart(scatter_data, options)
"><pre><code>using GoogleCharts, DataFrames

scatter_data = DataFrame(
    Age    = [8,  4,   11, 4, 3,   6.5],
    Weight = [12, 5.5, 14, 5, 3.5, 7  ]
)

options = Dict(:title =&gt; "Age vs. Weight comparison",
           :hAxis =&gt;  Dict(:title =&gt; "Age", 
                       :minValue =&gt; 0, 
                       :maxValue =&gt; 15),	
           :vAxis =&gt;  Dict(:title =&gt; "Weight", 
                       :minValue =&gt; 0, 
                       :maxValue =&gt; 15)
)

scatter_chart(scatter_data, options)
</code></pre></div>
<p>For non-nested options, keyword arguments can be given, as opposed to a dictionary:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="chart = scatter_chart(scatter_data, title=&quot;Age vs. Weight comparison&quot;)
"><pre><code>chart = scatter_chart(scatter_data, title="Age vs. Weight comparison")
</code></pre></div>
<p>There are constructors for the following charts
(cf. <a href="https://developers.google.com/chart/interactive/docs/gallery" rel="nofollow">Charts Gallery</a>)</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="       area_chart, bar_chart, bubble_chart, candlestick_chart, column_chart, combo_chart,
       gauge_chart, geo_chart, line_chart, pie_chart, scatter_chart, stepped_area_chart,
       table_chart, tree_chart, annotated_time_line, intensity_map, motion_chart, org_chart,
       image_spark_line
"><pre><code>       area_chart, bar_chart, bubble_chart, candlestick_chart, column_chart, combo_chart,
       gauge_chart, geo_chart, line_chart, pie_chart, scatter_chart, stepped_area_chart,
       table_chart, tree_chart, annotated_time_line, intensity_map, motion_chart, org_chart,
       image_spark_line
</code></pre></div>
<p>The helper function <code>help_on_chart("chart_name")</code>
will open Google's documentation for the specified chart in a local browser.</p>
<p>The names of the data frame are used by the various charts. The order
of the columns is important to the charting tools. The "Data Format"
section of each web page describes this. We don't have a mechanism in
place supporting Google's "Column roles".</p>
<p>The options are specified through a <code>Dict</code> which is translated into
JSON by <code>JSON.to_json</code>. There are <em>numerous</em> options described in the
"Configuration Options" section of each chart's web page. Some useful
ones are shown in the example to set labels for the variables and the
viewport. Google charts seem to like integer ranges in the viewports
by default.  Top-level properties, can be set using keyword arguments.</p>
<p>In the <code>tests/</code> subdirectory is a file with implementations with this
package of the basic examples from Google's web pages. Some additional
examples of configurations can be found there.</p>
<p>The <code>GoogleCharts.render</code> method can draw a chart to an IOStream, a specified
filename, or (when used as above) to a web page that is displayed
locally. One can specify more than one chart at a time using a vector
of charts.</p>
<h3><a id="user-content-a-plot-function" class="anchor" aria-hidden="true" href="#a-plot-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A Plot function</h3>
<p>There is a <code>Plot</code> function for plotting functions with a similar interface as <code>Plot</code>'s <code>plot</code> function:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Plot(sin, 0, 2pi)
"><pre><code>Plot(sin, 0, 2pi)
</code></pre></div>
<p>A vector of functions:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Plot([sin, u -&gt; cos(u) &gt; 0 ? 0 : NaN], 0, 2pi, 
	   lineWidth=5, 
	   title=&quot;A function and where its derivative is positive&quot;,
           vAxis=Dict(:minValue =&gt; -1.2, :maxValue =&gt; 1.2))
"><pre><code>Plot([sin, u -&gt; cos(u) &gt; 0 ? 0 : NaN], 0, 2pi, 
	   lineWidth=5, 
	   title="A function and where its derivative is positive",
           vAxis=Dict(:minValue =&gt; -1.2, :maxValue =&gt; 1.2))
</code></pre></div>
<p>The <code>Plot</code> function uses a <code>line_chart</code>. The above example shows that
<code>NaN</code> values are handled gracefully, unlike <code>Inf</code> values, which we replace with <code>NaN</code>.</p>
<p>Plot also works for paired vectors:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = linspace(0, 1., 20)
y = rand(20)
Plot(x, y)			         # dot-to-dot plot
Plot(x, y, curveType=&quot;function&quot;)         # smooths things out
"><pre><code>x = linspace(0, 1., 20)
y = rand(20)
Plot(x, y)			         # dot-to-dot plot
Plot(x, y, curveType="function")         # smooths things out
</code></pre></div>
<h3><a id="user-content-parametric-plots" class="anchor" aria-hidden="true" href="#parametric-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>parametric plots</h3>
<p>Passing a tuple of functions will produce a parametric plot:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Plot((x -&gt; sin(2x), cos), 0, 2pi)
"><pre><code>Plot((x -&gt; sin(2x), cos), 0, 2pi)
</code></pre></div>
<h3><a id="user-content-scatter-plots" class="anchor" aria-hidden="true" href="#scatter-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>scatter plots</h3>
<p>The latter shows that <code>Plot</code> assumes your data is a discrete
approximation to a function. For scatterplots, the <code>Scatter</code>
convenience function is given. A simple use might be:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = linspace(0, 1., 20)
y = rand(20)
Scatter(x, y)
"><pre><code>x = linspace(0, 1., 20)
y = rand(20)
Scatter(x, y)
</code></pre></div>
<p>If the data is in a data frame format we have a interface like:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using RDatasets
mtcars = dataset(&quot;datasets&quot;, &quot;mtcars&quot;)
Scatter(:WT, :MPG, mtcars)
"><pre><code>using RDatasets
mtcars = dataset("datasets", "mtcars")
Scatter(:WT, :MPG, mtcars)
</code></pre></div>
<p>And we can even use with <code>groupby</code> objects:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="iris = dataset(&quot;datasets&quot;, &quot;iris&quot;)
d=iris[:, [2,3,6]]          ## in the order  &quot;x, y, grouping factor&quot;
gp = groupby(d, :Species)
Scatter(gp)                 ## in R this would be plot(Sepal.Width ~ Sepal.Length, iris, col=Species)
                            ## or ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
"><pre><code>iris = dataset("datasets", "iris")
d=iris[:, [2,3,6]]          ## in the order  "x, y, grouping factor"
gp = groupby(d, :Species)
Scatter(gp)                 ## in R this would be plot(Sepal.Width ~ Sepal.Length, iris, col=Species)
                            ## or ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
</code></pre></div>
<h3><a id="user-content-surface-plots" class="anchor" aria-hidden="true" href="#surface-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Surface plots</h3>
<p>Some experimental code is in place for surface plots. It needs work. The basic use is like:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="surfaceplot((x,y) -&gt; x^2 + y^2, linspace(0,1,20), linspace(0,2,20))
"><pre><code>surfaceplot((x,y) -&gt; x^2 + y^2, linspace(0,1,20), linspace(0,2,20))
</code></pre></div>
<p>The above does not seem to work in many browsers and does not work reliably in <code>IJulia</code> (only success has been with Chrome).</p>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h3>
<p>The <code>googleVis</code> package for <code>R</code> does a similar thing, but has more
customizability. This package should try and provide similar
features. In particular, the following could be worked on:</p>
<ul>
<li>Needs a julian like interface,</li>
<li>some features for interactive usage,</li>
<li>some integration with local web server.</li>
</ul>
</article></div>