<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-erdos" class="anchor" aria-hidden="true" href="#erdos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Erdos</h1>
<p><a href="https://carlolucibello.github.io/Erdos.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/CarloLucibello/Erdos.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2ea0459f09e5d42ba24350baaac85bdebf57ad97/68747470733a2f2f636f6465636f762e696f2f67682f4361726c6f4c75636962656c6c6f2f4572646f732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/CarloLucibello/Erdos.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/CarloLucibello/Erdos.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0e8b515542edfaaf9e58048b6449a2aa9f447a6/68747470733a2f2f7472617669732d63692e6f72672f4361726c6f4c75636962656c6c6f2f4572646f732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/CarloLucibello/Erdos.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Erdos" rel="nofollow"><img src="https://camo.githubusercontent.com/56c73340fa3ac1bb2bb72b3d3542422618a4764a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4572646f735f302e372e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/Erdos_0.7.svg" style="max-width:100%;"></a></p>
<p>A graph library entirely written in Julia. Install it with</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Erdos<span class="pl-pds">"</span></span>)</pre></div>
<p><em>Erdos</em> defines some types associated to graph mathematical structures and implements a huge number of algorithms to work with them.
Moreover edge and vertex properties can be internally stored in some of the graph types (we call them networks) and read/written in most common graph formats.
Custom graphs and networks can be defined inheriting from <em>Erdos</em>' abstract types.</p>
<p>Take a look at the companion package <a href="https://github.com/CarloLucibello/ErdosExtras.jl">ErdosExtras</a> for additional algorithms.</p>
<h2><a id="user-content-licence-and-credits" class="anchor" aria-hidden="true" href="#licence-and-credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Licence and Credits</h2>
<p><em>Erdos</em> is released under MIT License. Graphs stored in the <a href="https://github.com/CarloLucibello/Erdos.jl/tree/master/datasets">datasets</a> directory are released under GPLv3 License.</p>
<p>Huge credit goes to the contributors of <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>, from which this library is derived. Also thanks to Tiago de Paula Peixoto and his Python library <a href="https://graph-tool.skewed.de/" rel="nofollow">graph-tool</a> for inspiration and for the graphs in <a href="https://github.com/CarloLucibello/Erdos.jl/tree/master/datasets">datasets</a>.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<p>Refer to the <a href="https://carlolucibello.github.io/Erdos.jl/latest" rel="nofollow">documentation</a> to explore all the features of Erdos.
Here is a comprehensive list of the implemente algorithms. (<em>EE</em>) denotes algorithms in the companion package <a href="https://github.com/CarloLucibello/ErdosExtras.jl">ErdosExtras</a>.</p>
<ul>
<li>
<p><strong>core functions:</strong> vertices and edges addition and removal, degree (in/out/all), neighbors (in/out/all)</p>
</li>
<li>
<p><strong>maps</strong> dictionary like types to store properties associated to vertices and edges</p>
</li>
<li>
<p><strong>networks</strong> store vertex/edge/graph properties (maps) inside the graph itself</p>
</li>
<li>
<p><strong>connectivity:</strong> strongly- and weakly-connected components, bipartite checks, condensation, attracting components, neighborhood, k-core</p>
</li>
<li>
<p><strong>operators:</strong> complement, reverse, reverse!, union, join, intersect, difference, symmetric difference, blockdiag, induced subgraphs, products (cartesian/scalar)</p>
</li>
<li>
<p><strong>shortest paths:</strong> Dijkstra, Dijkstra with predecessors, Bellman-Ford, Floyd-Warshall, A*</p>
</li>
<li>
<p><strong>graph datasets:</strong> A collection of real world graphs (e.g. Zachary's karate club)</p>
</li>
<li>
<p><strong>graph generators:</strong> <a href="https://github.com/CarloLucibello/Erdos.jl/blob/master/src/generators/smallgraphs.jl">notorious graphs</a>, euclidean graphs and random graphs (Erdős–Rényi, Watts-Strogatz, random regular, arbitrary degree sequence, stochastic block model)</p>
</li>
<li>
<p><strong>I/O formats:</strong> <a href="http://en.wikipedia.org/wiki/GraphML" rel="nofollow">graphml</a>, <a href="https://en.wikipedia.org/wiki/Graph_Modelling_Language" rel="nofollow">gml</a>, <a href="http://gexf.net/format" rel="nofollow">gexf</a>, <a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language)" rel="nofollow">dot</a>, <a href="http://gephi.org/users/supported-graph-formats/pajek-net-format/" rel="nofollow">net</a>, <a href="https://graph-tool.skewed.de/static/doc/gt_format.html" rel="nofollow">gt</a>. For some of these formats vertex/edge/graph properties can be read and written.</p>
</li>
<li>
<p><strong>centrality:</strong> betweenness, closeness, degree, pagerank, Katz</p>
</li>
<li>
<p><strong>traversal operations:</strong> cycle detection, BFS and DFS DAGs, BFS and DFS traversals with visitors, DFS topological sort, maximum adjacency / minimum cut, multiple random walks</p>
</li>
<li>
<p><strong>flow operations:</strong> maximum flow, minimum s-t cut</p>
</li>
<li>
<p><strong>matching:</strong> minimum weight matching on arbitrary graphs (<em>EE</em>), minimum b-matching (<em>EE</em>)</p>
</li>
<li>
<p><strong>travelling salesman problem:</strong> a TSP solver based on linear programming (<em>EE</em>)</p>
</li>
<li>
<p><strong>dismantling:</strong> collective influencer heuristic</p>
</li>
<li>
<p><strong>clique enumeration:</strong> maximal cliques</p>
</li>
<li>
<p><strong>linear algebra / spectral graph theory:</strong> adjacency matrix, Laplacian matrix, non-backtracking matrix</p>
</li>
<li>
<p><strong>community:</strong> modularity, community detection, core-periphery, clustering coefficients</p>
</li>
<li>
<p><strong>distance within graphs:</strong> eccentricity, diameter, periphery, radius, center</p>
</li>
<li>
<p><strong>distance between graphs:</strong> spectral_distance, edit_distance</p>
</li>
</ul>
</article></div>