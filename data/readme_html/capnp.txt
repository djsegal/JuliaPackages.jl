<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-capnpjl---julia-plugin-for-capnproto" class="anchor" aria-hidden="true" href="#capnpjl---julia-plugin-for-capnproto"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Capnp.jl - Julia plugin for Cap'n'proto</h1>
<p dir="auto"><strong>This is currently a prototype.</strong></p>
<h1 dir="auto"><a id="user-content-install--use" class="anchor" aria-hidden="true" href="#install--use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install &amp; use</h1>
<p dir="auto">Install from JuliaHub:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add Capnp"><pre class="notranslate"><code>] add Capnp
</code></pre></div>
<p dir="auto">Download <code>capnpc-jl</code> from this repository and generate code for a schema with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="capnpc -o./capnpc-jl example/addressbook.capnp"><pre class="notranslate"><code>capnpc -o./capnpc-jl example/addressbook.capnp
</code></pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">See <a href="https://capnproto.org/cxx.html" rel="nofollow">the addressbook example</a> in the <a href="example/"><code>example</code> directory</a>.</p>
<h2 dir="auto"><a id="user-content-generated-names" class="anchor" aria-hidden="true" href="#generated-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generated names</h2>
<p dir="auto">Capnp.jl supports namespace annotations and translates them into Julia modules.  E.g. using
<code>$Cxx.namespace("capnp::schema");</code> generates code in module <code>capnp.schema</code>. Note Julia modules can't reference each
other in a cycle.</p>
<p dir="auto">To start reading a reader has to be opened with a stream, e.g. <code>message = Capnp.MessageReader(stdin)</code> and root reader
created, e.g. for a struct <code>A</code> <code>reader = root_A(message)</code>. To write, a writer has to be created, e.g. <code>message = Capnp.AllocMessageBuilder()</code>, root writer initialised, e.g. <code>writer = initRoot_A(message)</code>, and finally the message
should be written to a stream <code>writeMessageToStream(message, stdout)</code>.</p>
<p dir="auto">For a struct <code>A</code> with a field <code>xy</code> function <code>A_getXy(reader)</code> is generated. If <code>A</code> has a nested struct <code>B</code> with a field
<code>yz</code> then <code>A_B_getYz()</code> is generated.</p>
<p dir="auto">For reading and writing lists you can use brackets <code>[]</code> but note this is 1-based as is usual in Julia. For writing lists
you need to initialise them with <code>A_initBs(a_writer, number_of_items)</code>.</p>
<p dir="auto">If struct <code>A</code> has a union group <code>u</code> then <code>A_u_union</code> enum is generated as well as function <code>A_u_which(a_reader)</code>. For an
anonymous union the names would be <code>A_union</code> and <code>A_which</code>. Sett union slot <code>xy</code> with <code>A_u_setXy(a_writer, value)</code> or
<code>A_u_setXy(a_writer)</code> if <code>xy</code> is <code>Void</code>. For <code>xy</code> of struct type use <code>xy_writer = A_u_initXy(a_writer)</code>.</p>
<p dir="auto">(If you feel there's something missing in this description then please let me know.)</p>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto">See <code>src/Capnp.jl</code> for description of code structure. To generate the code for <em>the</em> Capnp schema use <code>capnpc -o./capnpc-jl src/schema.capnp</code>.</p>
<p dir="auto">Some things to work on:</p>
<ul dir="auto">
<li>Add a test like the addressbook integration test but one testing <em>the</em> capnp schema reading/writing.</li>
<li>Emit types that make user code safer.</li>
<li>Zero allocations when reading or writing using a big enough buffer. Start by adding a test.</li>
<li>Support capnp's packing.</li>
<li>Generate smaller code.</li>
<li>Support generics.</li>
<li>Test in <em>some</em> production environment. (Please let me know if you do.)</li>
<li>Initialisation/default values.</li>
</ul>
<p dir="auto">For debugging it can be useful to save a message to a file and use <code>xxd --bits --cols 8</code>. <a href="https://capnproto.org/otherlang.html" rel="nofollow">How to Write Compiler Plugins</a> has other good tips, especially the bit with printing annotated schema (<code>capnp compile -ocapnp schema.capnp</code>).</p>
<p dir="auto">Finally, run tests with <code>julia --project test/runtests.jl</code> and format code (<code>using JuliaFormatter; format(".")</code>, except generated code; <code>git checkout src/schema.capnp.jl</code>).</p>
</article></div>