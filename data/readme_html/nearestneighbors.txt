<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nearestneighborsjl" class="anchor" aria-hidden="true" href="#nearestneighborsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NearestNeighbors.jl</h1>
<p dir="auto"><a href="https://github.com/KristofferC/NearestNeighbors.jl/actions?query=workflows/CI"><img src="https://github.com/KristofferC/NearestNeighbors.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/KristofferC/NearestNeighbors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d16738ee6c64f8e11fdc5549b540f523b9a954384b7ce7fbbf419d1ad724325d/68747470733a2f2f636f6465636f762e696f2f6769746875622f4b726973746f66666572432f4e6561726573744e65696768626f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/KristofferC/NearestNeighbors.jl/coverage.svg?branch=master" style="max-width: 100%;"></a> <a href="https://zenodo.org/badge/latestdoi/45321556" rel="nofollow"><img src="https://camo.githubusercontent.com/1bf091b5f9b79d142189b0137bcb48fa490a5e1a88c9014a420dca750f0f7f19/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f34353332313535362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/45321556.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>NearestNeighbors.jl</code> is a package written in Julia to perform nearest neighbor searches.</p>
<hr>
<h2 dir="auto"><a id="user-content-creating-a-tree" class="anchor" aria-hidden="true" href="#creating-a-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a tree</h2>
<p dir="auto">There are currently three types of trees available:</p>
<ul dir="auto">
<li><code>BruteTree</code>: Not actually a tree. It linearly searches all points in a brute force fashion. Works with any <code>Metric</code>.</li>
<li><code>KDTree</code>: In a kd tree the points are recursively split into groups using hyper-planes.
Therefore a <code>KDTree</code> only works with axis aligned metrics which are: <code>Euclidean</code>, <code>Chebyshev</code>, <code>Minkowski</code> and <code>Cityblock</code>.</li>
<li><code>BallTree</code>: Points are recursively split into groups bounded by hyper-spheres. Works with any <code>Metric</code>.</li>
</ul>
<p dir="auto">These trees are created with the following syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="BruteTree(data, metric; leafsize, reorder)
KDTree(data, metric; leafsize, reorder)
BallTree(data, metric; leafsize, reorder)"><pre><span class="pl-c1">BruteTree</span>(data, metric; leafsize, reorder)
<span class="pl-c1">KDTree</span>(data, metric; leafsize, reorder)
<span class="pl-c1">BallTree</span>(data, metric; leafsize, reorder)</pre></div>
<ul dir="auto">
<li><code>data</code>: The data, i.e., the points to build up the tree from. It can either be
<ul dir="auto">
<li>a matrix of size <code>nd Ã— np</code> with the points to insert in the tree where <code>nd</code> is the dimensionality of the points and <code>np</code> is the number of points</li>
<li>a vector of vectors with fixed dimensionality, <code>nd</code>, which must be part of the type. Specifically, <code>data</code> should be a <code>Vector{V}</code>, where <code>V</code> is itself a subtype of an <code>AbstractVector</code> and such that <code>eltype(V)</code> and <code>length(V)</code> are defined.
(For example, with 3D points, <code>V = SVector{3, Float64}</code> works because <code>eltype(V) = Float64</code> and <code>length(V) = 3</code> are defined in <code>V</code>.)</li>
</ul>
</li>
<li><code>metric</code>: The metric to use, defaults to <code>Euclidean</code>. This is one of the <code>Metric</code> types defined in the <code>Distances.jl</code> packages. It is possible to define your own metrics by simply creating new types that are subtypes of <code>Metric</code>.</li>
<li><code>leafsize</code> (keyword argument): Determines at what number of points to stop splitting the tree further. There is a trade-off between traversing the tree and having to evaluate the metric function for increasing number of points.</li>
<li><code>reorder</code> (keyword argument): While building the tree this will put points close in distance close in memory since this helps with cache locality. In this case, a copy of the original data will be made so that the original data is left unmodified. This can have a significant impact on performance and is by default set to <code>true</code>.</li>
</ul>
<p dir="auto">All trees in <code>NearestNeighbors.jl</code> are static which means that points can not be added or removed from an already created tree.</p>
<p dir="auto">Here are a few examples of creating trees:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NearestNeighbors
data = rand(3, 10^4)

# Create trees
kdtree = KDTree(data; leafsize = 10)
balltree = BallTree(data, Minkowski(3.5); reorder = false)
brutetree = BruteTree(data)"><pre><span class="pl-k">using</span> NearestNeighbors
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Create trees</span>
kdtree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(data; leafsize <span class="pl-k">=</span> <span class="pl-c1">10</span>)
balltree <span class="pl-k">=</span> <span class="pl-c1">BallTree</span>(data, <span class="pl-c1">Minkowski</span>(<span class="pl-c1">3.5</span>); reorder <span class="pl-k">=</span> <span class="pl-c1">false</span>)
brutetree <span class="pl-k">=</span> <span class="pl-c1">BruteTree</span>(data)</pre></div>
<h2 dir="auto"><a id="user-content-k-nearest-neighbor-knn-searches" class="anchor" aria-hidden="true" href="#k-nearest-neighbor-knn-searches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>k Nearest Neighbor (kNN) searches</h2>
<p dir="auto">A kNN search finds the <code>k</code> nearest neighbors to given point(s).
This is done with the method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="knn(tree, points, k, sortres = false, skip = always_false) -&gt; idxs, dists"><pre><span class="pl-c1">knn</span>(tree, points, k, sortres <span class="pl-k">=</span> <span class="pl-c1">false</span>, skip <span class="pl-k">=</span> always_false) <span class="pl-k">-&gt;</span> idxs, dists</pre></div>
<ul dir="auto">
<li><code>tree</code>: The tree instance</li>
<li><code>points</code>: A vector or matrix of points to find the <code>k</code> nearest neighbors to. If <code>points</code> is a vector of numbers then this represents a single point, if <code>points</code> is a matrix then the <code>k</code> nearest neighbors to each point (column) will be computed. <code>points</code> can also be a vector of other vectors where each element in the outer vector is considered a point.</li>
<li><code>sortres</code> (optional): Determines if the results should be sorted before returning.
In this case the results will be sorted in order of increasing distance to the point.</li>
<li><code>skip</code> (optional): A predicate to determine if a given point should be skipped, for
example if iterating over points and a point has already been visited.</li>
</ul>
<p dir="auto">It is generally better for performance to query once with a large number of points than to query multiple
times with one point per query.</p>
<p dir="auto">As a convenience, if you only want the closest nearest neighbor, you can call <code>nn</code> instead for a cleaner result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nn(tree, points, skip = always_false) -&gt; idxs, dists"><pre><span class="pl-c1">nn</span>(tree, points, skip <span class="pl-k">=</span> always_false) <span class="pl-k">-&gt;</span> idxs, dists</pre></div>
<p dir="auto">Some examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NearestNeighbors
data = rand(3, 10^4)
k = 3
point = rand(3)

kdtree = KDTree(data)
idxs, dists = knn(kdtree, point, k, true)

idxs
# 3-element Array{Int64,1}:
#  4683
#  6119
#  3278

dists
# 3-element Array{Float64,1}:
#  0.039032201026256215
#  0.04134193711411951
#  0.042974090446474184

# Multiple points
points = rand(3, 4);

idxs, dists = knn(kdtree, points, k, true);

idxs
# 4-element Array{Array{Int64,1},1}:
#  [3330, 4072, 2696]
#  [1825, 7799, 8358]
#  [3497, 2169, 3737]
#  [1845, 9796, 2908]

# dists
# 4-element Array{Array{Float64,1},1}:
#  [0.0298932, 0.0327349, 0.0365979]
#  [0.0348751, 0.0498355, 0.0506802]
#  [0.0318547, 0.037291, 0.0421208]
#  [0.03321, 0.0360935, 0.0411951]

# Static vectors
v = @SVector[0.5, 0.3, 0.2];

idxs, dists = knn(kdtree, v, k, true);

idxs
# 3-element Array{Int64,1}:
#   842
#  3075
#  3046

dists
# 3-element Array{Float64,1}:
#  0.04178677766255837
#  0.04556078331418939
#  0.049967238112417205"><pre><span class="pl-k">using</span> NearestNeighbors
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)
k <span class="pl-k">=</span> <span class="pl-c1">3</span>
point <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)

kdtree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(data)
idxs, dists <span class="pl-k">=</span> <span class="pl-c1">knn</span>(kdtree, point, k, <span class="pl-c1">true</span>)

idxs
<span class="pl-c"><span class="pl-c">#</span> 3-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  4683</span>
<span class="pl-c"><span class="pl-c">#</span>  6119</span>
<span class="pl-c"><span class="pl-c">#</span>  3278</span>

dists
<span class="pl-c"><span class="pl-c">#</span> 3-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.039032201026256215</span>
<span class="pl-c"><span class="pl-c">#</span>  0.04134193711411951</span>
<span class="pl-c"><span class="pl-c">#</span>  0.042974090446474184</span>

<span class="pl-c"><span class="pl-c">#</span> Multiple points</span>
points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>);

idxs, dists <span class="pl-k">=</span> <span class="pl-c1">knn</span>(kdtree, points, k, <span class="pl-c1">true</span>);

idxs
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Array{Int64,1},1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  [3330, 4072, 2696]</span>
<span class="pl-c"><span class="pl-c">#</span>  [1825, 7799, 8358]</span>
<span class="pl-c"><span class="pl-c">#</span>  [3497, 2169, 3737]</span>
<span class="pl-c"><span class="pl-c">#</span>  [1845, 9796, 2908]</span>

<span class="pl-c"><span class="pl-c">#</span> dists</span>
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Array{Float64,1},1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  [0.0298932, 0.0327349, 0.0365979]</span>
<span class="pl-c"><span class="pl-c">#</span>  [0.0348751, 0.0498355, 0.0506802]</span>
<span class="pl-c"><span class="pl-c">#</span>  [0.0318547, 0.037291, 0.0421208]</span>
<span class="pl-c"><span class="pl-c">#</span>  [0.03321, 0.0360935, 0.0411951]</span>

<span class="pl-c"><span class="pl-c">#</span> Static vectors</span>
v <span class="pl-k">=</span> <span class="pl-c1">@SVector</span>[<span class="pl-c1">0.5</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.2</span>];

idxs, dists <span class="pl-k">=</span> <span class="pl-c1">knn</span>(kdtree, v, k, <span class="pl-c1">true</span>);

idxs
<span class="pl-c"><span class="pl-c">#</span> 3-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>   842</span>
<span class="pl-c"><span class="pl-c">#</span>  3075</span>
<span class="pl-c"><span class="pl-c">#</span>  3046</span>

dists
<span class="pl-c"><span class="pl-c">#</span> 3-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.04178677766255837</span>
<span class="pl-c"><span class="pl-c">#</span>  0.04556078331418939</span>
<span class="pl-c"><span class="pl-c">#</span>  0.049967238112417205</span></pre></div>
<h2 dir="auto"><a id="user-content-range-searches" class="anchor" aria-hidden="true" href="#range-searches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Range searches</h2>
<p dir="auto">A range search finds all neighbors within the range <code>r</code> of given point(s).
This is done with the method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="inrange(tree, points, r, sortres = false) -&gt; idxs"><pre><span class="pl-c1">inrange</span>(tree, points, r, sortres <span class="pl-k">=</span> <span class="pl-c1">false</span>) <span class="pl-k">-&gt;</span> idxs</pre></div>
<p dir="auto">Note that for performance reasons the distances are not returned. The arguments to <code>inrange</code> are the same as for <code>knn</code> except that <code>sortres</code> just sorts the returned index vector.</p>
<p dir="auto">An example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NearestNeighbors
data = rand(3, 10^4)
r = 0.05
point = rand(3)

balltree = BallTree(data)
idxs = inrange(balltree, point, r, true)

# 4-element Array{Int64,1}:
#  317
#  983
# 4577
# 8675

neighborscount = inrangecount(balltree, point, r, true) # if you were just interested in the number of points, this function will count them without allocating arrays for the indexes"><pre><span class="pl-k">using</span> NearestNeighbors
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)
r <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
point <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)

balltree <span class="pl-k">=</span> <span class="pl-c1">BallTree</span>(data)
idxs <span class="pl-k">=</span> <span class="pl-c1">inrange</span>(balltree, point, r, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  317</span>
<span class="pl-c"><span class="pl-c">#</span>  983</span>
<span class="pl-c"><span class="pl-c">#</span> 4577</span>
<span class="pl-c"><span class="pl-c">#</span> 8675</span>

neighborscount <span class="pl-k">=</span> <span class="pl-c1">inrangecount</span>(balltree, point, r, <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> if you were just interested in the number of points, this function will count them without allocating arrays for the indexes</span></pre></div>
<h2 dir="auto"><a id="user-content-using-on-disk-data-sets" class="anchor" aria-hidden="true" href="#using-on-disk-data-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using on-disk data sets</h2>
<p dir="auto">By default, the trees store a copy of the <code>data</code> provided during construction. This is problematic in case you want to work on data sets which are larger than available memory, thus wanting to <code>mmap</code> the data or want to store the data in a different place, outside the tree.</p>
<p dir="auto"><code>DataFreeTree</code> can be used to strip a constructed tree of its data field and re-link it with that data at a later stage. An example of using a large on-disk data set looks like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mmap
ndim = 2; ndata = 10_000_000_000
data = Mmap.mmap(datafilename, Matrix{Float32}, (ndim, ndata))
data[:] = rand(Float32, ndim, ndata)  # create example data
dftree = DataFreeTree(KDTree, data)"><pre><span class="pl-k">using</span> Mmap
ndim <span class="pl-k">=</span> <span class="pl-c1">2</span>; ndata <span class="pl-k">=</span> <span class="pl-c1">10_000_000_000</span>
data <span class="pl-k">=</span> Mmap<span class="pl-k">.</span><span class="pl-c1">mmap</span>(datafilename, Matrix{Float32}, (ndim, ndata))
data[:] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, ndim, ndata)  <span class="pl-c"><span class="pl-c">#</span> create example data</span>
dftree <span class="pl-k">=</span> <span class="pl-c1">DataFreeTree</span>(KDTree, data)</pre></div>
<p dir="auto"><code>dftree</code> now only stores the indexing data structures. It can be passed around, saved and reloaded independently of <code>data</code>.</p>
<p dir="auto">To perform look-ups, <code>dftree</code> is re-linked to the underlying data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tree = injectdata(dftree, data)  # yields a KDTree
knn(tree, data[:,1], 3)  # perform operations as usual"><pre>tree <span class="pl-k">=</span> <span class="pl-c1">injectdata</span>(dftree, data)  <span class="pl-c"><span class="pl-c">#</span> yields a KDTree</span>
<span class="pl-c1">knn</span>(tree, data[:,<span class="pl-c1">1</span>], <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> perform operations as usual</span></pre></div>
<h2 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h2>
<p dir="auto">Kristoffer Carlsson -  @KristofferC - <a href="mailto:kristoffer.carlsson@chalmers.se">kristoffer.carlsson@chalmers.se</a></p>
</article></div>