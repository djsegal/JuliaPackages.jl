<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-optimalapplicationjl" class="anchor" aria-hidden="true" href="#optimalapplicationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OptimalApplication.jl</h1>
<p dir="auto"><a href="https://maxkapur.com/OptimalApplication.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://maxkapur.com/OptimalApplication.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="In Development" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a></p>
<p dir="auto">Optimal college application strategy with homogeneous and heterogeneous application costs.</p>
<p dir="auto">Basic usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OptimalApplication

julia&gt; mkt = SameCostsMarket(
                # Probability of getting into each school
                [0.2, 0.5, 0.1, 0.6, 0.1],
                # Utility values
                [1, 4, 9, 1, 8],
                # Number of schools `h` to apply to. By nestedness property, 
                # we can obtain the solution for all `h` by setting `h = m`, 
                # where `m` is the number of schools in the market.
                5
            );

julia&gt; x, v = applicationorder_list(mkt)
([2, 3, 5, 4, 1], [2.0, 2.7, 3.24, 3.483, 3.5154])

julia&gt; x[1:4], v[4] 
([2, 3, 5, 4], 3.483)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OptimalApplication

julia<span class="pl-k">&gt;</span> mkt <span class="pl-k">=</span> <span class="pl-c1">SameCostsMarket</span>(
                <span class="pl-c"><span class="pl-c">#</span> Probability of getting into each school</span>
                [<span class="pl-c1">0.2</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">0.1</span>],
                <span class="pl-c"><span class="pl-c">#</span> Utility values</span>
                [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">9</span>, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>],
                <span class="pl-c"><span class="pl-c">#</span> Number of schools `h` to apply to. By nestedness property, </span>
                <span class="pl-c"><span class="pl-c">#</span> we can obtain the solution for all `h` by setting `h = m`, </span>
                <span class="pl-c"><span class="pl-c">#</span> where `m` is the number of schools in the market.</span>
                <span class="pl-c1">5</span>
            );

julia<span class="pl-k">&gt;</span> x, v <span class="pl-k">=</span> <span class="pl-c1">applicationorder_list</span>(mkt)
([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">1</span>], [<span class="pl-c1">2.0</span>, <span class="pl-c1">2.7</span>, <span class="pl-c1">3.24</span>, <span class="pl-c1">3.483</span>, <span class="pl-c1">3.5154</span>])

julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>], v[<span class="pl-c1">4</span>] 
([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>], <span class="pl-c1">3.483</span>)</pre></div>
<p dir="auto">This means that when <code>h = 4</code>, the optimal portfolio is <code>{2, 3, 5, 4}</code> and its valuation is <code>5.408</code>.</p>
<p dir="auto">The function <code>applicationorder_heap()</code> works the same way but uses a different internal data structure and may be faster for certain instances.</p>
<p dir="auto">Example with varied costs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; mkt = VariedCostsMarket(
                # Probability of getting into each school
                rand(50),
                # Utility values
                rand(40:60, 50),
                # Cost of applying to each school
                rand(5:10, 50),
                # Budget to spend on applications
                100
            );

julia&gt; x, v = optimalportfolio_dynamicprogram(mkt)
([50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 38, 35, 28], 59.66127736008859)"><pre>julia<span class="pl-k">&gt;</span> mkt <span class="pl-k">=</span> <span class="pl-c1">VariedCostsMarket</span>(
                <span class="pl-c"><span class="pl-c">#</span> Probability of getting into each school</span>
                <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>),
                <span class="pl-c"><span class="pl-c">#</span> Utility values</span>
                <span class="pl-c1">rand</span>(<span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">60</span>, <span class="pl-c1">50</span>),
                <span class="pl-c"><span class="pl-c">#</span> Cost of applying to each school</span>
                <span class="pl-c1">rand</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">50</span>),
                <span class="pl-c"><span class="pl-c">#</span> Budget to spend on applications</span>
                <span class="pl-c1">100</span>
            );

julia<span class="pl-k">&gt;</span> x, v <span class="pl-k">=</span> <span class="pl-c1">optimalportfolio_dynamicprogram</span>(mkt)
([<span class="pl-c1">50</span>, <span class="pl-c1">49</span>, <span class="pl-c1">48</span>, <span class="pl-c1">47</span>, <span class="pl-c1">46</span>, <span class="pl-c1">45</span>, <span class="pl-c1">44</span>, <span class="pl-c1">43</span>, <span class="pl-c1">42</span>, <span class="pl-c1">41</span>, <span class="pl-c1">40</span>, <span class="pl-c1">38</span>, <span class="pl-c1">35</span>, <span class="pl-c1">28</span>], <span class="pl-c1">59.66127736008859</span>)</pre></div>
<p dir="auto">For a large market like this, we may be content with an ε-approximate solution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x, v = optimalportfolio_fptas(mkt, 0.25)
([26, 46, 50], 59.623041055190996)"><pre>julia<span class="pl-k">&gt;</span> x, v <span class="pl-k">=</span> <span class="pl-c1">optimalportfolio_fptas</span>(mkt, <span class="pl-c1">0.25</span>)
([<span class="pl-c1">26</span>, <span class="pl-c1">46</span>, <span class="pl-c1">50</span>], <span class="pl-c1">59.623041055190996</span>)</pre></div>
<p dir="auto">The value <code>ε = 0.25</code> means that the value is guaranteed to be no worse than <code>1 - 0.25</code> times the value of the optimal portfolio. As we can see above, the typical optimality gap is often much tighter.</p>
<p dir="auto">The package also includes <code>optimalportfolio_enumerate()</code> and <code>optimalportfolio_branchbound()</code>, which are inefficient algorithms of primarily theoretical interest.</p>
<p dir="auto">Finally, we can check the expected value of an arbitrary portfolio using <code>valuation()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; valuation([20, 16, 35], mkt)
35.33785503577366"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">valuation</span>([<span class="pl-c1">20</span>, <span class="pl-c1">16</span>, <span class="pl-c1">35</span>], mkt)
<span class="pl-c1">35.33785503577366</span></pre></div>
<h2 dir="auto"><a id="user-content-arxiv-paper" class="anchor" aria-hidden="true" href="#arxiv-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>arXiv paper</h2>
<p dir="auto">If you found this package useful, please consider citing <a href="https://arxiv.org/abs/2205.01869" rel="nofollow">our arXiv paper</a>. Rolling updates to the paper can be found on the companion repository <a href="https://github.com/maxkapur/CollegeApplication">CollegeApplication</a>.</p>
</article></div>