<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multinomialregressionjl" class="anchor" aria-hidden="true" href="#multinomialregressionjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultinomialRegression.jl</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MultinomialRegression
using DataFrames
using RDatasets

# Data
iris = dataset(&quot;datasets&quot;, &quot;iris&quot;)

# Unregularized fit
model = fit(@formula(Species ~ 1 + SepalWidth), iris)  # levels(iris.Species)[1] is the reference category
opts  = Dict(:iterations =&gt; 250, :f_abstol =&gt; 1e-9)    # Same terminology as Optim.Options
model = fit(@formula(Species ~ 1 + SepalWidth), iris; opts=opts)

# Predict
xnew  = [1.0, iris.SepalWidth[1]]
pred  = predict(model, xnew)
pred2 = zeros(3)
predict!(pred2, model, xnew)

# Model-level diagnostics
isregularized(model)
nobs(model)
loglikelihood(model)
aic(model)
aicc(model)
bic(model)

# Coefficient-level diagnostics
nparams(model)
coef(model)
coeftable(model)
stderror(model)
vcov(model)
coefcor(model)

# Get values using row names and column names
B = coef(model)
B[&quot;(Intercept)&quot;, &quot;virginica&quot;]
B[&quot;(Intercept)&quot;, :]
B[:, &quot;virginica&quot;]
B[1, 2]  # Integer indices also work

B2 = [18.85825175905592 12.997166560384215; -6.118905216314172 -4.079050714520578]
isapprox(B, B2; atol=1e-10)  # Reproducible result

#=
  Regularized fit
  Note: Standard errors calculated from the hessian evaluated at the parameters.
        Since the parameters of regularized models are not MLEs, the standard errors are approximate.
=#
model_L1    = fit(@formula(Species ~ 1 + SepalWidth), iris; reg=L1(0.5))
model_L2    = fit(@formula(Species ~ 1 + SepalWidth), iris; reg=L2(0.5))
model_ElNet = fit(@formula(Species ~ 1 + SepalWidth), iris; reg=ElasticNet(0.5, 0.5))

# Weighted fit
w = collect(0.25:0.01:1.75)
splice!(w, findfirst(==(1.0), w))
weighted_fit = fit(@formula(Species ~ 1 + SepalWidth), iris; wts=w)

# Under the hood, weights are scaled to sum to the number of observations
w2 = 2*w
weighted_fit2 = fit(@formula(Species ~ 1 + SepalWidth), iris; wts=w2)
isapprox(coef(weighted_fit2), coef(weighted_fit); atol=1e-10)"><pre><span class="pl-k">using</span> MultinomialRegression
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> RDatasets

<span class="pl-c"><span class="pl-c">#</span> Data</span>
iris <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Unregularized fit</span>
model <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris)  <span class="pl-c"><span class="pl-c">#</span> levels(iris.Species)[1] is the reference category</span>
opts  <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:iterations</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">250</span>, <span class="pl-c1">:f_abstol</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1e-9</span>)    <span class="pl-c"><span class="pl-c">#</span> Same terminology as Optim.Options</span>
model <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; opts<span class="pl-k">=</span>opts)

<span class="pl-c"><span class="pl-c">#</span> Predict</span>
xnew  <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, iris<span class="pl-k">.</span>SepalWidth[<span class="pl-c1">1</span>]]
pred  <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, xnew)
pred2 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">predict!</span>(pred2, model, xnew)

<span class="pl-c"><span class="pl-c">#</span> Model-level diagnostics</span>
<span class="pl-c1">isregularized</span>(model)
<span class="pl-c1">nobs</span>(model)
<span class="pl-c1">loglikelihood</span>(model)
<span class="pl-c1">aic</span>(model)
<span class="pl-c1">aicc</span>(model)
<span class="pl-c1">bic</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Coefficient-level diagnostics</span>
<span class="pl-c1">nparams</span>(model)
<span class="pl-c1">coef</span>(model)
<span class="pl-c1">coeftable</span>(model)
<span class="pl-c1">stderror</span>(model)
<span class="pl-c1">vcov</span>(model)
<span class="pl-c1">coefcor</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Get values using row names and column names</span>
B <span class="pl-k">=</span> <span class="pl-c1">coef</span>(model)
B[<span class="pl-s"><span class="pl-pds">"</span>(Intercept)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>virginica<span class="pl-pds">"</span></span>]
B[<span class="pl-s"><span class="pl-pds">"</span>(Intercept)<span class="pl-pds">"</span></span>, :]
B[:, <span class="pl-s"><span class="pl-pds">"</span>virginica<span class="pl-pds">"</span></span>]
B[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-c"><span class="pl-c">#</span> Integer indices also work</span>

B2 <span class="pl-k">=</span> [<span class="pl-c1">18.85825175905592</span> <span class="pl-c1">12.997166560384215</span>; <span class="pl-k">-</span><span class="pl-c1">6.118905216314172</span> <span class="pl-k">-</span><span class="pl-c1">4.079050714520578</span>]
<span class="pl-c1">isapprox</span>(B, B2; atol<span class="pl-k">=</span><span class="pl-c1">1e-10</span>)  <span class="pl-c"><span class="pl-c">#</span> Reproducible result</span>

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">  Regularized fit</span>
<span class="pl-c">  Note: Standard errors calculated from the hessian evaluated at the parameters.</span>
<span class="pl-c">        Since the parameters of regularized models are not MLEs, the standard errors are approximate.</span>
<span class="pl-c"><span class="pl-c">=#</span></span>
model_L1    <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; reg<span class="pl-k">=</span><span class="pl-c1">L1</span>(<span class="pl-c1">0.5</span>))
model_L2    <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; reg<span class="pl-k">=</span><span class="pl-c1">L2</span>(<span class="pl-c1">0.5</span>))
model_ElNet <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; reg<span class="pl-k">=</span><span class="pl-c1">ElasticNet</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>))

<span class="pl-c"><span class="pl-c">#</span> Weighted fit</span>
w <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0.25</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1.75</span>)
<span class="pl-c1">splice!</span>(w, <span class="pl-c1">findfirst</span>(<span class="pl-k">==</span>(<span class="pl-c1">1.0</span>), w))
weighted_fit <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; wts<span class="pl-k">=</span>w)

<span class="pl-c"><span class="pl-c">#</span> Under the hood, weights are scaled to sum to the number of observations</span>
w2 <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>w
weighted_fit2 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">@formula</span>(Species <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> SepalWidth), iris; wts<span class="pl-k">=</span>w2)
<span class="pl-c1">isapprox</span>(<span class="pl-c1">coef</span>(weighted_fit2), <span class="pl-c1">coef</span>(weighted_fit); atol<span class="pl-k">=</span><span class="pl-c1">1e-10</span>)</pre></div>
</article></div>