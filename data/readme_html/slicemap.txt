<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-slicemapjl" class="anchor" aria-hidden="true" href="#slicemapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SliceMap.jl</h1>
<p dir="auto"><a href="https://github.com/mcabbott/SliceMap.jl/actions?query=workflow%3ACI"><img src="https://github.com/mcabbott/SliceMap.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides some <code>mapslices</code>-like functions, with gradients defined for
<a href="https://github.com/FluxML/Tracker.jl">Tracker</a> and <a href="https://github.com/FluxML/Zygote.jl">Zygote</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mapcols(f, M) ≈ mapreduce(f, hcat, eachcol(M))
MapCols{d}(f, M)         # where d=size(M,1), for SVector slices
ThreadMapCols{d}(f, M)   # using Threads.@threads

maprows(f, M) ≈ mapslices(f, M, dims=2)

slicemap(f, A; dims) ≈ mapslices(f, A, dims=dims) # only Zygote"><pre><span class="pl-c1">mapcols</span>(f, M) <span class="pl-k">≈</span> <span class="pl-c1">mapreduce</span>(f, hcat, <span class="pl-c1">eachcol</span>(M))
<span class="pl-c1">MapCols</span><span class="pl-c1">{d}</span>(f, M)         <span class="pl-c"><span class="pl-c">#</span> where d=size(M,1), for SVector slices</span>
<span class="pl-c1">ThreadMapCols</span><span class="pl-c1">{d}</span>(f, M)   <span class="pl-c"><span class="pl-c">#</span> using Threads.@threads</span>

<span class="pl-c1">maprows</span>(f, M) <span class="pl-k">≈</span> <span class="pl-c1">mapslices</span>(f, M, dims<span class="pl-k">=</span><span class="pl-c1">2</span>)

<span class="pl-c1">slicemap</span>(f, A; dims) <span class="pl-k">≈</span> <span class="pl-c1">mapslices</span>(f, A, dims<span class="pl-k">=</span>dims) <span class="pl-c"><span class="pl-c">#</span> only Zygote</span></pre></div>
<p dir="auto">The capitalised functions differ both in using <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays</a>
slices, and using <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a> for the gradient of each slice,
instead of the same reverse-mode Tracker/Zygote.
For small slices, this will often be much faster, with or without gradients.</p>
<p dir="auto">The package also defines Zygote gradients for the Slice/Align functions in
<a href="https://github.com/bramtayl/JuliennedArrays.jl">JuliennedArrays</a>,
which is a good way to roll-your-own <code>mapslices</code>-like thing (and is exactly
how <code>slicemap(f, A; dims)</code> works). Similar gradients are also available in
<a href="https://github.com/mcabbott/TensorCast.jl">TensorCast</a>,
and in <a href="https://github.com/mcabbott/LazyStack.jl">LazyStack</a>.</p>
<p dir="auto">There are more details &amp; examples at <a href="docs/intro.md">docs/intro.md</a>.</p>
</article></div>