<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-earlystoppingjl" class="anchor" aria-hidden="true" href="#earlystoppingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EarlyStopping.jl</h1>
<table>
<thead>
<tr>
<th align="center">Linux</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaAI/EarlyStopping.jl/actions"><img src="https://github.com/JuliaAI/EarlyStopping.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/JuliaAI/EarlyStopping.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5b4f0be900e9c3e3f84d2a1cf3ec08c6be5724725437aff5ca1c1b7882d62c2a/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696141492f4561726c7953746f7070696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaAI/EarlyStopping.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A small package for applying early stopping criteria to
loss-generating iterative algorithms, with a view
to training and optimizing machine learning models.</p>
<p>The basis of <a href="https://github.com/JuliaAI/IterationControl.jl">IterationControl.jl</a>,
a package externally controlling iterative algorithms.</p>
<p>Includes the stopping criteria surveyed in <a href="https://link.springer.com/chapter/10.1007%2F3-540-49430-8_3" rel="nofollow">Prechelt, Lutz
(1998)</a>:
"Early Stopping - But When?", in <em>Neural Networks: Tricks of the
Trade</em>, ed. G. Orr, Springer.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;EarlyStopping&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EarlyStopping<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-sample-usage" class="anchor" aria-hidden="true" href="#sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample usage</h2>
<p>The <code>EarlyStopper</code> objects defined in this package consume a sequence
of numbers called <em>losses</em> generated by some external algorithm -
generally the training loss or out-of-sample loss of some iterative
statistical model - and decide when those losses have dropped
sufficiently to warrant terminating the algorithm. A number of
commonly applied <em>stopping criteria</em>, listed under
<a href="#criteria">Criteria</a> below, are provided out-of-the-box.</p>
<p>Here's an example of using an <code>EarlyStopper</code> object to check against
two of these criteria (either triggering the stop):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EarlyStopping

stopper = EarlyStopper(Patience(2), InvalidValue()) # multiple criteria
done!(stopper, 0.123) # false
done!(stopper, 0.234) # false
done!(stopper, 0.345) # true

julia&gt; message(stopper)
&quot;Early stop triggered by Patience(2) stopping criterion. &quot;
"><pre><span class="pl-k">using</span> EarlyStopping

stopper <span class="pl-k">=</span> <span class="pl-c1">EarlyStopper</span>(<span class="pl-c1">Patience</span>(<span class="pl-c1">2</span>), <span class="pl-c1">InvalidValue</span>()) <span class="pl-c"><span class="pl-c">#</span> multiple criteria</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">0.123</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">0.234</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">0.345</span>) <span class="pl-c"><span class="pl-c">#</span> true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">message</span>(stopper)
<span class="pl-s"><span class="pl-pds">"</span>Early stop triggered by Patience(2) stopping criterion. <span class="pl-pds">"</span></span></pre></div>
<p>One may force an <code>EarlyStopper</code> to report its evolving state:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="losses = [10.0, 11.0, 10.0, 11.0, 12.0, 10.0];
stopper = EarlyStopper(Patience(2), verbosity=1);

for loss in losses
    done!(stopper, loss) &amp;&amp; break
end
"><pre>losses <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">11.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">11.0</span>, <span class="pl-c1">12.0</span>, <span class="pl-c1">10.0</span>];
stopper <span class="pl-k">=</span> <span class="pl-c1">EarlyStopper</span>(<span class="pl-c1">Patience</span>(<span class="pl-c1">2</span>), verbosity<span class="pl-k">=</span><span class="pl-c1">1</span>);

<span class="pl-k">for</span> loss <span class="pl-k">in</span> losses
    <span class="pl-c1">done!</span>(stopper, loss) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[ Info: loss: 10.0       state: (loss = 10.0, n_increases = 0)
[ Info: loss: 11.0       state: (loss = 11.0, n_increases = 1)
[ Info: loss: 10.0       state: (loss = 10.0, n_increases = 0)
[ Info: loss: 11.0       state: (loss = 11.0, n_increases = 1)
[ Info: loss: 12.0       state: (loss = 12.0, n_increases = 2)
"><pre><code>[ Info: loss: 10.0       state: (loss = 10.0, n_increases = 0)
[ Info: loss: 11.0       state: (loss = 11.0, n_increases = 1)
[ Info: loss: 10.0       state: (loss = 10.0, n_increases = 0)
[ Info: loss: 11.0       state: (loss = 11.0, n_increases = 1)
[ Info: loss: 12.0       state: (loss = 12.0, n_increases = 2)
</code></pre></div>
<p>The "object-oriented" interface demonstrated here is not code-optimized but
will suffice for the majority of use-cases. For performant code, use
the functional interface described under <a href="#implementing-new-criteria">Implementing new
criteria</a> below.</p>
<h2><a id="user-content-criteria" class="anchor" aria-hidden="true" href="#criteria"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Criteria</h2>
<p>To list all stopping criterion, do <code>subtypes(StoppingCriterion)</code>. Each
subtype <code>T</code> has a detailed doc-string queried with <code>?T</code> at the
REPL. Here is a short summary:</p>
<table>
<thead>
<tr>
<th>criterion</th>
<th>description</th>
<th>notation in Prechelt</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Never()</code></td>
<td>Never stop</td>
<td></td>
</tr>
<tr>
<td><code>InvalidValue()</code></td>
<td>Stop when <code>NaN</code>, <code>Inf</code> or <code>-Inf</code> encountered</td>
<td></td>
</tr>
<tr>
<td><code>TimeLimit(t=0.5)</code></td>
<td>Stop after <code>t</code> hours</td>
<td></td>
</tr>
<tr>
<td><code>NumberLimit(n=100)</code></td>
<td>Stop after <code>n</code> loss updates (excl. "training losses")</td>
<td></td>
</tr>
<tr>
<td><code>NumberSinceBest(n=6)</code></td>
<td>Stop after <code>n</code> loss updates (excl. "training losses")</td>
<td></td>
</tr>
<tr>
<td><code>Threshold(value=0.0)</code></td>
<td>Stop when <code>loss &lt; value</code></td>
<td></td>
</tr>
<tr>
<td><code>GL(alpha=2.0)</code></td>
<td>Stop after "Generalization Loss" exceeds <code>alpha</code></td>
<td><code>GL_α</code></td>
</tr>
<tr>
<td><code>PQ(alpha=0.75, k=5)</code></td>
<td>Stop after "Progress-modified GL" exceeds <code>alpha</code></td>
<td><code>PQ_α</code></td>
</tr>
<tr>
<td><code>Patience(n=5)</code></td>
<td>Stop after <code>n</code> consecutive loss increases</td>
<td><code>UP_s</code></td>
</tr>
<tr>
<td><code>Disjunction(c...)</code></td>
<td>Stop when any of the criteria <code>c</code> apply</td>
<td></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-criteria-tracking-both-training-and-out-of-sample-losses" class="anchor" aria-hidden="true" href="#criteria-tracking-both-training-and-out-of-sample-losses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Criteria tracking both training and out-of-sample losses</h2>
<p>For criteria tracking both an "out-of-sample" loss and a "training"
loss (eg, stopping criterion of type <code>PQ</code>), specify <code>training=true</code> if
the update is for training, as in</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="done!(stopper, 0.123, training=true)
"><pre><code>done!(stopper, 0.123, training=true)
</code></pre></div>
<p>In these cases, the out-of-sample update must always come after the
corresponding training update. Multiple training updates may precede
the out-of-sample update, as in the following example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="criterion = PQ(alpha=2.0, k=2)
needs_training_losses(criterion) # true

stopper = EarlyStopper(criterion)

done!(stopper, 9.5, training=true) # false
done!(stopper, 9.3, training=true) # false
done!(stopper, 10.0) # false

done!(stopper, 9.3, training=true) # false
done!(stopper, 9.1, training=true) # false
done!(stopper, 8.9, training=true) # false
done!(stopper, 8.0) # false

done!(stopper, 8.3, training=true) # false
done!(stopper, 8.4, training=true) # false
done!(stopper, 9.0) # true
"><pre>criterion <span class="pl-k">=</span> <span class="pl-c1">PQ</span>(alpha<span class="pl-k">=</span><span class="pl-c1">2.0</span>, k<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">needs_training_losses</span>(criterion) <span class="pl-c"><span class="pl-c">#</span> true</span>

stopper <span class="pl-k">=</span> <span class="pl-c1">EarlyStopper</span>(criterion)

<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">9.5</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">9.3</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>

<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">9.3</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">9.1</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">8.9</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">8.0</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>

<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">8.3</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">8.4</span>, training<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">done!</span>(stopper, <span class="pl-c1">9.0</span>) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p><strong>Important.</strong> If there is no distinction between in and out-of-sample
losses, then any criterion can be applied, <em>and in that case</em> <code>training=true</code>
<em>is never specified</em> (regardless of the actual interpretation of the
losses being tracked).</p>
<h2><a id="user-content-stopping-times" class="anchor" aria-hidden="true" href="#stopping-times"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stopping times</h2>
<p>To determine the stopping time for an iterator <code>losses</code>, use
<code>stopping_time(criterion, losses)</code>. This is useful for debugging new
criteria (see below). If the iterator terminates without a stop, <code>0</code>
is returned.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; stopping_time(InvalidValue(), [10.0, 3.0, Inf, 4.0])
3

julia&gt; stopping_time(Patience(3), [10.0, 3.0, 4.0, 5.0], verbosity=1)
[ Info: loss updates: 1
[ Info: state: (loss = 10.0, n_increases = 0)
[ Info: loss updates: 2
[ Info: state: (loss = 3.0, n_increases = 0)
[ Info: loss updates: 3
[ Info: state: (loss = 4.0, n_increases = 1)
[ Info: loss updates: 4
[ Info: state: (loss = 5.0, n_increases = 2)
0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">stopping_time</span>(<span class="pl-c1">InvalidValue</span>(), [<span class="pl-c1">10.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">4.0</span>])
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stopping_time</span>(<span class="pl-c1">Patience</span>(<span class="pl-c1">3</span>), [<span class="pl-c1">10.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>], verbosity<span class="pl-k">=</span><span class="pl-c1">1</span>)
[ Info<span class="pl-k">:</span> loss updates<span class="pl-k">:</span> <span class="pl-c1">1</span>
[ Info<span class="pl-k">:</span> state<span class="pl-k">:</span> (loss <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, n_increases <span class="pl-k">=</span> <span class="pl-c1">0</span>)
[ Info<span class="pl-k">:</span> loss updates<span class="pl-k">:</span> <span class="pl-c1">2</span>
[ Info<span class="pl-k">:</span> state<span class="pl-k">:</span> (loss <span class="pl-k">=</span> <span class="pl-c1">3.0</span>, n_increases <span class="pl-k">=</span> <span class="pl-c1">0</span>)
[ Info<span class="pl-k">:</span> loss updates<span class="pl-k">:</span> <span class="pl-c1">3</span>
[ Info<span class="pl-k">:</span> state<span class="pl-k">:</span> (loss <span class="pl-k">=</span> <span class="pl-c1">4.0</span>, n_increases <span class="pl-k">=</span> <span class="pl-c1">1</span>)
[ Info<span class="pl-k">:</span> loss updates<span class="pl-k">:</span> <span class="pl-c1">4</span>
[ Info<span class="pl-k">:</span> state<span class="pl-k">:</span> (loss <span class="pl-k">=</span> <span class="pl-c1">5.0</span>, n_increases <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">0</span></pre></div>
<p>If the losses include both training and out-of-sample losses as
described above, pass an extra <code>Bool</code> vector marking the training
losses with <code>true</code>, as in</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="stopping_time(PQ(),
              [0.123, 0.321, 0.52, 0.55, 0.56, 0.58],
              [true, true, false, true, true, false])
"><pre><span class="pl-c1">stopping_time</span>(<span class="pl-c1">PQ</span>(),
              [<span class="pl-c1">0.123</span>, <span class="pl-c1">0.321</span>, <span class="pl-c1">0.52</span>, <span class="pl-c1">0.55</span>, <span class="pl-c1">0.56</span>, <span class="pl-c1">0.58</span>],
              [<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>])</pre></div>
<h2><a id="user-content-implementing-new-criteria" class="anchor" aria-hidden="true" href="#implementing-new-criteria"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementing new criteria</h2>
<p>To implement a new stopping criterion, one must:</p>
<ul>
<li>
<p>Define a new <code>struct</code> for the criterion, which must subtype
<code>StoppingCriterion</code>.</p>
</li>
<li>
<p>Overload methods <code>update</code> and <code>done</code> for the new type.</p>
</li>
<li>
<p>Optionally overload methods <code>message</code>.</p>
</li>
<li>
<p>Optionally overload <code>update_training</code> and the trait
<code>needs_training_losses</code>.</p>
</li>
</ul>
<p>We demonstrate this with a simplified version of the
<a href="/src/criteria.jl">code</a> for <code>Patience</code>:</p>
<h3><a id="user-content-defining-the-new-type" class="anchor" aria-hidden="true" href="#defining-the-new-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining the new type</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EarlyStopping

mutable struct Patience &lt;: StoppingCriterion
    n::Int
end
Patience(; n=5) = Patience(n)
"><pre><span class="pl-k">using</span> EarlyStopping

<span class="pl-k">mutable struct</span> Patience <span class="pl-k">&lt;:</span> <span class="pl-c1">StoppingCriterion</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-en">Patience</span>(; n<span class="pl-k">=</span><span class="pl-c1">5</span>) <span class="pl-k">=</span> <span class="pl-c1">Patience</span>(n)</pre></div>
<h3><a id="user-content-overloading-update-and-done" class="anchor" aria-hidden="true" href="#overloading-update-and-done"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overloading <code>update</code> and <code>done</code></h3>
<p>All information to be "remembered" must passed around in an object
called <code>state</code> below, which is the return value of <code>update</code> (and
<code>update_training</code>). The <code>update</code> function has two methods - one for
initialization, without a <code>state</code> argument, and one for all subsequent
loss updates, which requires the <code>state</code> returned by the preceding
<code>update</code> (or <code>update_training</code>) call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import EarlyStopping: update, done

update(criterion::Patience, loss) = (loss=loss, n_increases=0) # state

function update(criterion::Patience, loss, state)
    old_loss, n = state
    if loss &gt; old_loss
        n += 1
    else
        n = 0
    end
    return (loss=loss, n_increases=n) # state
end
"><pre><span class="pl-k">import</span> EarlyStopping<span class="pl-k">:</span> update, done

<span class="pl-en">update</span>(criterion<span class="pl-k">::</span><span class="pl-c1">Patience</span>, loss) <span class="pl-k">=</span> (loss<span class="pl-k">=</span>loss, n_increases<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> state</span>

<span class="pl-k">function</span> <span class="pl-en">update</span>(criterion<span class="pl-k">::</span><span class="pl-c1">Patience</span>, loss, state)
    old_loss, n <span class="pl-k">=</span> state
    <span class="pl-k">if</span> loss <span class="pl-k">&gt;</span> old_loss
        n <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-k">else</span>
        n <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> (loss<span class="pl-k">=</span>loss, n_increases<span class="pl-k">=</span>n) <span class="pl-c"><span class="pl-c">#</span> state</span>
<span class="pl-k">end</span></pre></div>
<p>The <code>done</code> method returns <code>true</code> or <code>false</code> depending on the <code>state</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="done(criterion::Patience, state) = state.n_increases == criterion.n
"><pre><span class="pl-en">done</span>(criterion<span class="pl-k">::</span><span class="pl-c1">Patience</span>, state) <span class="pl-k">=</span> state<span class="pl-k">.</span>n_increases <span class="pl-k">==</span> criterion<span class="pl-k">.</span>n</pre></div>
<h3><a id="user-content-optional-methods" class="anchor" aria-hidden="true" href="#optional-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional methods</h3>
<p>The final message of an <code>EarlyStopper</code> is generated by a <code>message</code>
method for <code>StoppingCriterion</code>. Here is the fallback (which does not
use <code>state</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="EarlyStopping.message(criteria::StoppingCriterion, state)
    = &quot;Early stop triggered by $criterion stopping criterion. &quot;
"><pre>EarlyStopping<span class="pl-k">.</span><span class="pl-c1">message</span>(criteria<span class="pl-k">::</span><span class="pl-c1">StoppingCriterion</span>, state)
    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Early stop triggered by <span class="pl-v">$criterion</span> stopping criterion. <span class="pl-pds">"</span></span></pre></div>
<p>The optional <code>update_training</code> methods (two for each criterion) have
the same signature as the <code>update</code> methods above. Refer to the <code>PQ</code>
<a href="/src/criteria.jl">code</a> for an example.</p>
<p>If a stopping criterion requires one or more <code>update_training</code> calls
per <code>update</code> call to work, you should overload the trait
<code>needs_training_losses</code> for that type, as in this example from
the source code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="EarlyStopping.needs_training_losses(::Type{&lt;:PQ}) = true
"><pre>EarlyStopping<span class="pl-k">.</span><span class="pl-en">needs_training_losses</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:PQ}</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>
</article></div>