<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-swapstreamsjl" class="anchor" aria-hidden="true" href="#swapstreamsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SwapStreams.jl</h1>
<p><a href="https://travis-ci.com/Tokazama/SwapStreams.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0ba7c89fb565f0fa95d8177f6e03fea1bb1c543fadf04ac19f86abb58ee87a11/68747470733a2f2f7472617669732d63692e636f6d2f546f6b617a616d612f5377617053747265616d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Tokazama/SwapStreams.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/SwapStreams.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable-docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/SwapStreams.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev-docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Tokazama/SwapStreams.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0c005961522e586ada801c39dff342ed7f2bf68b2fef11f9dd6cb7935641aece/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f5377617053747265616d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/SwapStreams.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>From the documentation of <code>read(io::IO, T)</code> in the Base Julia library...</p>
<blockquote>
<p>Note that Julia does not convert the endianness for you. Use <code>ntoh</code> or `ltoh for this purpose.</p>
</blockquote>
<p>...but <code>SwapStreams</code> does!</p>
<p><code>SwapStreams</code> exports a simple type (<code>SwapStream</code>) that wraps any I/O stream.
Once constructed, a <code>SwapStream</code> will byte swap any read/write operation if appropriate.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SwapStreams

julia&gt; s = SwapStream(IOBuffer());  # assume byte swapping is necessary

julia&gt; write(s, [1:10...]);         # byte swap each element before writing to buffer

julia&gt; seek(s, 0);

julia&gt; read!(s.io, Vector{Int}(undef, 10))  # raw data from buffer
10-element Array{Int64,1}:
  72057594037927936
 144115188075855872
 216172782113783808
 288230376151711744
 360287970189639680
 432345564227567616
 504403158265495552
 576460752303423488
 648518346341351424
 720575940379279360

julia&gt; seek(s, 0);

julia&gt; read!(s, Vector{Int}(undef, 10))  # byte swapped data from buffer
10-element Array{Int64,1}:
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SwapStreams

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">SwapStream</span>(<span class="pl-c1">IOBuffer</span>());  <span class="pl-c"><span class="pl-c">#</span> assume byte swapping is necessary</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(s, [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10.</span><span class="pl-k">..</span>]);         <span class="pl-c"><span class="pl-c">#</span> byte swap each element before writing to buffer</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seek</span>(s, <span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read!</span>(s<span class="pl-k">.</span>io, <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">10</span>))  <span class="pl-c"><span class="pl-c">#</span> raw data from buffer</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">72057594037927936</span>
 <span class="pl-c1">144115188075855872</span>
 <span class="pl-c1">216172782113783808</span>
 <span class="pl-c1">288230376151711744</span>
 <span class="pl-c1">360287970189639680</span>
 <span class="pl-c1">432345564227567616</span>
 <span class="pl-c1">504403158265495552</span>
 <span class="pl-c1">576460752303423488</span>
 <span class="pl-c1">648518346341351424</span>
 <span class="pl-c1">720575940379279360</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seek</span>(s, <span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read!</span>(s, <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">10</span>))  <span class="pl-c"><span class="pl-c">#</span> byte swapped data from buffer</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>
</pre></div>
<p>One can directly tell a <code>SwapStream</code> to byte swap or not by specifying <code>true</code> or <code>false</code> at the time of its construction.
Alternatively, one may specify whether the stream is big or little endian with the exported constants <code>BigEndian</code> and <code>LittleEndian</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SwapStreams

julia&gt; io = IOBuffer();

julia&gt; SwapStream{true}(io) == SwapStream(io)  # does byte swap
true

julia&gt; SwapStream{false}(io) ==    # explicitly do not byte swap
       SwapStream(ifelse(ENDIAN_BOM == BigEndian, BigEndian, LittleEndian), io)  # since stream has same endian type as system no swap
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SwapStreams

julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SwapStream</span><span class="pl-c1">{true}</span>(io) <span class="pl-k">==</span> <span class="pl-c1">SwapStream</span>(io)  <span class="pl-c"><span class="pl-c">#</span> does byte swap</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SwapStream</span><span class="pl-c1">{false}</span>(io) <span class="pl-k">==</span>    <span class="pl-c"><span class="pl-c">#</span> explicitly do not byte swap</span>
       <span class="pl-c1">SwapStream</span>(<span class="pl-c1">ifelse</span>(<span class="pl-c1">ENDIAN_BOM</span> <span class="pl-k">==</span> BigEndian, BigEndian, LittleEndian), io)  <span class="pl-c"><span class="pl-c">#</span> since stream has same endian type as system no swap</span>
<span class="pl-c1">true</span></pre></div>
<p>Note that we set the stream's endianness to the same as the system's so that it wouldn't perform byte swapping.</p>
</article></div>