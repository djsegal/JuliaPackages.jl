<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lowrankops" class="anchor" aria-hidden="true" href="#lowrankops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LowRankOps</h1>
<p dir="auto"><a href="https://github.com/andrew-saydjari/LowRankOps.jl/actions"><img src="https://github.com/andrew-saydjari/LowRankOps.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/andrew-saydjari/LowRankOps.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/56dea5737c7349ab2a159991435521cf2c1ed26f505d1f9bd1b9d2664a474510/68747470733a2f2f636f6465636f762e696f2f6769746875622f616e647265772d736179646a6172692f4c6f7752616e6b4f70732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="" data-canonical-src="https://codecov.io/github/andrew-saydjari/LowRankOps.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto">Type/method defintions for speeding up matrix computations for matrices built from low rank components.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Currently, installation is directly from the GitHub</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/andrew-saydjari/LowRankOps.jl&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/andrew-saydjari/LowRankOps.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-multiplication" class="anchor" aria-hidden="true" href="#multiplication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiplication</h3>
<p dir="auto">A classic example of low rank factorization is the Woodbury form where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$M = A + VV^T$</math-renderer>. Here we show how to leverage the type in this package to do fast multiplication of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$M^{-1}$</math-renderer> times a vector.</p>
<p dir="auto">We define two functions, one that defines a set of factors (matrices) to precompute upon object creation and one that defines the multiplication, using the precomputed factors and ordering the operations for speed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function wood_precomp_mult(matList)
    Ainv = matList[1]
    V = matList[2]
    AinvV = Ainv*V
    return [(AinvV)*inv(I+V'*(AinvV))]
end

function wood_fxn_mult(matList,precompList,x)
    Ainv = matList[1]
    V = matList[2]
    arg1 = precompList[1]
    return Ainv*(x - V*(arg1'*x))
end"><pre><span class="pl-k">function</span> <span class="pl-en">wood_precomp_mult</span>(matList)
    Ainv <span class="pl-k">=</span> matList[<span class="pl-c1">1</span>]
    V <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    AinvV <span class="pl-k">=</span> Ainv<span class="pl-k">*</span>V
    <span class="pl-k">return</span> [(AinvV)<span class="pl-k">*</span><span class="pl-c1">inv</span>(I<span class="pl-k">+</span>V<span class="pl-k">'</span><span class="pl-k">*</span>(AinvV))]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">wood_fxn_mult</span>(matList,precompList,x)
    Ainv <span class="pl-k">=</span> matList[<span class="pl-c1">1</span>]
    V <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    arg1 <span class="pl-k">=</span> precompList[<span class="pl-c1">1</span>]
    <span class="pl-k">return</span> Ainv<span class="pl-k">*</span>(x <span class="pl-k">-</span> V<span class="pl-k">*</span>(arg1<span class="pl-k">'</span><span class="pl-k">*</span>x))
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then, creating the object is simple from <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$A^{-1}$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$V$</math-renderer></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Ctotinv = LowRankMultMat([Ainv,V],wood_precomp_mult,wood_fxn_mult);"><pre>Ctotinv <span class="pl-k">=</span> <span class="pl-c1">LowRankMultMat</span>([Ainv,V],wood_precomp_mult,wood_fxn_mult);</pre></div>
<p dir="auto">and matrix multiplication is then fast via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y = Ctotinv*x"><pre>y <span class="pl-k">=</span> Ctotinv<span class="pl-k">*</span>x</pre></div>
<p dir="auto">This is as performant as matrix multiplication in <a href="https://github.com/timholy/WoodburyMatrices.jl">Woodbury.jl</a>, but the point is that it works for any matrix that can be expressed as a low rank product. For example, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$M = C_i - C_i * C^{-1}_{tot} * C_i$</math-renderer>, where the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$C_i = V_i * V_i^{T}$</math-renderer> and the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$V_i$</math-renderer> are low rank.</p>
<h3 dir="auto">
<a id="user-content-diagonal" class="anchor" aria-hidden="true" href="#diagonal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diagonal</h3>
<p dir="auto">Obtaining the diagonal of a low-rank factorization with speed can be obtained through a second type. For example, given a matrix <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1fe2f465485a65d1b8095ffd1723ca29">$M = C_i * C^{-1}_{tot} * C_j$</math-renderer>, we can once again define two functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Cij_precomp_diag(matList)
    Ctotinv = matList[1]
    Vi = matList[2]
    Vj = matList[3]
    return [Vi'*(Ctotinv*Vj)]
end

function Cij_diag_map(matList,precompList)
    Vi = matList[2]
    Vj = matList[3]
    arg1 = precompList[1]
    return dropdims(sum(Vi'.*(arg1*Vj'),dims=1),dims=1)
end"><pre><span class="pl-k">function</span> <span class="pl-en">Cij_precomp_diag</span>(matList)
    Ctotinv <span class="pl-k">=</span> matList[<span class="pl-c1">1</span>]
    Vi <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    Vj <span class="pl-k">=</span> matList[<span class="pl-c1">3</span>]
    <span class="pl-k">return</span> [Vi<span class="pl-k">'</span><span class="pl-k">*</span>(Ctotinv<span class="pl-k">*</span>Vj)]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Cij_diag_map</span>(matList,precompList)
    Vi <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    Vj <span class="pl-k">=</span> matList[<span class="pl-c1">3</span>]
    arg1 <span class="pl-k">=</span> precompList[<span class="pl-c1">1</span>]
    <span class="pl-k">return</span> <span class="pl-c1">dropdims</span>(<span class="pl-c1">sum</span>(Vi<span class="pl-k">'</span><span class="pl-k">.*</span>(arg1<span class="pl-k">*</span>Vj<span class="pl-k">'</span>),dims<span class="pl-k">=</span><span class="pl-c1">1</span>),dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">which define the precomputation and fast diagonal map. We can construct</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="CMat = LowRankDiagMat([Ctotinv,Vi,Vj],Cij_precomp_diag,Cij_diag_map);"><pre>CMat <span class="pl-k">=</span> <span class="pl-c1">LowRankDiagMat</span>([Ctotinv,Vi,Vj],Cij_precomp_diag,Cij_diag_map);</pre></div>
<p dir="auto">Notice that we have used <code>Ctotinv</code> from above, which implements fast matrix multiplication via the <code>LowRankMultMat</code> type, as part of the matrix listed passed in creating the <code>LowRankMultMat</code> object. Then, the diagonal cam be obtained quickly via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y = diag(CMat)"><pre>y <span class="pl-k">=</span> <span class="pl-c1">diag</span>(CMat)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/de18582801ba4dfa78bea87e3aa18be861d142787da1151a39baf8d43611cf29/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d616e647265772d736179646a6172692e4c6f7752616e6b4f70732e6a6c"><img width="0" src="https://camo.githubusercontent.com/de18582801ba4dfa78bea87e3aa18be861d142787da1151a39baf8d43611cf29/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d616e647265772d736179646a6172692e4c6f7752616e6b4f70732e6a6c" data-canonical-src="https://visitor-badge.glitch.me/badge?page_id=andrew-saydjari.LowRankOps.jl" style="max-width: 100%;"></a></p>

</article></div>