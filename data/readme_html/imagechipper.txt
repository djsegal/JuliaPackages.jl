<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-imagechipperjl" class="anchor" aria-hidden="true" href="#imagechipperjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ImageChipper.jl</h1>
<p><a href="https://caseykneale.github.io/ImageChipper.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://caseykneale.github.io/ImageChipper.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/caseykneale/ImageChipper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d3b9f79044b7e83900cb029fee9228806c0da61d/68747470733a2f2f7472617669732d63692e636f6d2f63617365796b6e65616c652f496d616765436869707065722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/caseykneale/ImageChipper.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/caseykneale/ImageChipper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/14edaf451818ba16180cd8e5a1ef6bda5c1b4959/68747470733a2f2f636f6465636f762e696f2f67682f63617365796b6e65616c652f496d616765436869707065722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/caseykneale/ImageChipper.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/caseykneale/ImageChipper.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a3f48c45f4592d3bc6e779d1fa59ae7e5d6c9534/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63617365796b6e65616c652f496d616765436869707065722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/caseykneale/ImageChipper.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/caseykneale/ImageChipper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ddaad978df33762adaeeaa1734115eba57813852/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f63617365796b6e65616c652f496d616765436869707065722e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/caseykneale/ImageChipper.jl.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<h3><a id="user-content-image-chipping" class="anchor" aria-hidden="true" href="#image-chipping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Image chipping</h3>
<div class="highlight highlight-source-julia"><pre>faux_image <span class="pl-k">=</span> <span class="pl-c1">rand</span>( <span class="pl-c1">256</span>, <span class="pl-c1">256</span> )
<span class="pl-c"><span class="pl-c">#</span> chip( image/Matrix, ( Chip width, Chip height ), ( Overlap X, Overlap Y ) )</span>
chipped <span class="pl-k">=</span> <span class="pl-c1">chip</span>( faux_image, ( <span class="pl-c1">64</span>, <span class="pl-c1">64</span> ), ( <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span> ) )</pre></div>
<p>where the returned array is a 3-tensor of size <code>( Chip width, Chip height, Chip # )</code></p>
<h3><a id="user-content-image-chipping-with-labels" class="anchor" aria-hidden="true" href="#image-chipping-with-labels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Image chipping with labels</h3>
<p>images with associated bounding boxes may also be chipped with known <a href="https://github.com/caseykneale/ObjectDetectionStats.jl">ObjectDetectionStats.jl</a> bounding boxes.</p>
<div class="highlight highlight-source-julia"><pre>faux_image <span class="pl-k">=</span> <span class="pl-c1">rand</span>( <span class="pl-c1">256</span>, <span class="pl-c1">256</span> )

boxes <span class="pl-k">=</span> [   <span class="pl-c1">Box</span>(   <span class="pl-c1">1</span>,   <span class="pl-c1">1</span>,  <span class="pl-c1">22</span>,  <span class="pl-c1">22</span> ),
            <span class="pl-c1">Box</span>(  <span class="pl-c1">55</span>,  <span class="pl-c1">55</span>, <span class="pl-c1">222</span>, <span class="pl-c1">222</span> ),
            <span class="pl-c1">Box</span>( <span class="pl-c1">222</span>, <span class="pl-c1">222</span>, <span class="pl-c1">264</span>, <span class="pl-c1">264</span> )   ]
IoU_thresh <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
chips, boxassignments <span class="pl-k">=</span> <span class="pl-c1">chip_with_boxes</span>( faux_image, boxes, ( <span class="pl-c1">64</span>, <span class="pl-c1">64</span> ) ( <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span> ), IoU_thresh )</pre></div>
<p>Enjoy!</p>
</article></div>