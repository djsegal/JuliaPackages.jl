<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastbroadcast" class="anchor" aria-hidden="true" href="#fastbroadcast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastBroadcast</h1>
<p dir="auto"><a href="https://github.com/YingboMa/FastBroadcast.jl/actions"><img src="https://github.com/YingboMa/FastBroadcast.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/YingboMa/FastBroadcast.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f686f6c55d152339b43965c8347a9add3baf3ca7c609d0bb9f6c0c4f6a5e0f6/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f4661737442726f6164636173742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/YingboMa/FastBroadcast.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">FastBroadcast.jl exports <code>@..</code> that compiles broadcast expressions into loops
that are easier for the compiler to optimize.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FastBroadcast

julia&gt; function fast_foo9(a, b, c, d, e, f, g, h, i)
           @.. a = b + 0.1 * (0.2c + 0.3d + 0.4e + 0.5f + 0.6g + 0.6h + 0.6i)
           nothing
       end
fast_foo9 (generic function with 1 method)

julia&gt; function foo9(a, b, c, d, e, f, g, h, i)
           @. a = b + 0.1 * (0.2c + 0.3d + 0.4e + 0.5f + 0.6g + 0.6h + 0.6i)
           nothing
       end
foo9 (generic function with 1 method)

julia&gt; a, b, c, d, e, f, g, h, i = [rand(100, 100, 2) for i in 1:9];

julia&gt; using BenchmarkTools

julia&gt; @btime fast_foo9($a, $b, $c, $d, $e, $f, $g, $h, $i);
  19.902 μs (0 allocations: 0 bytes)

julia&gt; @btime foo9($a, $b, $c, $d, $e, $f, $g, $h, $i);
  81.457 μs (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastBroadcast

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">fast_foo9</span>(a, b, c, d, e, f, g, h, i)
           <span class="pl-c1">@.</span>. a <span class="pl-k">=</span> b <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> (<span class="pl-c1">0.2</span>c <span class="pl-k">+</span> <span class="pl-c1">0.3</span>d <span class="pl-k">+</span> <span class="pl-c1">0.4</span>e <span class="pl-k">+</span> <span class="pl-c1">0.5</span>f <span class="pl-k">+</span> <span class="pl-c1">0.6</span>g <span class="pl-k">+</span> <span class="pl-c1">0.6</span>h <span class="pl-k">+</span> <span class="pl-c1">0.6</span>i)
           <span class="pl-c1">nothing</span>
       <span class="pl-k">end</span>
fast_foo9 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo9</span>(a, b, c, d, e, f, g, h, i)
           <span class="pl-c1">@.</span> a <span class="pl-k">=</span> b <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> (<span class="pl-c1">0.2</span>c <span class="pl-k">+</span> <span class="pl-c1">0.3</span>d <span class="pl-k">+</span> <span class="pl-c1">0.4</span>e <span class="pl-k">+</span> <span class="pl-c1">0.5</span>f <span class="pl-k">+</span> <span class="pl-c1">0.6</span>g <span class="pl-k">+</span> <span class="pl-c1">0.6</span>h <span class="pl-k">+</span> <span class="pl-c1">0.6</span>i)
           <span class="pl-c1">nothing</span>
       <span class="pl-k">end</span>
foo9 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> a, b, c, d, e, f, g, h, i <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>, <span class="pl-c1">2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">fast_foo9</span>(<span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d, <span class="pl-k">$</span>e, <span class="pl-k">$</span>f, <span class="pl-k">$</span>g, <span class="pl-k">$</span>h, <span class="pl-k">$</span>i);
  <span class="pl-c1">19.902</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo9</span>(<span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d, <span class="pl-k">$</span>e, <span class="pl-k">$</span>f, <span class="pl-k">$</span>g, <span class="pl-k">$</span>h, <span class="pl-k">$</span>i);
  <span class="pl-c1">81.457</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">It's important to note that FastBroadcast doesn't speed up "dynamic broadcast",
i.e. when the arguments are not equal-axised or scalars. For example, dynamic
broadcast happens when the expansion of singleton dimensions occurs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; b = [1.0];

julia&gt; @btime foo9($a, $b, $c, $d, $e, $f, $g, $h, $i);
  70.634 μs (0 allocations: 0 bytes)

julia&gt; @btime fast_foo9($a, $b, $c, $d, $e, $f, $g, $h, $i);
  131.470 μs (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo9</span>(<span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d, <span class="pl-k">$</span>e, <span class="pl-k">$</span>f, <span class="pl-k">$</span>g, <span class="pl-k">$</span>h, <span class="pl-k">$</span>i);
  <span class="pl-c1">70.634</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">fast_foo9</span>(<span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d, <span class="pl-k">$</span>e, <span class="pl-k">$</span>f, <span class="pl-k">$</span>g, <span class="pl-k">$</span>h, <span class="pl-k">$</span>i);
  <span class="pl-c1">131.470</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">The macro <code>@..</code> of FastBroadcast.jl accepts a keyword argument <code>thread</code>
determining whether the broadcast call should use threading (disabled
by default). You can use it as follows (starting Julia with multiple
threads).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FastBroadcast

julia&gt; function foo_serial!(dest, src)
           @.. thread=false dest = log(src)
       end
foo_serial! (generic function with 1 method)

julia&gt; function foo_parallel!(dest, src)
           @.. thread=true dest = log(src)
       end
foo_parallel! (generic function with 1 method)

julia&gt; function foo_maybe_parallel!(dest, src, thread)
           @.. thread=thread dest = log(src)
       end
foo_maybe_parallel! (generic function with 1 method)

julia&gt; src = rand(10^4); dest = similar(src);

julia&gt; @btime foo_serial!($dest, $src);
  50.860 μs (0 allocations: 0 bytes)

julia&gt; @btime foo_parallel!($dest, $src);
  17.245 μs (1 allocation: 48 bytes)

julia&gt; @btime foo_maybe_parallel!($dest, $src, $FastBroadcast.False());
  51.682 μs (0 allocations: 0 bytes)

julia&gt; @btime foo_maybe_parallel!($dest, $src, $FastBroadcast.True());
  17.360 μs (1 allocation: 48 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastBroadcast

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo_serial!</span>(dest, src)
           <span class="pl-c1">@.</span>. thread<span class="pl-k">=</span><span class="pl-c1">false</span> dest <span class="pl-k">=</span> <span class="pl-c1">log</span>(src)
       <span class="pl-k">end</span>
foo_serial! (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo_parallel!</span>(dest, src)
           <span class="pl-c1">@.</span>. thread<span class="pl-k">=</span><span class="pl-c1">true</span> dest <span class="pl-k">=</span> <span class="pl-c1">log</span>(src)
       <span class="pl-k">end</span>
foo_parallel! (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo_maybe_parallel!</span>(dest, src, thread)
           <span class="pl-c1">@.</span>. thread<span class="pl-k">=</span>thread dest <span class="pl-k">=</span> <span class="pl-c1">log</span>(src)
       <span class="pl-k">end</span>
foo_maybe_parallel! (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> src <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>); dest <span class="pl-k">=</span> <span class="pl-c1">similar</span>(src);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo_serial!</span>(<span class="pl-k">$</span>dest, <span class="pl-k">$</span>src);
  <span class="pl-c1">50.860</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo_parallel!</span>(<span class="pl-k">$</span>dest, <span class="pl-k">$</span>src);
  <span class="pl-c1">17.245</span> μs (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">48</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo_maybe_parallel!</span>(<span class="pl-k">$</span>dest, <span class="pl-k">$</span>src, <span class="pl-k">$</span>FastBroadcast<span class="pl-k">.</span><span class="pl-c1">False</span>());
  <span class="pl-c1">51.682</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo_maybe_parallel!</span>(<span class="pl-k">$</span>dest, <span class="pl-k">$</span>src, <span class="pl-k">$</span>FastBroadcast<span class="pl-k">.</span><span class="pl-c1">True</span>());
  <span class="pl-c1">17.360</span> μs (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">48</span> bytes)</pre></div>
</article></div>