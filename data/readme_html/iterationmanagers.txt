<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iterationmanagers" class="anchor" aria-hidden="true" href="#iterationmanagers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IterationManagers</h1>
<p dir="auto"><a href="https://travis-ci.org/spencerlyon2/IterationManagers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8391f8e3e2e5f869a5fa6a4b70005a7f81f7dc38e2f352a14ee62c0d5991b09a/68747470733a2f2f7472617669732d63692e6f72672f7370656e6365726c796f6e322f497465726174696f6e4d616e61676572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/spencerlyon2/IterationManagers.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction-to-the-types" class="anchor" aria-hidden="true" href="#introduction-to-the-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction to the types</h2>
<p dir="auto">This lightweight package implements types for handling state and printing updates in iterative algorithms. The package is based on subtypes of two main abstract types: <code>IterationManager</code> and <code>IterationState</code>.</p>
<h3 dir="auto"><a id="user-content-iterationmanager" class="anchor" aria-hidden="true" href="#iterationmanager"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IterationManager</h3>
<p dir="auto">The <code>IterationManager{T}</code> type is responsible for keeping track of top-level details. To see what this means, look at the implementation of the default manager defined in this package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="immutable IterTolManager &lt;: IterationManager
    tol::Float64
    maxiter::Int
    verbose::Bool
    print_skip::Int
end
typealias DefaultManager IterTolManager

IterTolManager(tol::Float64, maxiter::Int) =
    IterTolManager(tol, maxiter, true, div(maxiter, 5))"><pre>immutable IterTolManager <span class="pl-k">&lt;:</span> <span class="pl-c1">IterationManager</span>
    tol<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span>
    verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    print_skip<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
typealias DefaultManager IterTolManager

<span class="pl-en">IterTolManager</span>(tol<span class="pl-k">::</span><span class="pl-c1">Float64</span>, maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span>
    <span class="pl-c1">IterTolManager</span>(tol, maxiter, <span class="pl-c1">true</span>, <span class="pl-c1">div</span>(maxiter, <span class="pl-c1">5</span>))</pre></div>
<p dir="auto">This manager is responsible for defining the tolerance level for convergence, the maximum number of iterations allowed, whether the iterations should give verbose output, and how many iterations to go in between printouts. Another possible manger, also implemented in this package, is based only on the number of iterations to be performed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="immutable IterManager &lt;: IterationManager
    maxiter::Int
    verbose::Bool
    print_skip::Int
end

IterManager(maxiter::Int) = IterManager(maxiter, true, div(maxiter, 5))"><pre>immutable IterManager <span class="pl-k">&lt;:</span> <span class="pl-c1">IterationManager</span>
    maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span>
    verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    print_skip<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-en">IterManager</span>(maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">IterManager</span>(maxiter, <span class="pl-c1">true</span>, <span class="pl-c1">div</span>(maxiter, <span class="pl-c1">5</span>))</pre></div>
<p dir="auto">Notice this manager does not need to keep track of the desired tolerance level anymore.</p>
<p dir="auto">There are also some API-level functions defined for all subtypes of <code>IterationManager</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="verbose(m::IterationManager) = isdefined(m, :verbose) ? m.verbose : false

print_now(mgr::IterationManager, n::Int) =
    verbose(mgr) &amp;&amp; isdefined(mgr, :print_skip) ? n % mgr.print_skip == 0 :
                                                  false"><pre><span class="pl-en">verbose</span>(m<span class="pl-k">::</span><span class="pl-c1">IterationManager</span>) <span class="pl-k">=</span> <span class="pl-c1">isdefined</span>(m, <span class="pl-c1">:verbose</span>) <span class="pl-k">?</span> m<span class="pl-k">.</span>verbose <span class="pl-k">:</span> <span class="pl-c1">false</span>

<span class="pl-en">print_now</span>(mgr<span class="pl-k">::</span><span class="pl-c1">IterationManager</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span>
    <span class="pl-c1">verbose</span>(mgr) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">isdefined</span>(mgr, <span class="pl-c1">:print_skip</span>) <span class="pl-k">?</span> n <span class="pl-k">%</span> mgr<span class="pl-k">.</span>print_skip <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">:</span>
                                                  <span class="pl-c1">false</span></pre></div>
<p dir="auto">These functions will both return false if the manager doesn't have have a <code>verbose</code> field. The <code>print_now</code> function will return <code>true</code> if and only if there is a <code>verbose</code> equal to true and there is a <code>print_skip</code> field such that <code>n % print_skip ==0</code> (<code>print_skip</code> is a divisor of <code>n</code>).</p>
<h3 dir="auto"><a id="user-content-iterationstate" class="anchor" aria-hidden="true" href="#iterationstate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IterationState</h3>
<p dir="auto">Subtypes of <code>IterationState{T}</code> are responsible for keeping track of the progress of the algorithm <em>between</em> iterations. The default iteration state type is defined as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type DefaultState{T} &lt;: IterationState{T}
    n::Int              # number of iterations
    change::Float64     # change between previous and current state
    elapsed::Float64    # total time elapsed
    prev::T             # previous value
    prev_time::Float64  # previous absolute time
end

DefaultState{T}(v::T) = DefaultState(0, Inf, 0.0, v, time())"><pre>type DefaultState{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">IterationState{T}</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>              <span class="pl-c"><span class="pl-c">#</span> number of iterations</span>
    change<span class="pl-k">::</span><span class="pl-c1">Float64</span>     <span class="pl-c"><span class="pl-c">#</span> change between previous and current state</span>
    elapsed<span class="pl-k">::</span><span class="pl-c1">Float64</span>    <span class="pl-c"><span class="pl-c">#</span> total time elapsed</span>
    prev<span class="pl-k">::</span><span class="pl-c1">T</span>             <span class="pl-c"><span class="pl-c">#</span> previous value</span>
    prev_time<span class="pl-k">::</span><span class="pl-c1">Float64</span>  <span class="pl-c"><span class="pl-c">#</span> previous absolute time</span>
<span class="pl-k">end</span>

<span class="pl-en">DefaultState</span><span class="pl-c1">{T}</span>(v<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-c1">DefaultState</span>(<span class="pl-c1">0</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">0.0</span>, v, <span class="pl-c1">time</span>())</pre></div>
<p dir="auto">Notice that the abstract <code>IterationState{T}</code> is a parametric type with one type parameter <code>T</code>. This package currently uses this only so subtypes of <code>IterationState{T}</code>, like <code>DefaultState{T}</code> above, can have specialized code generated for each type of state, but we may utilize this more in the future.</p>
<p dir="auto">The <code>DefaultState</code> has fields that let it keep track of the number of iterations, the total elapsed computation time, as well as details about the current iteration (change from previous, value of previous, and absolute time on previous iteration).</p>
<h2 dir="auto"><a id="user-content-api-combining-manager-and-state" class="anchor" aria-hidden="true" href="#api-combining-manager-and-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API: Combining Manager and State</h2>
<p dir="auto">By themselves, the <code>IterationManager</code> and <code>IterationState</code> are not very useful. However, when we combine the two, we can reduce a lot of boilerplate code that appears in many iterative algorithms.</p>
<h3 dir="auto"><a id="user-content-example-newtons-method" class="anchor" aria-hidden="true" href="#example-newtons-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Newton's method</h3>
<p dir="auto">Before diving into how the api works, let's consider the following example, which has a pattern quite common in many of the algorithms I have seen and written:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function newton(fp::Function, fpp::Function, init; tol::Float64=1e-12,
                 maxiter::Int=500, verbose::Bool=true, print_skip::Int=5)
    # Stage 1: Setup
    x = copy(init)
    dist = 1.
    iter = 0
    elapsed = 0.0
    old_time = time()

    while dist &gt; tol &amp;&amp; iter &lt; maxiter
        # Stage 2: Iteration
        x_new = x - fpp(x) \ fp(x)

        # Stage 3: Between iteration processing
        dist = maxabs(x - x_new)
        iter += 1
        new_time = time()
        elapsed += new_time - old_time

        if verbose &amp;&amp; iter % print_skip == 0
            println(&quot;Iteration: $iter\t dist: $(round(dist, 9))\t elapsed: $(elapsed)&quot;)
        end

        copy!(x, x_new)
        old_time = new_time
    end

    # Stage 4: post iteration processing
    if verbose
        if iter &gt;= maxiter
            error(&quot;failed to converge in $maxiter iterations&quot;)
        else
            println(&quot;Converged successfully after $iter iterations&quot;)
        end
    end
    x
end"><pre><span class="pl-k">function</span> <span class="pl-en">newton</span>(fp<span class="pl-k">::</span><span class="pl-c1">Function</span>, fpp<span class="pl-k">::</span><span class="pl-c1">Function</span>, init; tol<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1e-12</span>,
                 maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">500</span>, verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>, print_skip<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">5</span>)
    <span class="pl-c"><span class="pl-c">#</span> Stage 1: Setup</span>
    x <span class="pl-k">=</span> <span class="pl-c1">copy</span>(init)
    dist <span class="pl-k">=</span> <span class="pl-c1">1.</span>
    iter <span class="pl-k">=</span> <span class="pl-c1">0</span>
    elapsed <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    old_time <span class="pl-k">=</span> <span class="pl-c1">time</span>()

    <span class="pl-k">while</span> dist <span class="pl-k">&gt;</span> tol <span class="pl-k">&amp;&amp;</span> iter <span class="pl-k">&lt;</span> maxiter
        <span class="pl-c"><span class="pl-c">#</span> Stage 2: Iteration</span>
        x_new <span class="pl-k">=</span> x <span class="pl-k">-</span> <span class="pl-c1">fpp</span>(x) <span class="pl-k">\</span> <span class="pl-c1">fp</span>(x)

        <span class="pl-c"><span class="pl-c">#</span> Stage 3: Between iteration processing</span>
        dist <span class="pl-k">=</span> <span class="pl-c1">maxabs</span>(x <span class="pl-k">-</span> x_new)
        iter <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        new_time <span class="pl-k">=</span> <span class="pl-c1">time</span>()
        elapsed <span class="pl-k">+=</span> new_time <span class="pl-k">-</span> old_time

        <span class="pl-k">if</span> verbose <span class="pl-k">&amp;&amp;</span> iter <span class="pl-k">%</span> print_skip <span class="pl-k">==</span> <span class="pl-c1">0</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Iteration: <span class="pl-v">$iter</span><span class="pl-cce">\t</span> dist: <span class="pl-v">$(<span class="pl-c1">round</span>(dist, <span class="pl-c1">9</span>))</span><span class="pl-cce">\t</span> elapsed: <span class="pl-v">$(elapsed)</span><span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>

        <span class="pl-c1">copy!</span>(x, x_new)
        old_time <span class="pl-k">=</span> new_time
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Stage 4: post iteration processing</span>
    <span class="pl-k">if</span> verbose
        <span class="pl-k">if</span> iter <span class="pl-k">&gt;=</span> maxiter
            <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>failed to converge in <span class="pl-v">$maxiter</span> iterations<span class="pl-pds">"</span></span>)
        <span class="pl-k">else</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Converged successfully after <span class="pl-v">$iter</span> iterations<span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    x
<span class="pl-k">end</span></pre></div>
<p dir="auto">This code implements a simple version of Newton's method to compute the root of a function given the first and second derivatives of a function and an initial condition. But, what the code actually does is not important to our discussion; we just care about its structure. Notice that there are 4 main sections of the code:</p>
<ol dir="auto">
<li>Setup</li>
<li>Iteration</li>
<li>Between iteration processing</li>
<li>Post iteration processing</li>
</ol>
<p dir="auto">Almost all the iterative algorithms I have ever written have either this exact structure, or a subset of it (not all algorithms need a post-iteration step, for example). Given that this structure is so common, we should be able to automate it and remove some boiler-plate. Well, it turns out that we can! Consider another version of the <code>newton</code> function from above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function newton2(fp::Function, fpp::Function, init; tol::Float64=1e-12,
                 maxiter::Int=500, verbose::Bool=true, print_skip::Int=5)
    # setup manager and state
    mgr = DefaultManager(tol, maxiter, verbose, print_skip)
    istate = DefaultState(init)

    # stages 2, 3, 4 in one shot!
    managed_iteration(mgr, istate) do x
        x - fpp(x) \ fp(x)
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">newton2</span>(fp<span class="pl-k">::</span><span class="pl-c1">Function</span>, fpp<span class="pl-k">::</span><span class="pl-c1">Function</span>, init; tol<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1e-12</span>,
                 maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">500</span>, verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>, print_skip<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">5</span>)
    <span class="pl-c"><span class="pl-c">#</span> setup manager and state</span>
    mgr <span class="pl-k">=</span> <span class="pl-c1">DefaultManager</span>(tol, maxiter, verbose, print_skip)
    istate <span class="pl-k">=</span> <span class="pl-c1">DefaultState</span>(init)

    <span class="pl-c"><span class="pl-c">#</span> stages 2, 3, 4 in one shot!</span>
    <span class="pl-c1">managed_iteration</span>(mgr, istate) <span class="pl-k">do</span> x
        x <span class="pl-k">-</span> <span class="pl-c1">fpp</span>(x) <span class="pl-k">\</span> <span class="pl-c1">fp</span>(x)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In this function we take the same arguments and use them to construct an instance of <code>DefaultManager</code> and <code>DefaultState</code>. We then call the <code>managed_iteration</code> function, which has the following signature:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="managed_iteration(f::Function, mgr::IterationManager, istate::IterationState; by=default_by)"><pre class="notranslate"><code>managed_iteration(f::Function, mgr::IterationManager, istate::IterationState; by=default_by)
</code></pre></div>
<p dir="auto">The first argument <code>f</code> is passed along to <code>managed_iteration</code> using Julia's <a href="http://julia.readthedocs.org/en/latest/manual/functions/#do-block-syntax-for-function-arguments" rel="nofollow">do block syntax</a> and represents the code needed to perform one iteration. The <code>managed_iteration</code> function will do all the same pre-mid- and post-processing that we had to do in the original version of <code>newton</code>.</p>
<p dir="auto">I wish to point out that we could also write a one-line version of newton's method using a special keyword argument version of <code>managed_iteration</code> that constructs the manager and state automatically:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function newton3(fp::Function, fpp::Function, init; tol::Float64=1e-12,
                 maxiter::Int=500, verbose::Bool=true, print_skip::Int=5)
    # all four stages in one!
    managed_iteration(x-&gt;x-fpp(x)\fp(x), init; tol=tol, maxiter=maxiter, 
                      print_skip=print_skip, verbose=verbose)
end"><pre><span class="pl-k">function</span> <span class="pl-en">newton3</span>(fp<span class="pl-k">::</span><span class="pl-c1">Function</span>, fpp<span class="pl-k">::</span><span class="pl-c1">Function</span>, init; tol<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1e-12</span>,
                 maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">500</span>, verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>, print_skip<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">5</span>)
    <span class="pl-c"><span class="pl-c">#</span> all four stages in one!</span>
    <span class="pl-c1">managed_iteration</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">-</span><span class="pl-c1">fpp</span>(x)<span class="pl-k">\</span><span class="pl-c1">fp</span>(x), init; tol<span class="pl-k">=</span>tol, maxiter<span class="pl-k">=</span>maxiter, 
                      print_skip<span class="pl-k">=</span>print_skip, verbose<span class="pl-k">=</span>verbose)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-example-vfi" class="anchor" aria-hidden="true" href="#example-vfi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: VFI</h3>
<p dir="auto">Above we saw how we could simplify our implementation of Newton's method and focus on the algorithm itself, rather than managing state or printing messages to update the user. Now I'd like to show a more complicated example. I will just show the before and after using this package functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function vfi(m::GrowthModel, V::Array{Float64, 3}=V_init(m),
             R::Array{Float64, 5}=get_R(m);
             tol::Real=1e-6, howard_steps::Int=5, maxiter::Int=400)
    # Stage 1: Setup
    V_new = similar(V)
    pol_ind = similar(V_new, (Int, Int))  # policies will be indexes (ints)
    βEV = similar(V)
    dist = 1.
    iter = 0
    elapsed = 0.0
    old_time = time()

    while dist &gt; tol &amp;&amp; iter &lt; maxiter
        # Stage 2: do iteration
        update_βEV!(m, V, βEV)
        max_R_βEV!(m, βEV, R, V_new, pol_ind)
        howard_improvement!(m, howard_steps, βEV, R, V_new, pol_ind)

        # Stage 3: between iteration processing
        dist = maxabs(V - V_new)
        copy!(V, V_new)
        iter += 1
        new_time = time()
        elapsed += new_time - old_time - t_old
        old_time = new_time
        print(&quot;Iteration: $iter\t dist: $(round(dist, 4))\t elapsed: $(elapsed)&quot;)
    end

    # Stage 4: post iteration processing
    if iter == maxiter
        error(&quot;pfi failed to converge in $maxiter iterations&quot;)
    else
        println(&quot;Converged successfully after $iter iterations&quot;)
    end

    return V_upd, pol_k_ind
end

# now version using manged_iteration
function vfi_managed(m::GrowthModel, V::Array{Float64, 3}=V_init(m),
             R::Array{Float64, 5}=get_R(m);
             tol::Real=1e-6, howard_steps::Int=5, maxiter::Int=400)
    # Stage 1: Setup
    V_new = similar(V)
    pol_ind = similar(V_new, (Int, Int))  # policies will be indexes (ints)
    βEV = similar(V)
    state = (V, pol_ind, βEV)  # now state is 4-tuple we will be updating

    # construct manager and state
    mgr = DefaultManager(tol, maxiter)
    istate = DefaultState(state)

    # Stages 2, 3, 4
    managed_iteration(mgr, istate; by=(x,y)-&gt;maxabs(x[1] - y[1])) do st
        # unpack state and do one iteration
        V, pol_ind, βEV = st
        V_new = similar(V)
        update_βEV!(m, V, βEV)
        max_R_βEV!(m, βEV, R, V_new, pol_ind)
        howard_improvement!(m, howard_steps, βEV, R, V_new, pol_ind)

        # returned repacked state
        (V_new, pol_ind, βEV)
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">vfi</span>(m<span class="pl-k">::</span><span class="pl-c1">GrowthModel</span>, V<span class="pl-k">::</span><span class="pl-c1">Array{Float64, 3}</span><span class="pl-k">=</span><span class="pl-c1">V_init</span>(m),
             R<span class="pl-k">::</span><span class="pl-c1">Array{Float64, 5}</span><span class="pl-k">=</span><span class="pl-c1">get_R</span>(m);
             tol<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">1e-6</span>, howard_steps<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">5</span>, maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">400</span>)
    <span class="pl-c"><span class="pl-c">#</span> Stage 1: Setup</span>
    V_new <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V)
    pol_ind <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V_new, (Int, Int))  <span class="pl-c"><span class="pl-c">#</span> policies will be indexes (ints)</span>
    βEV <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V)
    dist <span class="pl-k">=</span> <span class="pl-c1">1.</span>
    iter <span class="pl-k">=</span> <span class="pl-c1">0</span>
    elapsed <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    old_time <span class="pl-k">=</span> <span class="pl-c1">time</span>()

    <span class="pl-k">while</span> dist <span class="pl-k">&gt;</span> tol <span class="pl-k">&amp;&amp;</span> iter <span class="pl-k">&lt;</span> maxiter
        <span class="pl-c"><span class="pl-c">#</span> Stage 2: do iteration</span>
        <span class="pl-c1">update_βEV!</span>(m, V, βEV)
        <span class="pl-c1">max_R_βEV!</span>(m, βEV, R, V_new, pol_ind)
        <span class="pl-c1">howard_improvement!</span>(m, howard_steps, βEV, R, V_new, pol_ind)

        <span class="pl-c"><span class="pl-c">#</span> Stage 3: between iteration processing</span>
        dist <span class="pl-k">=</span> <span class="pl-c1">maxabs</span>(V <span class="pl-k">-</span> V_new)
        <span class="pl-c1">copy!</span>(V, V_new)
        iter <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        new_time <span class="pl-k">=</span> <span class="pl-c1">time</span>()
        elapsed <span class="pl-k">+=</span> new_time <span class="pl-k">-</span> old_time <span class="pl-k">-</span> t_old
        old_time <span class="pl-k">=</span> new_time
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Iteration: <span class="pl-v">$iter</span><span class="pl-cce">\t</span> dist: <span class="pl-v">$(<span class="pl-c1">round</span>(dist, <span class="pl-c1">4</span>))</span><span class="pl-cce">\t</span> elapsed: <span class="pl-v">$(elapsed)</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Stage 4: post iteration processing</span>
    <span class="pl-k">if</span> iter <span class="pl-k">==</span> maxiter
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>pfi failed to converge in <span class="pl-v">$maxiter</span> iterations<span class="pl-pds">"</span></span>)
    <span class="pl-k">else</span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Converged successfully after <span class="pl-v">$iter</span> iterations<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> V_upd, pol_k_ind
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> now version using manged_iteration</span>
<span class="pl-k">function</span> <span class="pl-en">vfi_managed</span>(m<span class="pl-k">::</span><span class="pl-c1">GrowthModel</span>, V<span class="pl-k">::</span><span class="pl-c1">Array{Float64, 3}</span><span class="pl-k">=</span><span class="pl-c1">V_init</span>(m),
             R<span class="pl-k">::</span><span class="pl-c1">Array{Float64, 5}</span><span class="pl-k">=</span><span class="pl-c1">get_R</span>(m);
             tol<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">1e-6</span>, howard_steps<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">5</span>, maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">400</span>)
    <span class="pl-c"><span class="pl-c">#</span> Stage 1: Setup</span>
    V_new <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V)
    pol_ind <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V_new, (Int, Int))  <span class="pl-c"><span class="pl-c">#</span> policies will be indexes (ints)</span>
    βEV <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V)
    state <span class="pl-k">=</span> (V, pol_ind, βEV)  <span class="pl-c"><span class="pl-c">#</span> now state is 4-tuple we will be updating</span>

    <span class="pl-c"><span class="pl-c">#</span> construct manager and state</span>
    mgr <span class="pl-k">=</span> <span class="pl-c1">DefaultManager</span>(tol, maxiter)
    istate <span class="pl-k">=</span> <span class="pl-c1">DefaultState</span>(state)

    <span class="pl-c"><span class="pl-c">#</span> Stages 2, 3, 4</span>
    <span class="pl-c1">managed_iteration</span>(mgr, istate; by<span class="pl-k">=</span>(x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">maxabs</span>(x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> y[<span class="pl-c1">1</span>])) <span class="pl-k">do</span> st
        <span class="pl-c"><span class="pl-c">#</span> unpack state and do one iteration</span>
        V, pol_ind, βEV <span class="pl-k">=</span> st
        V_new <span class="pl-k">=</span> <span class="pl-c1">similar</span>(V)
        <span class="pl-c1">update_βEV!</span>(m, V, βEV)
        <span class="pl-c1">max_R_βEV!</span>(m, βEV, R, V_new, pol_ind)
        <span class="pl-c1">howard_improvement!</span>(m, howard_steps, βEV, R, V_new, pol_ind)

        <span class="pl-c"><span class="pl-c">#</span> returned repacked state</span>
        (V_new, pol_ind, βEV)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">I will point out a few key things about this code:</p>
<ul dir="auto">
<li>The <code>T</code> in <code>DefaultState{T}</code> is now a 4-tuple of arrays. This allows us to keep track of all moving parts from one iteration to the next and allows the compiler to generate specialized code</li>
<li>I had to specify the keyword argument <code>by</code> when calling <code>managed_iteration</code>. The <code>by</code> argument is a function that computes the convergence criterion for successive iterations. In our case, we wanted to compare <code>V</code> and <code>V_new</code> using the sup-norm (max absolute difference -- also called the sup norm) which happened to be the first and second elements of our <code>st</code> tuple, respectively.</li>
<li>This code will not actually run because functions called in this routine (e.g. <code>howard_improvement!</code>) are not included here. We simply wanted to see an example of using IterationManagers to tackle a more complicated problem.</li>
</ul>
<h3 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h3>
<p dir="auto">As we saw above, the <code>managed_iteration</code> function does a lot of the heavy lifting. Studying how it is implemented will help us learn most of what we need to understand how this package works. It's actual implementation (as of 4-13-15) is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function managed_iteration(f::Function, mgr::IterationManager,
                           istate::IterationState;
                           by=default_by)
    pre_hook(mgr, istate)

    while !(finished(mgr, istate))
        v = f(istate.prev)
        update!(istate, v; by=by)
        iter_hook(mgr, istate)
    end

    post_hook(mgr, istate)
    istate
end"><pre><span class="pl-k">function</span> <span class="pl-en">managed_iteration</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>, mgr<span class="pl-k">::</span><span class="pl-c1">IterationManager</span>,
                           istate<span class="pl-k">::</span><span class="pl-c1">IterationState</span>;
                           by<span class="pl-k">=</span>default_by)
    <span class="pl-c1">pre_hook</span>(mgr, istate)

    <span class="pl-k">while</span> <span class="pl-k">!</span>(<span class="pl-c1">finished</span>(mgr, istate))
        v <span class="pl-k">=</span> <span class="pl-c1">f</span>(istate<span class="pl-k">.</span>prev)
        <span class="pl-c1">update!</span>(istate, v; by<span class="pl-k">=</span>by)
        <span class="pl-c1">iter_hook</span>(mgr, istate)
    <span class="pl-k">end</span>

    <span class="pl-c1">post_hook</span>(mgr, istate)
    istate
<span class="pl-k">end</span></pre></div>
<p dir="auto">There are 3 main components:</p>
<ol dir="auto">
<li>A <code>finished(mgr::IterationManager, istate::IterationState) =&gt; Bool</code> function that simply takes an <code>IterationManager</code> and <code>IterationState</code> and checks if the loop should terminate after each iteration</li>
<li>The <code>update!{T}(istate::IterationState, v::T, by=by) =&gt; nothing</code> method that updates the contents of the <code>IterationState</code> <strong>inplace</strong> using the new value returned by the function. This routine will check for convergence using the <code>by</code> function argument passed to it (the default argument for <code>by</code> is a function named <code>default_by</code>, which is in <code>api.jl</code>)</li>
<li>Various <code>_hook(mgr::IterationManager, istate::IterationState)</code> methods that allow the user to inject arbitrary code to be run at three stages of the code:
<ol dir="auto">
<li><code>pre_hook(...) =&gt; nothing</code>: Before iterations begin</li>
<li><code>iter_hook(...) =&gt; nothing</code>: Between iterations</li>
<li><code>post_hook(...) =&gt; nothing</code>: After iterations end</li>
</ol>
</li>
</ol>
<p dir="auto">Implementations of each of these functions for the built-in types can be found either in <code>api.jl</code> or the file dedicated to a specific subtype (e.g. all methods above are in <code>api.jl</code> except the <code>update!</code> method, which can be found in <code>states/default.jl</code>).</p>
<h2 dir="auto"><a id="user-content-other" class="anchor" aria-hidden="true" href="#other"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other</h2>
<p dir="auto">More docs may be written at some point... File an issue if you have a specific request or something isn't clear</p>
</article></div>