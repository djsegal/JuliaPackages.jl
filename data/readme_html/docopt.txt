<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-docoptjl" class="anchor" aria-hidden="true" href="#docoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DocOpt.jl</h1>
<p><a href="https://travis-ci.org/docopt/DocOpt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3da025744c785009a4776832fd4df44fe42e16dd/68747470733a2f2f7472617669732d63692e6f72672f646f636f70742f446f634f70742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/docopt/DocOpt.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>DocOpt.jl</strong> is a port of <a href="http://docopt.org/" rel="nofollow"><strong>docopt</strong></a> written in the <a href="http://julialang.org/" rel="nofollow">Julia</a> language.</p>
<p><strong>docopt</strong> generates a command-line arguments parser from human-readable usage patterns.</p>
<p>You will find how attractive the idea of <strong>docopt</strong> is with the example below:</p>
<div class="highlight highlight-source-julia"><pre>doc <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span>Naval Fate.</span>
<span class="pl-s"></span>
<span class="pl-s">Usage:</span>
<span class="pl-s">  naval_fate.jl ship new &lt;name&gt;...</span>
<span class="pl-s">  naval_fate.jl ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]</span>
<span class="pl-s">  naval_fate.jl ship shoot &lt;x&gt; &lt;y&gt;</span>
<span class="pl-s">  naval_fate.jl mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored|--drifting]</span>
<span class="pl-s">  naval_fate.jl -h | --help</span>
<span class="pl-s">  naval_fate.jl --version</span>
<span class="pl-s"></span>
<span class="pl-s">Options:</span>
<span class="pl-s">  -h --help     Show this screen.</span>
<span class="pl-s">  --version     Show version.</span>
<span class="pl-s">  --speed=&lt;kn&gt;  Speed in knots [default: 10].</span>
<span class="pl-s">  --moored      Moored (anchored) mine.</span>
<span class="pl-s">  --drifting    Drifting mine.</span>
<span class="pl-s"></span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-k">using</span> DocOpt  <span class="pl-c"><span class="pl-c">#</span> import docopt function</span>

args <span class="pl-k">=</span> <span class="pl-c1">docopt</span>(doc, version<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>2.0.0<span class="pl-pds">"</span></span>)</pre></div>
<p>The result is:</p>
<pre><code>$ julia -qL examples/naval_fate.jl ship new FOO
julia&gt; args
Dict{String,Any} with 15 entries:
  "remove"     =&gt; false
  "--help"     =&gt; false
  "&lt;name&gt;"     =&gt; String["FOO"]
  "--drifting" =&gt; false
  "mine"       =&gt; false
  "move"       =&gt; false
  "--version"  =&gt; false
  "--moored"   =&gt; false
  "&lt;x&gt;"        =&gt; nothing
  "ship"       =&gt; true
  "new"        =&gt; true
  "shoot"      =&gt; false
  "set"        =&gt; false
  "&lt;y&gt;"        =&gt; nothing
  "--speed"    =&gt; "10"

</code></pre>
<p>Julia v0.6 is now supported.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<p>The <code>DocOpt</code> module exports just one function, <code>docopt</code>, which takes multiple
arguments but all of them except the first one are optional.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">docopt</span>(doc<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, argv<span class="pl-k">=</span>ARGS; help<span class="pl-k">=</span><span class="pl-c1">true</span>, version<span class="pl-k">=</span><span class="pl-c1">nothing</span>, options_first<span class="pl-k">=</span><span class="pl-c1">false</span>, exit_on_error<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p><strong>Arguments</strong></p>
<ul>
<li><code>doc</code> : Description of your command-line interface. (type: <code>AbstractString</code>)</li>
<li><code>argv</code> : Argument vector to be parsed. (type: <code>String</code> or <code>Vector{String}</code>, default: <code>ARGS</code>)</li>
<li><code>help</code> : Set to <code>false</code> to disable automatic help on -h or --help options. (type: <code>Bool</code>, default: <code>true</code>)</li>
<li><code>version</code> : If passed, the value will be printed if --version is in <code>argv</code>. (any type, but <code>VersionNumber</code> is recommended, e.g. v"1.0.2")</li>
<li><code>options_first</code> : Set to <code>true</code> to require options precedes positional arguments, i.e. to forbid options and positional arguments intermix. (type: <code>Bool</code>, default: <code>false</code>)</li>
<li><code>exit_on_error</code> : Set to <code>true</code> to print the usage and exit when parsing error happens. This option is for unit testing. (type: <code>Bool</code>, default: <code>true</code>)</li>
</ul>
<p><code>doc</code> argument is mandatory, <code>argv</code> argument is automatically set to command-line arguments, and <code>help</code>, <code>version</code>, <code>options_first</code> and <code>exit_on_error</code> are keyword arguments.</p>
<p><strong>Return</strong></p>
<ul>
<li>parsed arguments : An associative collection, where keys are names of command-line elements such as e.g. "--verbose" and "", and values are the parsed values of those elements. (type: <code>Dict{String,Any}</code>)</li>
</ul>
<p>See <a href="http://docopt.org/" rel="nofollow">http://docopt.org/</a> for more details about the grammar of the usage pattern.</p>
</article></div>