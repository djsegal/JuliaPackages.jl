<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polygoninbounds" class="anchor" aria-hidden="true" href="#polygoninbounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PolygonInbounds</h1>
<p dir="auto"><a href="https://travis-ci.com/KlausC/PolygonInbounds.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7fd94e343afb2d9f00dc1fdadc24b7b3d753c26145165dbf2e3be76c153e42c2/68747470733a2f2f7472617669732d63692e636f6d2f4b6c617573432f506f6c79676f6e496e626f756e64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/KlausC/PolygonInbounds.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/KlausC/PolygonInbounds.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a06f72559f4e15f97d74036f64f1935a53c858e825d390f459925192d92e7ee/68747470733a2f2f636f6465636f762e696f2f67682f4b6c617573432f506f6c79676f6e496e626f756e64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/KlausC/PolygonInbounds.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-inpoly-fast-points-in-polygon-query-in-julia" class="anchor" aria-hidden="true" href="#inpoly-fast-points-in-polygon-query-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>INPOLY: Fast points-in-polygon query in Julia</h2>
<p dir="auto">Implementation and improvement of function INPOLY2 in Julia. Some new
features have been added.</p>
<p dir="auto">The implementation claims to be fast for multiple points to check at once.
The cost is <code>O((N+M)*(log(M)+1))</code> where <code>M</code> is the number of points to check and <code>N</code>
the number of edges.</p>
<p dir="auto">Link to original Matlab sources: <a href="https://github.com/dengwirda/inpoly">inpoly2.m</a>
The original algorithm was developed by Darren Engwirda in 2017.
The Euclidian distance definition of "on-boundary" and the support for multiple
areas has been added.</p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    stat = inpoly2(points, nodes, edges[, atol=, rtol=])"><pre class="notranslate"><code>    stat = inpoly2(points, nodes, edges[, atol=, rtol=])
</code></pre></div>
<p dir="auto">determines for each point of <code>points</code>
two status bits: <code>inside</code> and <code>onboundary</code>. These bits are stored in the output
matrix <code>stat[:,1:2]</code> with the same row indices as <code>points</code>.</p>
<p dir="auto">A point is considered "inside", if the ray starting from x heading east intersects an
odd number of edges.</p>
<p dir="auto">A point is considered "on-boundary", if its Euclidian distance to any of the edges
of the polygon is less than <code>tol = max(atol, rtol*sizefactor)</code>. <code>sizefactor</code> is the
maximum extension of the smallest box containing all edges.</p>
<p dir="auto">The cost factor depends severely on <code>tol</code>, if that is greater than the average
length of the edges.</p>
<p dir="auto"><code>points</code> and <code>nodes</code> are matrices consisting of x, y in first and second column or
vectors of point-objects <code>p</code> with <code>p[1]</code> and <code>p[2]</code> the x and y coordinates.
<code>edges</code> is a matrix of indices into <code>nodes</code>, which define the egdges of a polygon
or collection of polygons.</p>
<p dir="auto">The polygons may be unconnected and self-intersecting.</p>
<p dir="auto">Each edge may be associated with one or more area indices, which are stored in adjacent
columns of <code>edges[:,3:end]</code>. If there is more than one additional area colum,
the output array becomes 3-dimensional with elements <code>stats[:,1:2,area]</code>. Here <code>area</code>
are the area indices as stored in the additional columns of <code>edges</code>.</p>
<p dir="auto">The definitions of "inside" and "on-boundary" related to an area consider only edges,
which have this area associated in one of the added columns of <code>edges</code>.
Area index <code>0</code> indicates unused. It is possible to assign each edge to zero, one, or
more areas in this way.</p>
<p dir="auto">The <code>polydemo</code> functions produce plots of some selected examples and may be used
to enjoy.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
Pkg&gt;add PolygonInbounds

using Plots
using PolygonInbounds
using .Demo
Demo.setplot(Plots)

polydemo(1; tol=0.2); # r is the number of points on a grid
polydemo(2; r = 10^5, tol=0.01); # polygons of the &quot;lakes&quot; mesh data set 
polydemo(3; r = 10^5, tol=0.01); # polygons of the &quot;coast&quot; mesh data set 
polydemo(4; tol=0.1) # simple tetragon 
polydemo(5; tol=0.2) # two polygons with different areas 

points = [0.05 0.0; 1 1; -1 1]
nodes =  [0.0 0; 0 10; 10 10; 10 0]
edges = [1 2; 2 3; 3 4; 4 1]
tol = 1e-1

stat = inpoly2(points, nodes, edges, atol=tol)
"><pre>Pkg<span class="pl-k">&gt;</span>add PolygonInbounds

<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> PolygonInbounds
<span class="pl-k">using</span> <span class="pl-k">.</span>Demo
Demo<span class="pl-k">.</span><span class="pl-c1">setplot</span>(Plots)

<span class="pl-c1">polydemo</span>(<span class="pl-c1">1</span>; tol<span class="pl-k">=</span><span class="pl-c1">0.2</span>); <span class="pl-c"><span class="pl-c">#</span> r is the number of points on a grid</span>
<span class="pl-c1">polydemo</span>(<span class="pl-c1">2</span>; r <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>, tol<span class="pl-k">=</span><span class="pl-c1">0.01</span>); <span class="pl-c"><span class="pl-c">#</span> polygons of the "lakes" mesh data set </span>
<span class="pl-c1">polydemo</span>(<span class="pl-c1">3</span>; r <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>, tol<span class="pl-k">=</span><span class="pl-c1">0.01</span>); <span class="pl-c"><span class="pl-c">#</span> polygons of the "coast" mesh data set </span>
<span class="pl-c1">polydemo</span>(<span class="pl-c1">4</span>; tol<span class="pl-k">=</span><span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span> simple tetragon </span>
<span class="pl-c1">polydemo</span>(<span class="pl-c1">5</span>; tol<span class="pl-k">=</span><span class="pl-c1">0.2</span>) <span class="pl-c"><span class="pl-c">#</span> two polygons with different areas </span>

points <span class="pl-k">=</span> [<span class="pl-c1">0.05</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>]
nodes <span class="pl-k">=</span>  [<span class="pl-c1">0.0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">10</span>; <span class="pl-c1">10</span> <span class="pl-c1">10</span>; <span class="pl-c1">10</span> <span class="pl-c1">0</span>]
edges <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>; <span class="pl-c1">4</span> <span class="pl-c1">1</span>]
tol <span class="pl-k">=</span> <span class="pl-c1">1e-1</span>

stat <span class="pl-k">=</span> <span class="pl-c1">inpoly2</span>(points, nodes, edges, atol<span class="pl-k">=</span>tol)
</pre></div>
<p dir="auto">Docu of the original Matlab implementation: <a href="./doc/original.md">inpoly2</a>.</p>
</article></div>