<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-inflatejl" class="anchor" aria-hidden="true" href="#inflatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inflate.jl</h1>
<p>Inflate provides a pure Julia implementation of
<a href="https://zlib.net" rel="nofollow">zlib</a> <em>de</em>compression functionality, with both in-
memory and streaming interfaces. This covers decompression of the
Deflate algorithm and the Zlib and Gzip wrapper formats, as specified
in <a href="https://www.ietf.org/rfc/rfc1950.txt" rel="nofollow">RFC 1950</a>,
<a href="https://www.ietf.org/rfc/rfc1951.txt" rel="nofollow">RFC 1951</a>, and
<a href="https://www.ietf.org/rfc/rfc1952.txt" rel="nofollow">RFC 1952</a>.</p>
<p>The main reasons to choose Inflate over
<a href="https://github.com/bicycle1885/CodecZlib.jl">CodecZlib</a> are:</p>
<ul>
<li>100% Julia code - great for Julia purists.</li>
<li>No binary dependencies.</li>
<li>Actually no dependencies at all.</li>
<li>Can read gzip headers.</li>
</ul>
<p>You should choose CodecZlib over Inflate if the points above are not
compelling or one or more of the following applies to you:</p>
<ul>
<li>Need to compress, not only decompress.</li>
<li>Want higher speed.</li>
<li>Want a full-featured streaming interface.</li>
<li>Want a battle-proven library.</li>
</ul>
<h2><a id="user-content-in-memory-decompression" class="anchor" aria-hidden="true" href="#in-memory-decompression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>In-Memory Decompression</h2>
<p>In-memory decompression is done by the following functions:</p>
<table>
<thead>
<tr>
<th>function</th>
<th>decompresses</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inflate(data::Vector{UInt8})</code></td>
<td>raw Deflate data</td>
</tr>
<tr>
<td><code>inflate_zlib(data::Vector{UInt8})</code></td>
<td>Zlib data</td>
</tr>
<tr>
<td><code>inflate_gzip(data::Vector{UInt8})</code></td>
<td>Gzip data</td>
</tr>
</tbody>
</table>
<p>They all take a <code>Vector{UInt8}</code> with compressed data as input and
return a <code>Vector{UInt8}</code> of decompressed data. Additionally</p>
<pre><code>gzip_headers = Dict{String, Any}()
out = inflate_gzip(data, headers = gzip_headers)
</code></pre>
<p>fills in <code>gzip_headers</code> with the Gzip headers present in <code>data</code>.</p>
<p>Both <code>inflate_zlib</code> and <code>inflate_gzip</code> accept the keyword argument
<code>ignore_checksum</code>, which if set to true skips consistency checking by
means of Adler and CRC checksums respectively. This disables the
computation of the checksums, saving time.</p>
<p>Finally,
there is also a convenience function to read a compressed text file in
gzip format</p>
<pre><code>out = inflate_gzip(filename::String)
</code></pre>
<p>This returns the decompressed file as a string.</p>
<h2><a id="user-content-streaming-decompression" class="anchor" aria-hidden="true" href="#streaming-decompression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Streaming Decompression</h2>
<p>Streaming decompression is done using the following types:</p>
<table>
<thead>
<tr>
<th>stream</th>
<th>decompresses</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>InflateStream(stream::IO)</code></td>
<td>raw Deflate stream</td>
</tr>
<tr>
<td><code>InflateZlibStream(stream::IO)</code></td>
<td>Zlib stream</td>
</tr>
<tr>
<td><code>InflateGzipStream(stream::IO)</code></td>
<td>Gzip stream</td>
</tr>
</tbody>
</table>
<p>The stream types are subtypes of <code>IO</code> and decompression is done by
reading from instances of the types.</p>
<p>Example:</p>
<pre><code>f = open("compressed_file.gz", "r")
gz = InflateGzipStream(f)
for line in readlines(gz)
    println(line)
end
close(f)
</code></pre>
<p>The streaming interface is minimalistic. If you need a full-featured
interface, the CodecZlib package is likely to be a better fit.</p>
<p>Reading of Gzip headers can be done from the streaming interface too.</p>
<pre><code>gzip_headers = Dict{String, Any}()
gz = InflateGzipStream(stream, headers = gzip_headers)
</code></pre>
<p>The retrieved headers will be available immediately upon construction
of the <code>InflateGzipStream</code>. It is not necessary to read any data
first.</p>
<p>Likewise both <code>InflateZlibStream</code> and <code>InflateGzipStream</code> accept the
keyword argument <code>ignore_checksum</code> in the same way as the
non-streaming functions <code>inflate_zlib</code> and <code>inflate_gzip</code>.</p>
</article></div>