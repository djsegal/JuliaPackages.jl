<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-resourceadequacy" class="anchor" aria-hidden="true" href="#resourceadequacy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ResourceAdequacy</h1>
<p><em>Note: This package has been consolidated into <a href="https://github.com/NREL/PRAS">https://github.com/NREL/PRAS</a>. This repository is for archival purposes only.</em></p>
<p><a href="https://travis-ci.org/NREL/ResourceAdequacy.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/39c802798c34f64dc1859a14531f675946c795ac2ed45afde0ed4f6708f93978/68747470733a2f2f7472617669732d63692e6f72672f4e52454c2f5265736f7572636541646571756163792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/NREL/ResourceAdequacy.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/NREL/ResourceAdequacy.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3daa24bdf459cf679b0593f79b7629b5cd852bc8c8b11f83dba000d15feb4215/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4e52454c2f5265736f7572636541646571756163792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/NREL/ResourceAdequacy.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>The Probabilistic Resource Adequacy Suite (PRAS) provides a modular collection
of data processing and system simulation tools to assess power system reliability.</p>
<p>To use this functionality for capacity valuation, see
<a href="https://github.com/NREL/CapacityCredit.jl">CapacityCredit.jl</a>.
To import systems from PLEXOS, see
<a href="https://github.com/NREL/PLEXOS2PRAS.jl">PLEXOS2PRAS.jl</a>.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<h3><a id="user-content-unleash-your-cpu-cores" class="anchor" aria-hidden="true" href="#unleash-your-cpu-cores"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unleash your CPU cores</h3>
<p>First, know that PRAS uses multi-threading, so be
sure to set the environment variable controlling the number of threads
available to Julia (36 in this Bash example, which is a good choice for
Eagle nodes - on a laptop you would probably only want 4) before running
scripts or launching the REPL:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="export JULIA_NUM_THREADS=36
"><pre><span class="pl-k">export</span> JULIA_NUM_THREADS=36</pre></div>
<h3><a id="user-content-architecture-overview" class="anchor" aria-hidden="true" href="#architecture-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Architecture Overview</h3>
<p>PRAS functionality is distributed across groups of
modular specifications that can be mixed, extended, or replaced to support the needs
of a particular analysis. When assessing reliability or capacity value, one can
define the specs to be used while passing along any associated parameters
or options.</p>
<p>The categories of specifications are:</p>
<p><strong>Simulation Specifications</strong>: How should power system operations be simulated?
Options are <code>NonSequentialCopperplate</code>, <code>NonSequentialNetworkFlow</code>,
<code>SequentialCopperplate</code>, or <code>SequentialNetworkFlow</code>.</p>
<p><strong>Result Specifications</strong>: What level of detail should be saved out during simulations?
Options are <code>Minimal</code>, <code>Temporal</code>, <code>Spatial</code>, <code>SpatioTemporal</code>, and <code>Network</code>.</p>
<h3><a id="user-content-running-an-analysis" class="anchor" aria-hidden="true" href="#running-an-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running an analysis</h3>
<p>Analysis centers around the <code>assess</code> method with different arguments passed
depending on the desired analysis to run.
For example, to run a convolution-based reliability assessment
(<code>NonSequentialCopperplate</code>) with aggregate LOLE and EUE reporting (<code>Minimal</code>),
one would run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assess(NonSequentialCopperplate(), Minimal(), mysystemmodel)
"><pre><span class="pl-c1">assess</span>(<span class="pl-c1">NonSequentialCopperplate</span>(), <span class="pl-c1">Minimal</span>(), mysystemmodel)</pre></div>
<p>To run a network flow simulation instead with 100,000 Monte Carlo samples,
the method call becomes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assess(NonSequentialNetworkFlow(samples=100_000), Minimal(), mysystemmodel)
"><pre><span class="pl-c1">assess</span>(<span class="pl-c1">NonSequentialNetworkFlow</span>(samples<span class="pl-k">=</span><span class="pl-c1">100_000</span>), <span class="pl-c1">Minimal</span>(), mysystemmodel)</pre></div>
<p>To save regional results in a multi-area system, change <code>Minimal</code> to <code>Spatial</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assess(NonSequentialNetworkFlow(samples=100_000), Spatial(), mysystemmodel)
"><pre><span class="pl-c1">assess</span>(<span class="pl-c1">NonSequentialNetworkFlow</span>(samples<span class="pl-k">=</span><span class="pl-c1">100_000</span>), <span class="pl-c1">Spatial</span>(), mysystemmodel)</pre></div>
<p>To save regional results for each simulation period, use the <code>SpatioTemporal</code>
result specification instead:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assess(NonSequentialNetworkFlow(samples=100_000), SpatioTemporal(), mysystemmodel)
"><pre><span class="pl-c1">assess</span>(<span class="pl-c1">NonSequentialNetworkFlow</span>(samples<span class="pl-k">=</span><span class="pl-c1">100_000</span>), <span class="pl-c1">SpatioTemporal</span>(), mysystemmodel)</pre></div>
<h3><a id="user-content-querying-results" class="anchor" aria-hidden="true" href="#querying-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Querying Results</h3>
<p>After running an analysis, metrics of interest can be obtained by calling the
appropriate metric's constructor with the result object.</p>
<p>For example, to obtain the system-wide LOLE over the simulation period:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="result = assess(NonSequentialNetworkFlow(100_000), SpatioTemporal(), mysystemmodel)
lole = LOLE(result)
"><pre>result <span class="pl-k">=</span> <span class="pl-c1">assess</span>(<span class="pl-c1">NonSequentialNetworkFlow</span>(<span class="pl-c1">100_000</span>), <span class="pl-c1">SpatioTemporal</span>(), mysystemmodel)
lole <span class="pl-k">=</span> <span class="pl-c1">LOLE</span>(result)</pre></div>
<p>Single-period metrics such as LOLP can also be extracted if the appropriate
information was saved (i.e. if <code>Temporal</code> or <code>SpatioTemporal</code> result
specifications were used). For example, to get system-wide LOLP for April 27th,
2024 at 1pm:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lolp = LOLP(result, DateTime(2024, 4, 27, 13))
"><pre>lolp <span class="pl-k">=</span> <span class="pl-c1">LOLP</span>(result, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>, <span class="pl-c1">4</span>, <span class="pl-c1">27</span>, <span class="pl-c1">13</span>))</pre></div>
<p>Similarly, if per-region information was saved (i.e. if <code>Spatial</code> or
<code>SpatioTemporal</code> result specifications were used), region-specific metrics
can be extracted. For example, to obtain the EUE of Region A across the entire
simulation period:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="eue_a = EUE(result, &quot;Region A&quot;)
"><pre>eue_a <span class="pl-k">=</span> <span class="pl-c1">EUE</span>(result, <span class="pl-s"><span class="pl-pds">"</span>Region A<span class="pl-pds">"</span></span>)</pre></div>
<p>If the results specification supports it (i.e. <code>SpatioTemporal</code> or <code>Network</code>),
metrics can be obtained for both a specific region and time:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="eue_a = EUE(result, &quot;Region A&quot;, DateTime(2024, 4, 27, 13))
"><pre>eue_a <span class="pl-k">=</span> <span class="pl-c1">EUE</span>(result, <span class="pl-s"><span class="pl-pds">"</span>Region A<span class="pl-pds">"</span></span>, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>, <span class="pl-c1">4</span>, <span class="pl-c1">27</span>, <span class="pl-c1">13</span>))</pre></div>
<p>Finally, if using the <code>Network</code> result spec, information about interface flows
and utilization factors can be obtained as well:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Average flow from Region A to Region B during the hour of interest
flow_ab = ExpectedInterfaceFlow(
    result, &quot;Region A&quot;, &quot;Region B&quot;, DateTime(2024, 4, 27, 13))
    
# Same magnitude as above, but different sign
flow_ba = ExpectedInterfaceFlow(
    result, &quot;Region B&quot;, &quot;Region A&quot;, DateTime(2024, 4, 27, 13))
    
# Average utilization (average ratio of absolute value of actual flow vs maximum possible after outages)
utilization_ab = ExpectedInterfaceUtilization(
    result, &quot;Region A&quot;, &quot;Region B&quot;, DateTime(2024, 4, 27, 13))
"><pre><span class="pl-c"><span class="pl-c">#</span> Average flow from Region A to Region B during the hour of interest</span>
flow_ab <span class="pl-k">=</span> <span class="pl-c1">ExpectedInterfaceFlow</span>(
    result, <span class="pl-s"><span class="pl-pds">"</span>Region A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Region B<span class="pl-pds">"</span></span>, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>, <span class="pl-c1">4</span>, <span class="pl-c1">27</span>, <span class="pl-c1">13</span>))
    
<span class="pl-c"><span class="pl-c">#</span> Same magnitude as above, but different sign</span>
flow_ba <span class="pl-k">=</span> <span class="pl-c1">ExpectedInterfaceFlow</span>(
    result, <span class="pl-s"><span class="pl-pds">"</span>Region B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Region A<span class="pl-pds">"</span></span>, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>, <span class="pl-c1">4</span>, <span class="pl-c1">27</span>, <span class="pl-c1">13</span>))
    
<span class="pl-c"><span class="pl-c">#</span> Average utilization (average ratio of absolute value of actual flow vs maximum possible after outages)</span>
utilization_ab <span class="pl-k">=</span> <span class="pl-c1">ExpectedInterfaceUtilization</span>(
    result, <span class="pl-s"><span class="pl-pds">"</span>Region A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Region B<span class="pl-pds">"</span></span>, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>, <span class="pl-c1">4</span>, <span class="pl-c1">27</span>, <span class="pl-c1">13</span>))</pre></div>
</article></div>