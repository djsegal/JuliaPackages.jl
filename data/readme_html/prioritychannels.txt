<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-prioritychannels" class="anchor" aria-hidden="true" href="#prioritychannels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PriorityChannels</h1>
<p><a href="https://travis-ci.org/baggepinnen/PriorityChannels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d701caf750c8cfac095f475600e2ffe49c2c529/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f5072696f726974794368616e6e656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/PriorityChannels.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides the type <code>PriorityChannel</code> (the only exported name) that mimics <a href="https://docs.julialang.org/en/v1/base/parallel/#Base.Channel" rel="nofollow"><code>Base.Channel</code></a>, but where each element is associated with a priority. <a href="https://docs.julialang.org/en/v1/base/parallel/#Base.take!-Tuple%7BChannel%7D" rel="nofollow"><code>take!</code></a> always returns the highest priority element. Internally, a <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow">heap</a> is used to keep track of priorities. Example usage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PriorityChannels, Test
c  <span class="pl-k">=</span> <span class="pl-c1">Channel</span>(<span class="pl-c1">50</span>)
pc <span class="pl-k">=</span> <span class="pl-c1">PriorityChannel</span>(<span class="pl-c1">50</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>
    e <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">500</span>)
    <span class="pl-c1">put!</span>(c,e)
    <span class="pl-c1">put!</span>(pc,e,e) <span class="pl-c"><span class="pl-c">#</span> Assign same priority as element for testing purposes</span>
<span class="pl-k">end</span>
elems <span class="pl-k">=</span> [<span class="pl-c1">take!</span>(c) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>]
pelems <span class="pl-k">=</span> [<span class="pl-c1">take!</span>(pc) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>]
<span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">issorted</span>(elems) <span class="pl-c"><span class="pl-c">#</span> A regular Channel does not return ordered elements</span>
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(pelems) <span class="pl-c"><span class="pl-c">#</span> A PriorityChannel returns elements in priority order</span></pre></div>
<h2><a id="user-content-difference-between-channel-and-prioritychannel" class="anchor" aria-hidden="true" href="#difference-between-channel-and-prioritychannel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Difference between <code>Channel</code> and <code>PriorityChannel</code></h2>
<ul>
<li><code>put!(pc, element, priority::Real)</code> <strong>lower</strong> number indicates a higher priority (default = 0).</li>
<li><code>PriorityChannel</code> can not be unbuffered (of length 0) and must have a positive length.</li>
<li><a href="https://docs.julialang.org/en/v1/base/parallel/#Base.take!-Tuple%7BChannel%7D" rel="nofollow"><code>take!(pc)</code></a> returns the highest priority item, <code>PriorityChannel</code> thus acts like a  <a href="https://en.wikipedia.org/wiki/Priority_queue" rel="nofollow">priority queue</a> instead of a FIFO queue like <code>Channel</code> does</li>
<li>Pretty much all other functionality should be the same, including all constructors.</li>
</ul>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h2>
<p>To get maximum performance, initialize a concretely typed <code>PriorityChannel</code>. The constructor <code>PriorityChannel(N)</code> creates a channel of length <code>N</code> that holds type <code>Any</code> and have integer priorities. These types can be specified with the constructor <code>PriorityChannel{ElemType,PrioType}(N)</code>, e.g., <code>PriorityChannel{Int,Int}(N)</code>. There is a rather striking difference in performance between these two:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PriorityChannels
N <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>
r <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>, N);
<span class="pl-k">const</span> c1 <span class="pl-k">=</span> <span class="pl-c1">PriorityChannel</span>(N)
<span class="pl-k">const</span> c2 <span class="pl-k">=</span> <span class="pl-c1">PriorityChannel</span><span class="pl-c1">{Int,Int}</span>(N)

<span class="pl-c1">@time</span> <span class="pl-c1">map</span>(ri<span class="pl-k">-&gt;</span><span class="pl-c1">put!</span>(c1,ri,ri), r);
<span class="pl-c1">@time</span> <span class="pl-c1">map</span>(ri<span class="pl-k">-&gt;</span><span class="pl-c1">put!</span>(c2,ri,ri), r);

<span class="pl-c1">@time</span> <span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">take!</span>(c1), <span class="pl-c1">1</span><span class="pl-k">:</span>N);
<span class="pl-c1">@time</span> <span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">take!</span>(c2), <span class="pl-c1">1</span><span class="pl-k">:</span>N);

<span class="pl-c"><span class="pl-c">#</span> Output after pre-compilation</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">map</span>(ri<span class="pl-k">-&gt;</span><span class="pl-c1">put!</span>(c1,ri,ri), r);
  <span class="pl-c1">0.663640</span> seconds (<span class="pl-c1">4.33</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">150.086</span> MiB, <span class="pl-c1">55.92</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">map</span>(ri<span class="pl-k">-&gt;</span><span class="pl-c1">put!</span>(c2,ri,ri), r);
  <span class="pl-c1">0.103298</span> seconds (<span class="pl-c1">60.23</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">12.643</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">take!</span>(c1), <span class="pl-c1">1</span><span class="pl-k">:</span>N);
  <span class="pl-c1">3.282501</span> seconds (<span class="pl-c1">20.02</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">612.583</span> MiB, <span class="pl-c1">27.25</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">take!</span>(c2), <span class="pl-c1">1</span><span class="pl-k">:</span>N);
  <span class="pl-c1">0.313285</span> seconds (<span class="pl-c1">63.44</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">10.791</span> MiB, <span class="pl-c1">4.67</span><span class="pl-k">%</span> gc time)</pre></div>
</article></div>