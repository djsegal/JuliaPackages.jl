<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-statisticaltraitsjl" class="anchor" aria-hidden="true" href="#statisticaltraitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StatisticalTraits.jl</h1>
<table>
<thead>
<tr>
<th align="center">Linux</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/alan-turing-institute/StatisticalTraits.jl/actions"><img src="https://github.com/alan-turing-institute/StatisticalTraits.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/alan-turing-institute/StatisticalTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51b347b150b53f36e95b2352ba0434ba0c8ae55822803e1d382e5d276fab8033/68747470733a2f2f636f6465636f762e696f2f67682f616c616e2d747572696e672d696e737469747574652f537461746973746963616c5472616974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d726836486e79494b6331" alt="codecov" data-canonical-src="https://codecov.io/gh/alan-turing-institute/StatisticalTraits.jl/branch/master/graph/badge.svg?token=rh6HnyIKc1" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A light-weight package defining fall-back implementations for a
collection of traits possessed by statistical objects. Here a "trait"
is a function with a single argument that is a julia type, which might
encode type metadata for inspection, or for use in function
dispatch.</p>
<p>Here are two examples, which might apply to both statistical
model types and loss function types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="target_scitype(::Type) = Unknown
prediction_type(::Type) = :unknown # also :probablistic, :deterministic, :interval
"><pre><span class="pl-en">target_scitype</span>(<span class="pl-k">::</span><span class="pl-c1">Type</span>) <span class="pl-k">=</span> Unknown
<span class="pl-en">prediction_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type</span>) <span class="pl-k">=</span> <span class="pl-c1">:unknown</span> <span class="pl-c"><span class="pl-c">#</span> also :probablistic, :deterministic, :interval</span></pre></div>
<p>Here <code>Unknown</code> is a type defined in the light-weight package
<a href="https://github.com/alan-turing-institute/ScientificTypes.jl">ScientificTypes.jl</a>,
the only dependency of StatsTraits.jl.</p>
<p>Refer to <a href="src/StatisticalTraits.jl">source code</a> for a complete list.</p>
<p>The traits defined here are overloaded by assorted model types and
measure types in the
<a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a> universe
(examples of measures are loss functions and scoring rules). However,
this small package might be of independent interest.</p>
<p>A planned StatisticalMeasures.jl package, to contain measures
currently in
<a href="https://github.com/alan-turing-institute/MLJBase.jl">MLJBase.jl</a>,
will have this package as a dependency, allowing it to be independent
of the MLJ packages.</p>
</article></div>