<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-zernikepolynomialsjl" class="anchor" aria-hidden="true" href="#zernikepolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ZernikePolynomials.jl</h1>
<p>This package provides functionality to work with <a href="https://en.wikipedia.org/wiki/Zernike_polynomials" rel="nofollow">Zernike polynomials</a>.</p>
<p>It features the following:</p>
<ul>
<li>functions to convert between common serial indices of Zernike polynomials</li>
<li>functions to evaluate the polynomials on a grid</li>
<li>functions to estimate Zernike coefficients in a least squares sense from a user-provided input.</li>
</ul>
<h2><a id="user-content-conversion-to-and-between-noll--osaansi-sequential-indices" class="anchor" aria-hidden="true" href="#conversion-to-and-between-noll--osaansi-sequential-indices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conversion to and between (Noll &amp; OSA/ANSI) sequential indices</h2>
<p>This package provides conversion utility functions between three common ways of specifying a Zernike polynomial.</p>
<p>The first is a tuple (m,n) of integers to specify the polynomial Z_n^m(ρ,θ), where n ≥ m, and (ρ,θ) are polar coordinates (radius and angle).</p>
<p>The second (sequential) index is the OSA/ANSI standard index (0,1,2,3,...).</p>
<p>The third is Noll's sequential index (1,2,3,...).</p>
<p>An invalid combination (m,n) returns NaN in conversion.</p>
<pre lang="julia-repl"><code>&gt;&gt; using ZernikePolynomials
&gt;&gt; [mn2OSA(n,m) for n in 0:4, m in -5:5]
&gt;&gt; [mn2Noll(n,m) for n in 0:4, m in -5:5]
&gt;&gt; [OSA2mn(j) for j in 0:5]
&gt;&gt; [Noll2mn(j) for j in 0:5]
&gt;&gt; [Noll2OSA(OSA2Noll(j)) for j = 0:5]
</code></pre>
<h2><a id="user-content-evaluating-zernike-polynomials" class="anchor" aria-hidden="true" href="#evaluating-zernike-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Evaluating Zernike polynomials</h2>
<p>The Zernike polynomials (ρ,θ) -&gt; Z_n^m(ρ,θ) or (x,y) -&gt; Z_n^m(x,y) can be obtained as a function as follows:</p>
<pre lang="julia-repl"><code>&gt;&gt; Zernike(1,1)
&gt;&gt; Zernike(1,1,coord=:polar)
&gt;&gt; Z = Zernike(5,index=:Noll,coord=:cartesian) # 5th polynomial by Noll's numbering
&gt;&gt; Z = Zernike(1,1,coord=:cartesian)
&gt;&gt; Z(0.5,0.2) # evaluate the function at cartesian coordinate (0.5,0.2)
</code></pre>
<p>Polar coordinates are used by default. The functions return 0 for ρ &gt; 1.</p>
<p>Zernike polynomials and affine combination thereof can easily be evaluated on a grid of points using the function <code>evaluateZernike()</code>.</p>
<p>For example, to evaluate 0.5<em>Z_2 + 0.3</em>Z_3 (by OSA numbering) on a 256x256 grid, use the following</p>
<pre lang="julia-repl"><code>&gt;&gt; evaluateZernike(256, [2, 3], [0.5, 0.3], index=:OSA)
</code></pre>
<p>To evaluate it on a (square) grid with predefined coordinates, use for example</p>
<pre lang="julia-repl"><code>&gt;&gt; x = LinRange(-2,2,256)
&gt;&gt; ϕ = evaluateZernike(x, [2, 3], [0.5, 0.3], index=:OSA)
&gt;&gt; using Plots
&gt;&gt; heatmap(ϕ)
</code></pre>
<p>Here the range <code>x</code> is a range that gives the x and y coordinates.</p>
<h3><a id="user-content-zernike-polynomial-normalization" class="anchor" aria-hidden="true" href="#zernike-polynomial-normalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Zernike polynomial normalization</h3>
<p>The Zernike polynomials are normalized according to Thibos et al. - "Standards for Reporting the Optical Aberrations of Eyes", i.e.
N_n^m = sqrt(2 (n+1) / (1 + δ(m,0)))
where δ(m,0) = 1 for m = 0 and 0 otherwise.
These normalization constants can be obtained by <code>normalization(m,n)</code>:</p>
<pre lang="julia-repl"><code>&gt;&gt; [normalization(OSA2mn(i)...) for i in 0:5]
</code></pre>
<p>Note that the definition on the <a href="https://en.wikipedia.org/wiki/Zernike_polynomials" rel="nofollow">Wikipedia page on Zernike polynomials</a> is different. Here the polynomials are normalized between [-1,1].
When using or reporting (estimated) Zernike coefficients, it is important to be aware of which normalization has been used.</p>
<h2><a id="user-content-estimating-zernike-coefficients-in-a-least-squares-sense" class="anchor" aria-hidden="true" href="#estimating-zernike-coefficients-in-a-least-squares-sense"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Estimating Zernike coefficients in a least squares sense</h2>
<p>A common use for Zernike polynomials is to approximate a given 2D input.
Since Zernike polynomials are often used in optics to approximate a 2D phase, this is the term used in the function documentation.</p>
<p>The function <code>Zernikecoefficients()</code> estimates (in a least-squares sense) the optimal coefficients for a sum of Zernike polynomials. A vector of (sequential) indices should be provided to specify which coefficients should be estimated</p>
<pre lang="julia-repl"><code>&gt;&gt; ϕ = evaluateZernike(256, [2, 3], [0.5, 0.3], index=:OSA)
&gt;&gt; Zernikecoefficients(ϕ, [2, 3]) # ≈ [0.5, 0.3]
</code></pre>
<p>It is also possible to specify on which coordinates the phase is defined:</p>
<pre lang="julia-repl"><code>&gt;&gt; x = LinRange(-2,2,256)
&gt;&gt; ϕ = evaluateZernike(x, [2, 3], [0.5, 0.3], index=:Noll)
&gt;&gt; Zernikecoefficients(x, ϕ, [1, 3], index=:Noll) # ≈ [0.0, 0.3]
</code></pre>
<p>Note that in this last example the coefficient for the Zernike polynomial with Noll index 1 is estimated, but this is not present in ϕ. Therefore the estimated coefficient is 0.</p>
<h2><a id="user-content-plotting-example" class="anchor" aria-hidden="true" href="#plotting-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plotting example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> ZernikePolynomials

x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">256</span>)
ϕ <span class="pl-k">=</span> <span class="pl-c1">evaluateZernike</span>(x, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.3</span>], index<span class="pl-k">=</span><span class="pl-c1">:Noll</span>)
<span class="pl-en">f</span>(x,y) <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span> ? <span class="pl-c1">1.</span> : <span class="pl-c1">NaN</span> <span class="pl-c"><span class="pl-c">#</span> NaNs are not plotted</span>
<span class="pl-c1">heatmap</span>( ϕ <span class="pl-k">.*</span> [<span class="pl-c1">f</span>(X,Y) <span class="pl-k">for</span> X <span class="pl-k">in</span> x, Y <span class="pl-k">in</span> x])</pre></div>
</article></div>