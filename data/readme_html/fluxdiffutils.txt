<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fluxdiffutils" class="anchor" aria-hidden="true" href="#fluxdiffutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FluxDiffUtils</h1>
<p dir="auto"><a href="https://jlchan.github.io/FluxDiffUtils.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jlchan.github.io/FluxDiffUtils.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/jlchan/FluxDiffUtils-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3c210bf89b18bb9e3daa1299fd30b518f8af32fed91364f5efbd0566fcab84b4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6c6368616e2f466c7578446966665574696c732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jlchan/FluxDiffUtils.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://github.com/jlchan/FluxDiffUtils.jl/actions"><img src="https://github.com/jlchan/FluxDiffUtils.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jlchan/FluxDiffUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5ccef97f7264806bf5e9642fc6529d169997a687e2c0312c335e83dee489a1a8/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6368616e2f466c7578446966665574696c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jlchan/FluxDiffUtils.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides utilities for flux differencing and computation of flux differencing Jacobians in terms of derivatives of flux functions. The code based in part on the preprint <a href="https://arxiv.org/abs/2006.07504" rel="nofollow">"Efficient computation of Jacobian matrices for entropy stable summation-by-parts schemes"</a>.</p>
<p dir="auto">The routines are meant to be fairly general, but specialize depending on whether the operators are general arrays or <code>SparseMatrixCSC</code> (to capitalize on sparsity).</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra
using FluxDiffUtils
using Test

# make 3-field solution
u = collect(LinRange(-1,1,4))
U = (u,u,u)

# define a flux fS
avg(x,y) = @. .5*(x+y)
function fS(UL,UR)
    uL,vL,wL = UL
    uR,vR,wR = UR
    Fx = avg(uL,uR),avg(vL,vR),avg(wL,wR)
    Fy = avg(uL,uR),avg(vL,vR),avg(wL,wR)
    return SVector{3}(Fx),SVector{3}(Fy)
end

# jacobians w.r.t. (uR,vR)
dfS(UL,UR) = ([.5 0 0; 0 .5 0; 0 0 .5], [.5 0 0; 0 .5 0; 0 0 .5])
A_list = (A-&gt;A+A').(ntuple(x-&gt;randn(4,4),2)) # make symmetric to check formula

rhs = hadamard_sum(A_list,fS,U)

jac = hadamard_jacobian(A_list, dfS, U)
# jac = hadamard_jacobian(A_list, :sym, df, U) # optimized version

jac11_exact = sum((A-&gt;.5*(A + diagm(vec(sum(A,dims=1))))).(A_list))
@test norm(jac11_exact-jac[1,1]) &lt; 1e-12

# converts tuple-block storage of jac to a global matrix
jac_global = blockcat(size(jac,2),jac)"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> FluxDiffUtils
<span class="pl-k">using</span> Test

<span class="pl-c"><span class="pl-c">#</span> make 3-field solution</span>
u <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>))
U <span class="pl-k">=</span> (u,u,u)

<span class="pl-c"><span class="pl-c">#</span> define a flux fS</span>
<span class="pl-en">avg</span>(x,y) <span class="pl-k">=</span> <span class="pl-c1">@.</span> .<span class="pl-c1">5</span><span class="pl-k">*</span>(x<span class="pl-k">+</span>y)
<span class="pl-k">function</span> <span class="pl-en">fS</span>(UL,UR)
    uL,vL,wL <span class="pl-k">=</span> UL
    uR,vR,wR <span class="pl-k">=</span> UR
    Fx <span class="pl-k">=</span> <span class="pl-c1">avg</span>(uL,uR),<span class="pl-c1">avg</span>(vL,vR),<span class="pl-c1">avg</span>(wL,wR)
    Fy <span class="pl-k">=</span> <span class="pl-c1">avg</span>(uL,uR),<span class="pl-c1">avg</span>(vL,vR),<span class="pl-c1">avg</span>(wL,wR)
    <span class="pl-k">return</span> <span class="pl-c1">SVector</span><span class="pl-c1">{3}</span>(Fx),<span class="pl-c1">SVector</span><span class="pl-c1">{3}</span>(Fy)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> jacobians w.r.t. (uR,vR)</span>
<span class="pl-en">dfS</span>(UL,UR) <span class="pl-k">=</span> ([.<span class="pl-c1">5</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> .<span class="pl-c1">5</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> .<span class="pl-c1">5</span>], [.<span class="pl-c1">5</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> .<span class="pl-c1">5</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> .<span class="pl-c1">5</span>])
A_list <span class="pl-k">=</span> (A<span class="pl-k">-&gt;</span>A<span class="pl-k">+</span>A<span class="pl-k">'</span>)<span class="pl-k">.</span>(<span class="pl-c1">ntuple</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">randn</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>),<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> make symmetric to check formula</span>

rhs <span class="pl-k">=</span> <span class="pl-c1">hadamard_sum</span>(A_list,fS,U)

jac <span class="pl-k">=</span> <span class="pl-c1">hadamard_jacobian</span>(A_list, dfS, U)
<span class="pl-c"><span class="pl-c">#</span> jac = hadamard_jacobian(A_list, :sym, df, U) # optimized version</span>

jac11_exact <span class="pl-k">=</span> <span class="pl-c1">sum</span>((A<span class="pl-k">-&gt;</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(A <span class="pl-k">+</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">vec</span>(<span class="pl-c1">sum</span>(A,dims<span class="pl-k">=</span><span class="pl-c1">1</span>)))))<span class="pl-k">.</span>(A_list))
<span class="pl-c1">@test</span> <span class="pl-c1">norm</span>(jac11_exact<span class="pl-k">-</span>jac[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-12</span>

<span class="pl-c"><span class="pl-c">#</span> converts tuple-block storage of jac to a global matrix</span>
jac_global <span class="pl-k">=</span> <span class="pl-c1">blockcat</span>(<span class="pl-c1">size</span>(jac,<span class="pl-c1">2</span>),jac)</pre></div>
</article></div>