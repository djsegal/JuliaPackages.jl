<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-proconiojl" class="anchor" aria-hidden="true" href="#proconiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProconIO.jl</h1>
<p dir="auto"><a href="https://lucifer1004.github.io/ProconIO.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://lucifer1004.github.io/ProconIO.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/lucifer1004/ProconIO.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/lucifer1004/ProconIO.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lucifer1004/ProconIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/466892d1fe22091dee682def8993786e7577d86bcfeea4100ef166ed6cd003b2/68747470733a2f2f636f6465636f762e696f2f67682f6c756369666572313030342f50726f636f6e494f2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/lucifer1004/ProconIO.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Inspired by <a href="https://github.com/statiolake/proconio-rs">proconio-rs</a>, I wrote this package to handle inputs for competitive programming contests.</p>
<p dir="auto">The usage is similar to <code>proconio-rs</code>. You need to specify the variable name and its structure.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input a = Int"><pre><span class="pl-c1">@input</span> a <span class="pl-k">=</span> Int</pre></div>
<p dir="auto">Multiple variables need to be nested in a block.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input begin
    a = Char
    b = Float32
    c = (Int, Char)
    d = String
    e = Bool
end"><pre><span class="pl-c1">@input</span> <span class="pl-k">begin</span>
    a <span class="pl-k">=</span> Char
    b <span class="pl-k">=</span> Float32
    c <span class="pl-k">=</span> (Int, Char)
    d <span class="pl-k">=</span> String
    e <span class="pl-k">=</span> Bool
<span class="pl-k">end</span></pre></div>
<p dir="auto">Arrays need to be specified in the form of <code>[type; shape]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input begin
    a = [Int; 3]
    b = [Float32; (2, 3)]
end"><pre><span class="pl-c1">@input</span> <span class="pl-k">begin</span>
    a <span class="pl-k">=</span> [Int; <span class="pl-c1">3</span>]
    b <span class="pl-k">=</span> [Float32; (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)]
<span class="pl-k">end</span></pre></div>
<p dir="auto">Complex structures can also be handled.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input a = [(Int, [Int; (2, 2)], Char); (2, 2)]"><pre><span class="pl-c1">@input</span> a <span class="pl-k">=</span> [(Int, [Int; (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)], Char); (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)]</pre></div>
<p dir="auto">In CP, the size of arrays is usually specified by the input itself. This can be handled by using variables already read in.</p>
<p dir="auto">Note that <a href="https://github.com/lucifer1004/ProconIO.jl">ProconIO.jl</a> follows Julia's column-major convention, instead of the row-major which is commonly used in CP. So you may need to swap the row and column indices when reading the array.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input begin
    n = Int
    m = Int
    v = [Int; (m, n)]
end"><pre><span class="pl-c1">@input</span> <span class="pl-k">begin</span>
    n <span class="pl-k">=</span> Int
    m <span class="pl-k">=</span> Int
    v <span class="pl-k">=</span> [Int; (m, n)]
<span class="pl-k">end</span></pre></div>
<p dir="auto">If you prefer a row-major flavor, you can use a vector of vectors instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input begin
    n = Int
    m = Int
    v = [[Int; m]; n]
end"><pre><span class="pl-c1">@input</span> <span class="pl-k">begin</span>
    n <span class="pl-k">=</span> Int
    m <span class="pl-k">=</span> Int
    v <span class="pl-k">=</span> [[Int; m]; n]
<span class="pl-k">end</span></pre></div>
<p dir="auto">Sometimes the input is a vector of variable-length vectors. This can be handled by leaving out the shape and reading it from the input instead. The following code reads in a vector of <code>n</code> variable-length vectors.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@input begin
    n = Int
    v = [[Int; ]; n]
end"><pre><span class="pl-c1">@input</span> <span class="pl-k">begin</span>
    n <span class="pl-k">=</span> Int
    v <span class="pl-k">=</span> [[Int; ]; n]
<span class="pl-k">end</span></pre></div>
</article></div>