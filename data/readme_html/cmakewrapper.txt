<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cmakewrapper" class="anchor" aria-hidden="true" href="#cmakewrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CMakeWrapper</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPackaging/CMakeWrapper.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaPackaging/CMakeWrapper.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaPackaging/CMakeWrapper.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/24156bd8f139fef1c7569bf9532b6e97df7996ac9a1e7bec561705faea11c278/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615061636b6167696e672f434d616b65577261707065722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaPackaging/CMakeWrapper.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a <a href="https://github.com/JuliaLang/BinDeps.jl">BinDeps.jl</a>-compatible <code>CMakeProcess</code> class for automatically building CMake dependencies.</p>
<p dir="auto">A modern version of CMake is installed using the <a href="https://github.com/JuliaPackaging/CMake.jl">CMake.jl</a> package; you can use
that package instead if you just want to run <code>cmake</code> by itself without using BinDeps.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;CMakeWrapper&quot;)"><pre class="notranslate"><code>julia&gt; Pkg.add("CMakeWrapper")
</code></pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">You can declare a <code>CMakeProcess</code> similarly to the way you would use the <code>Autotools</code> provider in BinDeps.jl. In your <code>deps/build.jl</code> file, this would look like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="provides(Sources,
    URI(source_url),
    dependency_name)

provides(BuildProcess, CMakeProcess(),
         dependency_name)"><pre class="notranslate"><code>provides(Sources,
    URI(source_url),
    dependency_name)

provides(BuildProcess, CMakeProcess(),
         dependency_name)
</code></pre></div>
<p dir="auto">where <code>source_url</code> and <code>dependency_name</code> are set elsewhere in your <code>build.jl</code>.</p>
<p dir="auto">You can also pass raw cmake options directly with the <code>cmake_args</code> flag:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="provides(BuildProcess, CMakeProcess(cmake_args=[&quot;-DCMAKE_BUILD_TYPE=Debug&quot;]),
         dependency_name)"><pre class="notranslate"><code>provides(BuildProcess, CMakeProcess(cmake_args=["-DCMAKE_BUILD_TYPE=Debug"]),
         dependency_name)
</code></pre></div>
<p dir="auto">If the high-level provider doesn't work for you, you can also use the lower-level <code>CMakeBuild</code>, analogous to the <code>AutotoolsDependency</code> in BinDeps.jl:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="CMakeBuild(srcdir=source_dir,  # where the CMakeLists.txt resides in your source
           builddir=build_dir,  # where the cmake build outputs should go
           prefix=install_prefix,  # desired install prefix
           libtarget=[library_name],  # name of the library being built
           installed_libpath=[path_to_intalled_library],  # expected installed library path
           cmake_args=[],  # additional cmake arguments
           targetname=&quot;install&quot;)  # build target to run (default: &quot;install&quot;)"><pre class="notranslate"><code>CMakeBuild(srcdir=source_dir,  # where the CMakeLists.txt resides in your source
           builddir=build_dir,  # where the cmake build outputs should go
           prefix=install_prefix,  # desired install prefix
           libtarget=[library_name],  # name of the library being built
           installed_libpath=[path_to_intalled_library],  # expected installed library path
           cmake_args=[],  # additional cmake arguments
           targetname="install")  # build target to run (default: "install")
</code></pre></div>
</article></div>