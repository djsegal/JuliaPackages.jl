<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cmakewrapper" class="anchor" aria-hidden="true" href="#cmakewrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CMakeWrapper</h1>
<p><a href="https://travis-ci.org/JuliaPackaging/CMakeWrapper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/68e8e5c873960b5d4cc19d11b49ca33c9b81c20b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615061636b6167696e672f434d616b65577261707065722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPackaging/CMakeWrapper.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/StevenGJohnson/cmakewrapper-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/38e1d33d7bd192ad8d804661554a5e024d74c8ae/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f78306b38647934376b617539396268723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/x0k8dy47kau99bhr?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaPackaging/CMakeWrapper.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/43965bfa3d230f9cf0dbef9175ad20aacc4cb77b/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615061636b6167696e672f434d616b65577261707065722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaPackaging/CMakeWrapper.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a <a href="https://github.com/JuliaLang/BinDeps.jl">BinDeps.jl</a>-compatible <code>CMakeProcess</code> class for automatically building CMake dependencies.</p>
<p>A modern version of CMake is installed using the <a href="https://github.com/JuliaPackaging/CMake.jl">CMake.jl</a> package; you can use
that package instead if you just want to run <code>cmake</code> by itself without using BinDeps.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<pre><code>julia&gt; Pkg.add("CMakeWrapper")
</code></pre>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>You can declare a <code>CMakeProcess</code> similarly to the way you would use the <code>Autotools</code> provider in BinDeps.jl. In your <code>deps/build.jl</code> file, this would look like:</p>
<pre><code>provides(Sources,
    URI(source_url),
    dependency_name)

provides(BuildProcess, CMakeProcess(),
         dependency_name)
</code></pre>
<p>where <code>source_url</code> and <code>dependency_name</code> are set elsewhere in your <code>build.jl</code>.</p>
<p>You can also pass raw cmake options directly with the <code>cmake_args</code> flag:</p>
<pre><code>provides(BuildProcess, CMakeProcess(cmake_args=["-DCMAKE_BUILD_TYPE=Debug"]),
         dependency_name)
</code></pre>
<p>If the high-level provider doesn't work for you, you can also use the lower-level <code>CMakeBuild</code>, analogous to the <code>AutotoolsDependency</code> in BinDeps.jl:</p>
<pre><code>CMakeBuild(srcdir=source_dir,  # where the CMakeLists.txt resides in your source
           builddir=build_dir,  # where the cmake build outputs should go
           prefix=install_prefix,  # desired install prefix
           libtarget=[library_name],  # name of the library being built
           installed_libpath=[path_to_intalled_library],  # expected installed library path
           cmake_args=[],  # additional cmake arguments
           targetname="install")  # build target to run (default: "install")
</code></pre>
</article></div>