<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-irkgausslegendrejl" class="anchor" aria-hidden="true" href="#irkgausslegendrejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IRKGaussLegendre.jl</h1>
<p><a href="https://github.com/SciML/IRKGaussLegendre.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/IRKGaussLegendre.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>IRKGaussLegendre.jl is an efficient Julia implementation of an implicit Runge-Kutta Gauss-Legendre 16th order method.
The method is fully integrated into the <strong>DifferentialEquations.jl ecosystem</strong> for high-performance high-precision
integration.</p>
<p>Required Julia 1.5 version or higher</p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>We present a Julia implementation of a 16th order Implicit Runge-Kutta integrator IRKGL16 (a 8-stage
IRK scheme based on Gauss-Legendre nodes) for <strong>high accuracy</strong> numerical integration of non-stiff
ODE systems. Our algorithm supports <strong>adaptive timesteping, mixed precision and multithreading</strong> to
solve problems fast and accuracy</p>
<p>The family of implicit Runge-Kutta schemes based on collocation with Gauss-Legendre nodes are
known to be symplectic and super-convergent (order 2s for the method with s internal nodes), and
thus very convenient for the high precision numerical integration of Hamiltonian systems with
constant time-step size. For <strong>non-stiff problems</strong>, implementations based on fixed-point iterations are
recommended</p>
<p>We believe that, for general (non-necessarily Hamiltonian) non-stiff ODE systems, such implicit
Runge-Kutta methods (implemented with fixed point iteration) can be very competitive for high
precision computations (for accuracy requirements that exceeds double precision arithmetic)</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package can be installed using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;IRKGaussLegendre.jl&quot;)
using IRKGaussLegendre
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>IRKGaussLegendre.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> IRKGaussLegendre</pre></div>
<h2><a id="user-content-example-burraus-problem-of-three-bodies" class="anchor" aria-hidden="true" href="#example-burraus-problem-of-three-bodies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Burrau's problem of three bodies</h2>
<p>Three point masses attract each other according to the Newtonian law of gravitation. The masses of the particles are
m1=3, m2=4, and m3=5; they are initially located at the apexes of a right triangle with sides 3, 4, and 5, so that the
corresponding masses and sides are opposite. The particles are free to move in the plane of the triangle and are at rest initially.</p>
<p>Szebehely, V. 1967, "Burrau's Problem of Three Bodies", Proceedings of the National Academy of Sciences of the United States of America, vol. 58, Issue 1, pp. 60-65 <a href="http://www.ucolick.org/~laugh/oxide/projects/szebehely1.ps" rel="nofollow">postscript file</a></p>
<h3><a id="user-content-step-1-defining--the-problem" class="anchor" aria-hidden="true" href="#step-1-defining--the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Step 1: Defining  the problem</h3>
<p>To solve this numerically, we define a problem type by giving it the equation, the initial
condition, and the timespan to solve over:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using IRKGaussLegendre
using Plots, LinearAlgebra, LaTeXStrings
"><pre><span class="pl-k">using</span> IRKGaussLegendre
<span class="pl-k">using</span> Plots, LinearAlgebra, LaTeXStrings</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function NbodyODE!(du,u,Gm,t)
     N = length(Gm)
     du[1,:,:] .= 0
     for i in 1:N
        qi = u[2,:,i]
        Gmi = Gm[i]
        du[2,:,i] = u[1,:,i]
        for j in (i+1):N
           qj = u[2,:,j]
           Gmj = Gm[j]
           qij = qi - qj
           auxij = (qij[1]*qij[1]+qij[2]*qij[2]+qij[3]*qij[3])^(-3/2)
           du[1,:,i] -= Gmj*auxij*qij
           du[1,:,j] += Gmi*auxij*qij
        end
     end

    return
end
"><pre><span class="pl-k">function</span> <span class="pl-en">NbodyODE!</span>(du,u,Gm,t)
     N <span class="pl-k">=</span> <span class="pl-c1">length</span>(Gm)
     du[<span class="pl-c1">1</span>,:,:] <span class="pl-k">.=</span> <span class="pl-c1">0</span>
     <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
        qi <span class="pl-k">=</span> u[<span class="pl-c1">2</span>,:,i]
        Gmi <span class="pl-k">=</span> Gm[i]
        du[<span class="pl-c1">2</span>,:,i] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>,:,i]
        <span class="pl-k">for</span> j <span class="pl-k">in</span> (i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>N
           qj <span class="pl-k">=</span> u[<span class="pl-c1">2</span>,:,j]
           Gmj <span class="pl-k">=</span> Gm[j]
           qij <span class="pl-k">=</span> qi <span class="pl-k">-</span> qj
           auxij <span class="pl-k">=</span> (qij[<span class="pl-c1">1</span>]<span class="pl-k">*</span>qij[<span class="pl-c1">1</span>]<span class="pl-k">+</span>qij[<span class="pl-c1">2</span>]<span class="pl-k">*</span>qij[<span class="pl-c1">2</span>]<span class="pl-k">+</span>qij[<span class="pl-c1">3</span>]<span class="pl-k">*</span>qij[<span class="pl-c1">3</span>])<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span>)
           du[<span class="pl-c1">1</span>,:,i] <span class="pl-k">-=</span> Gmj<span class="pl-k">*</span>auxij<span class="pl-k">*</span>qij
           du[<span class="pl-c1">1</span>,:,j] <span class="pl-k">+=</span> Gmi<span class="pl-k">*</span>auxij<span class="pl-k">*</span>qij
        <span class="pl-k">end</span>
     <span class="pl-k">end</span>

    <span class="pl-k">return</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Gm = [5, 4, 3]
N=length(Gm)
q=[1,-1,0,-2,-1,0,1,3,0]
v=zeros(size(q))
q0 = reshape(q,3,:)
v0 = reshape(v,3,:)
u0 = Array{Float64}(undef,2,3,N)
u0[1,:,:] = v0
u0[2,:,:] = q0
tspan = (0.0,63.0)
prob=ODEProblem(NbodyODE!,u0,tspan,Gm);
"><pre>Gm <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>]
N<span class="pl-k">=</span><span class="pl-c1">length</span>(Gm)
q<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>]
v<span class="pl-k">=</span><span class="pl-c1">zeros</span>(<span class="pl-c1">size</span>(q))
q0 <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(q,<span class="pl-c1">3</span>,:)
v0 <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(v,<span class="pl-c1">3</span>,:)
u0 <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,N)
u0[<span class="pl-c1">1</span>,:,:] <span class="pl-k">=</span> v0
u0[<span class="pl-c1">2</span>,:,:] <span class="pl-k">=</span> q0
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">63.0</span>)
prob<span class="pl-k">=</span><span class="pl-c1">ODEProblem</span>(NbodyODE!,u0,tspan,Gm);</pre></div>
<h3><a id="user-content-step-2-solving-the-problem" class="anchor" aria-hidden="true" href="#step-2-solving-the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Step 2: Solving the problem</h3>
<p>After defining a problem, you solve it using solve</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sol1=solve(prob,IRKGL16(),adaptive=true, reltol=1e-12, abstol=1e-12);
"><pre>sol1<span class="pl-k">=</span><span class="pl-c1">solve</span>(prob,<span class="pl-c1">IRKGL16</span>(),adaptive<span class="pl-k">=</span><span class="pl-c1">true</span>, reltol<span class="pl-k">=</span><span class="pl-c1">1e-12</span>, abstol<span class="pl-k">=</span><span class="pl-c1">1e-12</span>);</pre></div>
<h3><a id="user-content-step-3-analyzing-the-solution" class="anchor" aria-hidden="true" href="#step-3-analyzing-the-solution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Step 3: Analyzing the solution</h3>
<h4><a id="user-content-orbits" class="anchor" aria-hidden="true" href="#orbits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Orbits</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bodylist = [&quot;Body-1&quot;, &quot;Body-2&quot;, &quot;Body-3&quot;]
pl = plot(title=&quot;Burrau problem (Adaptive)&quot;,aspect_ratio=1)

ulist1 = sol1.u[1:end]
tlist1 = sol1.t[1:end]

for j = 1:3
 xlist  = map(u-&gt;u[2,1,j], ulist1)
 ylist  = map(u-&gt;u[2,2,j], ulist1)
 pl = plot!(xlist,ylist, label = bodylist[j])   
end  
plot(pl)
"><pre>bodylist <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Body-1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Body-2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Body-3<span class="pl-pds">"</span></span>]
pl <span class="pl-k">=</span> <span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Burrau problem (Adaptive)<span class="pl-pds">"</span></span>,aspect_ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)

ulist1 <span class="pl-k">=</span> sol1<span class="pl-k">.</span>u[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]
tlist1 <span class="pl-k">=</span> sol1<span class="pl-k">.</span>t[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]

<span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
 xlist  <span class="pl-k">=</span> <span class="pl-c1">map</span>(u<span class="pl-k">-&gt;</span>u[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,j], ulist1)
 ylist  <span class="pl-k">=</span> <span class="pl-c1">map</span>(u<span class="pl-k">-&gt;</span>u[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,j], ulist1)
 pl <span class="pl-k">=</span> <span class="pl-c1">plot!</span>(xlist,ylist, label <span class="pl-k">=</span> bodylist[j])   
<span class="pl-k">end</span>  
<span class="pl-c1">plot</span>(pl)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/Tutorials/BurrauOrbits.png"><img src="/Tutorials/BurrauOrbits.png" alt="Burrau problem" style="max-width:100%;"></a></p>
<h4><a id="user-content-step-size" class="anchor" aria-hidden="true" href="#step-size"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Step Size</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(xlabel=&quot;t&quot;, ylabel=&quot;step size&quot;,title=&quot;Adaptive step size&quot;)
steps1 =sol1.t[2:end]-sol1.t[1:end-1]
plot!(sol1.t[2:end],steps1)
"><pre><span class="pl-c1">plot</span>(xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>step size<span class="pl-pds">"</span></span>,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Adaptive step size<span class="pl-pds">"</span></span>)
steps1 <span class="pl-k">=</span>sol1<span class="pl-k">.</span>t[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">-</span>sol1<span class="pl-k">.</span>t[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">plot!</span>(sol1<span class="pl-k">.</span>t[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>],steps1)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/Tutorials/BurrauStepSize.png"><img src="/Tutorials/BurrauStepSize.png" alt="Burrau problem" style="max-width:100%;"></a></p>
<h4><a id="user-content-energy-error" class="anchor" aria-hidden="true" href="#energy-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Energy-Error</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function NbodyEnergy(u,Gm)
     N = length(Gm)
     zerouel = zero(eltype(u))
     T = zerouel
     U = zerouel
     for i in 1:N
        qi = u[2,:,i]
        vi = u[1,:,i]
        Gmi = Gm[i]
        T += Gmi*(vi[1]*vi[1]+vi[2]*vi[2]+vi[3]*vi[3])
        for j in (i+1):N
           qj = u[2,:,j]  
           Gmj = Gm[j]
           qij = qi - qj
           U -= Gmi*Gmj/norm(qij)
        end
     end
    1/2*T + U
end
"><pre><span class="pl-k">function</span> <span class="pl-en">NbodyEnergy</span>(u,Gm)
     N <span class="pl-k">=</span> <span class="pl-c1">length</span>(Gm)
     zerouel <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(u))
     T <span class="pl-k">=</span> zerouel
     U <span class="pl-k">=</span> zerouel
     <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
        qi <span class="pl-k">=</span> u[<span class="pl-c1">2</span>,:,i]
        vi <span class="pl-k">=</span> u[<span class="pl-c1">1</span>,:,i]
        Gmi <span class="pl-k">=</span> Gm[i]
        T <span class="pl-k">+=</span> Gmi<span class="pl-k">*</span>(vi[<span class="pl-c1">1</span>]<span class="pl-k">*</span>vi[<span class="pl-c1">1</span>]<span class="pl-k">+</span>vi[<span class="pl-c1">2</span>]<span class="pl-k">*</span>vi[<span class="pl-c1">2</span>]<span class="pl-k">+</span>vi[<span class="pl-c1">3</span>]<span class="pl-k">*</span>vi[<span class="pl-c1">3</span>])
        <span class="pl-k">for</span> j <span class="pl-k">in</span> (i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>N
           qj <span class="pl-k">=</span> u[<span class="pl-c1">2</span>,:,j]  
           Gmj <span class="pl-k">=</span> Gm[j]
           qij <span class="pl-k">=</span> qi <span class="pl-k">-</span> qj
           U <span class="pl-k">-=</span> Gmi<span class="pl-k">*</span>Gmj<span class="pl-k">/</span><span class="pl-c1">norm</span>(qij)
        <span class="pl-k">end</span>
     <span class="pl-k">end</span>
    <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span>T <span class="pl-k">+</span> U
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="setprecision(BigFloat, 256)
u0Big=BigFloat.(u0)
GmBig=BigFloat.(Gm)

E0=NbodyEnergy(u0Big,GmBig)
ΔE1 = map(x-&gt;NbodyEnergy(BigFloat.(x),GmBig), sol1.u)./E0.-1
plot(title=&quot;Energy error&quot;, xlabel=&quot;t&quot;, ylabel=L&quot;\Delta E&quot;)
plot!(sol1.t,log10.(abs.(ΔE1)), label=&quot;&quot;)
"><pre><span class="pl-c1">setprecision</span>(BigFloat, <span class="pl-c1">256</span>)
u0Big<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>.(u0)
GmBig<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>.(Gm)

E0<span class="pl-k">=</span><span class="pl-c1">NbodyEnergy</span>(u0Big,GmBig)
ΔE1 <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">NbodyEnergy</span>(<span class="pl-c1">BigFloat</span>.(x),GmBig), sol1<span class="pl-k">.</span>u)<span class="pl-k">./</span>E0<span class="pl-k">.-</span><span class="pl-c1">1</span>
<span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Energy error<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span><span class="pl-cce">\D</span>elta E<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(sol1<span class="pl-k">.</span>t,<span class="pl-c1">log10</span>.(<span class="pl-c1">abs</span>.(ΔE1)), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/Tutorials/BurrauEnergyError.png"><img src="/Tutorials/BurrauEnergyError.png" alt="Burrau problem" style="max-width:100%;"></a></p>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Examples</h2>
<p><a href="https://github.com/SciML/IRKGaussLegendre.jl/tree/master/Juliacon%202020">JuliaCon2020</a></p>
<h2><a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation details</h2>
<p><a href="https://doi.org/10.1007/s11075-017-0287-z" rel="nofollow">Antoñana, M., Makazaga, J., Murua, Ander. "Reducing and monitoring round-off error propagation
for symplectic implicit Runge-Kutta schemes."  Numerical Algorithms. 2017.</a></p>
</article></div>