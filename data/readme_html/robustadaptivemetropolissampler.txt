<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-robustadaptivemetropolissampler" class="anchor" aria-hidden="true" href="#robustadaptivemetropolissampler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RobustAdaptiveMetropolisSampler</h1>
<p><a href="https://www.repostatus.org/#wip" rel="nofollow"><img src="https://camo.githubusercontent.com/fab25c6424d2b4ea02669e7a51a2d5abc4d1ab7f/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f7769702e737667" alt="Project Status: WIP – Initial development is in progress, but there has not yet been a stable, usable release suitable for the public." data-canonical-src="https://www.repostatus.org/badges/latest/wip.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/anthofflab/RobustAdaptiveMetropolisSampler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3eb4478f2e9e1bdcb732055f484175bfc997899f/68747470733a2f2f7472617669732d63692e6f72672f616e74686f66666c61622f526f6275737441646170746976654d6574726f706f6c697353616d706c65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/anthofflab/RobustAdaptiveMetropolisSampler.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/anthofflab/robustadaptivemetropolissampler-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e32261b0fc7a9281c545659edcbee09bce8a00d2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f363672306c66386b63696d36666d306f2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/66r0lf8kcim6fm0o/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/anthofflab/RobustAdaptiveMetropolisSampler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/41910ce9bd46443a4114c0b952a8dd118b65f401/68747470733a2f2f636f6465636f762e696f2f67682f616e74686f66666c61622f526f6275737441646170746976654d6574726f706f6c697353616d706c65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/anthofflab/RobustAdaptiveMetropolisSampler.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This package implements the robust adaptive metropolis (RAM) sampler described in <a href="https://doi.org/10.1007/s11222-011-9269-5" rel="nofollow">Vihola (2012)</a> for the <a href="https://www.julialang.org" rel="nofollow">Julia language</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The <code>RAM_sample</code> function runs a MCMC sampler on a given log target function. The arguments for the functions are as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">RAM_sample</span>(logtarget, x0, M0, n; opt_α<span class="pl-k">=</span><span class="pl-c1">0.234</span>, γ<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span>, q<span class="pl-k">=</span><span class="pl-c1">Normal</span>(), show_progress<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<ul>
<li><code>logtarget</code> this must be a callable that accepts one parameter which is a vector of values to evaluate the log target function on. The function passed must return the log value of the target function.</li>
<li><code>x0</code> is a vector of initial values at which the sampler will start the MCMC algorithm. The length of the vector controls the dimensionality of the problem.</li>
<li><code>M0</code> is the initial co-variance matrix that the sampler should use to scale the new proposal. <code>M0</code> can be passed in many different ways:</li>
</ul>
<ol>
<li>a scalar: an isotropic covariance matrix with diagonal elements <code>abs2(M0)</code>.</li>
<li>an <code>AbstractVector</code>: a diagonal covariance matrix with diagonal elements <code>abs2.(M0)</code>.</li>
<li>an <code>AbstractMatrix</code> (or a <code>Diagnoal</code> or an <code>AbstractPDMat</code>): a value of any of these types will be interpreted directly as the covariance matrix.</li>
</ol>
<ul>
<li><code>n</code>: the number of elements to be sampled, i.e. the length of the chain.</li>
<li><code>opt_α</code>: the target acceptance rate the algorithm is trying to hit.</li>
<li><code>γ</code>: a parameter for the computation of the step size sequence.</li>
<li><code>q</code>: the proposal distribution.</li>
<li><code>show_progress</code>: a flag that controls whether a progress bar is shown.</li>
</ul>
<p>The function returns a <code>NamedTuple</code> with three elements:</p>
<ul>
<li><code>chain</code>: a <code>Matrix</code> with the result chain. Each row is one sample, the columns correspond to the dimensions of the problem.</li>
<li><code>acceptance_rate</code>: the acceptance rate for the overall chain.</li>
<li><code>M</code>: the last co-variance matrix used in the algorithm.</li>
</ul>
<p>A simple example of using the function is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributions, RobustAdaptiveMetropolisSampler

chain, accrate, S <span class="pl-k">=</span> <span class="pl-c1">RAM_sample</span>(
    p <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">3.</span>, <span class="pl-c1">2</span>), p[<span class="pl-c1">1</span>]), <span class="pl-c"><span class="pl-c">#</span> log target function</span>
    [<span class="pl-c1">0.</span>],                             <span class="pl-c"><span class="pl-c">#</span> Initial value</span>
    <span class="pl-c1">0.5</span>,                              <span class="pl-c"><span class="pl-c">#</span> Use an isotropic covariance matrix with diagonal elements abs2(0.5)</span>
    <span class="pl-c1">100_000</span>                           <span class="pl-c"><span class="pl-c">#</span> Number of runs</span>
)</pre></div>
</article></div>