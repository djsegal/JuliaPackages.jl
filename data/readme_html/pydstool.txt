<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pydstooljl" class="anchor" aria-hidden="true" href="#pydstooljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PyDSTool.jl</h1>
<p><a href="https://travis-ci.org/SciML/PyDSTool.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/48c370fd8e3fdaaa88b108deaf23e4045e8ad8125dd65244ac5e25307c74bb7e/68747470733a2f2f7472617669732d63692e6f72672f5363694d4c2f50794453546f6f6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SciML/PyDSTool.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/pydstool-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a3b5da9eee1249e76bdf774090359806d5cd8afdbb23491d3d6a49fadf17be9b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f716769316d34397275746875336268353f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/qgi1m49ruthu3bh5?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/SciML/PyDSTool.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da93789a8ab69fcfb0c2157dcec3c4bca9960644930e7da079c71a9e1be9c67e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5363694d4c2f50794453546f6f6c2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SciML/PyDSTool.jl/badge.svg" style="max-width:100%;"></a>
<a href="http://codecov.io/github/SciML/PyDSTool.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7fdf9f5aa2a79b30c199659f0b26ef9656d71385058b8231e46da64cb5877de9/687474703a2f2f636f6465636f762e696f2f6769746875622f5363694d4c2f50794453546f6f6c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SciML/PyDSTool.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>PyDSTool.jl is a wrapper for the PyDSTool Python library for analysis of dynamical
systems. This wrapper includes three parts:</p>
<ol>
<li>Installation and direct access to PyDSTool</li>
<li>A low-level development API and provides some functionality to make directly dealing
with the library a little bit easier, but still requires knowledge of PyDSTool itself.</li>
<li>A high-level API for usage with DifferentialEquations</li>
</ol>
<p>The tests show how to use the functionality.
It is used as an addon in the DifferentialEquations.jl ecosystem. It is recommended
that users use this functionality through <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<p>Bifurcation analysis is provided by the wrapper package PyDSTool.jl, which
wraps the functionality of PyDSTool. The the package has an interface for
directly using PyDSTool itself, included is a higher level interface that
makes these tools compatible with more standard JuliaDiffEq types.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This functionality does not come standard with DifferentialEquations.jl.
To use this functionality, you must install PyDSTool.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add PyDSTool
using PyDSTool
"><pre>]add PyDSTool
<span class="pl-k">using</span> PyDSTool</pre></div>
<h2><a id="user-content-calcium-bifurcation-tutorial" class="anchor" aria-hidden="true" href="#calcium-bifurcation-tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Calcium Bifurcation Tutorial</h2>
<p>In this tutorial we will show how to do some simple bifurcation plots. We will
follow the PyDSTool tutorial <a href="https://pydstool.github.io/PyDSTool/Tutorial/Tutorial_Calcium.html" rel="nofollow">for the calcium channel model</a>
and re-create the results using the wrapped functionality.</p>
<h3><a id="user-content-specification-of-a-model" class="anchor" aria-hidden="true" href="#specification-of-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Specification of a Model</h3>
<p>We will specify the model using a ParameterizedFunction:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ParameterizedFunctions
f = @ode_def begin
  dv = ( i + gl * (vl - v) - gca * 0.5 * (1 + tanh( (v-v1)/v2 )) * (v-vca) )/c
  dw = v-w
end vl vca i gl gca c v1 v2
"><pre><span class="pl-k">using</span> ParameterizedFunctions
f <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> <span class="pl-k">begin</span>
  dv <span class="pl-k">=</span> ( i <span class="pl-k">+</span> gl <span class="pl-k">*</span> (vl <span class="pl-k">-</span> v) <span class="pl-k">-</span> gca <span class="pl-k">*</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">tanh</span>( (v<span class="pl-k">-</span>v1)<span class="pl-k">/</span>v2 )) <span class="pl-k">*</span> (v<span class="pl-k">-</span>vca) )<span class="pl-k">/</span>c
  dw <span class="pl-k">=</span> v<span class="pl-k">-</span>w
<span class="pl-k">end</span> vl vca i gl gca c v1 v2</pre></div>
<p>(Note that using PyDSTool requires use of the <code>@ode_def</code> macro). Next to build the ODE we need an initial condition and a starting timepoint.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="u0 = [0;0]
tspan = [0;30]
p = [-60,120,0.0,2,4,20,-1.2,18]
"><pre>u0 <span class="pl-k">=</span> [<span class="pl-c1">0</span>;<span class="pl-c1">0</span>]
tspan <span class="pl-k">=</span> [<span class="pl-c1">0</span>;<span class="pl-c1">30</span>]
p <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">60</span>,<span class="pl-c1">120</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">20</span>,<span class="pl-k">-</span><span class="pl-c1">1.2</span>,<span class="pl-c1">18</span>]</pre></div>
<p>Then we use the following command to build the PyDSTool ODE:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dsargs = build_ode(f,u0,tspan,p)
"><pre>dsargs <span class="pl-k">=</span> <span class="pl-c1">build_ode</span>(f,u0,tspan,p)</pre></div>
<p>Now we need to build the continuation type. Following the setup of PyDSTool's
tutorial, we need to start near the steady state. The commands translate as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ode = ds[:Generator][:Vode_ODEsystem](dsargs)
ode[:set](pars = Dict(&quot;i&quot;=&gt;-220))
ode[:set](ics  = Dict(&quot;v&quot;=&gt;-170))
PC = ds[:ContClass](ode)
"><pre>ode <span class="pl-k">=</span> ds[<span class="pl-c1">:Generator</span>][<span class="pl-c1">:Vode_ODEsystem</span>](dsargs)
ode[<span class="pl-c1">:set</span>](pars <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>i<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">220</span>))
ode[<span class="pl-c1">:set</span>](ics  <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>v<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">170</span>))
PC <span class="pl-k">=</span> ds[<span class="pl-c1">:ContClass</span>](ode)</pre></div>
<p>Once we have the continuation type, we can call the <code>bifurcation_curve</code> function.
Instead of building the args into some object one-by-one, we simply make a
function call with keyword arguments. Using the same arguments as the PyDSTool
tutorial:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bif = bifurcation_curve(PC,&quot;EP-C&quot;,[&quot;i&quot;],
                        max_num_points=450,
                        max_stepsize=2,min_stepsize=1e-5,
                        stepsize=2e-2,loc_bif_points=&quot;all&quot;,
                        save_eigen=true,name=&quot;EQ1&quot;,
                        print_info=true,calc_stab=true)
"><pre>bif <span class="pl-k">=</span> <span class="pl-c1">bifurcation_curve</span>(PC,<span class="pl-s"><span class="pl-pds">"</span>EP-C<span class="pl-pds">"</span></span>,[<span class="pl-s"><span class="pl-pds">"</span>i<span class="pl-pds">"</span></span>],
                        max_num_points<span class="pl-k">=</span><span class="pl-c1">450</span>,
                        max_stepsize<span class="pl-k">=</span><span class="pl-c1">2</span>,min_stepsize<span class="pl-k">=</span><span class="pl-c1">1e-5</span>,
                        stepsize<span class="pl-k">=</span><span class="pl-c1">2e-2</span>,loc_bif_points<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span>,
                        save_eigen<span class="pl-k">=</span><span class="pl-c1">true</span>,name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>EQ1<span class="pl-pds">"</span></span>,
                        print_info<span class="pl-k">=</span><span class="pl-c1">true</span>,calc_stab<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>This returns a <code>BifurcationCurve</code> type. Important fields of this type are:</p>
<ul>
<li><code>points</code>: the values along the curve</li>
<li><code>special_points</code>: the values for the bifurcation points</li>
<li><code>stab</code>: an array which gives the stability of each point along the curve.
<code>"S"</code> is for stable, <code>N</code> is for neutral, and <code>U</code> is for unstable.</li>
</ul>
<p>Instead of using the fields directly, we will use the plot recipe. The plot
recipe requires you give the <code>x,y</code> coordinates to plot. Here we will plot
it in the <code>(i,v)</code> plane:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
plot(bif,(:i,:v))
"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(bif,(<span class="pl-c1">:i</span>,<span class="pl-c1">:v</span>))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/67870184-d1cfac80-fb04-11e9-9957-91470a69ead1.png"><img src="https://user-images.githubusercontent.com/1814174/67870184-d1cfac80-fb04-11e9-9957-91470a69ead1.png" alt="bifurcation_plot" style="max-width:100%;"></a></p>
<h3><a id="user-content-bifucation-curve-function-definition" class="anchor" aria-hidden="true" href="#bifucation-curve-function-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bifucation Curve Function Definition</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function bifurcation_curve(PC,bif_type,freepars;max_num_points=450,
                          max_stepsize=2,min_stepsize=1e-5,
                          stepsize=2e-2,loc_bif_points=&quot;all&quot;,
                          save_eigen=true,name=&quot;DefaultName&quot;,
                          print_info=true,calc_stab=true,
                          var_tol = 1e-6, func_tol = 1e-6,
                          test_tol = 1e-4,
                          initpoint=nothing,solver_sequence=[:forward])
"><pre><span class="pl-k">function</span> <span class="pl-en">bifurcation_curve</span>(PC,bif_type,freepars;max_num_points<span class="pl-k">=</span><span class="pl-c1">450</span>,
                          max_stepsize<span class="pl-k">=</span><span class="pl-c1">2</span>,min_stepsize<span class="pl-k">=</span><span class="pl-c1">1e-5</span>,
                          stepsize<span class="pl-k">=</span><span class="pl-c1">2e-2</span>,loc_bif_points<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span>,
                          save_eigen<span class="pl-k">=</span><span class="pl-c1">true</span>,name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>DefaultName<span class="pl-pds">"</span></span>,
                          print_info<span class="pl-k">=</span><span class="pl-c1">true</span>,calc_stab<span class="pl-k">=</span><span class="pl-c1">true</span>,
                          var_tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>, func_tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>,
                          test_tol <span class="pl-k">=</span> <span class="pl-c1">1e-4</span>,
                          initpoint<span class="pl-k">=</span><span class="pl-c1">nothing</span>,solver_sequence<span class="pl-k">=</span>[<span class="pl-c1">:forward</span>])</pre></div>
</article></div>