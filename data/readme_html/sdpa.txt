<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sdpa" class="anchor" aria-hidden="true" href="#sdpa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SDPA</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaOpt/SDPA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85bd71910f3f3a92654b77eeb0ef675289f29d5a/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f534450412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/SDPA.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.1285668" rel="nofollow"><img src="https://camo.githubusercontent.com/d87dfb1fc75fcc51da2e34060a4d22ffbcf51c90/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313238353636382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.1285668.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://coveralls.io/github/blegat/SDPA.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e6e76527df807a1d3827d09aae9d3a9c1464f2ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f626c656761742f534450412e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coveralls branch" data-canonical-src="https://coveralls.io/repos/blegat/SDPA.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/JuliaOpt/SDPA.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/aab2e7fbaa79944b44568e7c930d7594fda90151/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614f70742f534450412e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaOpt/SDPA.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p>Julia wrapper to <a href="http://sdpa.sourceforge.net/" rel="nofollow">SDPA</a> semidefinite programming solver.
Write <code>SDPASolver()</code> to use this solver with <a href="github.com/JuliaOpt/JuMP.jl">JuMP</a>, <a href="https://github.com/JuliaOpt/Convex.jl">Convex</a> or any other package using the <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> interface.</p>
<h2><a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parameters</h2>
<p>SDPA has 10 parameters that can be set separately using, e.g. <code>SDPASolver(MaxIteration=100)</code> to set the parameter with name <code>MaxIteration</code> at the value 100.
SDPA has 3 modes that give values to all 10 parameters. By default, we put SDPA in the <code>PARAMETER_DEFAULT</code> mode.
The three modes are as follow:</p>
<table>
<thead>
<tr>
<th>Mode</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>Default</td>
<td><code>PARAMETER_DEFAULT</code></td>
</tr>
<tr>
<td>Fast</td>
<td><code>PARAMETER_UNSTABLE_BUT_FAST</code></td>
</tr>
<tr>
<td>Slow</td>
<td><code>PARAMETER_STABLE_BUT_SLOW</code></td>
</tr>
</tbody>
</table>
<p>To set the SDPA solver in a mode you do, e.g. <code>SDPASolver(Mode=PARAMETER_UNSTABLE_BUT_FAST)</code>.
Note that the parameters are set in the order they are given so you can set it in a mode and then modify one parameter from this mode, e.g. <code>SDPASolver(Mode=PARAMETER_UNSTABLE_BUT_FAST, MaxIteration=1000)</code>.</p>
<p>Note that <code>PARAMETER_UNSTABLE_BUT_FAST</code> appears to be the most reliable of the three modes, at least in some cases; e.g. it gives the fewest failures on Convex.jl's tests (see <a href="https://github.com/JuliaOpt/SDPA.jl/issues/17#issuecomment-502045684">#17</a>).</p>
<p>The following table gives the default value for each parameter.</p>
<table>
<thead>
<tr>
<th>Parameter name</th>
<th>Default</th>
<th>Fast</th>
<th>Slow</th>
</tr>
</thead>
<tbody>
<tr>
<td>MaxIteration</td>
<td>100</td>
<td>100</td>
<td>1000</td>
</tr>
<tr>
<td>EpsilonStar</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
</tr>
<tr>
<td>LambdaStar</td>
<td>1.0e+2</td>
<td>1.0e+2</td>
<td>1.0e+4</td>
</tr>
<tr>
<td>OmegaStar</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
</tr>
<tr>
<td>LowerBound</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
</tr>
<tr>
<td>UpperBound</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
</tr>
<tr>
<td>BetaStar</td>
<td>0.1</td>
<td>0.01</td>
<td>0.1</td>
</tr>
<tr>
<td>BetaBar</td>
<td>0.2</td>
<td>0.02</td>
<td>0.3</td>
</tr>
<tr>
<td>GammaStar</td>
<td>0.9</td>
<td>0.95</td>
<td>0.8</td>
</tr>
<tr>
<td>EpsilonDash</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code> and so can be installed with <code>Pkg.add</code>.</p>
<pre><code>julia&gt; import Pkg; Pkg.add("SDPA")
</code></pre>
<p>SDPA.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the SDPA binaries for Linux and OS X. This should work for both the official Julia binaries from <code>https://julialang.org/downloads/</code> and source-builds that used <code>gcc</code> versions 7 or 8.</p>
<p><em>NOTE:</em> If you see an error similar to</p>
<div class="highlight highlight-source-julia"><pre>INFO<span class="pl-k">:</span> Precompiling <span class="pl-k">module</span> GZip.
ERROR<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> error compiling anonymous<span class="pl-k">:</span> could not load library <span class="pl-s"><span class="pl-pds">"</span>libz<span class="pl-pds">"</span></span></pre></div>
<p>please see <a href="https://github.com/JuliaIO/GZip.jl/issues/54">GZip.jl#54</a> or <a href="https://github.com/FluxML/Flux.jl/issues/343">Flux.jl#343</a>. In particular, in Ubuntu this issue may be resolved by running</p>
<div class="highlight highlight-source-shell"><pre>sudo apt-get install zlib1g-dev</pre></div>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>To install custom built SDPA binaries set the environmental variable <code>JULIA_SDPA_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("SDPA")</code>. For instance, if the libraries are installed in <code>/opt/lib</code>, then call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_SDPA_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>SDPA<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install, set <code>JULIA_SDPA_LIBRARY_PATH</code> before calling <code>import Pkg; Pkg.add("SDPA")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_SDPA_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("SDPA")</code>.</p>
</article></div>