<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sdpajl" class="anchor" aria-hidden="true" href="#sdpajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SDPA.jl</h1>
<p dir="auto"><a href="https://github.com/jump-dev/SDPA.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/SDPA.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jump-dev/SDPA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47d478128021036c7d1c554a161cff4dbc90f3059a9a8d3765256b8baaa49564/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f534450412e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/SDPA.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jump-dev/SDPA.jl">SDPA.jl</a> is a wrapper for the
<a href="http://sdpa.sourceforge.net/" rel="nofollow">SDPA</a> semidefinite programming solver in double
precision floating point arithmetic.</p>
<h2 dir="auto"><a id="user-content-affiliation" class="anchor" aria-hidden="true" href="#affiliation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Affiliation</h2>
<p dir="auto">This wrapper is maintained by the JuMP community and is not a product of the
SDPA developers.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><code>SDPA.jl</code> is licensed under the <a href="https://github.com/jump-dev/SDPA.jl/blob/master/LICENSE.md">MIT License</a>.</p>
<p dir="auto">The underlying solver, <a href="http://sdpa.sourceforge.net/" rel="nofollow">SDPA</a> is licensed
under the <a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html" rel="nofollow">GPL v2 license</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install SDPA using <code>Pkg.add</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;SDPA&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SDPA<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In addition to installing the SDPA.jl package, this will also download and
install the SDPA binaries. (You do not need to install SDPA separately.)</p>
<p dir="auto">If you see an error similar to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="INFO: Precompiling module GZip.
ERROR: LoadError: LoadError: error compiling anonymous: could not load library &quot;libz&quot;"><pre>INFO<span class="pl-k">:</span> Precompiling <span class="pl-k">module</span> GZip.
ERROR<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> error compiling anonymous<span class="pl-k">:</span> could not load library <span class="pl-s"><span class="pl-pds">"</span>libz<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">please see <a href="https://github.com/JuliaIO/GZip.jl/issues/54" data-hovercard-type="issue" data-hovercard-url="/JuliaIO/GZip.jl/issues/54/hovercard">GZip.jl#54</a> or <a href="https://github.com/FluxML/Flux.jl/issues/343" data-hovercard-type="issue" data-hovercard-url="/FluxML/Flux.jl/issues/343/hovercard">Flux.jl#343</a>. In particular, in Ubuntu this issue may be resolved by running</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo apt-get install zlib1g-dev"><pre>sudo apt-get install zlib1g-dev</pre></div>
<p dir="auto">See <a href="https://github.com/ericphanson/SDPAFamily.jl">SDPAFamily</a> for the other
solvers, SDPA-GMP, SDPA-DD, and SDPA-QD of the family.</p>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, SDPA
model = Model(SDPA.Optimizer)
set_attribute(model, &quot;Mode&quot;, SDPA.PARAMETER_DEFAULT)"><pre><span class="pl-k">using</span> JuMP, SDPA
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SDPA<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Mode<span class="pl-pds">"</span></span>, SDPA<span class="pl-k">.</span>PARAMETER_DEFAULT)</pre></div>
<h2 dir="auto"><a id="user-content-mathoptinterface-api" class="anchor" aria-hidden="true" href="#mathoptinterface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface API</h2>
<p dir="auto">The SDPA optimizer supports the following constraints and attributes.</p>
<p dir="auto">List of supported objective functions:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}</code></a></li>
</ul>
<p dir="auto">List of supported variable types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.Nonnegatives</code></a></li>
<li><a href="@ref"><code>MOI.PositiveSemidefiniteConeTriangle</code></a></li>
</ul>
<p dir="auto">List of supported constraint types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
</ul>
<p dir="auto">List of supported model attributes:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveSense()</code></a></li>
</ul>
<h2 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h2>
<p dir="auto">SDPA has three modes that give default value to all ten parameters.</p>
<p dir="auto">The following table gives the default values for each parameter and mode.</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th><code>PARAMETER_DEFAULT</code></th>
<th><code>PARAMETER_UNSTABLE_BUT_FAST</code></th>
<th><code>PARAMETER_STABLE_BUT_SLOW</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>MaxIteration</td>
<td>100</td>
<td>100</td>
<td>1000</td>
</tr>
<tr>
<td>EpsilonStar</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
</tr>
<tr>
<td>LambdaStar</td>
<td>1.0e+2</td>
<td>1.0e+2</td>
<td>1.0e+4</td>
</tr>
<tr>
<td>OmegaStar</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
</tr>
<tr>
<td>LowerBound</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
</tr>
<tr>
<td>UpperBound</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
<td>1.0e+5</td>
</tr>
<tr>
<td>BetaStar</td>
<td>0.1</td>
<td>0.01</td>
<td>0.1</td>
</tr>
<tr>
<td>BetaBar</td>
<td>0.2</td>
<td>0.02</td>
<td>0.3</td>
</tr>
<tr>
<td>GammaStar</td>
<td>0.9</td>
<td>0.95</td>
<td>0.8</td>
</tr>
<tr>
<td>EpsilonDash</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
<td>1.0e-7</td>
</tr>
</tbody>
</table>
<p dir="auto">By default, we put SDPA in the <code>SDPA.PARAMETER_DEFAULT</code> mode.</p>
<p dir="auto">Change the mode using the <code>"Mode"</code> option:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, SDPA
model = Model(SDPA.Optimizer)
set_attribute(model, &quot;Mode&quot;, SDPA.PARAMETER_STABLE_BUT_SLOW)"><pre><span class="pl-k">using</span> JuMP, SDPA
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SDPA<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Mode<span class="pl-pds">"</span></span>, SDPA<span class="pl-k">.</span>PARAMETER_STABLE_BUT_SLOW)</pre></div>
<p dir="auto">Note that the parameters are set in the order they are given, so you can set
a mode and then modify parameters from this mode.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, SDPA
model = Model(SDPA.Optimizer)
set_attribute(model, &quot;Mode&quot;, SDPA.PARAMETER_STABLE_BUT_SLOW)
set_attribute(model, &quot;MaxIteration&quot;, 100)"><pre><span class="pl-k">using</span> JuMP, SDPA
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SDPA<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Mode<span class="pl-pds">"</span></span>, SDPA<span class="pl-k">.</span>PARAMETER_STABLE_BUT_SLOW)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>MaxIteration<span class="pl-pds">"</span></span>, <span class="pl-c1">100</span>)</pre></div>
<p dir="auto">The choice of parameter mode has a large impact on the performance and stability
of SDPA, and not necessarily in the way implied by the names of the modes; for
example, <code>PARAMETER_UNSTABLE_BUT_FAST</code> can be more stable than the other modes
for some problems. You should try each mode to see how it performs on your
specific problem. See <a href="https://github.com/jump-dev/SDPA.jl/issues/17" data-hovercard-type="issue" data-hovercard-url="/jump-dev/SDPA.jl/issues/17/hovercard">SDPA.jl#17</a>
for more details.</p>
</article></div>