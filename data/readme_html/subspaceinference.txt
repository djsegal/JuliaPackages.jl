<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-subspace-inference-for-bayesian-deep-learning" class="anchor" aria-hidden="true" href="#subspace-inference-for-bayesian-deep-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subspace Inference for Bayesian Deep Learning</h1>
<p dir="auto"><a href="https://efmanu.github.io/SubspaceInference.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package aims to generate the subspace and subspace inferences.</p>
<p dir="auto">This work is implemented by referring the folloing publication:</p>
<p dir="auto"><em>Izmailov, P., Maddox, W. J., Kirichenko, P., Garipov, T., Vetrov, D., &amp; Wilson, A. G. (2020, August). Subspace
inference for Bayesian deep learning. In Uncertainty in Artificial Intelligence (pp. 1169-1179). PMLR.</em></p>
<h2 dir="auto"><a id="user-content-subspace-inference" class="anchor" aria-hidden="true" href="#subspace-inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subspace Inference</h2>
<p dir="auto">To generate the uncertainty in machine learing models using subspace inference method</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="subspace_inference(model, cost, data, opt; callback =()-&gt;(return 0),
	σ_z = 1.0,	σ_m = 1.0, σ_p = 1.0,
	itr =1000, T=25, c=1, M=20, print_freq=1)"><pre><span class="pl-c1">subspace_inference</span>(model, cost, data, opt; callback <span class="pl-k">=</span>()<span class="pl-k">-&gt;</span>(<span class="pl-k">return</span> <span class="pl-c1">0</span>),
	σ_z <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,	σ_m <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, σ_p <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
	itr <span class="pl-k">=</span><span class="pl-c1">1000</span>, T<span class="pl-k">=</span><span class="pl-c1">25</span>, c<span class="pl-k">=</span><span class="pl-c1">1</span>, M<span class="pl-k">=</span><span class="pl-c1">20</span>, print_freq<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<h1 dir="auto"><a id="user-content-input-arguments" class="anchor" aria-hidden="true" href="#input-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Input Arguments</h1>
<ul dir="auto">
<li><code>model</code>		: Machine learning model. Eg: Chain(Dense(10,2)). Model should be created with Chain in Flux</li>
<li><code>cost</code>		: Cost function. Eg: L(x, y) = Flux.Losses.mse(m(x), y)</li>
<li><code>data</code>		: Inputs and outputs. Eg:	X = rand(10,100); Y = rand(2,100); data = DataLoader(X,Y);</li>
<li><code>opt</code>			: Optimzer. Eg: opt = ADAM(0.1)</li>
</ul>
<h1 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword Arguments</h1>
<ul dir="auto">
<li><code>callback</code>  	: Callback function during training. Eg: callback() = @show(L(X,Y))</li>
<li><code>σ_z</code>   		: Standard deviation of subspace</li>
<li><code>σ_m</code>   		: Standard deviation of likelihood model</li>
<li><code>σ_p</code>   		: Standard deviation of prior</li>
<li><code>itr</code>			: Iterations for sampling</li>
<li><code>T</code>			: Number of steps for subspace calculation. Eg: T= 1</li>
<li><code>c</code>			: Moment update frequency. Eg: c = 1</li>
<li><code>M</code>			: Maximum number of columns in deviation matrix. Eg: M= 3</li>
</ul>
<h1 dir="auto"><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output</h1>
<ul dir="auto">
<li><code>chn</code>			: Chain with samples with uncertainty</li>
<li><code>lp</code>			: Log probabilities of all samples</li>
<li><code>W_swa</code>		: Mean Weight</li>
<li><code>re</code>			: Model reformatting functioninformations</li>
</ul>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SubspaceInference
using Flux
using Flux: @epochs
using Flux: Flux.Data.DataLoader

l_m = 10
l_n = 100
O = 2

X = rand(l_m,l_n) #input
Y = rand(O,l_n) #output 

data =  DataLoader(X,Y, shuffle=true)

m = Chain(Dense(l_m, 20), Dense(20, 20), Dense(20, O)) #model

L(x, y) = Flux.Losses.mse(m(x), y) #cost function


ps = Flux.params(m) #model parameters

opt = ADAM(0.1) #optimizer

callback() = @show(L(X,Y)) #callback function

@epochs 1 Flux.train!(L, ps, data, opt, cb = () -&gt; callback()) #training

M = 3
T = 10
c= 1
itr = 10
L1(m, x, y) = Flux.Losses.mse(m(x), y) #cost function
chn, lp, W_swa = subspace_inference(m, L1, data, opt, itr = itr, T=T, c=1, M=M)"><pre><span class="pl-k">using</span> SubspaceInference
<span class="pl-k">using</span> Flux
<span class="pl-k">using</span> Flux<span class="pl-k">:</span> <span class="pl-c1">@epochs</span>
<span class="pl-k">using</span> Flux<span class="pl-k">:</span> Flux<span class="pl-k">.</span>Data<span class="pl-k">.</span>DataLoader

l_m <span class="pl-k">=</span> <span class="pl-c1">10</span>
l_n <span class="pl-k">=</span> <span class="pl-c1">100</span>
O <span class="pl-k">=</span> <span class="pl-c1">2</span>

X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(l_m,l_n) <span class="pl-c"><span class="pl-c">#</span>input</span>
Y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(O,l_n) <span class="pl-c"><span class="pl-c">#</span>output </span>

data <span class="pl-k">=</span>  <span class="pl-c1">DataLoader</span>(X,Y, shuffle<span class="pl-k">=</span><span class="pl-c1">true</span>)

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(l_m, <span class="pl-c1">20</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">20</span>, <span class="pl-c1">20</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">20</span>, O)) <span class="pl-c"><span class="pl-c">#</span>model</span>

<span class="pl-en">L</span>(x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span>Losses<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">m</span>(x), y) <span class="pl-c"><span class="pl-c">#</span>cost function</span>


ps <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">params</span>(m) <span class="pl-c"><span class="pl-c">#</span>model parameters</span>

opt <span class="pl-k">=</span> <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span>optimizer</span>

<span class="pl-en">callback</span>() <span class="pl-k">=</span> <span class="pl-c1">@show</span>(<span class="pl-c1">L</span>(X,Y)) <span class="pl-c"><span class="pl-c">#</span>callback function</span>

<span class="pl-c1">@epochs</span> <span class="pl-c1">1</span> Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(L, ps, data, opt, cb <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> <span class="pl-c1">callback</span>()) <span class="pl-c"><span class="pl-c">#</span>training</span>

M <span class="pl-k">=</span> <span class="pl-c1">3</span>
T <span class="pl-k">=</span> <span class="pl-c1">10</span>
c<span class="pl-k">=</span> <span class="pl-c1">1</span>
itr <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-en">L1</span>(m, x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span>Losses<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">m</span>(x), y) <span class="pl-c"><span class="pl-c">#</span>cost function</span>
chn, lp, W_swa <span class="pl-k">=</span> <span class="pl-c1">subspace_inference</span>(m, L1, data, opt, itr <span class="pl-k">=</span> itr, T<span class="pl-k">=</span>T, c<span class="pl-k">=</span><span class="pl-c1">1</span>, M<span class="pl-k">=</span>M)</pre></div>
<h2 dir="auto"><a id="user-content-subspace-construction" class="anchor" aria-hidden="true" href="#subspace-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subspace Construction</h2>
<p dir="auto">If you just want to generate subspace, you can use <code>subspace_construction</code> function.</p>
<p dir="auto">The subspace can be generated by using the following function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="	subspace_construction(model, cost, data, opt; 
		callback = ()-&gt;(return 0), T = 10, c = 1, M = 3, 
		LR_init = 0.01, print_freq = 1
	)"><pre>	<span class="pl-c1">subspace_construction</span>(model, cost, data, opt; 
		callback <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span>(<span class="pl-k">return</span> <span class="pl-c1">0</span>), T <span class="pl-k">=</span> <span class="pl-c1">10</span>, c <span class="pl-k">=</span> <span class="pl-c1">1</span>, M <span class="pl-k">=</span> <span class="pl-c1">3</span>, 
		LR_init <span class="pl-k">=</span> <span class="pl-c1">0.01</span>, print_freq <span class="pl-k">=</span> <span class="pl-c1">1</span>
	)</pre></div>
<h1 dir="auto"><a id="user-content-input-arguments-1" class="anchor" aria-hidden="true" href="#input-arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Input Arguments</h1>
<ul dir="auto">
<li><code>model</code> 	 : Machine learning model. Eg: Chain(Dense(10,2)). Model should be created with Chain in Flux</li>
<li><code>cost</code>  	 : Cost function. Eg: L(x, y) = Flux.Losses.mse(m(x), y)</li>
<li><code>data</code> 	 : Inputs and outputs. Eg:	X = rand(10,100); Y = rand(2,100); data = DataLoader(X,Y);</li>
<li><code>opt</code>		 : Optimzer. Eg: opt = ADAM(0.1)</li>
</ul>
<h1 dir="auto"><a id="user-content-keyword-arguments-1" class="anchor" aria-hidden="true" href="#keyword-arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword Arguments</h1>
<ul dir="auto">
<li><code>callback</code>  : Callback function during training. Eg: callback() = @show(L(X,Y))</li>
<li><code>T</code> 		  : Number of steps for subspace calculation. Eg: T= 1</li>
<li><code>c</code> 		  : Moment update frequency. Eg: c = 1</li>
<li><code>M</code> 		  : Maximum number of columns in deviation matrix. Eg: M= 2</li>
<li><code>LR_init</code>	  : Initial learning rate cyclic learning rate updation</li>
<li><code>print_freq</code>: Loss printing frequency</li>
</ul>
<h1 dir="auto"><a id="user-content-outputs" class="anchor" aria-hidden="true" href="#outputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Outputs</h1>
<ul dir="auto">
<li><code>W_swa</code>    : Mean weights</li>
<li><code>P</code> 		 : Projection Matrix</li>
<li><code>re</code> 		 : Model reconstruction function</li>
</ul>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SubspaceInference
using Flux
using Flux: @epochs
using Flux: Flux.Data.DataLoader

l_m = 10
l_n = 100
O = 2

X = rand(l_m,l_n) #input
Y = rand(O,l_n) #output 

data =  DataLoader(X,Y, shuffle=true)

m = Chain(Dense(l_m, 20), Dense(20, 20), Dense(20, O)) #model

L(x, y) = Flux.Losses.mse(m(x), y) #cost function


ps = Flux.params(m) #model parameters

opt = ADAM(0.1) #optimizer

callback() = @show(L(X,Y)) #callback function

@epochs 1 Flux.train!(L, ps, data, opt, cb = () -&gt; callback()) #training

M = 3
T = 10
c= 1
L(m, x, y) = Flux.Losses.mse(m(x), y) #cost function
W_swa, P = subspace_construction(m, L, data, opt, T = T, c = c, M = M)
"><pre><span class="pl-k">using</span> SubspaceInference
<span class="pl-k">using</span> Flux
<span class="pl-k">using</span> Flux<span class="pl-k">:</span> <span class="pl-c1">@epochs</span>
<span class="pl-k">using</span> Flux<span class="pl-k">:</span> Flux<span class="pl-k">.</span>Data<span class="pl-k">.</span>DataLoader

l_m <span class="pl-k">=</span> <span class="pl-c1">10</span>
l_n <span class="pl-k">=</span> <span class="pl-c1">100</span>
O <span class="pl-k">=</span> <span class="pl-c1">2</span>

X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(l_m,l_n) <span class="pl-c"><span class="pl-c">#</span>input</span>
Y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(O,l_n) <span class="pl-c"><span class="pl-c">#</span>output </span>

data <span class="pl-k">=</span>  <span class="pl-c1">DataLoader</span>(X,Y, shuffle<span class="pl-k">=</span><span class="pl-c1">true</span>)

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(l_m, <span class="pl-c1">20</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">20</span>, <span class="pl-c1">20</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">20</span>, O)) <span class="pl-c"><span class="pl-c">#</span>model</span>

<span class="pl-en">L</span>(x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span>Losses<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">m</span>(x), y) <span class="pl-c"><span class="pl-c">#</span>cost function</span>


ps <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">params</span>(m) <span class="pl-c"><span class="pl-c">#</span>model parameters</span>

opt <span class="pl-k">=</span> <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span>optimizer</span>

<span class="pl-en">callback</span>() <span class="pl-k">=</span> <span class="pl-c1">@show</span>(<span class="pl-c1">L</span>(X,Y)) <span class="pl-c"><span class="pl-c">#</span>callback function</span>

<span class="pl-c1">@epochs</span> <span class="pl-c1">1</span> Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(L, ps, data, opt, cb <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> <span class="pl-c1">callback</span>()) <span class="pl-c"><span class="pl-c">#</span>training</span>

M <span class="pl-k">=</span> <span class="pl-c1">3</span>
T <span class="pl-k">=</span> <span class="pl-c1">10</span>
c<span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-en">L</span>(m, x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span>Losses<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">m</span>(x), y) <span class="pl-c"><span class="pl-c">#</span>cost function</span>
W_swa, P <span class="pl-k">=</span> <span class="pl-c1">subspace_construction</span>(m, L, data, opt, T <span class="pl-k">=</span> T, c <span class="pl-k">=</span> c, M <span class="pl-k">=</span> M)
</pre></div>
<h3 dir="auto"><a id="user-content-subspaceinference" class="anchor" aria-hidden="true" href="#subspaceinference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SubspaceInference</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="chn, lp = SubspaceInference.inference(m, data, W_swa, P; σ_z = 1.0,
	σ_m = 1.0, σ_p = 1.0, itr=100, M = 3, alg = :mh)"><pre>chn, lp <span class="pl-k">=</span> SubspaceInference<span class="pl-k">.</span><span class="pl-c1">inference</span>(m, data, W_swa, P; σ_z <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
	σ_m <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, σ_p <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, itr<span class="pl-k">=</span><span class="pl-c1">100</span>, M <span class="pl-k">=</span> <span class="pl-c1">3</span>, alg <span class="pl-k">=</span> <span class="pl-c1">:mh</span>)</pre></div>
</article></div>