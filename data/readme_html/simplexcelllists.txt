<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplexcelllists-wip" class="anchor" aria-hidden="true" href="#simplexcelllists-wip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimplexCellLists WIP</h1>
<p dir="auto"><a href="https://github.com/medyan-dev/SimplexCellLists.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/medyan-dev/SimplexCellLists.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/69b843f9b4060075a9d78eb75843e76f6abe1c9a890c92341ad3625c197b80a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a756c69612d312e382d626c7565"><img src="https://camo.githubusercontent.com/69b843f9b4060075a9d78eb75843e76f6abe1c9a890c92341ad3625c197b80a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a756c69612d312e382d626c7565" alt="Julia Support" data-canonical-src="https://img.shields.io/badge/Julia-1.8-blue" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package accelerates computations on all pairs of 3D points, line segments, and triangles within a cutoff distance.</p>
<p dir="auto">This package is largely inspired by <a href="https://github.com/m3g/CellListMap.jl">CellListMap.jl</a>.</p>
<p dir="auto">However, there is no support for periodic boundary conditions, 2D systems, or types other than Float32.</p>
<p dir="auto">See <a href="https://github.com/m3g/CellListMap.jl">CellListMap.jl</a> if you want these features, or higher performance on systems without triangles and line segments.</p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<ul dir="auto">
<li><code>Simplex{N}</code> is <code>SVector{N, SVector{3, Float32}}</code></li>
<li><code>Point</code> is <code>Simplex{1}</code></li>
<li><code>Line</code> is <code>Simplex{2}</code></li>
<li><code>Triangle</code> is <code>Simplex{3}</code></li>
</ul>
<p dir="auto">There are multiple algorithms that implement the <code>SimplexCellList</code> abstract type interface.
Currently:</p>
<ul dir="auto">
<li><code>Naive</code>: A simple <code>SimplexCellList</code> with no extra options that uses double for loops.</li>
<li><code>Painter</code>: A grid is painted with element ids based on a max range. Based on the ideas in <a href="https://gitlab.com/f-nedelec/cytosim/-/blob/af739d2ff768628e4737d3a75457676e1a7f4287/src/sim/fiber_grid.h" rel="nofollow">cytosim</a>.</li>
</ul>
<p dir="auto">Let <code>T</code> be a concrete subtype of <code>SimplexCellList</code></p>
<h3 dir="auto"><a id="user-content-constructor" class="anchor" aria-hidden="true" href="#constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructor</h3>
<p dir="auto">Construct <code>T</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="T(numpointgroups::Integer, numlinegroups::Integer, numtrianglegroups::Integer; kwargs...)::T"><pre><span class="pl-c1">T</span>(numpointgroups<span class="pl-k">::</span><span class="pl-c1">Integer</span>, numlinegroups<span class="pl-k">::</span><span class="pl-c1">Integer</span>, numtrianglegroups<span class="pl-k">::</span><span class="pl-c1">Integer</span>; kwargs<span class="pl-k">...</span>)<span class="pl-k">::</span><span class="pl-c1">T</span></pre></div>
<p dir="auto">Where <code>numpointgroups</code> is the number of groups of points, <code>numlinegroups</code> is the number of groups of lines,
and <code>numtrianglegroups</code> is the number of groups of triangles.</p>
<p dir="auto"><code>kwargs</code> are options specific for <code>T</code></p>
<h3 dir="auto"><a id="user-content-setelements" class="anchor" aria-hidden="true" href="#setelements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>setElements!</code></h3>
<p dir="auto">Reset the elements stored in <code>s</code> in batch:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setElements!(s::T, points, lines, triangles)::Nothing"><pre><span class="pl-c1">setElements!</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, points, lines, triangles)<span class="pl-k">::</span><span class="pl-c1">Nothing</span></pre></div>
<p dir="auto">Where <code>points</code>, <code>lines</code> and <code>triangles</code> are collections of collections of objects convertible to
<code>Point</code>, <code>Line</code>, and <code>Triangle</code> respectively.</p>
<p dir="auto">For example, each collection in <code>points</code> is a group of points that can be mapped over independently from, or together with, other groups.</p>
<p dir="auto">Added elements will have a group index and element index based on the order of the inputs.
The first group in each type has group index 1, and the first element in each group has element index 1.</p>
<h3 dir="auto"><a id="user-content-addelement" class="anchor" aria-hidden="true" href="#addelement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>addElement!</code></h3>
<p dir="auto">Add a new element to <code>s</code>, and return its element index:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="addElement!(s::T, group_idx::Integer, element::Simplex{N})::Int32"><pre><span class="pl-c1">addElement!</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element<span class="pl-k">::</span><span class="pl-c1">Simplex{N}</span>)<span class="pl-k">::</span><span class="pl-c1">Int32</span></pre></div>
<p dir="auto">The new element will be pushed to the end of the specified group.</p>
<h3 dir="auto"><a id="user-content-deactivate" class="anchor" aria-hidden="true" href="#deactivate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>deactivate!</code></h3>
<p dir="auto">Deactivate an existing element in <code>s</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="deactivate!(s::T, group_idx::Integer, element_idx::Integer, element_type::Type{Simplex{N}})::Nothing"><pre><span class="pl-c1">deactivate!</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{N}}</span>)<span class="pl-k">::</span><span class="pl-c1">Nothing</span></pre></div>
<p dir="auto">Inactive elements are not mapped over. Elements are active by default.</p>
<h3 dir="auto"><a id="user-content-activate" class="anchor" aria-hidden="true" href="#activate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>activate!</code></h3>
<p dir="auto">Re-activate an existing element in <code>s</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="activate!(s::T, group_idx::Integer, element_idx::Integer, element_type::Type{Simplex{N}})::Nothing"><pre><span class="pl-c1">activate!</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{N}}</span>)<span class="pl-k">::</span><span class="pl-c1">Nothing</span></pre></div>
<p dir="auto">Inactive elements are not mapped over. Elements are active by default.</p>
<h3 dir="auto"><a id="user-content-isactive" class="anchor" aria-hidden="true" href="#isactive"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>isActive</code></h3>
<p dir="auto">Return if an existing element in <code>s</code> is active.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="isActive(s::T, group_idx::Integer, element_idx::Integer, element_type::Type{Simplex{N}})::Bool"><pre><span class="pl-c1">isActive</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, element_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{N}}</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span></pre></div>
<p dir="auto">Inactive elements are not mapped over. Elements are active by default.</p>
<h2 dir="auto"><a id="user-content-mapping" class="anchor" aria-hidden="true" href="#mapping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mapping</h2>
<p dir="auto">The following functions allow mapping a custom function over pairs of simplexes within some cutoff.</p>
<h3 dir="auto"><a id="user-content-mapped-function-f" class="anchor" aria-hidden="true" href="#mapped-function-f"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mapped function <code>f</code></h3>
<p dir="auto">The function f should have the same form as used in CellListMap.jl.</p>
<p dir="auto"><code>i</code> is the element index of simplex <code>x</code>, <code>j</code> is the element index of simplex <code>y</code>.</p>
<p dir="auto"><code>d2</code> is an approximate <code>Float32</code> squared distance between <code>x</code> and <code>y</code>.</p>
<p dir="auto">Except here <code>x</code> and <code>y</code> are <code>Simplex{N}</code>, <code>Simplex{M}</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    function f(x,y,i,j,d2,output)
        # update output
        return output
    end"><pre>    <span class="pl-k">function</span> <span class="pl-en">f</span>(x,y,i,j,d2,output)
        <span class="pl-c"><span class="pl-c">#</span> update output</span>
        <span class="pl-k">return</span> output
    <span class="pl-k">end</span></pre></div>
<p dir="auto">The order in which pairs of elements in range are mapped is implementation dependent.</p>
<p dir="auto">The elements passed to <code>f</code> may be slightly different from the elements added to <code>T</code> due to implementation dependent floating point rounding errors.</p>
<p dir="auto">If a pair distance is very near the cutoff, it is implementation dependent whether the pair gets mapped or not due to floating point rounding errors.</p>
<p dir="auto">Therefore, if more precision is needed, add some extra distance to the cutoff, store the elements externally in 64 bit precision, and in <code>f</code> use <code>i</code> and <code>j</code> to get the precise elements and again check distances.</p>
<h3 dir="auto"><a id="user-content-mapsimplexelements" class="anchor" aria-hidden="true" href="#mapsimplexelements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>mapSimplexElements</code></h3>
<p dir="auto">Map <code>f</code> to all simplexes in a group close to a single simplex.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mapSimplexElements(f, output, s::T, x::Simplex{N}, group_idx::Integer, elements_type::Type{Simplex{M}}, cutoff::Float32) where {N, M}"><pre><span class="pl-c1">mapSimplexElements</span>(f, output, s<span class="pl-k">::</span><span class="pl-c1">T</span>, x<span class="pl-k">::</span><span class="pl-c1">Simplex{N}</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, elements_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{M}}</span>, cutoff<span class="pl-k">::</span><span class="pl-c1">Float32</span>) <span class="pl-k">where</span> {N, M}</pre></div>
<p dir="auto">Apply function <code>f</code> to all elements in group <code>group_idx</code> within the cutoff range of the simplex <code>x</code>, and
return the output of the final <code>f</code> call.</p>
<p dir="auto"><code>x</code> is always <code>x</code> and <code>i</code> is always 0, in calls to <code>f</code>.</p>
<h3 dir="auto"><a id="user-content-mappairelements" class="anchor" aria-hidden="true" href="#mappairelements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>mapPairElements</code></h3>
<p dir="auto">Map <code>f</code> to all pairs of nearby simplexes in a single group.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mapPairElements(f, output, s::T, group_idx::Integer, elements_type::Type{Simplex{N}}, cutoff::Float32) where {N}"><pre><span class="pl-c1">mapPairElements</span>(f, output, s<span class="pl-k">::</span><span class="pl-c1">T</span>, group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, elements_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{N}}</span>, cutoff<span class="pl-k">::</span><span class="pl-c1">Float32</span>) <span class="pl-k">where</span> {N}</pre></div>
<p dir="auto">Apply function <code>f</code> to all unordered pairs of elements in group <code>group_idx</code> within cutoff range, and return the output of the final <code>f</code> call.</p>
<p dir="auto"><code>f</code> is never called more than once per unordered pair. Which element is <code>x</code> and <code>y</code> in calls to <code>f</code> is implementation dependent.</p>
<h3 dir="auto"><a id="user-content-mapelementselements" class="anchor" aria-hidden="true" href="#mapelementselements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>mapElementsElements</code></h3>
<p dir="auto">Map <code>f</code> to all pairs of nearby simplexes between two different groups.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mapElementsElements(
        f, 
        output, 
        s::T, 
        x_group_idx::Integer, 
        x_type::Type{Simplex{N}}, 
        y_group_idx::Integer, 
        y_type::Type{Simplex{M}}, 
        cutoff::Float32,
    ) where {N, M}"><pre><span class="pl-c1">mapElementsElements</span>(
        f, 
        output, 
        s<span class="pl-k">::</span><span class="pl-c1">T</span>, 
        x_group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, 
        x_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{N}}</span>, 
        y_group_idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>, 
        y_type<span class="pl-k">::</span><span class="pl-c1">Type{Simplex{M}}</span>, 
        cutoff<span class="pl-k">::</span><span class="pl-c1">Float32</span>,
    ) <span class="pl-k">where</span> {N, M}</pre></div>
<p dir="auto">Apply function <code>f</code> to each pair of elements from two different groups that are within cutoff range of each other, and return the output of the final <code>f</code> call.</p>
<p dir="auto">The first element has is an <code>x_type</code> in group <code>x_group_idx</code> and the second element is a <code>y_type</code> in group <code>y_group_idx</code>.</p>
<p dir="auto"><code>f</code> is never called more than once per pair.</p>
</article></div>