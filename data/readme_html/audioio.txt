<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-audioiojl" class="anchor" aria-hidden="true" href="#audioiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AudioIO.jl</h1>
<p><a href="https://travis-ci.org/ssfrr/AudioIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/522092575da5da93160c78c1c7e327c9e9293438/68747470733a2f2f7472617669732d63692e6f72672f73736672722f417564696f494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ssfrr/AudioIO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=AudioIO&amp;ver=release" rel="nofollow"><img src="https://camo.githubusercontent.com/449edef337cdd1487bb4d0a335b4ea79617503e4/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f417564696f494f5f72656c656173652e737667" alt="Pkgs Status" data-canonical-src="http://pkg.julialang.org/badges/AudioIO_release.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/ssfrr/AudioIO.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/12c5820435d541c4fd0d3cae1147f3ce83bb2dd1/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f73736672722f417564696f494f2e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/ssfrr/AudioIO.jl.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-this-package-is-no-longer-being-maintained-i-suggest-you-check-out-the-juliaaudio-family-of-packages-for-audio-related-work-in-julia" class="anchor" aria-hidden="true" href="#this-package-is-no-longer-being-maintained-i-suggest-you-check-out-the-juliaaudio-family-of-packages-for-audio-related-work-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>This package is no longer being maintained. I suggest you check out the <a href="https://github.com/JuliaAudio">JuliaAudio</a> family of packages for audio-related work in Julia</h2>
<p>AudioIO interfaces to audio streams, including real-time recording, audio
processing, and playback through your sound card using PortAudio. It also
supports reading and writing audio files in a variety of formats. It is under
active development and the low-level API could change, but the basic
functionality (reading and writing files, the <code>play</code> function, etc.) should be
stable and usable by the general Julia community.</p>
<h2><a id="user-content-file-io" class="anchor" aria-hidden="true" href="#file-io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>File I/O</h2>
<p>File I/O is handled by <a href="http://www.mega-nerd.com/libsndfile/" rel="nofollow">libsndfile</a>, so
we can support a wide variety of file and sample formats. Use the
<code>AudioIO.open</code> function to open a file. It has the same API as the built-in
Base.open, but returns an <code>AudioFile</code> type. Opening an audio file and reading
its contents into an array is as simple as:</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> AudioIO<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data/never_gonna_give_you_up.wav<span class="pl-pds">"</span></span>)
data <span class="pl-k">=</span> <span class="pl-c1">read</span>(f)
<span class="pl-c1">close</span>(f)</pre></div>
<p>Or to hand closing the file automatically (including in the case of unexpected
exceptions), we support the <code>do</code> block syntax:</p>
<div class="highlight highlight-source-julia"><pre>data <span class="pl-k">=</span> AudioIO<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data/never_gonna_let_you_down.wav<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">read</span>(f)
<span class="pl-k">end</span></pre></div>
<p>By default the returned array will be in whatever format the original audio file is
(Float32, UInt16, etc.). We also support automatic conversion by supplying a type:</p>
<div class="highlight highlight-source-julia"><pre>data <span class="pl-k">=</span> AudioIO<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data/never_gonna_run_around.wav<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">read</span>(f, Float32)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-basic-array-playback" class="anchor" aria-hidden="true" href="#basic-array-playback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Array Playback</h2>
<p>Arrays in various formats can be played through your soundcard. Currently the
native format that is delivered to the PortAudio backend is Float32 in the
range of [-1, 1]. Arrays in other sizes of float are converted. Arrays
in Signed or Unsigned Integer types are scaled so that the full range is
mapped to [-1, 1] floating point values.</p>
<p>To play a 1-second burst of noise:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">44100</span>) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">play</span>(v)</pre></div>
<h2><a id="user-content-audionodes" class="anchor" aria-hidden="true" href="#audionodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AudioNodes</h2>
<p>In addition to the basic <code>play</code> function you can create more complex networks
of AudioNodes in a render chain. In fact, when using the basic <code>play</code> to play
an Array, behind the scenes an instance of the ArrayPlayer type is created
and added to the master AudioMixer inputs. Audionodes also implement a <code>stop</code>
function, which will remove them from the render graph. When an implicit
AudioNode is created automatically, such as when using <code>play</code> on an Array, the
<code>play</code> function should return the audio node that is playing the Array, so it
can be stopped if desired.</p>
<p>To explictly do the same as above:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">44100</span>) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>
julia<span class="pl-k">&gt;</span> player <span class="pl-k">=</span> <span class="pl-c1">ArrayPlayer</span>(v)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">play</span>(player)</pre></div>
<p>To generate 2 sin tones:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> osc1 <span class="pl-k">=</span> <span class="pl-c1">SinOsc</span>(<span class="pl-c1">440</span>)
julia<span class="pl-k">&gt;</span> osc2 <span class="pl-k">=</span> <span class="pl-c1">SinOsc</span>(<span class="pl-c1">660</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">play</span>(osc1)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">play</span>(osc2)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">stop</span>(osc1)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">stop</span>(osc2)</pre></div>
<p>All AudioNodes must implement a <code>render</code> function that can be called to
retreive the next block of audio.</p>
<h2><a id="user-content-audiostreams" class="anchor" aria-hidden="true" href="#audiostreams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AudioStreams</h2>
<p>AudioStreams represent an external source or destination for audio, such as the
sound card. The <code>play</code> function attaches AudioNodes to the default stream
unless a stream is given as the 2nd argument.</p>
<p>AudioStream is an abstract type, which currently has a PortAudioStream subtype
that writes to the sound card, and a TestAudioStream that is used in the unit
tests.</p>
<p>Currently only 1 stream at a time is supported so there's no reason to provide
an explicit stream to the <code>play</code> function. The stream has a root mixer field
which is an instance of the AudioMixer type, so that multiple AudioNodes
can be heard at the same time. Whenever a new frame of audio is needed by the
sound card, the stream calls the <code>render</code> method on the root audio mixer, which
will in turn call the <code>render</code> methods on any input AudioNodes that are set
up as inputs.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install the latest release version, simply run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AudioIO<span class="pl-pds">"</span></span>)</pre></div>
<p>If you want to install the lastest master, it's almost as easy:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>AudioIO<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>AudioIO<span class="pl-pds">"</span></span>)</pre></div>
</article></div>