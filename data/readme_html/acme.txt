<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-acmejl---analog-circuit-modeling-and-emulation-for-julia" class="anchor" aria-hidden="true" href="#acmejl---analog-circuit-modeling-and-emulation-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ACME.jl - Analog Circuit Modeling and Emulation for Julia</h1>
<p><a href="https://gitter.im/HSU-ANT/ACME.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/443a35b2e360d8cfd98425ec31e65578abeadc68/68747470733a2f2f6261646765732e6769747465722e696d2f4853552d414e542f41434d452e6a6c2e737667" alt="Join the chat at https://gitter.im/HSU-ANT/ACME.jl" data-canonical-src="https://badges.gitter.im/HSU-ANT/ACME.jl.svg" style="max-width:100%;"></a>
<a href="https://hsu-ant.github.io/ACME.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://hsu-ant.github.io/ACME.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/48224425" rel="nofollow"><img src="https://camo.githubusercontent.com/afd23f29cd5990f3e44c09a15f2bdf31babcdebe/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f34383232343432352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/48224425.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/HSU-ANT/ACME.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a0b7b276efff368881b6e7490d14294c3d19f422/68747470733a2f2f7472617669732d63692e6f72672f4853552d414e542f41434d452e6a6c2e7376673f6272616e63683d646576656c6f70" alt="Build Status" data-canonical-src="https://travis-ci.org/HSU-ANT/ACME.jl.svg?branch=develop" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/HSU-ANT/ACME.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef84858499f27444e7b17b1696d6302022688907/68747470733a2f2f636f6465636f762e696f2f67682f4853552d414e542f41434d452e6a6c2f6272616e63682f646576656c6f702f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/HSU-ANT/ACME.jl/branch/develop/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/HSU-ANT/ACME.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1ca74c716efb80733df7189632ad2df66d38f51/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4853552d414e542f41434d452e6a6c2f62616467652e7376673f6272616e63683d646576656c6f70" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/HSU-ANT/ACME.jl/badge.svg?branch=develop" style="max-width:100%;"></a></p>
<p>ACME is a <a href="http://julialang.org/" rel="nofollow">Julia</a> package for the simulation of
electrical circuits, focusing on audio effect circuits. It allows to
programmatically describe a circuit in terms of elements and connections
between them and then automatically derive a model for the circuit. The model
can then be run on varying input data.</p>
<p>ACME is based on the method described in
<a href="http://www.eurasip.org/Proceedings/Eusipco/Eusipco2015/papers/1570103545.pdf" rel="nofollow">M. Holters, U. Zölzer, "A Generalized Method for the Derivation of Non-Linear
State-Space Models from Circuit
Schematics"</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>If you have not done so already, <a href="http://julialang.org/downloads/" rel="nofollow">download and install
Julia</a>. (Any version starting with 1.0 should
be fine; earlier ACME versions support Julia starting with version 0.3.)</p>
<p>To install ACME, start Julia and run:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ACME<span class="pl-pds">"</span></span>)</pre></div>
<p>This will download ACME and all of its dependencies.</p>
<h2><a id="user-content-first-steps" class="anchor" aria-hidden="true" href="#first-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>First steps</h2>
<p>We will demonstrate ACME by modeling a simple diode clipper. The first step is
to load ACME:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ACME</pre></div>
<p>Now we create the circuit description:</p>
<div class="highlight highlight-source-julia"><pre>circ <span class="pl-k">=</span> <span class="pl-c1">@circuit</span> <span class="pl-k">begin</span>
    j_in <span class="pl-k">=</span> <span class="pl-c1">voltagesource</span>()
    r1 <span class="pl-k">=</span> <span class="pl-c1">resistor</span>(<span class="pl-c1">1e3</span>)
    c1 <span class="pl-k">=</span> <span class="pl-c1">capacitor</span>(<span class="pl-c1">47e-9</span>)
    d1 <span class="pl-k">=</span> <span class="pl-c1">diode</span>(is<span class="pl-k">=</span><span class="pl-c1">1e-15</span>)
    d2 <span class="pl-k">=</span> <span class="pl-c1">diode</span>(is<span class="pl-k">=</span><span class="pl-c1">1.8e-15</span>)
    j_out <span class="pl-k">=</span> <span class="pl-c1">voltageprobe</span>()
    j_in[<span class="pl-k">+</span>] ⟷ r1[<span class="pl-c1">1</span>]
    j_in[<span class="pl-k">-</span>] ⟷ gnd
    r1[<span class="pl-c1">2</span>] ⟷ c1[<span class="pl-c1">1</span>] ⟷ d1[<span class="pl-k">+</span>] ⟷ d2[<span class="pl-k">-</span>] ⟷ j_out[<span class="pl-k">+</span>]
    gnd ⟷ c1[<span class="pl-c1">2</span>] ⟷ d1[<span class="pl-k">-</span>] ⟷ d2[<span class="pl-k">+</span>] ⟷ j_out[<span class="pl-k">-</span>]
<span class="pl-k">end</span></pre></div>
<p>The first six lines inside the <code>begin</code>/<code>end</code> block instantiate circuit elements.
Specifying a <code>voltagesource()</code> sets up a voltage source as an input, i.e. the
voltage it sources will be specified when running the model. Alternatively, one
can instantiate a constant voltage source for say 9V with  <code>voltagesource(9)</code>.
The <code>resistor</code> and <code>capacitor</code> calls take the resistance in ohm and the
capacitance in farad, respectively, as arguments. For the <code>diode</code>, one may
specify the saturation current <code>is</code> as done here and/or the emission
coefficient <code>η</code>. Finally, desired outputs are denoted by adding probes to the
circuit; in this case a <code>voltageprobe()</code> will provide voltage as output.</p>
<p>The remaining four lines specify connections, either among element pins as in
<code>j_in[+] ⟷ r1[1]</code>, which connects the <code>+</code> pin of the input voltage to pin <code>1</code> of
the resistor, or among pins and named nets as in <code>j_in[-] ⟷ gnd</code>, which
connects the <code>-</code> pin of the input voltage source to a net named <code>gnd</code>. Note that
naming nets is only for the sake of readability; there is nothing special about
them and the names are arbitrary. As can be seen in the last two lines, multiple
pins can be connected at once.</p>
<p>It is also possible to specify connections following the element definition
(separated by commas), in which case the element name may be omitted. However,
one can only connect to elements defined before. Thus, above circuit could also
be entered as:</p>
<div class="highlight highlight-source-julia"><pre>circ <span class="pl-k">=</span> <span class="pl-c1">@circuit</span> <span class="pl-k">begin</span>
    j_in <span class="pl-k">=</span> <span class="pl-c1">voltagesource</span>(), [<span class="pl-k">-</span>] ⟷ gnd
    r1 <span class="pl-k">=</span> <span class="pl-c1">resistor</span>(<span class="pl-c1">1e3</span>), [<span class="pl-c1">1</span>] ⟷ j_in[<span class="pl-k">+</span>]
    c1 <span class="pl-k">=</span> <span class="pl-c1">capacitor</span>(<span class="pl-c1">47e-9</span>), [<span class="pl-c1">1</span>] ⟷ r1[<span class="pl-c1">2</span>], [<span class="pl-c1">2</span>] ⟷ gnd
    d1 <span class="pl-k">=</span> <span class="pl-c1">diode</span>(is<span class="pl-k">=</span><span class="pl-c1">1e-15</span>), [<span class="pl-k">+</span>] ⟷ r1[<span class="pl-c1">2</span>], [<span class="pl-k">-</span>] ⟷ gnd
    d2 <span class="pl-k">=</span> <span class="pl-c1">diode</span>(is<span class="pl-k">=</span><span class="pl-c1">1.8e-15</span>), [<span class="pl-k">+</span>] ⟷ gnd, [<span class="pl-k">-</span>] ⟷ r1[<span class="pl-c1">2</span>]
    j_out <span class="pl-k">=</span> <span class="pl-c1">voltageprobe</span>(), [<span class="pl-k">+</span>] ⟷ r1[<span class="pl-c1">2</span>], [<span class="pl-k">-</span>] ⟷ gnd
<span class="pl-k">end</span></pre></div>
<p>Now that the circuit has been set up, we need to turn it into a model. This
could hardly be any easier:</p>
<div class="highlight highlight-source-julia"><pre>model <span class="pl-k">=</span> <span class="pl-c1">DiscreteModel</span>(circ, <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">44100</span>)</pre></div>
<p>The second argument specifies the sampling interval, the reciprocal of the
sampling rate, here assumed to be the typical 44100 Hz.</p>
<p>Now we can process some input data. It has to be provided as a matrix with one
row per input (just one in the example) and one column per sample. So for a
sinusoid at 1 kHz lasting one second, we do</p>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> <span class="pl-c1">run!</span>(model, [<span class="pl-c1">sin</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">44100</span><span class="pl-k">*</span>n) <span class="pl-k">for</span> c <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, n <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">44099</span>])</pre></div>
<p>The output <code>y</code> now likewise is a matrix with one row for the one probe we have
added to the circuit and one column per sample.</p>
<p>In the likely event that you would like to process real audio data, take a look
at the <a href="https://github.com/dancasimiro/WAV.jl">WAV</a> package for reading writing
WAV files.</p>
<p>Note that the solver used to solve the non-linear equation when running the
model saves solutions to use as starting points in the future. Model execution
will therefore become faster after an initial learning phase.  Nevertheless,
ACME is at present more geared towards computing all the model matrices than to
actually running the model. More complex circuits may run intolerably slow or
fail to run altogether.</p>
<h2><a id="user-content-moving-on" class="anchor" aria-hidden="true" href="#moving-on"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moving on</h2>
<p>There is some <a href="https://hsu-ant.github.io/ACME.jl/dev/" rel="nofollow">documentation</a>
available for how
to use ACME. Additionally, you can take a look at the examples that can be found
in the <code>examples</code> directory below <code>Pkg.dir("ACME")</code>.</p>
<p>If you would like to extend and improve ACME, that's great! But unfortunately,
there is no developer documentation as of now, so you will to delve into the
source code to figure out how things work, or try to ask on
<a href="https://gitter.im/HSU-ANT/ACME.jl" rel="nofollow">gitter</a>.</p>
</article></div>