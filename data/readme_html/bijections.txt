<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bijections" class="anchor" aria-hidden="true" href="#bijections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bijections</h1>
<p>This package provides a <code>Bijection</code> data type for Julia.</p>
<p>A <code>Dict</code> in Julia is not one-to-one. Two different keys might have the
same value. This data structure behaves just like a <code>Dict</code> except it
blocks assigning the same value to two different keys.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>After <code>using Bijections</code> we create a new <code>Bijection</code> in one of the
following ways:</p>
<ul>
<li>
<p><code>b = Bijection()</code>: This gives a new <code>Bijection</code> in which the keys
and values are of <code>Any</code> type.</p>
</li>
<li>
<p><code>b = Bijection{S,T}()</code>: This gives a new <code>Bijection</code> in which the
keys are of type <code>S</code> and the values are of type <code>T</code>.</p>
</li>
<li>
<p><code>b = Bijection(x,y)</code>: This gives a new <code>Bijection</code> in which the keys
are type <code>typeof(x)</code>, the values are type <code>typeof(y)</code> and the
key-value pair <code>(x,y)</code> is inserted into the <code>Bijection</code>.</p>
</li>
</ul>
<h2><a id="user-content-adding-and-deleting-pairs" class="anchor" aria-hidden="true" href="#adding-and-deleting-pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding and deleting pairs</h2>
<p>Once a <code>Bijection</code>, <code>b</code>, is created, we add a new key-value pair in
the same manner as with a <code>Dict</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span></pre></div>
<p>Notice, however, that if we add a new key with a value that already
exists in the <code>Bijection</code> an error ensues:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>
ERROR<span class="pl-k">:</span> One of x or y already <span class="pl-k">in</span> this Bijection</pre></div>
<p>Likewise, if a key already has a value it cannot be changed by giving
it a new value:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>
ERROR<span class="pl-k">:</span> One of x or y already <span class="pl-k">in</span> this Bijection</pre></div>
<p>If we wish to change the value associated with a given key, the pair
must first be deleted using <code>delete!</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete!</span>(b,<span class="pl-c1">1</span>)
Bijection{Any,Any} (with <span class="pl-c1">1</span> pairs)

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-using-a-bijection" class="anchor" aria-hidden="true" href="#using-a-bijection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using a <code>Bijection</code></h2>
<p>To access a value associated with a given key, we use the same syntax
as for a <code>Dict</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">1</span>]
<span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">2</span>]
<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span></pre></div>
<p>If the key is not in the <code>Bijection</code> an error is raised:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">3</span>]
ERROR<span class="pl-k">:</span> KeyError<span class="pl-k">:</span> <span class="pl-c1">3</span> not found</pre></div>
<p>Since the values in a <code>Bijection</code> must be distinct, we can give a
value as an input and retrieve its associate key. The function
<code>inverse(b,y)</code> finds the value <code>x</code> such that <code>b[x]==y</code>. However, we
provide the handy short cut <code>b(y)</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">b</span>(<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">b</span>(<span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>)
<span class="pl-c1">1</span></pre></div>
<p>Naturally, if the requested value is not in the <code>Bijection</code> an error
is raised:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">b</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
ERROR<span class="pl-k">:</span> KeyError<span class="pl-k">:</span> hello not found</pre></div>
<h2><a id="user-content-inspection" class="anchor" aria-hidden="true" href="#inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inspection</h2>
<p>Thinking of a <code>Bijection</code> as a mapping between finite sets, we
provide the functions <code>domain</code> and <code>image</code>. These return,
respectively, the set of keys and the set of values of the
<code>Bijection</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">domain</span>(b)
<span class="pl-c1">Set</span>(Any[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">image</span>(b)
<span class="pl-c1">Set</span>(Any[<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>])</pre></div>
<p>The <code>collect</code> function returns the <code>Bijection</code> as an array of
key-value pairs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(b)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Tuple{Any,Any},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>) 
 (<span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>ciao<span class="pl-pds">"</span></span>)</pre></div>
<p>The <code>length</code> function returns the number of key-value pairs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(b)
<span class="pl-c1">2</span></pre></div>
<p>The <code>isempty</code> function returns <code>true</code> exactly when the <code>Bijection</code>
contains no pairs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">isempty</span>(b)
<span class="pl-c1">false</span></pre></div>
<h2><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To do list</h2>
<p>These are features I may get around to adding:</p>
<ul>
<li>
<p>Create an <code>inv(b)</code> function which creates a new <code>Bijection</code>
that reverses key-value pairs in <code>b</code></p>
</li>
<li>
<p>Create an <code>active_inv(b)</code> function that, like <code>inv</code>, creates an
inverse but that is tied to <code>b</code> so that any modification of one
affects the other.</p>
</li>
<li>
<p>A <code>Bijection</code> ought to be iterable, but that's not implemented yet.</p>
</li>
</ul>
</article></div>