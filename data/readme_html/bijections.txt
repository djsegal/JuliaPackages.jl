<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bijections" class="anchor" aria-hidden="true" href="#bijections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bijections</h1>
<p dir="auto">This package provides a <code>Bijection</code> data type for Julia.</p>
<p dir="auto">A <code>Dict</code> in Julia is not one-to-one. Two different keys might have the
same value. This data structure behaves just like a <code>Dict</code> except it
blocks assigning the same value to two different keys.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">After <code>using Bijections</code> we create a new <code>Bijection</code> in one of the
following ways:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>b = Bijection()</code>: This gives a new <code>Bijection</code> in which the keys
and values are of <code>Any</code> type.</p>
</li>
<li>
<p dir="auto"><code>b = Bijection{S,T}()</code>: This gives a new <code>Bijection</code> in which the
keys are of type <code>S</code> and the values are of type <code>T</code>.</p>
</li>
<li>
<p dir="auto"><code>b = Bijection(x,y)</code>: This gives a new <code>Bijection</code> in which the keys
are type <code>typeof(x)</code>, the values are type <code>typeof(y)</code> and the
key-value pair <code>(x,y)</code> is inserted into the <code>Bijection</code>.</p>
</li>
<li>
<p dir="auto"><code>b = Bijection(dict::AbstractDict{S, T})</code>: This gives a new <code>Bijection</code> in which the keys
are type <code>S</code>, the values are type <code>T</code> and all
key-value pairs in <code>dict</code> are inserted into the <code>Bijection</code>.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-adding-and-deleting-pairs" class="anchor" aria-hidden="true" href="#adding-and-deleting-pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding and deleting pairs</h2>
<p dir="auto">Once a <code>Bijection</code>, <code>b</code>, is created, we add a new key-value pair in
the same manner as with a <code>Dict</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b[1] = &quot;hello&quot;
&quot;hello&quot;

julia&gt; b[2] = &quot;bye&quot;
&quot;bye&quot;"><pre class="notranslate"><code>julia&gt; b[1] = "hello"
"hello"

julia&gt; b[2] = "bye"
"bye"
</code></pre></div>
<p dir="auto">Notice, however, that if we add a new key with a value that already
exists in the <code>Bijection</code> an error ensues:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b = Bijection{Int, String}()
Bijection Dict{Int64, String}()

julia&gt; b[3] = &quot;hello&quot;
ERROR: One of x or y already in this Bijection"><pre class="notranslate"><code>julia&gt; b = Bijection{Int, String}()
Bijection Dict{Int64, String}()

julia&gt; b[3] = "hello"
ERROR: One of x or y already in this Bijection
</code></pre></div>
<p dir="auto">Likewise, if a key already has a value it cannot be changed by giving
it a new value:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b[1] = &quot;ciao&quot;
ERROR: One of x or y already in this Bijection"><pre class="notranslate"><code>julia&gt; b[1] = "ciao"
ERROR: One of x or y already in this Bijection
</code></pre></div>
<p dir="auto">If we wish to change the value associated with a given key, the pair
must first be deleted using <code>delete!</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; delete!(b,1)
Bijection Dict{Int64, String} with 1 entry:
  2 =&gt; &quot;bye&quot;

julia&gt; b[1] = &quot;ciao&quot;
&quot;ciao&quot;"><pre class="notranslate"><code>julia&gt; delete!(b,1)
Bijection Dict{Int64, String} with 1 entry:
  2 =&gt; "bye"

julia&gt; b[1] = "ciao"
"ciao"
</code></pre></div>
<h2 dir="auto"><a id="user-content-using-a-bijection" class="anchor" aria-hidden="true" href="#using-a-bijection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using a <code>Bijection</code></h2>
<p dir="auto">To access a value associated with a given key, we use the same syntax
as for a <code>Dict</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b[1]
&quot;ciao&quot;

julia&gt; b[2]
&quot;bye&quot;"><pre class="notranslate"><code>julia&gt; b[1]
"ciao"

julia&gt; b[2]
"bye"
</code></pre></div>
<p dir="auto">If the key is not in the <code>Bijection</code> an error is raised:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b[3]
ERROR: KeyError: 3 not found"><pre class="notranslate"><code>julia&gt; b[3]
ERROR: KeyError: 3 not found
</code></pre></div>
<p dir="auto">Since the values in a <code>Bijection</code> must be distinct, we can give a
value as an input and retrieve its associate key. The function
<code>inverse(b,y)</code> finds the value <code>x</code> such that <code>b[x]==y</code>. However, we
provide the handy short cut <code>b(y)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b(&quot;bye&quot;)
2

julia&gt; b(&quot;ciao&quot;)
1"><pre class="notranslate"><code>julia&gt; b("bye")
2

julia&gt; b("ciao")
1
</code></pre></div>
<p dir="auto">Naturally, if the requested value is not in the <code>Bijection</code> an error
is raised:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b(&quot;hello&quot;)
ERROR: KeyError: hello not found"><pre class="notranslate"><code>julia&gt; b("hello")
ERROR: KeyError: hello not found
</code></pre></div>
<h2 dir="auto"><a id="user-content-creating-an-inverse-bijection" class="anchor" aria-hidden="true" href="#creating-an-inverse-bijection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating an inverse <code>Bijection</code></h2>
<p dir="auto">There are two functions that take a <code>Bijection</code> and return a new
<code>Bijection</code> that is the functional inverse of the original:
<code>inv</code> and <code>active_inv</code>.</p>
<h3 dir="auto"><a id="user-content-independent-inverse-inv" class="anchor" aria-hidden="true" href="#independent-inverse-inv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Independent inverse: <code>inv</code></h3>
<p dir="auto">Given a <code>Bijection</code> <code>b</code>, calling <code>inv(b)</code> creates a new <code>Bijection</code>
that is the inverse of <code>b</code>. The new <code>Bijection</code> is completely independent
of the original, <code>b</code>. Changes to one do not affect the other:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b = Bijection{Int,String}()
Bijection Dict{Int64, String}()

julia&gt; b[1] = &quot;alpha&quot;
&quot;alpha&quot;

julia&gt; b[2] = &quot;beta&quot;
&quot;beta&quot;

julia&gt; bb = inv(b)
Bijection Dict{String, Int64} with 2 entries:
  &quot;alpha&quot; =&gt; 1
  &quot;beta&quot;  =&gt; 2

julia&gt; bb[&quot;alpha&quot;]
1

julia&gt; bb[&quot;alpha&quot;]
1

julia&gt; b[3] = &quot;gamma&quot;
&quot;gamma&quot;

julia&gt; bb[&quot;gamma&quot;]
ERROR: KeyError: key &quot;gamma&quot; not found"><pre class="notranslate"><code>julia&gt; b = Bijection{Int,String}()
Bijection Dict{Int64, String}()

julia&gt; b[1] = "alpha"
"alpha"

julia&gt; b[2] = "beta"
"beta"

julia&gt; bb = inv(b)
Bijection Dict{String, Int64} with 2 entries:
  "alpha" =&gt; 1
  "beta"  =&gt; 2

julia&gt; bb["alpha"]
1

julia&gt; bb["alpha"]
1

julia&gt; b[3] = "gamma"
"gamma"

julia&gt; bb["gamma"]
ERROR: KeyError: key "gamma" not found
</code></pre></div>
<h3 dir="auto"><a id="user-content-active-inverse-active_inv" class="anchor" aria-hidden="true" href="#active-inverse-active_inv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Active inverse: <code>active_inv</code></h3>
<p dir="auto">The <code>active_inv</code> function also creates an inverse <code>Bijection</code>, but in this
case the original and the inverse are actively tied together.
That is, modification of one immediately affects the other.
The two <code>Bijection</code>s remain inverses no matter how either is modified.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; b = Bijection{Int,String}()
Bijection Dict{Int64, String}()

julia&gt; b[1] = &quot;alpha&quot;
&quot;alpha&quot;

julia&gt; b[2] = &quot;beta&quot;
&quot;beta&quot;

julia&gt; bb = active_inv(b)
Bijection Dict{String, Int64} with 2 entries:
  &quot;alpha&quot; =&gt; 1
  &quot;beta&quot;  =&gt; 2
  
julia&gt; b[3] = &quot;gamma&quot;
&quot;gamma&quot;

julia&gt; bb[&quot;gamma&quot;]
3"><pre class="notranslate"><code>julia&gt; b = Bijection{Int,String}()
Bijection Dict{Int64, String}()

julia&gt; b[1] = "alpha"
"alpha"

julia&gt; b[2] = "beta"
"beta"

julia&gt; bb = active_inv(b)
Bijection Dict{String, Int64} with 2 entries:
  "alpha" =&gt; 1
  "beta"  =&gt; 2
  
julia&gt; b[3] = "gamma"
"gamma"

julia&gt; bb["gamma"]
3
</code></pre></div>
<h2 dir="auto"><a id="user-content-iteration" class="anchor" aria-hidden="true" href="#iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iteration</h2>
<p dir="auto"><code>Bijection</code>s can be used in a <code>for</code> statement just like Julia
dictionaries:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for (x,y) in b; println(&quot;$x --&gt; $y&quot;); end
2 --&gt; beta
3 --&gt; gamma
1 --&gt; alpha"><pre class="notranslate"><code>julia&gt; for (x,y) in b; println("$x --&gt; $y"); end
2 --&gt; beta
3 --&gt; gamma
1 --&gt; alpha
</code></pre></div>
<h2 dir="auto"><a id="user-content-inspection" class="anchor" aria-hidden="true" href="#inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inspection</h2>
<p dir="auto">Thinking of a <code>Bijection</code> as a mapping between finite sets, we
provide the functions <code>domain</code> and <code>image</code>. These return,
respectively, the set of keys and the set of values of the
<code>Bijection</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; domain(b)
Set(Any[2,1])

julia&gt; image(b)
Set(Any[&quot;bye&quot;,&quot;ciao&quot;])"><pre class="notranslate"><code>julia&gt; domain(b)
Set(Any[2,1])

julia&gt; image(b)
Set(Any["bye","ciao"])
</code></pre></div>
<p dir="auto">The <code>collect</code> function returns the <code>Bijection</code> as an array of
key-value pairs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; collect(b)
2-element Array{Tuple{Any,Any},1}:
 (2,&quot;bye&quot;)
 (1,&quot;ciao&quot;)"><pre class="notranslate"><code>julia&gt; collect(b)
2-element Array{Tuple{Any,Any},1}:
 (2,"bye")
 (1,"ciao")
</code></pre></div>
<p dir="auto">The <code>length</code> function returns the number of key-value pairs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; length(b)
2"><pre class="notranslate"><code>julia&gt; length(b)
2
</code></pre></div>
<p dir="auto">The <code>isempty</code> function returns <code>true</code> exactly when the <code>Bijection</code>
contains no pairs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; isempty(b)
false"><pre class="notranslate"><code>julia&gt; isempty(b)
false
</code></pre></div>
</article></div>