<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functionoperatorsjl" class="anchor" aria-hidden="true" href="#functionoperatorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionOperators.jl</h1>
<p dir="auto"><a href="https://hakkelt.github.io/FunctionOperators.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/hakkelt/FunctionOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3bc6e6957d73c2d47a412cea73251dc49e130afc230c7b9788d457b8324926dc/68747470733a2f2f7472617669732d63692e636f6d2f68616b6b656c742f46756e6374696f6e4f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/hakkelt/FunctionOperators.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/hakkelt/FunctionOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ce1df43f61517209b1d023aeafcb0c5133690c0f7beec43bcd9431e37531a58d/68747470733a2f2f636f6465636f762e696f2f67682f68616b6b656c742f46756e6374696f6e4f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/hakkelt/FunctionOperators.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">I wanted to write code for image reconstruction in Julia, which</p>
<ul dir="auto">
<li>resambles the mathematical notation with abstract operators on multidimensional spaces,</li>
<li>has minimal memory requirement and fast to run, and</li>
<li>is easy to write and read.</li>
</ul>
<p dir="auto">FunctionOperator is an operator that maps from a multidimensional space to another multidimensional space. The mapping is defined by a function (<code>forw</code>), and optionally the reverse mapping can also be defined (<code>backw</code>). The input the mapping must be subtype of AbstractArray.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-create-operator" class="anchor" aria-hidden="true" href="#create-operator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create operator</h3>
<p dir="auto">The 2D Fourier transformation operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FFTW
julia&gt; ùìï = FunctionOperator{Complex{Float64}}(
            forw = x -&gt; fft(x, (1,2)), backw = x -&gt; ifft(x, (1,2)),
            inDims = (128, 128), outDims = (128, 128))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FFTW
julia<span class="pl-k">&gt;</span> ùìï <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">fft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)), backw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">ifft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>))</pre></div>
<p dir="auto">Finite differences / Total Variance operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ‚àá = FunctionOperator{Complex{Float64}}(
            forw = x -&gt; (circ(x, (1,0)) - x).^2 + (circ(x, (0,1)) - x).^2,
            inDims = (128, 128), outDims = (128, 128))"><pre>julia<span class="pl-k">&gt;</span> ‚àá <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>,
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>))</pre></div>
<p dir="auto">Or a sampling operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; mask = rand(128, 128) .&lt; 0.3
julia&gt; S = FunctionOperator{Complex{Float64}}(
            forw = x -&gt; x[mask], backw = x -&gt; embed(x, mask),
            inDims = (128, 128), outDims = (sum(mask),))"><pre>julia<span class="pl-k">&gt;</span> mask <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>, <span class="pl-c1">128</span>) <span class="pl-k">.&lt;</span> <span class="pl-c1">0.3</span>
julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> x[mask], backw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">embed</span>(x, mask),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">sum</span>(mask),))</pre></div>
<p dir="auto">Then these operators can be combined (almost) arbitrarily:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = rand(128, 128);
julia&gt; ùìï * ‚àá * x == fft((circ(x, (1,0)) - x).^2 + (circ(x, (0,1)) - x).^2, (1,2))
true
julia&gt; combined = S * (ùìï + ‚àá);
julia&gt; combined * x == S * ùìï * x + S * ‚àá * x
true"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>, <span class="pl-c1">128</span>);
julia<span class="pl-k">&gt;</span> ùìï <span class="pl-k">*</span> ‚àá <span class="pl-k">*</span> x <span class="pl-k">==</span> <span class="pl-c1">fft</span>((<span class="pl-c1">circ</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">=</span> S <span class="pl-k">*</span> (ùìï <span class="pl-k">+</span> ‚àá);
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">*</span> x <span class="pl-k">==</span> S <span class="pl-k">*</span> ùìï <span class="pl-k">*</span> x <span class="pl-k">+</span> S <span class="pl-k">*</span> ‚àá <span class="pl-k">*</span> x
<span class="pl-c1">true</span></pre></div>
<p dir="auto">They can be combined with <code>UniformScaling</code> from <code>LinearAlgebra</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra
julia&gt; 3I * ‚àá * x == 3 * (‚àá * x)
true
julia&gt; (ùìï + (3+2im)I) * x == ùìï * x + (3+2im) * x
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra
julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span>I <span class="pl-k">*</span> ‚àá <span class="pl-k">*</span> x <span class="pl-k">==</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> (‚àá <span class="pl-k">*</span> x)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> (ùìï <span class="pl-k">+</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)I) <span class="pl-k">*</span> x <span class="pl-k">==</span> ùìï <span class="pl-k">*</span> x <span class="pl-k">+</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2im</span>) <span class="pl-k">*</span> x
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h3>
<p dir="auto">With little effort we can achieve the same speed as we would have manually optimized functions. For example, consider the following function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools
julia&gt; FFT_plan = plan_fft(x, (1,2));
julia&gt; iFFT_plan = plan_ifft!(x, (1,2));
julia&gt; function foo(output::Array{Complex{Float64},2}, x::Array{Complex{Float64},2},
                FFT_plan, iFFT_plan, mask::BitArray)
            mul!(output, FFT_plan, x)
            output .*= mask
            mul!(output, iFFT_plan, output)
        end;
julia&gt; output = similar(x);
julia&gt; @benchmark foo(output, x, FFT_plan, iFFT_plan, mask)
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     390.961 Œºs (0.00% GC)
  median time:      418.149 Œºs (0.00% GC)
  mean time:        408.111 Œºs (0.00% GC)
  maximum time:     497.468 Œºs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools
julia<span class="pl-k">&gt;</span> FFT_plan <span class="pl-k">=</span> <span class="pl-c1">plan_fft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>));
julia<span class="pl-k">&gt;</span> iFFT_plan <span class="pl-k">=</span> <span class="pl-c1">plan_ifft!</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>));
julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(output<span class="pl-k">::</span><span class="pl-c1">Array{Complex{Float64},2}</span>, x<span class="pl-k">::</span><span class="pl-c1">Array{Complex{Float64},2}</span>,
                FFT_plan, iFFT_plan, mask<span class="pl-k">::</span><span class="pl-c1">BitArray</span>)
            <span class="pl-c1">mul!</span>(output, FFT_plan, x)
            output <span class="pl-k">.*=</span> mask
            <span class="pl-c1">mul!</span>(output, iFFT_plan, output)
        <span class="pl-k">end</span>;
julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">foo</span>(output, x, FFT_plan, iFFT_plan, mask)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">390.961</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">418.149</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">408.111</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">497.468</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span></pre></div>
<p dir="auto">That function basically consist of three operations: A Fourier transform, a masking, and an inverse Fourier transform. Using FunctionOperators, we can write code that is more similar to the high-level description that has minimal run-time and memory overhead:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ùìï‚ÇÇ = FunctionOperator{Complex{Float64}}(
            forw = (output, x) -&gt; mul!(output, FFT_plan, x),
            backw = (output, x) -&gt; mul!(output, iFFT_plan, x),
            inDims = (128, 128), outDims = (128, 128));
julia&gt; S‚ÇÇ = FunctionOperator{Complex{Float64}}(
            forw = (output, x) -&gt; output .= x .* mask,
            inDims = (128, 128), outDims = (128, 128));
julia&gt; combined = ùìï‚ÇÇ' * S‚ÇÇ * ùìï‚ÇÇ;
julia&gt; @benchmark mul!(output, combined, x)
BenchmarkTools.Trial:
  memory estimate:  112 bytes
  allocs estimate:  4
  --------------
  minimum time:     401.814 Œºs (0.00% GC)
  median time:      429.648 Œºs (0.00% GC)
  mean time:        427.211 Œºs (0.00% GC)
  maximum time:     681.116 Œºs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1"><pre>julia<span class="pl-k">&gt;</span> ùìï‚ÇÇ <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">mul!</span>(output, FFT_plan, x),
            backw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">mul!</span>(output, iFFT_plan, x),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>));
julia<span class="pl-k">&gt;</span> S‚ÇÇ <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> output <span class="pl-k">.=</span> x <span class="pl-k">.*</span> mask,
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>));
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">=</span> ùìï‚ÇÇ<span class="pl-k">'</span> <span class="pl-k">*</span> S‚ÇÇ <span class="pl-k">*</span> ùìï‚ÇÇ;
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">mul!</span>(output, combined, x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">112</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">4</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">401.814</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">429.648</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">427.211</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">681.116</span> Œºs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span></pre></div>
<p dir="auto">For more detailed description, see <a href="https://hakkelt.github.io/FunctionOperators.jl/latest/Tutorial/" rel="nofollow">tutorial</a>.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<p dir="auto">Not a Julia package, but the main motivation behind creating this package is to have the same functionality as <code>fatrix2</code> in the Matlab version of <a href="https://github.com/JeffFessler/mirt">Michigan Image Reconstruction Toolbox (MIRT)</a>, (<a href="https://web.eecs.umich.edu/~fessler/irt/irt/doc/doc.pdf" rel="nofollow">description</a>).</p>
<p dir="auto">The most similar Julia package is <a href="https://github.com/kul-forbes/AbstractOperators.jl">AbstractOperators.jl</a>. The feature set of its <code>MyLinOp</code> type largely overlaps with <code>FunctionOperator</code>'s features. The main difference is that composition in <code>AbstractOperators</code> is more intensive memory-wise as it allocates a buffer for each member of composition while <code>FunctionOperators</code> allocates a new buffer only when necessary. On the other hand, the difference between is significant only for memory-intensive applications.</p>
<p dir="auto"><code>FunctionOperators</code> was also inspired by <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a>  The main difference is that <code>LinearMaps</code> support only mappings where the input and output are both vectors (which is often not the case in image reconstruction algorithms). <a href="https://github.com/JeffFessler/LinearMapsAA.jl">LinearMapsAA.jl</a> is an extension of <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a> with <code>getindex</code> and <code>setindex!</code> functions making it conform to the requirements of an AbstractMatrix type. Additionally, a user can include a NamedTuple of properties with it, and then retrieve those later using the <code>A.key</code> syntax like one would do with a struct (composite type). From implementational point of view, both <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a> and <a href="https://github.com/JeffFessler/LinearMapsAA.jl">LinearMapsAA.jl</a> uses more memory when <code>LinearMaps</code> with different input and output size are composed.</p>
<p dir="auto"><a href="https://github.com/JuliaSmoothOptimizers/LinearOperators.jl">LinearOperators</a> provides some similar features too, but it also requires the input and the output to be a vector.</p>
</article></div>