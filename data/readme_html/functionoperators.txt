<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-functionoperatorsjl" class="anchor" aria-hidden="true" href="#functionoperatorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FunctionOperators.jl</h1>
<p><a href="https://hakkelt.github.io/FunctionOperators.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/hakkelt/FunctionOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4dce2bb24d0f0e313f125eed0c52241f281583db/68747470733a2f2f7472617669732d63692e636f6d2f68616b6b656c742f46756e6374696f6e4f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/hakkelt/FunctionOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/hakkelt/FunctionOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed55ba13a7f88e47e8d2ab8443a6027bb876bea9/68747470733a2f2f636f6465636f762e696f2f67682f68616b6b656c742f46756e6374696f6e4f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/hakkelt/FunctionOperators.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>I wanted to write code for image reconstruction in Julia, which</p>
<ul>
<li>resambles the mathematical notation with abstract operators on multidimensional spaces,</li>
<li>has minimal memory requirement and fast to run, and</li>
<li>is easy to write and read.</li>
</ul>
<p>FunctionOperator is an operator that maps from a multidimensional space to another multidimensional space. The mapping is defined by a function (<code>forw</code>), and optionally the reverse mapping can also be defined (<code>backw</code>). The input the mapping must be subtype of AbstractArray.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-create-operator" class="anchor" aria-hidden="true" href="#create-operator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create operator</h3>
<p>The 2D Fourier transformation operator:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FFTW
julia<span class="pl-k">&gt;</span> 𝓕 <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">fft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)), backw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">ifft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>))</pre></div>
<p>Finite differences / Total Variance operator:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ∇ <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.^</span><span class="pl-c1">2</span>,
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>))</pre></div>
<p>Or a sampling operator:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> mask <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>, <span class="pl-c1">128</span>) <span class="pl-k">.&lt;</span> <span class="pl-c1">0.3</span>
julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> x[mask], backw <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">embed</span>(x, mask),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">sum</span>(mask),))</pre></div>
<p>Then these operators can be combined (almost) arbitrarily:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>, <span class="pl-c1">128</span>);
julia<span class="pl-k">&gt;</span> 𝓕 <span class="pl-k">*</span> ∇ <span class="pl-k">*</span> x <span class="pl-k">==</span> <span class="pl-c1">fft</span>((<span class="pl-c1">circ</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">circ</span>(x, (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)) <span class="pl-k">-</span> x)<span class="pl-k">.^</span><span class="pl-c1">2</span>, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">=</span> S <span class="pl-k">*</span> (𝓕 <span class="pl-k">+</span> ∇);
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">*</span> x <span class="pl-k">==</span> S <span class="pl-k">*</span> 𝓕 <span class="pl-k">*</span> x <span class="pl-k">+</span> S <span class="pl-k">*</span> ∇ <span class="pl-k">*</span> x
<span class="pl-c1">true</span></pre></div>
<p>They can be combined with <code>UniformScaling</code> from <code>LinearAlgebra</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra
julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span>I <span class="pl-k">*</span> ∇ <span class="pl-k">*</span> x <span class="pl-k">==</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> (∇ <span class="pl-k">*</span> x)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> (𝓕 <span class="pl-k">+</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)I) <span class="pl-k">*</span> x <span class="pl-k">==</span> 𝓕 <span class="pl-k">*</span> x <span class="pl-k">+</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2im</span>) <span class="pl-k">*</span> x
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h3>
<p>With little effort we can achieve the same speed as we would have manually optimized functions. For example, consider the following function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools
julia<span class="pl-k">&gt;</span> FFT_plan <span class="pl-k">=</span> <span class="pl-c1">plan_fft</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>));
julia<span class="pl-k">&gt;</span> iFFT_plan <span class="pl-k">=</span> <span class="pl-c1">plan_ifft!</span>(x, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>));
julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(output<span class="pl-k">::</span><span class="pl-c1">Array{Complex{Float64},2}</span>, x<span class="pl-k">::</span><span class="pl-c1">Array{Complex{Float64},2}</span>,
                FFT_plan, iFFT_plan, mask<span class="pl-k">::</span><span class="pl-c1">BitArray</span>)
            <span class="pl-c1">mul!</span>(output, FFT_plan, x)
            output <span class="pl-k">.*=</span> mask
            <span class="pl-c1">mul!</span>(output, iFFT_plan, output)
        <span class="pl-k">end</span>;
julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">foo</span>(output, x, FFT_plan, iFFT_plan, mask)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">390.961</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">418.149</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">408.111</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">497.468</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span></pre></div>
<p>That function basically consist of three operations: A Fourier transform, a masking, and an inverse Fourier transform. Using FunctionOperators, we can write code that is more similar to the high-level description that has minimal run-time and memory overhead:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> 𝓕₂ <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">mul!</span>(output, FFT_plan, x),
            backw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">mul!</span>(output, iFFT_plan, x),
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>));
julia<span class="pl-k">&gt;</span> S₂ <span class="pl-k">=</span> <span class="pl-c1">FunctionOperator</span><span class="pl-c1">{Complex{Float64}}</span>(
            forw <span class="pl-k">=</span> (output, x) <span class="pl-k">-&gt;</span> output <span class="pl-k">.=</span> x <span class="pl-k">.*</span> mask,
            inDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>), outDims <span class="pl-k">=</span> (<span class="pl-c1">128</span>, <span class="pl-c1">128</span>));
julia<span class="pl-k">&gt;</span> combined <span class="pl-k">=</span> 𝓕₂<span class="pl-s"><span class="pl-pds">'</span> * S₂ * 𝓕₂;</span>
<span class="pl-s">julia&gt; @benchmark mul!(output, combined, x)</span>
<span class="pl-s">BenchmarkTools.Trial:</span>
<span class="pl-s">  memory estimate:  112 bytes</span>
<span class="pl-s">  allocs estimate:  4</span>
<span class="pl-s">  --------------</span>
<span class="pl-s">  minimum time:     401.814 μs (0.00% GC)</span>
<span class="pl-s">  median time:      429.648 μs (0.00% GC)</span>
<span class="pl-s">  mean time:        427.211 μs (0.00% GC)</span>
<span class="pl-s">  maximum time:     681.116 μs (0.00% GC)</span>
<span class="pl-s">  --------------</span>
<span class="pl-s">  samples:          10000</span>
<span class="pl-s">  evals/sample:     1</span></pre></div>
<p>For more detailed description, see <a href="https://hakkelt.github.io/FunctionOperators.jl/latest/Tutorial/" rel="nofollow">tutorial</a>.</p>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related packages</h2>
<p>Not a Julia package, but the main motivation behind creating this package is to have the same functionality as <code>fatrix2</code> in the Matlab version of <a href="https://github.com/JeffFessler/mirt">Michigan Image Reconstruction Toolbox (MIRT)</a>, (<a href="https://web.eecs.umich.edu/~fessler/irt/irt/doc/doc.pdf" rel="nofollow">description</a>).</p>
<p>The most similar Julia package is <a href="https://github.com/kul-forbes/AbstractOperators.jl">AbstractOperators.jl</a>. The feature set of its <code>MyLinOp</code> type largely overlaps with <code>FunctionOperator</code>'s features. The main difference is that composition in <code>AbstractOperators</code> is more intensive memory-wise as it allocates a buffer for each member of composition while <code>FunctionOperators</code> allocates a new buffer only when necessary. On the other hand, the difference between is significant only for memory-intensive applications.</p>
<p><code>FunctionOperators</code> was also inspired by <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a>  The main difference is that <code>LinearMaps</code> support only mappings where the input and output are both vectors (which is often not the case in image reconstruction algorithms). <a href="https://github.com/JeffFessler/LinearMapsAA.jl">LinearMapsAA.jl</a> is an extension of <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a> with <code>getindex</code> and <code>setindex!</code> functions making it conform to the requirements of an AbstractMatrix type. Additionally, a user can include a NamedTuple of properties with it, and then retrieve those later using the <code>A.key</code> syntax like one would do with a struct (composite type). From implementational point of view, both <a href="https://github.com/Jutho/LinearMaps.jl">LinearMaps.jl</a> and <a href="https://github.com/JeffFessler/LinearMapsAA.jl">LinearMapsAA.jl</a> uses more memory when <code>LinearMaps</code> with different input and output size are composed.</p>
<p><a href="https://github.com/JuliaSmoothOptimizers/LinearOperators.jl">LinearOperators</a> provides some similar features too, but it also requires the input and the output to be a vector.</p>
</article></div>