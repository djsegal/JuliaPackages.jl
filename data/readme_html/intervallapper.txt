<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-intervallapper" class="anchor" aria-hidden="true" href="#intervallapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IntervalLapper</h1>
<p dir="auto">This is a Julia port of my Rust
<a href="https://docs.rs/rust-lapper/%3E" rel="nofollow">port</a> of
<a href="https://github.com/brentp/nim-lapper">nim-lapper</a>.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]
add IntervalLapper"><pre class="notranslate"><code>]
add IntervalLapper
</code></pre></div>
<h2 dir="auto"><a id="user-content-docs" class="anchor" aria-hidden="true" href="#docs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Docs</h2>
<p dir="auto">See the docs for the rust-lapper project. The API's are essentially the
same. The version 5.0.0 release is virtually identical at the time of
writing this readme. <a href="https://docs.rs/rust-lapper/" rel="nofollow">https://docs.rs/rust-lapper/</a></p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test
import IntervalLapper
const IL = IntervalLapper
const Iv = IL.Interval{Int}

data = map(x -&gt; Iv(x, x + 15, 0), 0:10:100)
lapper = IL.Lapper(data)

cursor = Ref(1)
e1 = Iv(0, 15, 0)
e2 = Iv(10, 25, 0)

@test [e1, e2] == collect(IL.find(lapper, 8, 20))
@test [e1, e2] == collect(IL.seek(lapper, 8, 20, cursor))
@test 2 == length(collect(IL.find(lapper, 8, 20)))
bits = IL.Bits(lapper.intervals)
@test IL.count(bits, 8, 20) == length(collect(IL.find(lapper, 8, 20)))"><pre><span class="pl-k">using</span> Test
<span class="pl-k">import</span> IntervalLapper
<span class="pl-k">const</span> IL <span class="pl-k">=</span> IntervalLapper
<span class="pl-k">const</span> Iv <span class="pl-k">=</span> IL<span class="pl-k">.</span>Interval{Int}

data <span class="pl-k">=</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">Iv</span>(x, x <span class="pl-k">+</span> <span class="pl-c1">15</span>, <span class="pl-c1">0</span>), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
lapper <span class="pl-k">=</span> IL<span class="pl-k">.</span><span class="pl-c1">Lapper</span>(data)

cursor <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(<span class="pl-c1">1</span>)
e1 <span class="pl-k">=</span> <span class="pl-c1">Iv</span>(<span class="pl-c1">0</span>, <span class="pl-c1">15</span>, <span class="pl-c1">0</span>)
e2 <span class="pl-k">=</span> <span class="pl-c1">Iv</span>(<span class="pl-c1">10</span>, <span class="pl-c1">25</span>, <span class="pl-c1">0</span>)

<span class="pl-c1">@test</span> [e1, e2] <span class="pl-k">==</span> <span class="pl-c1">collect</span>(IL<span class="pl-k">.</span><span class="pl-c1">find</span>(lapper, <span class="pl-c1">8</span>, <span class="pl-c1">20</span>))
<span class="pl-c1">@test</span> [e1, e2] <span class="pl-k">==</span> <span class="pl-c1">collect</span>(IL<span class="pl-k">.</span><span class="pl-c1">seek</span>(lapper, <span class="pl-c1">8</span>, <span class="pl-c1">20</span>, cursor))
<span class="pl-c1">@test</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">length</span>(<span class="pl-c1">collect</span>(IL<span class="pl-k">.</span><span class="pl-c1">find</span>(lapper, <span class="pl-c1">8</span>, <span class="pl-c1">20</span>)))
bits <span class="pl-k">=</span> IL<span class="pl-k">.</span><span class="pl-c1">Bits</span>(lapper<span class="pl-k">.</span>intervals)
<span class="pl-c1">@test</span> IL<span class="pl-k">.</span><span class="pl-c1">count</span>(bits, <span class="pl-c1">8</span>, <span class="pl-c1">20</span>) <span class="pl-k">==</span> <span class="pl-c1">length</span>(<span class="pl-c1">collect</span>(IL<span class="pl-k">.</span><span class="pl-c1">find</span>(lapper, <span class="pl-c1">8</span>, <span class="pl-c1">20</span>)))</pre></div>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">TBD. Anecdotally seems speedy, but no optimizations have been done. I'm
sure there some funkiness with type instability or missed broadcasting
opportunities.</p>
</article></div>