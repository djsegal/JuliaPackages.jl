<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-trajectorylimiters" class="anchor" aria-hidden="true" href="#trajectorylimiters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TrajectoryLimiters</h1>
<p dir="auto"><a href="https://github.com/baggepinnen/TrajectoryLimiters.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/baggepinnen/TrajectoryLimiters.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/TrajectoryLimiters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eafd636c684595439237ff58f7d6a619ecb7e16cd2c945300164a436a0e260ed/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f5472616a6563746f72794c696d69746572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/baggepinnen/TrajectoryLimiters.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Contains an implementation of</p>
<blockquote>
<p dir="auto">Nonlinear filters for the generation of smooth trajectories
R. Zanasi, C. Guarino Lo Bianco, A. Tonielli</p>
</blockquote>
<p dir="auto">This nonlinear trajectory filter takes a pre-defined reference trajectory <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$r(t)$</math-renderer> (uniformly sampled in <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$t$</math-renderer>) and filters it (causally) such that the velocity and acceleration are bounded by <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$ẋ_M$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$ẍ_M$</math-renderer>.</p>
<p dir="auto">What is this good for? Some applications call for a dynamically feasible reference trajectory, i.e., a trajectory with bounded velocity and acceleration, but all you have access to is an instantaneous reference <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$r(t)$</math-renderer> that might change abruptly, e.g., from an operator changing a set point. In such situations, this filter performs the required pre-processing of the reference to provide a smoother, dynamically feasible reference trajectory. If you already have a trajectory planner that outputs dynamically feasible trajectories, you do not need this package.</p>
<h2 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To filter an entire trajectory, create a <code>TrajectoryLimiter</code> and call it like a function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TrajectoryLimiters

ẍM   = 50                       # Maximum acceleration
ẋM   = 10                       # Maximum velocity
Ts   = 0.005                    # Sample time
r(t) = 2.5 + 3 * (t - floor(t)) # Reference to be smoothed
t    = 0:Ts:3                   # Time vector
R    = r.(t)                    # An array of sampled position references 

limiter = TrajectoryLimiter(Ts, ẋM, ẍM)

X, Ẋ, Ẍ = limiter(R)

plot(
    t,
    [X Ẋ Ẍ],
    plotu = true,
    c = :black,
    title = [&quot;Position \$x(t)\$&quot; &quot;Velocity \$ẋ(t)\$&quot; &quot;Acceleration \$u(t)\$&quot;],
    ylabel = &quot;&quot;,
    layout = (3,1),
)
plot!(r, extrema(t)..., sp = 1, lab = &quot;&quot;, l = (:black, :dashdot))"><pre><span class="pl-k">using</span> TrajectoryLimiters

ẍM   <span class="pl-k">=</span> <span class="pl-c1">50</span>                       <span class="pl-c"><span class="pl-c">#</span> Maximum acceleration</span>
ẋM   <span class="pl-k">=</span> <span class="pl-c1">10</span>                       <span class="pl-c"><span class="pl-c">#</span> Maximum velocity</span>
Ts   <span class="pl-k">=</span> <span class="pl-c1">0.005</span>                    <span class="pl-c"><span class="pl-c">#</span> Sample time</span>
<span class="pl-en">r</span>(t) <span class="pl-k">=</span> <span class="pl-c1">2.5</span> <span class="pl-k">+</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> (t <span class="pl-k">-</span> <span class="pl-c1">floor</span>(t)) <span class="pl-c"><span class="pl-c">#</span> Reference to be smoothed</span>
t    <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span>Ts<span class="pl-k">:</span><span class="pl-c1">3</span>                   <span class="pl-c"><span class="pl-c">#</span> Time vector</span>
R    <span class="pl-k">=</span> <span class="pl-c1">r</span>.(t)                    <span class="pl-c"><span class="pl-c">#</span> An array of sampled position references </span>

limiter <span class="pl-k">=</span> <span class="pl-c1">TrajectoryLimiter</span>(Ts, ẋM, ẍM)

X, Ẋ, Ẍ <span class="pl-k">=</span> <span class="pl-c1">limiter</span>(R)

<span class="pl-c1">plot</span>(
    t,
    [X Ẋ Ẍ],
    plotu <span class="pl-k">=</span> <span class="pl-c1">true</span>,
    c <span class="pl-k">=</span> <span class="pl-c1">:black</span>,
    title <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Position <span class="pl-cce">\$</span>x(t)<span class="pl-cce">\$</span><span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Velocity <span class="pl-cce">\$</span>ẋ(t)<span class="pl-cce">\$</span><span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Acceleration <span class="pl-cce">\$</span>u(t)<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>],
    ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>,
    layout <span class="pl-k">=</span> (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>),
)
<span class="pl-c1">plot!</span>(r, <span class="pl-c1">extrema</span>(t)<span class="pl-k">...</span>, sp <span class="pl-k">=</span> <span class="pl-c1">1</span>, lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, l <span class="pl-k">=</span> (<span class="pl-c1">:black</span>, <span class="pl-c1">:dashdot</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/204131020-c0dbcfa5-33f2-44df-b12d-528f3f4e7132.png"><img src="https://user-images.githubusercontent.com/3797491/204131020-c0dbcfa5-33f2-44df-b12d-528f3f4e7132.png" alt="limited trajectory" style="max-width: 100%;"></a></p>
<p dir="auto">The figure above reproduces figure 10 from the reference, except that we did not increase the acceleration bound (which we call <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$ẍ_M$</math-renderer> but they call <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$U$</math-renderer>) at time <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$t=2$</math-renderer> like they did. To do this, use the lower-level interface explained below.</p>
<p dir="auto">The figure indicates that the limited (solid lines) trajectory follows the original reference trajectory (dashed line) whenever possible, but deviates whenever the original trajectory violates the velocity or acceleration constraints. When it has deviated, the limited trajectory converges to the original reference trajectory again with a time-optimal behavior whenever the velocity and acceleration profiles allow.</p>
<p dir="auto">Since the trajectory limiter outputs position, velocity and acceleration, it is easy to use inverse-based feedforward models to improve the trajectory tracking compared to purely feedback-based controllers (<em>always</em> use some form of feedforward if trajectory-tracking performance is important).</p>
<p dir="auto">To limit a trajectory online, i.e., one step at a time, call the limiter like so</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state, ẍ = limiter(state, r(t))"><pre>state, ẍ <span class="pl-k">=</span> <span class="pl-c1">limiter</span>(state, <span class="pl-c1">r</span>(t))</pre></div>
<p dir="auto">this outputs a new state, containing <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$x, ẋ, r, ṙ$</math-renderer> as well as the acceleration <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2bc797029887f3ecf6bf408a847e7696">$ẍ$</math-renderer>.</p>
<p dir="auto">One can also call the lower-level function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state, ẍ = TrajectoryLimiter.trajlim(state, rt, Ts, ẋM, ẍM)"><pre>state, ẍ <span class="pl-k">=</span> TrajectoryLimiter<span class="pl-k">.</span><span class="pl-c1">trajlim</span>(state, rt, Ts, ẋM, ẍM)</pre></div>
<p dir="auto">directly in case one would like to change any of the parameters online.</p>
<p dir="auto">To set the initial state of the trajectory limiter, create a</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="TrajectoryLimiters.State(x, ẋ, r, ṙ)"><pre>TrajectoryLimiters<span class="pl-k">.</span><span class="pl-c1">State</span>(x, ẋ, r, ṙ)</pre></div>
<p dir="auto">manually. The default choice if no initial state is given when batch filtering an array <code>R</code> is <code>TrajectoryLimiters.State(0, 0, r, 0)</code> where <code>r</code> is the first value in the array <code>R</code>.</p>
<h3 dir="auto">
<a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h3>
<p dir="auto">On a laptop from 2021, filtering a trajectory <code>R</code> of length 601 samples takes</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; length(R)
601

julia&gt; @btime $limiter($R);
  23.745 μs (3 allocations: 14.62 KiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(R)
<span class="pl-c1">601</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">limiter</span>(<span class="pl-k">$</span>R);
  <span class="pl-c1">23.745</span> μs (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">14.62</span> KiB)</pre></div>
<p dir="auto">With preallocated output arrays, you can avoid the allocations completely:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; X, Ẋ, Ẍ = similar.((R,R,R));

julia&gt; @btime $limiter($X, $Ẋ, $Ẍ, $R);
  20.813 μs (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> X, Ẋ, Ẍ <span class="pl-k">=</span> <span class="pl-c1">similar</span>.((R,R,R));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">limiter</span>(<span class="pl-k">$</span>X, <span class="pl-k">$</span>Ẋ, <span class="pl-k">$</span>Ẍ, <span class="pl-k">$</span>R);
  <span class="pl-c1">20.813</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">Taking a single step takes</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime $limiter(TrajectoryLimiters.State(0.0), 0.0);
  17.372 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">limiter</span>(TrajectoryLimiters<span class="pl-k">.</span><span class="pl-c1">State</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">0.0</span>);
  <span class="pl-c1">17.372</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
</article></div>