<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-anytimeweightedastarjl" class="anchor" aria-hidden="true" href="#anytimeweightedastarjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AnytimeWeightedAStar.jl</h1>
<p dir="auto">Julia Implementation of <a href="https://arxiv.org/abs/1110.2737" rel="nofollow">Anytime Weighted A* (AWA*)</a> algorithm and <a href="https://bhatiaabhinav.github.io/publication/BSZsocs21" rel="nofollow">Randomized Weighted A* (RWA*)</a> algorithm (Published at SoCS 2021).</p>
<p dir="auto">RWA*, a variant of AWA* that randomly adjusts the weight at runtime, usually works better than using any static weight.</p>
<h2 dir="auto"><a id="user-content-install-instructions" class="anchor" aria-hidden="true" href="#install-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install Instructions</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;AnytimeWeightedAStar&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AnytimeWeightedAStar<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AnytimeWeightedAStar
using AnytimeWeightedAStar.SearchProblem
using AnytimeWeightedAStar.ExampleProblems  # Sliding Puzzle, Inverse Sliding Puzzle, Traveling Salesman Problem, City Navigation Problem. See src/example_problems directory for more details.
using Random

search_problem = SlidingPuzzle(4:4, 35:45);  # specifies a 4x4 sliding puzzle (also knowing as 15-Puzzle) with starting state (manhattan) heuristic randomly between 35 and 45.
Random.seed!(search_problem, 1);
reset!(search_problem); # Creates a problem instance.

awa = awastar_search(search_problem, 2, 10, 10000);  # runs AWA* on the puzzle with a weight=2, a timelimit of 10 seconds and node-expansions limit of 10000.
println(awa.solution, &quot; &quot;, awa.solution_cost)

rwa = rwastar_search(search_problem, [1,2,3,4,5], 10, 10000, 42); # RWA* with weight set {1,2,3,4,5}, timelimit 10 seconds, node-expansions limit 10000, and RWA*'s random seed = 42.
println(rwa.solution, &quot; &quot;, rwa.solution_cost)"><pre><span class="pl-k">using</span> AnytimeWeightedAStar
<span class="pl-k">using</span> AnytimeWeightedAStar<span class="pl-k">.</span>SearchProblem
<span class="pl-k">using</span> AnytimeWeightedAStar<span class="pl-k">.</span>ExampleProblems  <span class="pl-c"><span class="pl-c">#</span> Sliding Puzzle, Inverse Sliding Puzzle, Traveling Salesman Problem, City Navigation Problem. See src/example_problems directory for more details.</span>
<span class="pl-k">using</span> Random

search_problem <span class="pl-k">=</span> <span class="pl-c1">SlidingPuzzle</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">35</span><span class="pl-k">:</span><span class="pl-c1">45</span>);  <span class="pl-c"><span class="pl-c">#</span> specifies a 4x4 sliding puzzle (also knowing as 15-Puzzle) with starting state (manhattan) heuristic randomly between 35 and 45.</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(search_problem, <span class="pl-c1">1</span>);
<span class="pl-c1">reset!</span>(search_problem); <span class="pl-c"><span class="pl-c">#</span> Creates a problem instance.</span>

awa <span class="pl-k">=</span> <span class="pl-c1">awastar_search</span>(search_problem, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10000</span>);  <span class="pl-c"><span class="pl-c">#</span> runs AWA* on the puzzle with a weight=2, a timelimit of 10 seconds and node-expansions limit of 10000.</span>
<span class="pl-c1">println</span>(awa<span class="pl-k">.</span>solution, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>, awa<span class="pl-k">.</span>solution_cost)

rwa <span class="pl-k">=</span> <span class="pl-c1">rwastar_search</span>(search_problem, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>], <span class="pl-c1">10</span>, <span class="pl-c1">10000</span>, <span class="pl-c1">42</span>); <span class="pl-c"><span class="pl-c">#</span> RWA* with weight set {1,2,3,4,5}, timelimit 10 seconds, node-expansions limit 10000, and RWA*'s random seed = 42.</span>
<span class="pl-c1">println</span>(rwa<span class="pl-k">.</span>solution, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>, rwa<span class="pl-k">.</span>solution_cost)</pre></div>
<p dir="auto">See <code>scripts/solve_all.jl</code> for more examples.</p>
<h2 dir="auto"><a id="user-content-creating-new-search-problems" class="anchor" aria-hidden="true" href="#creating-new-search-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating New Search Problems</h2>
<p dir="auto">The AbstractSearchProblem struct and the interface functions for creating new search problems are defined in <code>src/search_problem/abstract_search_problem.jl</code>. Look at <code>src/example_problems/npuzzle.jl</code> for an example of a search problem.</p>
</article></div>