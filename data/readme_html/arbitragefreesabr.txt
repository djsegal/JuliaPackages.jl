<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-package-arbitragefreesabr" class="anchor" aria-hidden="true" href="#package-arbitragefreesabr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package ArbitrageFreeSABR</h1>
<table>
<thead>
<tr>
<th align="center">Status</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/fabienlefloch/ArbitrageFreeSABR.jl/actions/workflows/julia-runtests.yml/badge.svg"><img src="https://github.com/fabienlefloch/ArbitrageFreeSABR.jl/actions/workflows/julia-runtests.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/fabienlefloch/ArbitrageFreeSABR.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0529e43a5b3753bb76e2641c78c66306995000f5ee6971fef1376fce8722d8bb/687474703a2f2f636f6465636f762e696f2f6769746875622f66616269656e6c65666c6f63682f41726269747261676546726565534142522e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/fabienlefloch/ArbitrageFreeSABR.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Julia package to accompany the paper <a href="https://www.risk.net/journal-of-computational-finance/2465429/finite-difference-techniques-for-arbitrage-free-sabr" rel="nofollow">Finite Difference Techniques for Arbitrage-Free SABR</a>. The code is not meant for production purpose and does not cater for corner cases. It is only meant to illustrate the main techniques described in the paper.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In a Julia REPL, enter <code>pkg</code> mode (by pressing <code>]</code>) and run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.0) pkg&gt; add ArbitrageFreeSABR"><pre>(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add ArbitrageFreeSABR</pre></div>
<p dir="auto"><a href="https://julianlang.org" rel="nofollow">Julia</a> version 1.0 or higher is required.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Start by creating a <code>SABRMaturity</code> structure, which represents the parameters of the SABR model for a given option maturity. It takes the SABR parameters α,β,ρ,ν as well as the forward and the expiry time (in fractions of year - <code>expiry=1.0</code> means 1 year). An additional parameter specifies the underlying SABRModel, which can be either the standard <code>ArbitrageFreeSABRModel()</code> or the <code>FreeBoundarySABRModel()</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="maturity = SABRMaturity(α,β,ρ,ν,forward,expiry,ArbitrageFreeSABRModel())"><pre>maturity <span class="pl-k">=</span> <span class="pl-c1">SABRMaturity</span>(α,β,ρ,ν,forward,expiry,<span class="pl-c1">ArbitrageFreeSABRModel</span>())</pre></div>
<p dir="auto">Then make a <code>TransformedDensity</code> structure via <code>makeTransformedDensityLawsonSwayne</code>. This function will solve the arbitrage-free PDE on a grid using the specified number of space steps <code>N</code> and time steps <code>timesteps</code>, and spanning <code>nd</code> standard deviations below and above. <code>nd=4</code> is a reasonable choice.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="density = makeTransformedDensityLawsonSwayne(maturity, N, timesteps, nd)"><pre>density <span class="pl-k">=</span> <span class="pl-c1">makeTransformedDensityLawsonSwayne</span>(maturity, N, timesteps, nd)</pre></div>
<p dir="auto">And price vanilla call and puts of a given strike by evaluating the <code>TransformedDensity</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="priceTransformedDensity(density, true, strike, ArbitrageFreeSABR.midpoint)"><pre><span class="pl-c1">priceTransformedDensity</span>(density, <span class="pl-c1">true</span>, strike, ArbitrageFreeSABR<span class="pl-k">.</span>midpoint)</pre></div>
<p dir="auto">The second parameter specifies whether we want to price a call (true) or a put (false). The last parameter specifies the interpolation in between grid nodes. The original Hagan et al.(2014) paper corresponds to <code>ArbitrageFreeSABR.none</code>, while our paper corresponds to <code>ArbitrageFreeSABR.midpoint</code>. In the future, we may add a quadratic interpolation.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-price-from-the-paper-hagan-example" class="anchor" aria-hidden="true" href="#price-from-the-paper-hagan-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Price from the paper: Hagan example</h3>
<p dir="auto">We use the same parameters as the example of negative density with the standard SABR
formula in (Hagan et al., 2014): α = 35%, β = 0.25, ρ = −10%, ν = 100% and forward f = 1% for a maturity of one year.
The finite difference grid extends to <code>nd=4</code> standard deviations and is composed of <code>N=500</code> steps for the probability density dimension ϑ and 5 time steps.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ArbitrageFreeSABR

forward = 1.0; expiry = 1.0;
α = 0.35; β = 0.25; ν = 1.0; ρ = -0.1;
N = 500; timesteps = 5; nd = 4;
maturity = SABRMaturity(α,β,ρ,ν,forward,expiry,ArbitrageFreeSABRModel())
density = makeTransformedDensityLawsonSwayne(maturity, N, timesteps, nd)
isCall = true; strike = forward;
priceTransformedDensity(density, isCall, strike, ArbitrageFreeSABR.midpoint)"><pre><span class="pl-k">using</span> ArbitrageFreeSABR

forward <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; expiry <span class="pl-k">=</span> <span class="pl-c1">1.0</span>;
α <span class="pl-k">=</span> <span class="pl-c1">0.35</span>; β <span class="pl-k">=</span> <span class="pl-c1">0.25</span>; ν <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; ρ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.1</span>;
N <span class="pl-k">=</span> <span class="pl-c1">500</span>; timesteps <span class="pl-k">=</span> <span class="pl-c1">5</span>; nd <span class="pl-k">=</span> <span class="pl-c1">4</span>;
maturity <span class="pl-k">=</span> <span class="pl-c1">SABRMaturity</span>(α,β,ρ,ν,forward,expiry,<span class="pl-c1">ArbitrageFreeSABRModel</span>())
density <span class="pl-k">=</span> <span class="pl-c1">makeTransformedDensityLawsonSwayne</span>(maturity, N, timesteps, nd)
isCall <span class="pl-k">=</span> <span class="pl-c1">true</span>; strike <span class="pl-k">=</span> forward;
<span class="pl-c1">priceTransformedDensity</span>(density, isCall, strike, ArbitrageFreeSABR<span class="pl-k">.</span>midpoint)</pre></div>
<p dir="auto">The reference price is 0.149701955629</p>
<h3 dir="auto"><a id="user-content-plot-the-implied-density" class="anchor" aria-hidden="true" href="#plot-the-implied-density"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plot the implied density</h3>
<p dir="auto">Here, we reproduce the plot of the implied density, using the parameters of Hagan et al. (2014), using a small grid.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ArbitrageFreeSABR
using Gadfly

forward = 1.0; expiry = 1.0;
α = 0.35; β = 0.25; ν = 1.0; ρ = -0.1;
N = 50; timesteps = 5; nd = 4;
maturity = SABRMaturity(α,β,ρ,ν,forward,expiry,ArbitrageFreeSABRModel())
density = makeTransformedDensityLawsonSwayne(maturity, N, timesteps, nd)"><pre><span class="pl-k">using</span> ArbitrageFreeSABR
<span class="pl-k">using</span> Gadfly

forward <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; expiry <span class="pl-k">=</span> <span class="pl-c1">1.0</span>;
α <span class="pl-k">=</span> <span class="pl-c1">0.35</span>; β <span class="pl-k">=</span> <span class="pl-c1">0.25</span>; ν <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; ρ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.1</span>;
N <span class="pl-k">=</span> <span class="pl-c1">50</span>; timesteps <span class="pl-k">=</span> <span class="pl-c1">5</span>; nd <span class="pl-k">=</span> <span class="pl-c1">4</span>;
maturity <span class="pl-k">=</span> <span class="pl-c1">SABRMaturity</span>(α,β,ρ,ν,forward,expiry,<span class="pl-c1">ArbitrageFreeSABRModel</span>())
density <span class="pl-k">=</span> <span class="pl-c1">makeTransformedDensityLawsonSwayne</span>(maturity, N, timesteps, nd)</pre></div>
<p dir="auto">We may plot the internal discrete density:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(x=density.zm, y=density.ϑ, Geom.line,  Guide.ylabel(&quot;Grid density&quot;),Guide.xlabel(&quot;ϑ&quot;))"><pre><span class="pl-c1">plot</span>(x<span class="pl-k">=</span>density<span class="pl-k">.</span>zm, y<span class="pl-k">=</span>density<span class="pl-k">.</span>ϑ, Geom<span class="pl-k">.</span>line,  Guide<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Grid density<span class="pl-pds">"</span></span>),Guide<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>ϑ<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">The implied probability density is obtained by computing the second derivative of the call option prices, here we implement a simple numerical differentiation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ε = 1e-3; h = 2.0/1000; strikes = collect(0:1000) * h .+ ε;
impliedDensity = zeros(length(strikes));
price(strike) = priceTransformedDensity(density, true, strike, ArbitrageFreeSABR.midpoint)
@. impliedDensity = (price(strikes+ε)-2*price(strikes) +price(strikes-ε)) /ε^2
plot(x=strikes[2:end],y=impliedDensity[2:end], Geom.line, Guide.ylabel(&quot;Implied density&quot;),Guide.xlabel(&quot;Strike&quot;))"><pre>ε <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>; h <span class="pl-k">=</span> <span class="pl-c1">2.0</span><span class="pl-k">/</span><span class="pl-c1">1000</span>; strikes <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1000</span>) <span class="pl-k">*</span> h <span class="pl-k">.+</span> ε;
impliedDensity <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(strikes));
<span class="pl-en">price</span>(strike) <span class="pl-k">=</span> <span class="pl-c1">priceTransformedDensity</span>(density, <span class="pl-c1">true</span>, strike, ArbitrageFreeSABR<span class="pl-k">.</span>midpoint)
<span class="pl-c1">@.</span> impliedDensity <span class="pl-k">=</span> (<span class="pl-c1">price</span>(strikes<span class="pl-k">+</span>ε)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">price</span>(strikes) <span class="pl-k">+</span><span class="pl-c1">price</span>(strikes<span class="pl-k">-</span>ε)) <span class="pl-k">/</span>ε<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">plot</span>(x<span class="pl-k">=</span>strikes[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>],y<span class="pl-k">=</span>impliedDensity[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>], Geom<span class="pl-k">.</span>line, Guide<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Implied density<span class="pl-pds">"</span></span>),Guide<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Strike<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">This results in the following figure.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./hagan_density.svg"><img src="./hagan_density.svg" alt="Implied density of the arbitrage-free SABR model, using Hagan (2014) parameters" title="Implied density of the arbitrage-free SABR model, using Hagan (2014)" style="max-width: 100%;"></a></p>
<p dir="auto">As we used only 50 space steps, we can see clearly the staircase.</p>
<h3 dir="auto"><a id="user-content-implied-volatility-of-the-free-boundary-sabr-model" class="anchor" aria-hidden="true" href="#implied-volatility-of-the-free-boundary-sabr-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implied volatility of the free-boundary SABR model</h3>
<p dir="auto">Here is an example of how to use the free-boundary SABR model instead of the more classic SABR model. We use the same parameters as Antonov et al. for the free-boundary SABR model: forward = 50 bps, β = 0.1; α = 0.5*forward^(1-β); ν = 0.30; ρ = -0.30 for an option of expiring in three years. Because the model allows for negative strikes, we will plot the volatility in the Bachelier model (the b.p. vol corresponds to the Bachelier vol multiplied by 10000) implied by each option price.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Gadfly
using ArbitrageFreeSABR

forward = 50*1e-4; expiry = 3.0;
β = 0.1; α = 0.5*forward^(1-β); ν = 0.30; ρ = -0.30;
N = 500; timesteps = 50; nd = 4;
maturity = SABRMaturity(α,β,ρ,ν,forward,expiry,FreeBoundarySABRModel())
density = makeTransformedDensityLawsonSwayne(maturity, N, timesteps, nd)

h = 5.0/1000; strikes = (collect(0:1000) * h .- 1.0)*forward ; prices = zeros(length(strikes));
price(strike) = priceTransformedDensity(density, true, strike, ArbitrageFreeSABR.midpoint)
@. prices = price(strikes)
vols = zeros(length(strikes));
vol(price, strike) = bachelierVolatility(price, true, strike, forward, expiry)
@. vols = vol(prices, strikes)
plot(x=strikes/forward,y=vols, Geom.line, Guide.ylabel(&quot;Implied volatility&quot;),Guide.xlabel(&quot;Strike in forward units&quot;))"><pre><span class="pl-k">using</span> Gadfly
<span class="pl-k">using</span> ArbitrageFreeSABR

forward <span class="pl-k">=</span> <span class="pl-c1">50</span><span class="pl-k">*</span><span class="pl-c1">1e-4</span>; expiry <span class="pl-k">=</span> <span class="pl-c1">3.0</span>;
β <span class="pl-k">=</span> <span class="pl-c1">0.1</span>; α <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>forward<span class="pl-k">^</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>β); ν <span class="pl-k">=</span> <span class="pl-c1">0.30</span>; ρ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.30</span>;
N <span class="pl-k">=</span> <span class="pl-c1">500</span>; timesteps <span class="pl-k">=</span> <span class="pl-c1">50</span>; nd <span class="pl-k">=</span> <span class="pl-c1">4</span>;
maturity <span class="pl-k">=</span> <span class="pl-c1">SABRMaturity</span>(α,β,ρ,ν,forward,expiry,<span class="pl-c1">FreeBoundarySABRModel</span>())
density <span class="pl-k">=</span> <span class="pl-c1">makeTransformedDensityLawsonSwayne</span>(maturity, N, timesteps, nd)

h <span class="pl-k">=</span> <span class="pl-c1">5.0</span><span class="pl-k">/</span><span class="pl-c1">1000</span>; strikes <span class="pl-k">=</span> (<span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1000</span>) <span class="pl-k">*</span> h <span class="pl-k">.-</span> <span class="pl-c1">1.0</span>)<span class="pl-k">*</span>forward ; prices <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(strikes));
<span class="pl-en">price</span>(strike) <span class="pl-k">=</span> <span class="pl-c1">priceTransformedDensity</span>(density, <span class="pl-c1">true</span>, strike, ArbitrageFreeSABR<span class="pl-k">.</span>midpoint)
<span class="pl-c1">@.</span> prices <span class="pl-k">=</span> <span class="pl-c1">price</span>(strikes)
vols <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(strikes));
<span class="pl-en">vol</span>(price, strike) <span class="pl-k">=</span> <span class="pl-c1">bachelierVolatility</span>(price, <span class="pl-c1">true</span>, strike, forward, expiry)
<span class="pl-c1">@.</span> vols <span class="pl-k">=</span> <span class="pl-c1">vol</span>(prices, strikes)
<span class="pl-c1">plot</span>(x<span class="pl-k">=</span>strikes<span class="pl-k">/</span>forward,y<span class="pl-k">=</span>vols, Geom<span class="pl-k">.</span>line, Guide<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Implied volatility<span class="pl-pds">"</span></span>),Guide<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Strike in forward units<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./antonov_bachelier.svg"><img src="./antonov_bachelier.svg" alt="Implied Bachelier volatility of the free-boundary SABR model, using Antonov et al. parameters" title="Implied Bachelier volatility of the free-boundary SABR model, using Antonov et al. parameters" style="max-width: 100%;"></a></p>
<p dir="auto">We may plot the implied density similarly as in our previous example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ε = 1e-4; impliedDensity = zeros(length(strikes));
@. impliedDensity = (price(strikes+ε)-2*price(strikes) +price(strikes-ε)) /ε^2
plot(x=strikes[1:end]/forward,y=impliedDensity[1:end], Geom.line, Guide.ylabel(&quot;Implied density&quot;),Guide.xlabel(&quot;Strike in forward units&quot;))"><pre>ε <span class="pl-k">=</span> <span class="pl-c1">1e-4</span>; impliedDensity <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(strikes));
<span class="pl-c1">@.</span> impliedDensity <span class="pl-k">=</span> (<span class="pl-c1">price</span>(strikes<span class="pl-k">+</span>ε)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">price</span>(strikes) <span class="pl-k">+</span><span class="pl-c1">price</span>(strikes<span class="pl-k">-</span>ε)) <span class="pl-k">/</span>ε<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">plot</span>(x<span class="pl-k">=</span>strikes[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">/</span>forward,y<span class="pl-k">=</span>impliedDensity[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>], Geom<span class="pl-k">.</span>line, Guide<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Implied density<span class="pl-pds">"</span></span>),Guide<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Strike in forward units<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./antonov_density.svg"><img src="./antonov_density.svg" alt="Implied density of the free-boundary SABR model, using Antonov et al. parameters" title="Implied density of the free-boundary SABR model, using Antonov et al. parameters" style="max-width: 100%;"></a></p>
<p dir="auto">This shows the spike at the strike price of zero, of Antonov et al.. This spike stems from the model, and not from any artificial numerical error.</p>
<h3 dir="auto"><a id="user-content-convergence-table" class="anchor" aria-hidden="true" href="#convergence-table"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Convergence table</h3>
<p dir="auto">Here, we compute the at-the-money implied volatility for a sequence of doubling time steps and space steps, as well as the ratio of the differences between consecutive results. A ratio of 4 corresponds to second-order convergence.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ArbitrageFreeSABR
using DataFrames

forward = 1.0; expiry = 1.0;
α = 0.35; β = 0.25; ν = 1.0; ρ = -0.1;
maturity = SABRMaturity(α,β,ρ,ν,forward,expiry,ArbitrageFreeSABRModel())
isCall = true; strike = forward;
N = collect(0:5); @. N = 2 ^ N * 80;
timesteps = collect(0:5); @. timesteps = 2^ timesteps * 5;
vol0 = NaN
diff0 = NaN
df = DataFrame(N=Int[], timesteps=Int[], ATM_vol=Float64[], diff=Float64[], ratio=Float64[])
for (Ni, timestepsi) in zip(N, timesteps)
  density = makeTransformedDensityLawsonSwayne(maturity, Ni, timestepsi, 4)  
  price = priceTransformedDensity(density, isCall, strike, ArbitrageFreeSABR.midpoint)
  vol = 100*impliedVolatilityLiSORTS(price, true, strike, forward, expiry, 1.0, 0.0, 1e-12, 64)
  global df = vcat(df, DataFrame(N=Ni, timesteps=timestepsi, ATM_vol=vol, diff=vol-vol0, ratio= diff0/(vol-vol0)))
  global diff0 = vol-vol0
  global vol0 = vol
end
print(df)"><pre><span class="pl-k">using</span> ArbitrageFreeSABR
<span class="pl-k">using</span> DataFrames

forward <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; expiry <span class="pl-k">=</span> <span class="pl-c1">1.0</span>;
α <span class="pl-k">=</span> <span class="pl-c1">0.35</span>; β <span class="pl-k">=</span> <span class="pl-c1">0.25</span>; ν <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; ρ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.1</span>;
maturity <span class="pl-k">=</span> <span class="pl-c1">SABRMaturity</span>(α,β,ρ,ν,forward,expiry,<span class="pl-c1">ArbitrageFreeSABRModel</span>())
isCall <span class="pl-k">=</span> <span class="pl-c1">true</span>; strike <span class="pl-k">=</span> forward;
N <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">5</span>); <span class="pl-c1">@.</span> N <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">^</span> N <span class="pl-k">*</span> <span class="pl-c1">80</span>;
timesteps <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">5</span>); <span class="pl-c1">@.</span> timesteps <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">^</span> timesteps <span class="pl-k">*</span> <span class="pl-c1">5</span>;
vol0 <span class="pl-k">=</span> <span class="pl-c1">NaN</span>
diff0 <span class="pl-k">=</span> <span class="pl-c1">NaN</span>
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(N<span class="pl-k">=</span>Int[], timesteps<span class="pl-k">=</span>Int[], ATM_vol<span class="pl-k">=</span>Float64[], diff<span class="pl-k">=</span>Float64[], ratio<span class="pl-k">=</span>Float64[])
<span class="pl-k">for</span> (Ni, timestepsi) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(N, timesteps)
  density <span class="pl-k">=</span> <span class="pl-c1">makeTransformedDensityLawsonSwayne</span>(maturity, Ni, timestepsi, <span class="pl-c1">4</span>)  
  price <span class="pl-k">=</span> <span class="pl-c1">priceTransformedDensity</span>(density, isCall, strike, ArbitrageFreeSABR<span class="pl-k">.</span>midpoint)
  vol <span class="pl-k">=</span> <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">impliedVolatilityLiSORTS</span>(price, <span class="pl-c1">true</span>, strike, forward, expiry, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1e-12</span>, <span class="pl-c1">64</span>)
  <span class="pl-k">global</span> df <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(df, <span class="pl-c1">DataFrame</span>(N<span class="pl-k">=</span>Ni, timesteps<span class="pl-k">=</span>timestepsi, ATM_vol<span class="pl-k">=</span>vol, diff<span class="pl-k">=</span>vol<span class="pl-k">-</span>vol0, ratio<span class="pl-k">=</span> diff0<span class="pl-k">/</span>(vol<span class="pl-k">-</span>vol0)))
  <span class="pl-k">global</span> diff0 <span class="pl-k">=</span> vol<span class="pl-k">-</span>vol0
  <span class="pl-k">global</span> vol0 <span class="pl-k">=</span> vol
<span class="pl-k">end</span>
<span class="pl-c1">print</span>(df)</pre></div>
<p dir="auto">This results in</p>
<table>
<thead>
<tr>
<th>Row</th>
<th>N</th>
<th>timesteps</th>
<th>ATM_vol</th>
<th>diff</th>
<th>ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>80</td>
<td>5</td>
<td>37.7508</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>2</td>
<td>160</td>
<td>10</td>
<td>37.7328</td>
<td>-0.0180661</td>
<td>NaN</td>
</tr>
<tr>
<td>3</td>
<td>320</td>
<td>20</td>
<td>37.7285</td>
<td>-0.00422614</td>
<td>4.27485</td>
</tr>
<tr>
<td>4</td>
<td>640</td>
<td>40</td>
<td>37.7275</td>
<td>-0.00104294</td>
<td>4.05213</td>
</tr>
<tr>
<td>5</td>
<td>1280</td>
<td>80</td>
<td>37.7272</td>
<td>-0.000258917</td>
<td>4.0281</td>
</tr>
<tr>
<td>6</td>
<td>2560</td>
<td>160</td>
<td>37.7272</td>
<td>-6.45699e-5</td>
<td>4.00988</td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-mistakes" class="anchor" aria-hidden="true" href="#mistakes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mistakes</h3>
<p dir="auto">The first moment is not strictly conserved. With regards to the continuous integral the conservation is only up to order \( O(h^2) \). It is only conserved strictly with regards to \( \hat{F}_j \). This is still useful to establish a simple call option pricing formula based on the discrete probability density.</p>
<p dir="auto">The mid-point approximation does not lead to a continuous cumulative density. It is continuous only relative to \( O(h) \). As a result, the probability density, and indirectly the gamma may exhibit spurious oscillations when the numerical differentiation step size is smaller than h. A more exact approximation is to consider a discontinuous piecewise-linear function for the probability density, such that the zero-th and first moments are preserved (with regards to \( \hat{F}<em>j \) ). The density will be guaranteed positive on the condition that \( \hat{F}<em>j &gt; \frac{1}{3}F_j + \frac{2}{3} F</em>{j-1} \). Alternatively, a C2 cubic spline interpolation on top of the call prices at the knots \((F_j)\)
may be used, along with first derivatives \( -1+P_L, -P_R \), at \( F</em>{\min}, F_{\max} \). This leads to a continuous probability density function, and will respect zero-th and first moment conservation formulas over the full interval (rather than over sub-intervals). Note that it is a priori not guaranteed that the interpolated density will stay positive.</p>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<p dir="auto">In a Julia REPL session, enter <code>pkg</code> mode and run <code>test ArbitrageFreeSABR</code>.</p>
</article></div>