<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-betterfilewatchingjl" class="anchor" aria-hidden="true" href="#betterfilewatchingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BetterFileWatching.jl</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="watch_folder(f::Function, dir=&quot;.&quot;)"><pre><span class="pl-c1">watch_folder</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>, dir<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Watch a folder recursively for any changes. Includes changes to file contents. A <a href="@ref"><code>FileEvent</code></a> is passed to the callback function <code>f</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="watch_file(f::Function, filename=&quot;.&quot;)"><pre><span class="pl-c1">watch_file</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>, filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Watch a file for changes. A <a href="@ref"><code>FileEvent</code></a> is passed to the callback function <code>f</code>.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="watch_folder(&quot;.&quot;) do event
    @info &quot;Something changed!&quot; event
end"><pre><span class="pl-c1">watch_folder</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> event
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Something changed!<span class="pl-pds">"</span></span> event
<span class="pl-k">end</span></pre></div>
<p dir="auto">You can watch a folder asynchronously, and interrupt the task later:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="watch_task = @async watch_folder(&quot;.&quot;) do event
    @info &quot;Something changed!&quot; event
end

sleep(5)

# stop watching the folder
schedule(watch_task, InterruptException(); error=true)"><pre>watch_task <span class="pl-k">=</span> <span class="pl-c1">@async</span> <span class="pl-c1">watch_folder</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> event
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Something changed!<span class="pl-pds">"</span></span> event
<span class="pl-k">end</span>

<span class="pl-c1">sleep</span>(<span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> stop watching the folder</span>
<span class="pl-c1">schedule</span>(watch_task, <span class="pl-c1">InterruptException</span>(); error<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h1 dir="auto"><a id="user-content-differences-with-the-filewatching-stdlib" class="anchor" aria-hidden="true" href="#differences-with-the-filewatching-stdlib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Differences with the FileWatching stdlib</h1>
<p dir="auto"><code>BetterFileWatching.watch_file</code> is an alternative to <code>FileWatching.watch_file</code>. The differences are:</p>
<ul dir="auto">
<li>We offer an additional callback API (<code>watch_file(::Function, ::String)</code>, like the examples above), which means that <em>handling</em> events does not block <em>receiving new events</em>: we keep listening to changes asynchronously while your callback runs.</li>
<li>BetterFileWatching.jl is just a small wrapper around <a href="https://doc.deno.land/builtin/stable#Deno.watchFs" rel="nofollow"><code>Deno.watchFs</code></a>, made available through the <a href="https://github.com/JuliaBinaryWrappers/Deno_jll.jl">Deno_jll</a> package. <code>Deno.watchFs</code> is well-tested and widely used.</li>
</ul>
<p dir="auto"><code>BetterFileWatching.watch_folder</code> is an alternative to <code>FileWatching.watch_folder</code>. The differences are, in addition to those mentioned above for <code>watch_file</code>:</p>
<ul dir="auto">
<li><code>BetterFileWatching.watch_folder</code> works <em>recursively</em>, i.e. subfolders are also watched.</li>
<li><code>BetterFileWatching.watch_folder</code> also watches for changes to the <em>contents</em> of files contained in the folder.</li>
</ul>
<hr>
<p dir="auto">In fact, <code>BetterFileWatching.watch_file</code> and <code>BetterFileWatching.watch_folder</code> are actually just the same function! It handles both files and folders.</p>
</article></div>