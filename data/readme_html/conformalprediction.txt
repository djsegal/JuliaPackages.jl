<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="dev/logo/wide_logo.png"><img src="dev/logo/wide_logo.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliatrustworthyai.github.io/ConformalPrediction.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://juliatrustworthyai.github.io/ConformalPrediction.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://github.com/juliatrustworthyai/ConformalPrediction.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/juliatrustworthyai/ConformalPrediction.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/juliatrustworthyai/ConformalPrediction.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f44ed9d79338fc83a1e834624c0da98012e64786e30f035cd0215e78550e5cc8/68747470733a2f2f636f6465636f762e696f2f67682f6a756c69617472757374776f7274687961692f436f6e666f726d616c50726564696374696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliatrustworthyai/ConformalPrediction.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a> <a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/85779b6394f8a19cd849938c5e3862184e946784ea3cb531ebbfb9b34ab2ffc2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c65742e706e67" alt="ColPrac: Contributor‚Äôs Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet.png" style="max-width: 100%;"></a> <a href="https://twitter.com/paltmey" rel="nofollow"><img src="https://camo.githubusercontent.com/60fab44ccab4408ab5e34547279a18ac74a259976c8a14cc3c0b55544d690175/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f70616c746d65792e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343070616c746d6579" alt="Twitter Badge" data-canonical-src="https://img.shields.io/twitter/url/https/twitter.com/paltmey.svg?style=social&amp;label=Follow%20%40paltmey" style="max-width: 100%;"></a></p>
<p dir="auto"><code>ConformalPrediction.jl</code> is a package for Predictive Uncertainty Quantification (UQ) through Conformal Prediction (CP) in Julia. It is designed to work with supervised models trained in <a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a> (Blaom et al. 2020). Conformal Prediction is easy-to-understand, easy-to-use and model-agnostic and it works under minimal distributional assumptions.</p>
<h2 dir="auto"><a id="user-content--quick-tour" class="anchor" aria-hidden="true" href="#-quick-tour"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="runner" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png">üèÉ</g-emoji> Quick Tour</h2>
<blockquote>
<p dir="auto">First time here? Take a quick interactive <a href="https://binder.plutojl.org/v0.19.12/open?url=https%253A%252F%252Fraw.githubusercontent.com%252Fpat-alt%252FConformalPrediction.jl%252Fmain%252Fdocs%252Fpluto%252Fintro.jl" rel="nofollow">tour</a> to see what this package can do: <a href="https://binder.plutojl.org/v0.19.12/open?url=https%253A%252F%252Fraw.githubusercontent.com%252Fpat-alt%252FConformalPrediction.jl%252Fmain%252Fdocs%252Fpluto%252Fintro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width: 100%;"></a></p>
</blockquote>
<p dir="auto">The button takes you to a <a href="https://github.com/fonsp/Pluto.jl"><code>Pluto.jl</code></a> <g-emoji class="g-emoji" alias="balloon" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f388.png">üéà</g-emoji> notebook hosted on <a href="https://mybinder.org/" rel="nofollow">binder</a>. In my own experience, this may take some time to load, certainly long enough to get yourself a hot beverage <g-emoji class="g-emoji" alias="coffee" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png">‚òï</g-emoji>. Alternatively, you can run the notebook locally or skip the tour for now and read on below.</p>
<h3 dir="auto"><a id="user-content-local-tour" class="anchor" aria-hidden="true" href="#local-tour"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Local Tour</h3>
<p dir="auto">To run the tour locally, just clone this repo and start <code>Pluto.jl</code> as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add Pluto
using Pluto
Pluto.run()"><pre>] add Pluto
<span class="pl-k">using</span> Pluto
Pluto<span class="pl-k">.</span><span class="pl-c1">run</span>()</pre></div>
<p dir="auto">All notebooks are contained in <code>docs/pluto</code>.</p>
<h2 dir="auto"><a id="user-content--background" class="anchor" aria-hidden="true" href="#-background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png">üìñ</g-emoji> Background</h2>
<p dir="auto">Don‚Äôt worry, we‚Äôre not about to deep-dive into methodology. But just to give you a high-level description of Conformal Prediction (CP) upfront:</p>
<blockquote>
<p dir="auto">Conformal prediction (a.k.a. conformal inference) is a user-friendly paradigm for creating statistically rigorous uncertainty sets/intervals for the predictions of such models. Critically, the sets are valid in a distribution-free sense: they possess explicit, non-asymptotic guarantees even without distributional assumptions or model assumptions.</p>
<p dir="auto">‚Äî Angelopoulos and Bates (2021)</p>
</blockquote>
<p dir="auto">Intuitively, CP works under the premise of turning heuristic notions of uncertainty into rigorous uncertainty estimates through repeated sampling or the use of dedicated calibration data.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/pat-alt/pat-alt.github.io/main/blog/posts/conformal-regression/www/medium.gif"><img src="https://raw.githubusercontent.com/pat-alt/pat-alt.github.io/main/blog/posts/conformal-regression/www/medium.gif" alt="Conformal Prediction in action: prediction intervals at varying coverage rates. As coverage grows, so does the width of the prediction interval." data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto">The animation above is lifted from a small blog <a href="https://www.paltmeyer.com/blog/posts/conformal-regression/" rel="nofollow">post</a> that introduces Conformal Prediction and this package in the context of regression. It shows how the prediction interval and the test points that it covers varies in size as the user-specified coverage rate changes.</p>
<h2 dir="auto"><a id="user-content--installation" class="anchor" aria-hidden="true" href="#-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="triangular_flag_on_post" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png">üö©</g-emoji> Installation</h2>
<p dir="auto">You can install the latest stable release from the general registry:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ConformalPrediction&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ConformalPrediction<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The development version can be installed as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/juliatrustworthyai/ConformalPrediction.jl&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/juliatrustworthyai/ConformalPrediction.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content--usage-example" class="anchor" aria-hidden="true" href="#-usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="mag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png">üîç</g-emoji> Usage Example</h2>
<p dir="auto">To illustrate the intended use of the package, let‚Äôs have a quick look at a simple regression problem. We first generate some synthetic data and then determine indices for our training and test data using <a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MLJ

# Inputs:
N = 600
xmax = 3.0
using Distributions
d = Uniform(-xmax, xmax)
X = rand(d, N)
X = reshape(X, :, 1)

# Outputs:
noise = 0.5
fun(X) = X * sin(X)
Œµ = randn(N) .* noise
y = @.(fun(X)) + Œµ
y = vec(y)

# Partition:
train, test = partition(eachindex(y), 0.4, 0.4, shuffle=true)"><pre><span class="pl-k">using</span> MLJ

<span class="pl-c"><span class="pl-c">#</span> Inputs:</span>
N <span class="pl-k">=</span> <span class="pl-c1">600</span>
xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>
<span class="pl-k">using</span> Distributions
d <span class="pl-k">=</span> <span class="pl-c1">Uniform</span>(<span class="pl-k">-</span>xmax, xmax)
X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(d, N)
X <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(X, :, <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Outputs:</span>
noise <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
<span class="pl-en">fun</span>(X) <span class="pl-k">=</span> X <span class="pl-k">*</span> <span class="pl-c1">sin</span>(X)
Œµ <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N) <span class="pl-k">.*</span> noise
y <span class="pl-k">=</span> <span class="pl-c1">@.</span>(<span class="pl-c1">fun</span>(X)) <span class="pl-k">+</span> Œµ
y <span class="pl-k">=</span> <span class="pl-c1">vec</span>(y)

<span class="pl-c"><span class="pl-c">#</span> Partition:</span>
train, test <span class="pl-k">=</span> <span class="pl-c1">partition</span>(<span class="pl-c1">eachindex</span>(y), <span class="pl-c1">0.4</span>, <span class="pl-c1">0.4</span>, shuffle<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">We then import a decision-tree based regressor (<a href="https://github.com/Evovest/EvoTrees.jl"><code>EvoTrees.jl</code></a>) following the standard <a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a> procedure.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="EvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees
model = EvoTreeRegressor(rounds=100) "><pre>EvoTreeRegressor <span class="pl-k">=</span> <span class="pl-c1">@load</span> EvoTreeRegressor pkg<span class="pl-k">=</span>EvoTrees
model <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(rounds<span class="pl-k">=</span><span class="pl-c1">100</span>) </pre></div>
<p dir="auto">To turn our conventional model into a conformal model, we just need to declare it as such by using <code>conformal_model</code> wrapper function. The generated conformal model instance can wrapped in data to create a <em>machine</em>. Finally, we proceed by fitting the machine on training data using the generic <code>fit!</code> method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ConformalPrediction
conf_model = conformal_model(model; method=:jackknife_plus)
mach = machine(conf_model, X, y)
fit!(mach, rows=train)"><pre><span class="pl-k">using</span> ConformalPrediction
conf_model <span class="pl-k">=</span> <span class="pl-c1">conformal_model</span>(model; method<span class="pl-k">=</span><span class="pl-c1">:jackknife_plus</span>)
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(conf_model, X, y)
<span class="pl-c1">fit!</span>(mach, rows<span class="pl-k">=</span>train)</pre></div>
<p dir="auto">Predictions can then be computed using the generic <code>predict</code> method. The code below produces predictions for the first <code>n</code> samples. Each tuple contains the lower and upper bound for the prediction interval.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="show_first = 5
Xtest = selectrows(X, test)
ytest = y[test]
yÃÇ = predict(mach, Xtest)
yÃÇ[1:show_first]"><pre>show_first <span class="pl-k">=</span> <span class="pl-c1">5</span>
Xtest <span class="pl-k">=</span> <span class="pl-c1">selectrows</span>(X, test)
ytest <span class="pl-k">=</span> y[test]
yÃÇ <span class="pl-k">=</span> <span class="pl-c1">predict</span>(mach, Xtest)
yÃÇ[<span class="pl-c1">1</span><span class="pl-k">:</span>show_first]</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="5-element Vector{Tuple{Float64, Float64}}:
 (0.3514065102722679, 2.4948272235282696)
 (-0.36580206168104035, 1.7780775120607)
 (0.13671800582612756, 2.2792132778975933)
 (0.15237308545277795, 2.2801138611534326)
 (0.19080981472120032, 2.3863592104933966)"><pre class="notranslate"><code>5-element Vector{Tuple{Float64, Float64}}:
 (0.3514065102722679, 2.4948272235282696)
 (-0.36580206168104035, 1.7780775120607)
 (0.13671800582612756, 2.2792132778975933)
 (0.15237308545277795, 2.2801138611534326)
 (0.19080981472120032, 2.3863592104933966)
</code></pre></div>
<p dir="auto">For simple models like this one, we can call a custom <code>Plots</code> recipe on our instance, fit result and data to generate the chart below:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
zoom = 0
plt = plot(mach.model, mach.fitresult, Xtest, ytest, zoom=zoom, observed_lab=&quot;Test points&quot;)
xrange = range(-xmax+zoom,xmax-zoom,length=N)
plot!(plt, xrange, @.(fun(xrange)), lw=1, ls=:dash, colour=:black, label=&quot;Ground truth&quot;)"><pre><span class="pl-k">using</span> Plots
zoom <span class="pl-k">=</span> <span class="pl-c1">0</span>
plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(mach<span class="pl-k">.</span>model, mach<span class="pl-k">.</span>fitresult, Xtest, ytest, zoom<span class="pl-k">=</span>zoom, observed_lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Test points<span class="pl-pds">"</span></span>)
xrange <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span>xmax<span class="pl-k">+</span>zoom,xmax<span class="pl-k">-</span>zoom,length<span class="pl-k">=</span>N)
<span class="pl-c1">plot!</span>(plt, xrange, <span class="pl-c1">@.</span>(<span class="pl-c1">fun</span>(xrange)), lw<span class="pl-k">=</span><span class="pl-c1">1</span>, ls<span class="pl-k">=</span><span class="pl-c1">:dash</span>, colour<span class="pl-k">=</span><span class="pl-c1">:black</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Ground truth<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="README_files/figure-commonmark/cell-7-output-1.svg"><img src="README_files/figure-commonmark/cell-7-output-1.svg" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">We can evaluate the conformal model using the standard <a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a> workflow with a custom performance measure. You can use either <code>emp_coverage</code> for the overall empirical coverage (correctness) or <code>ssc</code> for the size-stratified coverage rate (adaptiveness).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="_eval = evaluate!(mach; measure=[emp_coverage, ssc], verbosity=0)
display(_eval)
println(&quot;Empirical coverage: $(round(_eval.measurement[1], digits=3))&quot;)
println(&quot;SSC: $(round(_eval.measurement[2], digits=3))&quot;)"><pre>_eval <span class="pl-k">=</span> <span class="pl-c1">evaluate!</span>(mach; measure<span class="pl-k">=</span>[emp_coverage, ssc], verbosity<span class="pl-k">=</span><span class="pl-c1">0</span>)
<span class="pl-c1">display</span>(_eval)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Empirical coverage: <span class="pl-v">$(<span class="pl-c1">round</span>(_eval<span class="pl-k">.</span>measurement[<span class="pl-c1">1</span>], digits<span class="pl-k">=</span><span class="pl-c1">3</span>))</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>SSC: <span class="pl-v">$(<span class="pl-c1">round</span>(_eval<span class="pl-k">.</span>measurement[<span class="pl-c1">2</span>], digits<span class="pl-k">=</span><span class="pl-c1">3</span>))</span><span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="PerformanceEvaluation object with these fields:
  measure, operation, measurement, per_fold,
  per_observation, fitted_params_per_fold,
  report_per_fold, train_test_rows
Extract:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ measure                                                   ‚îÇ operation ‚îÇ meas ‚ãØ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ emp_coverage (generic function with 1 method)             ‚îÇ predict   ‚îÇ 0.95 ‚ãØ
‚îÇ size_stratified_coverage (generic function with 1 method) ‚îÇ predict   ‚îÇ 0.84 ‚ãØ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                                               3 columns omitted

Empirical coverage: 0.95
SSC: 0.841"><pre class="notranslate"><code>PerformanceEvaluation object with these fields:
  measure, operation, measurement, per_fold,
  per_observation, fitted_params_per_fold,
  report_per_fold, train_test_rows
Extract:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ measure                                                   ‚îÇ operation ‚îÇ meas ‚ãØ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ emp_coverage (generic function with 1 method)             ‚îÇ predict   ‚îÇ 0.95 ‚ãØ
‚îÇ size_stratified_coverage (generic function with 1 method) ‚îÇ predict   ‚îÇ 0.84 ‚ãØ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                                               3 columns omitted

Empirical coverage: 0.95
SSC: 0.841
</code></pre></div>
<h2 dir="auto"><a id="user-content--read-on" class="anchor" aria-hidden="true" href="#-read-on"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png">üìö</g-emoji> Read on</h2>
<p dir="auto">If after reading the usage example above you are just left with more questions about the topic, that‚Äôs normal. Below we have have collected a number of further resources to help you get started with this package and the topic itself:</p>
<ol dir="auto">
<li>Blog post introducing conformal classifiers: [<a href="https://www.paltmeyer.com/blog/posts/conformal-prediction/" rel="nofollow">Quarto</a>], [<a href="https://medium.com/towards-data-science/conformal-prediction-in-julia-351b81309e30" rel="nofollow">TDS</a>], [<a href="https://forem.julialang.org/patalt/conformal-prediction-in-julia-h9n" rel="nofollow">Forem</a>].</li>
<li>Blog post applying CP to a deep learning image classifier: [<a href="https://www.paltmeyer.com/blog/posts/conformal-image-classifier/" rel="nofollow">Quarto</a>], [<a href="https://medium.com/towards-data-science/how-to-conformalize-a-deep-image-classifier-14ead4e1a5a0" rel="nofollow">TDS</a>], [<a href="https://forem.julialang.org/patalt/how-to-conformalize-a-deep-image-classifier-50p2" rel="nofollow">Forem</a>].</li>
<li>The package <a href="https://juliatrustworthyai.github.io/ConformalPrediction.jl/dev/" rel="nofollow">docs</a> and in particular the <a href="https://www.paltmeyer.com/ConformalPrediction.jl/dev/faq/" rel="nofollow">FAQ</a>.</li>
</ol>
<h3 dir="auto"><a id="user-content-external-resources" class="anchor" aria-hidden="true" href="#external-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>External Resources</h3>
<ul dir="auto">
<li><em>A Gentle Introduction to Conformal Prediction and Distribution-Free Uncertainty Quantification</em> by Angelopoulos and Bates (2021) (<a href="https://arxiv.org/pdf/2107.07511.pdf" rel="nofollow">pdf</a>).</li>
<li><em>Predictive inference with the jackknife+</em> by Barber et al. (2021) (<a href="https://projecteuclid.org/journals/annals-of-statistics/volume-49/issue-1/Predictive-inference-with-the-jackknife/10.1214/20-AOS1965.full" rel="nofollow">pdf</a>)</li>
<li><em>Awesome Conformal Prediction</em> repository by Valery Manokhin (<a href="https://github.com/valeman/awesome-conformal-prediction">repo</a>).</li>
<li><a href="https://mapie.readthedocs.io/en/latest/index.html" rel="nofollow">Documentation</a> for the Python package MAPIE.</li>
</ul>
<h2 dir="auto"><a id="user-content--status" class="anchor" aria-hidden="true" href="#-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="repeat" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f501.png">üîÅ</g-emoji> Status</h2>
<p dir="auto">This package is in its early stages of development and therefore still subject to changes to the core architecture and API.</p>
<h3 dir="auto"><a id="user-content-implemented-methodologies" class="anchor" aria-hidden="true" href="#implemented-methodologies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implemented Methodologies</h3>
<p dir="auto">The following CP approaches have been implemented:</p>
<p dir="auto"><strong>Regression</strong>:</p>
<ul dir="auto">
<li>Inductive</li>
<li>Naive Transductive</li>
<li>Jackknife</li>
<li>Jackknife+</li>
<li>Jackknife-minmax</li>
<li>CV+</li>
<li>CV-minmax</li>
</ul>
<p dir="auto"><strong>Classification</strong>:</p>
<ul dir="auto">
<li>Inductive</li>
<li>Naive Transductive</li>
<li>Adaptive Inductive</li>
</ul>
<p dir="auto">The package has been tested for the following supervised models offered by <a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a>.</p>
<p dir="auto"><strong>Regression</strong>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="keys(tested_atomic_models[:regression])"><pre><span class="pl-c1">keys</span>(tested_atomic_models[<span class="pl-c1">:regression</span>])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="KeySet for a Dict{Symbol, Expr} with 4 entries. Keys:
  :nearest_neighbor
  :evo_tree
  :light_gbm
  :linear"><pre class="notranslate"><code>KeySet for a Dict{Symbol, Expr} with 4 entries. Keys:
  :nearest_neighbor
  :evo_tree
  :light_gbm
  :linear
</code></pre></div>
<p dir="auto"><strong>Classification</strong>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="keys(tested_atomic_models[:classification])"><pre><span class="pl-c1">keys</span>(tested_atomic_models[<span class="pl-c1">:classification</span>])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="KeySet for a Dict{Symbol, Expr} with 4 entries. Keys:
  :nearest_neighbor
  :evo_tree
  :light_gbm
  :logistic"><pre class="notranslate"><code>KeySet for a Dict{Symbol, Expr} with 4 entries. Keys:
  :nearest_neighbor
  :evo_tree
  :light_gbm
  :logistic
</code></pre></div>
<h3 dir="auto"><a id="user-content-implemented-evaluation-metrics" class="anchor" aria-hidden="true" href="#implemented-evaluation-metrics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implemented Evaluation Metrics</h3>
<p dir="auto">To evaluate conformal predictors we are typically interested in correctness and adaptiveness. The former can be evaluated by looking at the empirical coverage rate, while the latter can be assessed through metrics that address the conditional coverage (Angelopoulos and Bates 2021). To this end, the following metrics have been implemented:</p>
<ul dir="auto">
<li><code>emp_coverage</code> (empirical coverage)</li>
<li><code>ssc</code> (size-stratified coverage)</li>
</ul>
<p dir="auto">There is also a simple <code>Plots.jl</code> recipe that can be used to inspect the set sizes. In the regression case, the interval width is stratified into discrete bins for this purpose:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bar(mach.model, mach.fitresult, X)"><pre><span class="pl-c1">bar</span>(mach<span class="pl-k">.</span>model, mach<span class="pl-k">.</span>fitresult, X)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="README_files/figure-commonmark/cell-11-output-1.svg"><img src="README_files/figure-commonmark/cell-11-output-1.svg" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content--contribute" class="anchor" aria-hidden="true" href="#-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="hammer_and_wrench" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png">üõ†</g-emoji> Contribute</h2>
<p dir="auto">Contributions are welcome! A good place to start is the <a href="https://github.com/juliatrustworthyai/ConformalPrediction.jl/issues">list</a> of outstanding issues. For more details, see also the <a href="https://www.paltmeyer.com/ConformalPrediction.jl/dev/contribute/" rel="nofollow">Contributor‚Äôs Guide</a>. Please follow the <a href="https://github.com/SciML/ColPrac">SciML ColPrac guide</a>.</p>
<h2 dir="auto"><a id="user-content--thanks" class="anchor" aria-hidden="true" href="#-thanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="pray" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png">üôè</g-emoji> Thanks</h2>
<p dir="auto">To build this package I have read and re-read both Angelopoulos and Bates (2021) and Barber et al. (2021). The Awesome Conformal Prediction <a href="https://github.com/valeman/awesome-conformal-prediction">repository</a> (Manokhin, n.d.) has also been a fantastic place to get started. Thanks also to <a href="https://github.com/aangelopoulos">@aangelopoulos</a>, <a href="https://github.com/valeman">@valeman</a> and others for actively contributing to discussions on here. Quite a few people have also recently started using and contributing to the package for which I am very grateful. Finally, many thanks to Anthony Blaom (<a href="https://github.com/ablaom">@ablaom</a>) for many helpful discussions about how to interface this package to <code>MLJ.jl</code>.</p>
<h2 dir="auto"><a id="user-content--references" class="anchor" aria-hidden="true" href="#-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="mortar_board" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png">üéì</g-emoji> References</h2>
<p dir="auto">Angelopoulos, Anastasios N., and Stephen Bates. 2021. ‚ÄúA Gentle Introduction to Conformal Prediction and Distribution-Free Uncertainty Quantification.‚Äù <a href="https://arxiv.org/abs/2107.07511" rel="nofollow">https://arxiv.org/abs/2107.07511</a>.</p>
<p dir="auto">Barber, Rina Foygel, Emmanuel J. Cand√®s, Aaditya Ramdas, and Ryan J. Tibshirani. 2021. ‚ÄúPredictive Inference with the Jackknife+.‚Äù <em>The Annals of Statistics</em> 49 (1): 486‚Äì507. <a href="https://doi.org/10.1214/20-AOS1965" rel="nofollow">https://doi.org/10.1214/20-AOS1965</a>.</p>
<p dir="auto">Blaom, Anthony D., Franz Kiraly, Thibaut Lienart, Yiannis Simillides, Diego Arenas, and Sebastian J. Vollmer. 2020. ‚ÄúMLJ: A Julia Package for Composable Machine Learning.‚Äù <em>Journal of Open Source Software</em> 5 (55): 2704. <a href="https://doi.org/10.21105/joss.02704" rel="nofollow">https://doi.org/10.21105/joss.02704</a>.</p>
<p dir="auto">Manokhin, Valery. n.d. ‚ÄúAwesome Conformal Prediction.‚Äù</p>
</article></div>