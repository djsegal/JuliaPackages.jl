<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-wellknowngeometry" class="anchor" aria-hidden="true" href="#wellknowngeometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WellKnownGeometry</h1>
<p dir="auto"><a href="https://evetion.github.io/WellKnownGeometry.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://evetion.github.io/WellKnownGeometry.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/evetion/WellKnownGeometry.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/evetion/WellKnownGeometry.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/evetion/WellKnownGeometry.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5fa2a651cbb75cffd55f2585244398a9b2fb7db98d5d7bdd538a442fe6c99d77/68747470733a2f2f636f6465636f762e696f2f67682f65766574696f6e2f57656c6c4b6e6f776e47656f6d657472792e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/evetion/WellKnownGeometry.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Reading and writing Well Known Text (WKT) and Well Known Binary (WKB) based on <a href="https://github.com/JuliaGeo/GeoInterface.jl/">GeoInterface.jl</a>. See <a href="https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry" rel="nofollow">this Wikipedia page</a> for an explanation of Well-known text and binary geometry.</p>
<p dir="auto">Given a GeoInterface compatible geometry, this package can generate the WKT and WKB representation of it.
It also does the reverse, as it implements GeoInterface for WKT or WKB strings.</p>
<h2 dir="auto"><a id="user-content-wellknowntext" class="anchor" aria-hidden="true" href="#wellknowntext"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WellKnownText</h2>
<p dir="auto">Given a WKT string, we can retrieve the type and underlying coordinates, and thus convert it to other geometries using GeoInterface.
Note that WKT strings are wrapped by GeoFormatTypes so we can distinguish them from any other strings.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ArchGDAL
using GeoFormatTypes
using WellKnownGeometry
using GeoInterface

wkts = &quot;POINT (30 10)&quot;
wkt = GeoFormatTypes.WellKnownText(GeoFormatTypes.Geom(), wkts)

GeoInterface.geomtrait(wkt)  # PointTrait()
GeoInterface.ncoord(wkt)  # 2
GeoInterface.coordinates(wkt)  # 2-element Vector{Float64}: 30.0 10.0

p = convert(ArchGDAL.IGeometry{ArchGDAL.wkbPoint}, wkt)  # Geometry: POINT (30 10)"><pre><span class="pl-k">using</span> ArchGDAL
<span class="pl-k">using</span> GeoFormatTypes
<span class="pl-k">using</span> WellKnownGeometry
<span class="pl-k">using</span> GeoInterface

wkts <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>POINT (30 10)<span class="pl-pds">"</span></span>
wkt <span class="pl-k">=</span> GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">WellKnownText</span>(GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">Geom</span>(), wkts)

GeoInterface<span class="pl-k">.</span><span class="pl-c1">geomtrait</span>(wkt)  <span class="pl-c"><span class="pl-c">#</span> PointTrait()</span>
GeoInterface<span class="pl-k">.</span><span class="pl-c1">ncoord</span>(wkt)  <span class="pl-c"><span class="pl-c">#</span> 2</span>
GeoInterface<span class="pl-k">.</span><span class="pl-c1">coordinates</span>(wkt)  <span class="pl-c"><span class="pl-c">#</span> 2-element Vector{Float64}: 30.0 10.0</span>

p <span class="pl-k">=</span> <span class="pl-c1">convert</span>(ArchGDAL<span class="pl-k">.</span>IGeometry{ArchGDAL<span class="pl-k">.</span>wkbPoint}, wkt)  <span class="pl-c"><span class="pl-c">#</span> Geometry: POINT (30 10)</span></pre></div>
<p dir="auto">As ArchGDAL geometries implement GeoInterface, we can generate the WKT for it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wkt = WellKnownGeometry.getwkt(p)  # WellKnownText{GeoFormatTypes.Geom}(GeoFormatTypes.Geom(), &quot;POINT (30.0 10.0)&quot;)
GeoFormatTypes.val(wkt)  # &quot;POINT (30.0 10.0)&quot;"><pre>wkt <span class="pl-k">=</span> WellKnownGeometry<span class="pl-k">.</span><span class="pl-c1">getwkt</span>(p)  <span class="pl-c"><span class="pl-c">#</span> WellKnownText{GeoFormatTypes.Geom}(GeoFormatTypes.Geom(), "POINT (30.0 10.0)")</span>
GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">val</span>(wkt)  <span class="pl-c"><span class="pl-c">#</span> "POINT (30.0 10.0)"</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="getwkt"><pre lang="@docs" class="notranslate"><code>getwkt
</code></pre></div>
<h2 dir="auto"><a id="user-content-wellknownbinary" class="anchor" aria-hidden="true" href="#wellknownbinary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WellKnownBinary</h2>
<p dir="auto">Given a WKB byte string, we can retrieve the type and underlying coordinates, and thus convert it to other geometries using GeoInterface.
Note that WKB byte strings are wrapped by GeoFormatTypes so we can distinguish them from any other byte strings.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ArchGDAL
using GeoFormatTypes
using WellKnownGeometry
using GeoInterface

wkbs = [0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40]
wkb = GeoFormatTypes.WellKnownBinary(GeoFormatTypes.Geom(), wkbs)

GeoInterface.geomtrait(wkb)  # PointTrait()
GeoInterface.ncoord(wkb)  # 2
GeoInterface.coordinates(wkb)  # 2-element Vector{Float64}: 30.0 10.0

p = convert(ArchGDAL.IGeometry{ArchGDAL.wkbPoint}, wkb)  # Geometry: POINT (30 10)"><pre><span class="pl-k">using</span> ArchGDAL
<span class="pl-k">using</span> GeoFormatTypes
<span class="pl-k">using</span> WellKnownGeometry
<span class="pl-k">using</span> GeoInterface

wkbs <span class="pl-k">=</span> [<span class="pl-c1">0x01</span>, <span class="pl-c1">0x01</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x3e</span>, <span class="pl-c1">0x40</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x24</span>, <span class="pl-c1">0x40</span>]
wkb <span class="pl-k">=</span> GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">WellKnownBinary</span>(GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">Geom</span>(), wkbs)

GeoInterface<span class="pl-k">.</span><span class="pl-c1">geomtrait</span>(wkb)  <span class="pl-c"><span class="pl-c">#</span> PointTrait()</span>
GeoInterface<span class="pl-k">.</span><span class="pl-c1">ncoord</span>(wkb)  <span class="pl-c"><span class="pl-c">#</span> 2</span>
GeoInterface<span class="pl-k">.</span><span class="pl-c1">coordinates</span>(wkb)  <span class="pl-c"><span class="pl-c">#</span> 2-element Vector{Float64}: 30.0 10.0</span>

p <span class="pl-k">=</span> <span class="pl-c1">convert</span>(ArchGDAL<span class="pl-k">.</span>IGeometry{ArchGDAL<span class="pl-k">.</span>wkbPoint}, wkb)  <span class="pl-c"><span class="pl-c">#</span> Geometry: POINT (30 10)</span></pre></div>
<p dir="auto">As ArchGDAL geometries implement GeoInterface, we can generate the WKB for it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wkb = WellKnownGeometry.getwkb(p)  # WellKnownBinary{GeoFormatTypes.Geom, Vector{UInt8}}(GeoFormatTypes.Geom(), UInt8[0x01, ..., 0x40])
GeoFormatTypes.val(wkb)  # 21-element Vector{UInt8}:  0x01 0x01 ... 0x00 0x40"><pre>wkb <span class="pl-k">=</span> WellKnownGeometry<span class="pl-k">.</span><span class="pl-c1">getwkb</span>(p)  <span class="pl-c"><span class="pl-c">#</span> WellKnownBinary{GeoFormatTypes.Geom, Vector{UInt8}}(GeoFormatTypes.Geom(), UInt8[0x01, ..., 0x40])</span>
GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">val</span>(wkb)  <span class="pl-c"><span class="pl-c">#</span> 21-element Vector{UInt8}:  0x01 0x01 ... 0x00 0x40</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="getwkb"><pre lang="@docs" class="notranslate"><code>getwkb
</code></pre></div>
</article></div>