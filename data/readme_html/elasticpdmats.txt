<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-elasticpdmats" class="anchor" aria-hidden="true" href="#elasticpdmats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ElasticPDMats</h1>
<p dir="auto">Efficient growing and shrinking of positive definite matrices thanks to
preallocated memory.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/jbrea/ElasticPDMats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/586d314e728463c3601244beb7526dc383c36bd51fae3604d7b4203961fcc5a2/68747470733a2f2f7472617669732d63692e636f6d2f6a627265612f456c617374696350444d6174732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jbrea/ElasticPDMats.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/jbrea/ElasticPDMats.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/67968aa2ee32c3f5168f658243a394a7770cb4149d359c4a181a51b6e5ffc2f6/687474703a2f2f636f6465636f762e696f2f6769746875622f6a627265612f456c617374696350444d6174732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jbrea/ElasticPDMats.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">In addition to the functions defined in the <a href="https://github.com/JuliaStats/PDMats.jl#common-interface">common PDMats
interface</a>,
<code>ElasticPDMat &lt;: AbstractPDMat</code> can grow with <code>append!</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = rand(10, 10); m = a'a; 
e = ElasticPDMat(m[1:8, 1:8))
append!(e, m[:, 9:10])"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>); m <span class="pl-k">=</span> a<span class="pl-k">'</span>a; 
e <span class="pl-k">=</span> <span class="pl-c1">ElasticPDMat</span>(m[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>))
<span class="pl-c1">append!</span>(e, m[:, <span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">10</span>])</pre></div>
<p dir="auto">and shrink with <code>deleteat!</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="deleteat!(e, [3, 8, 7])"><pre><span class="pl-c1">deleteat!</span>(e, [<span class="pl-c1">3</span>, <span class="pl-c1">8</span>, <span class="pl-c1">7</span>])</pre></div>
<p dir="auto">Growing and shrinking is usually efficient, because no entries are recomputed
and (basically no) new memory needs to be allocated.  <code>ElasticMat(capacity = 10^3, stepsize = 10^3)</code> allocates <code>capacity x capacity</code> matrices and creates
(initially <code>0</code>-dimensional) views to represent positive definite matrices.
Whenever the current <code>capacity</code> is reached, e.g. due to several <code>append!</code>
operations, the <code>capacity</code> increases to <code>capacity += stepsize</code>. <em>Caution:</em>
increasing the <code>capacity</code> involves allocating new memory and copying old values,
which is slow. For optimal performance, the <code>capacity</code> and the <code>stepsize</code> should
be chosen wisely. For an already initialized <code>e = ElasticPDMat()</code> they can be
set with the helper functions <code>setcapacity!(e, 100)</code> and <code>setstepsize!(e, 100)</code>.</p>
<p dir="auto">Additionally to <code>ElasticPDMat</code> this package exports view based elastic arrays of
any dimension <code>AllElasticArray</code>, <code>ElasticSymmetricMatrix</code>, <code>ElasticCholesky</code> and
the helper functions <code>setcapacity!</code>, <code>setstepsize!</code> and <code>setdimension!</code>.</p>
</article></div>