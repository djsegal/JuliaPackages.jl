<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-teestreams" class="anchor" aria-hidden="true" href="#teestreams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TeeStreams</h1>
<p>Simplify writing to multiple streams at once.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Construct a tee stream by wrapping multiple writable IO objects:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tee = TeeStream(io::IO...)
write(tee, ....)
flush(tee) # calls flush on all wrapped io
close(tee) # calls close on all wrapped io
"><pre>tee <span class="pl-k">=</span> <span class="pl-c1">TeeStream</span>(io<span class="pl-k">::</span><span class="pl-c1">IO...</span>)
<span class="pl-c1">write</span>(tee, <span class="pl-k">....</span>)
<span class="pl-c1">flush</span>(tee) <span class="pl-c"><span class="pl-c">#</span> calls flush on all wrapped io</span>
<span class="pl-c1">close</span>(tee) <span class="pl-c"><span class="pl-c">#</span> calls close on all wrapped io</span></pre></div>
<p>Construct a tee stream by wrapping multiple writable IO objects,
call function <code>f</code> on the tee, and automatically calls <code>close</code> on
all IO streams:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="TeeStream(f::Function, io::IO...) do tee
    write(tee, ...)
end
"><pre><span class="pl-c1">TeeStream</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>, io<span class="pl-k">::</span><span class="pl-c1">IO...</span>) <span class="pl-k">do</span> tee
    <span class="pl-c1">write</span>(tee, <span class="pl-k">...</span>)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-example-compress-with-multiple-encodings" class="anchor" aria-hidden="true" href="#example-compress-with-multiple-encodings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Compress with multiple encodings</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TeeStreams, CodecZlib, CodecZstd

function compress(file)
    open(file, &quot;r&quot;) do src
        TeeStream(
            GzipCompressorStream(open(file * &quot;.gz&quot;, &quot;w&quot;)),
            ZstdCompressorStream(open(file * &quot;.zst&quot;, &quot;w&quot;))
            ) do tee
            write(tee, src)
        end
    end
end

compress(&quot;Project.toml&quot;)
"><pre><span class="pl-k">using</span> TeeStreams, CodecZlib, CodecZstd

<span class="pl-k">function</span> <span class="pl-en">compress</span>(file)
    <span class="pl-c1">open</span>(file, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> src
        <span class="pl-c1">TeeStream</span>(
            <span class="pl-c1">GzipCompressorStream</span>(<span class="pl-c1">open</span>(file <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>.gz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)),
            <span class="pl-c1">ZstdCompressorStream</span>(<span class="pl-c1">open</span>(file <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>.zst<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>))
            ) <span class="pl-k">do</span> tee
            <span class="pl-c1">write</span>(tee, src)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">compress</span>(<span class="pl-s"><span class="pl-pds">"</span>Project.toml<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-example-write-data-to-checksum-function-and-to-disk" class="anchor" aria-hidden="true" href="#example-write-data-to-checksum-function-and-to-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Write data to checksum function and to disk</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TeeStreams, SHA, SimpleBufferStream

function download_verify(url, expected_shasum)
    filename = split(url, '/')[end]
    buf = BufferStream()
    @sync begin
        @async begin
            TeeStream(buf, open(filename, &quot;w&quot;)) do tee
                write(tee, open(`curl -fsSL $url`))
            end
        end
        @async begin
            shasum = bytes2hex(SHA.sha256(buf))
            if shasum != expected_shasum
                error(&quot;something went wrong&quot;)
            end
        end
    end
end

url = &quot;https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.3-linux-x86_64.tar.gz&quot;
expected_shasum = &quot;f190c938dd6fed97021953240523c9db448ec0a6760b574afd4e9924ab5615f1&quot;

download_verify(url, expected_shasum)
"><pre><span class="pl-k">using</span> TeeStreams, SHA, SimpleBufferStream

<span class="pl-k">function</span> <span class="pl-en">download_verify</span>(url, expected_shasum)
    filename <span class="pl-k">=</span> <span class="pl-c1">split</span>(url, <span class="pl-s"><span class="pl-pds">'</span>/<span class="pl-pds">'</span></span>)[<span class="pl-c1">end</span>]
    buf <span class="pl-k">=</span> <span class="pl-c1">BufferStream</span>()
    <span class="pl-c1">@sync</span> <span class="pl-k">begin</span>
        <span class="pl-c1">@async</span> <span class="pl-k">begin</span>
            <span class="pl-c1">TeeStream</span>(buf, <span class="pl-c1">open</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)) <span class="pl-k">do</span> tee
                <span class="pl-c1">write</span>(tee, <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">`</span>curl -fsSL $url<span class="pl-pds">`</span></span>))
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
        <span class="pl-c1">@async</span> <span class="pl-k">begin</span>
            shasum <span class="pl-k">=</span> <span class="pl-c1">bytes2hex</span>(SHA<span class="pl-k">.</span><span class="pl-c1">sha256</span>(buf))
            <span class="pl-k">if</span> shasum <span class="pl-k">!=</span> expected_shasum
                <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>something went wrong<span class="pl-pds">"</span></span>)
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.3-linux-x86_64.tar.gz<span class="pl-pds">"</span></span>
expected_shasum <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>f190c938dd6fed97021953240523c9db448ec0a6760b574afd4e9924ab5615f1<span class="pl-pds">"</span></span>

<span class="pl-c1">download_verify</span>(url, expected_shasum)</pre></div>
</article></div>