<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mcmcdebuggingjl-debugging-utilities-for-mcmc-samplers" class="anchor" aria-hidden="true" href="#mcmcdebuggingjl-debugging-utilities-for-mcmc-samplers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MCMCDebugging.jl: debugging utilities for MCMC samplers</h1>
<p>This package implements a few utilities for debugging MCMC samplers, which includes</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Geweke test
<ul>
<li>See the references [1,2] or <a href="https://lips.cs.princeton.edu/testing-mcmc-code-part-2-integration-tests/" rel="nofollow">this blog</a> for details</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Central limit theorem test</li>
</ul>
<p>See the <a href="https://nbviewer.jupyter.org/github/xukai92/MCMCDebugging.jl/blob/master/docs/example.ipynb" rel="nofollow">notebook</a> for an example.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The example <a href="https://nbviewer.jupyter.org/github/xukai92/MCMCDebugging.jl/blob/master/docs/example.ipynb" rel="nofollow">notebook</a> covers most of the usages.
Some details on the model definition via DynamicPPL is explained below.</p>
<h3><a id="user-content-defining-test-models-via-dynamicppljl" class="anchor" aria-hidden="true" href="#defining-test-models-via-dynamicppljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining test models via DynamicPPL.jl</h3>
<p>MCMCDebugging.jl allows using DynamicPPL.jl to define test models.
In the example <a href="https://nbviewer.jupyter.org/github/xukai92/MCMCDebugging.jl/blob/master/docs/example.ipynb" rel="nofollow">notebook</a>, the test model is defined as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@model function BetaBinomial(θ=missing, x=missing)
    θ ~ Beta(2, 3)
    x ~ Binomial(3, θ)
    return θ, x
end
"><pre><span class="pl-c1">@model</span> <span class="pl-k">function</span> <span class="pl-en">BetaBinomial</span>(θ<span class="pl-k">=</span><span class="pl-c1">missing</span>, x<span class="pl-k">=</span><span class="pl-c1">missing</span>)
    θ <span class="pl-k">~</span> <span class="pl-c1">Beta</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
    x <span class="pl-k">~</span> <span class="pl-c1">Binomial</span>(<span class="pl-c1">3</span>, θ)
    <span class="pl-k">return</span> θ, x
<span class="pl-k">end</span></pre></div>
<p>There are a few requirements from MCMCDebugging.jl to use the defined model.</p>
<ol>
<li>The model should take <code>θ</code> and <code>x</code> as inputs (in order) and optionally being <code>missing</code>.</li>
</ol>
<ul>
<li>So that the model can be used to generate the marginal sampler as e.g. <code>BetaBinomial()</code> and conditional sampler as e.g. <code>BetaBinomial(θ)</code></li>
</ul>
<ol start="2">
<li>The model should return the parameter <code>θ</code> and the data <code>x</code> as a tuple.</li>
</ol>
<p>With these two points, MCMCDebugging.jl can generate several functions used by lower-level APIs.</p>
<ol>
<li><code>rand_marginal()</code>: drawing <code>θ</code> and <code>x</code> as a tuple</li>
<li><code>rand_x_given(θ)</code>: drawing <code>x</code> conditioned on <code>θ</code></li>
<li><code>logjoint(θ, x)</code>: computing the log-joint probability of <code>θ</code> and <code>x</code></li>
</ol>
<p>1 and 2 are used to perform the Geweke test and 3 is used to make the Q-Q plot.</p>
<h2><a id="user-content-lower-level-apis" class="anchor" aria-hidden="true" href="#lower-level-apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lower-level APIs</h2>
<h3><a id="user-content-geweke-test" class="anchor" aria-hidden="true" href="#geweke-test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Geweke test</h3>
<p>Defining the Geweke test</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cfg = GewekeTest(n_samples::Int)
"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">GewekeTest</span>(n_samples<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>where <code>n_samples</code> is the number of samples used for testing.</p>
<p>Performing the Geweke test</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="res = perform(cfg::GewekeTest, rand_marginal, rand_x_given, rand_θ_given; g=nothing, progress=true)
"><pre>res <span class="pl-k">=</span> <span class="pl-c1">perform</span>(cfg<span class="pl-k">::</span><span class="pl-c1">GewekeTest</span>, rand_marginal, rand_x_given, rand_θ_given; g<span class="pl-k">=</span><span class="pl-c1">nothing</span>, progress<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>where</p>
<ul>
<li><code>rand_marginal()</code> draws <code>θ</code> and <code>x</code> as a tuple</li>
<li><code>rand_x_given(θ)</code> draws <code>x</code> conditioned on <code>θ</code></li>
<li><code>rand_θ_given(x)</code> draws <code>θ</code> conditioned on <code>x</code></li>
<li><code>g(θ, x)</code> is the test function</li>
</ul>
<p>Making the Q-Q plot</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(res::GewekeTestResult, logjoint)
"><pre><span class="pl-c1">plot</span>(res<span class="pl-k">::</span><span class="pl-c1">GewekeTestResult</span>, logjoint)</pre></div>
<p>where</p>
<ul>
<li><code>logjoint(θ, x)</code> computes the log-joint probability of <code>θ</code> and <code>x</code></li>
</ul>
<p>In case models are defined by DynamicPPL.jl, you can use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(res::GewekeTestResult, model)
"><pre><span class="pl-c1">plot</span>(res<span class="pl-k">::</span><span class="pl-c1">GewekeTestResult</span>, model)</pre></div>
<p>For example, <code>plot(res, BetaBinomial())</code>. Note we have to pass an instantiated model (i.e. BetaBinomial()) here, for now, to make Julia correctly dispatch the plot recipe.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1] Geweke J. Getting it right: Joint distribution tests of posterior simulators. Journal of the American Statistical Association. 2004 Sep 1;99(467):799-804.</p>
<p>[2] Grosse RB, Duvenaud DK. Testing mcmc code. arXiv preprint arXiv:1412.5218. 2014 Dec 16.</p>
</article></div>