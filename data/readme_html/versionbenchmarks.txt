<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-versionbenchmarks" class="anchor" aria-hidden="true" href="#versionbenchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VersionBenchmarks</h1>
<p dir="auto">A package to run benchmarks of different versions, branches, or commits of packages against each other on multiple Julia versions.</p>
<p dir="auto">It is especially useful for measuring time to first plot (TTFP) or <code>using</code> latency of packages, because these can only be measured once per Julia session.
VersionBenchmarks.jl runs each code file multiple times with a fresh Julia process for each run.</p>
<p dir="auto">Here is a simple example testing latest <code>master</code> against <code>v1.0.0</code> for the DataFrames package, once for the default <code>julia</code> command and once with Julia 1.9.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VersionBenchmarks

df = benchmark(
    [
        Config(&quot;master&quot;, (name = &quot;DataFrames&quot;, rev = &quot;master&quot;)),
        Config(&quot;1.0&quot;, (name = &quot;DataFrames&quot;, version = &quot;v1.0.0&quot;)),
        Config(&quot;master&quot;, (name = &quot;DataFrames&quot;, rev = &quot;master&quot;),
            `/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia`),
        Config(&quot;1.0&quot;, (name = &quot;DataFrames&quot;, version = &quot;v1.0.0&quot;),
            `/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia`),
    ],
    &quot;dataframes.jl&quot;,
    repetitions = 10,
)"><pre><span class="pl-k">using</span> VersionBenchmarks

df <span class="pl-k">=</span> <span class="pl-c1">benchmark</span>(
    [
        <span class="pl-c1">Config</span>(<span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>, (name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, rev <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>)),
        <span class="pl-c1">Config</span>(<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>, (name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>v1.0.0<span class="pl-pds">"</span></span>)),
        <span class="pl-c1">Config</span>(<span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>, (name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, rev <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>),
            <span class="pl-s"><span class="pl-pds">`</span>/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia<span class="pl-pds">`</span></span>),
        <span class="pl-c1">Config</span>(<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>, (name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>v1.0.0<span class="pl-pds">"</span></span>),
            <span class="pl-s"><span class="pl-pds">`</span>/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia<span class="pl-pds">`</span></span>),
    ],
    <span class="pl-s"><span class="pl-pds">"</span>dataframes.jl<span class="pl-pds">"</span></span>,
    repetitions <span class="pl-k">=</span> <span class="pl-c1">10</span>,
)</pre></div>
<p dir="auto">The <code>Config</code> struct has three arguments.</p>
<ol dir="auto">
<li>A name that summarizes the packages being used.</li>
<li>A <code>NamedTuple</code> or a <code>Vector{NamedTuple}</code> (if multiple different packages should be tested together) that serve as input arguments for <code>Pkg.PackageSpec</code>s which should be installed. Typical keys are <code>name</code>, <code>url</code>, <code>path</code>, <code>rev</code>, <code>version</code> and <code>subdir</code>. For example, to use a local repository where you want to check a specific commit with hash <code>"a7e55f3"</code>, you could use <code>(path = "path/to/repo", rev = "a7e55f3")</code>.</li>
<li>Optionally, a command to run Julia (<code>julia</code> by default).</li>
</ol>
<p dir="auto">You can supply one code file or a vector of code files.
Each file is run for n <code>repetitions</code>, with <code>Config</code>s alternating so that the samples for one <code>Config</code> are spaced apart in time.
This guards against misinterpreting system performance fluctuations over time as significant differences between <code>Config</code>s.</p>
<h2 dir="auto"><a id="user-content-benchmark-macros" class="anchor" aria-hidden="true" href="#benchmark-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark macros</h2>
<p dir="auto">There are two macros you can use in your test code.
They measure timings and allocations and write the results out to the collecting process automatically.</p>
<p dir="auto">The first macro is <code>@vbtime</code> which behaves similarly to <code>@time</code>, measuring runtime, garbage collection time, and allocations.
This macro is run once with each repetition and can be used to measure things like <code>using</code> latency or time to first plot.</p>
<p dir="auto">The second macro is <code>@vbbenchmark</code> which is a wrapper for <code>BenchmarkTools.@benchmark</code>.
This macro should be used with any code that can be run multiple times per session, so everything that doesn't measure first-use compilation latencies.
Because it already runs its code multiple times to get a more accurate estimate, it's not necessary to run it on each <code>repetition</code>.
Therefore, <code>@vbbenchmark</code> runs only on repetition 1.</p>
<p dir="auto">The example code file, <code>dataframes.jl</code>, could look like this.
The <code>using</code> statement and the first <code>DataFrame</code> construction can only be measured once per repetition, so they use <code>@vbtime</code>.
The <code>DataFrame</code> constructor can be measured with <code>@vbbenchmark</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@vbtime &quot;using&quot; begin
    using DataFrames
end

@vbtime &quot;first_df&quot; begin
    DataFrame(a = 1:10)
end

@vbbenchmark &quot;DataFrame&quot; begin
    DataFrame()
end"><pre><span class="pl-c1">@vbtime</span> <span class="pl-s"><span class="pl-pds">"</span>using<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-k">using</span> DataFrames
<span class="pl-k">end</span>

<span class="pl-c1">@vbtime</span> <span class="pl-s"><span class="pl-pds">"</span>first_df<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-k">end</span>

<span class="pl-c1">@vbbenchmark</span> <span class="pl-s"><span class="pl-pds">"</span>DataFrame<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">DataFrame</span>()
<span class="pl-k">end</span></pre></div>
<p dir="auto">You can call these functions on the resulting DataFrame:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="VersionBenchmarks.summarize_repetitions(df)
VersionBenchmarks.plot_summary(df [, :time_s]) # can change second arg to :allocations or :gctime"><pre>VersionBenchmarks<span class="pl-k">.</span><span class="pl-c1">summarize_repetitions</span>(df)
VersionBenchmarks<span class="pl-k">.</span><span class="pl-c1">plot_summary</span>(df [, <span class="pl-c1">:time_s</span>]) <span class="pl-c"><span class="pl-c">#</span> can change second arg to :allocations or :gctime</span></pre></div>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="VersionBenchmarks.plot_summary(df)"><pre>VersionBenchmarks<span class="pl-k">.</span><span class="pl-c1">plot_summary</span>(df)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="demo.png"><img src="demo.png" alt="demo" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="VersionBenchmarks.plot_summary(df, :allocations)"><pre>VersionBenchmarks<span class="pl-k">.</span><span class="pl-c1">plot_summary</span>(df, <span class="pl-c1">:allocations</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="demo_allocations.png"><img src="demo_allocations.png" alt="demo" style="max-width: 100%;"></a></p>
</article></div>