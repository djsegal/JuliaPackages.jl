<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-anamnesisjl" class="anchor" aria-hidden="true" href="#anamnesisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Anamnesis.jl</h1>
<blockquote>
<p>Anamnesis [an-am-<strong>nee</strong>-sis]:</p>
<ol>
<li>the recollection or rememberance of the past</li>
<li>recollection of the ideas which the soul had known in a previous existence, especially by means of reasoning</li>
</ol>
</blockquote>
<p>A package for doing unobtrusive <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow">memoization</a> of computationally expensive functions in Julia.</p>
<p>This package is for Julia 0.7 and later.</p>
<h2><a id="user-content-the-anamnesis-macro" class="anchor" aria-hidden="true" href="#the-anamnesis-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>@anamnesis</code> Macro</h2>
<h3><a id="user-content-on-function-declarations" class="anchor" aria-hidden="true" href="#on-function-declarations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>On Function Declarations</h3>
<p>The "standard" implementation of memoization is to simply declare a function that will automatically memoize all of its results.  This can be done with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@anamnesis</span> <span class="pl-k">function</span> <span class="pl-en">SU2</span>(ϕ<span class="pl-k">::</span><span class="pl-c1">Real</span>, n<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Fire walk with me<span class="pl-pds">"</span></span>)
    σ⃗ <span class="pl-k">=</span> [Complex{T}[<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>], Complex{T}[<span class="pl-c1">0</span> <span class="pl-k">-</span>im; im <span class="pl-c1">0</span>], Complex{T}[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]]
    <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>ϕ<span class="pl-k">*</span>n<span class="pl-k">'</span><span class="pl-k">*</span>σ⃗)
<span class="pl-k">end</span>

<span class="pl-c1">SU2</span>(<span class="pl-c1">0</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>])  <span class="pl-c"><span class="pl-c">#</span> calls SU2, prints "Fire walk with me"</span>
<span class="pl-c1">SU2</span>(<span class="pl-c1">0</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>])  <span class="pl-c"><span class="pl-c">#</span> the previous result is retrieved, does not print</span></pre></div>
<p>This also works for single-line function declearations such as <code>@anamnesis f(x) = x^2 + 1</code>.</p>
<p>Note that Anamnesis.jl also supports keyword arguments in all use cases.</p>
<h3><a id="user-content-on-blocks" class="anchor" aria-hidden="true" href="#on-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>On Blocks</h3>
<p>One of the design goals of Anamnesis.jl is to allow memoization as unobtrusively as possible, preferably without the need to change any other code.  To this
end, we provide the <code>@anamnesis</code> macro also for blocks.  For example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@anamnesis</span> <span class="pl-k">begin</span>
    t <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">+</span> <span class="pl-c1">g</span>(x)
    z <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>λ<span class="pl-k">*</span>t)
    <span class="pl-c1">f</span>(z) <span class="pl-k">+</span> <span class="pl-c1">f</span>(x) <span class="pl-k">-</span> <span class="pl-c1">g</span>(x)
<span class="pl-k">end</span> f</pre></div>
<p>In this example, all calls to <code>f</code> are memoized, but calls to other functions are not.  This was achieved by naming <code>f</code> after the block.  This can be done with
arbitrarily many functions so, for example, if we placed a <code>g</code> after the above example it would have memoized <code>g</code> as well.  It is <em>not</em> necessary to declare
<code>f</code> with <code>@anamnesis</code> to do this, in fact, these are mutually exclusive use cases.  Note that this can be done with any expression, not just a <code>begin end</code>
block.  For example, we could do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@anamnesis</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(x)
    o <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">+</span> <span class="pl-c1">g</span>(x) <span class="pl-k">-</span> <span class="pl-c1">f</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>)
    <span class="pl-c1">f</span>(o<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">f</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-k">end</span> f</pre></div>
<p>What distinguishes this example from the memoization of <code>h</code> itself is the extra <code>f</code> added to the end.</p>
<h2><a id="user-content-the-mem-macro" class="anchor" aria-hidden="true" href="#the-mem-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>@mem</code> Macro</h2>
<p>One of the simplest uses of Anamnesis.jl is the <code>@mem</code> macro.  This macro will memoize only the function call for which it was called, for example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mem</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> the result is memoized</span>
<span class="pl-c1">f</span>(<span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> this is a normal function call</span>
<span class="pl-c1">@mem</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> f is not evaluated here, instead the previous value is retrieved</span>
<span class="pl-c1">@mem</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> now the value for f(2) is stored</span></pre></div>
<h2><a id="user-content-the-scribe-objects" class="anchor" aria-hidden="true" href="#the-scribe-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Scribe</code> Objects</h2>
<p>Anamnesis.jl uses objects called <code>Scribe</code>s to perform memoization.  The objects are just the function itself combined with a cache of seen values.  If you
prefer to use Anamnesis.jl more explicitly, you can simply use the scribe objects directly.  For example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">abs2</span>(<span class="pl-c1">gamma</span>(x))
sf <span class="pl-k">=</span> <span class="pl-c1">Scribe</span>(f)

<span class="pl-c1">sf</span>(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> this result is memoized</span>
<span class="pl-c1">f</span>(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> function calls work normally; results are not memoized</span>
<span class="pl-c1">sf</span>(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> this of course retrieves the previously memoized result</span></pre></div>
<h3><a id="user-content-accessing-scribe-objects-generated-by-macros" class="anchor" aria-hidden="true" href="#accessing-scribe-objects-generated-by-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessing Scribe Objects Generated by Macros</h3>
<p>The macros described above generally create scribe objects and place them in the current global scope.  These can be accessed with the <code>@scribeof</code> macro.  For
example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mem</span> <span class="pl-c1">f</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">@scribeof</span>(f)  <span class="pl-c"><span class="pl-c">#</span> this is the scribe object generated by mem</span>
<span class="pl-c1">@scribeof</span>(f)(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> you can call these normally</span></pre></div>
<p>Memoized functions created with <code>@anamnesis</code> on function declarations need to be accessed differently, in this case whatever name you gave the function is the
name of a new function that wraps the <code>Scribe</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@anamnesis</span> <span class="pl-en">h</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x)
<span class="pl-c1">@scribeof</span>(h)  <span class="pl-c"><span class="pl-c">#</span> ERROR</span>

<span class="pl-c1">@rawfunc</span>(h)  <span class="pl-c"><span class="pl-c">#</span> this is the non-memoized function</span>
<span class="pl-c1">@rawfunc</span>(h)(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> you can call it normally, it will not memoize</span>

<span class="pl-c1">@scribeofrawfunc</span>(h)  <span class="pl-c"><span class="pl-c">#</span> this is the scribe object you are calling with h itself</span>

<span class="pl-c1">typeof</span>(h) <span class="pl-k">&lt;:</span> <span class="pl-c1">Function</span>  <span class="pl-c"><span class="pl-c">#</span> the reason Anamnesis is designed this way, instead of just passing you a Scribe is so that you are still creating a bonified function</span></pre></div>
<h3><a id="user-content-the-value-cache-and-specifying-return-types" class="anchor" aria-hidden="true" href="#the-value-cache-and-specifying-return-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Value Cache and Specifying Return Types</h3>
<p>By default <code>Scribe</code>s use an <code>IdDict{Any,Any}</code> to cache its values, however any <code>AbstractDict</code> object can be used in its place.  One can even supply an
<code>AbstractDict</code> with pre-existing values.  For example</p>
<div class="highlight highlight-source-julia"><pre>sf <span class="pl-k">=</span> <span class="pl-c1">Scribe</span>(f, <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>((<span class="pl-c1">1</span>,)<span class="pl-k">=&gt;</span><span class="pl-c1">0</span>))

<span class="pl-c1">sf</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> return 0 regardless of return value of f</span></pre></div>
<p>Explicitly specifying the value cache can also be useful for improving performance.  If you know the argument or (more importantly) return types of your
function, you can tell the compiler about it by supplyinig an appropriately typed <code>AbstractDict</code>.  For example</p>
<div class="highlight highlight-source-julia"><pre>sf <span class="pl-k">=</span> <span class="pl-c1">Scribe</span>(f, <span class="pl-c1">Dict</span><span class="pl-c1">{Tuple{Real,Real},Float64}</span>())

<span class="pl-c1">sf</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> the return values are now guaranteed type stable.  if f does not return a Float64 an error will be thrown</span>

sg <span class="pl-k">=</span> <span class="pl-c1">Scribe</span>(g, <span class="pl-c1">Dict</span><span class="pl-c1">{Any,ComplexF64}</span>())  <span class="pl-c"><span class="pl-c">#</span> a more common use case is to specify only the return type</span></pre></div>
<p>Note that return types can also be specified by overloading</p>
<div class="highlight highlight-source-julia"><pre>Anamnesis<span class="pl-k">.</span><span class="pl-en">returntype</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(f), argtypes) <span class="pl-k">=</span> AbstractFloat
Anamnesis<span class="pl-k">.</span><span class="pl-en">returntype</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(f), <span class="pl-k">::</span><span class="pl-c1">Type{Tuple{String}}</span>) <span class="pl-k">=</span> AbstractString
<span class="pl-c"><span class="pl-c">#</span> here you are promising the compiler that f returns an AbstractFloat unless you pass it a String in which case it returns AbstractString</span></pre></div>
<p>Note that even if you do not specify a return type in any way Anamnesis.jl uses inference to attempt to determine one so that its output should be type stable
in most cases (although it contains type unstable code internally).</p>
<h2><a id="user-content-performance-and-when-to-use" class="anchor" aria-hidden="true" href="#performance-and-when-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance and When to Use</h2>
<p>Julia is a scientific programming language which was designed from the ground up with computational efficiency as one of its goals.  As such, even ad hoc and
"naive" functions written in Julia tend to be extremely efficient.  Furthermore, any memoization implementation is liable to have some performance pain points:
in general they contain type unstable code (even if they have type stable output) and they must include a value cache which is accessible from the same scope as
the function itself so that global objects are potentially involved.  Because of this, memoization comes with a significant overhead, even with Julia's highly
efficient <code>AbstractDict</code> implementations.</p>
<p>I find that a good rule of thumb is that you should <em>never</em> memoize functions which take less than a few microseconds to evaluate.  Typically I'd expect you to
use memoization with functions which typicall take on the order of milliseconds or more to evaluate.</p>
<h2><a id="user-content-long-term-plans" class="anchor" aria-hidden="true" href="#long-term-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Long Term Plans</h2>
<p>I started Anamnesis.jl as an experiment mainly with the goal in mind of doing <em>inter-process</em> memoization, e.g. so that you could exit a program completely and
then retrieve memoized values from serialized data on disk.  I find that I very frequently have need for this sort of thing when doing experimentation in
scientific programming and data science as often I have functions that take a very long time (on the order of seconds) to evaluate, and I don't want to have to
do that every time I change some unrelated piece of code.  I initially had some inellegant code which worked, but was not a good long term solution.  I've now
decided to make sure I have a really good implementation of basic memoization and build up from there.</p>
<p>Hopefully I'll have a chance to work on some of these more "exotic" features soon, and I already have concrete plans about how to achieve this.</p>
</article></div>