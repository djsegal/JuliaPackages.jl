<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dynamictimewarp" class="anchor" aria-hidden="true" href="#dynamictimewarp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DynamicTimeWarp</h1>
<p><a href="https://travis-ci.org/joefowler/DynamicTimeWarp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02080e8ceea61e828541540fabcb51bbbeac2853/68747470733a2f2f7472617669732d63692e6f72672f6a6f65666f776c65722f44796e616d696354696d65576172702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/joefowler/DynamicTimeWarp.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-dynamic-time-warping" class="anchor" aria-hidden="true" href="#dynamic-time-warping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic Time Warping</h2>
<p>A method for aligning sequences in a way that is insensitive to
arbitrary "warping" (stretching or shifting) along the time (or "time") axis.
<a href="http://en.wikipedia.org/wiki/Dynamic_time_warping" rel="nofollow">Wikipedia article</a></p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h2>
<ul>
<li>Standard DTW. This algorithm requires O(MN) time and memory, where M, N are the lengths
of the two sequences to be aligned.</li>
<li>FastDTW (Salvador &amp; Chan, Intelligent Data Analysis 2007), which works by
coarsening until DTW is easy, and then stepping back to the finest scales one at a
time in a way that
lets us search only "a radius" around the best DTW path from the next coarser scale.</li>
</ul>
<h2><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To Do List</h2>
<ul class="contains-task-list">
<li>[*] Restricted DTW, where only a parallelogram is explored, not the full rectangular
space. (This is a speed/memory optimization.)</li>
<li>[*] FastDTW (Salvador &amp; Chan, Intelligent Data Analysis 2007), which works by
coarsening until DTW is easy, and then stepping back to the finest scales one at a
time in a way that
lets us search only "a radius" around the best DTW path from the next coarser scale.</li>
<li>[*] Improve FastDTW code by creating a WindowedMatrix type, so that element access can
be easier in the dtwwindowed code.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Consider implementing SparseDTW <a href="http://arxiv.org/abs/1201.2969" rel="nofollow">paper on arXiv</a></li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> DTW Barycenter Averaging (see paper by Petitjean et al. 2011).</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Possibly a "spectrum aligner" where the data being warped are histograms. (Does this
affect anything? Maybe not needed.)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Learn the terminology and actually get proper references in place!</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Some demonstration examples.</li>
</ul>
</article></div>