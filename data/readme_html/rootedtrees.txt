<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rootedtrees" class="anchor" aria-hidden="true" href="#rootedtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RootedTrees</h1>
<p><a href="https://github.com/SciML/RootedTrees.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/RootedTrees.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/SciML/RootedTrees.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/658f74d87d182f525f0e3f5664e172d5a5fe8a9d19bdfa762e303c5252828d75/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5363694d4c2f526f6f74656454726565732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SciML/RootedTrees.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SciML/RootedTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62388798935f5e08236c658786afac12d1dfaf6b9552c4a86c4f5ebda24ebfd0/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f526f6f74656454726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/RootedTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A collection of functionality around rooted trees to generate order conditions
for Runge-Kutta methods in <a href="https://julialang.org/" rel="nofollow">Julia</a>.</p>
<h2><a id="user-content-api-documentation" class="anchor" aria-hidden="true" href="#api-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API Documentation</h2>
<p>Please note that this project is work in progress. However, we don't expect
many breaking changes in the near future.</p>
<h3><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construction</h3>
<p><code>RootedTree</code>s are represented using level sequences, i.e., <code>AbstractVector</code>s
containing the distances of the nodes from the root, cf.
Beyer, Terry, and Sandra Mitchell Hedetniemi.
"Constant time generation of rooted trees."
SIAM Journal on Computing 9.4 (1980): 706-712.
<code>RootedTree</code>s can be constructed from their level sequence using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; t = rootedtree([1, 2, 3, 2])
RootedTree{Int64}: [1, 2, 3, 2]
"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">rootedtree</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>])
RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>]</pre></div>
<p>In the notation of <a href="https://doi.org/10.1002/9781119121534" rel="nofollow">Butcher (Numerical Methods for ODEs, 2016)</a>,
this tree can be written as <code>[[τ²] τ]</code> or <code>(τ ∘ τ) ∘ (τ ∘ τ)</code>, where
<code>∘</code> is the non-associative Butcher product of <code>RootedTree</code>s, which is also
implemented.</p>
<p>To get the representation of a <code>RootedTree</code> introduced by Butcher, use <code>butcher_representation</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; t = rootedtree([1, 2, 3, 4, 3, 3, 2, 2, 2, 2, 2])
RootedTree{Int64}: [1, 2, 3, 4, 3, 3, 2, 2, 2, 2, 2]

julia&gt; butcher_representation(t)
&quot;[[[τ]τ²]τ⁵]&quot;
"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">rootedtree</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>])
RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">butcher_representation</span>(t)
<span class="pl-s"><span class="pl-pds">"</span>[[[τ]τ²]τ⁵]<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-iteration-over-rootedtrees" class="anchor" aria-hidden="true" href="#iteration-over-rootedtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Iteration over <code>RootedTree</code>s</h3>
<p>A <code>RootedTreeIterator(order::Integer)</code> can be used to iterate efficiently
over all <code>RootedTree</code>s of a given <code>order</code>.</p>
<p>Be careful that the iterator is stateful for efficiency reasons, so you might
need to use <code>copy</code> appropriately, e.g.,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; map(identity, RootedTreeIterator(4))
4-element Array{RootedTrees.RootedTree{Int64,Array{Int64,1}},1}:
 RootedTree{Int64}: [1, 2, 2, 2]
 RootedTree{Int64}: [1, 2, 2, 2]
 RootedTree{Int64}: [1, 2, 2, 2]
 RootedTree{Int64}: [1, 2, 2, 2]

julia&gt; map(copy, RootedTreeIterator(4))
4-element Array{RootedTrees.RootedTree{Int64,Array{Int64,1}},1}:
 RootedTree{Int64}: [1, 2, 3, 4]
 RootedTree{Int64}: [1, 2, 3, 3]
 RootedTree{Int64}: [1, 2, 3, 2]
 RootedTree{Int64}: [1, 2, 2, 2]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(identity, <span class="pl-c1">RootedTreeIterator</span>(<span class="pl-c1">4</span>))
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{RootedTrees<span class="pl-k">.</span>RootedTree{Int64,Array{Int64,<span class="pl-c1">1</span>}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(copy, <span class="pl-c1">RootedTreeIterator</span>(<span class="pl-c1">4</span>))
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{RootedTrees<span class="pl-k">.</span>RootedTree{Int64,Array{Int64,<span class="pl-c1">1</span>}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>]
 RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]</pre></div>
<h3><a id="user-content-functions-on-trees" class="anchor" aria-hidden="true" href="#functions-on-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions on Trees</h3>
<p>The usual functions on <code>RootedTree</code>s are implemented, cf.
<a href="https://doi.org/10.1002/9781119121534" rel="nofollow">Butcher (Numerical Methods for ODEs, 2016)</a>.</p>
<ul>
<li><code>order(t::RootedTree)</code>: The order of a <code>RootedTree</code>, i.e., the length of its level sequence.</li>
<li><code>σ(t::RootedTree)</code>: The symmetry <code>σ</code> of a rooted tree, i.e., the order of the group of automorphisms on a particular labelling (of the vertices) of <code>t</code>.</li>
<li><code>γ(t::RootedTree)</code>: The density <code>γ(t)</code> of a rooted tree, i.e., the product over all vertices of <code>t</code> of the order of the subtree rooted at that vertex.</li>
<li><code>α(t::RootedTree)</code>: The number of monotonic labelings of <code>t</code> not equivalent under the symmetry group.</li>
<li><code>β(t::RootedTree)</code>: The total number of labelings of <code>t</code> not equivalent under the symmetry group.</li>
</ul>
<p>Additionally, functions on trees connected to Runge-Kutta methods are implemented.</p>
<ul>
<li><code>elementary_weight(t, A, b, c)</code>: Compute the elementary weight Φ(<code>t</code>) of <code>t::RootedTree</code> for the Butcher coefficients <code>A, b, c</code> of a Runge-Kutta method.</li>
<li><code>derivative_weight(t, A, b, c)</code>: Compute the derivative weight (ΦᵢD)(<code>t</code>) of <code>t</code> for the Butcher coefficients <code>A, b, c</code> of a Runge-Kutta method.</li>
<li><code>residual_order_condition(t, A, b, c)</code>: The residual of the order condition
<code>(Φ(t) - 1/γ(t)) / σ(t)</code> with elementary weight <code>Φ(t)</code>, density <code>γ(t)</code>, and symmetry <code>σ(t)</code> of the rooted tree <code>t</code> for the Runge-Kutta method with Butcher coefficients <code>A, b, c</code>.</li>
</ul>
</article></div>