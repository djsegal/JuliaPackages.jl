<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rootedtrees" class="anchor" aria-hidden="true" href="#rootedtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RootedTrees</h1>
<p><a href="https://travis-ci.com/JuliaDiffEq/RootedTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe3884daec81b3d7c311b1472cb29f1a800e398c/68747470733a2f2f7472617669732d63692e636f6d2f4a756c69614469666645712f526f6f74656454726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaDiffEq/RootedTrees.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ranocha/RootedTrees-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/933ef2b43c828f5c92434def0cd07024875029af/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6f397730636c306d6f6b66706e6a30643f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/o9w0cl0mokfpnj0d?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/RootedTrees.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d743a49866606f9c11a9bd9cd706b35b80bf28a2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614469666645712f526f6f74656454726565732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaDiffEq/RootedTrees.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaDiffEq/RootedTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/94ffde12f014d4da2e91405d5736f86effdd1c0b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614469666645712f526f6f74656454726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaDiffEq/RootedTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A collection of functionality around rooted trees to generate order conditions
for Runge-Kutta methods in <a href="https://julialang.org/" rel="nofollow">Julia</a>.</p>
<h2><a id="user-content-api-documentation" class="anchor" aria-hidden="true" href="#api-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API Documentation</h2>
<p>Please note that this project is work in progress. However, we don't expect
many breaking changes in the near future.</p>
<h3><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Construction</h3>
<p><code>RootedTree</code>s are represented using level sequences, i.e. <code>AbstractVector</code>s
containing the distances of the nodes from the root, cf.
Beyer, Terry, and Sandra Mitchell Hedetniemi.
"Constant time generation of rooted trees."
SIAM Journal on Computing 9.4 (1980): 706-712.
<code>RootedTree</code>s can be constructed from their level sequence using</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">rootedtree</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>])
RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>]</pre></div>
<p>In the notation of <a href="https://doi.org/10.1002/9781119121534" rel="nofollow">Butcher (Numerical Methods for ODEs, 2016)</a>,
this tree can be written as <code>[[τ²] τ]</code> or <code>(τ ∘ τ) ∘ (τ ∘ τ)</code>, where
<code>∘</code> is the non-asociative Butcher product of <code>RootedTree</code>s, which is also
implemented.</p>
<p>To get the representation of a <code>RootedTree</code> introduced by Butcher, use <code>butcher_representation</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">rootedtree</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>])
RootedTree{Int64}<span class="pl-k">:</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">butcher_representation</span>(t)
<span class="pl-s"><span class="pl-pds">"</span>[[[τ]τ²]τ⁵]<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-iteration-over-rootedtrees" class="anchor" aria-hidden="true" href="#iteration-over-rootedtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iteration over <code>RootedTree</code>s</h3>
<p>A <code>RootedTreeIterator(order::Integer)</code> can be used to iterate efficiently
over all <code>RootedTree</code>s of a given <code>order</code>.</p>
<h3><a id="user-content-functions-on-trees" class="anchor" aria-hidden="true" href="#functions-on-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions on Trees</h3>
<p>The usual functions on <code>RootedTree</code>s are implemented, cf.
<a href="https://doi.org/10.1002/9781119121534" rel="nofollow">Butcher (Numerical Methods for ODEs, 2016)</a>.</p>
<ul>
<li><code>order(t::RootedTree)</code>: The order of a <code>RootedTree</code>, i.e. the length of it's level sequence.</li>
<li><code>σ(t::RootedTree)</code>:The symmetry <code>σ</code> of a rooted tree, i.e. the order of the group of automorphisms on a particular labelling (of the vertices) of <code>t</code>.</li>
<li><code>γ(t::RootedTree)</code>: The density <code>γ(t)</code> of a rooted tree, i.e. the product over all vertices of <code>t</code> of the order of the subtree rooted at that vertex.</li>
<li><code>α(t::RootedTree)</code>: The number of monotonic labellings of <code>t</code> not equivalent under the symmetry group.</li>
<li><code>β(t::RootedTree)</code>: The total number of labellings of <code>t</code> not equivalent under the symmetry group.</li>
</ul>
<p>Additionally, functions on trees connected to Runge-Kutta methods are implemented.</p>
<ul>
<li><code>elementary_weight(t, A, b, c)</code>: Compute the elementary weight Φ(<code>t</code>) of <code>t::RootedTree</code> for the Butcher coefficients <code>A, b, c</code> of a Runge-Kutta method.</li>
<li><code>derivative_weight(t, A, b, c)</code>: Compute the derivative weight (ΦᵢD)(<code>t</code>) of <code>t</code> for the Butcher coefficients <code>A, b, c</code> of a Runge-Kutta method.</li>
<li><code>residual_order_condition(t, A, b, c)</code>: The residual of the order condition
<code>(Φ(t) - 1/γ(t)) / σ(t)</code> with elementary weight <code>Φ(t)</code>, density <code>γ(t)</code>, and symmetry <code>σ(t)</code> of the rooted tree <code>t</code> for the Runge-Kutta method with Butcher coefficients <code>A, b, c</code>.</li>
</ul>
</article></div>