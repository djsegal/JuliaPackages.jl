<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastlocalcorrelationcoefficientsjl" class="anchor" aria-hidden="true" href="#fastlocalcorrelationcoefficientsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastLocalCorrelationCoefficients.jl</h1>
<p dir="auto"><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow"><img alt="Creative Commons License" src="https://camo.githubusercontent.com/f05d4039b67688cfdf339d2a445ad686a60551f9891734c418f7096184de5fac/68747470733a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d6e632d73612f342e302f38387833312e706e67" data-canonical-src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" style="max-width: 100%;"></a><br>This work is licensed under a <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</p>
<p dir="auto"><a href="https://github.com/pitsianis/FastLocalCorrelationCoefficients.jl/actions"><img src="https://github.com/pitsianis/FastLocalCorrelationCoefficients.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/pitsianis/FastLocalCorrelationCoefficients.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/18b786ef2f460947f4b26b016013d2c4cc0b043d64ef512c275a187fe5cc7b4f/68747470733a2f2f636f6465636f762e696f2f67682f7069747369616e69732f466173744c6f63616c436f7272656c6174696f6e436f656666696369656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/pitsianis/FastLocalCorrelationCoefficients.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Full documentation of latest release can be found <a href="https://pitsianis.github.io/FastLocalCorrelationCoefficients.jl/stable" rel="nofollow">here</a></p>
<p dir="auto"><a href="https://pitsianis.github.io/FastLocalCorrelationCoefficients.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://pitsianis.github.io/FastLocalCorrelationCoefficients.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Computing locally normalized correlation coefficients (also known as Pearson correlation coefficients) is a basic step in various image-based data or information processing applications, including template or pattern matching, detection and estimation of motion or some other change in an image frame series, image registration from data collected at different times, projections, perspectives or with different acquisition modalities, and compression across multiple image frames.</p>
<p dir="auto">The Fast Local Correlation Coefficients (FLCC) Package <code>FastLocalCorrelationCoefficients.jl</code>
computes the Local Correlation Coefficients between a template (the needle) and all sliding subframes of a frame (the haystack). The maximum values of the LCCs correspond to the subframes that are most similar to the template. The implementation supports arbitrary dimensional tensors with real or complex values.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; using FastLocalCorrelationCoefficients

julia&gt; haystack = rand(ComplexF32,2^5,2^5,2^5,2^5);

julia&gt; needle = rand(ComplexF32,1) .* haystack[10:14, 11:15, 12:16, 13:17] .+ rand(ComplexF32,1);

julia&gt; c = flcc(haystack,needle);

julia&gt; best_correlated(c)
CartesianIndex(10, 11, 12, 13)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastLocalCorrelationCoefficients

julia<span class="pl-k">&gt;</span> haystack <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ComplexF32,<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> needle <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ComplexF32,<span class="pl-c1">1</span>) <span class="pl-k">.*</span> haystack[<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">14</span>, <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">12</span><span class="pl-k">:</span><span class="pl-c1">16</span>, <span class="pl-c1">13</span><span class="pl-k">:</span><span class="pl-c1">17</span>] <span class="pl-k">.+</span> <span class="pl-c1">rand</span>(ComplexF32,<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">flcc</span>(haystack,needle);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">best_correlated</span>(c)
<span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">10</span>, <span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>)
</pre></div>
<p dir="auto">The computational complexity of <code>flcc</code> is <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2d425f2caa697eeeb53bf07939c3c8b2">${\rm O}((m+n)\log(m+n))$</math-renderer>, which can be substantially faster than the direct <code>lcc</code> computation in <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2d425f2caa697eeeb53bf07939c3c8b2">${\rm O}(m n)$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2d425f2caa697eeeb53bf07939c3c8b2">$m$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="2d425f2caa697eeeb53bf07939c3c8b2">$n$</math-renderer> are the number of elements of the needle and the haystack, respectively.</p>
<p dir="auto">Moreover, <code>flcc</code> allows the precomputation of common calculations when we search a haystack multiple times for needles of the same size, reducing the run time even further. No such optimization can be performed with the direct <code>lcc</code> computation.</p>
<p dir="auto">For more information see:</p>
<ol dir="auto">
<li>
<p dir="auto">X. Sun, N. P. Pitsianis, and P. Bientinesi, <a href="http://www.cs.duke.edu/~nikos/reprints/C-027-LCC-SPIE.pdf" rel="nofollow">Fast computation of local correlation coefficients</a>, Proc. SPIE 7074, 707405 (2008)</p>
</li>
<li>
<p dir="auto">G. Papamakarios, G. Rizos, N. P. Pitsianis, and X. Sun, <a href="http://www.cs.duke.edu/~nikos/reprints/C-032-LCCGPU-SPIE09.pdf" rel="nofollow">Fast computation of local correlation coefficients on graphics processing units</a>, Proc. SPIE 7444, 744412 (2009)</p>
</li>
</ol>
</article></div>