<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="http://en.wikipedia.org/wiki/Judy_array" rel="nofollow">Judy arrays</a> are fast associative arrays with low memory usage.</p>
<p>This is a wrapper over the Judy C library at <a href="http://judy.sourceforge.net/" rel="nofollow">http://judy.sourceforge.net/</a>, and also provides array like syntax for ease of use.</p>
<p>Note: This package is deprecated since Julia 0.4.</p>
<h2><a id="user-content-speed-comparison-output-of-testtime_testjl" class="anchor" aria-hidden="true" href="#speed-comparison-output-of-testtime_testjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Speed comparison (output of test/time_test.jl):</h2>
<p>time_test.jl 40000</p>
<pre><code>items 40000 compare: JudyDict{Int, Int} vs. Dict{Int64, Int64}
set =&gt; dict: 0.003764559, judy: 0.007593068
get =&gt; dict: 0.003972227, judy: 0.008115711

items 40000 compare: JudyDict{String, Int} vs. Dict{String, Int64} vs. Trie{Int64}
set =&gt; dict: 0.026546593, trie: 1.617041746, judy: 0.024602444
get =&gt; dict: 0.025077909, trie: 0.333609694, judy: 0.011907627

items 40000 compare: JudyDict{String, ASCIIString} vs. Dict{String, ASCIIString} vs. Trie{ASCIIString}
set =&gt; dict: 0.016444282, trie: 1.928200929, judy: 0.079096568
get =&gt; dict: 0.018696934, trie: 0.447669909, judy: 0.018319763
</code></pre>
<p>time_test.jl</p>
<pre><code>items 1000000 compare: JudyDict{Int, Int} vs. Dict{Int64, Int64}
set =&gt; dict: 0.39570294, judy: 0.206779173
get =&gt; dict: 0.232123599, judy: 0.236621416

items 1000000 compare: JudyDict{String, Int} vs. Dict{String, Int64} vs. Trie{Int64}
not comparing Trie for so many entries
set =&gt; dict: 1.486466472, trie: NaN, judy: 0.647465437
get =&gt; dict: 0.817610285, trie: NaN, judy: 0.352016509

items 1000000 compare: JudyDict{String, ASCIIString} vs. Dict{String, ASCIIString} vs. Trie{ASCIIString}
not comparing Trie for so many entries
set =&gt; dict: 1.454996025, trie: NaN, judy: 5.155431162
get =&gt; dict: 0.714579466, trie: NaN, judy: 0.369600479

</code></pre>
<p>These tests are just indicative and extensive testing hasn't been done yet.
JudyDict seems better performing when the key is a String.</p>
<p>JudyDict with Julia objects as value type actually also hold the object references in an internal Dict to prevent them being gc'd. It thus takes a performance penalty during set operations. It could be faster if it could somehow indicate certain object_ids to gc as protected, but unfortunately there doesn't seem to be a way to do that.</p>
<h2><a id="user-content-example-simple" class="anchor" aria-hidden="true" href="#example-simple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example (simple):</h2>
<pre><code>julia&gt; using JudyDicts

julia&gt; ja = JudyDict{Int, Int}()
JudyDict{Int64,Int64} (empty)

julia&gt; ja[1] = 100
100

julia&gt; ja[2] = 200
200

julia&gt; println(ja[2] / ja[1])
2.0

julia&gt; ja[2] * ja[1]
0x0000000000004e20

julia&gt; ja = JudyDict{String, Int}()
JudyDict{String,Int64} (empty)

julia&gt; ja["First"] = 100
100

julia&gt; ja["One More"] = 200
200

julia&gt; println(ja["One More"] / ja["First"])
2.0

julia&gt; for x in ja
         println(x)
       end
(0x0000000000000064,"First")
(0x00000000000000c8,"One More")
</code></pre>
<h2><a id="user-content-other-apis" class="anchor" aria-hidden="true" href="#other-apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other APIs:</h2>
<ul>
<li><strong>ju_mem_used</strong>: Return bytes of memory used currently by the judy array</li>
<li><strong>ju_set</strong>: Set value (val) at index (idx). Return a pointer to the value. the pointer is valid till the next call to a judy method. Return C_NULL on error</li>
<li><strong>ju_unset</strong>: Unset value at index. Return 1 if index was previously set (successful), otherwise 0 if the index was already unset (unsuccessful).</li>
<li><strong>ju_get</strong>: Get the value at index (if set). For Judy1 arrays, return 1 if index's bit was set, 0 if it was unset (index was absent). Otherwise, return a tuple (value, pointer to value) if index's bit was set, (undefined, C_NULL) if it was not. The pointer is valid till the next call to a judy method.</li>
<li><strong>ju_count</strong>: Count the number of indexes present between idx1 and idx2 (inclusive).</li>
<li><strong>ju_by_count</strong>: locate the nth index that is present (n starts wih 1)</li>
<li><strong>ju_first, ju_next, ju_last, ju_prev</strong>: iterators over populated indices</li>
<li><strong>ju_first_empty, ju_next_empty, ju_last_empty, ju_prev_empty</strong>: iterators over empty slots</li>
</ul>
</article></div>