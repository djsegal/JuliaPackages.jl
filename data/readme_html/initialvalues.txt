<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-initialvaluesjl-canonical-default-initial-values-and-identity-elements-for-julia" class="anchor" aria-hidden="true" href="#initialvaluesjl-canonical-default-initial-values-and-identity-elements-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InitialValues.jl: Canonical default initial values and identity elements for Julia</h1>
<p dir="auto"><a href="https://juliafolds.github.io/InitialValues.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafolds.github.io/InitialValues.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/InitialValues.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/JuliaFolds/InitialValues.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaFolds/InitialValues.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/23b1edd300ece07524a70e85603f6fe6f62d0d7765289c5f80a73763d4a8c9c8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961466f6c64732f496e697469616c56616c7565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaFolds/InitialValues.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaFolds/InitialValues.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/367146f6ad7ed538f2bc25384794ed0aa68f2ace1e8d7a0fe8e5059f9a1f4e12/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961466f6c64732f496e697469616c56616c7565732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaFolds/InitialValues.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a></p>
<p dir="auto">InitialValues.jl provides a generic singleton initial value <code>InitialValue(f)</code>
that can be used as <code>a₀</code> in <code>f(a₀, x)</code>.  For a binary operator <code>op</code>,
it means that <code>InitialValue(op)</code> acts like the identity for <em>any</em> type of <code>x</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using InitialValues

julia&gt; InitialValue(+) + 1
1

julia&gt; 1.0 + InitialValue(+)
1.0

julia&gt; foldl(+, 1:3, init=InitialValue(+))
6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InitialValues

julia<span class="pl-k">&gt;</span> <span class="pl-c1">InitialValue</span>(<span class="pl-k">+</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">InitialValue</span>(<span class="pl-k">+</span>)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>(<span class="pl-k">+</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, init<span class="pl-k">=</span><span class="pl-c1">InitialValue</span>(<span class="pl-k">+</span>))
<span class="pl-c1">6</span></pre></div>
<p dir="auto">Following methods are defined for the binary operators in <code>Base</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; InitialValue(*) * 1
1

julia&gt; InitialValue(&amp;) &amp; 1
1

julia&gt; InitialValue(|) | 1
1

julia&gt; min(InitialValue(min), 1)
1

julia&gt; max(InitialValue(max), 1)
1

julia&gt; Base.add_sum(InitialValue(Base.add_sum), 1)
1

julia&gt; Base.mul_prod(InitialValue(Base.mul_prod), 1)
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">InitialValue</span>(<span class="pl-k">*</span>) <span class="pl-k">*</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">InitialValue</span>(<span class="pl-k">&amp;</span>) <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">InitialValue</span>(<span class="pl-k">|</span>) <span class="pl-k">|</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">min</span>(<span class="pl-c1">InitialValue</span>(min), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max</span>(<span class="pl-c1">InitialValue</span>(max), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-c1">add_sum</span>(<span class="pl-c1">InitialValue</span>(Base<span class="pl-k">.</span>add_sum), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-c1">mul_prod</span>(<span class="pl-c1">InitialValue</span>(Base<span class="pl-k">.</span>mul_prod), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span></pre></div>
<p dir="auto"><code>InitialValue</code> is not called <code>Identity</code> because it is useful to define it for
functions that are not binary operator (symmetric in signature).  For
example, <code>push!!</code> in <a href="https://github.com/JuliaFolds/BangBang.jl">BangBang.jl</a>
defines</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BangBang

julia&gt; push!!(InitialValue(push!!), 1)
1-element Array{Int64,1}:
 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BangBang

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!!</span>(<span class="pl-c1">InitialValue</span>(push!!), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span></pre></div>
<p dir="auto">This provides a powerful pattern when combined with <code>foldl</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; foldl(push!!, (1, missing, 2.0), init=InitialValue(push!!))
3-element Array{Union{Missing, Float64},1}:
 1.0
  missing
 2.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>(push!!, (<span class="pl-c1">1</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">2.0</span>), init<span class="pl-k">=</span><span class="pl-c1">InitialValue</span>(push!!))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Union{Missing, Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">2.0</span></pre></div>
<p dir="auto"><a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a> extensively
uses <code>InitialValue</code>.</p>
<p dir="auto">As binary operators like <code>*</code> in <code>Base</code> are heavily overloaded,
creating generic definitions such as above could have introduced
method ambiguities.  To protect against such situation, InitialValues.jl is
tested using <a href="https://github.com/tkf/Aqua.jl">Aqua.jl</a>.</p>
</article></div>