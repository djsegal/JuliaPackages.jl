<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-initialvaluesjl-canonical-default-initial-values-and-identity-elements-for-julia" class="anchor" aria-hidden="true" href="#initialvaluesjl-canonical-default-initial-values-and-identity-elements-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>InitialValues.jl: Canonical default initial values and identity elements for Julia</h1>
<p><a href="https://tkf.github.io/InitialValues.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://tkf.github.io/InitialValues.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/tkf/InitialValues.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/412acf85124f1e67f4510c88ae201a3ee83b5dfe/68747470733a2f2f7472617669732d63692e636f6d2f746b662f496e697469616c56616c7565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tkf/InitialValues.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tkf/InitialValues.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02e6bdc2ff1a3f4ebfd473057f784ec235d855f9/68747470733a2f2f636f6465636f762e696f2f67682f746b662f496e697469616c56616c7565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkf/InitialValues.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tkf/InitialValues.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d510365b497dfe676b75f361509fb7d0ee36f50d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b662f496e697469616c56616c7565732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tkf/InitialValues.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/tkf/Aqua.jl"><img src="https://camo.githubusercontent.com/6100188045368e759fea6ce8c4df2e322ea75b3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175612e6a6c2d2546302539462538432541322d617175612e737667" alt="Aqua QA" data-canonical-src="https://img.shields.io/badge/Aqua.jl-%F0%9F%8C%A2-aqua.svg" style="max-width:100%;"></a></p>
<p>InitialValues.jl provides a generic singleton initial value <code>Init(f)</code>
that can be used as <code>a₀</code> in <code>f(a₀, x)</code>.  For a binary operator <code>op</code>,
it means that <code>Init(op)</code> acts like the identity for <em>any</em> type of <code>x</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InitialValues

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Init</span>(<span class="pl-k">+</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">Init</span>(<span class="pl-k">+</span>)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>(<span class="pl-k">+</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, init<span class="pl-k">=</span><span class="pl-c1">Init</span>(<span class="pl-k">+</span>))
<span class="pl-c1">6</span></pre></div>
<p>Following methods are defined for the binary operators in <code>Base</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Init</span>(<span class="pl-k">*</span>) <span class="pl-k">*</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Init</span>(<span class="pl-k">&amp;</span>) <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Init</span>(<span class="pl-k">|</span>) <span class="pl-k">|</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">min</span>(<span class="pl-c1">Init</span>(min), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max</span>(<span class="pl-c1">Init</span>(max), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-c1">add_sum</span>(<span class="pl-c1">Init</span>(Base<span class="pl-k">.</span>add_sum), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-c1">mul_prod</span>(<span class="pl-c1">Init</span>(Base<span class="pl-k">.</span>mul_prod), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span></pre></div>
<p><code>Init</code> is not called <code>Identity</code> because it is useful to define it for
functions that are not binary operator (symmetric in signature).  For
example, <code>push!!</code> in <a href="https://github.com/tkf/BangBang.jl">BangBang.jl</a>
defines</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BangBang

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!!</span>(<span class="pl-c1">Init</span>(push!<span class="pl-k">!</span>), <span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span></pre></div>
<p>This provides a powerful pattern when combined with <code>foldl</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>(push!<span class="pl-k">!</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">2.0</span>), init<span class="pl-k">=</span><span class="pl-c1">Init</span>(push!<span class="pl-k">!</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Union{Missing, Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">2.0</span></pre></div>
<p><a href="https://github.com/tkf/Transducers.jl">Transducers.jl</a> extensively
uses <code>Init</code>.</p>
<p>As binary operators like <code>*</code> in <code>Base</code> are heavily overloaded,
creating generic definitions such as above could have introduced
method ambiguities.  To protect against such situation, InitialValues.jl is
tested using <a href="https://github.com/tkf/Aqua.jl">Aqua.jl</a>.</p>
</article></div>