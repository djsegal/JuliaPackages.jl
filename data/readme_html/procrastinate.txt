<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-procrastinatejl" class="anchor" aria-hidden="true" href="#procrastinatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Procrastinate.jl</h1>
<p dir="auto">Strategic laziness.</p>
<p dir="auto">The <code>Deferred</code> datatype in Procrastinate.jl does one simple thing.  It waits until the
last possible moment to compute an object.  It is useful for expensive to compute items
in a <code>struct</code> that may or may not ever be required.  It takes a return type and
<em>zero-argument</em> closure.</p>
<h3 dir="auto"><a id="user-content-minimal-example" class="anchor" aria-hidden="true" href="#minimal-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal Example</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Procrastinate
julia&gt; d = Deferred() do
    # Some expensive function
    println(&quot;Computing!&quot;)
    return &quot;result&quot;
end
julia&gt; d()
Computing!
&quot;result&quot;
julia&gt; d()
&quot;result&quot;"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using Procrastinate
julia&gt; d = Deferred() do
    # Some expensive function
    println("Computing!")
    return "result"
end
julia&gt; d()
Computing!
"result"
julia&gt; d()
"result"
</code></pre></div>
<h3 dir="auto"><a id="user-content-more-typical-usage" class="anchor" aria-hidden="true" href="#more-typical-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More typical usage</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Demo
    item1::Deferred
    item2::Deferred
    Demo(d1::Deferred, d2::Deferred) = new(d1,d2)
end
fn(n) = n ∈ (0, 1) ? 1 : fn(n-2) + fn(n-1) # slow!
n, str = 42, &quot;It's a bird!&quot;
dd = Demo(
    Deferred() do 
        Base.sleep(2)
        str
    end, 
    Deferred(()-&gt;fn(n)) # takes a few seconds
)
dd.item1() # returns &quot;It's a bird!&quot; after a couple seconds
dd.item2() # returns 433494437 after a few seconds
dd.item1() # returns &quot;It's a bird!&quot; almost immediately
dd.item2() # returns 433494437 almost immediately"><pre><span class="pl-k">struct</span> Demo
    item1<span class="pl-k">::</span><span class="pl-c1">Deferred</span>
    item2<span class="pl-k">::</span><span class="pl-c1">Deferred</span>
    <span class="pl-en">Demo</span>(d1<span class="pl-k">::</span><span class="pl-c1">Deferred</span>, d2<span class="pl-k">::</span><span class="pl-c1">Deferred</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span>(d1,d2)
<span class="pl-k">end</span>
<span class="pl-en">fn</span>(n) <span class="pl-k">=</span> n <span class="pl-k">∈</span> (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>) <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">fn</span>(n<span class="pl-k">-</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">fn</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> slow!</span>
n, str <span class="pl-k">=</span> <span class="pl-c1">42</span>, <span class="pl-s"><span class="pl-pds">"</span>It's a bird!<span class="pl-pds">"</span></span>
dd <span class="pl-k">=</span> <span class="pl-c1">Demo</span>(
    <span class="pl-c1">Deferred</span>() <span class="pl-k">do</span> 
        Base<span class="pl-k">.</span><span class="pl-c1">sleep</span>(<span class="pl-c1">2</span>)
        str
    <span class="pl-k">end</span>, 
    <span class="pl-c1">Deferred</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">fn</span>(n)) <span class="pl-c"><span class="pl-c">#</span> takes a few seconds</span>
)
dd<span class="pl-k">.</span><span class="pl-c1">item1</span>() <span class="pl-c"><span class="pl-c">#</span> returns "It's a bird!" after a couple seconds</span>
dd<span class="pl-k">.</span><span class="pl-c1">item2</span>() <span class="pl-c"><span class="pl-c">#</span> returns 433494437 after a few seconds</span>
dd<span class="pl-k">.</span><span class="pl-c1">item1</span>() <span class="pl-c"><span class="pl-c">#</span> returns "It's a bird!" almost immediately</span>
dd<span class="pl-k">.</span><span class="pl-c1">item2</span>() <span class="pl-c"><span class="pl-c">#</span> returns 433494437 almost immediately</span></pre></div>
</article></div>