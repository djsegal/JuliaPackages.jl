<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-scalednumbersinput" class="anchor" aria-hidden="true" href="#scalednumbersinput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ScaledNumbersInput</h1>
<p dir="auto">Provides the <code>@SI</code> macro for converting numbers with SI prefixes</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @SI 4.5T
4.5e12

julia&gt; @SI values = [1.2n, 100a, 5.7G]
3-element Vector{Float64}:
 1.2e-9
 1.0e-16
 5.7e9
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@SI</span> <span class="pl-c1">4.5</span>T
<span class="pl-c1">4.5e12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@SI</span> values <span class="pl-k">=</span> [<span class="pl-c1">1.2</span>n, <span class="pl-c1">100</span>a, <span class="pl-c1">5.7</span>G]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.2e-9</span>
 <span class="pl-c1">1.0e-16</span>
 <span class="pl-c1">5.7e9</span>
</pre></div>
<h2 dir="auto"><a id="user-content-supported-scaling-factors" class="anchor" aria-hidden="true" href="#supported-scaling-factors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Scaling Factors</h2>
<p dir="auto">The following scaling factors are recognized:</p>
<table>
<thead>
<tr>
<th align="center">Scaling Symbol</th>
<th align="right">Factor</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Y</td>
<td align="right">1e24</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="right">1e21</td>
</tr>
<tr>
<td align="center">E</td>
<td align="right">1e18</td>
</tr>
<tr>
<td align="center">P</td>
<td align="right">1e15</td>
</tr>
<tr>
<td align="center">T</td>
<td align="right">1e12</td>
</tr>
<tr>
<td align="center">G</td>
<td align="right">1e9</td>
</tr>
<tr>
<td align="center">M</td>
<td align="right">1e6</td>
</tr>
<tr>
<td align="center">K</td>
<td align="right">1e3</td>
</tr>
<tr>
<td align="center">k</td>
<td align="right">1e3</td>
</tr>
<tr>
<td align="center">m</td>
<td align="right">1e-3</td>
</tr>
<tr>
<td align="center">u</td>
<td align="right">1e-6</td>
</tr>
<tr>
<td align="center">Î¼</td>
<td align="right">1e-6</td>
</tr>
<tr>
<td align="center">n</td>
<td align="right">1e-9</td>
</tr>
<tr>
<td align="center">p</td>
<td align="right">1e-12</td>
</tr>
<tr>
<td align="center">f</td>
<td align="right">1e-15</td>
</tr>
<tr>
<td align="center">a</td>
<td align="right">1e-18</td>
</tr>
<tr>
<td align="center">z</td>
<td align="right">1e-21</td>
</tr>
<tr>
<td align="center">y</td>
<td align="right">1e-24</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-why-not-just-define-constants-like-const-m1000000" class="anchor" aria-hidden="true" href="#why-not-just-define-constants-like-const-m1000000"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why not just define constants like <code>const M=1000000</code>?</h2>
<p dir="auto">That was considered but it has two downsides</p>
<h3 dir="auto"><a id="user-content-1-lower-accuracy" class="anchor" aria-hidden="true" href="#1-lower-accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. Lower accuracy</h3>
<p dir="auto">For example, compare:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; @SI 100a
1.0e-16

julia&gt; const a = 1e-18
1.0e-18

julia&gt; 100a
1.0000000000000001e-16"><pre class="notranslate"><code>julia&gt; @SI 100a
1.0e-16

julia&gt; const a = 1e-18
1.0e-18

julia&gt; 100a
1.0000000000000001e-16
</code></pre></div>
<p dir="auto">As you can see the <code>100 * 1e-18</code> has worse accuracy.</p>
<h3 dir="auto"><a id="user-content-2-namespace-pollution" class="anchor" aria-hidden="true" href="#2-namespace-pollution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Namespace pollution</h3>
<p dir="auto">The other downside of defining constants
for the scaling factors is it uses a lot of
single character variables.
With <code>@SI</code> it reads a block in and
only converts expressions with a literal number
followed by an SI scaling factor.  For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; function f(k)
          c1 = k + 2k
          c2 = @SI k + 2k
          return (c1=c1, c2=c2)
       end
f (generic function with 1 method)

julia&gt; f(10)
(c1 = 30, c2 = 2010.0)
"><pre lang="jldoctest" class="notranslate"><code>julia&gt; function f(k)
          c1 = k + 2k
          c2 = @SI k + 2k
          return (c1=c1, c2=c2)
       end
f (generic function with 1 method)

julia&gt; f(10)
(c1 = 30, c2 = 2010.0)

</code></pre></div>
<p dir="auto">Note that for <code>c2</code> the <code>k</code> in <code>2k</code> was interpreted as 2*1e3 while the preceeding <code>k</code> was not.  If <code>const k = 1000</code> was defined at
the top level then the argument <code>k</code> would take
precedence and <code>k</code> scalings inside <code>f</code> would
not work.</p>
</article></div>