<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bileveloptimization" class="anchor" aria-hidden="true" href="#bileveloptimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BilevelOptimization</h1>
<p dir="auto"><a href="https://travis-ci.org/matbesancon/BilevelOptimization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7c90b11dde7f59513dabb47aefa99e28ed5e644c918bab4333e2f114a928243/68747470733a2f2f7472617669732d63692e6f72672f6d6174626573616e636f6e2f42696c6576656c4f7074696d697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/matbesancon/BilevelOptimization.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/matbesancon/BilevelOptimization.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/34ddbdbd469e473e98804de2bc02858e4320a81303b6991a5050498b80d3ca4e/687474703a2f2f636f6465636f762e696f2f6769746875622f6d6174626573616e636f6e2f42696c6576656c4f7074696d697a6174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/matbesancon/BilevelOptimization.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/matbesancon/BilevelOptimization.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/67edeba5081bdfd4d584fcaccf3ab2b692ab09d43f7c5d9a542ddfecf0c841fd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6174626573616e636f6e2f42696c6576656c4f7074696d697a6174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/matbesancon/BilevelOptimization.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3249187" rel="nofollow"><img src="https://camo.githubusercontent.com/1e0fb830e26454d8e41a3cbf68e6428b850bb4b4cfe9d9df3b3762ffa36c0fd3/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333234393138372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3249187.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.21105/joss.01278" rel="nofollow"><img src="https://camo.githubusercontent.com/7d303c772ba10eb7cf68f84eb1e2af8b9894985595e2320cd202e2747ba644ef/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30313237382f7374617475732e737667" alt="DOI" data-canonical-src="http://joss.theoj.org/papers/10.21105/joss.01278/status.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is a Julia toolbox based on JuMP.jl for solving
<a href="https://en.wikipedia.org/wiki/Bilevel_optimization" rel="nofollow">bilevel optimization problems</a>.
These are encountered in various applications, including power grids, security games,
market equilibria or chemical reaction optimization.</p>
<h2 dir="auto"><a id="user-content-generic-bilevel-linear-problems-blp" class="anchor" aria-hidden="true" href="#generic-bilevel-linear-problems-blp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generic bilevel linear problems (BLP)</h2>
<p dir="auto">The generic problem can be written:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="min_{x} F(x,y)
such that
  G * x + H * y ⩽ q
  y ∈ arg min_y {d^T y + x^T F * y
                 such that
                   A * x + B * y ⩽ b
                   y ⩾ 0
  }
  x_j integer ∀ j ∈ Jx"><pre>min_{x} <span class="pl-c1">F</span>(x,y)
such that
  G <span class="pl-k">*</span> x <span class="pl-k">+</span> H <span class="pl-k">*</span> y ⩽ q
  y <span class="pl-k">∈</span> arg min_y {d<span class="pl-k">^</span>T y <span class="pl-k">+</span> x<span class="pl-k">^</span>T F <span class="pl-k">*</span> y
                 such that
                   A <span class="pl-k">*</span> x <span class="pl-k">+</span> B <span class="pl-k">*</span> y ⩽ b
                   y ⩾ <span class="pl-c1">0</span>
  }
  x_j integer ∀ j <span class="pl-k">∈</span> Jx</pre></div>
<p dir="auto"><code>x</code> represents the upper-level decision variable and <code>y</code> the lower-level one.
<code>y</code> is thus the solution to a parametric optimization sub-problem, depending
on the value of <code>x</code>.
The required data describing this problem are
the feasibility domains of the upper and lower level and the coefficients
of the objective functions. All these are regrouped within the <code>BilevelLP</code>
type of this package.</p>
<p dir="auto">The formulation is made as general as possible
for the problem to remain approachable with plain Mixed-Integer Solvers
(CBC, GLPK, SCIP, Gurobi, CPLEX). For a simple linear-linear problem,
the user can set <code>Jx = ∅</code> and <code>F</code> as a zero matrix of appropriate dimension.
The problem can be made as complex as wanted <strong>at the upper level</strong>,
as long as JuMP and the solver used support the constraints and objective.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage:</h3>
<p dir="auto">The main function is <code>build_bilevel_lp</code>, which will build the JuMP model
or modify it for the bilevel problem.</p>
<p dir="auto">The signature:<br>
<code>build_blp_model(bp::BilevelOptimization.BilevelLP, solver; comp_method)</code>
builds the model from scratch. It will return a <code>Tuple</code>: <code>(m, x, y, λ, s)</code> with:</p>
<ul dir="auto">
<li><code>m</code> the JuMP model</li>
<li><code>x</code> the upper-level variable vector</li>
<li><code>y</code> the lower-level variable vector</li>
<li><code>λ</code> the dual of the lower-level problem</li>
<li><code>s</code> the lower-level slack variable vector</li>
</ul>
<p dir="auto">The function can also be called with a model already built:<br>
<code>build_blp_model(m::JuMP.Model, bp::BilevelOptimization.BilevelLP, x, y; comp_method)</code>
In which case it will add the lower-level optimality constraints, it returns the same tuple.</p>
<p dir="auto">If the user is not willing to describe the whole problem using a <code>BilevelLP</code>,
the following signature can be used:
<code>build_blp_model(m::JuMP.Model, B::M, d, s; comp_method)</code></p>
<p dir="auto">With <code>B</code> the lower-level constraint matrix, d the lower-level objective and <code>s</code> the lower-level
slack variable. Only the KKT conditions are added to the model in that case (not the lower-level
feasibility constraints).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed using Julia <code>Pkg</code> tool:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.0) pkg&gt; add BilevelOptimization"><pre>julia<span class="pl-k">&gt;</span> ]
(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add BilevelOptimization</pre></div>
<p dir="auto">You will also need an optimization solver up and running with <a href="https://github.com/juliaopt/JuMP.jl">JuMP</a>.</p>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<p dir="auto">Tests can be performed using <code>Pkg</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.0) pkg&gt; test BilevelOptimization"><pre>julia<span class="pl-k">&gt;</span> ]
(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> test BilevelOptimization</pre></div>
<h2 dir="auto"><a id="user-content-api-documentation" class="anchor" aria-hidden="true" href="#api-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API documentation</h2>
<p dir="auto">From the Julia REPL, type <code>?</code> to show the help prompt, then type the
identifier you want the documentation for.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BilevelOptimization

help?&gt; BilevelOptimization.BilevelLP
  A bilevel linear optimization problem of the form:

  min cx^T * x + cy^T * y
  s.t. G x + H y &lt;= q
       x_j ∈ [xl_j,xu_j]
       x_j ∈ ℤ ∀ j ∈ Jx
       y ∈ arg min {
          d^T * y + x^T * F * y
          s.t. A x + B y &lt;= b
               y_j ∈ [yl_j,yu_j]
          }

  Note that integer variables are allowed at the upper level. "><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BilevelOptimization

help?<span class="pl-k">&gt;</span> BilevelOptimization<span class="pl-k">.</span>BilevelLP
  A bilevel linear optimization problem of the form<span class="pl-k">:</span>

  min cx<span class="pl-k">^</span>T <span class="pl-k">*</span> x <span class="pl-k">+</span> cy<span class="pl-k">^</span>T <span class="pl-k">*</span> y
  s<span class="pl-k">.</span>t. G x <span class="pl-k">+</span> H y <span class="pl-k">&lt;=</span> q
       x_j <span class="pl-k">∈</span> [xl_j,xu_j]
       x_j <span class="pl-k">∈</span> ℤ ∀ j <span class="pl-k">∈</span> Jx
       y <span class="pl-k">∈</span> arg min {
          d<span class="pl-k">^</span>T <span class="pl-k">*</span> y <span class="pl-k">+</span> x<span class="pl-k">^</span>T <span class="pl-k">*</span> F <span class="pl-k">*</span> y
          s<span class="pl-k">.</span>t. A x <span class="pl-k">+</span> B y <span class="pl-k">&lt;=</span> b
               y_j <span class="pl-k">∈</span> [yl_j,yu_j]
          }

  Note that integer variables are allowed at the upper level. </pre></div>
<h2 dir="auto"><a id="user-content-resolution-method" class="anchor" aria-hidden="true" href="#resolution-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resolution method</h2>
<p dir="auto">The "hard" part of the reduction of a bilevel problem is the set of
complementarity constraints of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="λ ⋅ (b - Ax - By) = 0"><pre>λ <span class="pl-k">⋅</span> (b <span class="pl-k">-</span> Ax <span class="pl-k">-</span> By) <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">These constraints cannot be handled directly, different methods have been
developed in the literature and implemented in this package.
The standard way is to give a different algorithm in <code>build_blp_model</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="build_blp_model(args..., comp_method::ComplementarityMethod = my_method)"><pre><span class="pl-c1">build_blp_model</span>(args<span class="pl-k">...</span>, comp_method<span class="pl-k">::</span><span class="pl-c1">ComplementarityMethod</span> <span class="pl-k">=</span> my_method)</pre></div>
<h3 dir="auto"><a id="user-content-special-ordered-sets-1" class="anchor" aria-hidden="true" href="#special-ordered-sets-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Special ordered sets 1</h3>
<p dir="auto">Special-ordered Sets of type 1 or <a href="https://en.wikipedia.org/wiki/Special_ordered_set" rel="nofollow">SOS1</a>
are used by default for complementarity constraints.
The option to pass is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="build_blp_model(args..., comp_method = SOS1Complementarity())"><pre><span class="pl-c1">build_blp_model</span>(args<span class="pl-k">...</span>, comp_method <span class="pl-k">=</span> <span class="pl-c1">SOS1Complementarity</span>())</pre></div>
<h3 dir="auto"><a id="user-content-dual-and-primal-bounds" class="anchor" aria-hidden="true" href="#dual-and-primal-bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dual and primal bounds</h3>
<p dir="auto">The most common technique for these constraints is the linearization of the
constraint with a formulation developed in Fortuny-Amat and McCarl, 1981,
using so-called big-M constraints.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="build_blp_model(args..., comp_method = BoundComplementarity(MD, MP))"><pre><span class="pl-c1">build_blp_model</span>(args<span class="pl-k">...</span>, comp_method <span class="pl-k">=</span> <span class="pl-c1">BoundComplementarity</span>(MD, MP))</pre></div>
<p dir="auto"><code>MD</code>, <code>MP</code> are primal and dual bounds, both can be either a scalar
for one bound per variable type or an abstract vector for one bound per
variable.</p>
<h3 dir="auto"><a id="user-content-custom-method" class="anchor" aria-hidden="true" href="#custom-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom method</h3>
<p dir="auto">Users can create a custom method for the complementarity constraint,
by creating a type <code>T &lt;: ComplementarityMethod</code> (sub-typing is optional but
helps for clarity). They also need to implement a method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_complementarity_constraint(m, cm::T, s, λ)"><pre><span class="pl-c1">add_complementarity_constraint</span>(m, cm<span class="pl-k">::</span><span class="pl-c1">T</span>, s, λ)</pre></div>
<p dir="auto">Within which the complementarity constraints are added to the JuMP model <code>m</code>.</p>
<h2 dir="auto"><a id="user-content-the-toll-setting-problem" class="anchor" aria-hidden="true" href="#the-toll-setting-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The toll-setting problem</h2>
<p dir="auto">As a special application of the above model, the module <code>BilevelFlowProblems</code>
offers the following problem:</p>
<ul dir="auto">
<li>The upper-level, acting as a leader of the <a href="https://en.wikipedia.org/wiki/Stackelberg_competition" rel="nofollow">Stackelberg game</a>, chooses taxes to set on some arcs of a directed graph.</li>
<li>The lower-level, acting as the follower, makes a
<a href="https://en.wikipedia.org/wiki/Minimum-cost_flow_problem" rel="nofollow">minimum-cost flow</a> with
a given minimum amount from the source to the sink.</li>
<li>Each arc has an invariant base cost and a tax level decided upon by the leader.</li>
</ul>
<p dir="auto">This has been investigated in the literature as the "toll-setting problem".
The required data include:</p>
<ul dir="auto">
<li>the initial cost of each arc for all <code>i,j</code></li>
<li>which edges can be taxed by the leader for all <code>i,j</code></li>
<li>the tax options (at which level can each edge be taxed) for all <code>i,j,k</code></li>
<li>flow capacities of each edge</li>
<li>the minimum flow the follower has to pass from source to sink</li>
</ul>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BilevelOptimization.BilevelFlowProblems

init_cost = [
	0. 1. 1. 4.
	0. 0. 0. 1.
	0. 0. 0. 1.
	0. 0. 0. 0.
]
taxable_edges = [
	false true true false
	false false false true
	false false false true
	false false false false
]
tax_options = zeros(4,4,5)
for i in 1:4, j in 1:4
	if taxable_edges[i,j]
    	tax_options[i,j,:] .= (0.0, 0.5, 1.0, 1.5, 2.0)
    end
end

capacities = [
	0. 3. 2. 3.
    0. 0. 0. 2.
    0. 0. 0. 1.
    0. 0. 0. 0.
]

minflow = 3.

BilevelFlowProblem(init_cost,taxable_edges,capacities,tax_options, minflow)

(m, r, y, f, λ) = build_blp_model(bfp, optimizer_with_attributes(Cbc.Optimizer, &quot;LogLevel&quot; =&gt; 0))
st = JuMP.optimize!(m)

# objective_value(m) ≈ 6.
#     for j in 1:size(r)[2]
#        for i in 1:size(r)[1]
#            @test JuMP.value(r[i,j]) ≈ sum(JuMP.value.(y[i,j,:]) .* bfp.tax_options[i,j,:]) * JuMP.value(f[i,j])
#        end
#    end"><pre><span class="pl-k">using</span> BilevelOptimization<span class="pl-k">.</span>BilevelFlowProblems

init_cost <span class="pl-k">=</span> [
	<span class="pl-c1">0.</span> <span class="pl-c1">1.</span> <span class="pl-c1">1.</span> <span class="pl-c1">4.</span>
	<span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">1.</span>
	<span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">1.</span>
	<span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span>
]
taxable_edges <span class="pl-k">=</span> [
	<span class="pl-c1">false</span> <span class="pl-c1">true</span> <span class="pl-c1">true</span> <span class="pl-c1">false</span>
	<span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">true</span>
	<span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">true</span>
	<span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">false</span> <span class="pl-c1">false</span>
]
tax_options <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
	<span class="pl-k">if</span> taxable_edges[i,j]
    	tax_options[i,j,:] <span class="pl-k">.=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

capacities <span class="pl-k">=</span> [
	<span class="pl-c1">0.</span> <span class="pl-c1">3.</span> <span class="pl-c1">2.</span> <span class="pl-c1">3.</span>
    <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">2.</span>
    <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">1.</span>
    <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span>
]

minflow <span class="pl-k">=</span> <span class="pl-c1">3.</span>

<span class="pl-c1">BilevelFlowProblem</span>(init_cost,taxable_edges,capacities,tax_options, minflow)

(m, r, y, f, λ) <span class="pl-k">=</span> <span class="pl-c1">build_blp_model</span>(bfp, <span class="pl-c1">optimizer_with_attributes</span>(Cbc<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>LogLevel<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>))
st <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(m)

<span class="pl-c"><span class="pl-c">#</span> objective_value(m) ≈ 6.</span>
<span class="pl-c"><span class="pl-c">#</span>     for j in 1:size(r)[2]</span>
<span class="pl-c"><span class="pl-c">#</span>        for i in 1:size(r)[1]</span>
<span class="pl-c"><span class="pl-c">#</span>            @test JuMP.value(r[i,j]) ≈ sum(JuMP.value.(y[i,j,:]) .* bfp.tax_options[i,j,:]) * JuMP.value(f[i,j])</span>
<span class="pl-c"><span class="pl-c">#</span>        end</span>
<span class="pl-c"><span class="pl-c">#</span>    end</span></pre></div>
<h2 dir="auto"><a id="user-content-questions-issues-contributions" class="anchor" aria-hidden="true" href="#questions-issues-contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Questions, issues, contributions</h2>
<p dir="auto">Problems with the package and its usage can be explained through Github issues,
ideally with a minimal working example showing the problem.
Pull requests (PR) are welcome.</p>
<p dir="auto">Please read detailed information in <strong>CONTRIBUTING.md</strong>.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/joaquimg/BilevelJuMP.jl">BilevelJuMP.jl</a> is more flexible on the form of the problem input, and has been designed for MathOptInterface from the beginning, the two packages may be merged at some point</li>
<li><a href="https://github.com/chkwon/Complementarity.jl">Complementarity.jl</a> solving a generic class
including bilevel problems using non-linear techniques</li>
<li><a href="https://github.com/coin-or/MibS">MibS</a> for problems where the lower-level also includes integer variables. KKT conditions can therefore not be used and other branching and cutting plane techniques are leveraged.</li>
<li><a href="https://yalmip.github.io/tutorial/bilevelprogramming/" rel="nofollow">YALMIP</a> includes a bilevel solver and offers roughly the same features (and a bit more) as BilevelOptimization.jl</li>
</ul>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">See <em>CITATION.bib</em>, prefer citing the paper published in the Journal of Open-Source Software.</p>
</article></div>