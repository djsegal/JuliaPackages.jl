<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abstractgps" class="anchor" aria-hidden="true" href="#abstractgps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractGPs</h1>
<p><a href="https://JuliaGaussianProcesses.github.io/AbstractGPs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaGaussianProcesses.github.io/AbstractGPs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/JuliaGaussianProcesses/AbstractGPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f6e4d4d0059fa8de508eb083c61843baa8c1fd5d/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961476175737369616e50726f6365737365732f41627374726163744750732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaGaussianProcesses/AbstractGPs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaGaussianProcesses/AbstractGPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00f63cbcf1a09d04499ab27ec7ed83e4826ecef1/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961476175737369616e50726f6365737365732f41627374726163744750732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaGaussianProcesses/AbstractGPs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p>AbstractGPs.jl is a package that defines a low-level API for working with Gaussian processes (GPs), and basic functionality for working with them in the simplest cases. As such it is aimed more at developers and researchers who are interested in using it as a building block than end-users of GPs.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AbstractGPs, KernelFunctions, Random

<span class="pl-c"><span class="pl-c">#</span> Construct a zero-mean Gaussian process with a matern-3/2 kernel.</span>
f <span class="pl-k">=</span> <span class="pl-c1">GP</span>(<span class="pl-c1">Matern32Kernel</span>())

rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> Specify some input locations.</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(rng, <span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Look at the finite-dimensional marginals of `f` at `x`, under zero-mean observation noise with variance `s`.</span>
s <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
fx <span class="pl-k">=</span> <span class="pl-c1">f</span>(x, s)

<span class="pl-c"><span class="pl-c">#</span> Sample from the prior at `x` under noise.</span>
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(rng, fx)

<span class="pl-c"><span class="pl-c">#</span> Compute the log marginal probability of `y`.</span>
<span class="pl-c1">logpdf</span>(fx, y)

<span class="pl-c"><span class="pl-c">#</span> Construct the posterior process implied by conditioning `f` at `x` on `y`.</span>
f_posterior <span class="pl-k">=</span> <span class="pl-c1">posterior</span>(fx, y)

<span class="pl-c"><span class="pl-c">#</span> A posterior process follows the `AbstractGP` interface, so the same</span>
<span class="pl-c"><span class="pl-c">#</span> functions work on the posterior as the prior.</span>
<span class="pl-c1">rand</span>(rng, <span class="pl-c1">f_posterior</span>(x))
<span class="pl-c1">logpdf</span>(<span class="pl-c1">f_posterior</span>(x), y)

<span class="pl-c"><span class="pl-c">#</span> Compute the VFE approximation to the log marginal probability of `y`.</span>
z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(rng, <span class="pl-c1">4</span>)
u <span class="pl-k">=</span> <span class="pl-c1">f</span>(z)
<span class="pl-c1">elbo</span>(fx, y, u)

<span class="pl-c"><span class="pl-c">#</span> Construct the approximate posterior process implied by the VFE approximation.</span>
f_approx_posterior <span class="pl-k">=</span> <span class="pl-c1">approx_posterior</span>(<span class="pl-c1">VFE</span>(), fx, y, u)

<span class="pl-c"><span class="pl-c">#</span> An approximate posterior process is yet another `AbstractGP`, so you can do things with it like</span>
<span class="pl-c1">marginals</span>(<span class="pl-c1">f_approx_posterior</span>(x))</pre></div>
</article></div>