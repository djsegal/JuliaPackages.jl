<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linearregression" class="anchor" aria-hidden="true" href="#linearregression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinearRegression</h1>
<p dir="auto"><a href="https://github.com/st--/LinearRegression.jl/actions/workflows/CI.yml?query=branch%3A"><img src="https://github.com/st--/LinearRegression.jl/actions/workflows/CI.yml/badge.svg?branch=" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This is a simple package. <a href="#what-this-package-does-not-do-aka-alternatives">See below</a> for a list of more complex packages for linear regression in Julia.</p>
<h2 dir="auto"><a id="user-content-why-this-package" class="anchor" aria-hidden="true" href="#why-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why this package?</h2>
<p dir="auto">Because I keep finding myself thinking, "I need some simple linear regression
here...", and missing the level of abstraction halfway in between <code>X \ y</code> and
<a href="https://github.com/JuliaStats/GLM.jl">GLM.jl</a>, without lots of additional
dependencies.
I keep running into <a href="https://discourse.julialang.org/t/efficient-way-of-doing-linear-regression/31232" rel="nofollow">this Discourse
thread</a>
and wishing I could just be <code>using LinearRegression</code>.
<a href="https://github.com/giob1994/Alistair.jl">Alistair.jl</a> would fit the bill, but
hasn't been maintained and doesn't work with Julia 1+.</p>
<h2 dir="auto"><a id="user-content-what-this-package-supports" class="anchor" aria-hidden="true" href="#what-this-package-supports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What this package supports:</h2>
<p dir="auto"><strong>Linear regression based on vector and matrix inputs and outputs:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lr = linregress(X, y)"><pre>lr <span class="pl-k">=</span> <span class="pl-c1">linregress</span>(X, y)</pre></div>
<p dir="auto"><code>X</code> can be a <em>vector</em> (1D inputs, each element is one observation) or a <em>matrix</em> (multivariate inputs, each row is one observation, columns represent features).</p>
<p dir="auto"><code>y</code> can be a <em>vector</em> (1D outputs, each element is one observation) or a <em>matrix</em> (multivariate outputs, each row is one observation, columns represent targets).</p>
<p dir="auto"><strong>Weighted linear regression:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lr = linregress(X, y, weights)"><pre>lr <span class="pl-k">=</span> <span class="pl-c1">linregress</span>(X, y, weights)</pre></div>
<p dir="auto"><code>weights</code> is the vector of each observation's weight.</p>
<p dir="auto"><strong>Intercept/bias term:</strong>
By default, implicitly adds a column of ones to account for the intercept term.</p>
<p dir="auto">You can disable this and force the linear regression to go through the origin by passing the <code>intercept=false</code> keyword argument.</p>
<p dir="auto"><strong>Choice of solver:</strong>
By default, uses QR factorization (<code>X \ y</code>) to solve the linear system.
You can explicitly choose a solver by passing the <code>method</code> keyword argument.
Currently implemented choices are <code>method=SolveQR()</code> (using QR factorization, the default) and <code>method=SolveCholesky()</code> (using Cholesky factorization; can be faster, but numerically less accurate).</p>
<p dir="auto"><strong>Predicting:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ytest = lr(Xtest)"><pre>ytest <span class="pl-k">=</span> <span class="pl-c1">lr</span>(Xtest)</pre></div>
<p dir="auto"><strong>Extracting coefficients:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="β = coef(lr)"><pre>β <span class="pl-k">=</span> <span class="pl-c1">coef</span>(lr)</pre></div>
<p dir="auto">which includes the intercept/bias in the last position, if <code>intercept=true</code> (the default).</p>
<p dir="auto">You can explicitly obtain slopes and intercept/bias by calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="LinearRegression.slope(lr)
LinearRegression.bias(lr)"><pre>LinearRegression<span class="pl-k">.</span><span class="pl-c1">slope</span>(lr)
LinearRegression<span class="pl-k">.</span><span class="pl-c1">bias</span>(lr)</pre></div>
<p dir="auto"><em>I'm happy to receive <a href="https://github.com/st--/LinearRegression.jl/issues/new/choose">issue reports</a> and <a href="https://github.com/st--/LinearRegression.jl/compare">pull requests</a>, though I am likely to say no to proposals that would significantly increase the scope of this package (see below for other packages with more features).</em></p>
<h2 dir="auto"><a id="user-content-what-this-package-does-not-do-aka-alternatives" class="anchor" aria-hidden="true" href="#what-this-package-does-not-do-aka-alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What this package does not do (aka Alternatives):</h2>
<ul dir="auto">
<li>
<p dir="auto">Be as comprehensive as SciML's <a href="https://github.com/SciML/LinearSolve.jl/">LinearSolve.jl</a> (on the other hand, less dependencies).</p>
</li>
<li>
<p dir="auto">Ridge regression (use <a href="https://github.com/JuliaStats/MultivariateStats.jl">MultivariateStats.jl</a> instead, or convince me it really should be part of LinearRegression.jl as well).</p>
</li>
<li>
<p dir="auto">Handling of DataFrames (use <a href="https://github.com/JuliaStats/GLM.jl">GLM.jl</a> instead).</p>
</li>
<li>
<p dir="auto">Lots of regression statistics (use <a href="https://github.com/JuliaStats/GLM.jl">GLM.jl</a> instead).</p>
</li>
<li>
<p dir="auto">Different (non-Gaussian) observation models (use <a href="https://github.com/JuliaStats/GLM.jl">GLM.jl</a> instead).</p>
</li>
<li>
<p dir="auto">Sparse regression (use <a href="https://github.com/joshday/SparseRegression.jl/">SparseRegression.jl</a> instead).</p>
</li>
<li>
<p dir="auto">Bayesian linear regression (use <a href="https://github.com/JuliaGaussianProcesses/BayesianLinearRegressors.jl">BayesianLinearRegressors.jl</a> instead).</p>
</li>
<li>
<p dir="auto">Online estimation (use <a href="https://github.com/joshday/OnlineStats.jl">OnlineStats.jl</a> instead).</p>
</li>
</ul>
<p dir="auto"><em>Want to suggest another package to recommend here? Feel free to <a href="https://github.com/st--/LinearRegression.jl/compare">open a pull request</a>! (:</em></p>
</article></div>