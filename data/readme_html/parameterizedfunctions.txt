<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parameterizedfunctionsjl" class="anchor" aria-hidden="true" href="#parameterizedfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ParameterizedFunctions.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/833b89353967086ef3bf7e1d470c469fd93cc80696ae173ffc5fbcf401d2f5af/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ParameterizedFunctions.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/ParameterizedFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SciML/ParameterizedFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be5f6dba01fdae612158e7c58f78f8497b864d33c592efcaf53feb8fd59f0d71/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f506172616d65746572697a656446756e6374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/ParameterizedFunctions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/SciML/ParameterizedFunctions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/83c080a655407d9d669bb8e83bd5ceecece9ecfcb29464a6813155ee898a6cd1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5363694d4c2f506172616d65746572697a656446756e6374696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SciML/ParameterizedFunctions.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>ParameterizedFunctions.jl is a component of the SciML ecosystem which allows
for easily defining parameterized ODE models in a simple syntax.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<h3><a id="user-content-ode-macros" class="anchor" aria-hidden="true" href="#ode-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ODE Macros</h3>
<p>A helper macro is provided to make it easier to define a <code>ParameterizedFunction</code>,
and it will symbolically compute a bunch of extra functions to make the differential
equation solvers run faster. For example, to define the previous <code>LotkaVolterra</code>,
you can use the following command:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f = @ode_def LotkaVolterra begin
  dx = a*x - b*x*y
  dy = -c*y + d*x*y
end a b c d
"><pre>f <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> LotkaVolterra <span class="pl-k">begin</span>
  dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> b<span class="pl-k">*</span>x<span class="pl-k">*</span>y
  dy <span class="pl-k">=</span> <span class="pl-k">-</span>c<span class="pl-k">*</span>y <span class="pl-k">+</span> d<span class="pl-k">*</span>x<span class="pl-k">*</span>y
<span class="pl-k">end</span> a b c d</pre></div>
<p>or you can define it anonymously:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f = @ode_def begin
  dx = a*x - b*x*y
  dy = -c*y + d*x*y
end a b c d
"><pre>f <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> <span class="pl-k">begin</span>
  dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> b<span class="pl-k">*</span>x<span class="pl-k">*</span>y
  dy <span class="pl-k">=</span> <span class="pl-k">-</span>c<span class="pl-k">*</span>y <span class="pl-k">+</span> d<span class="pl-k">*</span>x<span class="pl-k">*</span>y
<span class="pl-k">end</span> a b c d</pre></div>
<p>The macro also defines the Jacobian <code>f'</code>. This is defined as an in-place Jacobian <code>f(Val{:jac},t,u,J)</code>.
This is calculated using SymEngine.jl automatically, so it's no effort on your part.
The symbolic inverse of the Jacobian is also computed, and an in-place function
for this is available as well as <code>f(Val{:invjac},t,u,iJ)</code>. If the Jacobians cannot be
computed, a warning is thrown and only the function itself is usable. The functions
<code>jac_exists(f)</code> and <code>invjac_exists(f)</code> can be used to see whether the Jacobian
and the function for its inverse exist.</p>
<h4><a id="user-content-extra-options" class="anchor" aria-hidden="true" href="#extra-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extra Options</h4>
<p>In most cases the <code>@ode_def</code> macro should be sufficient. This is because by default
the macro will simply calculate each function symbolically, and if it can't it
will simply throw a warning and move on. However, in extreme cases the symbolic
calculations may take a long time, in which case it is necessary to turn them
off. To do this, use the <code>ode_def_opts</code> function. The <code>@ode_def</code> macro simply defines the specifiable options:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="opts = Dict{Symbol,Bool}(
      :build_tgrad =&gt; true,
      :build_jac =&gt; true,
      :build_expjac =&gt; false,
      :build_invjac =&gt; true,
      :build_invW =&gt; true,
      :build_invW_t =&gt; true,
      :build_hes =&gt; false,
      :build_invhes =&gt; false,
      :build_dpfuncs =&gt; true)
"><pre>opts <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Bool}</span>(
      <span class="pl-c1">:build_tgrad</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
      <span class="pl-c1">:build_jac</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
      <span class="pl-c1">:build_expjac</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
      <span class="pl-c1">:build_invjac</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
      <span class="pl-c1">:build_invW</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
      <span class="pl-c1">:build_invW_t</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
      <span class="pl-c1">:build_hes</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
      <span class="pl-c1">:build_invhes</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
      <span class="pl-c1">:build_dpfuncs</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)</pre></div>
<p>and calls the function <code>ode_def_opts(name::Symbol,opts,ex::Expr,params)</code>. Note that
params is an iterator holding expressions for the parameters.</p>
<p>In addition, one can also use their own function inside of the macro. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x,y,d) = erf(x*y/d)
NJ = @ode_def FuncTest begin
  dx = a*x - b*x*y
  dy = -c*y + f(x,y,d)
end a b c d
"><pre><span class="pl-en">f</span>(x,y,d) <span class="pl-k">=</span> <span class="pl-c1">erf</span>(x<span class="pl-k">*</span>y<span class="pl-k">/</span>d)
NJ <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> FuncTest <span class="pl-k">begin</span>
  dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> b<span class="pl-k">*</span>x<span class="pl-k">*</span>y
  dy <span class="pl-k">=</span> <span class="pl-k">-</span>c<span class="pl-k">*</span>y <span class="pl-k">+</span> <span class="pl-c1">f</span>(x,y,d)
<span class="pl-k">end</span> a b c d</pre></div>
<p>will do fine. The symbolic derivatives will not work unless you define a derivative
for <code>f</code>.</p>
<h4><a id="user-content-extra-macros" class="anchor" aria-hidden="true" href="#extra-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extra Macros</h4>
<p>Instead of using <code>ode_def_opts</code> directly, one can use one of the following macros
to be more specific about what to not calculate. In increasing order of calculations:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@ode_def_bare
@ode_def
@ode_def_all
"><pre><span class="pl-c1">@ode_def_bare</span>
<span class="pl-c1">@ode_def</span>
<span class="pl-c1">@ode_def_all</span></pre></div>
<h3><a id="user-content-extra-functions" class="anchor" aria-hidden="true" href="#extra-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extra Functions</h3>
<h4><a id="user-content-jacobian-function" class="anchor" aria-hidden="true" href="#jacobian-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Jacobian Function</h4>
<p>The Jacobian overload is provided by overloading in the following manner:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function (p::LotkaVolterra)(::Type{Val{:jac}},t,u,J)
  J[1,1] = p.a - p.b * u[2]
  J[1,2] = -(p.b) * u[1]
  J[2,1] = 1 * u[2]
  J[2,2] = -3 + u[1]
  nothing
end
"><pre><span class="pl-k">function</span> (p<span class="pl-k">::</span><span class="pl-c1">LotkaVolterra</span>)(<span class="pl-k">::</span><span class="pl-c1">Type{Val{:jac}}</span>,t,u,J)
  J[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
  J[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>(p<span class="pl-k">.</span>b) <span class="pl-k">*</span> u[<span class="pl-c1">1</span>]
  J[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
  J[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>]
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-inverse-jacobian" class="anchor" aria-hidden="true" href="#inverse-jacobian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inverse Jacobian</h4>
<p>The Inverse Jacobian overload is provided by overloading in the following manner:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function (p::LotkaVolterra)(::Type{Val{:invjac}},t,u,J)
  J[1,1] = (1 - (p.b * u[1] * u[2]) / ((p.a - p.b * u[2]) * (-3 + u[1] + (p.b * u[1] * u[2]) / (p.a - p.b * u[2])))) / (p.a - p.b * u[2])
  J[1,2] = (p.b * u[1]) / ((p.a - p.b * u[2]) * (-3 + u[1] + (p.b * u[1] * u[2]) / (p.a - p.b * u[2])))
  J[2,1] = -(u[2]) / ((p.a - p.b * u[2]) * (-3 + u[1] + (p.b * u[1] * u[2]) / (p.a - p.b * u[2])))
  J[2,2] = (-3 + u[1] + (p.b * u[1] * u[2]) / (p.a - p.b * u[2])) ^ -1
  nothing
end
"><pre><span class="pl-k">function</span> (p<span class="pl-k">::</span><span class="pl-c1">LotkaVolterra</span>)(<span class="pl-k">::</span><span class="pl-c1">Type{Val{:invjac}}</span>,t,u,J)
  J[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> ((p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">*</span> (<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> (p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])))) <span class="pl-k">/</span> (p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])
  J[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>]) <span class="pl-k">/</span> ((p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">*</span> (<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> (p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])))
  J[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>(u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> ((p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">*</span> (<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> (p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])))
  J[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> (p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]) <span class="pl-k">/</span> (p<span class="pl-k">.</span>a <span class="pl-k">-</span> p<span class="pl-k">.</span>b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])) <span class="pl-k">^</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-parameter-jacobian" class="anchor" aria-hidden="true" href="#parameter-jacobian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parameter Jacobian</h4>
<p>For solvers which need parameters derivatives, specifying the functions can increase
performance. For our example, we allow the solvers to use the explicit derivatives
in the parameters by:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function (p::LotkaVolterra)(::Type{Val{:paramjac}},J,u,p,t)
    J[1, 1] = u[1] * 1
    J[1, 2] = -(u[1]) * u[2]
    J[1, 3] = 0 * 1
    J[1, 4] = 0 * 1
    J[2, 1] = 0 * 1
    J[2, 2] = 0 * 1
    J[2, 3] = -(u[2])
    J[2, 4] = u[1] * u[2]
    nothing
end
"><pre><span class="pl-k">function</span> (p<span class="pl-k">::</span><span class="pl-c1">LotkaVolterra</span>)(<span class="pl-k">::</span><span class="pl-c1">Type{Val{:paramjac}}</span>,J,u,p,t)
    J[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> <span class="pl-c1">1</span>
    J[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>(u[<span class="pl-c1">1</span>]) <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
    J[<span class="pl-c1">1</span>, <span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span>
    J[<span class="pl-c1">1</span>, <span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span>
    J[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span>
    J[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span>
    J[<span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>(u[<span class="pl-c1">2</span>])
    J[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
    <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
</article></div>