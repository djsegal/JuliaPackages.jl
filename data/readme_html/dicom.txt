<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dicomjl" class="anchor" aria-hidden="true" href="#dicomjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DICOM.jl</h1>
<p>Julia interface for parsing/writing DICOM (Digital Imaging and Communications in Medicine) files</p>
<p><a href="https://github.com/JuliaHealth/DICOM.jl/actions"><img src="https://github.com/JuliaHealth/DICOM.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaHealth/DICOM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/edb4d3bccba4eed126e81b34945202a67af0a818852e64b411a6a170088d49d7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614865616c74682f4449434f4d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaHealth/DICOM.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><strong>Installation</strong></p>
<p>To install the package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;DICOM&quot;)
"><pre><code>julia&gt; using Pkg
julia&gt; Pkg.add("DICOM")
</code></pre></div>
<p>Load the package by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using DICOM
"><pre><code>julia&gt; using DICOM
</code></pre></div>
<p><strong>Reading Data</strong></p>
<p>Read a DICOM file by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; dcm_data = dcm_parse(&quot;path/to/dicom/file&quot;)
"><pre><code>julia&gt; dcm_data = dcm_parse("path/to/dicom/file")
</code></pre></div>
<p>The data in <code>dcm_data</code> is structured as a dictionary, and individual DICOM elements can be accessed by their hex tag.
For example, the hex tag of "Pixel Data" is <code>7FE0,0010</code>, and it can be accessed in Julia by <code>dcm_data[(0x7FE0,0x0010)]</code> or by <code>dcm_data[tag"PixelData"]</code>.</p>
<p>Multiple DICOM files in a folder can be read by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; dcm_data_array = dcmdir_parse(&quot;path/to/dicom/folder&quot;)
"><pre><code>julia&gt; dcm_data_array = dcmdir_parse("path/to/dicom/folder")
</code></pre></div>
<p><strong>Writing Data</strong></p>
<p>Data can be written to a DICOM file by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; dcm_write(&quot;path/to/output/file&quot;, dcm_data)
"><pre><code>julia&gt; dcm_write("path/to/output/file", dcm_data)
</code></pre></div>
<p><strong>Additional Notes</strong></p>
<p>DICOM files should begin with a 128-bytes (which are ignored) followed by the string <code>DICM</code>.
If this preamble is missing, then the file can be parsed by <code>dcm_parse(path/to/file, preamble = false)</code>.</p>
<p>DICOM files use either explicit or implicit value representation (VR). For implicit files, <code>DICOM.jl</code> will use a lookup table to guess the VR from the DICOM element's hex tag. For explicit files, <code>DICOM.jl</code> will read the VRs from the file.</p>
<ul>
<li>
<p>An auxiliary user-defined dictionary can be supplied to override the default lookup table
For example, the "Instance Number" - tag <code>(0x0020,0x0013)</code> - is an integer (default VR = "IS"). We can read this as a float by setting the VR to "DS" by:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="my_vrs = Dict( (0x0020,0x0013) =&gt; &quot;DS&quot; )
dcm_data = dcm_parse(&quot;path/to/dicom/file&quot;, aux_vr = my_vrs)
"><pre><code>my_vrs = Dict( (0x0020,0x0013) =&gt; "DS" )
dcm_data = dcm_parse("path/to/dicom/file", aux_vr = my_vrs)
</code></pre></div>
<p>Now <code>dcm_data[(0x0020,0x0013)]</code> will return a float instead of an integer.</p>
<ul>
<li>The parsed VRs are stored in <code>dcm_data.vr</code></li>
</ul>
</li>
<li>
<p>It is possible to skip an element by setting its VR to <code>""</code>.
For example, we can skip reading the Instance Number by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="my_vrs = Dict( (0x0020,0x0013) =&gt; &quot;&quot; )
dcm_data = dcm_parse(&quot;path/to/dicom/file&quot;, aux_vr = my_vr)
"><pre><code>my_vrs = Dict( (0x0020,0x0013) =&gt; "" )
dcm_data = dcm_parse("path/to/dicom/file", aux_vr = my_vr)
</code></pre></div>
<p>and now <code>dcm_data[(0x0020,0x0013)]</code> will return an error because the key <code>(0x0020,0x0013)</code> doesn't exist - it was skipped during reading.</p>
</li>
<li>
<p>The user-supplied VR can contain a master VR with the tag <code>(0x0000,0x0000)</code> which will be used whenever <code>DICOM.jl</code> is unable to guess the VR on its own. This is convenient for reading older dicom files and skipping retired elements - i.e. where the VR lookup fails - by:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="my_vrs = Dict( (0x0000,0x0000) =&gt; &quot;&quot; )
dcm_data = dcm_parse(&quot;path/to/dicom/file&quot;, aux_vr = my_vrs)
"><pre><code>my_vrs = Dict( (0x0000,0x0000) =&gt; "" )
dcm_data = dcm_parse("path/to/dicom/file", aux_vr = my_vrs)
</code></pre></div>
</li>
<li>
<p>A user-supplied VR can also be supplied during writing, e.g.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; dcm_write(&quot;path/to/output/file&quot;, dcm_data, aux_vr = user_defined_vr)
"><pre><code>julia&gt; dcm_write("path/to/output/file", dcm_data, aux_vr = user_defined_vr)
</code></pre></div>
<p>where <code>user_defined_vr</code> is a dictionary which maps the hex tag to the VR.</p>
</li>
</ul>
</article></div>