<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-transmutedimsjl" class="anchor" aria-hidden="true" href="#transmutedimsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TransmuteDims.jl</h1>
<p><a href="https://travis-ci.org/mcabbott/TransmuteDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5664afca810db6d83d7c15abedac78293567fe0/68747470733a2f2f7472617669732d63692e6f72672f6d636162626f74742f5472616e736d75746544696d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcabbott/TransmuteDims.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>In some senses Julia's arrays have trivial dimensions beyond <code>ndims(A)</code>:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">30</span>);
<span class="pl-c1">Tuple</span>(<span class="pl-c1">size</span>(A,d) <span class="pl-k">for</span> d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)  <span class="pl-c"><span class="pl-c">#</span> (10, 20, 30, 1, 1)</span>

B <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>,<span class="pl-c1">40</span>,<span class="pl-c1">50</span>);
<span class="pl-c1">size</span>(A <span class="pl-k">.+</span> B <span class="pl-k">.+</span> <span class="pl-c1">1</span>)           <span class="pl-c"><span class="pl-c">#</span> (10, 20, 30, 40, 50)</span></pre></div>
<p>The function <code>transmutedims</code> extends <code>permutedims</code> to understand these trivial dimensions:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">size</span>(<span class="pl-c1">permutedims</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)))        <span class="pl-c"><span class="pl-c">#</span> (20, 30, 10)</span>

<span class="pl-k">using</span> TransmuteDims
<span class="pl-c1">size</span>(<span class="pl-c1">transmutedims</span>(A, (<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>)))  <span class="pl-c"><span class="pl-c">#</span> (1, 20, 30, 1, 10)</span></pre></div>
<p>Here <code>(4,2,3,5,1)</code> is a valid permutation of <code>1:5</code>, but the positions of <code>4,5</code> don't matter,
so <code>(0,2,3,0,1)</code> is treated identically. Things like <code>(nothing,2,3,nothing,1)</code> are also allowed.
It is also allowed to repeat numbers, which places that dimension diagonally into
several output dimensions:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-c1">transmutedims</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c1">size</span>(<span class="pl-c1">transmutedims</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)))     <span class="pl-c"><span class="pl-c">#</span> (20, 20, 1, 30, 10)</span></pre></div>
<p>The lazy <code>TransmutedDimsArray</code> similarly extends <code>PermutedDimsArray</code>.
The most efficient way to construct these is to call <code>Transmute{perm}(A)</code>,
if <code>perm</code> is known at compile-time:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-c1">@btime</span> <span class="pl-c1">PermutedDimsArray</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>));  <span class="pl-c"><span class="pl-c">#</span> 843.706 ns</span>

<span class="pl-c1">@btime</span> <span class="pl-c1">Transmute</span><span class="pl-c1">{(0,2,3,0,1)}</span>(<span class="pl-k">$</span>A);      <span class="pl-c"><span class="pl-c">#</span>   6.452 ns </span></pre></div>
<p>It is smart enough to unwrap <code>Transpose</code> amd <code>PermutedDimsArray</code> etc,
by altering the permutation to leave just one wrapper:</p>
<div class="highlight highlight-source-julia"><pre>C <span class="pl-k">=</span> <span class="pl-c1">PermutedDimsArray</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>));

<span class="pl-c1">summary</span>(<span class="pl-c1">Transmute</span><span class="pl-c1">{(3,2,0,1)}</span>(C))     <span class="pl-c"><span class="pl-c">#</span> 10×30×1×20 TransmutedDimsArray(::Array{Float64,3}, ...</span></pre></div>
<p>The original motivation for this
in <a href="https://github.com/mcabbott/NamedPlus.jl">NamedPlus.jl</a> was to align arrays for broadcasting
according to their axis names, not positions.
It also allows generalised transposes, not yet exported:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TransmuteDims<span class="pl-k">:</span> _transpose

<span class="pl-c1">size</span>(<span class="pl-c1">_transpose</span>(A))         <span class="pl-c"><span class="pl-c">#</span> (20, 10, 30)</span>
<span class="pl-c1">_transpose</span>(A) <span class="pl-k">==</span> <span class="pl-c1">transmute</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>))

<span class="pl-c1">size</span>(<span class="pl-c1">_transpose</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)))  <span class="pl-c"><span class="pl-c">#</span> (10, 1, 30, 1, 20)</span>
<span class="pl-c1">_transpose</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)) <span class="pl-k">==</span> <span class="pl-c1">transmute</span>(A, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>))</pre></div>
</article></div>