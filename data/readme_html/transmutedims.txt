<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-transmutedimsjl" class="anchor" aria-hidden="true" href="#transmutedimsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TransmuteDims.jl</h1>
<p><a href="https://github.com/mcabbott/TransmuteDims.jl/actions"><img src="https://github.com/mcabbott/TransmuteDims.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://juliahub.com/docs/TransmuteDims/" rel="nofollow"><img src="https://camo.githubusercontent.com/d2230f578458059180f4cf870e061f599bd6488a53f99a075d7fcb704f20d4cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6a756c69616875622d626c75653f6c6162656c436f6c6f723d333333" alt="Docstrings" data-canonical-src="https://img.shields.io/badge/docs-juliahub-blue?labelColor=333" style="max-width:100%;"></a></p>
<p>This package provides generalisations of Julia's <code>permutedims</code> function and <code>PermutedDimsArray</code> wrapper, which allow things other than permutations. These can replace <code>dropdims</code> and many uses of <code>reshape</code>.</p>
<p>The first generalisation is that you may introduce trivial dimensions. This can be thought of as re-positioning the implicit trivial dimensions beyond <code>ndims(A)</code>, such as the 4th and 5th dimensions here:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = ones(10,20,30);
ntuple(d -&gt; size(A,d), 5)          # (10, 20, 30, 1, 1)

permutedims(A, (2,3,1)) |&gt; size    # (20, 30, 10)

using TransmuteDims
transmute(A, (4,2,3,5,1)) |&gt; size  # (1, 20, 30, 1, 10)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">30</span>);
<span class="pl-c1">ntuple</span>(d <span class="pl-k">-&gt;</span> <span class="pl-c1">size</span>(A,d), <span class="pl-c1">5</span>)          <span class="pl-c"><span class="pl-c">#</span> (10, 20, 30, 1, 1)</span>

<span class="pl-c1">permutedims</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">|&gt;</span> size    <span class="pl-c"><span class="pl-c">#</span> (20, 30, 10)</span>

<span class="pl-k">using</span> TransmuteDims
<span class="pl-c1">transmute</span>(A, (<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>)) <span class="pl-k">|&gt;</span> size  <span class="pl-c"><span class="pl-c">#</span> (1, 20, 30, 1, 10)</span></pre></div>
<p>Here <code>(4,2,3,5,1)</code> is a valid permutation of <code>1:5</code>, but the positions of <code>4,5</code> don't matter, so in fact this is normalised to <code>(0,2,3,0,1)</code>. Zeros indicate trivial output dimensions.</p>
<p>Second, input dimensions below <code>ndims(A)</code> may also be omitted, provided they are of size 1:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A2 = sum(A, dims=2); size(A2)      # (10, 1, 30)
transmute(A2, (3,1)) |&gt; size       # (30, 10)

try transmute(A, (3,1)) catch err; err end  # ArgumentError, &quot;... not allowed when size(A, 2) = 20&quot;
"><pre>A2 <span class="pl-k">=</span> <span class="pl-c1">sum</span>(A, dims<span class="pl-k">=</span><span class="pl-c1">2</span>); <span class="pl-c1">size</span>(A2)      <span class="pl-c"><span class="pl-c">#</span> (10, 1, 30)</span>
<span class="pl-c1">transmute</span>(A2, (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">|&gt;</span> size       <span class="pl-c"><span class="pl-c">#</span> (30, 10)</span>

<span class="pl-k">try</span> <span class="pl-en">transmute</span>(A, (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">catch</span> err; err <span class="pl-k">end</span>  <span class="pl-c"><span class="pl-c">#</span> ArgumentError, "... not allowed when size(A, 2) = 20"</span></pre></div>
<p>Third, you may also repeat numbers, to place an input dimension "diagonally" into several output dimensions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LinearAlgebra
transmute(1:10, (1,1)) == Diagonal(1:10)  # true

transmute(A, (2,2,0,3,1)) |&gt; size  # (20, 20, 1, 30, 10)
"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-c1">transmute</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">Diagonal</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)  <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c1">transmute</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">|&gt;</span> size  <span class="pl-c"><span class="pl-c">#</span> (20, 20, 1, 30, 10)</span></pre></div>
<p>The function <code>transmute</code> is always lazy, but also tries to minimise the number of wrappers. Ideally to none at all, by un-wrapping and reshaping:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transmute(A, (4,2,3,5,1)) isa TransmutedDimsArray{Float64, 5, (0,2,3,0,1), (5,2,3), &lt;:Array}

transmute(A, (1,0,2,3)) isa Array{Float64, 4}

transmute(PermutedDimsArray(A, (2,3,1)),(3,1,0,2)) isa Array{Float64, 4}

transmute(Diagonal(1:10), (3,1)) isa TransmutedDimsArray{Int64, 2, (0,1), (2,), &lt;:UnitRange}
transmute(Diagonal(rand(10)), (3,1)) isa Matrix
"><pre><span class="pl-c1">transmute</span>(A, (<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> TransmutedDimsArray{Float64, <span class="pl-c1">5</span>, (<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), <span class="pl-k">&lt;:</span><span class="pl-c1">Array</span>}

<span class="pl-c1">transmute</span>(A, (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)) <span class="pl-k">isa</span> Array{Float64, <span class="pl-c1">4</span>}

<span class="pl-c1">transmute</span>(<span class="pl-c1">PermutedDimsArray</span>(A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)),(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>)) <span class="pl-k">isa</span> Array{Float64, <span class="pl-c1">4</span>}

<span class="pl-c1">transmute</span>(<span class="pl-c1">Diagonal</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>), (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> TransmutedDimsArray{Int64, <span class="pl-c1">2</span>, (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">2</span>,), <span class="pl-k">&lt;:</span><span class="pl-c1">UnitRange</span>}
<span class="pl-c1">transmute</span>(<span class="pl-c1">Diagonal</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)), (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> Matrix</pre></div>
<p>Calling the constructor directly <code>TransmutedDimsArray(A, (3,2,0,1))</code> simply applies the wrapper.
There is also a method <code>transmute(A, Val((3,2,0,1)))</code> which works out any un-wrapping at compile-time:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BenchmarkTools
@btime transmute($A, (2,3,1));           #   6.996 ns (1 allocation: 16 bytes)
@btime PermutedDimsArray($A, (2,3,1));   # 386.738 ns (4 allocations: 176 bytes)
@btime transmute($A, Val((2,3,1)));      #   1.430 ns (0 allocations: 0 bytes)

@btime transmute($A, (1,2,0,3));         #  45.642 ns (2 allocations: 128 bytes)
@btime reshape($A, (10,20,1,30));        #  34.479 ns (1 allocation: 80 bytes)
"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-c1">@btime</span> <span class="pl-c1">transmute</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>));           <span class="pl-c"><span class="pl-c">#</span>   6.996 ns (1 allocation: 16 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">PermutedDimsArray</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>));   <span class="pl-c"><span class="pl-c">#</span> 386.738 ns (4 allocations: 176 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">transmute</span>(<span class="pl-k">$</span>A, <span class="pl-c1">Val</span>((<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)));      <span class="pl-c"><span class="pl-c">#</span>   1.430 ns (0 allocations: 0 bytes)</span>

<span class="pl-c1">@btime</span> <span class="pl-c1">transmute</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>));         <span class="pl-c"><span class="pl-c">#</span>  45.642 ns (2 allocations: 128 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">reshape</span>(<span class="pl-k">$</span>A, (<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>,<span class="pl-c1">30</span>));        <span class="pl-c"><span class="pl-c">#</span>  34.479 ns (1 allocation: 80 bytes)</span></pre></div>
<p>Finally, there is also an eager variant, which tries always to return a <code>DenseArray</code>.
This will similarly un-wrap <code>Transpose</code> etc, and prefers to reshape if possible, copying data only when necessary.
It uses <a href="https://github.com/Jutho/Strided.jl">Strided.jl</a> to speed this up, when possible, so should be faster than Base's <code>permutedims</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transmutedims(A, (3,2,0,1)) isa Array{Float64, 4}
transmutedims(1:3, (2,1)) isa Matrix

@btime transmutedims($(rand(40,50,60)), (3,2,1));  #  57.365 μs (61 allocations: 944.62 KiB)
@btime permutedims($(rand(40,50,60)), (3,2,1));    # 172.643 μs (2 allocations: 937.58 KiB)

@strided(transmute(A, (3,2,0,1))) isa StridedView{Float64, 4}
@strided(transmutedims(A, (3,2,0,1))) isa StridedView{Float64, 4}
"><pre><span class="pl-c1">transmutedims</span>(A, (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> Array{Float64, <span class="pl-c1">4</span>}
<span class="pl-c1">transmutedims</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> Matrix

<span class="pl-c1">@btime</span> <span class="pl-c1">transmutedims</span>(<span class="pl-k">$</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">40</span>,<span class="pl-c1">50</span>,<span class="pl-c1">60</span>)), (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));  <span class="pl-c"><span class="pl-c">#</span>  57.365 μs (61 allocations: 944.62 KiB)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">permutedims</span>(<span class="pl-k">$</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">40</span>,<span class="pl-c1">50</span>,<span class="pl-c1">60</span>)), (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>));    <span class="pl-c"><span class="pl-c">#</span> 172.643 μs (2 allocations: 937.58 KiB)</span>

<span class="pl-c1">@strided</span>(<span class="pl-c1">transmute</span>(A, (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))) <span class="pl-k">isa</span> StridedView{Float64, <span class="pl-c1">4</span>}
<span class="pl-c1">@strided</span>(<span class="pl-c1">transmutedims</span>(A, (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))) <span class="pl-k">isa</span> StridedView{Float64, <span class="pl-c1">4</span>}</pre></div>
<p>The <code>StridedView</code> type is general enough to allow the insertion/removal of trivial dimensions, in addition to permutations, so these functions preserve it.</p>
<p>The lower-case functions also treat tuples as if they were vectors:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transmute((1,2,3), (1,)) isa AbstractVector
transmutedims((1,2,3), (nothing,1)) isa Matrix
"><pre><span class="pl-c1">transmute</span>((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">1</span>,)) <span class="pl-k">isa</span> AbstractVector
<span class="pl-c1">transmutedims</span>((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">nothing</span>,<span class="pl-c1">1</span>)) <span class="pl-k">isa</span> Matrix</pre></div>
</article></div>