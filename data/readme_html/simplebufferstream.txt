<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bufferstream-implementation" class="anchor" aria-hidden="true" href="#bufferstream-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BufferStream implementation</h1>
<p>This is what I wish <code>Base.BufferStream</code> was.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>See the tests for examples, but in a nut shell:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Stream an HTTP response into an asynchronous processor
buff = BufferStream()
t_processor = @async process(buff)
HTTP.get(url, response_stream=buff)
wait(t_processor)
"><pre><span class="pl-c"><span class="pl-c">#</span> Stream an HTTP response into an asynchronous processor</span>
buff <span class="pl-k">=</span> <span class="pl-c1">BufferStream</span>()
t_processor <span class="pl-k">=</span> <span class="pl-c1">@async</span> <span class="pl-c1">process</span>(buff)
HTTP<span class="pl-k">.</span><span class="pl-c1">get</span>(url, response_stream<span class="pl-k">=</span>buff)
<span class="pl-c1">wait</span>(t_processor)</pre></div>
<p>You can <code>readavailable()</code>, <code>write()</code>, <code>close()</code>, <code>eof()</code>, etc...  The implementation is really simple, so I suggest you just look at it.</p>
</article></div>