<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-portaudiojl" class="anchor" aria-hidden="true" href="#portaudiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PortAudio.jl</h1>
<p><a href="https://travis-ci.org/JuliaAudio/PortAudio.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be76f15c852fa4cc5597317baac67d059d5759dd/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417564696f2f506f7274417564696f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaAudio/PortAudio.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ssfrr/portaudio-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/58bb8063c4781b433327df7b5669524cf642b9d4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3678316861377576726e656c303630672f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/6x1ha7uvrnel060g/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>PortAudio.jl is a wrapper for <a href="http://www.portaudio.com/" rel="nofollow">libportaudio</a>, which gives cross-platform access to audio devices. It is compatible with the types defined in <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a>. It provides a <code>PortAudioStream</code> type, which can be read from and written to.</p>
<h2><a id="user-content-opening-a-stream" class="anchor" aria-hidden="true" href="#opening-a-stream"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Opening a stream</h2>
<p>The easiest way to open a source or sink is with the default <code>PortAudioStream()</code> constructor, which will open a 2-in, 2-out stream to your system's default device(s). The constructor can also take the input and output channel counts as positional arguments, or a variety of other keyword arguments.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PortAudioStream</span>(inchans<span class="pl-k">=</span><span class="pl-c1">2</span>, outchans<span class="pl-k">=</span><span class="pl-c1">2</span>; eltype<span class="pl-k">=</span>Float32, samplerate<span class="pl-k">=</span><span class="pl-c1">48000</span>Hz, blocksize<span class="pl-k">=</span><span class="pl-c1">4096</span>, synced<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>You can open a specific device by adding it as the first argument, either as a <code>PortAudioDevice</code> instance or by name. You can also give separate names or devices if you want different input and output devices</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PortAudioStream</span>(device<span class="pl-k">::</span><span class="pl-c1">PortAudioDevice</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
<span class="pl-c1">PortAudioStream</span>(devname<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p>You can get a list of your system's devices with the <code>PortAudio.devices()</code> function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> PortAudio<span class="pl-k">.</span><span class="pl-c1">devices</span>()
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{PortAudio<span class="pl-k">.</span>PortAudioDevice,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>AirPlay<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>)
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>Built-in Microph<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>Built-in Output<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>JackRouter<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>After Effects 13.5<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>)
 PortAudio<span class="pl-k">.</span><span class="pl-c1">PortAudioDevice</span>(<span class="pl-s"><span class="pl-pds">"</span>Built-In Aggregate<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Core Audio<span class="pl-pds">"</span></span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)</pre></div>
<h3><a id="user-content-inputoutput-synchronization" class="anchor" aria-hidden="true" href="#inputoutput-synchronization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input/Output Synchronization</h3>
<p>The <code>synced</code> keyword argument to <code>PortAudioStream</code> controls whether the input and output ringbuffers are kept synchronized or not, which only effects duplex streams. It should be set to <code>true</code> if you need consistent input-to-output latency. In a synchronized stream, the underlying PortAudio callback will only read and write to the buffers an equal number of frames. In a synchronized stream, the user must also read and write an equal number of frames to the stream. If it is only written to or read from, it will eventually block. This is why it is <code>false</code> by default.</p>
<h2><a id="user-content-reading-and-writing" class="anchor" aria-hidden="true" href="#reading-and-writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading and Writing</h2>
<p>The <code>PortAudioStream</code> type has <code>source</code> and <code>sink</code> fields which are of type <code>PortAudioSource &lt;: SampleSource</code> and <code>PortAudioSink &lt;: SampleSink</code>, respectively. are subtypes of <code>SampleSource</code> and <code>SampleSink</code>, respectively (from <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a>). This means they support all the stream and buffer features defined there. For example, if you load SampledSignals with <code>using SampledSignals</code> you can read 5 seconds to a buffer with <code>buf = read(stream.source, 5s)</code>, regardless of the sample rate of the device.</p>
<p>PortAudio.jl also provides convenience wrappers around the <code>PortAudioStream</code> type so you can read and write to it directly, e.g. <code>write(stream, stream)</code> will set up a loopback that will read from the input and play it back on the output.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-set-up-an-audio-pass-through-from-microphone-to-speaker" class="anchor" aria-hidden="true" href="#set-up-an-audio-pass-through-from-microphone-to-speaker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Set up an audio pass-through from microphone to speaker</h3>
<div class="highlight highlight-source-julia"><pre>stream <span class="pl-k">=</span> <span class="pl-c1">PortAudioStream</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">write</span>(stream, stream)</pre></div>
<h3><a id="user-content-open-your-built-in-microphone-and-speaker-by-name" class="anchor" aria-hidden="true" href="#open-your-built-in-microphone-and-speaker-by-name"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Open your built-in microphone and speaker by name</h3>
<div class="highlight highlight-source-julia"><pre>stream <span class="pl-k">=</span> <span class="pl-c1">PortAudioStream</span>(<span class="pl-s"><span class="pl-pds">"</span>Built-in Microph<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Built-in Output<span class="pl-pds">"</span></span>)
<span class="pl-c1">write</span>(stream, stream)</pre></div>
<h3><a id="user-content-record-10-seconds-of-audio-and-save-to-an-ogg-file" class="anchor" aria-hidden="true" href="#record-10-seconds-of-audio-and-save-to-an-ogg-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Record 10 seconds of audio and save to an ogg file</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PortAudio, SampledSignals, LibSndFile

julia<span class="pl-k">&gt;</span> stream <span class="pl-k">=</span> <span class="pl-c1">PortAudioStream</span>(<span class="pl-s"><span class="pl-pds">"</span>Built-in Microph<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>)
PortAudio<span class="pl-k">.</span>PortAudioStream{Float32,SIUnits<span class="pl-k">.</span>SIQuantity{Int64,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>}}
  Samplerate<span class="pl-k">:</span> <span class="pl-c1">48000</span> s⁻¹
  Buffer Size<span class="pl-k">:</span> <span class="pl-c1">4096</span> frames
  <span class="pl-c1">2</span> channel source<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Built-in Microph<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> buf <span class="pl-k">=</span> <span class="pl-c1">read</span>(stream, <span class="pl-c1">10</span>s)
<span class="pl-c1">480000</span><span class="pl-k">-</span>frame, <span class="pl-c1">2</span><span class="pl-k">-</span>channel SampleBuf{Float32, <span class="pl-c1">2</span>, SIUnits<span class="pl-k">.</span>SIQuantity{Int64,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>}}
<span class="pl-c1">10.0</span> s at <span class="pl-c1">48000</span> s⁻¹
▁▄▂▃▅▃▂▄▃▂▂▁▁▂▂▁▁▄▃▁▁▄▂▁▁▁▄▃▁▁▃▃▁▁▁▁▁▁▁▁▄▄▄▄▄▂▂▂▁▃▃▁▃▄▂▁▁▁▁▃▃▂▁▁▁▁▁▁▃▃▂▂▁▃▃▃▁▁▁▁
▁▄▂▃▅▃▂▄▃▂▂▁▁▂▂▁▁▄▃▁▁▄▂▁▁▁▄▃▁▁▃▃▁▁▁▁▁▁▁▁▄▄▄▄▄▂▂▂▁▃▃▁▃▄▂▁▁▁▁▃▃▂▁▁▁▁▁▁▃▃▂▂▁▃▃▃▁▁▁▁

julia<span class="pl-k">&gt;</span> <span class="pl-c1">save</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">homedir</span>(), <span class="pl-s"><span class="pl-pds">"</span>Desktop<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>myvoice.ogg<span class="pl-pds">"</span></span>), buf)</pre></div>
<h2><a id="user-content-building-the-shim-library" class="anchor" aria-hidden="true" href="#building-the-shim-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Building the shim library</h2>
<p>Because PortAudio calls its callback from a separate audio thread, we can't handle it in Julia directly. To work around this we've included a small shim library written in C that uses ring buffers to pass audio data between the callback context and the main Julia context. To build the shim you'll need a few prerequisites:</p>
<ul>
<li>libportaudio</li>
<li>make</li>
<li>a C compiler (gcc on linux/macOS, mingw64 on Windows)</li>
<li>The <code>RingBuffers</code> julia package, installed in a folder next to this one. The portaudio shim links against the <code>pa_ringbuffer</code> library that comes with <code>RingBuffers</code>.</li>
</ul>
<p>To build the shim, go into the <code>deps/src</code> directory and type <code>make</code>.</p>
</article></div>