<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-decisiontreejl" class="anchor" aria-hidden="true" href="#decisiontreejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DecisionTree.jl</h1>
<p><a href="https://travis-ci.org/bensadeghi/DecisionTree.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fce111914cc78fbe4214c491a7ddb402377a5d6c/68747470733a2f2f7472617669732d63692e6f72672f62656e736164656768692f4465636973696f6e547265652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bensadeghi/DecisionTree.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/bensadeghi/DecisionTree.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fb84ee282b1645ea12c983f97a9abe99e1581925/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f62656e736164656768692f4465636973696f6e547265652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/bensadeghi/DecisionTree.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://pkg.julialang.org/docs/DecisionTree/pEDeB/0.8.1/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p>Julia implementation of Decision Tree (CART) and Random Forest algorithms</p>
<p>Available via:</p>
<ul>
<li><a href="https://github.com/ppalmes/CombineML.jl">CombineML.jl</a> - a heterogeneous ensemble learning package</li>
<li><a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ.jl</a> - a pure Julia machine learning framework</li>
<li><a href="https://github.com/cstjean/ScikitLearn.jl">ScikitLearn.jl</a> - Julia implementation of the scikit-learn API</li>
</ul>
<h2><a id="user-content-classification" class="anchor" aria-hidden="true" href="#classification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Classification</h2>
<ul>
<li>pre-pruning (max depth, min leaf size)</li>
<li>post-pruning (pessimistic pruning)</li>
<li>multi-threaded bagging (random forests)</li>
<li>adaptive boosting (decision stumps)</li>
<li>cross validation (n-fold)</li>
<li>support for ordered features (encoded as <code>Real</code>s or <code>String</code>s)</li>
</ul>
<h2><a id="user-content-regression" class="anchor" aria-hidden="true" href="#regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Regression</h2>
<ul>
<li>pre-pruning (max depth, min leaf size)</li>
<li>multi-threaded bagging (random forests)</li>
<li>cross validation (n-fold)</li>
<li>support for numerical features</li>
</ul>
<p><strong>Note that regression is implied if labels/targets are of type Array{Float}</strong></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You can install DecisionTree.jl using Julia's package manager</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DecisionTree<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-scikitlearnjl-api" class="anchor" aria-hidden="true" href="#scikitlearnjl-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ScikitLearn.jl API</h2>
<p>DecisionTree.jl supports the <a href="https://github.com/cstjean/ScikitLearn.jl">ScikitLearn.jl</a> interface and algorithms (cross-validation, hyperparameter tuning, pipelines, etc.)</p>
<p>Available models: <code>DecisionTreeClassifier, DecisionTreeRegressor, RandomForestClassifier, RandomForestRegressor, AdaBoostStumpClassifier</code>.
See each model's help (eg. <code>?DecisionTreeRegressor</code> at the REPL) for more information</p>
<h3><a id="user-content-classification-example" class="anchor" aria-hidden="true" href="#classification-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Classification Example</h3>
<p>Load DecisionTree package</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DecisionTree</pre></div>
<p>Separate Fisher's Iris dataset features and labels</p>
<div class="highlight highlight-source-julia"><pre>features, labels <span class="pl-k">=</span> <span class="pl-c1">load_data</span>(<span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> also see "adult" and "digits" datasets</span>

<span class="pl-c"><span class="pl-c">#</span> the data loaded are of type Array{Any}</span>
<span class="pl-c"><span class="pl-c">#</span> cast them to concrete types for better performance</span>
features <span class="pl-k">=</span> <span class="pl-c1">float</span>.(features)
labels   <span class="pl-k">=</span> <span class="pl-c1">string</span>.(labels)</pre></div>
<p>Pruned Tree Classifier</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train depth-truncated classifier</span>
model <span class="pl-k">=</span> <span class="pl-c1">DecisionTreeClassifier</span>(max_depth<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">fit!</span>(model, features, labels)
<span class="pl-c"><span class="pl-c">#</span> pretty print of the tree, to a depth of 5 nodes (optional)</span>
<span class="pl-c1">print_tree</span>(model, <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">predict</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>])
<span class="pl-c"><span class="pl-c">#</span> get the probability of each label</span>
<span class="pl-c1">predict_proba</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>])
<span class="pl-c1">println</span>(<span class="pl-c1">get_classes</span>(model)) <span class="pl-c"><span class="pl-c">#</span> returns the ordering of the columns in predict_proba's output</span>
<span class="pl-c"><span class="pl-c">#</span> run n-fold cross validation over 3 CV folds</span>
<span class="pl-c"><span class="pl-c">#</span> See ScikitLearn.jl for installation instructions</span>
<span class="pl-k">using</span> ScikitLearn<span class="pl-k">.</span>CrossValidation<span class="pl-k">:</span> cross_val_score
accuracy <span class="pl-k">=</span> <span class="pl-c1">cross_val_score</span>(model, features, labels, cv<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p>Also, have a look at these <a href="https://github.com/cstjean/ScikitLearn.jl/blob/master/examples/Classifier_Comparison_Julia.ipynb">classification</a> and <a href="https://github.com/cstjean/ScikitLearn.jl/blob/master/examples/Decision_Tree_Regression_Julia.ipynb">regression</a> notebooks.</p>
<h2><a id="user-content-native-api" class="anchor" aria-hidden="true" href="#native-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Native API</h2>
<h3><a id="user-content-classification-example-1" class="anchor" aria-hidden="true" href="#classification-example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Classification Example</h3>
<p>Decision Tree Classifier</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train full-tree classifier</span>
model <span class="pl-k">=</span> <span class="pl-c1">build_tree</span>(labels, features)
<span class="pl-c"><span class="pl-c">#</span> prune tree: merge leaves having &gt;= 90% combined purity (default: 100%)</span>
model <span class="pl-k">=</span> <span class="pl-c1">prune_tree</span>(model, <span class="pl-c1">0.9</span>)
<span class="pl-c"><span class="pl-c">#</span> pretty print of the tree, to a depth of 5 nodes (optional)</span>
<span class="pl-c1">print_tree</span>(model, <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">apply_tree</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>])
<span class="pl-c"><span class="pl-c">#</span> get the probability of each label</span>
<span class="pl-c1">apply_tree_proba</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>], [<span class="pl-s"><span class="pl-pds">"</span>Iris-setosa<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-versicolor<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-virginica<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> run 3-fold cross validation of pruned tree,</span>
n_folds<span class="pl-k">=</span><span class="pl-c1">3</span>
accuracy <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_tree</span>(labels, features, n_folds)

<span class="pl-c"><span class="pl-c">#</span> set of classification parameters and respective default values</span>
<span class="pl-c"><span class="pl-c">#</span> pruning_purity: purity threshold used for post-pruning (default: 1.0, no pruning)</span>
<span class="pl-c"><span class="pl-c">#</span> max_depth: maximum depth of the decision tree (default: -1, no maximum)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_leaf: the minimum number of samples each leaf needs to have (default: 1)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_split: the minimum number of samples in needed for a split (default: 2)</span>
<span class="pl-c"><span class="pl-c">#</span> min_purity_increase: minimum purity needed for a split (default: 0.0)</span>
<span class="pl-c"><span class="pl-c">#</span> n_subfeatures: number of features to select at random (default: 0, keep all)</span>
n_subfeatures<span class="pl-k">=</span><span class="pl-c1">0</span>; max_depth<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>; min_samples_leaf<span class="pl-k">=</span><span class="pl-c1">1</span>; min_samples_split<span class="pl-k">=</span><span class="pl-c1">2</span>
min_purity_increase<span class="pl-k">=</span><span class="pl-c1">0.0</span>; pruning_purity <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

model    <span class="pl-k">=</span>   <span class="pl-c1">build_tree</span>(labels, features,
                        n_subfeatures,
                        max_depth,
                        min_samples_leaf,
                        min_samples_split,
                        min_purity_increase)

accuracy <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_tree</span>(labels, features,
                        n_folds,
                        pruning_purity,
                        max_depth,
                        min_samples_leaf,
                        min_samples_split,
                        min_purity_increase)</pre></div>
<p>Random Forest Classifier</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train random forest classifier</span>
<span class="pl-c"><span class="pl-c">#</span> using 2 random features, 10 trees, 0.5 portion of samples per tree, and a maximum tree depth of 6</span>
model <span class="pl-k">=</span> <span class="pl-c1">build_forest</span>(labels, features, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">6</span>)
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">apply_forest</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>])
<span class="pl-c"><span class="pl-c">#</span> get the probability of each label</span>
<span class="pl-c1">apply_forest_proba</span>(model, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>], [<span class="pl-s"><span class="pl-pds">"</span>Iris-setosa<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-versicolor<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-virginica<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> run 3-fold cross validation for forests, using 2 random features per split</span>
n_folds<span class="pl-k">=</span><span class="pl-c1">3</span>; n_subfeatures<span class="pl-k">=</span><span class="pl-c1">2</span>
accuracy <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_forest</span>(labels, features, n_folds, n_subfeatures)

<span class="pl-c"><span class="pl-c">#</span> set of classification parameters and respective default values</span>
<span class="pl-c"><span class="pl-c">#</span> n_subfeatures: number of features to consider at random per split (default: -1, sqrt(# features))</span>
<span class="pl-c"><span class="pl-c">#</span> n_trees: number of trees to train (default: 10)</span>
<span class="pl-c"><span class="pl-c">#</span> partial_sampling: fraction of samples to train each tree on (default: 0.7)</span>
<span class="pl-c"><span class="pl-c">#</span> max_depth: maximum depth of the decision trees (default: no maximum)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_leaf: the minimum number of samples each leaf needs to have (default: 5)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_split: the minimum number of samples in needed for a split (default: 2)</span>
<span class="pl-c"><span class="pl-c">#</span> min_purity_increase: minimum purity needed for a split (default: 0.0)</span>
n_subfeatures<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>; n_trees<span class="pl-k">=</span><span class="pl-c1">10</span>; partial_sampling<span class="pl-k">=</span><span class="pl-c1">0.7</span>; max_depth<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>
min_samples_leaf<span class="pl-k">=</span><span class="pl-c1">5</span>; min_samples_split<span class="pl-k">=</span><span class="pl-c1">2</span>; min_purity_increase<span class="pl-k">=</span><span class="pl-c1">0.0</span>

model    <span class="pl-k">=</span>   <span class="pl-c1">build_forest</span>(labels, features,
                          n_subfeatures,
                          n_trees,
                          partial_sampling,
                          max_depth,
                          min_samples_leaf,
                          min_samples_split,
                          min_purity_increase)

accuracy <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_forest</span>(labels, features,
                          n_folds,
                          n_subfeatures,
                          n_trees,
                          partial_sampling,
                          max_depth,
                          min_samples_leaf,
                          min_samples_split,
                          min_purity_increase)</pre></div>
<p>Adaptive-Boosted Decision Stumps Classifier</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train adaptive-boosted stumps, using 7 iterations</span>
model, coeffs <span class="pl-k">=</span> <span class="pl-c1">build_adaboost_stumps</span>(labels, features, <span class="pl-c1">7</span>);
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">apply_adaboost_stumps</span>(model, coeffs, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>])
<span class="pl-c"><span class="pl-c">#</span> get the probability of each label</span>
<span class="pl-c1">apply_adaboost_stumps_proba</span>(model, coeffs, [<span class="pl-c1">5.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>], [<span class="pl-s"><span class="pl-pds">"</span>Iris-setosa<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-versicolor<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Iris-virginica<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> run 3-fold cross validation for boosted stumps, using 7 iterations</span>
n_iterations<span class="pl-k">=</span><span class="pl-c1">7</span>; n_folds<span class="pl-k">=</span><span class="pl-c1">3</span>
accuracy <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_stumps</span>(labels, features,
                          n_folds,
                          n_iterations)</pre></div>
<h3><a id="user-content-regression-example" class="anchor" aria-hidden="true" href="#regression-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Regression Example</h3>
<div class="highlight highlight-source-julia"><pre>n, m <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>, <span class="pl-c1">5</span>
features <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n, m)
weights <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, m)
labels <span class="pl-k">=</span> features <span class="pl-k">*</span> weights</pre></div>
<p>Regression Tree</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train regression tree</span>
model <span class="pl-k">=</span> <span class="pl-c1">build_tree</span>(labels, features)
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">apply_tree</span>(model, [<span class="pl-k">-</span><span class="pl-c1">0.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>,<span class="pl-c1">0.0</span>])
<span class="pl-c"><span class="pl-c">#</span> run 3-fold cross validation, returns array of coefficients of determination (R^2)</span>
n_folds <span class="pl-k">=</span> <span class="pl-c1">3</span>
r2 <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_tree</span>(labels, features, n_folds)

<span class="pl-c"><span class="pl-c">#</span> set of regression parameters and respective default values</span>
<span class="pl-c"><span class="pl-c">#</span> pruning_purity: purity threshold used for post-pruning (default: 1.0, no pruning)</span>
<span class="pl-c"><span class="pl-c">#</span> max_depth: maximum depth of the decision tree (default: -1, no maximum)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_leaf: the minimum number of samples each leaf needs to have (default: 5)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_split: the minimum number of samples in needed for a split (default: 2)</span>
<span class="pl-c"><span class="pl-c">#</span> min_purity_increase: minimum purity needed for a split (default: 0.0)</span>
<span class="pl-c"><span class="pl-c">#</span> n_subfeatures: number of features to select at random (default: 0, keep all)</span>
n_subfeatures <span class="pl-k">=</span> <span class="pl-c1">0</span>; max_depth <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; min_samples_leaf <span class="pl-k">=</span> <span class="pl-c1">5</span>
min_samples_split <span class="pl-k">=</span> <span class="pl-c1">2</span>; min_purity_increase <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; pruning_purity <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

model <span class="pl-k">=</span> <span class="pl-c1">build_tree</span>(labels, features,
                   n_subfeatures,
                   max_depth,
                   min_samples_leaf,
                   min_samples_split,
                   min_purity_increase)

r2 <span class="pl-k">=</span>  <span class="pl-c1">nfoldCV_tree</span>(labels, features,
                   n_folds,
                   pruning_purity,
                   max_depth,
                   min_samples_leaf,
                   min_samples_split,
                   min_purity_increase)</pre></div>
<p>Regression Random Forest</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> train regression forest, using 2 random features, 10 trees,</span>
<span class="pl-c"><span class="pl-c">#</span> averaging of 5 samples per leaf, and 0.7 portion of samples per tree</span>
model <span class="pl-k">=</span> <span class="pl-c1">build_forest</span>(labels, features, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> apply learned model</span>
<span class="pl-c1">apply_forest</span>(model, [<span class="pl-k">-</span><span class="pl-c1">0.9</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.1</span>,<span class="pl-c1">1.9</span>,<span class="pl-c1">0.0</span>])
<span class="pl-c"><span class="pl-c">#</span> run 3-fold cross validation on regression forest, using 2 random features per split</span>
n_subfeatures<span class="pl-k">=</span><span class="pl-c1">2</span>; n_folds<span class="pl-k">=</span><span class="pl-c1">3</span>
r2 <span class="pl-k">=</span> <span class="pl-c1">nfoldCV_forest</span>(labels, features, n_folds, n_subfeatures)

<span class="pl-c"><span class="pl-c">#</span> set of regression build_forest() parameters and respective default values</span>
<span class="pl-c"><span class="pl-c">#</span> n_subfeatures: number of features to consider at random per split (default: -1, sqrt(# features))</span>
<span class="pl-c"><span class="pl-c">#</span> n_trees: number of trees to train (default: 10)</span>
<span class="pl-c"><span class="pl-c">#</span> partial_sampling: fraction of samples to train each tree on (default: 0.7)</span>
<span class="pl-c"><span class="pl-c">#</span> max_depth: maximum depth of the decision trees (default: no maximum)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_leaf: the minimum number of samples each leaf needs to have (default: 5)</span>
<span class="pl-c"><span class="pl-c">#</span> min_samples_split: the minimum number of samples in needed for a split (default: 2)</span>
<span class="pl-c"><span class="pl-c">#</span> min_purity_increase: minimum purity needed for a split (default: 0.0)</span>
n_subfeatures<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>; n_trees<span class="pl-k">=</span><span class="pl-c1">10</span>; partial_sampling<span class="pl-k">=</span><span class="pl-c1">0.7</span>; max_depth<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>
min_samples_leaf<span class="pl-k">=</span><span class="pl-c1">5</span>; min_samples_split<span class="pl-k">=</span><span class="pl-c1">2</span>; min_purity_increase<span class="pl-k">=</span><span class="pl-c1">0.0</span>

model <span class="pl-k">=</span> <span class="pl-c1">build_forest</span>(labels, features,
                     n_subfeatures,
                     n_trees,
                     partial_sampling,
                     max_depth,
                     min_samples_leaf,
                     min_samples_split,
                     min_purity_increase)

r2 <span class="pl-k">=</span>  <span class="pl-c1">nfoldCV_forest</span>(labels, features,
                     n_folds,
                     n_subfeatures,
                     n_trees,
                     partial_sampling,
                     max_depth,
                     min_samples_leaf,
                     min_samples_split,
                     min_purity_increase)</pre></div>
<h2><a id="user-content-saving-models" class="anchor" aria-hidden="true" href="#saving-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saving Models</h2>
<p>Models can be saved to disk and loaded back with the use of the <a href="https://github.com/JuliaIO/JLD2.jl">JLD2.jl</a> package.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JLD2
<span class="pl-c1">@save</span> <span class="pl-s"><span class="pl-pds">"</span>model_file.jld2<span class="pl-pds">"</span></span> model</pre></div>
<p>Note that even though features and labels of type <code>Array{Any}</code> are supported, it is highly recommended that data be cast to explicit types (ie with <code>float.(), string.()</code>, etc). This significantly improves model training and prediction execution times, and also drastically reduces the size of saved models.</p>
</article></div>