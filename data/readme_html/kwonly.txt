<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kwonlyjl-----macro-to-generate-keyword-only-version-of-a-function" class="anchor" aria-hidden="true" href="#kwonlyjl-----macro-to-generate-keyword-only-version-of-a-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kwonly.jl --- Macro to generate keyword-only version of a function</h1>
<p dir="auto"><a href="https://travis-ci.org/tkf/Kwonly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a9d8eba2f501f877ef43c7f8e470f2deb5f5affb061b3e9e06fcd2df64a7a4b0/68747470733a2f2f7472617669732d63692e6f72672f746b662f4b776f6e6c792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tkf/Kwonly.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/tkf/Kwonly.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37d6ce240cea3c8b5eb38351b3f0fca202ce1b0c4ffe19e4f03983258a58e613/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f746b662f4b776f6e6c792e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/tkf/Kwonly.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/tkf/Kwonly.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9173acba55f15564c2cf516e296f6dd73d750e70fef2b8773c2cb99bf1335641/687474703a2f2f636f6465636f762e696f2f6769746875622f746b662f4b776f6e6c792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkf/Kwonly.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">Kwonly.jl provides a macro <code>@add_kwonly</code>.  It creates a keyword-only
version of the given function.  Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Kwonly

struct A
    x
    y
    @add_kwonly A(x, y=2) = new(x, y)
end"><pre><span class="pl-k">using</span> Kwonly

<span class="pl-k">struct</span> A
    x
    y
    <span class="pl-c1">@add_kwonly</span> <span class="pl-en">A</span>(x, y<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x, y)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This macro add a keyword-only constructor by expanding <code>A(x, y=2) = new(x, y)</code> into:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A(x, y) = new(x, y)                                      # original
A(; x = throw(UndefKeywordError(:x)), y=2) = new(x, y)   # keyword-only"><pre><span class="pl-en">A</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x, y)                                      <span class="pl-c"><span class="pl-c">#</span> original</span>
<span class="pl-en">A</span>(; x <span class="pl-k">=</span> <span class="pl-en">throw</span>(<span class="pl-en">UndefKeywordError</span>(<span class="pl-c1">:x</span>)), y<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x, y)   <span class="pl-c"><span class="pl-c">#</span> keyword-only</span></pre></div>
<p dir="auto">So, the struct <code>A</code> can also be constructed by using only keyword
arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@test A(1) == A(x=1)"><pre><span class="pl-c1">@test</span> <span class="pl-c1">A</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">A</span>(x<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
</article></div>