<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-moduleloggingjl" class="anchor" aria-hidden="true" href="#moduleloggingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModuleLogging.jl</h1>
<p dir="auto"><a href="https://github.com/tk3369/ModuleLogging.jl/actions?query=workflow%3ACI"><img src="https://github.com/tk3369/ModuleLogging.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This package allows selective logging by module.</p>
<p dir="auto">One use case is to turn on debug logging only for your own modules
but not any other third-party modules.</p>
<p dir="auto">For convenience, two constructor functions are provided.
The first one creates an underlying <code>SimpleLogger</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ModuleLogger(stream::IO, level::Logging.LogLevel, modules::Module...)
ModuleLogger(logger::AbstractLogger, modules::Module...)"><pre><span class="pl-c1">ModuleLogger</span>(stream<span class="pl-k">::</span><span class="pl-c1">IO</span>, level<span class="pl-k">::</span><span class="pl-c1">Logging.LogLevel</span>, modules<span class="pl-k">::</span><span class="pl-c1">Module...</span>)
<span class="pl-c1">ModuleLogger</span>(logger<span class="pl-k">::</span><span class="pl-c1">AbstractLogger</span>, modules<span class="pl-k">::</span><span class="pl-c1">Module...</span>)</pre></div>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module Foo
    function foo()
        @debug &quot;foo called&quot;
        return 1
    end
end

module Bar
    function bar()
        @debug &quot;bar called&quot;
        return 2
    end
end

using Logging, ModuleLogging
using .Foo
using .Bar

# Turn on debug logging for Foo module only
logger = ModuleLogger(stderr, Logging.Debug, Foo)
global_logger(logger)

Foo.foo()    # debug log is displayed
Bar.bar()    # no debug log"><pre><span class="pl-k">module</span> Foo
    <span class="pl-k">function</span> <span class="pl-en">foo</span>()
        <span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>foo called<span class="pl-pds">"</span></span>
        <span class="pl-k">return</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">module</span> Bar
    <span class="pl-k">function</span> <span class="pl-en">bar</span>()
        <span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>bar called<span class="pl-pds">"</span></span>
        <span class="pl-k">return</span> <span class="pl-c1">2</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> Logging, ModuleLogging
<span class="pl-k">using</span> <span class="pl-k">.</span>Foo
<span class="pl-k">using</span> <span class="pl-k">.</span>Bar

<span class="pl-c"><span class="pl-c">#</span> Turn on debug logging for Foo module only</span>
logger <span class="pl-k">=</span> <span class="pl-c1">ModuleLogger</span>(<span class="pl-c1">stderr</span>, Logging<span class="pl-k">.</span>Debug, Foo)
<span class="pl-c1">global_logger</span>(logger)

Foo<span class="pl-k">.</span><span class="pl-c1">foo</span>()    <span class="pl-c"><span class="pl-c">#</span> debug log is displayed</span>
Bar<span class="pl-k">.</span><span class="pl-c1">bar</span>()    <span class="pl-c"><span class="pl-c">#</span> no debug log</span></pre></div>
</article></div>