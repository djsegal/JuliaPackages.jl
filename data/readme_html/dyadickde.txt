<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/WGUNDERWOOD/DyadicKDE.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/WGUNDERWOOD/DyadicKDE.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://github.com/WGUNDERWOOD/DyadicKDE.jl/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="license: MIT" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/WGUNDERWOOD/DyadicKDE.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49fe7655383fd1c2930e31fb115599c4d13adbd388354d65340d5e71a93ba110/68747470733a2f2f636f6465636f762e696f2f67682f5747554e444552574f4f442f4479616469634b44452e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4a4c4e37564b324c5438" alt="codecov" data-canonical-src="https://codecov.io/gh/WGUNDERWOOD/DyadicKDE.jl/branch/main/graph/badge.svg?token=JLN7VK2LT8" style="max-width: 100%;"></a>
<a href="https://WGUNDERWOOD.github.io/DyadicKDE.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://WGUNDERWOOD.github.io/DyadicKDE.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-dyadickdejl" class="anchor" aria-hidden="true" href="#dyadickdejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DyadicKDE.jl</h1>
<p dir="auto">Dyadic kernel density estimation in Julia.</p>
<p dir="auto"><a href="https://wgunderwood.github.io/DyadicKDE.jl/stable/" rel="nofollow">Documentation</a>
built with
<a href="https://juliadocs.github.io/Documenter.jl/stable/" rel="nofollow">Documenter.jl</a>.</p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This repository provides a Julia package which implements the methods for
dyadic kernel density estimation detailed in
<a href="https://arxiv.org/abs/2201.05967" rel="nofollow">Cattaneo, Feng and Underwood, 2022</a>.
In particular, the package provides the capability for computing</p>
<ul dir="auto">
<li>Point estimates of a univariate dyadic density function</li>
<li>Pointwise confidence intervals for the density</li>
<li>Bonferroni-corrected confidence intervals</li>
<li>Uniform confidence bands</li>
<li>A rule-of-thumb bandwidth selector</li>
<li>Counterfactual dyadic density estimation</li>
</ul>
<p dir="auto">The currently supported kernels are</p>
<ul dir="auto">
<li>Epanechnikov, order 2</li>
<li>Epanechnikov, order 4</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install from the Julia General registry by starting a
Julia interactive session and running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add DyadicKDE"><pre>] add DyadicKDE</pre></div>
<p dir="auto">Alternatively install from source by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add &quot;https://github.com/WGUNDERWOOD/DyadicKDE.jl.git&quot;"><pre>] add <span class="pl-s"><span class="pl-pds">"</span>https://github.com/WGUNDERWOOD/DyadicKDE.jl.git<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">The package can then be loaded with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DyadicKDE"><pre><span class="pl-k">using</span> DyadicKDE</pre></div>
<p dir="auto">and tested (this may take a few minutes) with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] test DyadicKDE"><pre>] test DyadicKDE</pre></div>
<h2 dir="auto"><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependencies</h2>
<p dir="auto">DyadicKDE.jl requires
<a href="https://docs.julialang.org/en/v1/" rel="nofollow">Julia 1.x</a>
and depends on several other Julia packages listed in
<a href="https://github.com/WGUNDERWOOD/DyadicKDE.jl/tree/main/Project.toml">Project.toml</a>.</p>
<h2 dir="auto"><a id="user-content-quick-start-guide" class="anchor" aria-hidden="true" href="#quick-start-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start guide</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# load package
using DyadicKDE

# specify parameters
n_data = 100
kernel_name = &quot;epanechnikov_order_2&quot;
evals = collect(range(-2.0, stop=2.0, length=10))
sdp_solver = &quot;cosmo&quot;
n_resample = 1000
significance_level = 0.05
p = [0.25, 0.0, 0.75]

# make data and get bandwidth
W = make_data(n_data, p)
h_ROT = estimate_ROT_bandwidth(W, &quot;epanechnikov_order_2&quot;)

# fit dyadic kernel density estimator
est = DyadicKernelDensityEstimator(
    kernel_name, h_ROT, significance_level,
    n_resample, sdp_solver, evals, W, Dict())

fit(est)

# display properties of estimator
display(est)

# display evaluation points
display(evals')

# display point estimates
display(est.fhat')

# display pointwise confidence intervals
display(est.pci)

# display uniform confidence band
display(est.ucb)"><pre><span class="pl-c"><span class="pl-c">#</span> load package</span>
<span class="pl-k">using</span> DyadicKDE

<span class="pl-c"><span class="pl-c">#</span> specify parameters</span>
n_data <span class="pl-k">=</span> <span class="pl-c1">100</span>
kernel_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>epanechnikov_order_2<span class="pl-pds">"</span></span>
evals <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">2.0</span>, stop<span class="pl-k">=</span><span class="pl-c1">2.0</span>, length<span class="pl-k">=</span><span class="pl-c1">10</span>))
sdp_solver <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>cosmo<span class="pl-pds">"</span></span>
n_resample <span class="pl-k">=</span> <span class="pl-c1">1000</span>
significance_level <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
p <span class="pl-k">=</span> [<span class="pl-c1">0.25</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.75</span>]

<span class="pl-c"><span class="pl-c">#</span> make data and get bandwidth</span>
W <span class="pl-k">=</span> <span class="pl-c1">make_data</span>(n_data, p)
h_ROT <span class="pl-k">=</span> <span class="pl-c1">estimate_ROT_bandwidth</span>(W, <span class="pl-s"><span class="pl-pds">"</span>epanechnikov_order_2<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> fit dyadic kernel density estimator</span>
est <span class="pl-k">=</span> <span class="pl-c1">DyadicKernelDensityEstimator</span>(
    kernel_name, h_ROT, significance_level,
    n_resample, sdp_solver, evals, W, <span class="pl-c1">Dict</span>())

<span class="pl-c1">fit</span>(est)

<span class="pl-c"><span class="pl-c">#</span> display properties of estimator</span>
<span class="pl-c1">display</span>(est)

<span class="pl-c"><span class="pl-c">#</span> display evaluation points</span>
<span class="pl-c1">display</span>(evals<span class="pl-k">'</span>)

<span class="pl-c"><span class="pl-c">#</span> display point estimates</span>
<span class="pl-c1">display</span>(est<span class="pl-k">.</span>fhat<span class="pl-k">'</span>)

<span class="pl-c"><span class="pl-c">#</span> display pointwise confidence intervals</span>
<span class="pl-c1">display</span>(est<span class="pl-k">.</span>pci)

<span class="pl-c"><span class="pl-c">#</span> display uniform confidence band</span>
<span class="pl-c1">display</span>(est<span class="pl-k">.</span>ucb)</pre></div>
<h2 dir="auto"><a id="user-content-paper-replication" class="anchor" aria-hidden="true" href="#paper-replication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Paper replication</h2>
<p dir="auto">The results of the empirical studies presented in
<a href="https://arxiv.org/abs/2201.05967" rel="nofollow">Cattaneo, Feng and Underwood, 2022</a>
can be replicated by running the Julia scripts found in the
<a href="https://github.com/WGUNDERWOOD/DyadicKDE.jl/tree/main/replication/">replication</a>
directory.
The <code>make_table.jl</code> script may take several hours to run,
but can be accelerated for example by first starting Julia with
<code>julia -t 8</code> to use 8 CPU threads.
Exact results may vary due to Julia's
<a href="https://docs.julialang.org/en/v1/stdlib/Random/" rel="nofollow">pseudorandom number generation</a>.</p>
</article></div>