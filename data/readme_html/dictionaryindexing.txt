<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dictionaryslicing" class="anchor" aria-hidden="true" href="#dictionaryslicing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DictionarySlicing</h1>
<p>Enables slicing dictionaries with <code>slice</code>, or directly by using function syntax.</p>
<p>Example using slice:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DictionarySlicing

dd = OrderedDict(:Apl =&gt; &quot;apple&quot;,
		 :Brc =&gt; &quot;birch&quot;,
		 :Cnd =&gt; &quot;candle&quot;,
		 :Drn =&gt; &quot;dragon&quot;,
		 :Exp =&gt; &quot;expensive&quot;,
		 :Frg =&gt; &quot;forage&quot;,
		 :Gra =&gt; &quot;grain&quot;,
		 :Hlt =&gt; &quot;health&quot;,
		 :Irn =&gt; &quot;irony&quot;,
		 :Jak =&gt; &quot;jackal&quot; )     # length is 10

dxs = slice(dd, 4)

	OrderedDict{Symbol, String} with 1 entry:
	  :Drn =&gt; &quot;dragon&quot;

dxs = slice(dd, 2, 4:5, [7,8], 5:length(dd), [8,5])  # instead of `end` we get the last index with `length`

	OrderedDict{Symbol, String} with 8 entries:
	  :Brc =&gt; &quot;birch&quot;           		 #  2
	  :Drn =&gt; &quot;dragon&quot;			 #  4
	  :Exp =&gt; &quot;expensive&quot;		 	 #  5
	  :Gra =&gt; &quot;grain&quot;  			 #  7
	  :Hlt =&gt; &quot;health&quot;			 #  8
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Irn =&gt; &quot;irony&quot;			 #  9
	  :Jak =&gt; &quot;jackal&quot;			 #  10
"><pre><span class="pl-k">using</span> DictionarySlicing

dd <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:Apl</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>apple<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Cnd</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>candle<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span> )     <span class="pl-c"><span class="pl-c">#</span> length is 10</span>

dxs <span class="pl-k">=</span> <span class="pl-c1">slice</span>(dd, <span class="pl-c1">4</span>)

	OrderedDict{Symbol, String} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>

dxs <span class="pl-k">=</span> <span class="pl-c1">slice</span>(dd, <span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>])  <span class="pl-c"><span class="pl-c">#</span> instead of `end` we get the last index with `length`</span>

	OrderedDict{Symbol, String} with <span class="pl-c1">8</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>           		 <span class="pl-c"><span class="pl-c">#</span>  2</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  4</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>		 	 <span class="pl-c"><span class="pl-c">#</span>  5</span>
	  <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>  			 <span class="pl-c"><span class="pl-c">#</span>  7</span>
	  <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  8</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  9</span>
	  <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  10</span></pre></div>
<p>Overlaps are handled such that same <code>key =&gt; value</code> pairs are not added again. If you want to change this to keep the last occurrence, use the keyword argument <code>keep = :last</code> (or <code>keep = "last"</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dxs = slice(dd, 2, 4:5, [7,8], 5:length(dd), [8,5]; keep = :last)

	OrderedDict{Symbol, String} with 8 entries:
	  :Brc =&gt; &quot;birch&quot;		    	 #  2
	  :Drn =&gt; &quot;dragon&quot;			 #  4
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Gra =&gt; &quot;grain&quot;			 #  7
	  :Irn =&gt; &quot;irony&quot;			 #  9
	  :Jak =&gt; &quot;jackal&quot;			 #  10
	  :Hlt =&gt; &quot;health&quot;			 #  8
	  :Exp =&gt; &quot;expensive&quot;			 #  5
"><pre>dxs <span class="pl-k">=</span> <span class="pl-c1">slice</span>(dd, <span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; keep <span class="pl-k">=</span> <span class="pl-c1">:last</span>)

	OrderedDict{Symbol, String} with <span class="pl-c1">8</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>		    	 <span class="pl-c"><span class="pl-c">#</span>  2</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  4</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  7</span>
	  <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  9</span>
	  <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  10</span>
	  <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  8</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  5</span></pre></div>
<p>If you want to do more complicated things like filtering the collected indices you can use the <code>filter</code> keyword with any filtering function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dxs = slice(dd, 2, 4:5, [7,8], 5:length(dd), [8,5]; filter = x-&gt;in(x,5:6))

	OrderedDict{Symbol, String} with 2 entries:
	  :Exp =&gt; &quot;expensive&quot;			 #  5
	  :Frg =&gt; &quot;forage&quot;			 #  6

dxs = slice(dd, 2, 4:5, [7,8], 5:length(dd), [8,5]; keep = :last, filter = x-&gt;in(x,5:6))

	OrderedDict{Symbol, String} with 2 entries:
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Exp =&gt; &quot;expensive&quot;		 	 #  5
"><pre>dxs <span class="pl-k">=</span> <span class="pl-c1">slice</span>(dd, <span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; filter <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-c1">in</span>(x,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">6</span>))

	OrderedDict{Symbol, String} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  5</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>

dxs <span class="pl-k">=</span> <span class="pl-c1">slice</span>(dd, <span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; keep <span class="pl-k">=</span> <span class="pl-c1">:last</span>, filter <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-c1">in</span>(x,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">6</span>))

	OrderedDict{Symbol, String} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>		 	 <span class="pl-c"><span class="pl-c">#</span>  5</span></pre></div>
<p>Ordinarily <code>keep = :last</code> occurs after filtering, but if for some reason you want it to happen before the filter use <code>keep = :lastbefore</code>. Likewise, if you want it to keep the first instance before filtering, do <code>keep = :firstbefore</code>. This is possibly desirable if your filter function involves the number of occurrences.</p>
<p>The function syntax version only works with OrderedDict, so convert your dict to an OrderedDict to use this.
Usually this just means using the constructor like <code>newdict = OrderedDict(olddict)</code>.</p>
<p>Example using function syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DictionarySlicing

directslicing()		# need to call this function to activate it.

dd = OrderedDict(:Apl =&gt; &quot;apple&quot;,
		 :Brc =&gt; &quot;birch&quot;,
		 :Cnd =&gt; &quot;candle&quot;,
		 :Drn =&gt; &quot;dragon&quot;,
		 :Exp =&gt; &quot;expensive&quot;,
		 :Frg =&gt; &quot;forage&quot;,
		 :Gra =&gt; &quot;grain&quot;,
		 :Hlt =&gt; &quot;health&quot;,
		 :Irn =&gt; &quot;irony&quot;,
		 :Jak =&gt; &quot;jackal&quot; )

dxs = dd(4)

	OrderedDict{Symbol, String} with 1 entry:
	  :Drn =&gt; &quot;dragon&quot;

dxs = dd(2, 4:5, [7,8], 5:length(dd), [8,5])

	OrderedDict{Symbol, String} with 8 entries:
	  :Brc =&gt; &quot;birch&quot;           		 #  2
	  :Drn =&gt; &quot;dragon&quot;			 #  4
	  :Exp =&gt; &quot;expensive&quot;		 	 #  5
	  :Gra =&gt; &quot;grain&quot;  			 #  7
	  :Hlt =&gt; &quot;health&quot;			 #  8
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Irn =&gt; &quot;irony&quot;			 #  9
	  :Jak =&gt; &quot;jackal&quot;			 #  10

dxs = [2, 4:5] |&gt; dd	# easy piping. throw numbers at it

	OrderedDict{Symbol, String} with 3 entries:
	  :Brc =&gt; &quot;birch&quot;           		 #  2
	  :Drn =&gt; &quot;dragon&quot;			 #  4
	  :Exp =&gt; &quot;expensive&quot;		 	 #  5

dxs = dd(2, 4:5, [7,8], 5:length(dd), [8,5]; keep = :last)

	OrderedDict{Symbol, String} with 8 entries:
	  :Brc =&gt; &quot;birch&quot;		    	 #  2
	  :Drn =&gt; &quot;dragon&quot;			 #  4
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Gra =&gt; &quot;grain&quot;			 #  7
	  :Irn =&gt; &quot;irony&quot;			 #  9
	  :Jak =&gt; &quot;jackal&quot;			 #  10
	  :Hlt =&gt; &quot;health&quot;			 #  8
	  :Exp =&gt; &quot;expensive&quot;			 #  5

dxs = dd(2, 4:5, [7,8], 5:length(dd), [8,5]; filter = x-&gt;in(x,5:6))

	OrderedDict{Symbol, String} with 2 entries:
	  :Exp =&gt; &quot;expensive&quot;			 #  5
	  :Frg =&gt; &quot;forage&quot;			 #  6

dxs = dd(2, 4:5, [7,8], 5:length(dd), [8,5]; keep = :last, filter = x-&gt;in(x,5:6))

	OrderedDict{Symbol, String} with 2 entries:
	  :Frg =&gt; &quot;forage&quot;			 #  6
	  :Exp =&gt; &quot;expensive&quot;		 	 #  5
"><pre><span class="pl-k">using</span> DictionarySlicing

<span class="pl-c1">directslicing</span>()		<span class="pl-c"><span class="pl-c">#</span> need to call this function to activate it.</span>

dd <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:Apl</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>apple<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Cnd</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>candle<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>,
		 <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span> )

dxs <span class="pl-k">=</span> <span class="pl-c1">dd</span>(<span class="pl-c1">4</span>)

	OrderedDict{Symbol, String} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>

dxs <span class="pl-k">=</span> <span class="pl-c1">dd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>])

	OrderedDict{Symbol, String} with <span class="pl-c1">8</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>           		 <span class="pl-c"><span class="pl-c">#</span>  2</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  4</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>		 	 <span class="pl-c"><span class="pl-c">#</span>  5</span>
	  <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>  			 <span class="pl-c"><span class="pl-c">#</span>  7</span>
	  <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  8</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  9</span>
	  <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  10</span>

dxs <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>] <span class="pl-k">|&gt;</span> dd	<span class="pl-c"><span class="pl-c">#</span> easy piping. throw numbers at it</span>

	OrderedDict{Symbol, String} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>           		 <span class="pl-c"><span class="pl-c">#</span>  2</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  4</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>		 	 <span class="pl-c"><span class="pl-c">#</span>  5</span>

dxs <span class="pl-k">=</span> <span class="pl-c1">dd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; keep <span class="pl-k">=</span> <span class="pl-c1">:last</span>)

	OrderedDict{Symbol, String} with <span class="pl-c1">8</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Brc</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>birch<span class="pl-pds">"</span></span>		    	 <span class="pl-c"><span class="pl-c">#</span>  2</span>
	  <span class="pl-c1">:Drn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>dragon<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  4</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Gra</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>grain<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  7</span>
	  <span class="pl-c1">:Irn</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>irony<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  9</span>
	  <span class="pl-c1">:Jak</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>jackal<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  10</span>
	  <span class="pl-c1">:Hlt</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  8</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  5</span>

dxs <span class="pl-k">=</span> <span class="pl-c1">dd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; filter <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-c1">in</span>(x,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">6</span>))

	OrderedDict{Symbol, String} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  5</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>

dxs <span class="pl-k">=</span> <span class="pl-c1">dd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>, [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>], <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">length</span>(dd), [<span class="pl-c1">8</span>,<span class="pl-c1">5</span>]; keep <span class="pl-k">=</span> <span class="pl-c1">:last</span>, filter <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-c1">in</span>(x,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">6</span>))

	OrderedDict{Symbol, String} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
	  <span class="pl-c1">:Frg</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>forage<span class="pl-pds">"</span></span>			 <span class="pl-c"><span class="pl-c">#</span>  6</span>
	  <span class="pl-c1">:Exp</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>expensive<span class="pl-pds">"</span></span>		 	 <span class="pl-c"><span class="pl-c">#</span>  5</span></pre></div>
</article></div>