<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-genservers" class="anchor" aria-hidden="true" href="#genservers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GenServers</h1>
<p dir="auto">A generic server <a href="https://github.com/JuliaActors/Actors.jl"><code>Actors</code></a> protocol</p>
<p dir="auto"><a href="https://JuliaActors.github.io/GenServers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaActors.github.io/GenServers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaActors/GenServers.jl/actions"><img src="https://github.com/JuliaActors/GenServers.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaActors/GenServers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2890b8eedb15b6ab5278d6393f6ac76b10b050bb6f5854a5b926ce6dbb324648/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614163746f72732f47656e536572766572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaActors/GenServers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>GenServers</code> allows users to write servers by following three steps:</p>
<ol dir="auto">
<li>Choose a name for your callback module.</li>
<li>Write your interface functions, e.g. <code>start()</code>, <code>stop()</code>...</li>
<li>Write the required callback functions: <code>init</code>, <code>oncall</code>, <code>oncast</code> and <code>terminate</code>.</li>
</ol>
<p dir="auto"><code>GenServers</code> provides a generic template for that.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Lets assume you write a small module <code>examples/stack.jl</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module Stack
using GenServers
export start, push, pop, info

# Client (interface)

start(default) = genserver(@__MODULE__, default)
start(name, default) = genserver(@__MODULE__, default, name=name)

push(srv, element) = cast(srv, Val(:push), element)

pop(srv) = call(srv, Val(:pop))

info(srv) = first(query(srv))

reset(srv) = cast(srv, Val(:empty)) 

stop(srv) = exit!(srv)

# Server (callbacks)

init(stack) = stack

oncast(stack, ::Val{:push}, element) = push!(stack, element)
oncast(stack, ::Val{:empty}) = empty!(stack)

oncall(stack, ::Val{:pop}) = pop!(stack)

end"><pre><span class="pl-k">module</span> Stack
<span class="pl-k">using</span> GenServers
<span class="pl-k">export</span> start, push, pop, info

<span class="pl-c"><span class="pl-c">#</span> Client (interface)</span>

<span class="pl-en">start</span>(default) <span class="pl-k">=</span> <span class="pl-c1">genserver</span>(<span class="pl-c1">@__MODULE__</span>, default)
<span class="pl-en">start</span>(name, default) <span class="pl-k">=</span> <span class="pl-c1">genserver</span>(<span class="pl-c1">@__MODULE__</span>, default, name<span class="pl-k">=</span>name)

<span class="pl-en">push</span>(srv, element) <span class="pl-k">=</span> <span class="pl-c1">cast</span>(srv, <span class="pl-c1">Val</span>(<span class="pl-c1">:push</span>), element)

<span class="pl-en">pop</span>(srv) <span class="pl-k">=</span> <span class="pl-c1">call</span>(srv, <span class="pl-c1">Val</span>(<span class="pl-c1">:pop</span>))

<span class="pl-en">info</span>(srv) <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">query</span>(srv))

<span class="pl-en">reset</span>(srv) <span class="pl-k">=</span> <span class="pl-c1">cast</span>(srv, <span class="pl-c1">Val</span>(<span class="pl-c1">:empty</span>)) 

<span class="pl-en">stop</span>(srv) <span class="pl-k">=</span> <span class="pl-c1">exit!</span>(srv)

<span class="pl-c"><span class="pl-c">#</span> Server (callbacks)</span>

<span class="pl-en">init</span>(stack) <span class="pl-k">=</span> stack

<span class="pl-en">oncast</span>(stack, <span class="pl-k">::</span><span class="pl-c1">Val{:push}</span>, element) <span class="pl-k">=</span> <span class="pl-c1">push!</span>(stack, element)
<span class="pl-en">oncast</span>(stack, <span class="pl-k">::</span><span class="pl-c1">Val{:empty}</span>) <span class="pl-k">=</span> <span class="pl-c1">empty!</span>(stack)

<span class="pl-en">oncall</span>(stack, <span class="pl-k">::</span><span class="pl-c1">Val{:pop}</span>) <span class="pl-k">=</span> <span class="pl-c1">pop!</span>(stack)

<span class="pl-k">end</span></pre></div>
<p dir="auto">Your module contains only purely sequential code. Now you can do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; include(&quot;examples/stack.jl&quot;)
Main.Stack

julia&gt; using .Stack

julia&gt; st = start([1,2,3])    # create a stack genserver
Actors.Link{Channel{Any}}(Channel{Any}(sz_max:32,sz_curr:0), 1, :genserver)

julia&gt; info(st)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; push(st, 4)
Actors.Cast((Val{:push}(), 4))

julia&gt; info(st)
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; pop(st)
4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/stack.jl<span class="pl-pds">"</span></span>)
Main<span class="pl-k">.</span>Stack

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> <span class="pl-k">.</span>Stack

julia<span class="pl-k">&gt;</span> st <span class="pl-k">=</span> <span class="pl-c1">start</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])    <span class="pl-c"><span class="pl-c">#</span> create a stack genserver</span>
Actors<span class="pl-k">.</span><span class="pl-c1">Link</span><span class="pl-c1">{Channel{Any}}</span>(<span class="pl-c1">Channel</span><span class="pl-c1">{Any}</span>(sz_max<span class="pl-k">:</span><span class="pl-c1">32</span>,sz_curr<span class="pl-k">:</span><span class="pl-c1">0</span>), <span class="pl-c1">1</span>, <span class="pl-c1">:genserver</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(st)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push</span>(st, <span class="pl-c1">4</span>)
Actors<span class="pl-k">.</span><span class="pl-c1">Cast</span>((<span class="pl-c1">Val</span><span class="pl-c1">{:push}</span>(), <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(st)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop</span>(st)
<span class="pl-c1">4</span></pre></div>
<p dir="auto">This may not look like much, but you may be interested to learn that you just wrote concurrent, thread-safe and distributed code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Stack.reset(st)
Actors.Cast((Val{:empty}(),))

julia&gt; info(st)
Int64[]

julia&gt; using .Threads

julia&gt; for _ in 1:1000    # push asynchronously
           Threads.@spawn begin
               push(st, threadid())
           end
       end

julia&gt; length(info(st))
1000

julia&gt; c = zeros(Int, nthreads());

julia&gt; for i in info(st)  # compute the scheduled threads
           c[i] += 1
       end

julia&gt; c                  # show them
8-element Array{Int64,1}:
  34
  49
 120
  65
 146
 201
  84
 301"><pre>julia<span class="pl-k">&gt;</span> Stack<span class="pl-k">.</span><span class="pl-c1">reset</span>(st)
Actors<span class="pl-k">.</span><span class="pl-c1">Cast</span>((<span class="pl-c1">Val</span><span class="pl-c1">{:empty}</span>(),))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(st)
Int64[]

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> <span class="pl-k">.</span>Threads

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>    <span class="pl-c"><span class="pl-c">#</span> push asynchronously</span>
           Threads<span class="pl-k">.</span><span class="pl-c1">@spawn</span> <span class="pl-k">begin</span>
               <span class="pl-c1">push</span>(st, <span class="pl-c1">threadid</span>())
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">info</span>(st))
<span class="pl-c1">1000</span>

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">nthreads</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">info</span>(st)  <span class="pl-c"><span class="pl-c">#</span> compute the scheduled threads</span>
           c[i] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> c                  <span class="pl-c"><span class="pl-c">#</span> show them</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">34</span>
  <span class="pl-c1">49</span>
 <span class="pl-c1">120</span>
  <span class="pl-c1">65</span>
 <span class="pl-c1">146</span>
 <span class="pl-c1">201</span>
  <span class="pl-c1">84</span>
 <span class="pl-c1">301</span></pre></div>
<p dir="auto">Or with <code>Distributed</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Distributed

julia&gt; addprocs();

julia&gt; nworkers()
16

julia&gt; @everywhere include(&quot;examples/stack.jl&quot;)

julia&gt; @everywhere using .Stack

julia&gt; start(:stack, Int[])  # now we register the stack
:stack

julia&gt; info(:stack)
Int64[]

julia&gt; fetch(@spawnat 2 info(:stack))
Int64[]

julia&gt; @everywhere push(:stack, myid())

julia&gt; info(:stack)
17-element Array{Int64,1}:
  1
  2
  7
 10
  5
  ⋮
 12
 17
  4
 15
 14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nworkers</span>()
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/stack.jl<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> <span class="pl-k">.</span>Stack

julia<span class="pl-k">&gt;</span> <span class="pl-c1">start</span>(<span class="pl-c1">:stack</span>, Int[])  <span class="pl-c"><span class="pl-c">#</span> now we register the stack</span>
<span class="pl-c1">:stack</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(<span class="pl-c1">:stack</span>)
Int64[]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fetch</span>(<span class="pl-c1">@spawnat</span> <span class="pl-c1">2</span> <span class="pl-c1">info</span>(<span class="pl-c1">:stack</span>))
Int64[]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-c1">push</span>(<span class="pl-c1">:stack</span>, <span class="pl-c1">myid</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(<span class="pl-c1">:stack</span>)
<span class="pl-c1">17</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">7</span>
 <span class="pl-c1">10</span>
  <span class="pl-c1">5</span>
  ⋮
 <span class="pl-c1">12</span>
 <span class="pl-c1">17</span>
  <span class="pl-c1">4</span>
 <span class="pl-c1">15</span>
 <span class="pl-c1">14</span></pre></div>
<p dir="auto"><code>GenServers</code> is part of <code>JuliaActors</code>.</p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author(s)</h2>
<ul dir="auto">
<li>Paul Bayer</li>
</ul>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">MIT</p>
</article></div>