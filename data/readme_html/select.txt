<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-select" class="anchor" aria-hidden="true" href="#select"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Select</h1>
<p dir="auto"><strong>DEPRECATED: This repo was an experiment, but is not maintained, and the code is quite old. See <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="113263792" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/13763" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/13763/hovercard" href="https://github.com/JuliaLang/julia/issues/13763">JuliaLang/julia#13763</a> for a longer discussion on <code>@select</code> in Julia.</strong></p>
<hr>
<p dir="auto">This repo is branched from <a href="https://github.com/durcan/Select.jl">https://github.com/durcan/Select.jl</a>, which was originally a copy of <a href="https://github.com/malmaud">Jon Malmaud's</a> go-inspired select macro for the Julia programming language. I have updated the repo for Julia 1.3+, multithreaded the Select macro, and hardened the code a bit.</p>
<p dir="auto">Install this package via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;https://github.com/NHDaly/Select.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/NHDaly/Select.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The original README from <a href="https://github.com/durcan/Select.jl">durcan/Select.jl</a> follows:</p>
<hr>
<p dir="auto">This is copy of <a href="https://github.com/malmaud">Jon Malmaud's</a> go inspired select macro for the Julia programming language. I have made a slight syntax modification, but essentially all the code is his.</p>
<p dir="auto">A select expression is for waiting on multiple communication operations and is of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@select begin
     clause1 =&gt; body1
     clause2 =&gt; body2
     _       =&gt; default_body
    end
end"><pre><span class="pl-c1">@select</span> <span class="pl-k">begin</span>
     clause1 <span class="pl-k">=&gt;</span> body1
     clause2 <span class="pl-k">=&gt;</span> body2
     _       <span class="pl-k">=&gt;</span> default_body
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Wait for multiple clauses simultaneously using an pattern matching syntax, taking a different action depending on which clause is available first.
A clause has three possible forms:</p>
<ol dir="auto">
<li><code>event |&gt; value</code>
If <code>event</code> is an <code>AbstractChannel</code>, wait for a value to become available in the channel and assign <code>take!(event)</code> to <code>value</code>.
if <code>event</code> is a <code>Task</code>, wait for the task to complete and assign <code>value</code> the return value of the task.</li>
<li><code>event |&lt; value</code>
Only suppored for <code>AbstractChannel</code>s. Wait for the channel to capabity to store an element, and then call <code>put!(event, value)</code>.</li>
<li><code>event</code>
Calls <code>wait</code> on <code>event</code>, discarding the return value. Usable on any "waitable" events", which include channels, tasks, <code>Condition</code> objects, and processes.</li>
</ol>
<p dir="auto">If a default branch is provided, <code>@select</code> will check arbitrary choose any event which is ready and execute its body, or will execute <code>default_body</code> if none of them are.</p>
<p dir="auto">Otherise, <code>@select</code> blocks until at least one event is ready.</p>
<p dir="auto">For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="channel1 = Channel()
channel2 = Channel()
task = @task ...
result = @select begin
    channel1 |&gt; value =&gt; begin
            info(&quot;Took from channel1&quot;)
            value
        end
    channel2 &lt;| :test =&gt; info(&quot;Put :test into channel2&quot;)
    task              =&gt; info(&quot;task finished&quot;)
end"><pre>channel1 <span class="pl-k">=</span> <span class="pl-c1">Channel</span>()
channel2 <span class="pl-k">=</span> <span class="pl-c1">Channel</span>()
task <span class="pl-k">=</span> <span class="pl-c1">@task</span> <span class="pl-k">...</span>
result <span class="pl-k">=</span> <span class="pl-c1">@select</span> <span class="pl-k">begin</span>
    channel1 <span class="pl-k">|&gt;</span> value <span class="pl-k">=&gt;</span> <span class="pl-k">begin</span>
            <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>Took from channel1<span class="pl-pds">"</span></span>)
            value
        <span class="pl-k">end</span>
    channel2 <span class="pl-k">&lt;</span><span class="pl-k">|</span> <span class="pl-c1">:test</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>Put :test into channel2<span class="pl-pds">"</span></span>)
    task              <span class="pl-k">=&gt;</span> <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>task finished<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
</article></div>