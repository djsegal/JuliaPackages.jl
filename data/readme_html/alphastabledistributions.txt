<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-alphastabledistributions" class="anchor" aria-hidden="true" href="#alphastabledistributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AlphaStableDistributions</h1>
<p><a href="https://github.com/org-arl/AlphaStableDistributions.jl/actions/workflows/CI.yml"><img src="https://github.com/org-arl/AlphaStableDistributions.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/org-arl/AlphaStableDistributions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f379dd4a1bdbdbe56758920b7565c76e215779264682f7ee6b6065f66114eb58/68747470733a2f2f636f6465636f762e696f2f67682f6f72672d61726c2f416c706861537461626c65446973747269627574696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/org-arl/AlphaStableDistributions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This library is a port of functionality from <a href="https://github.com/org-arl/arlpy/blob/master/arlpy/stable.py">arlpy</a>. The two distributions supported are</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Stable_distribution" rel="nofollow">alpha-stable distribution</a> (<code>rand</code> and <code>fit</code>)</li>
<li><a href="https://arl.nus.edu.sg/twiki6/pub/ARL/BibEntries/SigProc2016RandomVariate.pdf" rel="nofollow">alpha sub-Gaussian distribution with memory</a> (<code>rand</code> and <code>fit</code>)</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; pkg&quot;add https://github.com/org-arl/AlphaStableDistributions.jl&quot;
"><pre><span class="pl-k">using</span> Pkg; <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/org-arl/AlphaStableDistributions.jl<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using AlphaStableDistributions

julia&gt; d1 = AlphaStable()
AlphaStable{Float64}(α=1.5, β=0.0, scale=1.0, location=0.0)

julia&gt; s = rand(d1, 100000);

julia&gt; d2 = fit(AlphaStable, s, alg=QuickSort) # See ThreadsX.QuickSort for a threaded algorithm

AlphaStable{Float64}(α=1.4748701622930906, β=0.0, scale=1.006340087707924, location=-0.0036724481641865715)

julia&gt; x = rand(AlphaSubGaussian(n=9600));

julia&gt; plot(x)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AlphaStableDistributions

julia<span class="pl-k">&gt;</span> d1 <span class="pl-k">=</span> <span class="pl-c1">AlphaStable</span>()
<span class="pl-c1">AlphaStable</span><span class="pl-c1">{Float64}</span>(α<span class="pl-k">=</span><span class="pl-c1">1.5</span>, β<span class="pl-k">=</span><span class="pl-c1">0.0</span>, scale<span class="pl-k">=</span><span class="pl-c1">1.0</span>, location<span class="pl-k">=</span><span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">rand</span>(d1, <span class="pl-c1">100000</span>);

julia<span class="pl-k">&gt;</span> d2 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(AlphaStable, s, alg<span class="pl-k">=</span>QuickSort) <span class="pl-c"><span class="pl-c">#</span> See ThreadsX.QuickSort for a threaded algorithm</span>

<span class="pl-c1">AlphaStable</span><span class="pl-c1">{Float64}</span>(α<span class="pl-k">=</span><span class="pl-c1">1.4748701622930906</span>, β<span class="pl-k">=</span><span class="pl-c1">0.0</span>, scale<span class="pl-k">=</span><span class="pl-c1">1.006340087707924</span>, location<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">0.0036724481641865715</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">AlphaSubGaussian</span>(n<span class="pl-k">=</span><span class="pl-c1">9600</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(x)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="asg.svg"><img src="asg.svg" alt="window" style="max-width:100%;"></a></p>
<h3><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h3>
<p>Julia code by <a href="https://github.com/ymtoo">@ymtoo</a> and <a href="https://github.com/baggepinnen">@baggepinnen</a>, original implementation by <a href="https://github.com/mchitre">@mchitre</a> and others.</p>
</article></div>