<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kdtrees" class="anchor" aria-hidden="true" href="#kdtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KDTrees</h1>
<p>Kd trees for Julia.</p>
<p><a href="https://travis-ci.org/JuliaGeometry/KDTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b820a36ffc5e06692e3817e92f991392d31080e58203b31e3dcec31f10e33b68/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147656f6d657472792f4b4454726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGeometry/KDTrees.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/r/KristofferC/KDTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f836d1183341b699202c1e507cacd47c7778b66e5d864a8b80d9eaec7714413f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4b726973746f66666572432f4b4454726565732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/KristofferC/KDTrees.jl/badge.svg" style="max-width:100%;"></a></p>
<p><strong>Note:</strong> This package is deprecated in favor of <code>NearestNeighbors.jl</code> which can be found at: <a href="https://github.com/KristofferC/NearestNeighbors.jl">https://github.com/KristofferC/NearestNeighbors.jl</a>.</p>
<p>This package contains an optimized kd tree to perform <em>k</em> nearest neighbour searches and range searches.</p>
<p>The readme includes some usage examples, different benchmarks and a comparison for kNN to scipy's cKDTree.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-creating-the-tree" class="anchor" aria-hidden="true" href="#creating-the-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating the tree</h3>
<p>The tree is created with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="KDTree(data [, leafsize=10, reorder=true])
"><pre><span class="pl-c1">KDTree</span>(data [, leafsize<span class="pl-k">=</span><span class="pl-c1">10</span>, reorder<span class="pl-k">=</span><span class="pl-c1">true</span>])</pre></div>
<p>The <code>data</code> argument for the tree should be a matrix of floats of dimension <code>(n_dim, n_points)</code>. The argument <code>leafsize</code> determines for what number of points the tree should stop splitting. The default value is <code>leafsize = 10</code> which is a decent value. However, the optimal leafsize is dependent on the cost of the
distance function which is dependent on the dimension of the data.</p>
<p>The <code>reorder</code> argument is a bool which determines if the input data should
be reordered to optimize for memory access. Points that are likely to be accessed close in time are also put close in memory. The default is to enable this.</p>
<h3><a id="user-content-k-nearest-neighbours" class="anchor" aria-hidden="true" href="#k-nearest-neighbours"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>K-Nearest-Neighbours</h3>
<p>The function <code>knn(tree, point, k)</code> finds the <em>k</em> nearest neighbours to a given point. The function returns a tuple of two lists with the indices and the distances from the given points respectively. These are sorted in the order of smallest to largest distance.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using KDTrees
tree = KDTree(randn(3, 1000))
knn(tree, [0.0, 0.0, 0.0], 5)
"><pre><span class="pl-k">using</span> KDTrees
tree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1000</span>))
<span class="pl-c1">knn</span>(tree, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], <span class="pl-c1">5</span>)</pre></div>
<p>gives both the indices and distances:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="([300,119,206,180,845],[0.052019,0.200885,0.220441,0.22447,0.235882])
"><pre><code>([300,119,206,180,845],[0.052019,0.200885,0.220441,0.22447,0.235882])
</code></pre></div>
<h3><a id="user-content-range-searches" class="anchor" aria-hidden="true" href="#range-searches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Range searches</h3>
<h4><a id="user-content-tree---point-range-search" class="anchor" aria-hidden="true" href="#tree---point-range-search"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tree - point range search</h4>
<p>The function <code>inball(tree, point, radius [, sort=false])</code> finds all points closer than <code>radius</code> to <code>point</code>. The function
returns a list of the indices of the points in range. If <code>sort</code> is set to true, the indices will be sorted before being returned.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using KDTrees
tree = KDTree(randn(3, 1000))
inball(tree, [0.0, 0.0, 0.0], 0.4, true)
"><pre><span class="pl-k">using</span> KDTrees
tree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1000</span>))
<span class="pl-c1">inball</span>(tree, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], <span class="pl-c1">0.4</span>, <span class="pl-c1">true</span>)</pre></div>
<p>gives the indices:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="8-element Array{Int64,1}:
 184
 199
 307
 586
 646
 680
 849
 906
 926
"><pre><code>8-element Array{Int64,1}:
 184
 199
 307
 586
 646
 680
 849
 906
 926
</code></pre></div>
<h4><a id="user-content-tree-tree-range-search" class="anchor" aria-hidden="true" href="#tree-tree-range-search"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tree-tree range search</h4>
<p>KDTrees.jl also supports <em>dual tree range searches</em> where the query points are
put in their own separate tree and both trees are traversed at the same time
while extracting the pairs of points that are in a given range.</p>
<p>Dual tree range searches are performed with the function <code>inball(tree1, tree2, radius [, sort=false])</code>
and returns a list of list such that the <em>i</em>:th list contains the indices for the
points in tree2 that are in range to point <em>i</em> in tree.
If <code>sort = true</code> the lists are sorted before being returned. Currently, trees where the
data has been optimized for memory allocation is not supported. This function has not
gotten the same amount of optimization as the others so it might be faster just to
loop through the points one by one.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using KDTrees
tree = KDTree(rand(1, 12), reorder = false)
tree2 = KDTree(rand(1, 16), reorder = false)
inball(tree, tree2, 0.1)
"><pre><span class="pl-k">using</span> KDTrees
tree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span>, <span class="pl-c1">12</span>), reorder <span class="pl-k">=</span> <span class="pl-c1">false</span>)
tree2 <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span>, <span class="pl-c1">16</span>), reorder <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">inball</span>(tree, tree2, <span class="pl-c1">0.1</span>)</pre></div>
<p>gives the result</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="12-element Array{Array{Int64,1},1}:
[16,11,15,5,9,14]
[6]
[5,7]
[6]
[5,7]
[10,3,2]
[5,7]
[4,1]
[16,12,11,15,9,14]
[4,1]
[7,6]
[5,7]
"><pre><code>12-element Array{Array{Int64,1},1}:
[16,11,15,5,9,14]
[6]
[5,7]
[6]
[5,7]
[10,3,2]
[5,7]
[4,1]
[16,12,11,15,9,14]
[4,1]
[7,6]
[5,7]
</code></pre></div>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>The benchmarks have been made with computer with a 4 core Intel i5-2500K @ 4.2
GHz with Julia v0.4.0-dev+3034 with <code>reorder = true</code> in the building of the trees.</p>
<p>Clicking on a plot takes you to the Plotly site for the plot where the exact
data can be seen.</p>
<h3><a id="user-content-knn-benchmark" class="anchor" aria-hidden="true" href="#knn-benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KNN benchmark</h3>
<p><a href="https://plot.ly/~kcarlsson89/397/" rel="nofollow"><img src="https://camo.githubusercontent.com/3dffb4bf1becf33586025dba7dff75c26de7d7b56f11010b8c711d96ff5f8a2c/68747470733a2f2f706c6f742e6c792f7e6b6361726c73736f6e38392f3339372e706e67" alt="bench_knn" data-canonical-src="https://plot.ly/~kcarlsson89/397.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-build-time-benchmark" class="anchor" aria-hidden="true" href="#build-time-benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build time benchmark</h3>
<p><a href="https://plot.ly/~kcarlsson89/413/" rel="nofollow"><img src="https://camo.githubusercontent.com/17b5c634a1d9549a532b2cec0e734db2fd4b98b059cb7dcfcb992f48b31aa6b7/68747470733a2f2f706c6f742e6c792f7e6b6361726c73736f6e38392f3431332e706e67" alt="bench_knn" data-canonical-src="https://plot.ly/~kcarlsson89/413.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-short-comparison-vs-scipys-ckdtree" class="anchor" aria-hidden="true" href="#short-comparison-vs-scipys-ckdtree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Short comparison vs scipy's cKDTree</h3>
<p>One of the most popular packages for scientific computing in Python
is the scipy package. It can therefore be interesting to see how
KDTrees.jl compares against scipy's cKDTree.</p>
<p>A KNN search for a 100 000 point tree was performed for the five closest
neighbours. The code and the resulting search speed are shown, first for
cKDTree and then for KDTrees.jl</p>
<p><strong>cKDTree:</strong></p>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from scipy.spatial import cKDTree
&gt;&gt;&gt; import timeit

&gt;&gt;&gt; t = timeit.Timer(&quot;tree.query(queries, k=5)&quot;,
&quot;&quot;&quot;
import numpy as np
from scipy.spatial import cKDTree
data = np.random.rand(10**5, 3)
tree = cKDTree(data)
queries = np.random.rand(10**5, 3)
&quot;&quot;&quot;)
&gt;&gt;&gt; t = min(t.repeat(3, 10)) / 10

&gt;&gt;&gt; print(&quot;knn / sec: &quot;, 10**5 / t)
('knn / sec: ', 251394)
"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">numpy</span> <span class="pl-k">as</span> <span class="pl-s1">np</span>
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">from</span> <span class="pl-s1">scipy</span>.<span class="pl-s1">spatial</span> <span class="pl-k">import</span> <span class="pl-s1">cKDTree</span>
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">timeit</span>

<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-s1">timeit</span>.<span class="pl-v">Timer</span>(<span class="pl-s">"tree.query(queries, k=5)"</span>,
<span class="pl-s">"""</span>
<span class="pl-s">import numpy as np</span>
<span class="pl-s">from scipy.spatial import cKDTree</span>
<span class="pl-s">data = np.random.rand(10**5, 3)</span>
<span class="pl-s">tree = cKDTree(data)</span>
<span class="pl-s">queries = np.random.rand(10**5, 3)</span>
<span class="pl-s">"""</span>)
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-en">min</span>(<span class="pl-s1">t</span>.<span class="pl-en">repeat</span>(<span class="pl-c1">3</span>, <span class="pl-c1">10</span>)) <span class="pl-c1">/</span> <span class="pl-c1">10</span>

<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-en">print</span>(<span class="pl-s">"knn / sec: "</span>, <span class="pl-c1">10</span><span class="pl-c1">**</span><span class="pl-c1">5</span> <span class="pl-c1">/</span> <span class="pl-s1">t</span>)
(<span class="pl-s">'knn / sec: '</span>, <span class="pl-c1">251394</span>)</pre></div>
<p><strong>KDTrees.jl:</strong></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tree = KDTree(rand(3,10^5));
julia&gt; t = @elapsed for i = 1:10^5
       knn(tree, rand(3), 5)
       end;
julia&gt; print(&quot;knn / sec: &quot;, 10^5 / t)
knn / sec: 700675
"><pre>julia<span class="pl-k">&gt;</span> tree <span class="pl-k">=</span> <span class="pl-c1">KDTree</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>));
julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>
       <span class="pl-c1">knn</span>(tree, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), <span class="pl-c1">5</span>)
       <span class="pl-k">end</span>;
julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>knn / sec: <span class="pl-pds">"</span></span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">/</span> t)
knn <span class="pl-k">/</span> sec<span class="pl-k">:</span> <span class="pl-c1">700675</span></pre></div>
<h3><a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribution</h3>
<p>Contributions are more than welcome. If you have an idea that would make the
tree have better performance or be more general please create a PR. Make
sure you run the benchmarks before and after your changes.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>Kristoffer Carlsson (@KristofferC)</p>
</article></div>