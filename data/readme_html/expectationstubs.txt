<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-expectationstubs" class="anchor" aria-hidden="true" href="#expectationstubs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ExpectationStubs</h1>
<p><a href="https://travis-ci.org/oxinabox/ExpectationStubs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9bb6529fd846639a3435baab576fb71dd74082cd/68747470733a2f2f7472617669732d63692e6f72672f6f78696e61626f782f4578706563746174696f6e53747562732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/oxinabox/ExpectationStubs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/expectationstubs-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/fdb48f17ec40c60a54cf204032eb5caad1d1b798/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3436736a7039356736787939777774312f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/46sjp95g6xy9wwt1/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>This package exists to help you make testing stubs.
Its not to help you do patch mocks into code:
for that see <a href="https://github.com/invenia/Mocking.jl">Mocking.jl</a>.</p>
<p>In theory the stubs created using ExpectationStubs
are ideal for patching in with Mocking.jl.
This is still in alpha, and that hasn't been tested yet.
(Raise an issue and let me know if that works.)</p>
<p>These stub are ideal for if you already have dependency injection of functions set up.</p>
<p>For purposes of this package, a stub and a mock at the same thing.</p>
<p>There are 5 key functions (check their docstrings on the REPL).</p>
<ul>
<li><code>@stub foo</code>: declares a stub called <code>foo</code></li>
<li><code>@expect foo(::Integer, 8.5)=77</code>: sets up an expectation that <code>foo</code> will be called with an <code>Integer</code> and the exact value <code>8.5</code>. and if so it is to return <code>77</code></li>
<li><code>@used  foo(100, ::Real)</code> checks to see if <code>foo</code> was called with the the exact value <code>100</code> and something of type <code>Real</code></li>
<li><code>@usecount foo(100, ::Real)</code> as per <code>@used</code> except returns the number of times called</li>
<li><code>all_expectations_used(foo)</code> checks that every expectation declared on <code>foo</code> was used (returns a <code>Bool</code>).</li>
</ul>
<h3><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example Usage</h3>
<p>Lets say I have a function that checks on the status of say some pipe
and if it has too much pressure, takes some response:
normally calling a function called <code>email</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">check_status</span>(pressure, its_bad_callback<span class="pl-k">=</span>email)
    <span class="pl-k">if</span> pressure <span class="pl-k">&gt;</span> <span class="pl-c1">9000</span>
        <span class="pl-c1">its_bad_callback</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Darn it Phil, the thing is gonna blow<span class="pl-pds">"</span></span>)
        <span class="pl-k">return</span> <span class="pl-c1">false</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">true</span>
<span class="pl-k">end</span></pre></div>
<p>Now, when testing this function out, I don't want Phil to get 100s of emails.
So I want to replace the <code>its_bad_callback</code> with some mock.</p>
<p>So I could write a little closure in my testing code,
and have that closure set a variable and then check that variable,
to see how it was called.
And that is pretty good.
But it is a bit adhock.</p>
<p>Enter ExpectationStubs.jl</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Test
<span class="pl-k">using</span> ExpectationStubs

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Check the pipe<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@stub</span> fakeemail
    <span class="pl-c1">@expect</span> <span class="pl-en">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> no return</span>

    <span class="pl-c"><span class="pl-c">#</span> check what happens if everything is OK</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">check_status</span>(<span class="pl-c1">1000</span>, fakeemail) <span class="pl-k">==</span> <span class="pl-c1">true</span>
    <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">@used</span> <span class="pl-c1">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>)
    <span class="pl-c"><span class="pl-c">#</span>## Better not email Phil if everything is going ok.</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">check_status</span>(<span class="pl-c1">9007</span>, fakeemail) <span class="pl-k">==</span> <span class="pl-c1">false</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">@used</span> <span class="pl-c1">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>)
<span class="pl-k">end</span></pre></div>
</article></div>