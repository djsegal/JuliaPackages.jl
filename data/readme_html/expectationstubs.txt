<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-expectationstubs" class="anchor" aria-hidden="true" href="#expectationstubs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExpectationStubs</h1>
<p dir="auto"><a href="https://travis-ci.org/oxinabox/ExpectationStubs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d2aab7196db939a43df7d8017c666bc2524d70f1d75307fa1b41451da052cb5b/68747470733a2f2f7472617669732d63692e6f72672f6f78696e61626f782f4578706563746174696f6e53747562732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/oxinabox/ExpectationStubs.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/expectationstubs-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/78f580e1c53f2ccf0fa1b0aa82c80eaf5a94cfae75741990509e71422d154b9e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3436736a7039356736787939777774312f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/46sjp95g6xy9wwt1/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">This package exists to help you make testing stubs.
Its not to help you do patch mocks into code:
for that see <a href="https://github.com/invenia/Mocking.jl">Mocking.jl</a>.
The stubs created using ExpectationStubs are suitable for patching in with Mocking.jl.</p>
<p dir="auto">These stubs are ideal for if you already have dependency injection of functions set up.</p>
<p dir="auto">We consider for the purpose of this package a <code>stub</code> to be a simplified function that returns a fixed value for a fixed input.
Expectation Stubs is all about the Arrange, Act, Assert style of unit testing:</p>
<ul dir="auto">
<li>Arrange:  setup <em>expectations</em> of how the stubbed out code will be called, and what it should return</li>
<li>Act: call the function being tested (which will then hit the stubbed out methods)</li>
<li>Assert: test that the stubs were tiggered in the way you expected, thus validating your belief about how things are used.</li>
</ul>
<p dir="auto">There are 5 key functions (check their docstrings on the REPL).</p>
<ul dir="auto">
<li><code>@stub foo</code>: declares a stub called <code>foo</code></li>
<li><code>@expect foo(::Integer, 8.5)=77</code>: sets up an expectation that <code>foo</code> will be called with an <code>Integer</code> and the exact value <code>8.5</code>. and if so it is to return <code>77</code></li>
<li><code>@used  foo(100, ::Real)</code> checks to see if <code>foo</code> was called with the the exact value <code>100</code> and something of type <code>Real</code></li>
<li><code>@usecount foo(100, ::Real)</code> as per <code>@used</code> except returns the number of times called</li>
<li><code>all_expectations_used(foo)</code> checks that every expectation declared on <code>foo</code> was used (returns a <code>Bool</code>).</li>
</ul>
<h3 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h3>
<p dir="auto">Lets say I have a function that checks on the status of say some pipe
and if it has too much pressure, takes some response:
normally calling a function called <code>email</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function check_status(pressure, its_bad_callback=email)
    if pressure &gt; 9000
        its_bad_callback(&quot;phil@example.com&quot;, &quot;Darn it Phil, the thing is gonna blow&quot;)
        return false
    end
    true
end"><pre><span class="pl-k">function</span> <span class="pl-en">check_status</span>(pressure, its_bad_callback<span class="pl-k">=</span>email)
    <span class="pl-k">if</span> pressure <span class="pl-k">&gt;</span> <span class="pl-c1">9000</span>
        <span class="pl-c1">its_bad_callback</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Darn it Phil, the thing is gonna blow<span class="pl-pds">"</span></span>)
        <span class="pl-k">return</span> <span class="pl-c1">false</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">true</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now, when testing this function out, I don't want Phil to get 100s of emails.
So I want to replace the <code>its_bad_callback</code> with some mock.</p>
<p dir="auto">So I could write a little closure in my testing code,
and have that closure set a variable and then check that variable,
to see how it was called.
And that is pretty good.
But it is a bit adhock.</p>
<p dir="auto">Enter ExpectationStubs.jl</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Base.Test
using ExpectationStubs

@testset &quot;Check the pipe&quot; begin
    @stub fakeemail
    @expect fakeemail(&quot;phil@example.com&quot;, ::AbstractString) = nothing # no return

    # check what happens if everything is OK
    @test check_status(1000, fakeemail) == true
    @test !@used fakeemail(&quot;phil@example.com&quot;, ::Any)
    ### Better not email Phil if everything is going ok.
    @test check_status(9007, fakeemail) == false
    @test @used fakeemail(&quot;phil@example.com&quot;, ::Any)
end"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Test
<span class="pl-k">using</span> ExpectationStubs

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Check the pipe<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@stub</span> fakeemail
    <span class="pl-c1">@expect</span> <span class="pl-en">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> no return</span>

    <span class="pl-c"><span class="pl-c">#</span> check what happens if everything is OK</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">check_status</span>(<span class="pl-c1">1000</span>, fakeemail) <span class="pl-k">==</span> <span class="pl-c1">true</span>
    <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">@used</span> <span class="pl-c1">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>)
    <span class="pl-c"><span class="pl-c">#</span>## Better not email Phil if everything is going ok.</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">check_status</span>(<span class="pl-c1">9007</span>, fakeemail) <span class="pl-k">==</span> <span class="pl-c1">false</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">@used</span> <span class="pl-c1">fakeemail</span>(<span class="pl-s"><span class="pl-pds">"</span>phil@example.com<span class="pl-pds">"</span></span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>)
<span class="pl-k">end</span></pre></div>
</article></div>