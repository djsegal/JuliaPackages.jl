<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modiaresult" class="anchor" aria-hidden="true" href="#modiaresult"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModiaResult</h1>
<p dir="auto"><a href="https://modiasim.github.io/ModiaResult.jl/stable/index.html" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/ModiaSim/ModiaResult.jl/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/ad8758fbaebbced78645b98e446c0bb5ec223676ed61700184320887cadbfb8e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width: 100%;"></a></p>
<p dir="auto">ModiaResult is part of <a href="https://modiasim.github.io/docs/" rel="nofollow">ModiaSim</a>. See also the ModiaResult <a href="https://modiasim.github.io/ModiaResult.jl/stable/index.html" rel="nofollow">documentation</a>.</p>
<p dir="auto">ModiaResult defines an abstract interface for <strong>simulation results</strong> and provides overloaded methods for:</p>
<ul dir="auto">
<li>
<p dir="auto">Dictionaries,</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaData/DataFrames.jl">DataFrame</a> tables,</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaData/Tables.jl">Tables</a> (for example <a href="https://github.com/JuliaData/CSV.jl">CSV</a>), and</p>
</li>
<li>
<p dir="auto">ModiaResult.ResultDict (special dictionary with all features of the interface).</p>
</li>
</ul>
<p dir="auto">Additionally, <strong>operations</strong> on simulation results are provided, especially to produce <strong>line plots</strong> in a <strong>convenient way</strong> based on</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaPlots/GLMakie.jl">GLMakie</a> (interactive plots in an OpenGL window),</li>
<li><a href="https://github.com/JuliaPlots/WGLMakie.jl">WGLMakie</a> (interactive plots in a browser window),</li>
<li><a href="https://github.com/JuliaPlots/CairoMakie.jl">CairoMakie</a> (static plots on file with publication quality),</li>
<li><a href="https://github.com/JuliaPy/PyPlot.jl">PyPlot</a> (plots with Matplotlib from Python) and</li>
<li>NoPlot (= all plot calls are ignored; NoPlot is a module in ModiaResult), or</li>
<li>SilentNoPlot (= NoPlot without messages; SilentNoPlot is a module in ModiaResult).</li>
</ul>
<p dir="auto">More details:</p>
<ul dir="auto">
<li><a href="https://modiasim.github.io/ModiaResult.jl/stable/GettingStarted.html" rel="nofollow">Getting Started</a></li>
<li><a href="https://modiasim.github.io/ModiaResult.jl/stable/Functions.html" rel="nofollow">Functions</a></li>
<li><a href="https://modiasim.github.io/ModiaResult.jl/stable/AbstractInterface.html" rel="nofollow">Abstract Interface</a></li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">All packages are registered and are installed with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add ModiaResult
        add ModiaPlot_GLMakie       # if plotting with GLMakie desired
        add ModiaPlot_WGLMakie      # if plotting with WGLMakie desired
        add ModiaPlot_CairoMakie    # if plotting with CairoMakie desired
        add ModiaPlot_PyPlot        # if plotting with PyPlot desired"><pre>julia<span class="pl-k">&gt;</span> ]add ModiaResult
        add ModiaPlot_GLMakie       <span class="pl-c"><span class="pl-c">#</span> if plotting with GLMakie desired</span>
        add ModiaPlot_WGLMakie      <span class="pl-c"><span class="pl-c">#</span> if plotting with WGLMakie desired</span>
        add ModiaPlot_CairoMakie    <span class="pl-c"><span class="pl-c">#</span> if plotting with CairoMakie desired</span>
        add ModiaPlot_PyPlot        <span class="pl-c"><span class="pl-c">#</span> if plotting with PyPlot desired</span></pre></div>
<p dir="auto">If you have trouble installing <code>ModiaPlot_PyPlot</code>, see
<a href="https://modiasim.github.io/ModiaResult.jl/stable/index.html#Installation-of-PyPlot.jl" rel="nofollow">Installation of PyPlot.jl</a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Assume that the result data structure is available, then the following commands</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import ModiaResult

# Define plotting software globally
ModiaResult.activate(&quot;PyPlot&quot;) # or ENV[&quot;MODIA_PLOT&quot;] = &quot;PyPlot&quot;

# Execute &quot;using ModiaPlot_&lt;globally defined plot package&gt;&quot;
ModiaResult.@usingModiaPlot   # = &quot;using ModiaPlot_PyPlot&quot;

# Generate line plots                     
plot(result, [(&quot;sigA&quot;, &quot;sigB&quot;, &quot;sigC&quot;), &quot;r[2:3]&quot;])"><pre><span class="pl-k">import</span> ModiaResult

<span class="pl-c"><span class="pl-c">#</span> Define plotting software globally</span>
ModiaResult<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>PyPlot<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or ENV["MODIA_PLOT"] = "PyPlot"</span>

<span class="pl-c"><span class="pl-c">#</span> Execute "using ModiaPlot_&lt;globally defined plot package&gt;"</span>
ModiaResult<span class="pl-k">.</span><span class="pl-c1">@usingModiaPlot</span>   <span class="pl-c"><span class="pl-c">#</span> = "using ModiaPlot_PyPlot"</span>

<span class="pl-c"><span class="pl-c">#</span> Generate line plots                     </span>
<span class="pl-c1">plot</span>(result, [(<span class="pl-s"><span class="pl-pds">"</span>sigA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sigB<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sigC<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>r[2:3]<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto">generate the following plot:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/resources/images/segmented-signals-plot.png"><img src="docs/resources/images/segmented-signals-plot.png" alt="SegmentedSignalsPlot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-abstract-result-interface" class="anchor" aria-hidden="true" href="#abstract-result-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abstract Result Interface</h2>
<p dir="auto">For every result data structure a few access functions have to be defined
(for details see <a href="https://modiasim.github.io/ModiaResult.jl/stable/AbstractInterface.html" rel="nofollow">Abstract Interface</a>).
Most importantly:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(timeSignal, signal, signalType) = ModiaResult.rawSignal(result, name)"><pre class="notranslate"><code>(timeSignal, signal, signalType) = ModiaResult.rawSignal(result, name)
</code></pre></div>
<p dir="auto">Given the result data structure <code>result</code> and a variable <code>name::AbstractString</code>,
return the result values of the independent variable (= <code>timeSignal</code>), the
corresponding result values of the variable (= <code>signal</code>) and the type
of the signal. The following figure sketches the returned <code>timeSignal</code> and <code>signal</code> data structures:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/resources/images/signal-definition.png"><img src="docs/resources/images/signal-definition.png" alt="SignalDefinition" style="max-width: 100%;"></a></p>
<p dir="auto">Other signal types might be mapped to this basic signal type by introducing views.</p>
<h2 dir="auto"><a id="user-content-main-developer" class="anchor" aria-hidden="true" href="#main-developer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main developer</h2>
<p dir="auto"><a href="https://rmc.dlr.de/sr/en/staff/martin.otter/" rel="nofollow">Martin Otter</a>,
<a href="https://www.dlr.de/sr/en" rel="nofollow">DLR - Institute of System Dynamics and Control</a></p>
</article></div>