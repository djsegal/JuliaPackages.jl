<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hyperparameters" class="anchor" aria-hidden="true" href="#hyperparameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hyperparameters</h1>
<p><a href="https://invenia.github.io/Hyperparameters.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://invenia.github.io/Hyperparameters.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Invenia/Hyperparameters.jl/actions?query=workflow%3ACI"><img src="https://github.com/Invenia/Hyperparameters.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/Hyperparameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ec5f70fae544d14f3b1b2dbc9b55b79d3d221c7e2d826cb6ef4c06233d969a06/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4879706572706172616d65746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/Hyperparameters.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A minimal utility for working with <a href="https://aws.amazon.com/sagemaker/" rel="nofollow">AWS Sagemaker</a> hyperparameters.
More broadly for dealing with environment variables.
Two key functions:</p>
<ul>
<li><code>hyperparam</code> reads the enviroment variable</li>
<li><code>report_hyperparameters</code> writes them to a JSON file, and logs them.</li>
</ul>
<p>For purposes of this example we have the following environment variables set:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;SM_HP_FOO&quot;] = &quot;1&quot;;
ENV[&quot;SM_HP_BAR&quot;] = &quot;2&quot;;
ENV[&quot;SM_HP_BAZ&quot;] = &quot;three&quot;;
ENV[&quot;SM_HP_QUX&quot;] = &quot;-3.14&quot;;
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SM_HP_FOO<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>;
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SM_HP_BAR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>;
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SM_HP_BAZ<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>;
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SM_HP_QUX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>-3.14<span class="pl-pds">"</span></span>;</pre></div>
<p>Sagemaker prefixes the environment variables it automatically defines for hyperparameters with <code>SM_HP_</code>.</p>
<h3><a id="user-content-accessing-hyper-parameters" class="anchor" aria-hidden="true" href="#accessing-hyper-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Hyper-parameters</h3>
<p>We can access an enviroment variable by name using <code>hyperparam</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; hyperparam(:foo)
1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hyperparam</span>(<span class="pl-c1">:foo</span>)
<span class="pl-c1">1</span></pre></div>
<p>We can tell it the type by passing that as the first argument:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; hyperparam(Float64, :bar)
2.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hyperparam</span>(Float64, <span class="pl-c1">:bar</span>)
<span class="pl-c1">2.0</span></pre></div>
<p>If we don't it defaults to trying in order: <code>Bool</code>, <code>Int</code>, <code>Float64</code> and finally falling back to assuming it is a <code>String</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; hyperparam(:baz)
&quot;three&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hyperparam</span>(<span class="pl-c1">:baz</span>)
<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-generating-a-report" class="anchor" aria-hidden="true" href="#generating-a-report"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generating a report</h3>
<p><code>report_hyperparameters(directory)</code> is used to output all the hyperparameters to the logs,
and write a file called <code>hyperparameters.json</code> into the directory.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FilePathsBase

julia&gt; report_hyperparameters(p&quot;.&quot;)
[info | Hyperparameters]: hyperparameters: baz=three
[info | Hyperparameters]: hyperparameters: bar=2.0
[info | Hyperparameters]: hyperparameters: qux=-3.14
[info | Hyperparameters]: hyperparameters: foo=1
[info | Hyperparameters]: Report: saving at ./hyperparameters.json
p&quot;./hyperparameters.json&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FilePathsBase

julia<span class="pl-k">&gt;</span> <span class="pl-c1">report_hyperparameters</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">p</span>"</span>.<span class="pl-pds">"</span></span>)
[info <span class="pl-k">|</span> Hyperparameters]<span class="pl-k">:</span> hyperparameters<span class="pl-k">:</span> baz<span class="pl-k">=</span>three
[info <span class="pl-k">|</span> Hyperparameters]<span class="pl-k">:</span> hyperparameters<span class="pl-k">:</span> bar<span class="pl-k">=</span><span class="pl-c1">2.0</span>
[info <span class="pl-k">|</span> Hyperparameters]<span class="pl-k">:</span> hyperparameters<span class="pl-k">:</span> qux<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">3.14</span>
[info <span class="pl-k">|</span> Hyperparameters]<span class="pl-k">:</span> hyperparameters<span class="pl-k">:</span> foo<span class="pl-k">=</span><span class="pl-c1">1</span>
[info <span class="pl-k">|</span> Hyperparameters]<span class="pl-k">:</span> Report<span class="pl-k">:</span> saving at <span class="pl-k">./</span>hyperparameters<span class="pl-k">.</span>json
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">p</span>"</span>./hyperparameters.json<span class="pl-pds">"</span></span></pre></div>
<p>The JSON file looks like:</p>
<div class="highlight highlight-source-json position-relative" data-snippet-clipboard-copy-content="{
    &quot;baz&quot;: &quot;three&quot;,
    &quot;bar&quot;: 2.0,
    &quot;qux&quot;: -3.14,
    &quot;foo&quot;: 1
}
"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>: <span class="pl-c1">2.0</span>,
    <span class="pl-s"><span class="pl-pds">"</span>qux<span class="pl-pds">"</span></span>: <span class="pl-c1">-3.14</span>,
    <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>
}</pre></div>
<p>Notice two key things:</p>
<ol>
<li>Even though <code>qux</code> was never accessed during our code, it is still saved as the environment variable existed with the right prefix. It's type was found with the same mechanism used if the type is not provided to <code>hyperparam</code>. Which determined it was a <code>Float64</code> (and not a <code>String</code>).</li>
<li>When we accessed <code>bar</code> passing in the type, that type was remembered, so even though the enviroment variables just contained <code>2</code>, the report correctly read <code>2.0</code></li>
</ol>
</article></div>