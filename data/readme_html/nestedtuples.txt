<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nestedtuples" class="anchor" aria-hidden="true" href="#nestedtuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NestedTuples</h1>
<p><a href="https://cscherrer.github.io/NestedTuples.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cscherrer.github.io/NestedTuples.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cscherrer/NestedTuples.jl/actions"><img src="https://github.com/cscherrer/NestedTuples.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cscherrer/NestedTuples.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/886fd359e7e7e5d231f5ebce6bdc2772e958e1fe5312fc5426c779b5fbd634bc/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f4e65737465645475706c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/NestedTuples.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p><code>NestedTuples</code> has some tools for making it easier to work with nested tuples and nested named tuples.</p>
<h1><a id="user-content-named-tuples-as-contexts" class="anchor" aria-hidden="true" href="#named-tuples-as-contexts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Named tuples as contexts</h1>
<p>We can do this with <code>@with</code>, similar to <a href="https://github.com/MasonProtter/StaticModules.jl">StaticModules.jl</a> (and identical syntax):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @with((x=1, y=2), x+y)
3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span>((x<span class="pl-k">=</span><span class="pl-c1">1</span>, y<span class="pl-k">=</span><span class="pl-c1">2</span>), x<span class="pl-k">+</span>y)
<span class="pl-c1">3</span></pre></div>
<p>These can also be nested, with good performance:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt = (x=1, y=(a=2, b=3))
(x = 1, y = (a = 2, b = 3))

julia&gt; @with nt begin
           x + @with y (a+b)
       end
6

julia&gt; @btime @with $nt begin
              x + @with y (a + b)
              end
  0.010 ns (0 allocations: 0 bytes)
6
"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">1</span>, y<span class="pl-k">=</span>(a<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span><span class="pl-c1">3</span>))
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> nt <span class="pl-k">begin</span>
           x <span class="pl-k">+</span> <span class="pl-c1">@with</span> y (a<span class="pl-k">+</span>b)
       <span class="pl-k">end</span>
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@with</span> <span class="pl-k">$</span>nt <span class="pl-k">begin</span>
              x <span class="pl-k">+</span> <span class="pl-c1">@with</span> y (a <span class="pl-k">+</span> b)
              <span class="pl-k">end</span>
  <span class="pl-c1">0.010</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">6</span></pre></div>
<p>Note that we haven't yet done any rigorous comparison to StaticModules. The main reason for the alternative implementation is that we already have GeneralizedGenerated.jl as a dependency, and leveraging this makes the new implementation very simple.</p>
<h1><a id="user-content-random-nested-tuples" class="anchor" aria-hidden="true" href="#random-nested-tuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random nested tuples</h1>
<p><code>randnt</code> is useful for testing. Here's a random nested tuple with width 2 and depth 3:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt = randnt(2,3)
(w = (d = (p = :p, l = :l), e = (m = :m, v = :v)), q = (y = (r = :r, o = :o), g = (y = :y, h = :h)))
"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">randnt</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)))</pre></div>
<h1><a id="user-content-schema" class="anchor" aria-hidden="true" href="#schema"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Schema</h1>
<p>Does what it says on the tin:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; schema(nt)
(w = (d = (p = Symbol, l = Symbol), e = (m = Symbol, v = Symbol)), q = (y = (r = Symbol, o = Symbol), g = (y = Symbol, h = Symbol)))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">schema</span>(nt)
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> Symbol, l <span class="pl-k">=</span> Symbol), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> Symbol, v <span class="pl-k">=</span> Symbol)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> Symbol, o <span class="pl-k">=</span> Symbol), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> Symbol, h <span class="pl-k">=</span> Symbol)))</pre></div>
<p><code>schema</code> is especially great for building generated functions on named tuples, because it works on types too:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; schema(typeof(nt))
(w = (d = (p = Symbol, l = Symbol), e = (m = Symbol, v = Symbol)), q = (y = (r = Symbol, o = Symbol), g = (y = Symbol, h = Symbol)))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">schema</span>(<span class="pl-c1">typeof</span>(nt))
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> Symbol, l <span class="pl-k">=</span> Symbol), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> Symbol, v <span class="pl-k">=</span> Symbol)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> Symbol, o <span class="pl-k">=</span> Symbol), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> Symbol, h <span class="pl-k">=</span> Symbol)))</pre></div>
<h1><a id="user-content-flatten" class="anchor" aria-hidden="true" href="#flatten"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Flatten</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; flatten(nt)
(:p, :l, :m, :v, :r, :o, :y, :h)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">flatten</span>(nt)
(<span class="pl-c1">:p</span>, <span class="pl-c1">:l</span>, <span class="pl-c1">:m</span>, <span class="pl-c1">:v</span>, <span class="pl-c1">:r</span>, <span class="pl-c1">:o</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:h</span>)</pre></div>
<h1><a id="user-content-recursive-map" class="anchor" aria-hidden="true" href="#recursive-map"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Recursive <code>map</code></h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rmap(String, nt)
(w = (d = (p = &quot;p&quot;, l = &quot;l&quot;), e = (m = &quot;m&quot;, v = &quot;v&quot;)), q = (y = (r = &quot;r&quot;, o = &quot;o&quot;), g = (y = &quot;y&quot;, h = &quot;h&quot;)))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rmap</span>(String, nt)
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, l <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>l<span class="pl-pds">"</span></span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>m<span class="pl-pds">"</span></span>, v <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>v<span class="pl-pds">"</span></span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>, o <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, h <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>h<span class="pl-pds">"</span></span>)))</pre></div>
<h1><a id="user-content-recursively-sort-keys" class="anchor" aria-hidden="true" href="#recursively-sort-keys"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Recursively sort keys</h1>
<p>Use <code>keysort</code> for this.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @btime keysort($nt)
  0.020 ns (0 allocations: 0 bytes)
(q = (g = (h = :h, y = :y), y = (o = :o, r = :r)), w = (d = (l = :l, p = :p), e = (m = :m, v = :v)))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">keysort</span>(<span class="pl-k">$</span>nt)
  <span class="pl-c1">0.020</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
(q <span class="pl-k">=</span> (g <span class="pl-k">=</span> (h <span class="pl-k">=</span> <span class="pl-c1">:h</span>, y <span class="pl-k">=</span> <span class="pl-c1">:y</span>), y <span class="pl-k">=</span> (o <span class="pl-k">=</span> <span class="pl-c1">:o</span>, r <span class="pl-k">=</span> <span class="pl-c1">:r</span>)), w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (l <span class="pl-k">=</span> <span class="pl-c1">:l</span>, p <span class="pl-k">=</span> <span class="pl-c1">:p</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)))</pre></div>
<h1><a id="user-content-lazy-merge" class="anchor" aria-hidden="true" href="#lazy-merge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lazy Merge</h1>
<p>Recursively merging named tuples can be expensive. <code>lazymerge(nt1, nt2)</code> creates a <code>LazyMerge</code> struct that behaves in the same way but can be much faster.</p>
<h1><a id="user-content-leaf-setter" class="anchor" aria-hidden="true" href="#leaf-setter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Leaf setter</h1>
<p><code>leaf_setter</code> takes a nested named tuple and builds a function that sets the values on the leaves.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = leaf_setter(nt)
function = (##777, ##778, ##779, ##780, ##781, ##782, ##783, ##784;) -&gt; begin
    begin
        (w = (d = (p = var&quot;##777&quot;, l = var&quot;##778&quot;), e = (m = var&quot;##779&quot;, v = var&quot;##780&quot;)), q = (y = (r = var&quot;##781&quot;, o = var&quot;##782&quot;), g = (y = var&quot;##783&quot;, h = var&quot;##784&quot;)))
    end
end

julia&gt; @btime $f(1:8...)
  0.020 ns (0 allocations: 0 bytes)
(w = (d = (p = 1, l = 2), e = (m = 3, v = 4)), q = (y = (r = 5, o = 6), g = (y = 7, h = 8)))
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">leaf_setter</span>(nt)
<span class="pl-k">function</span> <span class="pl-k">=</span> (<span class="pl-c"><span class="pl-c">#</span>#777, ##778, ##779, ##780, ##781, ##782, ##783, ##784;) -&gt; begin</span>
    <span class="pl-k">begin</span>
        (w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">var"##777"</span>, l <span class="pl-k">=</span> <span class="pl-c1">var"##778"</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">var"##779"</span>, v <span class="pl-k">=</span> <span class="pl-c1">var"##780"</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">var"##781"</span>, o <span class="pl-k">=</span> <span class="pl-c1">var"##782"</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">var"##783"</span>, h <span class="pl-k">=</span> <span class="pl-c1">var"##784"</span>)))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">f</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8.</span><span class="pl-k">..</span>)
  <span class="pl-c1">0.020</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">1</span>, l <span class="pl-k">=</span> <span class="pl-c1">2</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">3</span>, v <span class="pl-k">=</span> <span class="pl-c1">4</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">5</span>, o <span class="pl-k">=</span> <span class="pl-c1">6</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">7</span>, h <span class="pl-k">=</span> <span class="pl-c1">8</span>)))</pre></div>
<h1><a id="user-content-fold" class="anchor" aria-hidden="true" href="#fold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fold</h1>
<p><code>fold</code> is a "structural fold". You give it a function <code>f</code>, and the result will apply <code>f</code> at the leaves, and then combine leaves recursively also using <code>f</code>. It also allows an optional third argument as a <code>pre</code> function to be applied on the way down to the leaves. This is probably clearer from an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function example_fold(x) 
    pathsize = 10
    function pre(x, path)
        print(&quot;↓ path = &quot;)
        print(rpad(path, pathsize))
        println(&quot;value = &quot;, x)
        return x
    end 

    function f(x::Union{Tuple, NamedTuple}, path)
        print(&quot;↑ path = &quot;)
        print(rpad(path, pathsize))
        println(&quot;value = &quot;, x)
        return x
    end 

    function f(x, path)
        print(&quot;↑ path = &quot;)
        print(rpad(path, pathsize))
        print(&quot;value = &quot;, x)
        println(&quot; ←-- LEAF&quot;)
        return x
    end 

    fold(f, x, pre)
end

julia&gt; example_fold(nt)
↓ path = ()        value = (w = (d = (p = :p, l = :l), e = (m = :m, v = :v)), q = (y = (r = :r, o = :o), g = (y = :y, h = :h)))
↓ path = (:w,)     value = (d = (p = :p, l = :l), e = (m = :m, v = :v))
↓ path = (:w, :d)  value = (p = :p, l = :l)
↓ path = (:w, :d, :p)value = p
↑ path = (:w, :d, :p)value = p ←-- LEAF
↓ path = (:w, :d, :l)value = l
↑ path = (:w, :d, :l)value = l ←-- LEAF
↑ path = (:w, :d)  value = (p = :p, l = :l)
↓ path = (:w, :e)  value = (m = :m, v = :v)
↓ path = (:w, :e, :m)value = m
↑ path = (:w, :e, :m)value = m ←-- LEAF
↓ path = (:w, :e, :v)value = v
↑ path = (:w, :e, :v)value = v ←-- LEAF
↑ path = (:w, :e)  value = (m = :m, v = :v)
↑ path = (:w,)     value = (d = (p = :p, l = :l), e = (m = :m, v = :v))
↓ path = (:q,)     value = (y = (r = :r, o = :o), g = (y = :y, h = :h))
↓ path = (:q, :y)  value = (r = :r, o = :o)
↓ path = (:q, :y, :r)value = r
↑ path = (:q, :y, :r)value = r ←-- LEAF
↓ path = (:q, :y, :o)value = o
↑ path = (:q, :y, :o)value = o ←-- LEAF
↑ path = (:q, :y)  value = (r = :r, o = :o)
↓ path = (:q, :g)  value = (y = :y, h = :h)
↓ path = (:q, :g, :y)value = y
↑ path = (:q, :g, :y)value = y ←-- LEAF
↓ path = (:q, :g, :h)value = h
↑ path = (:q, :g, :h)value = h ←-- LEAF
↑ path = (:q, :g)  value = (y = :y, h = :h)
↑ path = (:q,)     value = (y = (r = :r, o = :o), g = (y = :y, h = :h))
↑ path = ()        value = (w = (d = (p = :p, l = :l), e = (m = :m, v = :v)), q = (y = (r = :r, o = :o), g = (y = :y, h = :h)))
(w = (d = (p = :p, l = :l), e = (m = :m, v = :v)), q = (y = (r = :r, o = :o), g = (y = :y, h = :h)))
"><pre><span class="pl-k">function</span> <span class="pl-en">example_fold</span>(x) 
    pathsize <span class="pl-k">=</span> <span class="pl-c1">10</span>
    <span class="pl-k">function</span> <span class="pl-en">pre</span>(x, path)
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>↓ path = <span class="pl-pds">"</span></span>)
        <span class="pl-c1">print</span>(<span class="pl-c1">rpad</span>(path, pathsize))
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>value = <span class="pl-pds">"</span></span>, x)
        <span class="pl-k">return</span> x
    <span class="pl-k">end</span> 

    <span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{Tuple, NamedTuple}</span>, path)
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>↑ path = <span class="pl-pds">"</span></span>)
        <span class="pl-c1">print</span>(<span class="pl-c1">rpad</span>(path, pathsize))
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>value = <span class="pl-pds">"</span></span>, x)
        <span class="pl-k">return</span> x
    <span class="pl-k">end</span> 

    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, path)
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>↑ path = <span class="pl-pds">"</span></span>)
        <span class="pl-c1">print</span>(<span class="pl-c1">rpad</span>(path, pathsize))
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>value = <span class="pl-pds">"</span></span>, x)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span> ←-- LEAF<span class="pl-pds">"</span></span>)
        <span class="pl-k">return</span> x
    <span class="pl-k">end</span> 

    <span class="pl-c1">fold</span>(f, x, pre)
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">example_fold</span>(nt)
↓ path <span class="pl-k">=</span> ()        value <span class="pl-k">=</span> (w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)))
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>,)     value <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>))
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>)  value <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:p</span>)value <span class="pl-k">=</span> p
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:p</span>)value <span class="pl-k">=</span> p ←<span class="pl-k">--</span> LEAF
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:l</span>)value <span class="pl-k">=</span> l
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:l</span>)value <span class="pl-k">=</span> l ←<span class="pl-k">--</span> LEAF
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:d</span>)  value <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>)  value <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:m</span>)value <span class="pl-k">=</span> m
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:m</span>)value <span class="pl-k">=</span> m ←<span class="pl-k">--</span> LEAF
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:v</span>)value <span class="pl-k">=</span> v
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:v</span>)value <span class="pl-k">=</span> v ←<span class="pl-k">--</span> LEAF
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>, <span class="pl-c1">:e</span>)  value <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:w</span>,)     value <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>))
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>,)     value <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>))
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>)  value <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:r</span>)value <span class="pl-k">=</span> r
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:r</span>)value <span class="pl-k">=</span> r ←<span class="pl-k">--</span> LEAF
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:o</span>)value <span class="pl-k">=</span> o
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:o</span>)value <span class="pl-k">=</span> o ←<span class="pl-k">--</span> LEAF
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:y</span>)  value <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>)  value <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>, <span class="pl-c1">:y</span>)value <span class="pl-k">=</span> y
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>, <span class="pl-c1">:y</span>)value <span class="pl-k">=</span> y ←<span class="pl-k">--</span> LEAF
↓ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>, <span class="pl-c1">:h</span>)value <span class="pl-k">=</span> h
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>, <span class="pl-c1">:h</span>)value <span class="pl-k">=</span> h ←<span class="pl-k">--</span> LEAF
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>, <span class="pl-c1">:g</span>)  value <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)
↑ path <span class="pl-k">=</span> (<span class="pl-c1">:q</span>,)     value <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>))
↑ path <span class="pl-k">=</span> ()        value <span class="pl-k">=</span> (w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)))
(w <span class="pl-k">=</span> (d <span class="pl-k">=</span> (p <span class="pl-k">=</span> <span class="pl-c1">:p</span>, l <span class="pl-k">=</span> <span class="pl-c1">:l</span>), e <span class="pl-k">=</span> (m <span class="pl-k">=</span> <span class="pl-c1">:m</span>, v <span class="pl-k">=</span> <span class="pl-c1">:v</span>)), q <span class="pl-k">=</span> (y <span class="pl-k">=</span> (r <span class="pl-k">=</span> <span class="pl-c1">:r</span>, o <span class="pl-k">=</span> <span class="pl-c1">:o</span>), g <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">:y</span>, h <span class="pl-k">=</span> <span class="pl-c1">:h</span>)))</pre></div>
</article></div>