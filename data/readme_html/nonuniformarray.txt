<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-raggedarraysjl" class="anchor" aria-hidden="true" href="#raggedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RaggedArrays.jl</h2>
<p dir="auto">This library handles the case of "array of arrays" where each subarray may have different lengths - but enforces
contiguity of data for ease of passing to outside linear algebra packages.</p>
<p dir="auto">There is not yet a versioned release of this package, so
use Pkg.clone("RaggedArrays"), rather than Pkg.add("RaggedArrays")
to retrieve a local copy.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using RaggedArrays;

#Create array of subarray sizes
sizes = [5,6,3,8,10,2];

#Allocate uninitialized RaggedArray.
A = RaggedArray(Float64,sizes);

#Set 2nd value in 3rd subarray
A[2,3] = 1.0;

#Whoops, error! 3rd subarray has length 3
A[4,3] = 1.0;


	#Get 3rd subarray as indexable object:
Asub = getsubarray(A,3);

#But if we want to operate on NArrays using e.g. BLAS we can, because all data is contiguous.
B = NArray(Float64,sizes);
AdotB = dot(A.data,B.data);

#This is useful if you have a complicated indexing 
#of an array from say an adaptive
#finite element computation, but at a high level 
#want to pass these arrays to a black-box Krylov solver."><pre class="notranslate"><code>using RaggedArrays;

#Create array of subarray sizes
sizes = [5,6,3,8,10,2];

#Allocate uninitialized RaggedArray.
A = RaggedArray(Float64,sizes);

#Set 2nd value in 3rd subarray
A[2,3] = 1.0;

#Whoops, error! 3rd subarray has length 3
A[4,3] = 1.0;


	#Get 3rd subarray as indexable object:
Asub = getsubarray(A,3);

#But if we want to operate on NArrays using e.g. BLAS we can, because all data is contiguous.
B = NArray(Float64,sizes);
AdotB = dot(A.data,B.data);

#This is useful if you have a complicated indexing 
#of an array from say an adaptive
#finite element computation, but at a high level 
#want to pass these arrays to a black-box Krylov solver.
</code></pre></div>
<h1 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h1>
<p dir="auto">I welcome any contributions to make RaggedArrays a better
and more widely useful package.</p>
<h1 dir="auto"><a id="user-content-further-reasoning" class="anchor" aria-hidden="true" href="#further-reasoning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Further Reasoning</h1>
<p dir="auto">Typically a 2D array will have <em>fixed</em> dimensions, for example in Julia we may write:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A = Array(Float64,(m,n));"><pre class="notranslate"><code>A = Array(Float64,(m,n));
</code></pre></div>
<p dir="auto">and it has the meaning: "Create a 2D array A of Float64s with m rows and n columns."</p>
<p dir="auto">It could also be read to mean:
"Create a 2D array A of Float64s with n columns, and each column has length m - while enforcing that data be contiguous
in memory."</p>
<p dir="auto">The contiguity part is important, because one often needs to pass blocks of memory to linear algebra routines which
assume contiguity.</p>
<p dir="auto">Data structures such as meshes in scientific computation are often held in tabular format rather than with
built in language features such as structs - there are many good (and bad) reasons for this, but for now
let's just take this as a given.</p>
<p dir="auto">This presents a challenge for complicated data structures however. Typically this is overcome by maintaining
two arrays: one array holds contiguous data, the other array tells the user how to index the first array - usually
in the form of offset values. This is an error prone process, so I have created a simple library to handle this common
situation.</p>
</article></div>