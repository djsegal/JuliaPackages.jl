<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-raggedarraysjl" class="anchor" aria-hidden="true" href="#raggedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RaggedArrays.jl</h2>
<p>This library handles the case of "array of arrays" where each subarray may have different lengths - but enforces
contiguity of data for ease of passing to outside linear algebra packages.</p>
<p>There is not yet a versioned release of this package, so
use Pkg.clone("RaggedArrays"), rather than Pkg.add("RaggedArrays")
to retrieve a local copy.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<pre><code>using RaggedArrays;

#Create array of subarray sizes
sizes = [5,6,3,8,10,2];

#Allocate uninitialized RaggedArray.
A = RaggedArray(Float64,sizes);

#Set 2nd value in 3rd subarray
A[2,3] = 1.0;

#Whoops, error! 3rd subarray has length 3
A[4,3] = 1.0;


	#Get 3rd subarray as indexable object:
Asub = getsubarray(A,3);

#But if we want to operate on NArrays using e.g. BLAS we can, because all data is contiguous.
B = NArray(Float64,sizes);
AdotB = dot(A.data,B.data);

#This is useful if you have a complicated indexing 
#of an array from say an adaptive
#finite element computation, but at a high level 
#want to pass these arrays to a black-box Krylov solver.
</code></pre>
<h1><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributing</h1>
<p>I welcome any contributions to make RaggedArrays a better
and more widely useful package.</p>
<h1><a id="user-content-further-reasoning" class="anchor" aria-hidden="true" href="#further-reasoning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Further Reasoning</h1>
<p>Typically a 2D array will have <em>fixed</em> dimensions, for example in Julia we may write:</p>
<pre><code>A = Array(Float64,(m,n));
</code></pre>
<p>and it has the meaning: "Create a 2D array A of Float64s with m rows and n columns."</p>
<p>It could also be read to mean:
"Create a 2D array A of Float64s with n columns, and each column has length m - while enforcing that data be contiguous
in memory."</p>
<p>The contiguity part is important, because one often needs to pass blocks of memory to linear algebra routines which
assume contiguity.</p>
<p>Data structures such as meshes in scientific computation are often held in tabular format rather than with
built in language features such as structs - there are many good (and bad) reasons for this, but for now
let's just take this as a given.</p>
<p>This presents a challenge for complicated data structures however. Typically this is overcome by maintaining
two arrays: one array holds contiguous data, the other array tells the user how to index the first array - usually
in the form of offset values. This is an error prone process, so I have created a simple library to handle this common
situation.</p>
</article></div>