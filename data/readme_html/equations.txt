<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/jhlq/Equations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9033d5a96baf8e809a33fc87dedb00ddb746412c6225ccfd5b96b595ec187e09/68747470733a2f2f7472617669732d63692e6f72672f6a686c712f4571756174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jhlq/Equations.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-equations" class="anchor" aria-hidden="true" href="#equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Equations</h1>
<p dir="auto">Calculate with symbols as numbers:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=":x+:y
:x*:y
:x/:y
:x^3
sqrt(:x)&amp;@equ x=y^2 # :y
simplify(:a/:a) # 1, so beware of cases where a=0
print(simplify((:a+:b)^2)) # a a + 2 a b + b b"><pre class="notranslate"><code>:x+:y
:x*:y
:x/:y
:x^3
sqrt(:x)&amp;@equ x=y^2 # :y
simplify(:a/:a) # 1, so beware of cases where a=0
print(simplify((:a+:b)^2)) # a a + 2 a b + b b
</code></pre></div>
<p dir="auto">Specify equations conveniently with the equ macros:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x=@equ x=a*b^sqrt(y)+c/d
x&amp;@equs(a=3, b=2, y=9, c=8, d=4)"><pre class="notranslate"><code>x=@equ x=a*b^sqrt(y)+c/d
x&amp;@equs(a=3, b=2, y=9, c=8, d=4)
</code></pre></div>
<p dir="auto">Operate on equations:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="tri=@equ c^2=a^2+b^2
print(sqrt(tri))
#c = √(a a + b b)"><pre class="notranslate"><code>tri=@equ c^2=a^2+b^2
print(sqrt(tri))
#c = √(a a + b b)
</code></pre></div>
<p dir="auto">Interpolate with $:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="b=3;@equ a=$b #:a ≖ 3
@equ P=Ten($(map(x-&gt;pi^x,1:3)),i)
@equs(e=$ℯ, pi=$pi, M=$(rand(3,2)))"><pre class="notranslate"><code>b=3;@equ a=$b #:a ≖ 3
@equ P=Ten($(map(x-&gt;pi^x,1:3)),i)
@equs(e=$ℯ, pi=$pi, M=$(rand(3,2)))
</code></pre></div>
<p dir="auto">Substitute with &amp; (see <a href="https://github.com/jhlq/Equations.jl/blob/master/test/plasmaTests.jl">the plasma tests</a> for real usage examples):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="energy=@equ E=m*c^2
c=@equ c=299792458
m=@equ m=3*n
n=@equ n=9
@assert (energy&amp;c&amp;m&amp;n).rhs == 3*9*299792458^2"><pre class="notranslate"><code>energy=@equ E=m*c^2
c=@equ c=299792458
m=@equ m=3*n
n=@equ n=9
@assert (energy&amp;c&amp;m&amp;n).rhs == 3*9*299792458^2
</code></pre></div>
<p dir="auto">&amp; also does pattern matching:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="print((Der(:x^:n,:x)-Der(-0.1*:x^:m,:x)+1/:a*Der(:a*sqrt(:x),:x))&amp;relations[&quot;Der&quot;])
#n Pow(x,n + (-1)) + 0.1 m Pow(x,m + (-1)) + 0.5 /(Pow(x,0.5))"><pre class="notranslate"><code>print((Der(:x^:n,:x)-Der(-0.1*:x^:m,:x)+1/:a*Der(:a*sqrt(:x),:x))&amp;relations["Der"])
#n Pow(x,n + (-1)) + 0.1 m Pow(x,m + (-1)) + 0.5 /(Pow(x,0.5))
</code></pre></div>
<p dir="auto">Write your own patterns as equations:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="relation=@equ Log(:a,:a)=1
Log(:e)&amp;relation
Log(9,9)&amp;relation
Log(:x+:y,:x+:y)&amp;relation"><pre class="notranslate"><code>relation=@equ Log(:a,:a)=1
Log(:e)&amp;relation
Log(9,9)&amp;relation
Log(:x+:y,:x+:y)&amp;relation
</code></pre></div>
<p dir="auto">Use the Oneable type for optional coefficients:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rel=@equ Oneable(a)*x*z=y
:q*:r&amp;rel"><pre class="notranslate"><code>rel=@equ Oneable(a)*x*z=y
:q*:r&amp;rel
</code></pre></div>
<p dir="auto">&amp; is overloaded to apply custom functions enabling chains of arbitrary behavior:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="eq=3*:x^2-5*:x+1.5 ≖ 0
meq=eq&amp;quadratic
@assert evaluate(eq.lhs,Dict(:x=&gt;meq[1].rhs))==0
f1(ex::Expression)=ex[1][1]
f2(fac::Factor)=3*fac
@assert (:a+:b)&amp;[f1,f2]==3*:a
f3(eq::Equation)=eq'
f4(eq::Equation)=sqrt(eq)
@equ(a=b^2)&amp;[f3,f4]"><pre class="notranslate"><code>eq=3*:x^2-5*:x+1.5 ≖ 0
meq=eq&amp;quadratic
@assert evaluate(eq.lhs,Dict(:x=&gt;meq[1].rhs))==0
f1(ex::Expression)=ex[1][1]
f2(fac::Factor)=3*fac
@assert (:a+:b)&amp;[f1,f2]==3*:a
f3(eq::Equation)=eq'
f4(eq::Equation)=sqrt(eq)
@equ(a=b^2)&amp;[f3,f4]
</code></pre></div>
<p dir="auto">Tensors are available! The summation convention applies automatically. See <a href="https://github.com/jhlq/Equations.jl/blob/master/examples/tensors.jl">the tensors file in examples</a> for usage.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Ten(:I,[:i,:i])&amp;@equ I=[1 0;0 1] # 2
Ten(:A,[:i,:i])&amp;@equ A=[:a 0;0 :b] # a+b
Ten(:A,:i)*Ten(:B,:j)&amp;@equs(A=[1,2,3],B=[3,2,1], j=i)
Ten(:A,[:j,:i,:i])*Ten(:B,:j)&amp;@equs(A=ones(3,3,3), B=[1,2,3]) # 18
Alt([:i,:j,:k])*Ten([:a1,:a2,:a3],:j)*Ten([:b1,:b2,:b3],:k)&amp;@equ i=1"><pre class="notranslate"><code>Ten(:I,[:i,:i])&amp;@equ I=[1 0;0 1] # 2
Ten(:A,[:i,:i])&amp;@equ A=[:a 0;0 :b] # a+b
Ten(:A,:i)*Ten(:B,:j)&amp;@equs(A=[1,2,3],B=[3,2,1], j=i)
Ten(:A,[:j,:i,:i])*Ten(:B,:j)&amp;@equs(A=ones(3,3,3), B=[1,2,3]) # 18
Alt([:i,:j,:k])*Ten([:a1,:a2,:a3],:j)*Ten([:b1,:b2,:b3],:k)&amp;@equ i=1
</code></pre></div>
<p dir="auto">To include units use the U type (sensitive to ordering, put unitless stuff last):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="l=U(:l,:meter);t=U(:t,:second);v=l/t;print(v)"><pre class="notranslate"><code>l=U(:l,:meter);t=U(:t,:second);v=l/t;print(v)
</code></pre></div>
<p dir="auto">Equations can also be constructed without macros (the ≖ is written as \eqcirc+tab) and results derived by checking for matches:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rule=Der(:a*:x,:x)≖:a # equivalent to Equation(Der(:a*:x,:x),:a)
ex=Der(3*:x,:x)
m=matches(ex,rule)[1] # equivalent to ex&amp;rule"><pre class="notranslate"><code>rule=Der(:a*:x,:x)≖:a # equivalent to Equation(Der(:a*:x,:x),:a)
ex=Der(3*:x,:x)
m=matches(ex,rule)[1] # equivalent to ex&amp;rule
</code></pre></div>
<p dir="auto">Simplification is automatic when using &amp; however sometimes has to be carried out manually:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="simplify((:x+:y)^3)
simplify(:x*:y/:x)
simplify(sqrt(:x*:z*:y*:z*:y*:x))"><pre class="notranslate"><code>simplify((:x+:y)^3)
simplify(:x*:y/:x)
simplify(sqrt(:x*:z*:y*:z*:y*:x))
</code></pre></div>
<p dir="auto">Equations have a left hand side (lhs) and a right hand side (rhs) that when omitted defaults to 0.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="eq=Equation(:x*:z+:y)
eq.rhs
matches(eq)
eq=Equation(:x^2,9)
matches(eq,Sqrt)"><pre class="notranslate"><code>eq=Equation(:x*:z+:y)
eq.rhs
matches(eq)
eq=Equation(:x^2,9)
matches(eq,Sqrt)
</code></pre></div>
<p dir="auto">If you try to evaluate an equation that has been constructed through division matching by setting one of the divided symbols to zero an error will be thrown:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="meq=matches(:x^2+:a*:x≖0,Div)[1]
evaluate(meq,Dict(:x=&gt;0))"><pre class="notranslate"><code>meq=matches(:x^2+:a*:x≖0,Div)[1]
evaluate(meq,Dict(:x=&gt;0))
</code></pre></div>
</article></div>