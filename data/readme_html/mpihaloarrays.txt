<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content---mpihaloarraysjl-" class="anchor" aria-hidden="true" href="#--mpihaloarraysjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" alt="MPIHaloArrays.jl" width="50" style="max-width: 100%;"></a> MPIHaloArrays.jl </h1>
<p dir="auto"><a href="https://smillerc.github.io/MPIHaloArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://smillerc.github.io/MPIHaloArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=MPIHaloArrays" rel="nofollow"><img src="https://camo.githubusercontent.com/063386674ef01587a77a6ea4229cd821dc7c550723c0e3dab5359fcf48a19327/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f4d504948616c6f417272617973" alt="Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/MPIHaloArrays" style="max-width: 100%;"></a>.</p>
<p dir="auto">MPIHaloArrays provides a high-level array type to facilitate halo, or ghost-cell exchanges commonly found in large-scale PDE codes. The <code>MPIHaloArray</code> type is a subtype of <code>AbstractArray</code>.</p>
<p dir="auto">Inspiration was taken from <a href="https://github.com/barche/MPIArrays.jl"><code>MPIArrays.jl</code></a> and <a href="https://github.com/eth-cscs/ImplicitGlobalGrid.jl"><code>ImplicitGlobalGrid.jl</code></a>. Domains can be decomposed into 1, 2, or 3D parallel topologies.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add MPIHaloArrays"><pre>pkg<span class="pl-k">&gt;</span> add MPIHaloArrays</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<ul dir="auto">
<li>[<a href="https://smillerc.github.io/MPIHaloArrays.jl/stable" rel="nofollow"><strong>STABLE</strong></a>] — <strong>most recently tagged version of the documentation.</strong></li>
<li>[<a href="https://smillerc.github.io/MPIHaloArrays.jl/dev" rel="nofollow"><strong>DEV</strong></a>] — <strong>most recent development version of the documentation.</strong></li>
</ul>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">Halo exchange is a common practice in large-scale PDE codes that decompose the domain into many sub-domains. Neighbor information is exchanged at regular intervals through "ghost" or "halo" cell regions. The image below shows an example from a 1D array that has a halo region of 3 cells.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/1d_halo.png"><img src="docs/src/assets/1d_halo.png" alt="MPIHaloArrays.jl" width="600" style="max-width: 100%;"></a></p>
<p dir="auto">Halo exchanges can be done in multiple dimensions. At the moment, <code>MPIHaloArrays.jl</code> limits this to 1-3D arrays, but this will be extended in the future. The example below shows how to set up the initial array, fill halo/domain cells, do a halo exchange, and more.</p>
<p dir="auto"><strong>Currently arrays are limited to 1, 2, or 3D. This will be addressed in future versions</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MPI, MPIHaloArrays

MPI.Init()
const comm = MPI.COMM_WORLD
const rank = MPI.Comm_rank(comm)
const nprocs = MPI.Comm_size(comm)
const root = 0

# Create the MPI topology
topo = CartesianTopology(comm, [4,4], # use a 4x4 decomposition
                         [true, true]) # periodic in both dimensions   

nhalo = 2 # Number of halo cells in each dimension (fixed for all dimensions)
N = 200

# create the array type; this pads the data on all sides with halo regions
x = MPIHaloArray(rand(N,N), topo, nhalo)

# fill all the halo regions with -1
fillhalo!(A, -1)

# fill the domain region with the current rank
filldomain!(A, rank)

# local (current rank) indexing works just like a normal array
A[1,1] .= 2.0

# Get the local/global indices of the _domain_ data (not including the halo cells)
ilo, ihi, jlo, jhi = local_domain_indices(x) # -&gt; useful for looping without going into halo regions

# Exchange data with neighbors
updatehalo!(x)

GC.gc()
MPI.Finalize()"><pre><span class="pl-k">using</span> MPI, MPIHaloArrays

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
<span class="pl-k">const</span> comm <span class="pl-k">=</span> MPI<span class="pl-k">.</span>COMM_WORLD
<span class="pl-k">const</span> rank <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_rank</span>(comm)
<span class="pl-k">const</span> nprocs <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_size</span>(comm)
<span class="pl-k">const</span> root <span class="pl-k">=</span> <span class="pl-c1">0</span>

<span class="pl-c"><span class="pl-c">#</span> Create the MPI topology</span>
topo <span class="pl-k">=</span> <span class="pl-c1">CartesianTopology</span>(comm, [<span class="pl-c1">4</span>,<span class="pl-c1">4</span>], <span class="pl-c"><span class="pl-c">#</span> use a 4x4 decomposition</span>
                         [<span class="pl-c1">true</span>, <span class="pl-c1">true</span>]) <span class="pl-c"><span class="pl-c">#</span> periodic in both dimensions   </span>

nhalo <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Number of halo cells in each dimension (fixed for all dimensions)</span>
N <span class="pl-k">=</span> <span class="pl-c1">200</span>

<span class="pl-c"><span class="pl-c">#</span> create the array type; this pads the data on all sides with halo regions</span>
x <span class="pl-k">=</span> <span class="pl-c1">MPIHaloArray</span>(<span class="pl-c1">rand</span>(N,N), topo, nhalo)

<span class="pl-c"><span class="pl-c">#</span> fill all the halo regions with -1</span>
<span class="pl-c1">fillhalo!</span>(A, <span class="pl-k">-</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> fill the domain region with the current rank</span>
<span class="pl-c1">filldomain!</span>(A, rank)

<span class="pl-c"><span class="pl-c">#</span> local (current rank) indexing works just like a normal array</span>
A[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">.=</span> <span class="pl-c1">2.0</span>

<span class="pl-c"><span class="pl-c">#</span> Get the local/global indices of the _domain_ data (not including the halo cells)</span>
ilo, ihi, jlo, jhi <span class="pl-k">=</span> <span class="pl-c1">local_domain_indices</span>(x) <span class="pl-c"><span class="pl-c">#</span> -&gt; useful for looping without going into halo regions</span>

<span class="pl-c"><span class="pl-c">#</span> Exchange data with neighbors</span>
<span class="pl-c1">updatehalo!</span>(x)

GC<span class="pl-k">.</span><span class="pl-c1">gc</span>()
MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<p dir="auto">Scatter and gather operations are also defined with <code>scatterglobal</code> and <code>gatherglobal</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="root = 0 # MPI rank to scatter from / gather to

# start with a global Base.Array type to decompose and scatter to each rank
ni = 512; nj = 256
A_global = reshape(1:ni*nj, ni, nj);

# scatter - this internally converts A_global to multiple halo arrays. This is why
#           the nhalo and topology types are needed
A_local = scatterglobal(A_global, root, nhalo, topology) # -&gt; returns a MPIHaloArray

# do some work...

# and now gather the decomposed domain and store on the root rank of choice
A_global_result = gatherglobal(A_local; root=root) # -&gt; returns a Base.Array"><pre>root <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-c"><span class="pl-c">#</span> MPI rank to scatter from / gather to</span>

<span class="pl-c"><span class="pl-c">#</span> start with a global Base.Array type to decompose and scatter to each rank</span>
ni <span class="pl-k">=</span> <span class="pl-c1">512</span>; nj <span class="pl-k">=</span> <span class="pl-c1">256</span>
A_global <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>ni<span class="pl-k">*</span>nj, ni, nj);

<span class="pl-c"><span class="pl-c">#</span> scatter - this internally converts A_global to multiple halo arrays. This is why</span>
<span class="pl-c"><span class="pl-c">#</span>           the nhalo and topology types are needed</span>
A_local <span class="pl-k">=</span> <span class="pl-c1">scatterglobal</span>(A_global, root, nhalo, topology) <span class="pl-c"><span class="pl-c">#</span> -&gt; returns a MPIHaloArray</span>

<span class="pl-c"><span class="pl-c">#</span> do some work...</span>

<span class="pl-c"><span class="pl-c">#</span> and now gather the decomposed domain and store on the root rank of choice</span>
A_global_result <span class="pl-k">=</span> <span class="pl-c1">gatherglobal</span>(A_local; root<span class="pl-k">=</span>root) <span class="pl-c"><span class="pl-c">#</span> -&gt; returns a Base.Array</span></pre></div>
<h2 dir="auto"><a id="user-content-setting-the-halo-exchange-dimensions" class="anchor" aria-hidden="true" href="#setting-the-halo-exchange-dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting the halo exchange dimensions</h2>
<p dir="auto">In some cases, you may want a multi-dimensional array that only does the halo exchange on a subset of the dimensions. For example, an array <code>U</code>, has dimensions <code>[[ρ, u, v, p], i, j]</code>, where <code>[i,j]</code> represent 2D grid coordinates and <code>[ρ, u, v, p]</code> are the density, x/y velocity, and pressure at each <code>[i,j]</code> coordinate. This can be done with the following syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MPI, MPIHaloArrays

MPI.Init()
const comm = MPI.COMM_WORLD
const rank = MPI.Comm_rank(comm)
const nprocs = MPI.Comm_size(comm)
const root = 0

U = zeros(4,128,128)

# Only 1 MPI rank, but the topology is 2D
topo = CartesianTopology(comm, (1,1), (true,true))

nhalo = 2
halo_dims = (2,3)
A = MPIHaloArray(U, topo, nhalo, halo_dims)

# This will fail b/c U is 3D and the topology is only 2D; you must
# specify the halo exchange in 2D
A = MPIHaloArray(U, topo, nhalo) # -&gt; ERROR: Mismatched topology dimensionality (2D) and halo region dimensions (3D)

"><pre><span class="pl-k">using</span> MPI, MPIHaloArrays

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
<span class="pl-k">const</span> comm <span class="pl-k">=</span> MPI<span class="pl-k">.</span>COMM_WORLD
<span class="pl-k">const</span> rank <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_rank</span>(comm)
<span class="pl-k">const</span> nprocs <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_size</span>(comm)
<span class="pl-k">const</span> root <span class="pl-k">=</span> <span class="pl-c1">0</span>

U <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">4</span>,<span class="pl-c1">128</span>,<span class="pl-c1">128</span>)

<span class="pl-c"><span class="pl-c">#</span> Only 1 MPI rank, but the topology is 2D</span>
topo <span class="pl-k">=</span> <span class="pl-c1">CartesianTopology</span>(comm, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">true</span>,<span class="pl-c1">true</span>))

nhalo <span class="pl-k">=</span> <span class="pl-c1">2</span>
halo_dims <span class="pl-k">=</span> (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
A <span class="pl-k">=</span> <span class="pl-c1">MPIHaloArray</span>(U, topo, nhalo, halo_dims)

<span class="pl-c"><span class="pl-c">#</span> This will fail b/c U is 3D and the topology is only 2D; you must</span>
<span class="pl-c"><span class="pl-c">#</span> specify the halo exchange in 2D</span>
A <span class="pl-k">=</span> <span class="pl-c1">MPIHaloArray</span>(U, topo, nhalo) <span class="pl-c"><span class="pl-c">#</span> -&gt; ERROR: Mismatched topology dimensionality (2D) and halo region dimensions (3D)</span>

</pre></div>
<p dir="auto"><strong>Note:</strong> The default behavior selects <strong>all</strong> dimensions to exchange halo data. You must provide the <code>halo_dims</code> tuple to override this.</p>
<h2 dir="auto"><a id="user-content-interoperability" class="anchor" aria-hidden="true" href="#interoperability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interoperability</h2>
<p dir="auto">Add physical units via <code>Unitful.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MPIHaloArrays, Unitful
data = rand(10,10) * u&quot;m&quot;
A = MPIHaloArray(data, topology, 2)"><pre><span class="pl-k">using</span> MPIHaloArrays, Unitful
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>
A <span class="pl-k">=</span> <span class="pl-c1">MPIHaloArray</span>(data, topology, <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Add uncertainty via <code>Measurements.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MPIHaloArrays, Unitful, Measurements
data = (rand(10,10) .± 0.1) * u&quot;m&quot;
A = MPIHaloArray(data, topology, 2)"><pre><span class="pl-k">using</span> MPIHaloArrays, Unitful, Measurements
data <span class="pl-k">=</span> (<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>) .± <span class="pl-c1">0.1</span>) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>
A <span class="pl-k">=</span> <span class="pl-c1">MPIHaloArray</span>(data, topology, <span class="pl-c1">2</span>)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">A slightly more useful example that performs 2D heat diffusion is shown <a href="docs/examples/04-diffusion2d.jl">here</a>. This shows how to</p>
<ul dir="auto">
<li>Scatter initial conditions from the root node to each MPI process with <code>scatterglobal()</code></li>
<li>Perform a stencil operation within the current <code>MPIHaloArray</code>. This looks like any other normal array loop, but the bounds are determined by the <code>MPIHaloArray</code> via <code>local_domain_indices()</code></li>
<li>Update halo cells / neighbor information. Periodic boundary conditions are also handled by the <code>CartesianTopology</code> type.</li>
<li>Gather results to the root node for plotting/output with <code>gatherglobal()</code></li>
</ul>
<h2 dir="auto"><a id="user-content-exported-functionstypes" class="anchor" aria-hidden="true" href="#exported-functionstypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported functions/types</h2>
<ul dir="auto">
<li><code>MPIHaloArray</code>: An array type that extends <code>AbstractArray</code> to provide MPI neighbor communication for halo or ghost cells</li>
<li><code>AbstractParallelTopology</code>, <code>CartesianTopology</code>: MPI Topology types to manage neighbor information</li>
<li><code>neighbor(), neighbors()</code>, <code>[i,j,k]lo_neighbor()</code>, <code>[i,j,k]hi_neighbor()</code>: Extract neighbors of the current MPI rank</li>
<li><code>lo_indices()</code>, <code>hi_indices()</code>: Local indices of the current MPIHaloArray. Used for loop limits that ignore halo regions</li>
<li><code>fillhalo!()</code>: Fill the halo cells with a scalar value</li>
<li><code>filldomain!()</code>: Fill the domain cells with a scalar value</li>
<li><code>updatehalo!()</code>: Perform neighbor communication / halo exchange</li>
<li><code>scatterglobal()</code>: Distribute/scatter a global array to multiple ranks - returns a local <code>MPIHaloArray</code> for each rank</li>
<li><code>gatherglobal()</code>: Gather <code>MPIHaloArray</code>s to a root MPI rank - returns an <code>AbstractArray</code> on the root node</li>
</ul>
</article></div>