<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-zlib" class="anchor" aria-hidden="true" href="#zlib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Zlib</h1>
<p dir="auto">Zlib bindings for Julia.</p>
<p dir="auto"><strong>Note:</strong> This library is currently maintained, but should be considered
deprecated in favor of <a href="https://github.com/BioJulia/Libz.jl">Libz.jl</a>, which is
in every way better.</p>
<p dir="auto">This library provides a <code>compress</code> and <code>decompress</code> function that work as
follows.</p>
<h3 dir="auto"><a id="user-content-basic-api" class="anchor" aria-hidden="true" href="#basic-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic API</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Compress data, ouputting a Vector{UInt8} where data is either a Vector{UInt8}
# or an AbstractString.
compress(data)

# Compress at a particular level in [1, 9]
compress(&quot;Hello world&quot;, 5)

# Decompress to a Vector{UInt8} where data is either a Vector{UInt8} or an
# AbstractString.
decompress(data)"><pre><span class="pl-c"><span class="pl-c">#</span> Compress data, ouputting a Vector{UInt8} where data is either a Vector{UInt8}</span>
<span class="pl-c"><span class="pl-c">#</span> or an AbstractString.</span>
<span class="pl-c1">compress</span>(data)

<span class="pl-c"><span class="pl-c">#</span> Compress at a particular level in [1, 9]</span>
<span class="pl-c1">compress</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello world<span class="pl-pds">"</span></span>, <span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> Decompress to a Vector{UInt8} where data is either a Vector{UInt8} or an</span>
<span class="pl-c"><span class="pl-c">#</span> AbstractString.</span>
<span class="pl-c1">decompress</span>(data)</pre></div>
<h3 dir="auto"><a id="user-content-stream-api" class="anchor" aria-hidden="true" href="#stream-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stream API</h3>
<p dir="auto">Incremental compression or decompression can be performed with the <code>Reader</code> and
<code>Writer</code> types which both derive <code>IO</code>, and can be used with most functions that
operate on streams.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Reader(io::IO, raw::Bool=false, bufsize::Int=4096)"><pre><span class="pl-c1">Reader</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, raw<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, bufsize<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">4096</span>)</pre></div>
<ul dir="auto">
<li><code>io</code> source from which compressed data should be read</li>
<li><code>raw</code> true if the data is in the raw deflate format.</li>
<li><code>bufsize</code> how much input data to operate on at a time</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Writer(io::IO, level::Integer, gzip::Bool=false, raw::Bool=false)"><pre><span class="pl-c1">Writer</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, level<span class="pl-k">::</span><span class="pl-c1">Integer</span>, gzip<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, raw<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<ul dir="auto">
<li><code>io</code> source to which compressed data should be written</li>
<li><code>level</code> compression level in <code>[1,9]</code></li>
<li><code>gzip</code> true if output should be in the gzip format</li>
<li><code>raw</code> true if output is in the raw deflate format.</li>
</ul>
<h3 dir="auto"><a id="user-content-crc32" class="anchor" aria-hidden="true" href="#crc32"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>crc32</h3>
<p dir="auto"><code>crc32(data::Vector{UInt8}, crc::Integer=0)</code>
<code>crc32(data::AbstractString, crc::Integer=0)</code></p>
<p dir="auto">Compute and return the 32-bit cycle redundancy check on <code>data</code>, updating a
running value <code>crc</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# E.g.
crc32(&quot;hello&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> E.g.</span>
<span class="pl-c1">crc32</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="0x3610a686"><pre class="notranslate"><code>0x3610a686
</code></pre></div>
</article></div>