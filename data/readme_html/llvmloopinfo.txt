<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-llvmloopinfo" class="anchor" aria-hidden="true" href="#llvmloopinfo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LLVMLoopInfo</h1>
<p dir="auto"><a href="https://github.com/chriselrod/LLVMLoopInfo.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/chriselrod/LLVMLoopInfo.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chriselrod/LLVMLoopInfo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/93bdade6a93a82e23f76e32a0674559b229c57b7de4b47b6c537ef982de3430e/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f4c4c564d4c6f6f70496e666f2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chriselrod/LLVMLoopInfo.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">See <a href="https://llvm.org/docs/TransformMetadata.html#transformation-metadata" rel="nofollow">LLVM's docs</a> for info on loop info.
Julia allows specifying loop info, but doesn't have a convenient API for doing so. This package aims to provide one.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LLVMLoopInfo, LoopVectorization, BenchmarkTools

x = rand(31);
y = rand(31);

function fmdot(x,y) # set the baseline
  s = zero(Base.promote_eltype(x,y))
  for i = eachindex(x,y)
    @inbounds @fastmath s += x[i]*y[i]
  end
  s
end
function simddot(x,y) # set the baseline
  s = zero(Base.promote_eltype(x,y))
  @inbounds @simd for i = eachindex(x,y)
    s += x[i]*y[i]
  end
  s
end
function lvdot(x,y) # set the baseline
  s = zero(Base.promote_eltype(x,y))
  @turbo for i = eachindex(x,y)
    s += x[i]*y[i]
  end
  s
end
function vpdot(x,y)
  s = zero(Base.promote_eltype(x,y))
  # generate single loop body and mask it
  @loopinfo predicate for i = eachindex(x,y)
    @inbounds @fastmath s += x[i]*y[i]
  end
  s
end
function v8dot(x,y)
  s = zero(Base.promote_eltype(x,y))
  # use a 8 elements/SIMD vector
  @loopinfo vectorwidth=8 for i = eachindex(x,y)
    @inbounds @fastmath s += x[i]*y[i]
  end
  s
end
function v8preddot(x,y) # can add multiple loop info
  s = zero(Base.promote_eltype(x,y))
  # generate single loop body and mask it
  @loopinfo vectorwidth=8 predicate for i = eachindex(x,y)
    @inbounds @fastmath s += x[i]*y[i]
  end
  s
end
function u1dot(x,y)
  s = zero(Base.promote_eltype(x,y))
  # unroll count = 1
  @loopinfo unrollcount=1 for i = eachindex(x,y)
    @fastmath @inbounds s += x[i]*y[i]
  end
  s
end
function udot(x,y)
  s = zero(Base.promote_eltype(x,y))
  # unroll
  @loopinfo unroll for i = eachindex(x,y)
    @fastmath @inbounds s += x[i]*y[i]
  end
  s
end
function noudot(x,y)
  s = zero(Base.promote_eltype(x,y))
  # don't unroll
  @loopinfo unroll=false for i = eachindex(x,y)
    @fastmath @inbounds s += x[i]*y[i]
  end
  s
end

@btime fmdot($x,$y)
@btime simddot($x,$y)
@btime lvdot($x,$y)
@btime vpdot($x,$y)
@btime v8dot($x,$y)
@btime v8preddot($x,$y)
@btime u1dot($x,$y)
@btime udot($x,$y)
@btime noudot($x,$y)"><pre><span class="pl-k">using</span> LLVMLoopInfo, LoopVectorization, BenchmarkTools

x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">31</span>);
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">31</span>);

<span class="pl-k">function</span> <span class="pl-en">fmdot</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> set the baseline</span>
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@fastmath</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">simddot</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> set the baseline</span>
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c1">@inbounds</span> <span class="pl-c1">@simd</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">lvdot</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> set the baseline</span>
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c1">@turbo</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">vpdot</span>(x,y)
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> generate single loop body and mask it</span>
  <span class="pl-c1">@loopinfo</span> predicate <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@fastmath</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">v8dot</span>(x,y)
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> use a 8 elements/SIMD vector</span>
  <span class="pl-c1">@loopinfo</span> vectorwidth<span class="pl-k">=</span><span class="pl-c1">8</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@fastmath</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">v8preddot</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> can add multiple loop info</span>
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> generate single loop body and mask it</span>
  <span class="pl-c1">@loopinfo</span> vectorwidth<span class="pl-k">=</span><span class="pl-c1">8</span> predicate <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@fastmath</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">u1dot</span>(x,y)
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> unroll count = 1</span>
  <span class="pl-c1">@loopinfo</span> unrollcount<span class="pl-k">=</span><span class="pl-c1">1</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@fastmath</span> <span class="pl-c1">@inbounds</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">udot</span>(x,y)
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> unroll</span>
  <span class="pl-c1">@loopinfo</span> unroll <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@fastmath</span> <span class="pl-c1">@inbounds</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">noudot</span>(x,y)
  s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Base<span class="pl-k">.</span><span class="pl-c1">promote_eltype</span>(x,y))
  <span class="pl-c"><span class="pl-c">#</span> don't unroll</span>
  <span class="pl-c1">@loopinfo</span> unroll<span class="pl-k">=</span><span class="pl-c1">false</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x,y)
    <span class="pl-c1">@fastmath</span> <span class="pl-c1">@inbounds</span> s <span class="pl-k">+=</span> x[i]<span class="pl-k">*</span>y[i]
  <span class="pl-k">end</span>
  s
<span class="pl-k">end</span>

<span class="pl-c1">@btime</span> <span class="pl-c1">fmdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">simddot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">lvdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">vpdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">v8dot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">v8preddot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">u1dot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">udot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
<span class="pl-c1">@btime</span> <span class="pl-c1">noudot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)</pre></div>
<p dir="auto">Sample result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime fmdot($x,$y)
  14.898 ns (0 allocations: 0 bytes)
7.074580745671837

julia&gt; @btime simddot($x,$y)
  15.143 ns (0 allocations: 0 bytes)
7.074580745671837

julia&gt; @btime lvdot($x,$y)
  7.471 ns (0 allocations: 0 bytes)
7.074580745671838

julia&gt; @btime vpdot($x,$y)
  9.268 ns (0 allocations: 0 bytes)
7.074580745671838

julia&gt; @btime v8dot($x,$y)
  20.499 ns (0 allocations: 0 bytes)
7.074580745671838

julia&gt; @btime v8preddot($x,$y)
  7.488 ns (0 allocations: 0 bytes)
7.074580745671838

julia&gt; @btime u1dot($x,$y)
  8.240 ns (0 allocations: 0 bytes)
7.074580745671837

julia&gt; @btime udot($x,$y)
  11.746 ns (0 allocations: 0 bytes)
7.074580745671838

julia&gt; @btime noudot($x,$y)
  8.239 ns (0 allocations: 0 bytes)
7.074580745671837

julia&gt; versioninfo()
Julia Version 1.10.0-DEV.1119
Commit 960870e3c6 (2023-04-26 07:43 UTC)
Platform Info:
  OS: Linux (x86_64-generic-linux)
  CPU: 28 × Intel(R) Core(TM) i9-9940X CPU @ 3.30GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-14.0.6 (ORCJIT, skylake-avx512)
  Threads: 28 on 28 virtual cores"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">fmdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">14.898</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671837</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">simddot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">15.143</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671837</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">lvdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">7.471</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">vpdot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">9.268</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">v8dot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">20.499</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">v8preddot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">7.488</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">u1dot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">8.240</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671837</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">udot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">11.746</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">noudot</span>(<span class="pl-k">$</span>x,<span class="pl-k">$</span>y)
  <span class="pl-c1">8.239</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">7.074580745671837</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">versioninfo</span>()
Julia Version <span class="pl-c1">1.10</span>.<span class="pl-c1">0</span><span class="pl-k">-</span>DEV.<span class="pl-c1">1119</span>
Commit <span class="pl-c1">960870e3</span>c6 (<span class="pl-c1">2023</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">26</span> <span class="pl-c1">07</span><span class="pl-k">:</span><span class="pl-c1">43</span> UTC)
Platform Info<span class="pl-k">:</span>
  OS<span class="pl-k">:</span> Linux (x86_64<span class="pl-k">-</span>generic<span class="pl-k">-</span>linux)
  CPU<span class="pl-k">:</span> <span class="pl-c1">28</span> <span class="pl-k">×</span> <span class="pl-c1">Intel</span>(R) <span class="pl-c1">Core</span>(TM) i9<span class="pl-k">-</span><span class="pl-c1">9940</span>X CPU @ <span class="pl-c1">3.30</span>GHz
  WORD_SIZE<span class="pl-k">:</span> <span class="pl-c1">64</span>
  LIBM<span class="pl-k">:</span> libopenlibm
  LLVM<span class="pl-k">:</span> libLLVM<span class="pl-k">-</span><span class="pl-c1">14.0</span>.<span class="pl-c1">6</span> (ORCJIT, skylake<span class="pl-k">-</span>avx512)
  Threads<span class="pl-k">:</span> <span class="pl-c1">28</span> on <span class="pl-c1">28</span> virtual cores</pre></div>
<p dir="auto">Options include <code>:vectorize</code>, <code>:predicate</code> (implies <code>:vectorize</code>), and more.
See</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@less LLVMLoopInfo.map_symbol(:unroll, 1)"><pre><span class="pl-c1">@less</span> LLVMLoopInfo<span class="pl-k">.</span><span class="pl-c1">map_symbol</span>(<span class="pl-c1">:unroll</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">to see all the automatically expanded options. Note you can manually specify</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  @loopinfo var&quot;llvm.loop.unroll.count&quot;=4 for ..."><pre>  <span class="pl-c1">@loopinfo</span> <span class="pl-c1">var"llvm.loop.unroll.count"</span><span class="pl-k">=</span><span class="pl-c1">4</span> <span class="pl-k">for</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">if an option isn't available. If something you're looking for is missing, please file a PR.</p>
<p dir="auto">Explanation on the above example:
The CPU I'm benchmarking on has AVX512. By default, LLVM will create two loops:</p>
<ol dir="auto">
<li>An unrolled and vectorized loop. It'll unroll by 4x, and use 256 bit vectors (even though the CPU has AVX512). A 256 bit vector can hold 4x <code>Float64</code>.</li>
<li>A scalar epilogue loop.</li>
</ol>
<p dir="auto">I'm evaluating the dot product on vectors of length 31. Thus, it'll be evaluated with 1 iteration of the first loop (covering 4*4=16 iterations), and then 15 iterations of the scalar loop.
This is what happens with the <code>fmdot</code> and <code>simddot</code> loops.</p>
<p dir="auto">Enabling predicates will instead create a single not-unrolled vector loop, that masks excess iterations. <code>vpdot</code> will thus evaluate this loop 8 times, using masked operations in case it overshoots (which it does on the last iteration). This is much faster, as we don't have the long scalar epilogue.</p>
<p dir="auto">Setting the vector width to 8 means that each iteration of the unrolled and vectorized loop will cover 4*8 = 32 iterations. However, our loop is only 31 iterations total. In other words, setting a vector width of 8 means we end up doing 0 vector iterations and 31 scalar epilogue iterations. This is thus slow.</p>
<p dir="auto">Enabling vector width of 8 and predication means we instead do 4 masked vector iterations. This is fast, and ties with <code>LoopVectorization.jl</code>'s <code>@turbo</code>, which also uses predication and masking (but <code>@turbo</code> also unrolls, and will thus be faster when we have higher trip counts).</p>
<p dir="auto"><code>unrollcount=1</code> means we unroll only once, as does <code>unroll=false</code>. With a vector width of <code>4</code>, these mean we have 7 unmasked vector iterations, followed by 3 scalar iterations.</p>
<p dir="auto">Setting <code>unroll=true</code> generates some nasty looking assembly full of shuffles. Performance is better than I'd have thought, perhaps because it does vectorize the epilogue.</p>
</article></div>