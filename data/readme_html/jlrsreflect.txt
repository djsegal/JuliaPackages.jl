<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jlrsreflect" class="anchor" aria-hidden="true" href="#jlrsreflect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JlrsReflect</h1>
<p><a href="https://travis-ci.com/Taaitaaiger/JlrsReflect.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5625b5f8bc15b9eb99f0203dcc964c939971933a6dc5f6634036e0aee9552e30/68747470733a2f2f7472617669732d63692e636f6d2f54616169746161696765722f4a6c72735265666c6563742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Taaitaaiger/JlrsReflect.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Taaitaaiger/JlrsReflect.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6830cb04ff583f72e0dbe03488bfc6657864a7291218329c0958d2e02fd788f/68747470733a2f2f636f6465636f762e696f2f67682f54616169746161696765722f4a6c72735265666c6563742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Taaitaaiger/JlrsReflect.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>One of the main features of jlrs is the possibility to easily convert data from Julia to Rust. By default only a few builtin types, like integers, arrays and modules are available, but this can be extended by using the <code>JuliaStruct</code> derive macro. One annoying aspect of this macro is that you need to figure out the correct layout first.</p>
<p>With JlrsReflect.jl you can automatically generate the appropriate bindings for many Julia types if you're using Julia 1.5. This includes types with unions, tuples, and type parameters. Even value types are not a problem because the bindings only contain type parameters that directly affect the layout. If a field contains pointers, featureful wrappers from jlrs with reasonable lifetimes are used. Two things that are not supported are structs with union or tuple fields that depend on a type parameter (eg <code>struct SomeGenericStruct{T} a::Tuple{Int32, T} end</code>, <code>SomeGenericStruct{T} a::Union{Int32, T} end</code>), and unions used as generic parameters (eg <code>SomeGenericStruct{Union{A,B}}</code>).</p>
<p>You can use this package by calling the <code>reflect</code> function with a <code>Vector</code> of types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct TypeA
    ...fields
end

struct TypeB{T}
    ...fields
end

...

bindings = JlrsReflect.reflect([TypeA, TypeB, ...]);

# Print bindings to standard output
println(bindings)

# Write bindings to file
open(&quot;julia_bindings.rs&quot;, &quot;w&quot;) do f
    write(f, bindings)
end
"><pre><span class="pl-k">struct</span> TypeA
    <span class="pl-k">...</span>fields
<span class="pl-k">end</span>

<span class="pl-k">struct</span> TypeB{T}
    <span class="pl-k">...</span>fields
<span class="pl-k">end</span>

<span class="pl-k">...</span>

bindings <span class="pl-k">=</span> JlrsReflect<span class="pl-k">.</span><span class="pl-c1">reflect</span>([TypeA, TypeB, <span class="pl-k">...</span>]);

<span class="pl-c"><span class="pl-c">#</span> Print bindings to standard output</span>
<span class="pl-c1">println</span>(bindings)

<span class="pl-c"><span class="pl-c">#</span> Write bindings to file</span>
<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>julia_bindings.rs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">write</span>(f, bindings)
<span class="pl-k">end</span></pre></div>
<p>Bindings for types used as fields and type parameters are automatically generated. If you want or need to rename structs or their fields you can use <code>renamestruct!</code> and <code>renamefields!</code> as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bindings = JlrsReflect.reflect([TypeA, TypeB, ...])
renamestruct!(bindings, TypeA, &quot;StructA&quot;)
renamefields!(bindings, TypeB, [:fielda =&gt; &quot;field_a&quot;, :fieldb =&gt; &quot;field_b&quot;])
"><pre>bindings <span class="pl-k">=</span> JlrsReflect<span class="pl-k">.</span><span class="pl-c1">reflect</span>([TypeA, TypeB, <span class="pl-k">...</span>])
<span class="pl-c1">renamestruct!</span>(bindings, TypeA, <span class="pl-s"><span class="pl-pds">"</span>StructA<span class="pl-pds">"</span></span>)
<span class="pl-c1">renamefields!</span>(bindings, TypeB, [<span class="pl-c1">:fielda</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>field_a<span class="pl-pds">"</span></span>, <span class="pl-c1">:fieldb</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>field_b<span class="pl-pds">"</span></span>])</pre></div>
</article></div>