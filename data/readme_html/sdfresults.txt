<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sdfresults" class="anchor" aria-hidden="true" href="#sdfresults"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SDFResults</h1>
<p><a href="https://SebastianM-C.github.io/SDFResults.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://SebastianM-C.github.io/SDFResults.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/SebastianM-C/SDFResults.jl/actions"><img src="https://github.com/SebastianM-C/SDFResults.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SebastianM-C/SDFResults.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0d75e755f7f8e0cb30cba47a0ca532735afed255f1d58ec22ce16b38127fe8a3/68747470733a2f2f636f6465636f762e696f2f67682f53656261737469616e4d2d432f534446526573756c74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/SebastianM-C/SDFResults.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="https://www.tidyverse.org/lifecycle/#experimental" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a></p>
<p><a href="https://cfsa-pmw.warwick.ac.uk/mediawiki/index.php/EPOCH:FAQ" rel="nofollow">EPOCH</a> is a code for plasma physics simulations using the Particle-in-Cell method. The simulation results are written is <code>.sdf</code> binary files. Several readers for this files are available at <a href="https://cfsa-pmw.warwick.ac.uk/SDF" rel="nofollow">https://cfsa-pmw.warwick.ac.uk/SDF</a>.
This package intends to help users read and analyse EPOCH simulations.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>Install the package using</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="]add SDFResults
"><pre><code>]add SDFResults
</code></pre></div>
<p>Assuming that you have a folder with <code>.sdf</code> files generated from
an EPOCH simulation, use <code>read_simulation</code> to read the metadata
for the simulation. You can index into the resulting object and access
individual simulation files. Note that by default EPOCH starts indexing
form 0, while in Julia we usually start from 1.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SDFReader

dir = &quot;my_simulation&quot;
sim = read_simulation(dir)
sim[1] # corresponds to the first sdf file (usually 0000.sdf).
"><pre><span class="pl-k">using</span> SDFReader

dir <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>my_simulation<span class="pl-pds">"</span></span>
sim <span class="pl-k">=</span> <span class="pl-c1">read_simulation</span>(dir)
sim[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> corresponds to the first sdf file (usually 0000.sdf).</span></pre></div>
<p>With the <code>keys</code> function you can observe what data was saved in the
simulation. The symbols correspond to the names used for the
saved variables. Note that some identifiers used by EPOCH, such
as the ones for species properties are not valid julia symbols
(such as <code>px/electron</code>), so instead you can use strings (e.g. <code>"px/electron"</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="keys(sim[1])
"><pre><span class="pl-c1">keys</span>(sim[<span class="pl-c1">1</span>])</pre></div>
<p>In order to read the data for scalar field quantities such as <code>:ex</code> or <code>"px/electron"</code>,
you can simply index into the file</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="file = sim[1]
Ex = file[:ex]
"><pre>file <span class="pl-k">=</span> sim[<span class="pl-c1">1</span>]
Ex <span class="pl-k">=</span> file[<span class="pl-c1">:ex</span>]</pre></div>
<p>The returned object will be a <code>ScalarField</code> (or <code>ScalarVariable</code> for the components
of particle variables such as <code>"px/electron"</code>) and will contain the information
regarding the data (with units via <a href="https://github.com/PainterQubits/Unitful.jl/">Unitful.jl</a>)
and the corresponding coordinate values.
These objects are <code>AbstractArrays</code> and via indexing you can access the stored values.</p>
<p>You can use broadcasting to compute derived quantities. For example, to compute the
x component of the angular momentum you can simply use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function compute_Lx(file)
    w, r, py, pz = file[&quot;weight/electron&quot;,
                        &quot;grid/electron&quot;,
                        &quot;py/electron&quot;,
                        &quot;pz/electron&quot;]

    y = r[2]
    z = r[3]
    Lx = @. w * (y * pz - z * py)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">compute_Lx</span>(file)
    w, r, py, pz <span class="pl-k">=</span> file[<span class="pl-s"><span class="pl-pds">"</span>weight/electron<span class="pl-pds">"</span></span>,
                        <span class="pl-s"><span class="pl-pds">"</span>grid/electron<span class="pl-pds">"</span></span>,
                        <span class="pl-s"><span class="pl-pds">"</span>py/electron<span class="pl-pds">"</span></span>,
                        <span class="pl-s"><span class="pl-pds">"</span>pz/electron<span class="pl-pds">"</span></span>]

    y <span class="pl-k">=</span> r[<span class="pl-c1">2</span>]
    z <span class="pl-k">=</span> r[<span class="pl-c1">3</span>]
    Lx <span class="pl-k">=</span> <span class="pl-c1">@.</span> w <span class="pl-k">*</span> (y <span class="pl-k">*</span> pz <span class="pl-k">-</span> z <span class="pl-k">*</span> py)
<span class="pl-k">end</span></pre></div>
<p>You can also acces the (simulation) time corresponding to a file with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="get_time(file)
"><pre><span class="pl-c1">get_time</span>(file)</pre></div>
<p>and also the parameters from the <code>input.deck</code> file with <code>get_parameter</code>.
The <code>input.deck</code> parser only supports simple <code>key=value</code> expressions (no arithmetic operations or function calls).
You can also access nested values by providing a second argument.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="nx = get_parameter(file, :nx)
λ = get_parameter(file, :laser, :lambda)
"><pre>nx <span class="pl-k">=</span> <span class="pl-c1">get_parameter</span>(file, <span class="pl-c1">:nx</span>)
λ <span class="pl-k">=</span> <span class="pl-c1">get_parameter</span>(file, <span class="pl-c1">:laser</span>, <span class="pl-c1">:lambda</span>)</pre></div>
</article></div>