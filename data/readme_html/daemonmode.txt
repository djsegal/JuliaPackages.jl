<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-daemonmode" class="anchor" aria-hidden="true" href="#daemonmode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DaemonMode</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/dmolina/DaemonMode.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/dmolina/DaemonMode.jl/workflows/Run%20tests/badge.svg" alt="Build Status with Github Action" style="max-width: 100%;"></a>
<a href="https://dmolina.github.io/DaemonMode.jl/dev/" rel="nofollow"><img src="https://github.com/dmolina/DaemonMode.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/276341198" rel="nofollow"><img src="https://camo.githubusercontent.com/8266726f5dc5171b8fb20d6044c8bfa62f496307929ae5f92341f96343582108/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3237363334313139382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/276341198.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h1>
<p dir="auto">Julia is a great language, but the Just-in-Time compiler implies that loading a package could takes a considerable time, this is called the <em>first plot problem</em>.</p>
<p dir="auto">It is true that this time is only required for the first time (and there are options, like using and the package <a href="https://github.com/timholy/Revise.jl">Revise</a>). However, it is a great disadvantage when we want to use Julia to create small scripts.</p>
<p dir="auto">This package solves that problem. Inspired by the daemon-mode of Emacs, this
package uses a server/client model. This allows julia to run scripts a lot
faster, because the package is maintained in memory between the runs of (to run
the same script several times).</p>
<h1 dir="auto"><a id="user-content-introduced-in-juliacon-2020" class="anchor" aria-hidden="true" href="#introduced-in-juliacon-2020"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduced in JuliaCon 2020</h1>
<p dir="auto">This package has been mentioned in JuliaCon 2020, Thank you, Fredrik Ekre!</p>
<p dir="auto"><a href="https://www.youtube.com/watch?v=IuwxE3m0_QQ" rel="nofollow"><img src="https://camo.githubusercontent.com/7a79665ab568eb79f3c5b72ad5b51352c712cd81bbd1527777b89f07010672dc/68747470733a2f2f646d6f6c696e612e6769746875622e696f2f4461656d6f6e4d6f64652e6a6c2f6465762f6173736574732f6a756c6961636f6e2e706e67" alt="DaemonMode in JuliaCon" data-canonical-src="https://dmolina.github.io/DaemonMode.jl/dev/assets/juliacon.png" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-presented-in-juliacon-2021" class="anchor" aria-hidden="true" href="#presented-in-juliacon-2021"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Presented in JuliaCon 2021</h1>
<p dir="auto">I gave a talk <em>Faster scripts in Julia with DaemonMode.jl</em>
about the package and its advantages in the JuliaCon 2021 in the <a href="https://pretalx.com/juliacon2021/talk/KJNRGA/" rel="nofollow">Talk in
JuliaCon 2021</a>. Now it is online at:
<a href="https://www.youtube.com/watch?v=wCkuXAdE8E0" rel="nofollow"><img src="https://camo.githubusercontent.com/b0e842178ec8cc013645c7f24986e1de224629efde42ea0c5beba34c76b7295b/68747470733a2f2f646d6f6c696e612e6769746875622e696f2f4461656d6f6e4d6f64652e6a6c2f6465762f6173736574732f6a756c6961636f6e323032312e706e67" alt="Faster scripts in Julia with DaemonMode.jl" data-canonical-src="https://dmolina.github.io/DaemonMode.jl/dev/assets/juliacon2021.png" style="max-width: 100%;"></a>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<ul dir="auto">
<li>
<p dir="auto">The server, that is responsible for running all julia scripts:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --startup-file=no -e 'using DaemonMode; serve()'"><pre>julia <span class="pl-k">--</span>startup<span class="pl-k">-</span>file<span class="pl-k">=</span>no <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; serve()<span class="pl-pds">'</span></span></pre></div>
</li>
<li>
<p dir="auto">A client, that sends to the server the file to be run, and returns the output obtained (without --startup-file=no could be slow, use that option unless you know you want your .julia/config/startup.jl file run):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --startup-file=no -e 'using DaemonMode; runargs()' program.jl &lt;arguments&gt;"><pre>julia <span class="pl-k">--</span>startup<span class="pl-k">-</span>file<span class="pl-k">=</span>no <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; runargs()<span class="pl-pds">'</span></span> program<span class="pl-k">.</span>jl <span class="pl-k">&lt;</span>arguments<span class="pl-k">&gt;</span></pre></div>
<p dir="auto">You can use an alias:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="alias juliaclient='julia --startup-file=no -e &quot;using DaemonMode; runargs()&quot;'"><pre><span class="pl-c1">alias</span> juliaclient=<span class="pl-s"><span class="pl-pds">'</span>julia --startup-file=no -e "using DaemonMode; runargs()"<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">then, instead of <code>julia program.jl</code> you can do <code>juliaclient program.jl</code>. The output should be the same, while running much faster.</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-process" class="anchor" aria-hidden="true" href="#process"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Process</h1>
<p dir="auto">The process is the following:</p>
<ol dir="auto">
<li>
<p dir="auto">The client process sends the program <em>program.jl</em> with the required arguments to the server.</p>
</li>
<li>
<p dir="auto">The server receives the program name, and run it, returning the output to the client process.</p>
</li>
<li>
<p dir="auto">The client process receives the output and shows it to the console.</p>
</li>
</ol>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">Suppose that we have the script <em>test.jl</em></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CSV, DataFrames

fname = only(ARGS)
df = CSV.File(fname) |&gt; DataFrame
println(first(df, 3))"><pre><span class="pl-k">using</span> CSV, DataFrames

fname <span class="pl-k">=</span> <span class="pl-c1">only</span>(<span class="pl-c1">ARGS</span>)
df <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(fname) <span class="pl-k">|&gt;</span> DataFrame
<span class="pl-c1">println</span>(<span class="pl-c1">first</span>(df, <span class="pl-c1">3</span>))</pre></div>
<p dir="auto">The normal method is:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ time julia test.jl tsp_50.csv
...
3×2 DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m18.831s
user	0m18.670s
sys	    0m0.476s"><pre>$ <span class="pl-k">time</span> julia test.jl tsp_50.csv
...
3×2 DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m18.831s
user	0m18.670s
sys	    0m0.476s</pre></div>
<p dir="auto">Only loading the CSV, DataFrames, and reading a simple file takes 18 seconds on my computer. Every time that you run the program is going to take these 18 seconds.</p>
<p dir="auto">using DaemonMode:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --startup-file=no -e 'using DaemonMode; serve()' &amp;
$ time juliaclient test.jl tsp_50.csv
3×2 DataFrames.DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m18.596s
user	0m0.329s
sys	0m0.318s"><pre>$ julia --startup-file=no -e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; serve()<span class="pl-pds">'</span></span> <span class="pl-k">&amp;</span>
$ <span class="pl-k">time</span> juliaclient test.jl tsp_50.csv
3×2 DataFrames.DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m18.596s
user	0m0.329s
sys	0m0.318s</pre></div>
<p dir="auto">But next time (and thereafter), it is a lot faster (I accept donations :-)):</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ time juliaclient test.jl tsp_50.csv
3×2 DataFrames.DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m0.355s
user	0m0.336s
sys	0m0.317s"><pre>$ <span class="pl-k">time</span> juliaclient test.jl tsp_50.csv
3×2 DataFrames.DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │

real	0m0.355s
user	0m0.336s
sys	0m0.317s</pre></div>
<p dir="auto">A reduction from 18s to 0.3s, the *<em>next run only take a 2% of the original time</em>.</p>
<p dir="auto">Also, you can change the file and the performance is maintained:</p>
<p dir="auto"><em>test2.jl</em>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CSV, DataFrames

fname = only(ARGS)
df = CSV.File(fname) |&gt; DataFrame
println(last(df, 10))"><pre><span class="pl-k">using</span> CSV, DataFrames

fname <span class="pl-k">=</span> <span class="pl-c1">only</span>(<span class="pl-c1">ARGS</span>)
df <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(fname) <span class="pl-k">|&gt;</span> DataFrame
<span class="pl-c1">println</span>(<span class="pl-c1">last</span>(df, <span class="pl-c1">10</span>))</pre></div>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ time juliaclient test2.jl tsp_50.csv
10×2 DataFrames.DataFrame
│ Row │ x        │ y        │
│     │ Float64  │ Float64  │
├─────┼──────────┼──────────┤
│ 1   │ 0.25666  │ 0.405932 │
│ 2   │ 0.266308 │ 0.426364 │
│ 3   │ 0.865423 │ 0.232437 │
│ 4   │ 0.462485 │ 0.049489 │
│ 5   │ 0.994926 │ 0.887222 │
│ 6   │ 0.867568 │ 0.302558 │
│ 7   │ 0.475654 │ 0.607708 │
│ 8   │ 0.18198  │ 0.592476 │
│ 9   │ 0.327458 │ 0.354397 │
│ 10  │ 0.765927 │ 0.806685 │

real	0m0.372s
user	0m0.369s
sys	0m0.300s"><pre>$ <span class="pl-k">time</span> juliaclient test2.jl tsp_50.csv
10×2 DataFrames.DataFrame
│ Row │ x        │ y        │
│     │ Float64  │ Float64  │
├─────┼──────────┼──────────┤
│ 1   │ 0.25666  │ 0.405932 │
│ 2   │ 0.266308 │ 0.426364 │
│ 3   │ 0.865423 │ 0.232437 │
│ 4   │ 0.462485 │ 0.049489 │
│ 5   │ 0.994926 │ 0.887222 │
│ 6   │ 0.867568 │ 0.302558 │
│ 7   │ 0.475654 │ 0.607708 │
│ 8   │ 0.18198  │ 0.592476 │
│ 9   │ 0.327458 │ 0.354397 │
│ 10  │ 0.765927 │ 0.806685 │

real	0m0.372s
user	0m0.369s
sys	0m0.300s</pre></div>
<h1 dir="auto"><a id="user-content-evaluate-an-expression-on-the-server" class="anchor" aria-hidden="true" href="#evaluate-an-expression-on-the-server"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Evaluate an expression on the server</h1>
<p dir="auto">Alternatively, a String can be passed to the server which is then parsed and evaluated in its global scope.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DaemonMode

runexpr(&quot;using CSV, DataFrames&quot;)

fname = &quot;tsp_50.csv&quot;;

runexpr(&quot;&quot;&quot;begin
      df = CSV.File(&quot;$fname&quot;) |&gt; DataFrame
      println(last(df, 3))
  end&quot;&quot;&quot;)
3×2 DataFrames.DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ 1   │ 0.420169 │ 0.628786   │
│ 2   │ 0.892219 │ 0.673288   │
│ 3   │ 0.530688 │ 0.00151249 │"><pre><span class="pl-k">using</span> DaemonMode

<span class="pl-c1">runexpr</span>(<span class="pl-s"><span class="pl-pds">"</span>using CSV, DataFrames<span class="pl-pds">"</span></span>)

fname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>tsp_50.csv<span class="pl-pds">"</span></span>;

<span class="pl-c1">runexpr</span>(<span class="pl-s"><span class="pl-pds">"""</span>begin</span>
<span class="pl-s">      df = CSV.File("<span class="pl-v">$fname</span>") |&gt; DataFrame</span>
<span class="pl-s">      println(last(df, 3))</span>
<span class="pl-s">  end<span class="pl-pds">"""</span></span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrames<span class="pl-k">.</span>DataFrame
│ Row │ x        │ y          │
│     │ Float64  │ Float64    │
├─────┼──────────┼────────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">0.420169</span> │ <span class="pl-c1">0.628786</span>   │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">0.892219</span> │ <span class="pl-c1">0.673288</span>   │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">0.530688</span> │ <span class="pl-c1">0.00151249</span> │</pre></div>
<h1 dir="auto"><a id="user-content-avoid-conflict-of-names" class="anchor" aria-hidden="true" href="#avoid-conflict-of-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Avoid conflict of names</h1>
<p dir="auto">The function names could conflict with the variable and function name of new
files, because they are constants. In order to avoid any possible problem
<code>DaemonMode</code> run all files in its own module to avoid any conflict of names.</p>
<p dir="auto">Thus, if we have two files like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# conflict1.jl
f(x) = x + 1
@show f(1)"><pre><span class="pl-c"><span class="pl-c">#</span> conflict1.jl</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@show</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)</pre></div>
<p dir="auto">and</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# conflict2.jl
f = 1
@show f + 1"><pre><span class="pl-c"><span class="pl-c">#</span> conflict2.jl</span>
f <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">@show</span> f <span class="pl-k">+</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">The DaemonMode client could run each one of them after the other one without any
problem.</p>
<h1 dir="auto"><a id="user-content-running-several-clients-at-the-same-time" class="anchor" aria-hidden="true" href="#running-several-clients-at-the-same-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running several clients at the same time</h1>
<p dir="auto">In previous versions, the server run one task for each client. However, since
v0.1.5 DaemonMode is able to run each client in parallel. However, you can run the
server function with the parameter async=false to have the previous behaviour.</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$  julia -e 'using DaemonMode; serve(async=false)'"><pre>$  julia -e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; serve(async=false)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">With the optional parameter async=true to server, the server run each client in
a new task.</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$  julia -e 'using DaemonMode; serve(async=true)'"><pre>$  julia -e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; serve(async=true)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">That command will allow to run different clients parallel, but it will use only one CPU.</p>
<p dir="auto">If you want to use several threads, you can do:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$  julia -t auto -e 'using DaemonMode; serve(async=true)'"><pre>$  julia -t auto -e <span class="pl-s"><span class="pl-pds">'</span>using DaemonMode; serve(async=true)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">Auto allows DaemonMode to use all processors of the computer, but you can put
<em>-t 1</em>, <em>-t 2</em>, ...</p>
<p dir="auto">The async mode have several advantages:</p>
<ul dir="auto">
<li>
<p dir="auto">You can run any new client without waiting the previous close.</p>
</li>
<li>
<p dir="auto">If one process ask for close the Daemon, it will wait until all clients have
been finished.</p>
</li>
<li>
<p dir="auto">With several threads (indicated with <em>-t</em>), you can run several clients in
different CPUs, without increasing the time for each client. If there is only
one process, the processing time will be divided between the different
clients.</p>
</li>
</ul>
<p dir="auto">The main drawback is that the @show and logs in console can be send to the last task.</p>
<h1 dir="auto"><a id="user-content-automatically-reload-the-modified-packages" class="anchor" aria-hidden="true" href="#automatically-reload-the-modified-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Automatically reload the modified packages</h1>
<p dir="auto">DaemonMode would execute the codes that are directly passed
to the server, so each time the codes are updated, you would
get the up-to-date results. However, sometimes you may also
be developing some packages in the same time, and want they
got reloaded when modified. You can use Revise together with
DaemonMode for this purpose. You only need to add <code>using Revise</code>, before starting the DaemonMode server:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --startup-file=no -e 'using Revise; using DaemonMode; serve()'"><pre>julia <span class="pl-k">--</span>startup<span class="pl-k">-</span>file<span class="pl-k">=</span>no <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using Revise; using DaemonMode; serve()<span class="pl-pds">'</span></span></pre></div>
<h1 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h1>
<ul class="contains-task-list">
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Performance, because packages are maintained in memory. This is especially interesting with common external packages like CSV.jl, DataFrames.jl, ...</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> The code is run using the current directory as working directory.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Robust, if the file has an error, the server continues working (for other scripts, stops for your current one).</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> It accepts parameters without problems.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Run complete file and also specific code.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Run in multiple modules to avoid conflicts of names.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Error Stack as it was run directly.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> logging output in console working nicely.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Return 1 when an error occurs.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Multi-threading version.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Fix redirect with several tasks.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Allow to use function exit in client.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Update isinteractive() to show that the run is run in a interactive way.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Compatible with Revise.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Apply the eval function (required for running MLJ code).</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h1>
<ul class="contains-task-list">
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Automatically detect if the daemon is previously run to simplify its usage.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Remote version (in which the Server would be in a different computer of the client).</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Automatic installation of required packages.</p>
</li>
</ul>
</article></div>