<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-discreteeventsjl" class="anchor" aria-hidden="true" href="#discreteeventsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiscreteEvents.jl</h1>
<p>A Julia package for <strong>discrete event generation and simulation</strong>.</p>
<p><a href="https://pbayer.github.io/DiscreteEvents.jl/v0.2.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://pbayer.github.io/DiscreteEvents.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/pbayer/DiscreteEvents.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9513bfd5f175948e66b1268ea01ba9b18f003ac0/68747470733a2f2f7472617669732d63692e636f6d2f7062617965722f44697363726574654576656e74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/pbayer/DiscreteEvents.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/pbayer/discreteevents-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/fcd29391f6c00600ae679eb4d6f7a717869202e2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f32656d7471623961756b3279316673682f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/2emtqb9auk2y1fsh/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/pbayer/DiscreteEvents.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/19f4f279abd4bce2eb450e0ce7547c83443c4825/68747470733a2f2f636f6465636f762e696f2f67682f7062617965722f44697363726574654576656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/pbayer/DiscreteEvents.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/pbayer/DiscreteEvents.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9e857d164829f29c547cb6d7be81cd74220932c2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7062617965722f44697363726574654576656e74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/pbayer/DiscreteEvents.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>DiscreteEvents.jl</code> provides <em>three schemes</em> for modeling and simulating discrete event systems (DES): 1) event scheduling, 2) interacting processes and 3) continuous sampling. It introduces a <em>clock</em> and allows to schedule arbitrary Julia functions or expressions as <em>events</em>, <em>processes</em> or <em>sampling</em> operations on the clock's timeline. Thus it provides simplicity and flexibility in building models and performance in simulation.</p>
<h2><a id="user-content-a-first-example" class="anchor" aria-hidden="true" href="#a-first-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A first example</h2>
<p>A server takes something from its input and puts it out modified after some time. We implement that in a function, create input and output channels and some "foo" and "bar" processes operating reciprocally on the channels:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DiscreteEvents, Printf, Random

<span class="pl-k">function</span> <span class="pl-en">simple</span>(c<span class="pl-k">::</span><span class="pl-c1">Clock</span>, input<span class="pl-k">::</span><span class="pl-c1">Channel</span>, output<span class="pl-k">::</span><span class="pl-c1">Channel</span>, name, id, op)
    token <span class="pl-k">=</span> <span class="pl-c1">take!</span>(input)         <span class="pl-c"><span class="pl-c">#</span> take something from the input</span>
    <span class="pl-c1">now!</span>(c, <span class="pl-c1">SF</span>(println, <span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%5.2f: %s %d took token %d<span class="pl-pds">"</span></span>, <span class="pl-c1">tau</span>(c), name, id, token)))
    d <span class="pl-k">=</span> <span class="pl-c1">delay!</span>(c, <span class="pl-c1">rand</span>())        <span class="pl-c"><span class="pl-c">#</span> after a delay</span>
    <span class="pl-c1">put!</span>(output, <span class="pl-c1">op</span>(token, id))  <span class="pl-c"><span class="pl-c">#</span> put it out with some op applied</span>
<span class="pl-k">end</span>

clk <span class="pl-k">=</span> <span class="pl-c1">Clock</span>()      <span class="pl-c"><span class="pl-c">#</span> create a clock</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">123</span>)  <span class="pl-c"><span class="pl-c">#</span> seed the random number generator</span>

ch1 <span class="pl-k">=</span> <span class="pl-c1">Channel</span>(<span class="pl-c1">32</span>)  <span class="pl-c"><span class="pl-c">#</span> create two channels</span>
ch2 <span class="pl-k">=</span> <span class="pl-c1">Channel</span>(<span class="pl-c1">32</span>)

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">8</span>     <span class="pl-c"><span class="pl-c">#</span> create and register 8 SimProcesses SP</span>
    <span class="pl-c1">process!</span>(clk, <span class="pl-c1">SP</span>(i, simple, ch1, ch2, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, i, <span class="pl-k">+</span>))
    <span class="pl-c1">process!</span>(clk, <span class="pl-c1">SP</span>(i<span class="pl-k">+</span><span class="pl-c1">1</span>, simple, ch2, ch1, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>, i<span class="pl-k">+</span><span class="pl-c1">1</span>, <span class="pl-k">*</span>))
<span class="pl-k">end</span>

<span class="pl-c1">put!</span>(ch1, <span class="pl-c1">1</span>)       <span class="pl-c"><span class="pl-c">#</span> put first token into channel 1</span>
<span class="pl-c1">yield</span>()            <span class="pl-c"><span class="pl-c">#</span> let the first task take it</span>
<span class="pl-c1">run!</span>(clk, <span class="pl-c1">10</span>)      <span class="pl-c"><span class="pl-c">#</span> and run for 10 time units</span></pre></div>
<p>If we source this program, it runs a simulation:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>docs/examples/channels.jl<span class="pl-pds">"</span></span>)
 <span class="pl-c1">0.00</span><span class="pl-k">:</span> foo <span class="pl-c1">1</span> took token <span class="pl-c1">1</span>
 <span class="pl-c1">0.77</span><span class="pl-k">:</span> bar <span class="pl-c1">2</span> took token <span class="pl-c1">2</span>
 <span class="pl-c1">1.71</span><span class="pl-k">:</span> foo <span class="pl-c1">3</span> took token <span class="pl-c1">4</span>
 <span class="pl-c1">2.38</span><span class="pl-k">:</span> bar <span class="pl-c1">4</span> took token <span class="pl-c1">7</span>
 <span class="pl-c1">2.78</span><span class="pl-k">:</span> foo <span class="pl-c1">5</span> took token <span class="pl-c1">28</span>
 <span class="pl-c1">3.09</span><span class="pl-k">:</span> bar <span class="pl-c1">6</span> took token <span class="pl-c1">33</span>
 <span class="pl-k">...</span>
 <span class="pl-k">...</span>
 <span class="pl-c1">7.64</span><span class="pl-k">:</span> foo <span class="pl-c1">1</span> took token <span class="pl-c1">631016</span>
 <span class="pl-c1">7.91</span><span class="pl-k">:</span> bar <span class="pl-c1">2</span> took token <span class="pl-c1">631017</span>
 <span class="pl-c1">8.36</span><span class="pl-k">:</span> foo <span class="pl-c1">3</span> took token <span class="pl-c1">1262034</span>
 <span class="pl-c1">8.94</span><span class="pl-k">:</span> bar <span class="pl-c1">4</span> took token <span class="pl-c1">1262037</span>
 <span class="pl-c1">9.20</span><span class="pl-k">:</span> foo <span class="pl-c1">5</span> took token <span class="pl-c1">5048148</span>
 <span class="pl-c1">9.91</span><span class="pl-k">:</span> bar <span class="pl-c1">6</span> took token <span class="pl-c1">5048153</span>
<span class="pl-s"><span class="pl-pds">"</span>run! finished with 43 clock events, 0 sample steps, simulation time: 10.0<span class="pl-pds">"</span></span></pre></div>
<p>For further examples see the <a href="https://pbayer.github.io/DiscreteEvents.jl/dev" rel="nofollow">documentation</a>,  or the companion package <a href="https://github.com/pbayer/DiscreteEventsCompanion.jl">DiscreteEventsCompanion</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The development (and sometimes not so stable) version can be installed with:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>pbayer<span class="pl-k">/</span>DiscreteEvents<span class="pl-k">.</span>jl</pre></div>
<p>The stable, registered version is installed with:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add DiscreteEvents</pre></div>
<p>Please use, test and help to develop <code>DiscreteEvents.jl</code>! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>
<p><strong>Author:</strong> Paul Bayer</p>
</article></div>