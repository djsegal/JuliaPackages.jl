<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-resizingtoolsjl" class="anchor" aria-hidden="true" href="#resizingtoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ResizingTools.jl</h1>
<p dir="auto"><a href="https://github.com/wangl-cc/ResizingTools.jl/actions/workflows/ci.yml"><img src="https://github.com/wangl-cc/ResizingTools.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/wangl-cc/ResizingTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad5b39f864a73c110cd7c1d0b5f90b545a70c69e60b10329add5cfbb0a2fe499/68747470733a2f2f636f6465636f762e696f2f67682f77616e676c2d63632f526573697a696e67546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/wangl-cc/ResizingTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/wangl-cc/ResizingTools.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/57f06b48b2abf89ca01ee0afd46885e6c6ddbddb3c7c336a00f852df62822eac/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77616e676c2d63632f526573697a696e67546f6f6c732e6a6c" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/wangl-cc/ResizingTools.jl" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/ResizingTools.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/ResizingTools.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>ResizingTools</code> helps you create resizable <code>Array</code> types.</p>
<h2 dir="auto"><a id="user-content-get-started-with-simplerdarray" class="anchor" aria-hidden="true" href="#get-started-with-simplerdarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get started with <code>SimpleRDArray</code></h2>
<p dir="auto"><code>SimpleRDArray</code> is a simple implementation of the resizable dense array, which
can be created simply:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; M = reshape(1:9, 3, 3)
3×3 reshape(::UnitRange{Int64}, 3, 3) with eltype Int64:
 1  4  7
 2  5  8
 3  6  9

julia&gt; RM = SimpleRDArray(M)
3×3 SimpleRDArray{Int64, 2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; M == RM
true"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> RM <span class="pl-k">=</span> <span class="pl-c1">SimpleRDArray</span>(M)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> SimpleRDArray{Int64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> M <span class="pl-k">==</span> RM
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Once a <code>SimpleRDArray</code> is created, you can almost do anything with which likes a
normal <code>Array</code> with similar performance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @benchmark $RM * $RM
BenchmarkTools.Trial: 10000 samples with 980 evaluations.
 Range (min … max):   77.283 ns … 26.663 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     214.530 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   300.628 ns ±  1.292 μs  ┊ GC (mean ± σ):  6.87% ± 5.58%

      █▂                                                        
  ▁▁▁▆██▄▂▁▁▁▁▁▁▁▁▂▂▂▃▃▃▃▃▄▄▄▄▄▄▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁ ▂
  77.3 ns         Histogram: frequency by time          430 ns &lt;

 Memory estimate: 160 bytes, allocs estimate: 1.

julia&gt; @benchmark $M * $M
BenchmarkTools.Trial: 10000 samples with 980 evaluations.
 Range (min … max):   71.658 ns …   4.237 μs  ┊ GC (min … max): 0.00% … 94.53%
 Time  (median):     144.504 ns               ┊ GC (median):    0.00%
 Time  (mean ± σ):   161.228 ns ± 206.767 ns  ┊ GC (mean ± σ):  7.40% ±  5.60%

              ▁▅▇█▇▅▂                                            
  ▂▁▂▂▂▂▂▂▃▄▅▆███████▇▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▃
  71.7 ns          Histogram: frequency by time          356 ns &lt;
 Memory estimate: 160 bytes, allocs estimate: 1.

julia&gt; RM * RM == M * M
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">$</span>RM <span class="pl-k">*</span> <span class="pl-k">$</span>RM
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">980</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>   <span class="pl-c1">77.283</span> ns … <span class="pl-c1">26.663</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">214.530</span> ns              ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">300.628</span> ns ±  <span class="pl-c1">1.292</span> μs  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">6.87</span><span class="pl-k">%</span> ± <span class="pl-c1">5.58</span><span class="pl-k">%</span>

      █▂                                                        
  ▁▁▁▆██▄▂▁▁▁▁▁▁▁▁▂▂▂▃▃▃▃▃▄▄▄▄▄▄▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁ ▂
  <span class="pl-c1">77.3</span> ns         Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">430</span> ns <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">160</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">1.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">$</span>M <span class="pl-k">*</span> <span class="pl-k">$</span>M
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">980</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>   <span class="pl-c1">71.658</span> ns …   <span class="pl-c1">4.237</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">94.53</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">144.504</span> ns               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">161.228</span> ns ± <span class="pl-c1">206.767</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">7.40</span><span class="pl-k">%</span> ±  <span class="pl-c1">5.60</span><span class="pl-k">%</span>

              ▁▅▇█▇▅▂                                            
  ▂▁▂▂▂▂▂▂▃▄▅▆███████▇▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▃
  <span class="pl-c1">71.7</span> ns          Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">356</span> ns <span class="pl-k">&lt;</span>
 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">160</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">1.</span>

julia<span class="pl-k">&gt;</span> RM <span class="pl-k">*</span> RM <span class="pl-k">==</span> M <span class="pl-k">*</span> M
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Besides, a <code>SimpleRDArray</code> can be resized in many ways:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; resize!(RM, (4, 4)) # resize RM to 4 * 4
4×4 SimpleRDArray{Int64, 2}:
 1  4   7   81
 2  5   8   96
 3  6   9  102
 4  8  66  126

julia&gt; RM[1:3,1:3] == M
true
julia&gt; resize!(RM, 2, 3) # resize the 2nd dimension of RM to 3
4×3 SimpleRDArray{Int64, 2}:
 1  4   7
 2  5   8
 3  6   9
 4  8  66

julia&gt; RM[4, :] .= 0
3-element view(::SimpleRDArray{Int64, 2}, 4, :) with eltype Int64:
 0
 0
 0

julia&gt; resize!(RM, 1, Bool[1, 1, 0, 1]) # delete RM[3, :]
3×3 SimpleRDArray{Int64, 2}:
 1  4  7
 2  5  8
 0  0  0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">resize!</span>(RM, (<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)) <span class="pl-c"><span class="pl-c">#</span> resize RM to 4 * 4</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> SimpleRDArray{Int64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>   <span class="pl-c1">7</span>   <span class="pl-c1">81</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>   <span class="pl-c1">8</span>   <span class="pl-c1">96</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  <span class="pl-c1">102</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">8</span>  <span class="pl-c1">66</span>  <span class="pl-c1">126</span>

julia<span class="pl-k">&gt;</span> RM[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">==</span> M
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">resize!</span>(RM, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> resize the 2nd dimension of RM to 3</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span> SimpleRDArray{Int64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>   <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>   <span class="pl-c1">8</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">8</span>  <span class="pl-c1">66</span>

julia<span class="pl-k">&gt;</span> RM[<span class="pl-c1">4</span>, :] <span class="pl-k">.=</span> <span class="pl-c1">0</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">SimpleRDArray{Int64, 2}</span>, <span class="pl-c1">4</span>, :) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">resize!</span>(RM, <span class="pl-c1">1</span>, Bool[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> delete RM[3, :]</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> SimpleRDArray{Int64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<h2 dir="auto"><a id="user-content-make-your-own-array-resizable" class="anchor" aria-hidden="true" href="#make-your-own-array-resizable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Make your own array resizable</h2>
<p dir="auto">To make your own resizable array, you only need is defined some interface
methods, see
<a href="https://wangl-cc.github.io/ResizingTools.jl/dev/manual/#Interfaces" rel="nofollow">docs</a> for
details.</p>
</article></div>