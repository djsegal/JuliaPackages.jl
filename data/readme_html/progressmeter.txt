<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-progressmeterjl" class="anchor" aria-hidden="true" href="#progressmeterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProgressMeter.jl</h1>
<p><a href="https://travis-ci.org/timholy/ProgressMeter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86e1435d5f0b3f8649a0458c1b05f33ed06be50b/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f50726f67726573734d657465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/ProgressMeter.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Progress meter for long-running operations in Julia</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Within julia, execute</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ProgressMeter<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-progress-meters-for-tasks-with-a-pre-determined-number-of-steps" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-a-pre-determined-number-of-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Progress meters for tasks with a pre-determined number of steps</h3>
<p>This works for functions that process things in loops or with map/pmap:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProgressMeter

<span class="pl-c1">@showprogress</span> <span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>Computing...<span class="pl-pds">"</span></span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

<span class="pl-c1">@showprogress</span> <span class="pl-c1">pmap</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p>The first incantation will use a minimum update interval of 1 second, and show the ETA and final duration.  If your computation runs so quickly that it never needs to show progress, no extraneous output will be displayed.</p>
<p>The <code>@showprogress</code> macro wraps a <code>for</code> loop, comprehension, <code>@distributed</code> for loop, or map/pmap as long as the object being iterated over implements the <code>length</code> method and will handle <code>continue</code> correctly.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributed
<span class="pl-k">using</span> ProgressMeter

<span class="pl-c1">@showprogress</span> <span class="pl-c1">@distributed</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

result <span class="pl-k">=</span> <span class="pl-c1">@showprogress</span> <span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>Computing...<span class="pl-pds">"</span></span> <span class="pl-c1">@distributed</span> (<span class="pl-k">+</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    i<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p>In the case of a <code>@distributed</code> for loop without a reducer, an <code>@sync</code> is implied.</p>
<p>You can also control progress updates and reports manually:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">my_long_running_function</span>(filenames<span class="pl-k">::</span><span class="pl-c1">Array</span>)
    n <span class="pl-k">=</span> <span class="pl-c1">length</span>(filenames)
    p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> minimum update interval: 1 second</span>
    <span class="pl-k">for</span> f <span class="pl-k">in</span> filenames
        <span class="pl-c"><span class="pl-c">#</span> Here's where you do all the hard, slow work</span>
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>For tasks such as reading file data where the progress increment varies between iterations, you can use <code>update!</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProgressMeter

<span class="pl-k">function</span> <span class="pl-en">readFileLines</span>(fileName<span class="pl-k">::</span><span class="pl-c1">String</span>)
    file <span class="pl-k">=</span> <span class="pl-c1">open</span>(fileName,<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)

    <span class="pl-c1">seekend</span>(file)
    fileSize <span class="pl-k">=</span> <span class="pl-c1">position</span>(file)

    <span class="pl-c1">seekstart</span>(file)
    p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(fileSize, <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> minimum update interval: 1 second</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(file)
        line <span class="pl-k">=</span> <span class="pl-c1">readline</span>(file)
        <span class="pl-c"><span class="pl-c">#</span> Here's where you do all the hard, slow work</span>

        <span class="pl-c1">update!</span>(p, <span class="pl-c1">position</span>(file))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>The core methods <code>Progress()</code>, <code>ProgressThresh()</code>, <code>ProgressUnknown()</code>, and their updaters
are also thread-safe, so can be used with <code>Threads.@threads</code>, <code>Threads.@spawn</code> etc.:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProgressMeter
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>)
Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">rand</span>())
    <span class="pl-c1">next!</span>(p)
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProgressMeter
n <span class="pl-k">=</span> <span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n)
tasks <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Task}</span>(undef, n)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tasks[i] <span class="pl-k">=</span> Threads<span class="pl-k">.</span><span class="pl-c1">@spawn</span> <span class="pl-k">begin</span>
        <span class="pl-c1">sleep</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">rand</span>())
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">wait</span>.(tasks)</pre></div>
<h3><a id="user-content-progress-bar-style" class="anchor" aria-hidden="true" href="#progress-bar-style"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Progress bar style</h3>
<p>Optionally, a description string can be specified which will be prepended to the output, and a progress meter <code>M</code> characters long can be shown.  E.g.</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Computing initial pass...<span class="pl-pds">"</span></span>, <span class="pl-c1">50</span>)</pre></div>
<p>will yield</p>
<pre><code>Computing initial pass...53%|███████████████████████████                       |  ETA: 0:09:02
</code></pre>
<p>in a manner similar to <a href="https://code.google.com/p/python-progressbar/" rel="nofollow">python-progressbar</a>.</p>
<p>Also, other properties can be modified through keywords. The glyphs used in the bar may be specified by passing a <code>BarGlyphs</code> object as the keyword argument <code>barglyphs</code>. The <code>BarGlyphs</code> constructor can either take 5 characters as arguments or a single 5 character string. E.g.</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, dt<span class="pl-k">=</span><span class="pl-c1">0.5</span>, barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">"</span>[=&gt; ]<span class="pl-pds">"</span></span>), barlen<span class="pl-k">=</span><span class="pl-c1">50</span>, color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p>will yield</p>
<pre><code>Progress: 53%[==========================&gt;                       ]  ETA: 0:09:02
</code></pre>
<p>It is possible to give a vector of characters that acts like a transition between the empty character
and the fully filled character. For example, definining the progress bar as:</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, dt<span class="pl-k">=</span><span class="pl-c1">0.5</span>,
             barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>█<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>▁<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▂<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▃<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▄<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▅<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▆<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>▇<span class="pl-pds">'</span></span>],<span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>,),
             barlen<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p>might show the progress bar as:</p>
<pre><code>Progress:  34%|███▃      |  ETA: 0:00:02
</code></pre>
<p>where the last bar is not yet fully filled.</p>
<h3><a id="user-content-progress-meters-for-tasks-with-a-target-threshold" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-a-target-threshold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Progress meters for tasks with a target threshold</h3>
<p>Some tasks only terminate when some criterion is satisfied, for
example to achieve convergence within a specified tolerance.  In such
circumstances, you can use the <code>ProgressThresh</code> type:</p>
<div class="highlight highlight-source-julia"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressThresh</span>(<span class="pl-c1">1e-5</span>, <span class="pl-s"><span class="pl-pds">"</span>Minimizing:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> val <span class="pl-k">in</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">range</span>(<span class="pl-c1">2</span>, stop<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">6</span>, length<span class="pl-k">=</span><span class="pl-c1">20</span>))
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">update!</span>(prog, val)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-progress-meters-for-tasks-with-an-unknown-number-of-steps" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-an-unknown-number-of-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Progress meters for tasks with an unknown number of steps</h3>
<p>Some tasks only terminate when some non-deterministic criterion is satisfied. In such
circumstances, you can use the <code>ProgressUnknown</code> type:</p>
<div class="highlight highlight-source-julia"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Titles read:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> val <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> , <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>]
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(prog)
    <span class="pl-k">if</span> val <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>
        ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)
        <span class="pl-k">break</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span></pre></div>
<p>This will display the number of calls to <code>next!</code> until <code>finish!</code> is called.</p>
<p>If your counter does not monotonically increases, you can also set the counter by hand.</p>
<div class="highlight highlight-source-julia"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Total length of characters read:<span class="pl-pds">"</span></span>)
total_length_characters <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">for</span> val <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>aaa<span class="pl-pds">"</span></span> , <span class="pl-s"><span class="pl-pds">"</span>bb<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>]
    <span class="pl-k">global</span> total_length_characters <span class="pl-k">+=</span> <span class="pl-c1">length</span>(val)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">update!</span>(prog, total_length_characters)
    <span class="pl-k">if</span> val <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>
        ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)
        <span class="pl-k">break</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-printing-additional-information" class="anchor" aria-hidden="true" href="#printing-additional-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Printing additional information</h3>
<p>You can also print and update information related to the computation by using
the <code>showvalues</code> keyword. The following example displays the iteration counter
and the value of a dummy variable <code>x</code> below the progress meter:</p>
<div class="highlight highlight-source-julia"><pre>x,n <span class="pl-k">=</span> <span class="pl-c1">1</span>,<span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n)
<span class="pl-k">for</span> iter <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(p; showvalues <span class="pl-k">=</span> [(<span class="pl-c1">:iter</span>,iter), (<span class="pl-c1">:x</span>,x)])
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-progressmeter-with-additional-information-in-jupyter" class="anchor" aria-hidden="true" href="#progressmeter-with-additional-information-in-jupyter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProgressMeter with additional information in Jupyter</h4>
<p>Jupyter notebooks/lab does not allow one to overwrite only parts of the output of cell.
In releases up through 1.2, progress bars are printed repeatedly to the output.
Starting with release xx, by default Jupyter clears the output of a cell, but this will remove <strong>all</strong> output from the cell.
You can restore previous behavior by calling <code>ProgressMeter.ijulia_behavior(:append)</code>.
You can enable it again by calling <code>ProgressMeter.ijulia_behavior(:clear)</code>, which will also disable the warning message.</p>
<h3><a id="user-content-tips-for-parallel-programming" class="anchor" aria-hidden="true" href="#tips-for-parallel-programming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tips for parallel programming</h3>
<p>For remote parallelization, when multiple processes or tasks are being used for a computation, the workers should communicate back to a single task for displaying the progress bar. This can be accomplished with a <code>RemoteChannel</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProgressMeter
<span class="pl-k">using</span> Distributed

p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>)
channel <span class="pl-k">=</span> <span class="pl-c1">RemoteChannel</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">Channel</span><span class="pl-c1">{Bool}</span>(<span class="pl-c1">10</span>), <span class="pl-c1">1</span>)

<span class="pl-c1">@sync</span> <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span> this task prints the progress bar</span>
    <span class="pl-c1">@async</span> <span class="pl-k">while</span> <span class="pl-c1">take!</span>(channel)
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> this task does the computation</span>
    <span class="pl-c1">@async</span> <span class="pl-k">begin</span>
        <span class="pl-c1">@distributed</span> (<span class="pl-k">+</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
            <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
            <span class="pl-c1">put!</span>(channel, <span class="pl-c1">true</span>)
            i<span class="pl-k">^</span><span class="pl-c1">2</span>
        <span class="pl-k">end</span>
        <span class="pl-c1">put!</span>(channel, <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> this tells the printing task to finish</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-progress_map" class="anchor" aria-hidden="true" href="#progress_map"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>progress_map</code></h3>
<p>More control over the progress bar in a map function can be achieved with the <code>progress_map</code> and <code>progress_pmap</code> functions. The keyword argument <code>progress</code> can be used to supply a custom progress meter.</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>, barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">"</span>[=&gt; ]<span class="pl-pds">"</span></span>))
<span class="pl-c1">progress_map</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, progress<span class="pl-k">=</span>p) <span class="pl-k">do</span> x
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credits</h2>
<p>Thanks to Alan Bahm, Andrew Burroughs, and Jim Garrison for major enhancements to this package.</p>
</article></div>