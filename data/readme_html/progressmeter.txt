<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-progressmeterjl" class="anchor" aria-hidden="true" href="#progressmeterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProgressMeter.jl</h1>
<p dir="auto"><a href="https://github.com/timholy/ProgressMeter.jl/actions"><img src="https://github.com/timholy/ProgressMeter.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Progress meter for long-running operations in Julia</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Within julia, execute</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;ProgressMeter&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ProgressMeter<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-progress-meters-for-tasks-with-a-pre-determined-number-of-steps" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-a-pre-determined-number-of-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progress meters for tasks with a pre-determined number of steps</h3>
<p dir="auto">This works for functions that process things in loops or with <code>map</code>/<code>pmap</code>/<code>reduce</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
using ProgressMeter

@showprogress 1 &quot;Computing...&quot; for i in 1:50
    sleep(0.1)
end

@showprogress pmap(1:10) do x
    sleep(0.1)
    x^2
end

@showprogress reduce(1:10) do x, y
    sleep(0.1)
    x + y
end"><pre><span class="pl-k">using</span> Distributed
<span class="pl-k">using</span> ProgressMeter

<span class="pl-c1">@showprogress</span> <span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>Computing...<span class="pl-pds">"</span></span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

<span class="pl-c1">@showprogress</span> <span class="pl-c1">pmap</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>

<span class="pl-c1">@showprogress</span> <span class="pl-c1">reduce</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-k">do</span> x, y
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    x <span class="pl-k">+</span> y
<span class="pl-k">end</span></pre></div>
<p dir="auto">The first incantation will use a minimum update interval of 1 second, and show the ETA and
final duration.  If your computation runs so quickly that it never needs to show progress,
no extraneous output will be displayed.</p>
<p dir="auto">The <code>@showprogress</code> macro wraps a <code>for</code> loop, comprehension, <code>@distributed</code> for loop, or
<code>map</code>/<code>pmap</code>/<code>reduce</code> as long as the object being iterated over implements the <code>length</code>
method and will handle <code>continue</code> correctly.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
using ProgressMeter

@showprogress @distributed for i in 1:10
    sleep(0.1)
end

result = @showprogress 1 &quot;Computing...&quot; @distributed (+) for i in 1:10
    sleep(0.1)
    i^2
end"><pre><span class="pl-k">using</span> Distributed
<span class="pl-k">using</span> ProgressMeter

<span class="pl-c1">@showprogress</span> <span class="pl-c1">@distributed</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

result <span class="pl-k">=</span> <span class="pl-c1">@showprogress</span> <span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>Computing...<span class="pl-pds">"</span></span> <span class="pl-c1">@distributed</span> (<span class="pl-k">+</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    i<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In the case of a <code>@distributed</code> for loop without a reducer, an <code>@sync</code> is implied.</p>
<p dir="auto">You can also control progress updates and reports manually:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function my_long_running_function(filenames::Array)
    n = length(filenames)
    p = Progress(n, dt=1.0)   # minimum update interval: 1 second
    for f in filenames
        # Here's where you do all the hard, slow work
        next!(p)
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">my_long_running_function</span>(filenames<span class="pl-k">::</span><span class="pl-c1">Array</span>)
    n <span class="pl-k">=</span> <span class="pl-c1">length</span>(filenames)
    p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, dt<span class="pl-k">=</span><span class="pl-c1">1.0</span>)   <span class="pl-c"><span class="pl-c">#</span> minimum update interval: 1 second</span>
    <span class="pl-k">for</span> f <span class="pl-k">in</span> filenames
        <span class="pl-c"><span class="pl-c">#</span> Here's where you do all the hard, slow work</span>
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">For tasks such as reading file data where the progress increment varies between iterations,
you can use <code>update!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProgressMeter

function readFileLines(fileName::String)
    file = open(fileName,&quot;r&quot;)

    seekend(file)
    fileSize = position(file)

    seekstart(file)
    p = Progress(fileSize, dt=1.0)   # minimum update interval: 1 second
    while !eof(file)
        line = readline(file)
        # Here's where you do all the hard, slow work

        update!(p, position(file))
    end
end"><pre><span class="pl-k">using</span> ProgressMeter

<span class="pl-k">function</span> <span class="pl-en">readFileLines</span>(fileName<span class="pl-k">::</span><span class="pl-c1">String</span>)
    file <span class="pl-k">=</span> <span class="pl-c1">open</span>(fileName,<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)

    <span class="pl-c1">seekend</span>(file)
    fileSize <span class="pl-k">=</span> <span class="pl-c1">position</span>(file)

    <span class="pl-c1">seekstart</span>(file)
    p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(fileSize, dt<span class="pl-k">=</span><span class="pl-c1">1.0</span>)   <span class="pl-c"><span class="pl-c">#</span> minimum update interval: 1 second</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(file)
        line <span class="pl-k">=</span> <span class="pl-c1">readline</span>(file)
        <span class="pl-c"><span class="pl-c">#</span> Here's where you do all the hard, slow work</span>

        <span class="pl-c1">update!</span>(p, <span class="pl-c1">position</span>(file))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The core methods <code>Progress()</code>, <code>ProgressThresh()</code>, <code>ProgressUnknown()</code>, and their updaters
are also thread-safe, so can be used with <code>Threads.@threads</code>, <code>Threads.@spawn</code> etc.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProgressMeter
p = Progress(10)
Threads.@threads for i in 1:10
    sleep(2*rand())
    next!(p)
end
finish!(p)"><pre><span class="pl-k">using</span> ProgressMeter
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>)
Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">rand</span>())
    <span class="pl-c1">next!</span>(p)
<span class="pl-k">end</span>
<span class="pl-c1">finish!</span>(p)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProgressMeter
n = 10
p = Progress(n)
tasks = Vector{Task}(undef, n)
for i in 1:n
    tasks[i] = Threads.@spawn begin
        sleep(2*rand())
        next!(p)
    end
end
wait.(tasks)
finish!(p)"><pre><span class="pl-k">using</span> ProgressMeter
n <span class="pl-k">=</span> <span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n)
tasks <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Task}</span>(undef, n)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tasks[i] <span class="pl-k">=</span> Threads<span class="pl-k">.</span><span class="pl-c1">@spawn</span> <span class="pl-k">begin</span>
        <span class="pl-c1">sleep</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">rand</span>())
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">wait</span>.(tasks)
<span class="pl-c1">finish!</span>(p)</pre></div>
<h3 dir="auto"><a id="user-content-progress-bar-style" class="anchor" aria-hidden="true" href="#progress-bar-style"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progress bar style</h3>
<p dir="auto">Optionally, a description string can be specified which will be prepended to the output,
and a progress meter <code>M</code> characters long can be shown.  E.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Progress(n, &quot;Computing initial pass...&quot;, 50)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, <span class="pl-s"><span class="pl-pds">"</span>Computing initial pass...<span class="pl-pds">"</span></span>, <span class="pl-c1">50</span>)</pre></div>
<p dir="auto">will yield</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Computing initial pass...53%|███████████████████████████                       |  ETA: 0:09:02"><pre class="notranslate"><code>Computing initial pass...53%|███████████████████████████                       |  ETA: 0:09:02
</code></pre></div>
<p dir="auto">in a manner similar to <a href="https://code.google.com/p/python-progressbar/" rel="nofollow">python-progressbar</a>.</p>
<p dir="auto">Also, other properties can be modified through keywords. The glyphs used in the bar may be
specified by passing a <code>BarGlyphs</code> object as the keyword argument <code>barglyphs</code>. The <code>BarGlyphs</code>
constructor can either take 5 characters as arguments or a single 5 character string. E.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Progress(n, dt=0.5, barglyphs=BarGlyphs(&quot;[=&gt; ]&quot;), barlen=50, color=:yellow)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, dt<span class="pl-k">=</span><span class="pl-c1">0.5</span>, barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">"</span>[=&gt; ]<span class="pl-pds">"</span></span>), barlen<span class="pl-k">=</span><span class="pl-c1">50</span>, color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p dir="auto">will yield</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Progress: 53%[==========================&gt;                       ]  ETA: 0:09:02"><pre class="notranslate"><code>Progress: 53%[==========================&gt;                       ]  ETA: 0:09:02
</code></pre></div>
<p dir="auto">It is possible to give a vector of characters that acts like a transition between the empty
character and the fully filled character. For example, definining the progress bar as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Progress(n, dt=0.5,
             barglyphs=BarGlyphs('|','█', ['▁' ,'▂' ,'▃' ,'▄' ,'▅' ,'▆', '▇'],' ','|',),
             barlen=10)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n, dt<span class="pl-k">=</span><span class="pl-c1">0.5</span>,
             barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>█<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>▁<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▂<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▃<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▄<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▅<span class="pl-pds">'</span></span> ,<span class="pl-s"><span class="pl-pds">'</span>▆<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>▇<span class="pl-pds">'</span></span>],<span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>,),
             barlen<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p dir="auto">might show the progress bar as:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Progress:  34%|███▃      |  ETA: 0:00:02"><pre class="notranslate"><code>Progress:  34%|███▃      |  ETA: 0:00:02
</code></pre></div>
<p dir="auto">where the last bar is not yet fully filled.</p>
<h3 dir="auto"><a id="user-content-progress-meters-for-tasks-with-a-target-threshold" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-a-target-threshold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progress meters for tasks with a target threshold</h3>
<p dir="auto">Some tasks only terminate when some criterion is satisfied, for
example to achieve convergence within a specified tolerance.  In such
circumstances, you can use the <code>ProgressThresh</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prog = ProgressThresh(1e-5, &quot;Minimizing:&quot;)
for val in exp10.(range(2, stop=-6, length=20))
    ProgressMeter.update!(prog, val)
    sleep(0.1)
end"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressThresh</span>(<span class="pl-c1">1e-5</span>, <span class="pl-s"><span class="pl-pds">"</span>Minimizing:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> val <span class="pl-k">in</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">range</span>(<span class="pl-c1">2</span>, stop<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">6</span>, length<span class="pl-k">=</span><span class="pl-c1">20</span>))
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">update!</span>(prog, val)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-progress-meters-for-tasks-with-an-unknown-number-of-steps" class="anchor" aria-hidden="true" href="#progress-meters-for-tasks-with-an-unknown-number-of-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progress meters for tasks with an unknown number of steps</h3>
<p dir="auto">Some tasks only terminate when some non-deterministic criterion is satisfied. In such
circumstances, you can use the <code>ProgressUnknown</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prog = ProgressUnknown(&quot;Titles read:&quot;)
for val in [&quot;a&quot; , &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
    ProgressMeter.next!(prog)
    if val == &quot;c&quot;
        ProgressMeter.finish!(prog)
        break
    end
    sleep(0.1)
end"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Titles read:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> val <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> , <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>]
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(prog)
    <span class="pl-k">if</span> val <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>
        ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)
        <span class="pl-k">break</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This will display the number of calls to <code>next!</code> until <code>finish!</code> is called.</p>
<p dir="auto">If your counter does not monotonically increases, you can also set the counter by hand.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prog = ProgressUnknown(&quot;Total length of characters read:&quot;)
total_length_characters = 0
for val in [&quot;aaa&quot; , &quot;bb&quot;, &quot;c&quot;, &quot;d&quot;]
    global total_length_characters += length(val)
    ProgressMeter.update!(prog, total_length_characters)
    if val == &quot;c&quot;
        ProgressMeter.finish!(prog)
        break
    end
    sleep(0.5)
end"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Total length of characters read:<span class="pl-pds">"</span></span>)
total_length_characters <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">for</span> val <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>aaa<span class="pl-pds">"</span></span> , <span class="pl-s"><span class="pl-pds">"</span>bb<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>]
    <span class="pl-k">global</span> total_length_characters <span class="pl-k">+=</span> <span class="pl-c1">length</span>(val)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">update!</span>(prog, total_length_characters)
    <span class="pl-k">if</span> val <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>
        ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)
        <span class="pl-k">break</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Alternatively, you can display a "spinning ball" symbol
by passing <code>spinner=true</code> to the <code>ProgressUnknown</code> constructor.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prog = ProgressUnknown(&quot;Working hard:&quot;, spinner=true)
while true
    ProgressMeter.next!(prog)
    rand(1:2*10^8) == 1 &amp;&amp; break
end
ProgressMeter.finish!(prog)"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Working hard:<span class="pl-pds">"</span></span>, spinner<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-k">while</span> <span class="pl-c1">true</span>
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(prog)
    <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>) <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
<span class="pl-k">end</span>
ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)</pre></div>
<p dir="auto">By default, <code>finish!</code> changes the spinner to a <code>✓</code>, but you can
use a different character by passing a <code>spinner</code> keyword
to <code>finish!</code>, e.g. passing <code>spinner='✗'</code> on a failure condition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let found=false
    prog = ProgressUnknown(&quot;Searching for the Answer:&quot;, spinner=true)
    for tries = 1:10^8
        ProgressMeter.next!(prog)
        if rand(1:2*10^8) == 42
            found=true
            break
        end
    end
    ProgressMeter.finish!(prog, spinner = found ? '✓' : '✗')
end"><pre><span class="pl-k">let</span> found<span class="pl-k">=</span><span class="pl-c1">false</span>
    prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Searching for the Answer:<span class="pl-pds">"</span></span>, spinner<span class="pl-k">=</span><span class="pl-c1">true</span>)
    <span class="pl-k">for</span> tries <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>
        ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(prog)
        <span class="pl-k">if</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>) <span class="pl-k">==</span> <span class="pl-c1">42</span>
            found<span class="pl-k">=</span><span class="pl-c1">true</span>
            <span class="pl-k">break</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog, spinner <span class="pl-k">=</span> found <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">'</span>✓<span class="pl-pds">'</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>✗<span class="pl-pds">'</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">In fact, you can completely customize the spinner character
by passing a string (or array of characters) to animate as a <code>spinner</code>
argument to <code>next!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prog = ProgressUnknown(&quot;Burning the midnight oil:&quot;, spinner=true)
while true
    ProgressMeter.next!(prog, spinner=&quot;🌑🌒🌓🌔🌕🌖🌗🌘&quot;)
    rand(1:10^8) == 0xB00 &amp;&amp; break
end
ProgressMeter.finish!(prog)"><pre>prog <span class="pl-k">=</span> <span class="pl-c1">ProgressUnknown</span>(<span class="pl-s"><span class="pl-pds">"</span>Burning the midnight oil:<span class="pl-pds">"</span></span>, spinner<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-k">while</span> <span class="pl-c1">true</span>
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(prog, spinner<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>🌑🌒🌓🌔🌕🌖🌗🌘<span class="pl-pds">"</span></span>)
    <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>) <span class="pl-k">==</span> <span class="pl-c1">0xB00</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
<span class="pl-k">end</span>
ProgressMeter<span class="pl-k">.</span><span class="pl-c1">finish!</span>(prog)</pre></div>
<p dir="auto">(Other interesting-looking spinners include <code>"⌜⌝⌟⌞"</code>, <code>"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"</code>, <code>"🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛"</code>, <code>"▖▘▝▗'"</code>, and <code>"▁▂▃▄▅▆▇█"</code>.)</p>
<h3 dir="auto"><a id="user-content-printing-additional-information" class="anchor" aria-hidden="true" href="#printing-additional-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Printing additional information</h3>
<p dir="auto">You can also print and update information related to the computation by using
the <code>showvalues</code> keyword. The following example displays the iteration counter
and the value of a dummy variable <code>x</code> below the progress meter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x,n = 1,10
p = Progress(n)
for iter = 1:10
    x *= 2
    sleep(0.5)
    ProgressMeter.next!(p; showvalues = [(:iter,iter), (:x,x)])
end"><pre>x,n <span class="pl-k">=</span> <span class="pl-c1">1</span>,<span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n)
<span class="pl-k">for</span> iter <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(p; showvalues <span class="pl-k">=</span> [(<span class="pl-c1">:iter</span>,iter), (<span class="pl-c1">:x</span>,x)])
<span class="pl-k">end</span></pre></div>
<p dir="auto">In the above example, the data passed to <code>showvalues</code> is evaluated even if the progress bar is not updated.
To avoid this unnecessary computation and reduce the overhead,
you can alternatively pass a zero-argument function as a callback to the <code>showvalues</code> keyword.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x,n = 1,10
p = Progress(n)
generate_showvalues(iter, x) = () -&gt; [(:iter,iter), (:x,x)]
for iter = 1:10
    x *= 2
    sleep(0.5)
# unlike `showvalues=generate_showvalues(iter, x)()`, this version only evaluate the function when necessary
ProgressMeter.next!(p; showvalues = generate_showvalues(iter, x))
end"><pre>x,n <span class="pl-k">=</span> <span class="pl-c1">1</span>,<span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n)
<span class="pl-en">generate_showvalues</span>(iter, x) <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> [(<span class="pl-c1">:iter</span>,iter), (<span class="pl-c1">:x</span>,x)]
<span class="pl-k">for</span> iter <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> unlike `showvalues=generate_showvalues(iter, x)()`, this version only evaluate the function when necessary</span>
ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(p; showvalues <span class="pl-k">=</span> <span class="pl-c1">generate_showvalues</span>(iter, x))
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-showing-average-time-per-iteration" class="anchor" aria-hidden="true" href="#showing-average-time-per-iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Showing average time per iteration</h3>
<p dir="auto">You can include an average per-iteration duration in your progress meter
by setting the optional keyword argument <code>showspeed=true</code>
when constructing a <code>Progress</code>, <code>ProgressUnknown</code>, or <code>ProgressThresh</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x,n = 1,10
p = Progress(n; showspeed=true)
for iter = 1:10
    x *= 2
    sleep(0.5)
    ProgressMeter.next!(p; showvalues = [(:iter,iter), (:x,x)])
end"><pre>x,n <span class="pl-k">=</span> <span class="pl-c1">1</span>,<span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n; showspeed<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-k">for</span> iter <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(p; showvalues <span class="pl-k">=</span> [(<span class="pl-c1">:iter</span>,iter), (<span class="pl-c1">:x</span>,x)])
<span class="pl-k">end</span></pre></div>
<p dir="auto">will yield something like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Progress:  XX%|███████████████████████████           |  ETA: XX:YY:ZZ (12.34  s/it)"><pre class="notranslate"><code>Progress:  XX%|███████████████████████████           |  ETA: XX:YY:ZZ (12.34  s/it)
</code></pre></div>
<p dir="auto">instead of</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Progress:  XX%|███████████████████████████                         |  ETA: XX:YY:ZZ"><pre class="notranslate"><code>Progress:  XX%|███████████████████████████                         |  ETA: XX:YY:ZZ
</code></pre></div>
<h3 dir="auto"><a id="user-content-conditionally-disabling-a-progress-meter" class="anchor" aria-hidden="true" href="#conditionally-disabling-a-progress-meter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conditionally disabling a progress meter</h3>
<p dir="auto">In addition to the <code>showspeed</code> optional keyword argument,
all the progress meters also support the optional <code>enabled</code> keyword argument.
You can use this to conditionally disable a progress bar in cases where you want less verbose output
or are using another progress bar to track progress in looping over a function that itself uses a progress bar.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function my_awesome_slow_loop(n::Integer; show_progress=true)
    p = Progress(n; enabled=show_progress)
    for i in 1:n
        sleep(0.1)
        next!(p)
    end
end

const SHOW_PROGRESS_BARS = parse(Bool, get(ENV, &quot;PROGRESS_BARS&quot;, &quot;true&quot;))

m = 100
# let environment variable disable outer loop progress bar
p = Progress(m; enabled=SHOW_PROGRESS_BARS)
for i in 1:m
    # disable inner loop progress bar since we are tracking progress in the outer loop
    my_awesome_slow_loop(i; show_progress=false)
    next!(p)
end"><pre><span class="pl-k">function</span> <span class="pl-en">my_awesome_slow_loop</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>; show_progress<span class="pl-k">=</span><span class="pl-c1">true</span>)
    p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n; enabled<span class="pl-k">=</span>show_progress)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">const</span> SHOW_PROGRESS_BARS <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Bool, <span class="pl-c1">get</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>PROGRESS_BARS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>))

m <span class="pl-k">=</span> <span class="pl-c1">100</span>
<span class="pl-c"><span class="pl-c">#</span> let environment variable disable outer loop progress bar</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(m; enabled<span class="pl-k">=</span>SHOW_PROGRESS_BARS)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m
    <span class="pl-c"><span class="pl-c">#</span> disable inner loop progress bar since we are tracking progress in the outer loop</span>
    <span class="pl-c1">my_awesome_slow_loop</span>(i; show_progress<span class="pl-k">=</span><span class="pl-c1">false</span>)
    <span class="pl-c1">next!</span>(p)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-progressmeter-with-additional-information-in-jupyter" class="anchor" aria-hidden="true" href="#progressmeter-with-additional-information-in-jupyter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProgressMeter with additional information in Jupyter</h3>
<p dir="auto">Jupyter notebooks/lab does not allow one to overwrite only parts of the output of cell.
In releases up through 1.2, progress bars are printed repeatedly to the output.
Starting with release xx, by default Jupyter clears the output of a cell, but this will
remove <strong>all</strong> output from the cell. You can restore previous behavior by calling
<code>ProgressMeter.ijulia_behavior(:append)</code>. You can enable it again by calling <code>ProgressMeter.ijulia_behavior(:clear)</code>,
which will also disable the warning message.</p>
<h3 dir="auto"><a id="user-content-tips-for-parallel-programming" class="anchor" aria-hidden="true" href="#tips-for-parallel-programming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tips for parallel programming</h3>
<p dir="auto">For remote parallelization, when multiple processes or tasks are being used for a computation,
the workers should communicate back to a single task for displaying the progress bar. This
can be accomplished with a <code>RemoteChannel</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProgressMeter
using Distributed

n_steps = 20
p = Progress(n_steps)
channel = RemoteChannel(()-&gt;Channel{Bool}(), 1)

# introduce a long-running dummy task to all workers
@everywhere long_task() = sum([ 1/x for x in 1:100_000_000 ])
@time long_task() # a single execution is about 0.3 seconds

@sync begin # start two tasks which will be synced in the very end
    # the first task updates the progress bar
    @async while take!(channel)
        next!(p)
    end

    # the second task does the computation
    @async begin
        @distributed (+) for i in 1:n_steps
            long_task()
            put!(channel, true) # trigger a progress bar update
            i^2
        end
        put!(channel, false) # this tells the printing task to finish
    end
end"><pre><span class="pl-k">using</span> ProgressMeter
<span class="pl-k">using</span> Distributed

n_steps <span class="pl-k">=</span> <span class="pl-c1">20</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n_steps)
channel <span class="pl-k">=</span> <span class="pl-c1">RemoteChannel</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">Channel</span><span class="pl-c1">{Bool}</span>(), <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> introduce a long-running dummy task to all workers</span>
<span class="pl-c1">@everywhere</span> <span class="pl-en">long_task</span>() <span class="pl-k">=</span> <span class="pl-c1">sum</span>([ <span class="pl-c1">1</span><span class="pl-k">/</span>x <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100_000_000</span> ])
<span class="pl-c1">@time</span> <span class="pl-c1">long_task</span>() <span class="pl-c"><span class="pl-c">#</span> a single execution is about 0.3 seconds</span>

<span class="pl-c1">@sync</span> <span class="pl-k">begin</span> <span class="pl-c"><span class="pl-c">#</span> start two tasks which will be synced in the very end</span>
    <span class="pl-c"><span class="pl-c">#</span> the first task updates the progress bar</span>
    <span class="pl-c1">@async</span> <span class="pl-k">while</span> <span class="pl-c1">take!</span>(channel)
        <span class="pl-c1">next!</span>(p)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> the second task does the computation</span>
    <span class="pl-c1">@async</span> <span class="pl-k">begin</span>
        <span class="pl-c1">@distributed</span> (<span class="pl-k">+</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_steps
            <span class="pl-c1">long_task</span>()
            <span class="pl-c1">put!</span>(channel, <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> trigger a progress bar update</span>
            i<span class="pl-k">^</span><span class="pl-c1">2</span>
        <span class="pl-k">end</span>
        <span class="pl-c1">put!</span>(channel, <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> this tells the printing task to finish</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Here, returning some number <code>i^2</code> and reducing it somehow <code>(+)</code>
is necessary to make the distribution happen.</p>
<h3 dir="auto"><a id="user-content-progress_map" class="anchor" aria-hidden="true" href="#progress_map"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>progress_map</code></h3>
<p dir="auto">More control over the progress bar in a map function can be achieved with the <code>progress_map</code>
and <code>progress_pmap</code> functions. The keyword argument <code>progress</code> can be used to supply a custom progress meter.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Progress(10, barglyphs=BarGlyphs(&quot;[=&gt; ]&quot;))
progress_map(1:10, progress=p) do x
    sleep(0.1)
    x^2
end"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>, barglyphs<span class="pl-k">=</span><span class="pl-c1">BarGlyphs</span>(<span class="pl-s"><span class="pl-pds">"</span>[=&gt; ]<span class="pl-pds">"</span></span>))
<span class="pl-c1">progress_map</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, progress<span class="pl-k">=</span>p) <span class="pl-k">do</span> x
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-optional-use-of-the-progress-meter" class="anchor" aria-hidden="true" href="#optional-use-of-the-progress-meter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Optional use of the progress meter</h3>
<p dir="auto">It possible to disable the progress meter when the use is optional.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x,n = 1,10
p = Progress(n; enabled = false)
for iter = 1:10
    x *= 2
    sleep(0.5)
    ProgressMeter.next!(p)
end"><pre>x,n <span class="pl-k">=</span> <span class="pl-c1">1</span>,<span class="pl-c1">10</span>
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n; enabled <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-k">for</span> iter <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
    ProgressMeter<span class="pl-k">.</span><span class="pl-c1">next!</span>(p)
<span class="pl-k">end</span></pre></div>
<p dir="auto">In cases where the output is text output such as CI or in an HPC scheduler, the helper function
<code>is_logging</code> can be used to disable automatically.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="is_logging(io) = isa(io, Base.TTY) == false || (get(ENV, &quot;CI&quot;, nothing) == &quot;true&quot;)
p = Progress(n; output = stderr, enabled = !is_logging(stderr))"><pre><span class="pl-en">is_logging</span>(io) <span class="pl-k">=</span> <span class="pl-c1">isa</span>(io, Base<span class="pl-k">.</span>TTY) <span class="pl-k">==</span> <span class="pl-c1">false</span> <span class="pl-k">||</span> (<span class="pl-c1">get</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>CI<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span>) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>)
p <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(n; output <span class="pl-k">=</span> <span class="pl-c1">stderr</span>, enabled <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-c1">is_logging</span>(<span class="pl-c1">stderr</span>))</pre></div>
<h2 dir="auto"><a id="user-content-developmentdebugging-tips" class="anchor" aria-hidden="true" href="#developmentdebugging-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development/debugging tips</h2>
<p dir="auto">When developing or debugging ProgressMeter it is convenient to redirect the output to
another terminal window such that it does not interfer with the Julia REPL window you are
using.</p>
<p dir="auto">On Linux/macOS you can find the file name corresponding to the other terminal by using the
<a href="https://man7.org/linux/man-pages/man1/tty.1.html" rel="nofollow"><code>tty</code></a> command. This file can be <code>open</code>ed
and passed as the <code>output</code> keyword argument to the
<code>Progress</code>/<code>ProgressThresh</code>/<code>ProgressUnknown</code> constructors.</p>
<h4 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h4>
<p dir="auto">Run <code>tty</code> from the other terminal window (the window where we want output to show up):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ tty
/dev/pts/3"><pre class="notranslate"><code>$ tty
/dev/pts/3
</code></pre></div>
<p dir="auto">From the Julia REPL, open the file for writing, wrap in <code>IOContext</code> (to enable color), and
pass to the <code>Progress</code> constructor:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="io = open(&quot;/dev/pts/3&quot;, &quot;w&quot;)
ioc = IOContext(io, :color =&gt; true)
prog = Progress(10; output = ioc)"><pre>io <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/dev/pts/3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)
ioc <span class="pl-k">=</span> <span class="pl-c1">IOContext</span>(io, <span class="pl-c1">:color</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)
prog <span class="pl-k">=</span> <span class="pl-c1">Progress</span>(<span class="pl-c1">10</span>; output <span class="pl-k">=</span> ioc)</pre></div>
<p dir="auto">Output from <code>prog</code> will now print in the other terminal window when executing <code>update!</code>,
<code>next!</code>, etc.</p>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">Thanks to Alan Bahm, Andrew Burroughs, and Jim Garrison for major enhancements to this package.</p>
</article></div>