<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cemicrodatajl" class="anchor" aria-hidden="true" href="#cemicrodatajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CeMicrodata.jl</h1>
<p dir="auto"><code>CeMicrodata.jl</code> pulls data from the Consumer Expenditure (CE) Public Use Microdata (PUMD) into Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add CeMicrodata"><pre class="notranslate"><code>pkg&gt; add CeMicrodata
</code></pre></div>
<p dir="auto">Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;CeMicrodata&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CeMicrodata<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Note: the package depends on <code>unzip</code> which needs to be manually installed and available from the terminal.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Collect income data
using CeMicrodata, CSV, Dates, DataFrames, PlotlyJS, Statistics;
prefixes=[&quot;itbi&quot;, &quot;mtbi&quot;, &quot;fmli&quot;];
output = get_data(prefixes, true, 1990, 2020);
hh_output = get_hh_level(output[1], is_itbi=true, UCC_selection=[&quot;900000&quot;], quarterly_aggregation=false);

# Aggregate data
hh_output_aggregate = combine(groupby(hh_output, [:REF_DATE]), :HH_DATA=&gt;mean);
PlotlyJS.plot(
    hh_output_aggregate,
    x=:REF_DATE, 
    y=:HH_DATA_mean, 
)

# Plotting
hh_output_plot = copy(hh_output);
hh_output_plot[!,:REF_YEAR] = lastdayofyear.(hh_output_plot[!,:REF_DATE]);
hh_output_plot = combine(groupby(hh_output_plot, [:CUSTOM_CUID, :REF_YEAR]), :HH_DATA=&gt;sum);
PlotlyJS.plot(
    hh_output_plot,
    x=:REF_YEAR, 
    y=:HH_DATA_sum, 
    kind=&quot;violin&quot;, 
    meanline_visible=true, 
    side=&quot;positive&quot;, 
    points=false
)"><pre><span class="pl-c"><span class="pl-c">#</span> Collect income data</span>
<span class="pl-k">using</span> CeMicrodata, CSV, Dates, DataFrames, PlotlyJS, Statistics;
prefixes<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>itbi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mtbi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>fmli<span class="pl-pds">"</span></span>];
output <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(prefixes, <span class="pl-c1">true</span>, <span class="pl-c1">1990</span>, <span class="pl-c1">2020</span>);
hh_output <span class="pl-k">=</span> <span class="pl-c1">get_hh_level</span>(output[<span class="pl-c1">1</span>], is_itbi<span class="pl-k">=</span><span class="pl-c1">true</span>, UCC_selection<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>900000<span class="pl-pds">"</span></span>], quarterly_aggregation<span class="pl-k">=</span><span class="pl-c1">false</span>);

<span class="pl-c"><span class="pl-c">#</span> Aggregate data</span>
hh_output_aggregate <span class="pl-k">=</span> <span class="pl-c1">combine</span>(<span class="pl-c1">groupby</span>(hh_output, [<span class="pl-c1">:REF_DATE</span>]), <span class="pl-c1">:HH_DATA</span><span class="pl-k">=&gt;</span>mean);
PlotlyJS<span class="pl-k">.</span><span class="pl-c1">plot</span>(
    hh_output_aggregate,
    x<span class="pl-k">=</span><span class="pl-c1">:REF_DATE</span>, 
    y<span class="pl-k">=</span><span class="pl-c1">:HH_DATA_mean</span>, 
)

<span class="pl-c"><span class="pl-c">#</span> Plotting</span>
hh_output_plot <span class="pl-k">=</span> <span class="pl-c1">copy</span>(hh_output);
hh_output_plot[<span class="pl-k">!</span>,<span class="pl-c1">:REF_YEAR</span>] <span class="pl-k">=</span> <span class="pl-c1">lastdayofyear</span>.(hh_output_plot[<span class="pl-k">!</span>,<span class="pl-c1">:REF_DATE</span>]);
hh_output_plot <span class="pl-k">=</span> <span class="pl-c1">combine</span>(<span class="pl-c1">groupby</span>(hh_output_plot, [<span class="pl-c1">:CUSTOM_CUID</span>, <span class="pl-c1">:REF_YEAR</span>]), <span class="pl-c1">:HH_DATA</span><span class="pl-k">=&gt;</span>sum);
PlotlyJS<span class="pl-k">.</span><span class="pl-c1">plot</span>(
    hh_output_plot,
    x<span class="pl-k">=</span><span class="pl-c1">:REF_YEAR</span>, 
    y<span class="pl-k">=</span><span class="pl-c1">:HH_DATA_sum</span>, 
    kind<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>violin<span class="pl-pds">"</span></span>, 
    meanline_visible<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    side<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>positive<span class="pl-pds">"</span></span>, 
    points<span class="pl-k">=</span><span class="pl-c1">false</span>
)</pre></div>
</article></div>