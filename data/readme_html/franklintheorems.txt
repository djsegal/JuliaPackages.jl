<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-franklintheoremsjl" class="anchor" aria-hidden="true" href="#franklintheoremsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FranklinTheorems.jl</h1>
<p>Theorems Environment for <a href="https://franklinjl.org/" rel="nofollow">Franklin.jl</a>, using syntax reminiscent of the LaTeX <a href="https://ctan.org/pkg/amsthm?lang=en" rel="nofollow"><code>amsthm</code> package</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This is a plugin for Franklin.
In order to install it, <code>add FranklinTheorems</code> in the Julia package manager.
<strong>ACTUALLY, the plugin is not available from the package manager yet....</strong></p>
<p>To enable the plugin, add the following lines to the <code>utils.jl</code> file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Includes the Package, bringing the lx_functions into scope
using FranklinTheorems

# Includes the custom markdown files, bringing the `\newcommand` and `\newenvironment` definitions into scope.
Franklin.include_external_config(FranklinTheorems.config_path()) 
"><pre><span class="pl-c"><span class="pl-c">#</span> Includes the Package, bringing the lx_functions into scope</span>
<span class="pl-k">using</span> FranklinTheorems

<span class="pl-c"><span class="pl-c">#</span> Includes the custom markdown files, bringing the `\newcommand` and `\newenvironment` definitions into scope.</span>
Franklin<span class="pl-k">.</span><span class="pl-c1">include_external_config</span>(FranklinTheorems<span class="pl-k">.</span><span class="pl-c1">config_path</span>()) </pre></div>
<p>Additionally, FranklinTheorems also creates the <code>.theorem</code>, <code>.theorem-header</code>, <code>.theorem-type</code>, <code>.theorem-accordion</code>, <code>.theorem-panel</code>, <code>.theorem-accordion-text</code>, and <code>.proof-box</code> div environments. We provide a <a href="/src/FranklinTheorems.css">CSS file</a> for the tufte Franklin style.
After installing the package, the following Julia code will return the path to a local copy of the CSS file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FranklinTheorems
FranklinTheorems.css_path()
"><pre><span class="pl-k">using</span> FranklinTheorems
FranklinTheorems<span class="pl-k">.</span><span class="pl-c1">css_path</span>()</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>At the top of every markdown webpage you use this plugin for, include the line</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="\enabletheorems
"><pre><span class="pl-c1">\enabletheorems</span></pre></div>
<p>and at the bottom of every such markdown webpage, include the lines</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="\theoremscripts
"><pre><span class="pl-c1">\theoremscripts</span></pre></div>
<p>Then, you can create definitions, theorems, and lemmas:</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="\begin{definition}{The Name of The Defined}{label-name}
	This is the body of the definition.
	$$17 + 9$$
	_You **can** include styling and math in the body of the definition._
\end{definition}
"><pre><span class="pl-c1">\begin</span>{<span class="pl-smi">definition</span>}{The Name of The Defined}{label-name}
	This is the body of the definition.
	<span class="pl-s"><span class="pl-pds">$$</span><span class="pl-c1">17</span> + <span class="pl-c1">9</span><span class="pl-pds">$$</span></span>
	_You **can** include styling and math in the body of the definition._
<span class="pl-c1">\end</span>{<span class="pl-smi">definition</span>}</pre></div>
<p>You can similarly use <code>\begin{theorem}...\end{theorem}</code> and <code>\begin{lemma}...\end{lemma}</code>.
Further, if the optional parameter <code>label-name</code> is given, then you can run <code>\definitionref{label-name}</code> to create a link to the definition.
You can similarly run <code>\theoremref{...}</code> and <code>\lemmaref{...}</code>.
The label-name parameter can also be left empty if you do not want to refer to it elsewhere.</p>
<h4><a id="user-content-custom-theorem-blocks" class="anchor" aria-hidden="true" href="#custom-theorem-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Theorem Blocks</h4>
<p>Suppose you want to use blocks other than <code>theorem</code>, <code>lemma</code>, and <code>definition</code>.
Then, in <code>utils.jl</code>, you can specify additional blocks you want to use.
For example, suppose you want to provide some corollaries. Then, you would write:</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="Franklin.include_external_config(FranklinTheorems.config_path(['corollary'])) 
"><pre>Franklin.include_external_config(FranklinTheorems.config_path(['corollary'])) </pre></div>
<p>Which would then export the <code>corollary</code> environment and <code>corollaryref</code> command, in addition to the standard <code>theorem</code>, <code>lemma</code>, and <code>definition</code> commands and environments.</p>
<h4><a id="user-content-proofs" class="anchor" aria-hidden="true" href="#proofs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Proofs</h4>
<p>You can also include proofs, which creates a new CSS class and has a QEQ box at its end.
To start and end a proof, use <code>\begin{proof}...\end{proof}</code>.</p>
<p>In order to hide longer proofs, we also provide an interactive <code>dropdown</code> latex-style environment.
Then the syntax</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="\begin{dropdown}{Dropdown Button Title}
\begin{proof}
Write your proof here.
\end{proof}
\end{dropdown}
"><pre><span class="pl-c1">\begin</span>{<span class="pl-smi">dropdown</span>}{Dropdown Button Title}
<span class="pl-c1">\begin</span>{<span class="pl-smi">proof</span>}
Write your proof here.
<span class="pl-c1">\end</span>{<span class="pl-smi">proof</span>}
<span class="pl-c1">\end</span>{<span class="pl-smi">dropdown</span>}</pre></div>
<p>creates a button, and hides the proof.
The text of the button reads "Dropdown Button Title".
When clicked, the proof can be revealed and hidden.</p>
<p>The <code>dropdown</code> environment works without a proof inside of it; that's just the expected use-case.</p>
<p>The CSS is also written such that dropdown menus look nice immediately after a proof:</p>
<div class="highlight highlight-text-tex-latex position-relative" data-snippet-clipboard-copy-content="\begin{lemma}{Lovely Lemma}{lemma-eg}
This is a lovely lemma.
\end{lemma}
\begin{dropdown}{_Lovely proof of \lemmaref{lemma-eg}_}
\begin{proof}
This is a lovely proof.
\end{proof}
\end{dropdown}
"><pre><span class="pl-c1">\begin</span>{<span class="pl-smi">lemma</span>}{Lovely Lemma}{lemma-eg}
This is a lovely lemma.
<span class="pl-c1">\end</span>{<span class="pl-smi">lemma</span>}
<span class="pl-c1">\begin</span>{<span class="pl-smi">dropdown</span>}{_Lovely proof of <span class="pl-k">\lemmaref</span>{<span class="pl-c1">lemma-eg</span>}_}
<span class="pl-c1">\begin</span>{<span class="pl-smi">proof</span>}
This is a lovely proof.
<span class="pl-c1">\end</span>{<span class="pl-smi">proof</span>}
<span class="pl-c1">\end</span>{<span class="pl-smi">dropdown</span>}</pre></div>
</article></div>