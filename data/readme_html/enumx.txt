<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-enumxjl" class="anchor" aria-hidden="true" href="#enumxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EnumX.jl</h1>
<p dir="auto"><a href="https://github.com/fredrikekre/EnumX.jl/actions/workflows/ci.yml"><img src="https://github.com/fredrikekre/EnumX.jl/actions/workflows/ci.yml/badge.svg?branch=master&amp;event=push" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/fredrikekre/EnumX.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d4612596f1cbd96cb5fad43f8f36e3543f67a2ebb106838751d99f2246dd11f5/68747470733a2f2f636f6465636f762e696f2f67682f6672656472696b656b72652f456e756d582e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4b3743384f4153565a52" alt="codecov" data-canonical-src="https://codecov.io/gh/fredrikekre/EnumX.jl/branch/master/graph/badge.svg?token=K7C8OASVZR" style="max-width: 100%;"></a></p>
<p dir="auto">This is what I wish <a href="https://docs.julialang.org/en/v1/base/base/#Base.Enums.@enum" rel="nofollow"><code>Base.@enum</code></a> was.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">EnumX exports the macro <code>@enumx</code>, which works similarly to <code>Base.@enum</code>, but with
some improvements.</p>
<p dir="auto">The main drawback of <code>Base.@enum</code> is that the names for instances
are <em>not</em> scoped. This means, for example, that it is inconvenient to use "common" names
for enum instances, and it is impossible to have multiple enums with the same instance
names.</p>
<p dir="auto"><code>EnumX.@enumx</code> solves these limitations by putting everything behind a module scope such
that instances are hidden and instead accessed using dot-syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using EnumX

julia&gt; @enumx Fruit Apple Banana

julia&gt; Fruit.Apple
Fruit.Apple = 0

julia&gt; Fruit.Banana
Fruit.Banana = 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> EnumX

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit Apple Banana

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>Apple
Fruit<span class="pl-k">.</span>Apple <span class="pl-k">=</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>Banana
Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto"><code>Fruit</code> is a module -- the actual enum type is defined as <code>Fruit.T</code> by default:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Fruit.T
Enum type Fruit.T &lt;: Enum{Int32} with 2 instances:
 Fruit.Apple  = 0
 Fruit.Banana = 1

julia&gt; Fruit.T &lt;: Base.Enum
true"><pre>julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>T
Enum type Fruit<span class="pl-k">.</span>T <span class="pl-k">&lt;:</span> <span class="pl-c1">Enum{Int32}</span> with <span class="pl-c1">2</span> instances<span class="pl-k">:</span>
 Fruit<span class="pl-k">.</span>Apple  <span class="pl-k">=</span> <span class="pl-c1">0</span>
 Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>T <span class="pl-k">&lt;:</span> <span class="pl-c1">Base.Enum</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Another typename can be passed as the first argument to <code>@enumx</code> as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx T=FruitEnum Fruit Apple

julia&gt; Fruit.FruitEnum
Enum type Fruit.FruitEnum &lt;: Enum{Int32} with 1 instance:
 Fruit.Apple = 0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> T<span class="pl-k">=</span>FruitEnum Fruit Apple

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>FruitEnum
Enum type Fruit<span class="pl-k">.</span>FruitEnum <span class="pl-k">&lt;:</span> <span class="pl-c1">Enum{Int32}</span> with <span class="pl-c1">1</span> instance<span class="pl-k">:</span>
 Fruit<span class="pl-k">.</span>Apple <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Since the instances are scoped into a module, tab-completion is obtained "for free",
which helps a lot with discoverability of the instance names:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit Apple Banana

julia&gt; Fruit.&lt;TAB&gt;
Apple Banana T"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit Apple Banana

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.&lt;</span>TAB<span class="pl-k">&gt;</span>
Apple Banana T</pre></div>
<p dir="auto">Since the only reserved name in the example above is the module <code>Fruit</code> we can create
another enum with overlapping instance names (this would not be possible with <code>Base.@enum</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx YellowFruit Banana Lemon

julia&gt; YellowFruit.Banana
YellowFruit.Banana = 0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> YellowFruit Banana Lemon

julia<span class="pl-k">&gt;</span> YellowFruit<span class="pl-k">.</span>Banana
YellowFruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Instances can be documented like <code>struct</code> fields. A docstring before the macro is
attached to the <em>module</em> <code>Fruit</code> (i.e. not the "hidden" type <code>Fruit.T</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; &quot;Documentation for Fruit enum-module.&quot;
       @enumx Fruit begin
           &quot;Documentation for Fruit.Apple instance.&quot;
           Apple
       end

help?&gt; Fruit
  Documentation for Fruit enum-module.

help?&gt; Fruit.Apple
  Documentation for Fruit.Apple instance."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Documentation for Fruit enum-module.<span class="pl-pds">"</span></span>
       <span class="pl-c1">@enumx</span> Fruit <span class="pl-k">begin</span>
           <span class="pl-s"><span class="pl-pds">"</span>Documentation for Fruit.Apple instance.<span class="pl-pds">"</span></span>
           Apple
       <span class="pl-k">end</span>

help?<span class="pl-k">&gt;</span> Fruit
  Documentation <span class="pl-k">for</span> Fruit enum<span class="pl-k">-</span><span class="pl-k">module</span>.

help?<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>Apple
  Documentation <span class="pl-k">for</span> Fruit<span class="pl-k">.</span>Apple instance.</pre></div>
<p dir="auto"><code>@enumx</code> allows for duplicate values (unlike <code>Base.@enum</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit Apple=1 Banana=1

julia&gt; Fruit.T
Enum type Fruit.T &lt;: Enum{Int32} with 2 instances:
 Fruit.Apple  = 1
 Fruit.Banana = 1

julia&gt; Fruit.Apple
Fruit.Apple = Fruit.Banana = 1

julia&gt; Fruit.Banana
Fruit.Apple = Fruit.Banana = 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit Apple<span class="pl-k">=</span><span class="pl-c1">1</span> Banana<span class="pl-k">=</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>T
Enum type Fruit<span class="pl-k">.</span>T <span class="pl-k">&lt;:</span> <span class="pl-c1">Enum{Int32}</span> with <span class="pl-c1">2</span> instances<span class="pl-k">:</span>
 Fruit<span class="pl-k">.</span>Apple  <span class="pl-k">=</span> <span class="pl-c1">1</span>
 Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>Apple
Fruit<span class="pl-k">.</span>Apple <span class="pl-k">=</span> Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>Banana
Fruit<span class="pl-k">.</span>Apple <span class="pl-k">=</span> Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto"><code>@enumx</code> lets you use previous enum names for value initialization:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit Apple Banana Orange=Apple

julia&gt; Fruit.T
Enum type Fruit.T &lt;: Enum{Int32} with 3 instances:
 Fruit.Apple  = 0
 Fruit.Banana = 1
 Fruit.Orange = 0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit Apple Banana Orange<span class="pl-k">=</span>Apple

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>T
Enum type Fruit<span class="pl-k">.</span>T <span class="pl-k">&lt;:</span> <span class="pl-c1">Enum{Int32}</span> with <span class="pl-c1">3</span> instances<span class="pl-k">:</span>
 Fruit<span class="pl-k">.</span>Apple  <span class="pl-k">=</span> <span class="pl-c1">0</span>
 Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">1</span>
 Fruit<span class="pl-k">.</span>Orange <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Other than that, functionality should be comparable to <code>Base.@enum</code>:</p>
<ul dir="auto">
<li>
<p dir="auto">Base type specification (defaults to <code>Int32</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit::UInt8 Apple Banana

julia&gt; typeof(Integer(Fruit.Apple))
UInt8"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit<span class="pl-k">::</span><span class="pl-c1">UInt8</span> Apple Banana

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">Integer</span>(Fruit<span class="pl-k">.</span>Apple))
UInt8</pre></div>
</li>
<li>
<p dir="auto">Specifying values with literals or expressions (if not specified, defaults to the value
of the previous instance + 1):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit Apple=4 Banana=(1 + 5) Orange

julia&gt; Fruit.T
Enum type Fruit.T &lt;: Enum{Int32} with 3 instances:
 Fruit.Apple  = 4
 Fruit.Banana = 6
 Fruit.Orange = 7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit Apple<span class="pl-k">=</span><span class="pl-c1">4</span> Banana<span class="pl-k">=</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>) Orange

julia<span class="pl-k">&gt;</span> Fruit<span class="pl-k">.</span>T
Enum type Fruit<span class="pl-k">.</span>T <span class="pl-k">&lt;:</span> <span class="pl-c1">Enum{Int32}</span> with <span class="pl-c1">3</span> instances<span class="pl-k">:</span>
 Fruit<span class="pl-k">.</span>Apple  <span class="pl-k">=</span> <span class="pl-c1">4</span>
 Fruit<span class="pl-k">.</span>Banana <span class="pl-k">=</span> <span class="pl-c1">6</span>
 Fruit<span class="pl-k">.</span>Orange <span class="pl-k">=</span> <span class="pl-c1">7</span></pre></div>
</li>
<li>
<p dir="auto">Definition with <code>begin</code>/<code>end</code> block:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enumx Fruit begin
           Apple
           Banana
           Orange
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enumx</span> Fruit <span class="pl-k">begin</span>
           Apple
           Banana
           Orange
       <span class="pl-k">end</span></pre></div>
</li>
</ul>
<h2 dir="auto"><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>See also</h2>
<p dir="auto"><strong>Community discussions</strong></p>
<ul dir="auto">
<li><a href="https://discourse.julialang.org/t/encapsulating-enum-access-via-dot-syntax/11785" rel="nofollow">Encapsulating enum access via dot syntax</a></li>
<li><a href="https://discourse.julialang.org/t/cannot-reuse-enum-member-in-different-enum/21342" rel="nofollow">Can not reuse enum member in different member</a></li>
<li><a href="https://discourse.julialang.org/t/solving-the-drawbacks-of-enum/74506" rel="nofollow">Solving the drawbacks of <code>@enum</code></a></li>
</ul>
<p dir="auto"><strong>Related packages</strong></p>
<ul dir="auto">
<li><a href="https://github.com/JuliaInterop/CEnum.jl">CEnum.jl</a>: C-compatible Enums.</li>
<li><a href="https://github.com/kindlychung/SuperEnum.jl">SuperEnum.jl</a>: Similar approach as EnumX, but doesn't give you <code>Base.Enum</code>s.</li>
<li><a href="https://github.com/christopher-dG/NamespacedEnums.jl">NamespacedEnums.jl</a>: Discontinued package similar to EnumX, which
gave me the idea to let user override the default <code>.T</code> typename.</li>
</ul>
</article></div>