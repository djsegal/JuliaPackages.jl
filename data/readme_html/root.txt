<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rootjl-root-bindings-for-julia" class="anchor" aria-hidden="true" href="#rootjl-root-bindings-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ROOT.jl: ROOT bindings for julia</h1>
<p dir="auto">Provides basic access to the <a href="https://root.cern.ch/" rel="nofollow">CERN ROOT Framework</a>
for the Julia language.</p>
<p dir="auto"><strong>Note:</strong> This is work in progress, expect bugs and crashes.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<ul dir="auto">
<li><a href="https://julialang.org/downloads/oldreleases/" rel="nofollow">Julia v1.3</a>.</li>
<li><a href="https://github.com/Keno/Cxx.jl">CXX.jl</a> - note that Cxx.jl currently
(v0.3.4) doesn't support Julia v1.4 or newer.</li>
<li>ROOT v6.24.02 or newer (<code>root-config</code> must be on your <code>$PATH</code>).</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Enable RTTI for Cxx.jl:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export JULIA_CXX_RTTI=&quot;1&quot;"><pre><span class="pl-k">export</span> JULIA_CXX_RTTI=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Install ROOT.jl:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg;
julia&gt; Pkg.add(Pkg.PackageSpec(url=&quot;https://github.com/JuliaHEP/ROOT.jl.git&quot;))"><pre class="notranslate"><code>julia&gt; import Pkg;
julia&gt; Pkg.add(Pkg.PackageSpec(url="https://github.com/JuliaHEP/ROOT.jl.git"))
</code></pre></div>
<p dir="auto">You can directly use the standard ROOT API via Cxx.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROOT, Cxx
cxxinclude(&quot;TCanvas.h&quot;)
cxxinclude(&quot;TH1D.h&quot;)

canvas = icxx&quot;new TCanvas();&quot;
hist = icxx&quot;&quot;&quot;new TH1D(&quot;hist&quot;, &quot;Hist&quot;, 20, -4, 4);&quot;&quot;&quot;
for i in 1:100000
    @cxx hist-&gt;Fill(randn())
end
@cxx hist-&gt;Draw()
@cxx canvas-&gt;SaveAs(pointer(&quot;myhist.png&quot;))"><pre><span class="pl-k">using</span> ROOT, Cxx
<span class="pl-c1">cxxinclude</span>(<span class="pl-s"><span class="pl-pds">"</span>TCanvas.h<span class="pl-pds">"</span></span>)
<span class="pl-c1">cxxinclude</span>(<span class="pl-s"><span class="pl-pds">"</span>TH1D.h<span class="pl-pds">"</span></span>)

canvas <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">icxx</span>"</span>new TCanvas();<span class="pl-pds">"</span></span>
hist <span class="pl-k">=</span> <span class="pl-c1">icxx</span><span class="pl-pds">"""</span><span class="pl-s1"><span class="pl-k">new</span> TH1D(<span class="pl-s"><span class="pl-pds">"</span>hist<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Hist<span class="pl-pds">"</span></span>, <span class="pl-c1">20</span>, -<span class="pl-c1">4</span>, <span class="pl-c1">4</span>);</span><span class="pl-pds">"""</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100000</span>
    <span class="pl-c1">@cxx</span> hist<span class="pl-k">-&gt;</span><span class="pl-c1">Fill</span>(<span class="pl-c1">randn</span>())
<span class="pl-k">end</span>
<span class="pl-c1">@cxx</span> hist<span class="pl-k">-&gt;</span><span class="pl-c1">Draw</span>()
<span class="pl-c1">@cxx</span> canvas<span class="pl-k">-&gt;</span><span class="pl-c1">SaveAs</span>(<span class="pl-c1">pointer</span>(<span class="pl-s"><span class="pl-pds">"</span>myhist.png<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">Julia API wrappers for specific ROOT functionalities are left to more
specialized packages.</p>
<h2 dir="auto"><a id="user-content-roots-graphical-user-interface" class="anchor" aria-hidden="true" href="#roots-graphical-user-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ROOT's graphical user interface</h2>
<p dir="auto">If you want to use ROOT's GUI, run <code>rootgui()</code> to start a Julia timer that
runs ROOT GUI loop. To open a <code>TBrowser</code>, for example, run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROOT, Cxx

cxxinclude(&quot;TBrowser.h&quot;)
rootgui()

icxx&quot;new TBrowser();&quot;"><pre><span class="pl-k">using</span> ROOT, Cxx

<span class="pl-c1">cxxinclude</span>(<span class="pl-s"><span class="pl-pds">"</span>TBrowser.h<span class="pl-pds">"</span></span>)
<span class="pl-c1">rootgui</span>()

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">icxx</span>"</span>new TBrowser();<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-thread-safety" class="anchor" aria-hidden="true" href="#thread-safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thread-safety</h2>
<p dir="auto">During startup, ROOT.jl will also enable basic thread-safety for ROOT
(via <code>TThread::Initialize()</code>).</p>
<p dir="auto">It is possible to run certain ROOT operations in multi-threaded Julia code
(e.g. TTree I/O, provided each thread uses a separate <code>TFile</code>/<code>TTree</code> resp.
<code>TChain</code> instance.). However, certain operations (e.g. creating and deleting
a <code>TChain</code>) are not thread-safe. Use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lock(gROOTMutex()) do
    # ... non thread-safe code ...
end"><pre><span class="pl-c1">lock</span>(<span class="pl-c1">gROOTMutex</span>()) <span class="pl-k">do</span>
    <span class="pl-c"><span class="pl-c">#</span> ... non thread-safe code ...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">for non-thread-safe code blocks within multi-threaded code.</p>
</article></div>