<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-erlangterm" class="anchor" aria-hidden="true" href="#erlangterm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ErlangTerm</h1>
<p dir="auto"><em>(De-)serialize Julia data in Erlang's external term format</em></p>
<p dir="auto"><a href="https://github.com/helgee/ErlangTerm.jl/actions"><img src="https://github.com/helgee/ErlangTerm.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/helgee/ErlangTerm.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b312712003b3a14109cea5e338a98fc83e795e258f35799e8af8468f4307f85/68747470733a2f2f636f6465636f762e696f2f67682f68656c6765652f45726c616e675465726d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/helgee/ErlangTerm.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>ErlangTerm.jl</strong> teaches Julia to talk to BEAM-based languages (Erlang, Elixir, ...) in their native tongue,
the <a href="http://erlang.org/doc/apps/erts/erl_ext_dist.html" rel="nofollow">Erlang external term format</a>.
The following data types are supported:</p>
<ul dir="auto">
<li><code>Int</code> &lt;-&gt; <code>Integer</code></li>
<li><code>Float64</code> &lt;-&gt; <code>Float</code></li>
<li><code>Symbol</code> &lt;-&gt; <code>Atom</code></li>
<li><code>Tuple</code> &lt;-&gt; <code>Tuple</code></li>
<li><code>Array</code> &lt;-&gt; <code>List</code></li>
<li><code>Dict</code> &lt;-&gt; <code>Map</code></li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed through Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ErlangTerm&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ErlangTerm<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ErlangTerm

# Take a Julia data structure...
d = Dict(:erlang =&gt; Dict(:id =&gt; 1, :greeting =&gt; &quot;Hello, Erlang!&quot;),
         :elixir =&gt; Dict(:id =&gt; 2, :greeting =&gt; &quot;Hello, Elixir!&quot;))

# ...serialize it...
binary = serialize(d)

# ...and deserialize it!
d1 = deserialize(binary)"><pre><span class="pl-k">using</span> ErlangTerm

<span class="pl-c"><span class="pl-c">#</span> Take a Julia data structure...</span>
d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:erlang</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:greeting</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, Erlang!<span class="pl-pds">"</span></span>),
         <span class="pl-c1">:elixir</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-c1">:greeting</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, Elixir!<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> ...serialize it...</span>
binary <span class="pl-k">=</span> <span class="pl-c1">serialize</span>(d)

<span class="pl-c"><span class="pl-c">#</span> ...and deserialize it!</span>
d1 <span class="pl-k">=</span> <span class="pl-c1">deserialize</span>(binary)</pre></div>
</article></div>