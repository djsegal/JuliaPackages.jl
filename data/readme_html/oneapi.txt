<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-oneapijl" class="anchor" aria-hidden="true" href="#oneapijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>oneAPI.jl</h1>
<p><em>Julia support for the oneAPI programming toolkit.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://buildkite.com/julialang/oneapi-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6da2d32b109e5655c726b3317bfddaae624ff7de00ed402c97e5760fbeca9fa/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f30306666663031666434643663646439303565363165326365376564306637323033626132323764663962353735343236632e737667" alt="" data-canonical-src="https://badge.buildkite.com/00fff01fd4d6cdd905e61e2ce7ed0f7203ba227df9b575426c.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaGPU/oneAPI.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7afa973960d009be77da6400d5b8e88bb41719c38c6371e1c606092da7f81d14/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614750552f6f6e654150492e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaGPU/oneAPI.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>oneAPI.jl provides support for working with the <a href="https://software.intel.com/en-us/oneapi" rel="nofollow">oneAPI unified programming model</a>. The package is verified to work with the (currently) only implementation of this interface <a href="https://github.com/intel/compute-runtime">that is part of the Intel Compute Runtime</a>, only available on Linux.</p>
<p>This package is under heavy development, and not ready for general use.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You need to use Julia 1.6 or higher, and it is strongly advised to use <a href="https://julialang.org/downloads/" rel="nofollow">the official
binaries</a>. For now, only Linux is supported.</p>
<p>Once you have installed Julia, proceed by entering the package manager REPL mode by pressing
<code>]</code> and adding theoneAPI package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add oneAPI
"><pre><code>pkg&gt; add oneAPI
</code></pre></div>
<p>This installation will take a couple of minutes to download necessary binaries, such as the
oneAPI loader, several SPIR-V tools, etc. For now, the oneAPI.jl package also depends on
<a href="https://github.com/intel/compute-runtime">the Intel implementation</a> of the oneAPI spec.
That means you need compatible hardware; refer to the Intel documentation for more details.</p>
<p>Once you have oneAPI.jl installed, you can perform a smoke-test using the low-level wrappers
for the Level Zero library:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using oneAPI

julia&gt; using oneAPI.oneL0

julia&gt; drv = first(drivers());

julia&gt; dev = first(devices(drv))
ZeDevice(GPU, vendor 0x8086, device 0x1912): Intel(R) Gen9
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> oneAPI

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> oneAPI<span class="pl-k">.</span>oneL0

julia<span class="pl-k">&gt;</span> drv <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">drivers</span>());

julia<span class="pl-k">&gt;</span> dev <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">devices</span>(drv))
<span class="pl-c1">ZeDevice</span>(GPU, vendor <span class="pl-c1">0x8086</span>, device <span class="pl-c1">0x1912</span>)<span class="pl-k">:</span> <span class="pl-c1">Intel</span>(R) Gen9</pre></div>
<p>To ensure other functionality works as expected, you can run the test suite from the package
manager REPL mode:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; test oneAPI

Test Summary: | Pass  Total
oneAPI        |   46     46
    Testing oneAPI tests passed
"><pre><code>pkg&gt; test oneAPI

Test Summary: | Pass  Total
oneAPI        |   46     46
    Testing oneAPI tests passed
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The functionality of oneAPI.jl is organized as follows:</p>
<ul>
<li>low-level wrappers for the Level Zero library</li>
<li>kernel programming capabilities</li>
<li>abstractions for high-level array programming</li>
</ul>
<p>The level zero wrappers are available in the <code>oneL0</code> submodule, and expose all flexibility
of the underlying APIs with user-friendly wrappers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using oneAPI, oneAPI.oneL0

julia&gt; drv = first(drivers());

julia&gt; ctx = ZeContext(drv);

julia&gt; dev = first(devices(drv))
ZeDevice(GPU, vendor 0x8086, device 0x1912): Intel(R) Gen9

julia&gt; compute_properties(dev)
(maxTotalGroupSize = 256, maxGroupSizeX = 256, maxGroupSizeY = 256, maxGroupSizeZ = 256, maxGroupCountX = 4294967295, maxGroupCountY = 4294967295, maxGroupCountZ = 4294967295, maxSharedLocalMemory = 65536, subGroupSizes = (8, 16, 32))

julia&gt; queue = ZeCommandQueue(ctx, dev);

julia&gt; execute!(queue) do list
         append_barrier!(list)
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> oneAPI, oneAPI<span class="pl-k">.</span>oneL0

julia<span class="pl-k">&gt;</span> drv <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">drivers</span>());

julia<span class="pl-k">&gt;</span> ctx <span class="pl-k">=</span> <span class="pl-c1">ZeContext</span>(drv);

julia<span class="pl-k">&gt;</span> dev <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">devices</span>(drv))
<span class="pl-c1">ZeDevice</span>(GPU, vendor <span class="pl-c1">0x8086</span>, device <span class="pl-c1">0x1912</span>)<span class="pl-k">:</span> <span class="pl-c1">Intel</span>(R) Gen9

julia<span class="pl-k">&gt;</span> <span class="pl-c1">compute_properties</span>(dev)
(maxTotalGroupSize <span class="pl-k">=</span> <span class="pl-c1">256</span>, maxGroupSizeX <span class="pl-k">=</span> <span class="pl-c1">256</span>, maxGroupSizeY <span class="pl-k">=</span> <span class="pl-c1">256</span>, maxGroupSizeZ <span class="pl-k">=</span> <span class="pl-c1">256</span>, maxGroupCountX <span class="pl-k">=</span> <span class="pl-c1">4294967295</span>, maxGroupCountY <span class="pl-k">=</span> <span class="pl-c1">4294967295</span>, maxGroupCountZ <span class="pl-k">=</span> <span class="pl-c1">4294967295</span>, maxSharedLocalMemory <span class="pl-k">=</span> <span class="pl-c1">65536</span>, subGroupSizes <span class="pl-k">=</span> (<span class="pl-c1">8</span>, <span class="pl-c1">16</span>, <span class="pl-c1">32</span>))

julia<span class="pl-k">&gt;</span> queue <span class="pl-k">=</span> <span class="pl-c1">ZeCommandQueue</span>(ctx, dev);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">execute!</span>(queue) <span class="pl-k">do</span> list
         <span class="pl-c1">append_barrier!</span>(list)
       <span class="pl-k">end</span></pre></div>
<p>Built on top of that, are kernel programming capabilities for executing Julia code on oneAPI
accelerators. For now, we reuse OpenCL intrinsics, and compile to SPIR-V using <a href="https://github.com/KhronosGroup/SPIRV-LLVM-Translator">Khronos'
translator</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; function kernel()
         barrier()
         return
       end

julia&gt; @oneapi items=1 kernel()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">kernel</span>()
         <span class="pl-c1">barrier</span>()
         <span class="pl-k">return</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@oneapi</span> items<span class="pl-k">=</span><span class="pl-c1">1</span> <span class="pl-c1">kernel</span>()</pre></div>
<p>Code reflection macros are available to see the generated code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @device_code_llvm @oneapi items=1 kernel()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@device_code_llvm</span> <span class="pl-c1">@oneapi</span> items<span class="pl-k">=</span><span class="pl-c1">1</span> <span class="pl-c1">kernel</span>()</pre></div>
<div class="highlight highlight-source-llvm position-relative" data-snippet-clipboard-copy-content=";  @ REPL[18]:1 within `kernel'
define dso_local spir_kernel void @_Z17julia_kernel_3053() local_unnamed_addr {
top:
;  @ REPL[18]:2 within `kernel'
; ┌ @ oneAPI.jl/src/device/opencl/synchronization.jl:9 within `barrier' @ oneAPI.jl/src/device/opencl/synchronization.jl:9
; │┌ @ oneAPI.jl/src/device/opencl/utils.jl:34 within `macro expansion'
    call void @_Z7barrierj(i32 0)
; └└
;  @ REPL[18]:3 within `kernel'
  ret void
}
"><pre><span class="pl-c">;  @ REPL[18]:1 within `kernel'</span>
<span class="pl-k">define</span> dso_local spir_kernel <span class="pl-k">void</span> <span class="pl-c1">@_Z17julia_kernel_3053</span>() <span class="pl-k">local_unnamed_addr</span> {
top:
<span class="pl-c">;  @ REPL[18]:2 within `kernel'</span>
<span class="pl-c">; ┌ @ oneAPI.jl/src/device/opencl/synchronization.jl:9 within `barrier' @ oneAPI.jl/src/device/opencl/synchronization.jl:9</span>
<span class="pl-c">; │┌ @ oneAPI.jl/src/device/opencl/utils.jl:34 within `macro expansion'</span>
    <span class="pl-k">call</span> <span class="pl-k">void</span> <span class="pl-c1">@_Z7barrierj</span>(<span class="pl-k">i32</span> <span class="pl-c1">0</span>)
<span class="pl-c">; └└</span>
<span class="pl-c">;  @ REPL[18]:3 within `kernel'</span>
  <span class="pl-k">ret</span> <span class="pl-k">void</span>
}</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @device_code_spirv @oneapi items=1 kernel()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@device_code_spirv</span> <span class="pl-c1">@oneapi</span> items<span class="pl-k">=</span><span class="pl-c1">1</span> <span class="pl-c1">kernel</span>()</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="; SPIR-V
; Version: 1.0
; Generator: Khronos LLVM/SPIR-V Translator; 14
; Bound: 9
; Schema: 0
               OpCapability Addresses
               OpCapability Kernel
          %1 = OpExtInstImport &quot;OpenCL.std&quot;
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %4 &quot;_Z17julia_kernel_3067&quot;
               OpSource OpenCL_C 200000
               OpName %top &quot;top&quot;
       %uint = OpTypeInt 32 0
     %uint_2 = OpConstant %uint 2
     %uint_0 = OpConstant %uint 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
          %4 = OpFunction %void None %3
        %top = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_0
               OpReturn
               OpFunctionEnd

"><pre lang="spirv"><code>; SPIR-V
; Version: 1.0
; Generator: Khronos LLVM/SPIR-V Translator; 14
; Bound: 9
; Schema: 0
               OpCapability Addresses
               OpCapability Kernel
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %4 "_Z17julia_kernel_3067"
               OpSource OpenCL_C 200000
               OpName %top "top"
       %uint = OpTypeInt 32 0
     %uint_2 = OpConstant %uint 2
     %uint_0 = OpConstant %uint 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
          %4 = OpFunction %void None %3
        %top = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_0
               OpReturn
               OpFunctionEnd

</code></pre></div>
<p>Finally, the <code>oneArray</code> type makes it possible to use your oneAPI accelerator without the
need to write custom kernels, thanks to Julia's high-level array abstractions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = oneArray(rand(2,2))
2×2 oneArray{Float64,2}:
 0.592979  0.996154
 0.874364  0.232854

julia&gt; a .+ 1
2×2 oneArray{Float64,2}:
 1.59298  1.99615
 1.87436  1.23285
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">oneArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> oneArray{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.592979</span>  <span class="pl-c1">0.996154</span>
 <span class="pl-c1">0.874364</span>  <span class="pl-c1">0.232854</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">.+</span> <span class="pl-c1">1</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> oneArray{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.59298</span>  <span class="pl-c1">1.99615</span>
 <span class="pl-c1">1.87436</span>  <span class="pl-c1">1.23285</span></pre></div>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>The current version of oneAPI.jl supports most of oneAPI Level Zero interface, has good
kernel programming capabilties, and as a demonstration of that it fully implements the
GPUArrays.jl array interfaces. This results in a full-featured GPU array type.</p>
<p>However, the package has not been extensively tested, and performance issues might be
present. There is no integration with vendor libraries like oneMKL or oneDNN, and as a
result certain operations (like matrix multiplication) will be unavailable or slow.</p>
</article></div>