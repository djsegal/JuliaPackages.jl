<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bosciajl" class="anchor" aria-hidden="true" href="#bosciajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Boscia.jl</h1>
<p dir="auto"><a href="https://github.com/ZIB-IOL/Boscia.jl/actions"><img src="https://github.com/ZIB-IOL/Boscia.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ZIB-IOL/Boscia.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1d67a44a80f05216c42c3f750bef2519615790d0c13263b1897258a8966491a7/68747470733a2f2f636f6465636f762e696f2f67682f5a49422d494f4c2f426f736369612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ZIB-IOL/Boscia.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=Boscia" rel="nofollow"><img src="https://camo.githubusercontent.com/da53cff575ff6ec3499d61848096a6e5bbf8eef47e94b6c83a3bf8e816c0ae08/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f426f73636961" alt="Genie Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/Boscia" style="max-width: 100%;"></a></p>
<p dir="auto">A solver for Mixed-Integer Convex Optimization that uses Frank-Wolfe methods for convex relaxations and a branch-and-bound algorithm.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The Boscia.jl solver combines (a variant of) the Frank-Wolfe algorithm with a branch-and-bound like algorithm to solve mixed-integer convex optimization problems of the form
<code>min_{x ∈ C, x_I ∈ Z^n} f(x)</code>,
where <code>f</code> is a differentiable convex function, <code>C</code> is a convex and compact set, and <code>I</code> is a set of indices of integral variables.</p>
<p dir="auto">They are especially useful when we have a method to optimize a linear function over <code>C</code> and the integrality constraints in a compuationally efficient way.
<code>C</code> is specified using the MathOptInterface API or any DSL like JuMP implementing it.</p>
<p dir="auto">A paper presenting the package with mathematical explanations and numerous examples can be found here:</p>
<blockquote>
<p dir="auto">Convex integer optimization with Frank-Wolfe methods: <a href="https://arxiv.org/abs/2208.11010" rel="nofollow">2208.11010</a></p>
</blockquote>
<p dir="auto"><code>Boscia.jl</code> uses <a href="https://github.com/ZIB-IOL/FrankWolfe.jl"><code>FrankWolfe.jl</code></a> for solving the convex subproblems, <a href="https://github.com/Wikunia/Bonobo.jl"><code>Bonobo.jl</code></a> for managing the search tree, and <a href="https://scipopt.org" rel="nofollow">SCIP</a> for the MIP subproblems.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Add the Boscia stable release with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Boscia&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Boscia<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Or get the latest master branch with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/ZIB-IOL/Boscia.jl&quot;, rev=&quot;main&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/ZIB-IOL/Boscia.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Here is a simple example to get started. For more examples see the examples folder in the package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Boscia
using FrankWolfe
using Random
using SCIP
using LinearAlgebra
import MathOptInterface
const MOI = MathOptInterface

n = 6

const diffw = 0.5 * ones(n)
o = SCIP.Optimizer()

MOI.set(o, MOI.Silent(), true)

x = MOI.add_variables(o, n)

for xi in x
    MOI.add_constraint(o, xi, MOI.GreaterThan(0.0))
    MOI.add_constraint(o, xi, MOI.LessThan(1.0))
    MOI.add_constraint(o, xi, MOI.ZeroOne())
end

lmo = FrankWolfe.MathOptLMO(o)

function f(x)
    return sum(0.5*(x.-diffw).^2)
end

function grad!(storage, x)
    @. storage = x-diffw
end

x, _, result = Boscia.solve(f, grad!, lmo, verbose = true)

Boscia Algorithm.

Parameter settings.
	 Tree traversal strategy: Move best bound
	 Branching strategy: Most infeasible
	 Absolute dual gap tolerance: 1.000000e-06
	 Relative dual gap tolerance: 1.000000e-02
	 Frank-Wolfe subproblem tolerance: 1.000000e-05
	 Total number of varibales: 6
	 Number of integer variables: 0
	 Number of binary variables: 6


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   Iteration       Open          Bound      Incumbent      Gap (abs)      Gap (rel)       Time (s)      Nodes/sec        FW (ms)       LMO (ms)  LMO (calls c)   FW (Its)   #ActiveSet  Discarded
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*          1          2  -1.202020e-06   7.500000e-01   7.500012e-01            Inf   3.870000e-01   7.751938e+00            237              2              9         13            1          0
         100         27   6.249998e-01   7.500000e-01   1.250002e-01   2.000004e-01   5.590000e-01   2.271914e+02              0              0            641          0            1          0
         127          0   7.500000e-01   7.500000e-01   0.000000e+00   0.000000e+00   5.770000e-01   2.201040e+02              0              0            695          0            1          0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Postprocessing

Blended Pairwise Conditional Gradient Algorithm.
MEMORY_MODE: FrankWolfe.InplaceEmphasis() STEPSIZE: Adaptive EPSILON: 1.0e-7 MAXITERATION: 10000 TYPE: Float64
GRADIENTTYPE: Nothing LAZY: true lazy_tolerance: 2.0
[ Info: In memory_mode memory iterates are written back into x0!

----------------------------------------------------------------------------------------------------------------
  Type     Iteration         Primal           Dual       Dual Gap           Time         It/sec     #ActiveSet
----------------------------------------------------------------------------------------------------------------
  Last             0   7.500000e-01   7.500000e-01   0.000000e+00   1.086583e-03   0.000000e+00              1
----------------------------------------------------------------------------------------------------------------
    PP             0   7.500000e-01   7.500000e-01   0.000000e+00   1.927792e-03   0.000000e+00              1
----------------------------------------------------------------------------------------------------------------

Solution Statistics.
	 Solution Status: Optimal (tree empty)
	 Primal Objective: 0.75
	 Dual Bound: 0.75
	 Dual Gap (relative): 0.0

Search Statistics.
	 Total number of nodes processed: 127
	 Total number of lmo calls: 699
	 Total time (s): 0.58
	 LMO calls / sec: 1205.1724137931035
	 Nodes / sec: 218.96551724137933
	 LMO calls / node: 5.503937007874016"><pre><span class="pl-k">using</span> Boscia
<span class="pl-k">using</span> FrankWolfe
<span class="pl-k">using</span> Random
<span class="pl-k">using</span> SCIP
<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">import</span> MathOptInterface
<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface

n <span class="pl-k">=</span> <span class="pl-c1">6</span>

<span class="pl-k">const</span> diffw <span class="pl-k">=</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> <span class="pl-c1">ones</span>(n)
o <span class="pl-k">=</span> SCIP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()

MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(o, MOI<span class="pl-k">.</span><span class="pl-c1">Silent</span>(), <span class="pl-c1">true</span>)

x <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variables</span>(o, n)

<span class="pl-k">for</span> xi <span class="pl-k">in</span> x
    MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(o, xi, MOI<span class="pl-k">.</span><span class="pl-c1">GreaterThan</span>(<span class="pl-c1">0.0</span>))
    MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(o, xi, MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">1.0</span>))
    MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(o, xi, MOI<span class="pl-k">.</span><span class="pl-c1">ZeroOne</span>())
<span class="pl-k">end</span>

lmo <span class="pl-k">=</span> FrankWolfe<span class="pl-k">.</span><span class="pl-c1">MathOptLMO</span>(o)

<span class="pl-k">function</span> <span class="pl-en">f</span>(x)
    <span class="pl-k">return</span> <span class="pl-c1">sum</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>(x<span class="pl-k">.-</span>diffw)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">grad!</span>(storage, x)
    <span class="pl-c1">@.</span> storage <span class="pl-k">=</span> x<span class="pl-k">-</span>diffw
<span class="pl-k">end</span>

x, _, result <span class="pl-k">=</span> Boscia<span class="pl-k">.</span><span class="pl-c1">solve</span>(f, grad!, lmo, verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>)

Boscia Algorithm.

Parameter settings.
	 Tree traversal strategy<span class="pl-k">:</span> Move best bound
	 Branching strategy<span class="pl-k">:</span> Most infeasible
	 Absolute dual gap tolerance<span class="pl-k">:</span> <span class="pl-c1">1.000000e-06</span>
	 Relative dual gap tolerance<span class="pl-k">:</span> <span class="pl-c1">1.000000e-02</span>
	 Frank<span class="pl-k">-</span>Wolfe subproblem tolerance<span class="pl-k">:</span> <span class="pl-c1">1.000000e-05</span>
	 Total number of varibales<span class="pl-k">:</span> <span class="pl-c1">6</span>
	 Number of integer variables<span class="pl-k">:</span> <span class="pl-c1">0</span>
	 Number of binary variables<span class="pl-k">:</span> <span class="pl-c1">6</span>


<span class="pl-k">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span>
   Iteration       Open          Bound      Incumbent      Gap (abs)      Gap (rel)       Time (s)      Nodes<span class="pl-k">/</span>sec        FW (ms)       LMO (ms)  LMO (calls c)   FW (Its)   <span class="pl-c"><span class="pl-c">#</span>ActiveSet  Discarded</span>
<span class="pl-k">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span>
<span class="pl-k">*</span>          <span class="pl-c1">1</span>          <span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1.202020e-06</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">7.500012e-01</span>            <span class="pl-c1">Inf</span>   <span class="pl-c1">3.870000e-01</span>   <span class="pl-c1">7.751938e+00</span>            <span class="pl-c1">237</span>              <span class="pl-c1">2</span>              <span class="pl-c1">9</span>         <span class="pl-c1">13</span>            <span class="pl-c1">1</span>          <span class="pl-c1">0</span>
         <span class="pl-c1">100</span>         <span class="pl-c1">27</span>   <span class="pl-c1">6.249998e-01</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">1.250002e-01</span>   <span class="pl-c1">2.000004e-01</span>   <span class="pl-c1">5.590000e-01</span>   <span class="pl-c1">2.271914e+02</span>              <span class="pl-c1">0</span>              <span class="pl-c1">0</span>            <span class="pl-c1">641</span>          <span class="pl-c1">0</span>            <span class="pl-c1">1</span>          <span class="pl-c1">0</span>
         <span class="pl-c1">127</span>          <span class="pl-c1">0</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">0.000000e+00</span>   <span class="pl-c1">0.000000e+00</span>   <span class="pl-c1">5.770000e-01</span>   <span class="pl-c1">2.201040e+02</span>              <span class="pl-c1">0</span>              <span class="pl-c1">0</span>            <span class="pl-c1">695</span>          <span class="pl-c1">0</span>            <span class="pl-c1">1</span>          <span class="pl-c1">0</span>
<span class="pl-k">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span>

Postprocessing

Blended Pairwise Conditional Gradient Algorithm.
MEMORY_MODE<span class="pl-k">:</span> FrankWolfe<span class="pl-k">.</span><span class="pl-c1">InplaceEmphasis</span>() STEPSIZE<span class="pl-k">:</span> Adaptive EPSILON<span class="pl-k">:</span> <span class="pl-c1">1.0e-7</span> MAXITERATION<span class="pl-k">:</span> <span class="pl-c1">10000</span> TYPE<span class="pl-k">:</span> Float64
GRADIENTTYPE<span class="pl-k">:</span> Nothing LAZY<span class="pl-k">:</span> <span class="pl-c1">true</span> lazy_tolerance<span class="pl-k">:</span> <span class="pl-c1">2.0</span>
[ Info<span class="pl-k">:</span> In memory_mode memory iterates are written back into x0!

<span class="pl-k">----------------------------------------------------------------------------------------------------------------</span>
  Type     Iteration         Primal           Dual       Dual Gap           Time         It<span class="pl-k">/</span>sec     <span class="pl-c"><span class="pl-c">#</span>ActiveSet</span>
<span class="pl-k">----------------------------------------------------------------------------------------------------------------</span>
  Last             <span class="pl-c1">0</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">0.000000e+00</span>   <span class="pl-c1">1.086583e-03</span>   <span class="pl-c1">0.000000e+00</span>              <span class="pl-c1">1</span>
<span class="pl-k">----------------------------------------------------------------------------------------------------------------</span>
    PP             <span class="pl-c1">0</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">7.500000e-01</span>   <span class="pl-c1">0.000000e+00</span>   <span class="pl-c1">1.927792e-03</span>   <span class="pl-c1">0.000000e+00</span>              <span class="pl-c1">1</span>
<span class="pl-k">----------------------------------------------------------------------------------------------------------------</span>

Solution Statistics.
	 Solution Status<span class="pl-k">:</span> Optimal (tree empty)
	 Primal Objective<span class="pl-k">:</span> <span class="pl-c1">0.75</span>
	 Dual Bound<span class="pl-k">:</span> <span class="pl-c1">0.75</span>
	 Dual Gap (relative)<span class="pl-k">:</span> <span class="pl-c1">0.0</span>

Search Statistics.
	 Total number of nodes processed<span class="pl-k">:</span> <span class="pl-c1">127</span>
	 Total number of lmo calls<span class="pl-k">:</span> <span class="pl-c1">699</span>
	 Total time (s)<span class="pl-k">:</span> <span class="pl-c1">0.58</span>
	 LMO calls <span class="pl-k">/</span> sec<span class="pl-k">:</span> <span class="pl-c1">1205.1724137931035</span>
	 Nodes <span class="pl-k">/</span> sec<span class="pl-k">:</span> <span class="pl-c1">218.96551724137933</span>
	 LMO calls <span class="pl-k">/</span> node<span class="pl-k">:</span> <span class="pl-c1">5.503937007874016</span></pre></div>
</article></div>