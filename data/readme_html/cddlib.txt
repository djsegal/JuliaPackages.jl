<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cddlib" class="anchor" aria-hidden="true" href="#cddlib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CDDLib</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaPolyhedra/CDDLib.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaPolyhedra/CDDLib.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.1214581" rel="nofollow"><img src="https://camo.githubusercontent.com/66ce86f76aa2be065154ec6206261e1d8031bd60d3bdd4e59545d4fe9105456a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313231343538312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.1214581.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="http://codecov.io/github/JuliaPolyhedra/CDDLib.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/899529bc4b1c0a7f74d902e1b26d602724c848c039ca008ba93724aba51b9ea6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961506f6c7968656472612f4344444c69622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaPolyhedra/CDDLib.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p dir="auto">CDDLib is a wrapper for <a href="https://www.inf.ethz.ch/personal/fukudak/cdd_home/" rel="nofollow">cdd</a>.</p>
<p dir="auto">This package can either be used in a "lower level" using the API of cdd or using the
higher level interface of <a href="https://github.com/JuliaPolyhedra/Polyhedra.jl">Polyhedra</a>.</p>
<h2 dir="auto"><a id="user-content-problem-description" class="anchor" aria-hidden="true" href="#problem-description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Problem description</h2>
<p dir="auto">As written in the README of cddlib:</p>
<blockquote>
<p dir="auto">The C-library  cddlib is a C implementation of the Double Description
Method of Motzkin et al. for generating all vertices (i.e. extreme points)
and extreme rays of a general convex polyhedron in R^d given by a system
of linear inequalities:</p>
<p dir="auto">P = { x=(x1, ..., xd)^T :  b - A  x  &gt;= 0 }</p>
<p dir="auto">where  A  is a given m x d real matrix, b is a given m-vector
and 0 is the m-vector of all zeros.</p>
<p dir="auto">The program can be used for the reverse operation (i.e. convex hull
computation).  This means that  one can move back and forth between
an inequality representation  and a generator (i.e. vertex and ray)
representation of a polyhedron with cdd.  Also, cdd can solve a linear
programming problem, i.e. a problem of maximizing and minimizing
a linear function over P.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;CDDLib&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CDDLib<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Building the package will download binaries of <a href="https://github.com/cddlib/cddlib"><code>cddlib</code></a>
that are provided by <a href="https://github.com/JuliaBinaryWrappers/cddlib_jll.jl">cddlib_jll.jl</a>.</p>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">Use <code>CDDLib.Optimizer{Float64}</code> to use CDDLib with <a href="https://github.com/jump-dev/JuMP.jl">JuMP</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, CDDLib
model = Model(CDDLib.Optimizer{Float64})"><pre><span class="pl-k">using</span> JuMP, CDDLib
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(CDDLib<span class="pl-k">.</span>Optimizer{Float64})</pre></div>
<h2 dir="auto"><a id="user-content-use-with-mathoptinterface" class="anchor" aria-hidden="true" href="#use-with-mathoptinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with MathOptInterface</h2>
<p dir="auto">CDD can also solve problems using <code>Rational{BigInt}</code> arithmetic.</p>
<p dir="auto">Use <code>CDDLib.Optimizer{Rational{BigInt}}</code> to use CDDLib with <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathOptInterface, CDDLib
model = CDDLib.Optimizer{Rational{BigInt}}()"><pre><span class="pl-k">using</span> MathOptInterface, CDDLib
model <span class="pl-k">=</span> CDDLib<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Rational{BigInt}}</span>()</pre></div>
<h2 dir="auto"><a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Debugging</h2>
<p dir="auto">CDD uses two global boolean to enable debugging outputs: <code>debug</code> and <code>log</code>.
You can query the value of <code>debug</code> (resp. <code>log</code>) with <code>get_debug</code> (resp. <code>get_log</code>)
and set its value with <code>set_debug</code> (resp. <code>set_log</code>).</p>
</article></div>