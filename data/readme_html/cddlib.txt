<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cddlib" class="anchor" aria-hidden="true" href="#cddlib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CDDLib</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaPolyhedra/CDDLib.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8419db5b936813af718e6574e557ba694ff1783c/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506f6c7968656472612f4344444c69622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPolyhedra/CDDLib.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/JuliaPolyhedra/cddlib-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e533291c736ba841f2ef67c206cdfc572973e8e0/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7330336c3572316f39366c39616368613f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/s03l5r1o96l9acha?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.1214581" rel="nofollow"><img src="https://camo.githubusercontent.com/6ec25a5bfe4bb1c835bcc0e7c8535f8d54f33022/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313231343538312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.1214581.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://coveralls.io/github/JuliaPolyhedra/CDDLib.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/054427eaee8ac67f339c94ba7b6ebf848a06f0fc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961506f6c7968656472612f4344444c69622e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls branch" data-canonical-src="https://coveralls.io/repos/github/JuliaPolyhedra/CDDLib.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/JuliaPolyhedra/CDDLib.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/230ed9f8396e9130185c0ca33a5a6586c60a6fdd/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961506f6c7968656472612f4344444c69622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaPolyhedra/CDDLib.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p>CDDLib is a wrapper for <a href="https://www.inf.ethz.ch/personal/fukudak/cdd_home/" rel="nofollow">cdd</a>. This module can either be used in a "lower level" using the API of cdd or using the higher level interface of <a href="https://github.com/JuliaPolyhedra/Polyhedra.jl">Polyhedra</a>.
CDDLib also includes the linear programming solver <code>CDDLib.Optimizer</code> which can be used by <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> through <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a>.</p>
<p>Building the package will download binaries of <a href="https://github.com/cddlib/cddlib"><code>cddlib</code></a>
that are compiled by <a href="https://github.com/JuliaPolyhedra/cddlibBuilder/">cddlibBuilder</a>.</p>
<p>As written in the README of cddlib:</p>
<blockquote>
<p>The C-library  cddlib is a C implementation of the Double Description
Method of Motzkin et al. for generating all vertices (i.e. extreme points)
and extreme rays of a general convex polyhedron in R^d given by a system
of linear inequalities:</p>
<p>P = { x=(x1, ..., xd)^T :  b - A  x  &gt;= 0 }</p>
<p>where  A  is a given m x d real matrix, b is a given m-vector
and 0 is the m-vector of all zeros.</p>
<p>The program can be used for the reverse operation (i.e. convex hull
computation).  This means that  one can move back and forth between
an inequality representation  and a generator (i.e. vertex and ray)
representation of a polyhedron with cdd.  Also, cdd can solve a linear
programming problem, i.e. a problem of maximizing and minimizing
a linear function over P.</p>
</blockquote>
</article></div>