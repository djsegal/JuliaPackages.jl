<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-asejl" class="anchor" aria-hidden="true" href="#asejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ASE.jl</h1>
<p>Julia Bindings for the <a href="https://wiki.fysik.dtu.dk/ase/" rel="nofollow">Atomic Simulation Environment (ASE)</a></p>
<p><a href="https://travis-ci.org/JuliaMolSim/ASE.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/609bc0ae0c05a9548764153c4eaf4b558edc4351/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6f6c53696d2f4153452e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMolSim/ASE.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h3><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Summary</h3>
<p>Provides Julia wrappers for a limited subset of ASE's functionality, to be used within
<a href="https://github.com/libAtoms/JuLIP.jl">JuLIP.jl</a>. On top of <code>JuLIP.jl</code>, which is
a pure Julia library, <code>ASE.jl</code> also provides an interface to ASE, via <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>.</p>
<h3><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h3>
<p>To install</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ASE<span class="pl-pds">"</span></span>)</pre></div>
<p>Quick test</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ASE
at <span class="pl-k">=</span> <span class="pl-c1">bulk</span>(<span class="pl-s"><span class="pl-pds">"</span>Cu<span class="pl-pds">"</span></span>, cubic<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">*</span> <span class="pl-c1">2</span>        <span class="pl-c"><span class="pl-c">#</span> generate periodic Cu supercell</span>
<span class="pl-c1">deleteat!</span>(at, <span class="pl-c1">1</span>)                       <span class="pl-c"><span class="pl-c">#</span> vacancy defect</span>
emt <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>ase.calculators.emt<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> import the EMT model</span>
calc <span class="pl-k">=</span> <span class="pl-c1">ASECalculator</span>(emt<span class="pl-k">.</span><span class="pl-c1">EMT</span>())        <span class="pl-c"><span class="pl-c">#</span> wrap it into a Julia Object</span>
<span class="pl-c1">@show</span> <span class="pl-c1">energy</span>(calc, at)                 <span class="pl-c"><span class="pl-c">#</span> compute the energy</span>
<span class="pl-c"><span class="pl-c">#</span> -------------------------------------------</span>
<span class="pl-c"><span class="pl-c">#</span>  or to use more of the JuLIP framework:</span>
<span class="pl-c"><span class="pl-c">#</span> -------------------------------------------</span>
<span class="pl-c1">set_calculator!</span>(at, calc)
<span class="pl-c1">set_constraint!</span>(at, <span class="pl-c1">FixedCell</span>(at))
<span class="pl-c1">minimise!</span>(at)
<span class="pl-c1">@show</span> <span class="pl-c1">energy</span>(at)</pre></div>
<p>Note that in <code>ASE.jl</code> a bulk cell is generated using <code>bulk("Cu")</code> while
in <code>JuLIP.jl</code> it is generated using <code>bulk(:Cu)</code>. Conversion between
<code>ASE.ASEAtoms</code> and <code>JuLIP.Atoms</code> is via</p>
<pre><code>at1 = bulk(:Si)          # JuLIP.Atoms
at2 = ASEAtoms(at1)      # ASE.ASEAtoms
at3 = Atoms(at2)         # JuLIP.Atoms
@assert at1 == at3
</code></pre>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h3>
<ul>
<li>better integration with JuLIP, i.e. work with <code>JuLIP.Atoms</code> instead of
<code>ASEAtoms</code>, but this will require rewriting the <code>ASECalculators</code> a bit</li>
<li>provide more convenience functions to call ASE functionality</li>
</ul>
</article></div>