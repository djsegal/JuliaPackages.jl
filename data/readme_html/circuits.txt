<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-circuits" class="anchor" aria-hidden="true" href="#circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Circuits</h1>
<p dir="auto">Generate, visualize and analyze electrical networks.</p>
<h2 dir="auto"><a id="user-content-creating-a-circuit" class="anchor" aria-hidden="true" href="#creating-a-circuit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a circuit</h2>
<p dir="auto">The simplest way to create a circuit is through the <code>@circuit</code> macro.  As an
example, here a square network is generated with two named (<code>a</code> and  <code>b</code>) and
two unnamed (or rather not explicitly named) nodes, one voltage source, a
resistor and a capacitor in series and a capacitor and an inductor in parallel:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = @circuit begin
    b:(0,0) --&gt; VSource(3) --&gt; (1,0) --&gt; Resistor(4) --&gt; Inductor(2) --&gt; (1,1) --&gt; a:(0,1)
    :a --&gt; Capacitor(1) // Inductor(4) --&gt; :b
end"><pre>c <span class="pl-k">=</span> <span class="pl-c1">@circuit</span> <span class="pl-k">begin</span>
    b<span class="pl-k">:</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">VSource</span>(<span class="pl-c1">3</span>) <span class="pl-k">--&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">Resistor</span>(<span class="pl-c1">4</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">Inductor</span>(<span class="pl-c1">2</span>) <span class="pl-k">--&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>) <span class="pl-k">--&gt;</span> a<span class="pl-k">:</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
    <span class="pl-c1">:a</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">Capacitor</span>(<span class="pl-c1">1</span>) <span class="pl-k">//</span> <span class="pl-c1">Inductor</span>(<span class="pl-c1">4</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">:b</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-visualizing-a-circuit" class="anchor" aria-hidden="true" href="#visualizing-a-circuit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualizing a circuit</h2>
<p dir="auto">The normal <code>show</code> method for <code>Circuit</code>s just prints a brief summary (number of
nodes, number of sources, number of impedors (which is what I call RCL
components... if you're an electrical engineer and know a better word lmk)).</p>
<p dir="auto">To see the entire circuit, a method
<code>show(io::IO,::MIME"text/circuitikz",c::Circuit)</code> is implemented. If you use
this method to print to a file, and then <code>\input</code> that file inside a
<code>tikzpicture</code> in a LaTeX document with <code>circuitikz</code> loaded, it will draw the
circuit.</p>
<p dir="auto"><code>show(io,mime,c,shownodes=true)</code> will also show the node labels, which is
useful while modifying or analyzing the circuit.</p>
<h2 dir="auto"><a id="user-content-simplifying-a-network" class="anchor" aria-hidden="true" href="#simplifying-a-network"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simplifying a network</h2>
<p dir="auto">A <code>Parallel</code> will happily contain any collection of <code>Impedor</code>s,  except
<code>Parallel</code>s which will be expanded during construction
(<code>Parallel(a,Parallel(b,c)) = Parallel(a,b,c)</code>). And vice versa for <code>Series</code>.
But for calculations, a series or parallel coupling of the same type of
component can be simplified by either addition or reciprocal addition of their
characteristic parameters. <code>simplify(n::Network)</code> will walk through the tree and
combine the components like this, until you are left with a single component,
a <code>Series</code> of RCL components and <code>Parallel</code>s, a <code>Parallel</code> of RCL components and
<code>Series</code>, a <code>Short</code> or an <code>Open</code>.</p>
<h2 dir="auto"><a id="user-content-analyzing-a-network" class="anchor" aria-hidden="true" href="#analyzing-a-network"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Analyzing a network</h2>
<p dir="auto">For an <code>Impedor</code> (<code>Series</code>, <code>Parallel</code>, RCL component, <code>Short</code> or <code>Open</code>) <code>i</code>,
<code>voltageDivision(i,s)</code> returns  <code>א</code> such that component with index <code>k</code> has a
voltage drop <code>א[k]·V₀</code> if <code>i</code> has a total voltage drop <code>V₀</code>. <code>s</code> is the
complex frequency. By default this is <code>0</code> (DC voltage).</p>
<p dir="auto">For the network above, opening the voltage source and going from the node at
<code>(1,1)</code> to <code>b</code>, (i.e. <code>n = Series(Resistor(4),Inductor(2),Parallel(Capacitor(1),Inductor(4)))</code>),
<code>voltageDivision(n) == [1.0, 0.0, [0.0, 0.0]]</code> by which we can read that the
resistor experiences a voltage drop of <code>V₀</code>, and the rest of the components
none (as expected for DC voltage). <code>voltageDivision(n,1im) ==  [0.97 - 0.16im, 0.081 + 0.48im, [-0.054 - 0.32im, -0.054 - 0.32im]]</code> (so at <code>1</code> frequency
unit, those are the respective responses in each component).</p>
<p dir="auto">Current division works the same: <code>currentDivision(n) == [1, 1, [0.0, NaN]]</code>
(the NaN is from an <code>Inf/Inf</code>, a good symbolic package will probably fix this,
but for now I mostly read those as <code>1</code>s. <code>currentDivision(n,1im) == [1, 1, [1.33 + 0.0im, -0.33 - 0.0im]]</code>. That's probably right? Idk.</p>
<h2 dir="auto"><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To do</h2>
<ul dir="auto">
<li>Connect to LightGraphs.jl?</li>
<li>Function to extract <code>Network</code> from <code>Circuit</code> (at specific nodes)</li>
<li>More recursion in <code>simplify</code>. MOAR</li>
<li><code>Circuit</code> to matrix for computer circuit analysis</li>
<li>Bode diagrams</li>
<li>Power calculations</li>
<li>Get rid of some NaNs in current and voltage division</li>
<li>...</li>
</ul>

</article></div>