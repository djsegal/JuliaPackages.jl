<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tinyintjl" class="anchor" aria-hidden="true" href="#tinyintjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TinyInt.jl</h1>
<p><a href="https://travis-ci.org/mcovalt/TinyInt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd9a703c168998c27a9b682384833b9211a7364560268a9d8b61db03ad7b4b26/68747470733a2f2f7472617669732d63692e6f72672f6d636f76616c742f54696e79496e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcovalt/TinyInt.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>TinyInt.jl</code> is a Julia package for compressing integer vectors very quickly. Elements of the compressed integer vector can be accessed just as you would with a normal vector.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<ul>
<li>Julia 0.5 and up</li>
<li>GCC installed (Linux or macOS)</li>
<li><strong>Windows is unsupported at this time.</strong></li>
</ul>
<h2><a id="user-content-instalation" class="anchor" aria-hidden="true" href="#instalation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Instalation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;TinyInt&quot;)
julia&gt; Pkg.test(&quot;TinyInt&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TinyInt<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>TinyInt<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-what-is-tinyintjl" class="anchor" aria-hidden="true" href="#what-is-tinyintjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is TinyInt.jl?</h2>
<p><code>TinyInt.jl</code> quickly compresses and decompresses vectors of <em>unsigned</em> integers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TinyInt

x = rand(1:100, 20000000)
tinyx = pack(x)
Base.summarysize(x)
# 160000000
Base.summarysize(tinyx)
# 19531282
"><pre><span class="pl-k">using</span> TinyInt

x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">20000000</span>)
tinyx <span class="pl-k">=</span> <span class="pl-c1">pack</span>(x)
Base<span class="pl-k">.</span><span class="pl-c1">summarysize</span>(x)
<span class="pl-c"><span class="pl-c">#</span> 160000000</span>
Base<span class="pl-k">.</span><span class="pl-c1">summarysize</span>(tinyx)
<span class="pl-c"><span class="pl-c">#</span> 19531282</span></pre></div>
<p>Compression is fairly fast.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function pack_example(x)
  tinyx = pack(x)
end

x = rand(1:100, 20000000)
@time pack_example(x)
# 0.043057 seconds (156.52 k allocations: 32.373 MiB)
"><pre><span class="pl-k">function</span> <span class="pl-en">pack_example</span>(x)
  tinyx <span class="pl-k">=</span> <span class="pl-c1">pack</span>(x)
<span class="pl-k">end</span>

x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">20000000</span>)
<span class="pl-c1">@time</span> <span class="pl-c1">pack_example</span>(x)
<span class="pl-c"><span class="pl-c">#</span> 0.043057 seconds (156.52 k allocations: 32.373 MiB)</span></pre></div>
<p>Decompression is very fast.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function unpack_example(tinyx, out)
  unpack!(tinyx, out)
end

tinyx = pack(rand(1:100, 20000000))
out = zeros(UInt32, 20000000)
@time unpack_example(tinyx, out)
# 0.010429 seconds (5 allocations: 784 bytes)
"><pre><span class="pl-k">function</span> <span class="pl-en">unpack_example</span>(tinyx, out)
  <span class="pl-c1">unpack!</span>(tinyx, out)
<span class="pl-k">end</span>

tinyx <span class="pl-k">=</span> <span class="pl-c1">pack</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">20000000</span>))
out <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(UInt32, <span class="pl-c1">20000000</span>)
<span class="pl-c1">@time</span> <span class="pl-c1">unpack_example</span>(tinyx, out)
<span class="pl-c"><span class="pl-c">#</span> 0.010429 seconds (5 allocations: 784 bytes)</span></pre></div>
<p>Additionally, individual elements can be selected, but with a bit of CPU overhead.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function select_example(x)
  y = 0
  for i = 1:length(x)
    y += x[i]
  end
end

x = rand(1:100, 20000000)
tinyx = pack(x)
@time select_example(x)
# 0.009573 seconds (4 allocations: 160 bytes)
@time select_example(tinyx)
# 0.168778 seconds (4 allocations: 160 bytes)
"><pre><span class="pl-k">function</span> <span class="pl-en">select_example</span>(x)
  y <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
    y <span class="pl-k">+=</span> x[i]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">20000000</span>)
tinyx <span class="pl-k">=</span> <span class="pl-c1">pack</span>(x)
<span class="pl-c1">@time</span> <span class="pl-c1">select_example</span>(x)
<span class="pl-c"><span class="pl-c">#</span> 0.009573 seconds (4 allocations: 160 bytes)</span>
<span class="pl-c1">@time</span> <span class="pl-c1">select_example</span>(tinyx)
<span class="pl-c"><span class="pl-c">#</span> 0.168778 seconds (4 allocations: 160 bytes)</span></pre></div>
<p><em>These times are from a quad-core Intel® Core™ i7-4790 CPU @ 3.60GHz</em></p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pack(x)</code></td>
<td>Compresses integer vector and outputs compressed integer vector.</td>
</tr>
<tr>
<td><code>unpack(tinyx)</code></td>
<td>Decompresses integer vector and outputs decompressed integer vector.</td>
</tr>
<tr>
<td><code>unpack!(tinyx, out)</code></td>
<td>Decompresses integer vector, storing decompressed integers into <code>out</code>.</td>
</tr>
<tr>
<td><code>tinyx[i]</code></td>
<td>Outputs the <code>i'th</code> integer from a compressed vector.</td>
</tr>
<tr>
<td><code>length(tinyx)</code></td>
<td>Outputs the number of elements in a compressed vector.</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-low-level-functions" class="anchor" aria-hidden="true" href="#low-level-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-level Functions</h2>
<p>These functions are provided in order to give developers low-level access to the chunks of the compressed array.</p>
<table>
<thead>
<tr>
<th>Function                                         </th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>unpack(tinyx, chunk)</code></td>
<td>Decompresses an integer vector chunk and outputs decompressed integer vector chunk.</td>
</tr>
<tr>
<td><code>unpack!(tinyx, out, chunk)</code></td>
<td>Decompresses an integer vector chunk, storing decompressed integers into <code>out</code>. <br><strong>Important!</strong> Ensure <code>out</code> is a contiguous array of 128 <code>UInt32</code> integers. This function performs no bounds checking and is intended for speed critical applications.</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h2>
<ul>
<li><strong>The compressed vector is immutable.</strong> Once a compressed vector has been made, it's elements cannot be changed.</li>
<li><strong>Vectors are compressed into 128 32-bit unsigned integer chunks.</strong> This aids in SIMD operations. Vector chunks less than 128 integers are padded with zeros. This additional data is negligible for large vectors, but if your integer vector contains significantly less than 128 elements, this tool is likely not for you. To avoid integer type conversion costs with <code>unpack!</code>, ensure the vector being overwritten is a <code>Vector{UInt32}</code> type.</li>
<li><strong>The more random your elements, the less compression.</strong> There's not a great way to compress randomness.</li>
</ul>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>This Julia package uses the Frame-of-Reference compression code from <a href="https://github.com/lemire/simdcomp">the SIMDComp library</a>.</p>
</article></div>