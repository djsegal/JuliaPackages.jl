<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-singularintegralsjl" class="anchor" aria-hidden="true" href="#singularintegralsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SingularIntegrals.jl</h1>
<p dir="auto">A Julia package for computing singular integrals</p>
<p dir="auto"><a href="https://github.com/JuliaApproximation/SingularIntegrals.jl/actions"><img src="https://github.com/JuliaApproximation/SingularIntegrals.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/SingularIntegrals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2bb74be80d0ae19829438d1e4218ef326308c64cdc5a70ef2a969809f2f3f5a6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f53696e67756c6172496e74656772616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/SingularIntegrals.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://JuliaApproximation.github.io/SingularIntegrals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package supports computing singular integrals involving Hilbert/Stieltjes/Cauchy,
log, and power law kernels.</p>
<p dir="auto">Some examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SingularIntegrals, ClassicalOrthogonalPolynomials

julia&gt; P = Legendre(); x = axes(P, 1); f = expand(P, exp); #  expand exp(x) in Legendre polynomials

julia&gt; @time inv.(10 .- x') * f # Stieltjes: ∫₋₁¹ exp(x) / (10-x) dx
  0.000034 seconds (22 allocations: 2.266 KiB)
0.24332755428373515

julia&gt; @time inv.(0.1+0im .- x') * f - inv.(0.1-0im .- x') * f ≈ -2π*im*exp(0.1) # example of Plemelj
  0.000052 seconds (49 allocations: 6.031 KiB)
true

julia&gt; @time abs.(10 .- x') .^ 0.2 * f # Power law: ∫₋₁¹ (10-x)^0.2 * exp(x) dx
  0.000077 seconds (21 allocations: 1.875 KiB)
3.7006631248289135

julia&gt; @time abs.(0.3 .- x') .^ 0.2 * f # ∫₋₁¹ abs(0.3-x)^0.2 * exp(x) dx
  0.000040 seconds (25 allocations: 2.172 KiB)
1.9044201526740234

julia&gt; W = Weighted(ChebyshevU()); f = expand(W, x -&gt; exp(x) * sqrt(1-x^2));

julia&gt; @time log.(abs.(10 .- x')) * f # Log-kernel: ∫₋₁¹ log(10-x) * exp(x) * sqrt(1-x^2) dx
  0.000040 seconds (14 allocations: 400 bytes)
4.043032838853287

julia&gt; @time log.(abs.(0.3 .- x')) * f # ∫₋₁¹ log(abs(0.3-x)) * exp(x) * sqrt(1-x^2) dx
  0.000035 seconds (116 allocations: 6.250 KiB)
-2.320391559008445"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SingularIntegrals, ClassicalOrthogonalPolynomials

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Legendre</span>(); x <span class="pl-k">=</span> <span class="pl-c1">axes</span>(P, <span class="pl-c1">1</span>); f <span class="pl-k">=</span> <span class="pl-c1">expand</span>(P, exp); <span class="pl-c"><span class="pl-c">#</span>  expand exp(x) in Legendre polynomials</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">inv</span>.(<span class="pl-c1">10</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>) <span class="pl-k">*</span> f <span class="pl-c"><span class="pl-c">#</span> Stieltjes: ∫₋₁¹ exp(x) / (10-x) dx</span>
  <span class="pl-c1">0.000034</span> seconds (<span class="pl-c1">22</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.266</span> KiB)
<span class="pl-c1">0.24332755428373515</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">inv</span>.(<span class="pl-c1">0.1</span><span class="pl-k">+</span><span class="pl-c1">0im</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>) <span class="pl-k">*</span> f <span class="pl-k">-</span> <span class="pl-c1">inv</span>.(<span class="pl-c1">0.1</span><span class="pl-k">-</span><span class="pl-c1">0im</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>) <span class="pl-k">*</span> f <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">2</span>π<span class="pl-k">*</span>im<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span> example of Plemelj</span>
  <span class="pl-c1">0.000052</span> seconds (<span class="pl-c1">49</span> allocations<span class="pl-k">:</span> <span class="pl-c1">6.031</span> KiB)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">abs</span>.(<span class="pl-c1">10</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>) <span class="pl-k">.^</span> <span class="pl-c1">0.2</span> <span class="pl-k">*</span> f <span class="pl-c"><span class="pl-c">#</span> Power law: ∫₋₁¹ (10-x)^0.2 * exp(x) dx</span>
  <span class="pl-c1">0.000077</span> seconds (<span class="pl-c1">21</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.875</span> KiB)
<span class="pl-c1">3.7006631248289135</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">abs</span>.(<span class="pl-c1">0.3</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>) <span class="pl-k">.^</span> <span class="pl-c1">0.2</span> <span class="pl-k">*</span> f <span class="pl-c"><span class="pl-c">#</span> ∫₋₁¹ abs(0.3-x)^0.2 * exp(x) dx</span>
  <span class="pl-c1">0.000040</span> seconds (<span class="pl-c1">25</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.172</span> KiB)
<span class="pl-c1">1.9044201526740234</span>

julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">Weighted</span>(<span class="pl-c1">ChebyshevU</span>()); f <span class="pl-k">=</span> <span class="pl-c1">expand</span>(W, x <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(x) <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">log</span>.(<span class="pl-c1">abs</span>.(<span class="pl-c1">10</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>)) <span class="pl-k">*</span> f <span class="pl-c"><span class="pl-c">#</span> Log-kernel: ∫₋₁¹ log(10-x) * exp(x) * sqrt(1-x^2) dx</span>
  <span class="pl-c1">0.000040</span> seconds (<span class="pl-c1">14</span> allocations<span class="pl-k">:</span> <span class="pl-c1">400</span> bytes)
<span class="pl-c1">4.043032838853287</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">log</span>.(<span class="pl-c1">abs</span>.(<span class="pl-c1">0.3</span> <span class="pl-k">.-</span> x<span class="pl-k">'</span>)) <span class="pl-k">*</span> f <span class="pl-c"><span class="pl-c">#</span> ∫₋₁¹ log(abs(0.3-x)) * exp(x) * sqrt(1-x^2) dx</span>
  <span class="pl-c1">0.000035</span> seconds (<span class="pl-c1">116</span> allocations<span class="pl-k">:</span> <span class="pl-c1">6.250</span> KiB)
<span class="pl-k">-</span><span class="pl-c1">2.320391559008445</span></pre></div>
</article></div>