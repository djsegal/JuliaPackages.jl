<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-dancinglinks" class="anchor" aria-hidden="true" href="#dancinglinks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DancingLinks</h2>
<p dir="auto">A Julia implementation of D.Knuth's "Dancing Links" (DLX) a solver for the
"Exact Cover" problem.</p>
<p dir="auto">This a registered package so do this in Julia:</p>
<p dir="auto">] add DancingLinks</p>
<h2 dir="auto"><a id="user-content-exported" class="anchor" aria-hidden="true" href="#exported"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported:</h2>
<ul dir="auto">
<li>
<p dir="auto">exact_cover(matrix::Matrix{Bool}; do_check::Bool)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  'matrix' is the 'Exact Cover' incidence matrix
  Initializes global vars `incidence_matrix`, `nrows`, `ncols`.
  This must be executed before function `solve` is called."><pre class="notranslate"><code>  'matrix' is the 'Exact Cover' incidence matrix
  Initializes global vars `incidence_matrix`, `nrows`, `ncols`.
  This must be executed before function `solve` is called.
</code></pre></div>
</li>
<li>
<p dir="auto">solve(; verbose=false, max_solutions=1, deterministic=false)::Bool</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="   Solve the matrix with no starting state."><pre class="notranslate"><code>   Solve the matrix with no starting state.
</code></pre></div>
</li>
<li>
<p dir="auto">solve(starting_state::Vector{Int64}; verbose=false, max_solutions=1, deterministic=false)::Bool</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  starting_state    List of rows' by indices into the provided constraint matrix 
                      (global var `incidence_matrix`)
                     that should be removed - they are &quot;given&quot; as part of the solution.`
  [verbose]         Sets global `VERBOSE` flag; print timings, etc.
  [max_solutions]   Sets global `SOLUTIONSMAX`; number of solutions to find before returning.
  [deterministic]   Sets global `DO_DETERMINISTICALLY; false=select rows at random."><pre class="notranslate"><code>  starting_state    List of rows' by indices into the provided constraint matrix 
                      (global var `incidence_matrix`)
                     that should be removed - they are "given" as part of the solution.`
  [verbose]         Sets global `VERBOSE` flag; print timings, etc.
  [max_solutions]   Sets global `SOLUTIONSMAX`; number of solutions to find before returning.
  [deterministic]   Sets global `DO_DETERMINISTICALLY; false=select rows at random.
</code></pre></div>
</li>
<li>
<p dir="auto">solutions</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  The resulting list of solutions found (each solution is a Vector{Int64} of row indices into the global
  `incidence_matrix` and is ordered)."><pre class="notranslate"><code>  The resulting list of solutions found (each solution is a Vector{Int64} of row indices into the global
  `incidence_matrix` and is ordered).
</code></pre></div>
</li>
<li>
<p dir="auto">convert_nanoseconds(nanosecs::Real; ncols::Integer=0, units::Union{Nothing, Symbol}=nothing, omitunits::Bool=false)::String</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  Helper"><pre class="notranslate"><code>  Helper
</code></pre></div>
</li>
<li>
<p dir="auto">vector_sans_type(vec::AbstractVector)::String</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  Helper"><pre class="notranslate"><code>  Helper
</code></pre></div>
</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example:</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# build your incidence matrix first, a Matrix{Bool}
exact_cover(matrix)
solve() # get a random solution (without 'givens')
        # the result will be in exported global `solutions`"><pre class="notranslate"><code># build your incidence matrix first, a Matrix{Bool}
exact_cover(matrix)
solve() # get a random solution (without 'givens')
        # the result will be in exported global `solutions`
</code></pre></div>
<p dir="auto">Refer to the package "Sudoku2" for a thorough testing of this "DancingLinks" implementation.</p>
</article></div>