<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-circularlist" class="anchor" aria-hidden="true" href="#circularlist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CircularList</h1>
<p dir="auto"><a href="https://tk3369.github.io/CircularList.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tk3369/CircularList.jl/actions?query=workflow%3ACI"><img src="https://github.com/tk3369/CircularList.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/tk3369/CircularList-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4caa7c5a65b364aa5e8c016ebd066c60e877064590d606f6cd98c8b920ab5a5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f746b333336392f43697263756c61724c6973742e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/tk3369/CircularList.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tk3369/CircularList.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a3272ae3b2314ec4eefddded847b516f8f2daaf7e447153c3d871d120af16bb2/68747470733a2f2f636f6465636f762e696f2f67682f746b333336392f43697263756c61724c6973742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tk3369/CircularList.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/tk3369/CircularList.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/eb1f0ce58e84ff4a6e5b37b36358d3c0e03fe838cb0ffa4eb9f2d46b4459d34e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b333336392f43697263756c61724c6973742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tk3369/CircularList.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]add CircularList"><pre class="notranslate"><code>]add CircularList
</code></pre></div>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">It is essentially a <a href="https://en.wikipedia.org/wiki/Doubly_linked_list" rel="nofollow">doubly linked list</a>.</p>
<ul dir="auto">
<li>Adding a new node is <em>O(1)</em></li>
<li>Delete an existing node is <em>O(1)</em></li>
<li>Ability to handle millions of nodes</li>
</ul>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use?</h2>
<p dir="auto">To construct a circular list, you must start with at least 1 datum element.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="h = circularlist(0)      # CircularList.List(0)
h = circularlist([1,2])  # CircularList.List(1,2)"><pre class="notranslate"><code>h = circularlist(0)      # CircularList.List(0)
h = circularlist([1,2])  # CircularList.List(1,2)
</code></pre></div>
<p dir="auto">When inserting new data, the new node becomes the <em>head</em>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="h = circularlist(0)      # CircularList.List(0)
insert!(h, 1)            # CircularList.List(1,0)
insert!(h, 2)            # CircularList.List(2,0,1)
insert!(h, 3)            # CircularList.List(3,0,1,2)"><pre class="notranslate"><code>h = circularlist(0)      # CircularList.List(0)
insert!(h, 1)            # CircularList.List(1,0)
insert!(h, 2)            # CircularList.List(2,0,1)
insert!(h, 3)            # CircularList.List(3,0,1,2)
</code></pre></div>
<p dir="auto">When deleting the current node, the previous node becomes the <em>head</em>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="delete!(h)               # CircularList.List(2,0,1)"><pre class="notranslate"><code>delete!(h)               # CircularList.List(2,0,1)
</code></pre></div>
<p dir="auto">You can move the head pointer in any direction:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="forward!(h)              # CircularList.List(0,1,2)
backward!(h)             # CircularList.List(2,0,1)
shift!(h, 2)             # CircularList.List(1,2,0)
shift!(h, -2)            # CircularList.List(2,0,1)"><pre class="notranslate"><code>forward!(h)              # CircularList.List(0,1,2)
backward!(h)             # CircularList.List(2,0,1)
shift!(h, 2)             # CircularList.List(1,2,0)
shift!(h, -2)            # CircularList.List(2,0,1)
</code></pre></div>
<p dir="auto">Or, if you have a reference to a specific node, you can jump to that node directly and that node becomes the head!</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="jump!(h, node)"><pre class="notranslate"><code>jump!(h, node)
</code></pre></div>
<p dir="auto">You can get the current head and tail node as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="head(h)                  # CircularList.Node(2)
tail(h)                  # CircularList.Node(1)"><pre class="notranslate"><code>head(h)                  # CircularList.Node(2)
tail(h)                  # CircularList.Node(1)
</code></pre></div>
<p dir="auto">You can peek at the data of current, previous, or next nodes:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="current(h)               # 2
previous(h)              # 1
next(h)                  # 0"><pre class="notranslate"><code>current(h)               # 2
previous(h)              # 1
next(h)                  # 0
</code></pre></div>
<p dir="auto">Most methods returns <code>CircularList.List</code> so they are highly chainable:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Lazy

julia&gt; @&gt; h = circularlist(0) insert!(1) insert!(2) insert!(3) forward!
CircularList.List(0,1,2,3)"><pre class="notranslate"><code>julia&gt; using Lazy

julia&gt; @&gt; h = circularlist(0) insert!(1) insert!(2) insert!(3) forward!
CircularList.List(0,1,2,3)
</code></pre></div>
<p dir="auto">It is iteration friendly:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[x for x in h]           # Int[2,0,1]
sum(x for x in h)        # 3"><pre class="notranslate"><code>[x for x in h]           # Int[2,0,1]
sum(x for x in h)        # 3
</code></pre></div>
<h2 dir="auto"><a id="user-content-how-does-it-perform" class="anchor" aria-hidden="true" href="#how-does-it-perform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How does it perform?</h2>
<p dir="auto">Ingestion is fairly linear.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; @btime addmany(1000);
  24.908 μs (1003 allocations: 54.97 KiB)

julia&gt; @btime addmany(10000);
  255.348 μs (10004 allocations: 547.11 KiB)

julia&gt; @btime addmany(100000);
  2.852 ms (100004 allocations: 5.34 MiB)

julia&gt; @btime addmany(1000000);
  31.802 ms (1000004 allocations: 53.41 MiB)"><pre class="notranslate"><code>julia&gt; @btime addmany(1000);
  24.908 μs (1003 allocations: 54.97 KiB)

julia&gt; @btime addmany(10000);
  255.348 μs (10004 allocations: 547.11 KiB)

julia&gt; @btime addmany(100000);
  2.852 ms (100004 allocations: 5.34 MiB)

julia&gt; @btime addmany(1000000);
  31.802 ms (1000004 allocations: 53.41 MiB)
</code></pre></div>
</article></div>