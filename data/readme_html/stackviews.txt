<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stackviews" class="anchor" aria-hidden="true" href="#stackviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StackViews</h1>
<p dir="auto"><a href="https://github.com/JuliaArrays/StackViews.jl/actions"><img src="https://github.com/JuliaArrays/StackViews.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/StackViews.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1eb7509ae8ec9da2ed7d862bf8bec7e4034a0c2b5740916e7d025d9db3abc788/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f537461636b56696577732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaArrays/StackViews.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>StackViews</code> provides only one array type: <code>StackView</code>. There are multiple ways to understand <code>StackView</code>:</p>
<ul dir="auto">
<li>inverse of <code>eachslice</code></li>
<li><code>cat</code> variant</li>
<li>view object</li>
<li>lazy version of <code>repeat</code> special case</li>
</ul>
<h2 dir="auto"><a id="user-content-stackview-as-the-inverse-of-eachslice" class="anchor" aria-hidden="true" href="#stackview-as-the-inverse-of-eachslice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>StackView</code> as the inverse of <code>eachslice</code></h2>
<p dir="auto"><code>StackView</code> can be seen as the inverse of <code>eachslice</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StackViews

julia&gt; X = rand(100, 100);

julia&gt; StackView(collect(eachslice(X, dims=1)), 1) == X
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StackViews

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">eachslice</span>(X, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)), <span class="pl-c1">1</span>) <span class="pl-k">==</span> X
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-stackview-as-a-variant-of-cat" class="anchor" aria-hidden="true" href="#stackview-as-a-variant-of-cat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>StackView</code> as a variant of <code>cat</code></h2>
<p dir="auto"><code>StackView</code> works very similar to <code>cat</code> and its <code>vcat</code>/<code>hcat</code>/<code>hvcat</code> variants in Base.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StackViews

julia&gt; A = reshape(collect(1:6), 2, 3)
2×3 Matrix{Int64}:
 1  3  5
 2  4  6

julia&gt; B = reshape(collect(7:12), 2, 3)
2×3 Matrix{Int64}:
 7   9  11
 8  10  12

julia&gt; StackView(A, B; dims=3) # mostly equivalent to `cat(A, B, dims=3)`
2×3×2 StackView{Int64, 3, 3, ...}:
[:, :, 1] =
 1  3  5
 2  4  6

[:, :, 2] =
 7   9  11
 8  10  12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StackViews

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>), <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">12</span>), <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">7</span>   <span class="pl-c1">9</span>  <span class="pl-c1">11</span>
 <span class="pl-c1">8</span>  <span class="pl-c1">10</span>  <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(A, B; dims<span class="pl-k">=</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> mostly equivalent to `cat(A, B, dims=3)`</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> StackView{Int64, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-k">...</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">7</span>   <span class="pl-c1">9</span>  <span class="pl-c1">11</span>
 <span class="pl-c1">8</span>  <span class="pl-c1">10</span>  <span class="pl-c1">12</span></pre></div>
<p dir="auto">Unlike <code>cat</code>s, <code>StackView</code> always creats new dimension:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; StackView(A, B; dims=1) # `cat(A, B, dims=1)` outputs 4×3 Matrix
2×2×3 StackView{Int64, 3, 1, ...}:
[:, :, 1] =
 1  2
 7  8

[:, :, 2] =
 3   4
 9  10

[:, :, 3] =
  5   6
 11  12

julia&gt; StackView(A, B; dims=2) # `cat(A, B, dims=2)` outputs 2×6 Matrix
2×2×3 StackView{Int64, 3, 2, ...}:
[:, :, 1] =
 1  7
 2  8

[:, :, 2] =
 3   9
 4  10

[:, :, 3] =
 5  11
 6  12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(A, B; dims<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> `cat(A, B, dims=1)` outputs 4×3 Matrix</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> StackView{Int64, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-k">...</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">8</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">3</span>   <span class="pl-c1">4</span>
 <span class="pl-c1">9</span>  <span class="pl-c1">10</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
  <span class="pl-c1">5</span>   <span class="pl-c1">6</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(A, B; dims<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> `cat(A, B, dims=2)` outputs 2×6 Matrix</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> StackView{Int64, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-k">...</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">8</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">3</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">10</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">11</span>
 <span class="pl-c1">6</span>  <span class="pl-c1">12</span></pre></div>
<h2 dir="auto"><a id="user-content-stackview-as-a-view-object" class="anchor" aria-hidden="true" href="#stackview-as-a-view-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>StackView</code> as a view object</h2>
<p dir="auto">Without <code>StackView</code>, people use <code>reshape</code> + <code>cat</code> for the previous examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; StackView(A, B, dims=1) == cat(map(x-&gt;reshape(x, 1, axes(x)...), (A, B))...; dims=1)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(A, B, dims<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">cat</span>(<span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">reshape</span>(x, <span class="pl-c1">1</span>, <span class="pl-c1">axes</span>(x)<span class="pl-k">...</span>), (A, B))<span class="pl-k">...</span>; dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">but <code>StackView</code> is only a view and thus don't create any memory:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="frames = [rand(1000, 1000) for _ in 1:100];
@btime StackView($frames, Val(1)); # 143.905 ns (0 allocations: 0 bytes)
@btime cat(map(x-&gt;reshape(x, 1, axes(x)...), $frames)...; dims=1); # 1.127 s (1119 allocations: 763.06 MiB)"><pre>frames <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>];
<span class="pl-c1">@btime</span> <span class="pl-c1">StackView</span>(<span class="pl-k">$</span>frames, <span class="pl-c1">Val</span>(<span class="pl-c1">1</span>)); <span class="pl-c"><span class="pl-c">#</span> 143.905 ns (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">cat</span>(<span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">reshape</span>(x, <span class="pl-c1">1</span>, <span class="pl-c1">axes</span>(x)<span class="pl-k">...</span>), <span class="pl-k">$</span>frames)<span class="pl-k">...</span>; dims<span class="pl-k">=</span><span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">#</span> 1.127 s (1119 allocations: 763.06 MiB)</span></pre></div>
<p dir="auto">Of course, since it is a view, if you modify it, original arrays get modified, too:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = [1, 2, 3, 4]
B = [5, 6, 7, 8]
sv = StackView(A, B)
fill!(sv, -1) # A and B are modified
A == B == fill(-1, 4) # true"><pre>A <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
B <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>]
sv <span class="pl-k">=</span> <span class="pl-c1">StackView</span>(A, B)
<span class="pl-c1">fill!</span>(sv, <span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> A and B are modified</span>
A <span class="pl-k">==</span> B <span class="pl-k">==</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p dir="auto">If indexed in contiguous memeory order, it has almost zero overhead for <code>getindex</code> and <code>setindex!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function arrsum_cart(A::AbstractArray)
    rst = zero(eltype(A))
    @inbounds for I in CartesianIndices(A)
        rst += A[I]
    end
    return rst
end

As = StackView(frames);
Ac = cat(map(x-&gt;reshape(x, axes(x)..., 1), frames)...; dims=3);
As == Ac # true

@btime arrsum_cart($As); # 122.703 ms (0 allocations: 0 bytes)
@btime arrsum_cart($Ac); # 123.813 ms (0 allocations: 0 bytes)"><pre><span class="pl-k">function</span> <span class="pl-en">arrsum_cart</span>(A<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>)
    rst <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(A))
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> I <span class="pl-k">in</span> <span class="pl-c1">CartesianIndices</span>(A)
        rst <span class="pl-k">+=</span> A[I]
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> rst
<span class="pl-k">end</span>

As <span class="pl-k">=</span> <span class="pl-c1">StackView</span>(frames);
Ac <span class="pl-k">=</span> <span class="pl-c1">cat</span>(<span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">reshape</span>(x, <span class="pl-c1">axes</span>(x)<span class="pl-k">...</span>, <span class="pl-c1">1</span>), frames)<span class="pl-k">...</span>; dims<span class="pl-k">=</span><span class="pl-c1">3</span>);
As <span class="pl-k">==</span> Ac <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c1">@btime</span> <span class="pl-c1">arrsum_cart</span>(<span class="pl-k">$</span>As); <span class="pl-c"><span class="pl-c">#</span> 122.703 ms (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">arrsum_cart</span>(<span class="pl-k">$</span>Ac); <span class="pl-c"><span class="pl-c">#</span> 123.813 ms (0 allocations: 0 bytes)</span></pre></div>
<h2 dir="auto"><a id="user-content-stackview-as-a-lazy-version-of-repeat-special-case" class="anchor" aria-hidden="true" href="#stackview-as-a-lazy-version-of-repeat-special-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>StackView</code> as a lazy version of <code>repeat</code> special case</h2>
<p dir="auto"><code>StackView</code> allows you to stack the same array object multiple times, which makes a special
version of <code>repeat</code> when there's only one none-1 repeat count:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = rand(1000, 1000);
n = 100;
StackView([A for _ in 1:n]) == repeat(A, ntuple(_-&gt;1, ndims(A))..., n) # true
@btime StackView([$A for _ in 1:$n]); # 403.156 ns (2 allocations: 1.75 KiB)
@btime repeat($A, ntuple(_-&gt;1, ndims($A))..., $n) # 590.043 ms (4 allocations: 762.94 MiB)"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>);
n <span class="pl-k">=</span> <span class="pl-c1">100</span>;
<span class="pl-c1">StackView</span>([A <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]) <span class="pl-k">==</span> <span class="pl-c1">repeat</span>(A, <span class="pl-c1">ntuple</span>(_<span class="pl-k">-&gt;</span><span class="pl-c1">1</span>, <span class="pl-c1">ndims</span>(A))<span class="pl-k">...</span>, n) <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">StackView</span>([<span class="pl-k">$</span>A <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">$</span>n]); <span class="pl-c"><span class="pl-c">#</span> 403.156 ns (2 allocations: 1.75 KiB)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">repeat</span>(<span class="pl-k">$</span>A, <span class="pl-c1">ntuple</span>(_<span class="pl-k">-&gt;</span><span class="pl-c1">1</span>, <span class="pl-c1">ndims</span>(<span class="pl-k">$</span>A))<span class="pl-k">...</span>, <span class="pl-k">$</span>n) <span class="pl-c"><span class="pl-c">#</span> 590.043 ms (4 allocations: 762.94 MiB)</span></pre></div>
<h2 dir="auto"><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More examples</h2>
<p dir="auto">When arrays are of different types and sizes, <code>StackView</code> just kills <code>cat</code>s:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StackViews, PaddedViews

julia&gt; A = collect(reshape(1:8, 2, 4));

julia&gt; B = collect(reshape(9:16, 4, 2));

julia&gt; StackView(paddedviews(-1, A, B), 3)
4×4×2 StackView{Int64, 3, 3, ...}:
[:, :, 1] =
  1   3   5   7
  2   4   6   8
 -1  -1  -1  -1
 -1  -1  -1  -1

[:, :, 2] =
  9  13  -1  -1
 10  14  -1  -1
 11  15  -1  -1
 12  16  -1  -1

julia&gt; StackView(sym_paddedviews(-1, A, B), 3)
4×4×2 StackView{Int64, 3, 3, ...):
[:, :, 1] =
 -1  -1  -1  -1
  1   3   5   7
  2   4   6   8
 -1  -1  -1  -1

[:, :, 2] =
 -1   9  13  -1
 -1  10  14  -1
 -1  11  15  -1
 -1  12  16  -1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StackViews, PaddedViews

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>));

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">16</span>, <span class="pl-c1">4</span>, <span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(<span class="pl-c1">paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, A, B), <span class="pl-c1">3</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> StackView{Int64, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-k">...</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">3</span>   <span class="pl-c1">5</span>   <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">4</span>   <span class="pl-c1">6</span>   <span class="pl-c1">8</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
  <span class="pl-c1">9</span>  <span class="pl-c1">13</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">12</span>  <span class="pl-c1">16</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StackView</span>(<span class="pl-c1">sym_paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, A, B), <span class="pl-c1">3</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> StackView{Int64, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-k">...</span>)<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">3</span>   <span class="pl-c1">5</span>   <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">4</span>   <span class="pl-c1">6</span>   <span class="pl-c1">8</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">9</span>  <span class="pl-c1">13</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">12</span>  <span class="pl-c1">16</span>  <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">There is some mind work here but by chaining more views you can get some interesting result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PaddedViews, StackViews
using ImageCore, ImageShow, TestImages, ColorVectorSpace

toucan = testimage(&quot;toucan&quot;) # 150×162 RGBA image
moon = testimage(&quot;moon&quot;) # 256×256 Gray image

# equivalently, you can just use `mosaic(toucan, moon; nrow=1)`
mosaicview(StackView(sym_paddedviews(zero(RGB), toucan, moon)); nrow=1)"><pre><span class="pl-k">using</span> PaddedViews, StackViews
<span class="pl-k">using</span> ImageCore, ImageShow, TestImages, ColorVectorSpace

toucan <span class="pl-k">=</span> <span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>toucan<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 150×162 RGBA image</span>
moon <span class="pl-k">=</span> <span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>moon<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 256×256 Gray image</span>

<span class="pl-c"><span class="pl-c">#</span> equivalently, you can just use `mosaic(toucan, moon; nrow=1)`</span>
<span class="pl-c1">mosaicview</span>(<span class="pl-c1">StackView</span>(<span class="pl-c1">sym_paddedviews</span>(<span class="pl-c1">zero</span>(RGB), toucan, moon)); nrow<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/1525481/97542758-4b5ade80-1995-11eb-87cc-5fd2b0ba23fc.png"><img src="https://user-images.githubusercontent.com/1525481/97542758-4b5ade80-1995-11eb-87cc-5fd2b0ba23fc.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-other-similar-packages" class="anchor" aria-hidden="true" href="#other-similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other similar packages</h2>
<ul dir="auto">
<li>There's a lot of overlap between this and <a href="https://github.com/mcabbott/LazyStack.jl">LazyStack.jl</a>; I didn't notice its existance when I wrote this.</li>
</ul>
</article></div>