<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-computedfieldtypes" class="anchor" aria-hidden="true" href="#computedfieldtypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ComputedFieldTypes</h1>
<p dir="auto"><a href="https://github.com/vtjnash/ComputedFieldTypes.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/vtjnash/ComputedFieldTypes.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/vtjnash/ComputedFieldTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/709446f8723b216ab7c2b0908e70919f39069b10e98f42aeaaa35f34f02aee4c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f76746a6e6173682f436f6d70757465644669656c6454797065732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/vtjnash/ComputedFieldTypes.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Build types in Julia where some fields have computed types.</p>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<p dir="auto">Note that the following is not idiomatic Julia, and is probably not the most efficient solutions.
They are simply intended as demonstrations of <code>ComputedFieldTypes</code>.</p>
<p dir="auto">For simple cases, a default constructor will be added, if none is specified:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@computed struct A{V &lt;: AbstractVector}
    a::eltype(V)
end
a = A{Vector{Int}}(3.0)
a.a === Int(3)"><pre><span class="pl-c1">@computed</span> <span class="pl-k">struct</span> A{V <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector</span>}
    a<span class="pl-k">::</span><span class="pl-c1">eltype</span>(V)
<span class="pl-k">end</span>
a <span class="pl-k">=</span> <span class="pl-c1">A</span><span class="pl-c1">{Vector{Int}}</span>(<span class="pl-c1">3.0</span>)
a<span class="pl-k">.</span>a <span class="pl-k">===</span> <span class="pl-c1">Int</span>(<span class="pl-c1">3</span>)</pre></div>
<p dir="auto">It is also possible to declare your own constructor,
with extra type variables, parameterized, etc.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@computed struct B{N, M, T}
    a::NTuple{N + M, T}
    B(x::T) = new{N, M, T}(ntuple(i -&gt; x, N + M))
    B{S}(x::S) = B{N, M, T}(convert(T, x))
end

@computed struct C{T &lt;: Number}
    a::typeof(one(T) / one(T))
    C() = new(0)
    function C(x)
        return new(x)
    end
end"><pre><span class="pl-c1">@computed</span> <span class="pl-k">struct</span> B{N, M, T}
    a<span class="pl-k">::</span><span class="pl-c1">NTuple{N + M, T}</span>
    <span class="pl-en">B</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{N, M, T}</span>(<span class="pl-c1">ntuple</span>(i <span class="pl-k">-&gt;</span> x, N <span class="pl-k">+</span> M))
    <span class="pl-en">B</span><span class="pl-c1">{S}</span>(x<span class="pl-k">::</span><span class="pl-c1">S</span>) <span class="pl-k">=</span> <span class="pl-c1">B</span><span class="pl-c1">{N, M, T}</span>(<span class="pl-c1">convert</span>(T, x))
<span class="pl-k">end</span>

<span class="pl-c1">@computed</span> <span class="pl-k">struct</span> C{T <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>}
    a<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">one</span>(T) <span class="pl-k">/</span> <span class="pl-c1">one</span>(T))
    <span class="pl-en">C</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>)
    <span class="pl-k">function</span> <span class="pl-en">C</span>(x)
        <span class="pl-k">return</span> <span class="pl-c1">new</span>(x)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">If you need a fully expanded type definition (for example, for use as a field of another <code>@computed</code> type),
you can call <code>fulltype(T)</code> on any Type <code>T</code>.
Note, however, that since this is not the canonical form, it does not have any constructors defined for it.</p>
</article></div>