<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-computedfieldtypes" class="anchor" aria-hidden="true" href="#computedfieldtypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ComputedFieldTypes</h1>
<p>Build types in Julia where some fields have computed types.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>Note that the following is not idiomatic Julia, and is probably not the most efficient solutions.
They are simply intended as demonstrations of <code>ComputedFieldTypes</code>.</p>
<p>For simple cases, a default constructor will be added, if none is specified:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@computed</span> <span class="pl-k">struct</span> A{V <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector</span>}
    a<span class="pl-k">::</span><span class="pl-c1">eltype</span>(V)
<span class="pl-k">end</span>
a <span class="pl-k">=</span> <span class="pl-c1">A</span><span class="pl-c1">{Vector{Int}}</span>(<span class="pl-c1">3.0</span>)
a<span class="pl-k">.</span>a <span class="pl-k">===</span> <span class="pl-c1">Int</span>(<span class="pl-c1">3</span>)</pre></div>
<p>It is also possible to declare your own constructor,
with extra type variables, parameterized, etc.:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@computed</span> <span class="pl-k">struct</span> B{N, M, T}
    a<span class="pl-k">::</span><span class="pl-c1">NTuple{N + M, T}</span>
    <span class="pl-en">B</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{N, M, T}</span>(<span class="pl-c1">ntuple</span>(i <span class="pl-k">-&gt;</span> x, N <span class="pl-k">+</span> M))
    <span class="pl-en">B</span><span class="pl-c1">{S}</span>(x<span class="pl-k">::</span><span class="pl-c1">S</span>) <span class="pl-k">=</span> <span class="pl-c1">B</span><span class="pl-c1">{N, M, T}</span>(<span class="pl-c1">convert</span>(T, x))
<span class="pl-k">end</span>

<span class="pl-c1">@computed</span> <span class="pl-k">struct</span> C{T <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>}
    a<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">one</span>(T) <span class="pl-k">/</span> <span class="pl-c1">one</span>(T))
    <span class="pl-en">C</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>)
    <span class="pl-k">function</span> <span class="pl-en">C</span>(x)
        <span class="pl-k">return</span> <span class="pl-c1">new</span>(x)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>If you need a fully expanded type definition (for example, for use as a field of another <code>@computed</code> type),
you can call <code>fulltype(T)</code> on any Type <code>T</code>.
Note, however, that since this is not the canonical form, it does not have any constructors defined for it.</p>
</article></div>