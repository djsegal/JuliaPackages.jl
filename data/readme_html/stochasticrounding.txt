<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/milankl/StochasticRounding.jl.svg" rel="nofollow"><img src="https://camo.githubusercontent.com/cb4f0595acfaa838aaa4e05f7fb4214431d6447d/68747470733a2f2f7472617669732d63692e636f6d2f6d696c616e6b6c2f53746f63686173746963526f756e64696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/milankl/StochasticRounding.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-stochasticrounding" class="anchor" aria-hidden="true" href="#stochasticrounding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StochasticRounding</h1>
<p>This package exports <code>Float16sr</code> and <code>BFloat16sr</code>. Two number formats that behave like their deterministic counterparts but with stochastic rounding that is proportional to the distance of the next representable numbers and therefore <a href="https://en.wikipedia.org/wiki/Rounding#Stochastic_rounding" rel="nofollow">exact in expectation</a> (see also example below in "Usage"). Although there is currently no known hardware implementation available, <a href="https://www.graphcore.ai/posts/directions-of-ai-research" rel="nofollow">Graphcore is working on IPUs with stochastic rounding</a>. Stochastic rounding makes the current <code>Float16</code>/<code>BFloat16</code> software implementations considerably slower, but only x15/x3, respectively. <a href="https://sunoru.github.io/RandomNumbers.jl/stable/man/xorshifts/#Xorshift-Family-1" rel="nofollow">Xoroshio128Plus</a>, a random number generator from the <a href="https://en.wikipedia.org/wiki/Xorshift" rel="nofollow">Xorshift family</a>, is used through the <a href="https://github.com/sunoru/RandomNumbers.jl">RandomNumbers.jl</a> package.</p>
<p>Stochastic rounding is only applied on arithmetic operations, and not on type conversions or for subnormal numbers (standard round to nearest instead).</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">BFloat16sr</span>(<span class="pl-c1">1.0</span>)
<span class="pl-c1">BFloat16sr</span>(<span class="pl-c1">1.0</span>)
julia<span class="pl-k">&gt;</span> a<span class="pl-k">/</span><span class="pl-c1">3</span>
<span class="pl-c1">BFloat16sr</span>(<span class="pl-c1">0.33398438</span>)
julia<span class="pl-k">&gt;</span> a<span class="pl-k">/</span><span class="pl-c1">3</span>
<span class="pl-c1">BFloat16sr</span>(<span class="pl-c1">0.33203125</span>)</pre></div>
<p>As <code>1/3</code> is not exactly representable the rounding will be at 66.6% chance towards 0.33398438 and at 33.3% towards 0.33203125 such that in expectation the result is 0.33333... and therefore exact. You can use <code>BFloat16_chance_roundup(x::Float32)</code> to get the chance that <code>x</code> will be round up.</p>
<h3><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Theory</h3>
<p>Round nearest (tie to even) is the standard rounding mode for IEEE floats. Stochastic rounding is explained in the following schematic</p>
<p><a target="_blank" rel="noopener noreferrer" href="figs/schematic.png"><img src="figs/schematic.png" style="max-width:100%;"></a></p>
<p>The exact result x of an arithmetic operation (located at one fifth between x₂ and x₃ in this example) is round down to x₂ for round to nearest rounding mode.
For stochastic rounding only at 80% chance x is round down, in 20% chance it is round up to x₃, proportional to the distance of x between x₂ and x₃.</p>
<h3><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StochasticRounding, BenchmarkTools
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>);
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BFloat16</span>.(A);
julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">BFloat16sr</span>.(A);
julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Float16</span>.(A);
julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">Float16sr</span>.(A);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>A,<span class="pl-k">$</span>A);                <span class="pl-c"><span class="pl-c">#</span> Float32</span>
  <span class="pl-c1">304.975</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.81</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>B,<span class="pl-k">$</span>B);                <span class="pl-c"><span class="pl-c">#</span> BFloat16</span>
  <span class="pl-c1">569.064</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.91</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>C,<span class="pl-k">$</span>C);                <span class="pl-c"><span class="pl-c">#</span> BFloat16sr</span>
  <span class="pl-c1">8.354</span> ms (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.91</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>D,<span class="pl-k">$</span>D);                <span class="pl-c"><span class="pl-c">#</span> Float16</span>
  <span class="pl-c1">7.377</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.91</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>E,<span class="pl-k">$</span>E);                <span class="pl-c"><span class="pl-c">#</span> Float16sr</span>
  <span class="pl-c1">23.423</span> ms (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.91</span> MiB)</pre></div>
<p>Stochastic rounding imposes a x15 performance decrease for BFloat16 and x3 for Float16.</p>
</article></div>