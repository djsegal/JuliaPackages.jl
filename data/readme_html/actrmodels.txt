<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-actrmodels" class="anchor" aria-hidden="true" href="#actrmodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ACTRModels</h1>
<p dir="auto">The goal of ACTRModels.jl is to provide basic functionality developing likelihood functions for the ACT-R cognitive architecture and generating simulated data. Currently, the library focuses primarily on declarative memory, but functionality can be be extended to other modules.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">The following example demonstrates how to construct an ACTR object containing declarative memory, retrieve a memory, and compute retrieval time.</p>
<h2 dir="auto"><a id="user-content-simulate-data" class="anchor" aria-hidden="true" href="#simulate-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simulate Data</h2>
<p dir="auto">The following code block provides a simple illustration of retrieving a memory and computing retrieval time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ACTRModels, Random, Plots

Random.seed!(87545)
# create chunks of declarative knowledge
chunks = [Chunk(;name=:Bob, department=:accounting),
    Chunk(;name=:Alice, department=:HR)]

# initialize declarative memory
declarative = Declarative(memory=chunks)

# specify model parameters: partial matching, noise, mismatch penalty, activation noise
Θ = (mmp=true, noise=true, δ=1.0, s=.2)  

# create an ACT-R object with activation noise and partial matching
actr = ACTR(;declarative, Θ...)

# retrieve a chunk associated with accounting
chunk = retrieve(actr; department=:accounting)
# generate a reaction time 
rt = compute_RT(actr, chunk)"><pre><span class="pl-k">using</span> ACTRModels, Random, Plots

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">87545</span>)
<span class="pl-c"><span class="pl-c">#</span> create chunks of declarative knowledge</span>
chunks <span class="pl-k">=</span> [<span class="pl-c1">Chunk</span>(;name<span class="pl-k">=</span><span class="pl-c1">:Bob</span>, department<span class="pl-k">=</span><span class="pl-c1">:accounting</span>),
    <span class="pl-c1">Chunk</span>(;name<span class="pl-k">=</span><span class="pl-c1">:Alice</span>, department<span class="pl-k">=</span><span class="pl-c1">:HR</span>)]

<span class="pl-c"><span class="pl-c">#</span> initialize declarative memory</span>
declarative <span class="pl-k">=</span> <span class="pl-c1">Declarative</span>(memory<span class="pl-k">=</span>chunks)

<span class="pl-c"><span class="pl-c">#</span> specify model parameters: partial matching, noise, mismatch penalty, activation noise</span>
Θ <span class="pl-k">=</span> (mmp<span class="pl-k">=</span><span class="pl-c1">true</span>, noise<span class="pl-k">=</span><span class="pl-c1">true</span>, δ<span class="pl-k">=</span><span class="pl-c1">1.0</span>, s<span class="pl-k">=</span>.<span class="pl-c1">2</span>)  

<span class="pl-c"><span class="pl-c">#</span> create an ACT-R object with activation noise and partial matching</span>
actr <span class="pl-k">=</span> <span class="pl-c1">ACTR</span>(;declarative, Θ<span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> retrieve a chunk associated with accounting</span>
chunk <span class="pl-k">=</span> <span class="pl-c1">retrieve</span>(actr; department<span class="pl-k">=</span><span class="pl-c1">:accounting</span>)
<span class="pl-c"><span class="pl-c">#</span> generate a reaction time </span>
rt <span class="pl-k">=</span> <span class="pl-c1">compute_RT</span>(actr, chunk)</pre></div>
<h2 dir="auto"><a id="user-content-log-likelihood" class="anchor" aria-hidden="true" href="#log-likelihood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Log Likelihood</h2>
<p dir="auto">Now that we have generated simulated data it is possible to compute the logpdf using a lognormal race process.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# index of retrieved chunk 
chunk_idx = find_index(chunk)
# compute activation for each chunk
compute_activation!(actr; department=:accounting)
# get mean activation
μ = get_mean_activations(actr)
# standard deviation 
σ = Θ.s * pi / sqrt(3)
# lognormal race distribution object
dist = LNR(;μ=-μ, σ, ϕ=0.0)
# log pdf of retrieval time
logpdf(dist, chunk_idx, rt)"><pre><span class="pl-c"><span class="pl-c">#</span> index of retrieved chunk </span>
chunk_idx <span class="pl-k">=</span> <span class="pl-c1">find_index</span>(chunk)
<span class="pl-c"><span class="pl-c">#</span> compute activation for each chunk</span>
<span class="pl-c1">compute_activation!</span>(actr; department<span class="pl-k">=</span><span class="pl-c1">:accounting</span>)
<span class="pl-c"><span class="pl-c">#</span> get mean activation</span>
μ <span class="pl-k">=</span> <span class="pl-c1">get_mean_activations</span>(actr)
<span class="pl-c"><span class="pl-c">#</span> standard deviation </span>
σ <span class="pl-k">=</span> Θ<span class="pl-k">.</span>s <span class="pl-k">*</span> <span class="pl-c1">pi</span> <span class="pl-k">/</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> lognormal race distribution object</span>
dist <span class="pl-k">=</span> <span class="pl-c1">LNR</span>(;μ<span class="pl-k">=</span><span class="pl-k">-</span>μ, σ, ϕ<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
<span class="pl-c"><span class="pl-c">#</span> log pdf of retrieval time</span>
<span class="pl-c1">logpdf</span>(dist, chunk_idx, rt)</pre></div>
<h2 dir="auto"><a id="user-content-pdf-overlay" class="anchor" aria-hidden="true" href="#pdf-overlay"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PDF Overlay</h2>
<p dir="auto">In the following code block, the PDF is superimposed on the histogram of simulated retrieval
times. Visual inspection indicates that the PDF accurately characterizes the simulated data.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# index for accounting
idx = find_index(actr; department=:accounting)
# generate retrieval times
rts = rand(dist, 10^5)
# extract rts for accounting
acc_rts = filter(x-&gt;x[1] == idx, rts) .|&gt; x-&gt; x[2]
# probability of retrieving accounting
p_acc = length(acc_rts)/length(rts)
# histogram of retrieval times
hist = histogram(acc_rts, color=:grey, leg=false, grid=false, size=(500,300),
    bins = 100, norm=true, xlabel=&quot;Retrieval Time&quot;, ylabel=&quot;Density&quot;)
# weight histogram according to retrieval probability
hist[1][1][:y] *= p_acc
# collection of retrieval time values
x = 0:.01:3
# density for each x value
dens = pdf.(dist, idx, x)
# overlay PDF on histogram
plot!(hist, x, dens, color=:darkorange, linewidth=1.5, xlims=(0,3))"><pre><span class="pl-c"><span class="pl-c">#</span> index for accounting</span>
idx <span class="pl-k">=</span> <span class="pl-c1">find_index</span>(actr; department<span class="pl-k">=</span><span class="pl-c1">:accounting</span>)
<span class="pl-c"><span class="pl-c">#</span> generate retrieval times</span>
rts <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> extract rts for accounting</span>
acc_rts <span class="pl-k">=</span> <span class="pl-c1">filter</span>(x<span class="pl-k">-&gt;</span>x[<span class="pl-c1">1</span>] <span class="pl-k">==</span> idx, rts) <span class="pl-k">.|</span><span class="pl-k">&gt;</span> x<span class="pl-k">-&gt;</span> x[<span class="pl-c1">2</span>]
<span class="pl-c"><span class="pl-c">#</span> probability of retrieving accounting</span>
p_acc <span class="pl-k">=</span> <span class="pl-c1">length</span>(acc_rts)<span class="pl-k">/</span><span class="pl-c1">length</span>(rts)
<span class="pl-c"><span class="pl-c">#</span> histogram of retrieval times</span>
hist <span class="pl-k">=</span> <span class="pl-c1">histogram</span>(acc_rts, color<span class="pl-k">=</span><span class="pl-c1">:grey</span>, leg<span class="pl-k">=</span><span class="pl-c1">false</span>, grid<span class="pl-k">=</span><span class="pl-c1">false</span>, size<span class="pl-k">=</span>(<span class="pl-c1">500</span>,<span class="pl-c1">300</span>),
    bins <span class="pl-k">=</span> <span class="pl-c1">100</span>, norm<span class="pl-k">=</span><span class="pl-c1">true</span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Retrieval Time<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Density<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> weight histogram according to retrieval probability</span>
hist[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>][<span class="pl-c1">:y</span>] <span class="pl-k">*=</span> p_acc
<span class="pl-c"><span class="pl-c">#</span> collection of retrieval time values</span>
x <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span>.<span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">3</span>
<span class="pl-c"><span class="pl-c">#</span> density for each x value</span>
dens <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, idx, x)
<span class="pl-c"><span class="pl-c">#</span> overlay PDF on histogram</span>
<span class="pl-c1">plot!</span>(hist, x, dens, color<span class="pl-k">=</span><span class="pl-c1">:darkorange</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">1.5</span>, xlims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">3</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="hist.png"><img src="hist.png" alt="" width="500" height="300" style="max-width: 100%;"></a></p>
</article></div>