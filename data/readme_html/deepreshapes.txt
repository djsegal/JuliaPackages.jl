<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-deepreshapes" class="anchor" aria-hidden="true" href="#deepreshapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DeepReshapes</h1>
<p>Extends
<a href="http://julia.readthedocs.org/en/latest/stdlib/base/#Base.reshape" rel="nofollow">reshape</a>
to arbitrarily nested structures of <code>Tuple</code>s and <code>Array</code>s, both in source and
target. Also provides a deep <code>flatten</code> function that transforms these structures
into a flat <code>Vector</code>.</p>
<p>As I am pretty new to Julia, before I consider registering this package, I would
like a code review to know whether I am actually doing this "right". Please just
have a look, and if you think this is useful and ready, open an issue or
something like that.</p>
<p>Note that this only works on Julia 0.4 right now.</p>
<h2><a id="user-content-what" class="anchor" aria-hidden="true" href="#what"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What?</h2>
<p>Provides a <code>deep_reshape</code> function that can transform the structure of data:</p>
<pre><code>A = [1 2; 3 4; 5 6]
b = [1, 2, 3, 4]
deep_reshape((A, b), (2, 5))
# =&gt; [1 5 4 1 3;
#     3 2 6 2 4]

deep_reshape([1:25], ((3, 3), (4, 4)))
# =&gt; ([ 1  4  7;
#       2  5  8;
#       3  6  9],
#     [10 14 18 22;
#      11 15 19 23;
#      12 16 20 24;
#      13 17 21 25])

α, β, c = deep_reshape([1.23, 2.34, 3, 4, 5], (Float64, Float64, (Int, 3)))
# =&gt; (1.23,2.34,[3,4,5])
</code></pre>
<p>This works on all (potentially nested) structures of <code>Tuple</code>s and <code>Array</code>s, as
long as the actual scalar values contained within are <code>Number</code>s (for now).</p>
<h2><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why?</h2>
<p>Say you want to optimize a non-linear function. Many optimization frameworks
(<a href="https://github.com/JuliaOpt/NLopt.jl">NLopt</a>,
<a href="https://github.com/JuliaOpt/Optim.jl">Optim</a>) require you to supply cost and
gradient functions and expect them to operate on plain <code>Vector{Float64}</code>s for
that purpose. However, some algorithms are expressed more naturally in terms of
more structured data.</p>
<p>Consider for example the popular
[backpropagation algorithm]
(<a href="http://ufldl.stanford.edu/wiki/index.php/Backpropagation_Algorithm" rel="nofollow">http://ufldl.stanford.edu/wiki/index.php/Backpropagation_Algorithm</a>)
for training neural networks. The outline of the gradient calculation might look
like this:</p>
<pre><code>function cost_and_gradient!(
  W::Vector{Matrix{Float64}},  # weight matrices for each neuron layer
  b::Vector{Vector{Float64}},  # bias vectors for each neuron layer
  ∇W::Vector{Matrix{Float64}}, # vector to receive resulting weight gradients
  ∇b::Vector{Vector{Float64}}  # vector to receive resulting bias gradients
)
  # ...do feedforward and backpropagation, obtain some intermediate results
  # ...calculate gradients and fill the result vectors ∇W and ∇b
  # ...calculate and return the cost
end
</code></pre>
<p>For optimization, we cannot use this function directly, because the optimization
package expects it to work on plain number vectors:</p>
<pre><code>using NLopt

W, b = initialize_parameters()
# ...we need to flatten W, b to number vector θ

optimization = Opt(:LD_LBFGS, length(θ))
min_objective!(optimization, cost_and_gradient!) # &lt;- we need to define this
result = optimize(optimization, θ)
</code></pre>
<p>Flattening the initial parameters is easy with <code>flatten</code>:</p>
<pre><code>using DeepReshapes

θ = flatten(Float64, W, b)
</code></pre>
<p>As for <code>cost_and_gradient!</code>, we can simply wrap the original calculation with
<code>deep_reshape</code>s:</p>
<pre><code>function cost_and_gradient!(θ::Vector{Float64}, ∇θ::Vector{Float64})
  W, b = deep_reshape(θ, s) # &lt;- s is a specification of the original structure
                            # which can be obtained by calling describe on the
                            # initial parameters before flattening them.

  # ...do the original calculation
  ∇θ[:] = flatten(Float64, ∇W, ∇b)
  # ... calculate and return the cost
end
</code></pre>
<h2><a id="user-content-how" class="anchor" aria-hidden="true" href="#how"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How?</h2>
<p>A deep reshape consists of two independent processes: a <em>producer</em> that
recursively walks the input to produce scalar values, and a <em>consumer</em> that
consumes these values and puts them into a new object according to a structure
specification:</p>
<pre><code>result = deep_reshape(input, specification)
</code></pre>
<h3><a id="user-content-source" class="anchor" aria-hidden="true" href="#source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Source</h3>
<p>The input can be any object, but by default, the producer only descends into
Arrays and Tuples and considers anything else to be a scalar:</p>
<pre><code>deep_reshape([1:4], (2, 2)) # =&gt; Any[1 3; 2 4]
deep_reshape(1:4, (2, 2))   # =&gt; Any[1:4 (); () ()]
</code></pre>
<p>What objects to descend into can be overridden through the optional <code>Deep</code>
argument:</p>
<pre><code>deep_reshape(1:4, (2, 2), Deep = Range)
</code></pre>
<p>Any input of type <code>Deep</code> will be considered iterable and all contained values
will be produced. Any other input will be considered scalar and produced
directly, without further recursion.</p>
<h3><a id="user-content-target" class="anchor" aria-hidden="true" href="#target"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Target</h3>
<p>The produced scalars will then be assigned into the objects under construction
according to the specification, which is of the following format:</p>
<ul>
<li>An empty tuple <code>()</code> describes <code>Any</code> value.</li>
<li>A <code>Type</code> describes a value of that type.</li>
<li>A tuple of <code>(Integer...)</code> dimensions describes an <code>Any[]</code> with these
dimensions.</li>
<li>A tuple <code>(Type, Integer...)</code> of a type and dimensions describes an Array
with that element type and these dimensions.</li>
<li>Any other <code>Tuple</code> recursively describes a tuple, where each contained value
describes an entry of the result.</li>
<li>An <code>Array</code> recursively describes an array in the same way.</li>
</ul>
<p>For simple inputs (recursively) consisting only of <code>Tuple</code>s, <code>Array</code>s and
scalars, <code>describe()</code> returns the corresponding specification:</p>
<pre><code>s = describe(([1:10], [1 2; 3 4])) # =&gt; ((Int, 10), (Int, 2, 2))
</code></pre>
<p>These can be used directly as <code>deep_reshape</code> specifications:</p>
<pre><code>nested = deep_reshape([1:14], s)
# =&gt; ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
#     [11 13;
#      12 14])
</code></pre>
<h3><a id="user-content-flatten-and-pack" class="anchor" aria-hidden="true" href="#flatten-and-pack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>flatten and pack</h3>
<p>There is also a convenience function <code>flatten</code> that can recursively flattens the
input to a <code>Vector</code>, optionally with a fixed target type that the scalars are to
be converted to:</p>
<pre><code>flatten(nested)
# =&gt; Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

flatten(Int, nested)
# =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
</code></pre>
<p>The very similar <code>pack</code> function returns both the flattened <code>Vector</code> and the
original structure as defined by <code>describe</code>. This can be used to later reverse
the flattening:</p>
<pre><code>flattened, s = pack(Int, ([1:10], [1 2; 3 4]))
# =&gt; ([1,2,3,4,5,6,7,8,9,10,1,3,2,4],(((Int,10),(Int,2,2)),))

deep_reshape(flattened, s)
# =&gt; ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
#     [11 13;
#      12 14])
</code></pre>
</article></div>