<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lightgraphsmatching" class="anchor" aria-hidden="true" href="#lightgraphsmatching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LightGraphsMatching</h1>
<p><a href="https://travis-ci.org/JuliaGraphs/LightGraphsMatching.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69bf16a1c81843677023f99b572286e68b0fd75e/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f4c696768744772617068734d61746368696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/LightGraphsMatching.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/JuliaGraphs/LightGraphsMatching.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6c2ed4fae6ea8192df4b0c6f28c19717ce6fdc54/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614772617068732f4c696768744772617068734d61746368696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphs/LightGraphsMatching.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/JuliaGraphs/LightGraphsMatching.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f31c33d037115d1d4c2b7dc5bb7e7f13c47d1cbe/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614772617068732f4c696768744772617068734d61746368696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGraphs/LightGraphsMatching.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Matching algorithms on top of <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The results of any matching is returned as a <code>MatchingResult</code> struct
containing the <code>mate</code> and <code>weight</code> fields.</p>
<h3><a id="user-content-perfect-matching" class="anchor" aria-hidden="true" href="#perfect-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Perfect matching</h3>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">complete_graph</span>(<span class="pl-c1">4</span>)
w <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Edge,Float64}</span>()
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)] <span class="pl-k">=</span> <span class="pl-c1">10</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>)] <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)] <span class="pl-k">=</span> <span class="pl-c1">11</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)] <span class="pl-k">=</span> <span class="pl-c1">2</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)] <span class="pl-k">=</span> <span class="pl-c1">100</span>

<span class="pl-c"><span class="pl-c">#</span> find the perfect matching of minimum weight</span>
match <span class="pl-k">=</span> <span class="pl-c1">minimum_weight_perfect_matching</span>(g, w, <span class="pl-c1">50</span>)
<span class="pl-c"><span class="pl-c">#</span> match.mate[1] == 4</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[4] == 1</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[2] == 3</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[3] == 2</span>
<span class="pl-c"><span class="pl-c">#</span> match.weight ≈ 11.5</span></pre></div>
<h3><a id="user-content-maximum-weight-matching" class="anchor" aria-hidden="true" href="#maximum-weight-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Maximum weight matching</h3>
<p>A maximum weight matching is solved as a Linear Programming
problem and requires an LP optimizer for bipartite graphs and a MILP solver for general graphs respecting the <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a> optimizer interface. A list of solvers can be found in the <a href="http://www.juliaopt.org/JuMP.jl/v0.19.0/installation/#Getting-Solvers-1" rel="nofollow">JuMP documentation</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Cbc <span class="pl-c"><span class="pl-c">#</span>import a MILP solver</span>
g <span class="pl-k">=</span> <span class="pl-c1">complete_graph</span>(<span class="pl-c1">3</span>)
w <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
w[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
w[<span class="pl-c1">3</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
w[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
match <span class="pl-k">=</span> <span class="pl-c1">maximum_weight_matching</span>(g,<span class="pl-c1">with_optimizer</span>(Cbc<span class="pl-k">.</span>Optimizer, logLevel<span class="pl-k">=</span><span class="pl-c1">0</span>),w)
<span class="pl-c"><span class="pl-c">#</span> match.weight ≈ 1</span></pre></div>
</article></div>