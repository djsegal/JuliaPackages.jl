<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-topology-optimization-with-julia" class="anchor" aria-hidden="true" href="#topology-optimization-with-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Topology Optimization with Julia</h1>
<p dir="auto">Code for 2-D topology optimization with Julia (<a href="https://julialang.org/" rel="nofollow">https://julialang.org/</a>).
The code translates in Julia the 88 line Matlab code (<a href="https://www.topopt.mek.dtu.dk/Apps-and-software/Efficient-topology-optimization-in-MATLAB" rel="nofollow">top88.m</a>) for 2-D topology optimization.
Details of the Matlab implementation are discussed in the paper:<br>
"Efficient topology optimization in MATLAB using 88 lines of code, E. Andreassen, A. Clausen, M. Schevenels, B. S. Lazarov and O. Sigmund, Struct Multidisc Optim, Volume 43, Issue 1, p.1 - 16, (2011)."</p>
<p dir="auto">To use the code, type in Julia:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="include(&quot;TopOpt_Julia.jl&quot;)
TopOptOC()"><pre class="notranslate"><code>include("TopOpt_Julia.jl")
TopOptOC()
</code></pre></div>
<p dir="auto">In this way the code runs with the default input values.<br>
The main function is defined as: TopOptOC(nelx, nely, rmin, volfrac, penal, ft), where:</p>
<ul dir="auto">
  <li><i>nelx</i> is the number of finite elements in the x direction;</li> 
  <li><i>nely</i> is the number of finite elements in the y direction;</li> 
  <li><i>rmin</i> is the filter radius;</li>
  <li><i>volfrac</i> is the solid volume fraction allowed;</li> 
  <li><i>penal</i> is the parameter that defines the SIMP interpolation scheme;</li>
  <li><i>ft</i> is the type of filtering, ft=1 activates the sensitivity filter, ft=2 activates the density filter.</li> 
</ul>
<p dir="auto">Extensions and improvements are welcome and strongly encouraged <g-emoji class="g-emoji" alias="smiley" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png">ðŸ˜ƒ</g-emoji></p>
<p dir="auto">If you have used the topology optimization Julia code provided in this repository in your research work, or find it useful in any way, please consider to cite:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{nipol2020tojl,
  author = {Pollini, Nicol{\`o}},
  title = {A 2-D topology optimization code written in Julia},
  year = {2020},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/pollinico/topopt_jl}},
  }"><pre class="notranslate"><code>@misc{nipol2020tojl,
  author = {Pollini, Nicol{\`o}},
  title = {A 2-D topology optimization code written in Julia},
  year = {2020},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/pollinico/topopt_jl}},
  }
</code></pre></div>
</article></div>