<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rustmodelsjl" class="anchor" aria-hidden="true" href="#rustmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RustModels.jl</h1>
<p>[WORK IN PROGRESS]</p>
<p>This package provides tools to work with the dynamic discrete choice models of Economics. Dynamic discrete choice models are closely related to Markov decision processes. They describe how an individual makes repeated decisions as a state variable evolves and his decisions impact the evolution of the state. Some fundamental parameters describing the individual's preferences are unknown to the analyst who tries to infer them from observing states and decisions.</p>
<p>This package enforces a set of assumptions that have been found to provide a good trade-off between model flexibility and tractability of the analysis. Models following these assumptions are often referred to as <strong>Rust models</strong>, after a beautiful published article by John Rust [John Rust 1987 Econometrica: Optimal replacement of GMC bus engines: An empirical model of Harold Zurcher]. This package covers two types of models:</p>
<ul>
<li>
<p><strong>Classical Rust models</strong>: States and decisions are fully observed. Probabilistically speaking, the data follows a Markov chain whose transition matrix is constrained by an economic model of choice. As used in [Rust 1987] and elsewhere.</p>
</li>
<li>
<p><strong>Hidden Rust models</strong>: The state has an observed component and an unobserved component. Probabilistically speaking, the data follows something similar to a Hidden Markov model, with transition matrices constrained by the same economic model of choice. Hidden Rust models allow for much richer dynamics (such as serially correlated unobserved state variables) without loosing too much of the tractability of classical Rust models.</p>
</li>
</ul>
<p>I (Ben Connault, package author, hi!) studied hidden Rust models in my thesis, feel free to check it out on my <a href="http://economics.sas.upenn.edu/~connault/" rel="nofollow">webpage</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>git://github.com/BenConnault/RustModels.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>Rust models have two layers:</p>
<ul>
<li>
<p>An <strong>economic layer</strong>: going back and forth between the deep parameterization and the dynamics (the transition matrices). Known as "solving the dynamic program" (deep parameters -&gt; transition matrices) and "2-step projecting" or "minim distance projecting" (transition matrices -&gt; deep parameters). This part is common for both classical and hidden Rust models and handled by <a href="https://github.com/BenConnault/RustModels.jl">RustModels.jl</a>.</p>
</li>
<li>
<p>A <strong>statistical layer</strong>: going back and forth between the dynamics (the transition matrices) and the data. This part is different for classical and hidden Rust models. Hidden Rust models have hidden-Markov-type dynamics which are handled externally by <a href="https://github.com/BenConnault/DynamicDiscreteModels.jl">DynamicDiscreteModels.jl</a>. Classical Rust models have much simpler plain Markov dynamics which are handled internally for now.</p>
</li>
</ul>
</article></div>