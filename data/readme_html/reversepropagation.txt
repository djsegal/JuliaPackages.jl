<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-reversepropagationjl" class="anchor" aria-hidden="true" href="#reversepropagationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReversePropagation.jl</h1>
<p>A Julia package for reverse propagation along a syntax tree, using source-to-source transformation via <a href="https://github.com/JuliaSymbolics/Symbolics.jl">Symbolics.jl</a>.</p>
<h2><a id="user-content-basic-usage-reverse-mode-automatic-differentiation" class="anchor" aria-hidden="true" href="#basic-usage-reverse-mode-automatic-differentiation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage: Reverse-mode automatic differentiation</h2>
<p>The <code>gradient</code> function calculates the gradient of an expression or function with respect to given variables:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Symbolics, ReversePropagation

julia&gt; f( (x, y) ) = x + (x * y);

julia&gt; vars = @variables x, y;

julia&gt; ∇f = ReversePropagation.gradient(f, vars);

julia&gt; ∇f( (1, 2) )
(3, (3, 1))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Symbolics, ReversePropagation

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>( (x, y) ) <span class="pl-k">=</span> x <span class="pl-k">+</span> (x <span class="pl-k">*</span> y);

julia<span class="pl-k">&gt;</span> vars <span class="pl-k">=</span> <span class="pl-c1">@variables</span> x, y;

julia<span class="pl-k">&gt;</span> ∇f <span class="pl-k">=</span> ReversePropagation<span class="pl-k">.</span><span class="pl-c1">gradient</span>(f, vars);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">∇f</span>( (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) )
(<span class="pl-c1">3</span>, (<span class="pl-c1">3</span>, <span class="pl-c1">1</span>))</pre></div>
<p>The <code>gradient</code> function returns both the value of the function and the gradient.</p>
<h2><a id="user-content-basic-usage-forwardbackward-contractor-interval-constraint-propagation" class="anchor" aria-hidden="true" href="#basic-usage-forwardbackward-contractor-interval-constraint-propagation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage: Forward–backward contractor (interval constraint propagation)</h2>
<p>The forward–backward contractor corresponding to an expression takes a box and tries to exclude parts of the box that do not satisfy a constraint.</p>
<p>The contractor is constructed from a symbolic version of the constraint expression:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; vars = @variables x, y 
    
julia&gt; ex = x^2 + y^2
    
julia&gt; C = forward_backward_contractor(ex, vars)  # construct the contractor

julia&gt; constraint = 0..1

julia&gt; X = IntervalBox(-10..10, 2)

julia&gt; C(X, constraint)
"><pre>julia<span class="pl-k">&gt;</span> vars <span class="pl-k">=</span> <span class="pl-c1">@variables</span> x, y 
    
julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>
    
julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">forward_backward_contractor</span>(ex, vars)  <span class="pl-c"><span class="pl-c">#</span> construct the contractor</span>

julia<span class="pl-k">&gt;</span> constraint <span class="pl-k">=</span> <span class="pl-c1">0..1</span>

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">IntervalBox</span>(<span class="pl-k">-</span><span class="pl-c1">10..10</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">C</span>(X, constraint)</pre></div>
<p>Here the contractor corresponds to the constraint expression <code>x^2 + y^2</code>.</p>
<p>The result of the final call tries to exclude regions of the input box <code>X</code> that do <em>not</em> satisfy <code>x^2 + y^2 ∈ 0..1</code>, where <code>0..1</code> denotes the interval [0, 1].
This call returns the contracted box, as well as the value of the original function over the input box.</p>
<p>Parameters may be included in the expression; their symbolic expressions must be passed in when constructing the contractor, and their numerical values when executing the contraction:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @variables a

julia&gt; ex = x^2 + a * y^2
    
julia&gt; C = forward_backward_contractor(ex, vars, [a])

julia&gt; aa = 1..1  # value of the variable `a` to use

julia&gt; C(X, constraint, aa) == ( (-1..1, -1..1), 0..200 )
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@variables</span> a

julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> a <span class="pl-k">*</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>
    
julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">forward_backward_contractor</span>(ex, vars, [a])

julia<span class="pl-k">&gt;</span> aa <span class="pl-k">=</span> <span class="pl-c1">1..1</span>  <span class="pl-c"><span class="pl-c">#</span> value of the variable `a` to use</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">C</span>(X, constraint, aa) <span class="pl-k">==</span> ( (<span class="pl-k">-</span><span class="pl-c1">1..1</span>, <span class="pl-k">-</span><span class="pl-c1">1..1</span>), <span class="pl-c1">0..200</span> )</pre></div>
<h2><a id="user-content-tracing-and-transformations" class="anchor" aria-hidden="true" href="#tracing-and-transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tracing and transformations</h2>
<p>The package works by tracing an input Julia function into a <code>Symbolics.jl</code> expression. It then transforms that expression into a static single-assignment (SSA) form, before finally emitting Julia code.</p>
<p>The unexported <code>gradient_code</code> function can be used to inspect this process:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ex = f(vars);  #  x + (x * y)

julia&gt; code, final, gradient_vars = ReversePropagation.gradient_code(ex, vars);

julia&gt; code
7-element Vector{Assignment}:
 Assignment(_a, x*y)
 Assignment(_b, _a + x)
 Assignment(_b̄, 1)
 Assignment(_ā, _b̄)
 Assignment(x̄, _b̄)
 Assignment(x̄, x̄ + _ā*y)
 Assignment(ȳ, _ā*x)
"><pre>julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> <span class="pl-c1">f</span>(vars);  <span class="pl-c"><span class="pl-c">#</span>  x + (x * y)</span>

julia<span class="pl-k">&gt;</span> code, final, gradient_vars <span class="pl-k">=</span> ReversePropagation<span class="pl-k">.</span><span class="pl-c1">gradient_code</span>(ex, vars);

julia<span class="pl-k">&gt;</span> code
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Assignment}<span class="pl-k">:</span>
 <span class="pl-c1">Assignment</span>(_a, x<span class="pl-k">*</span>y)
 <span class="pl-c1">Assignment</span>(_b, _a <span class="pl-k">+</span> x)
 <span class="pl-c1">Assignment</span>(_b̄, <span class="pl-c1">1</span>)
 <span class="pl-c1">Assignment</span>(_ā, _b̄)
 <span class="pl-c1">Assignment</span>(x̄, _b̄)
 <span class="pl-c1">Assignment</span>(x̄, x̄ <span class="pl-k">+</span> _ā<span class="pl-k">*</span>y)
 <span class="pl-c1">Assignment</span>(ȳ, _ā<span class="pl-k">*</span>x)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>The code is licensed under the MIT license.</p>
<p>Copyright: David P. Sanders, 2021</p>
</article></div>