<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-publicapi---this-package-is-still-experimental" class="anchor" aria-hidden="true" href="#publicapi---this-package-is-still-experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PublicAPI - this package is still experimental!</h1>
<p dir="auto"><a href="https://juliaexperiments.github.io/PublicAPI.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>NOTE</strong>: This is a proof-of-concept implementation of
<a href="https://github.com/JuliaLang/julia/issues/42117" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/42117/hovercard">Feature request: <code>Base.@public</code> macro for declaring a public name without needing to <code>export</code> it · Issue #42117 · JuliaLang/julia</a>.</p>
<p dir="auto">PublicAPI.jl provides a simple API for declaring API without <code>export</code>ing the
names:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PublicAPI: @public
@public public_api_name
public_api_name() = 1

export exported_and_public_api_name
exported_and_public_api_name() = 2"><pre><span class="pl-k">using</span> PublicAPI<span class="pl-k">:</span> <span class="pl-c1">@public</span>
<span class="pl-c1">@public</span> public_api_name
<span class="pl-en">public_api_name</span>() <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-k">export</span> exported_and_public_api_name
<span class="pl-en">exported_and_public_api_name</span>() <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">The public API can be queried using <code>PublicAPI.of(module)</code>.  For example, the
public API for PublicAPI.jl can be listed as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PublicAPI

julia&gt; apis = PublicAPI.of(PublicAPI);

julia&gt; sort!(fullname.(apis))
3-element Vector{Tuple{Symbol, Symbol}}:
 (:PublicAPI, Symbol(&quot;@public&quot;))
 (:PublicAPI, Symbol(&quot;@strict&quot;))
 (:PublicAPI, :of)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PublicAPI

julia<span class="pl-k">&gt;</span> apis <span class="pl-k">=</span> PublicAPI<span class="pl-k">.</span><span class="pl-c1">of</span>(PublicAPI);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(<span class="pl-c1">fullname</span>.(apis))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Tuple{Symbol, Symbol}}<span class="pl-k">:</span>
 (<span class="pl-c1">:PublicAPI</span>, <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>@public<span class="pl-pds">"</span></span>))
 (<span class="pl-c1">:PublicAPI</span>, <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>@strict<span class="pl-pds">"</span></span>))
 (<span class="pl-c1">:PublicAPI</span>, <span class="pl-c1">:of</span>)</pre></div>
<p dir="auto">Consumers of the public API can opt-in a stricter semantics of <code>using</code> via
<code>PublicAPI.@strict</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import PublicAPI
PublicAPI.@strict using Upstream: api"><pre><span class="pl-k">import</span> PublicAPI
PublicAPI<span class="pl-k">.</span><span class="pl-c1">@strict</span> <span class="pl-k">using</span> Upstream<span class="pl-k">:</span> api</pre></div>
<p dir="auto">which ensures that <code>Upstream.api</code> is either <code>export</code>ed or marked as <code>@public</code>.</p>
</article></div>