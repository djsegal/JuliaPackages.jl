<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pythoncall-juliacall" class="anchor" aria-hidden="true" href="#pythoncall-juliacall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/docs/src/assets/logo.png"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/docs/src/assets/logo.png" alt="PythonCall.jl logo" style="width: 100px; max-width: 100%;"></a><br>PythonCall &amp; JuliaCall</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://cjdoris.github.io/PythonCall.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cjdoris.github.io/PythonCall.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cjdoris/PythonCall.jl/actions/workflows/tests.yml"><img src="https://github.com/cjdoris/PythonCall.jl/actions/workflows/tests.yml/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://github.com/cjdoris/PythonCall.jl/actions/workflows/tests-nightly.yml"><img src="https://github.com/cjdoris/PythonCall.jl/actions/workflows/tests-nightly.yml/badge.svg" alt="Tests (nightly)" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cjdoris/PythonCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad9da8ed2b8b4b3fa0f6c3594ae7c6f11837772f846cac58630003ba25942246/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f507974686f6e43616c6c2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d41383133555549484753" alt="Codecov" data-canonical-src="https://codecov.io/gh/cjdoris/PythonCall.jl/branch/main/graph/badge.svg?token=A813UUIHGS" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/P/PythonCall.html" rel="nofollow"><img src="https://camo.githubusercontent.com/edbe0fc131e53dfc28716c48c811ebb25b196932859015318b89b05451f7d5b9/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f502f507974686f6e43616c6c2e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/P/PythonCall.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Bringing <a href="https://www.python.org/" rel="nofollow"><strong>Python®</strong></a> and <a href="https://julialang.org/" rel="nofollow"><strong>Julia</strong></a> together in seamless harmony:</p>
<ul dir="auto">
<li>Call Python code from Julia and Julia code from Python via a symmetric interface.</li>
<li>Simple syntax, so the Python code looks like Python and the Julia code looks like Julia.</li>
<li>Intuitive and flexible conversions between Julia and Python: anything can be converted, you are in control.</li>
<li>Fast non-copying conversion of numeric arrays in either direction: modify Python arrays (e.g. <code>bytes</code>, <code>array.array</code>, <code>numpy.ndarray</code>) from Julia or Julia arrays from Python.</li>
<li>Helpful wrappers: interpret Python sequences, dictionaries, arrays, dataframes and IO streams as their Julia counterparts, and vice versa.</li>
<li>Beautiful stack-traces.</li>
<li>Supports modern systems: tested on Windows, MacOS and Linux, 64-bit, Julia 1.6.1 upwards and Python 3.7 upwards.</li>
</ul>
<p dir="auto"><g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png">⭐</g-emoji> If you like this, a GitHub star would be lovely thank you. <g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png">⭐</g-emoji></p>
<p dir="auto">To get started, read the <a href="https://cjdoris.github.io/PythonCall.jl/stable" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-example-1-calling-python-from-julia" class="anchor" aria-hidden="true" href="#example-1-calling-python-from-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Calling Python from Julia</h2>
<p dir="auto">In this example, we use the Julia module PythonCall from a <a href="https://github.com/fonsp/Pluto.jl">Pluto</a> notebook to inspect the Iris dataset:</p>
<ul dir="auto">
<li>We load the Iris dataset as a Julia <a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrame</a> using <a href="https://github.com/JuliaStats/RDatasets.jl">RDatasets</a>.</li>
<li>We use <code>pytable(df)</code> to convert it to a Python <a href="https://pandas.pydata.org/" rel="nofollow">Pandas DataFrame</a>.</li>
<li>We use the Python package <a href="https://seaborn.pydata.org/" rel="nofollow">Seaborn</a> to produce a pair-plot, which is automatically displayed.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/examples/seaborn.png"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/examples/seaborn.png" alt="Seaborn example screenshot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example-2-calling-julia-from-python" class="anchor" aria-hidden="true" href="#example-2-calling-julia-from-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Calling Julia from Python</h2>
<p dir="auto">In this example we use the Python module JuliaCall from an IPython notebook to train a simple neural network:</p>
<ul dir="auto">
<li>We generate some random training data using Python's Numpy.</li>
<li>We construct and train a neural network model using Julia's Flux.</li>
<li>We plot some sample output from the model using Python's MatPlotLib.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/examples/flux.png"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/main/examples/flux.png" alt="Flux example screenshot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-what-about-pycall" class="anchor" aria-hidden="true" href="#what-about-pycall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What about PyCall?</h2>
<p dir="auto">The existing package <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a> is another similar interface to Python. Here we note some key differences, but a more detailed comparison is in the documentation.</p>
<ul dir="auto">
<li>PythonCall supports a wider range of conversions between Julia and Python, and the conversion mechanism is extensible.</li>
<li>PythonCall by default never copies mutable objects when converting, but instead directly wraps the mutable object. This means that modifying the converted object modifies the original, and conversion is faster.</li>
<li>PythonCall does not usually automatically convert results to Julia values, but leaves them as Python objects. This makes it easier to do Pythonic things with these objects (e.g. accessing methods) and is type-stable.</li>
<li>PythonCall installs dependencies into a separate Conda environment for each Julia project. This means each Julia project can have an isolated set of Python dependencies.</li>
<li>PythonCall supports Julia 1.6.1+ and Python 3.7+ whereas PyCall supports Julia 0.7+ and Python 2.7+.</li>
</ul>
</article></div>