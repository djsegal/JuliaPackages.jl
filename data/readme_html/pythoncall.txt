<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/logo-text.svg"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/logo-text.svg" alt="PythonCall.jl logo" style="max-width:100%;"></a></h2>
<p><a href="https://cjdoris.github.io/PythonCall.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cjdoris.github.io/PythonCall.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cjdoris/PythonCall.jl/actions?query=workflow%3ATests"><img src="https://github.com/cjdoris/PythonCall.jl/workflows/Tests/badge.svg" alt="Test Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cjdoris/PythonCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5f745e8f980f3e5b497035cac1ba280d2f8e31ea506fea473ca27964ecf23b2b/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f507974686f6e43616c6c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d41383133555549484753" alt="Codecov" data-canonical-src="https://codecov.io/gh/cjdoris/PythonCall.jl/branch/master/graph/badge.svg?token=A813UUIHGS" style="max-width:100%;"></a></p>
<p>Bringing <a href="https://www.python.org/" rel="nofollow"><strong>Python®</strong></a> and <a href="https://julialang.org/" rel="nofollow"><strong>Julia</strong></a> together in seamless harmony:</p>
<ul>
<li>Call Python code from Julia and Julia code from Python via a symmetric interface.</li>
<li>Simple syntax, so the Python code looks like Python and the Julia code looks like Julia.</li>
<li>Intuitive and flexible conversions between Julia and Python: anything can be converted, you are in control.</li>
<li>Fast non-copying conversion of numeric arrays in either direction: modify Python arrays (e.g. <code>bytes</code>, <code>array.array</code>, <code>numpy.ndarray</code>) from Julia or Julia arrays from Python.</li>
<li>Helpful wrappers: interpret Python sequences, dictionaries, arrays, dataframes and IO streams as their Julia couterparts, and vice versa.</li>
<li>Beautiful stack-traces.</li>
<li>Works anywhere: tested on Windows, MacOS and Linux, 32- and 64-bit, Julia 1.0 upwards and Python 3.5 upwards.</li>
</ul>
<p><g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png">⭐</g-emoji> If you like this, a GitHub star would be lovely thank you. <g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png">⭐</g-emoji></p>
<p>To get started, read the <a href="https://cjdoris.github.io/PythonCall.jl/stable" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-example-1-calling-python-from-julia" class="anchor" aria-hidden="true" href="#example-1-calling-python-from-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: Calling Python from Julia</h2>
<p>In this example, we use <code>PythonCall.jl</code> from an IJulia notebook to inspect the Iris dataset:</p>
<ul>
<li>We load the Iris dataset as a Julia <code>DataFrame</code> using <code>RDatasets.jl</code>.</li>
<li>We use <code>pypandasdataframe(df)</code> to convert it to a Python <code>pandas.DataFrame</code>.</li>
<li>We use the Python package <code>seaborn</code> to produce a pair-plot, which is automatically displayed.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/examples/seaborn.png"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/examples/seaborn.png" alt="Seaborn example screenshot" style="max-width:100%;"></a></p>
<h2><a id="user-content-example-2-calling-julia-from-python" class="anchor" aria-hidden="true" href="#example-2-calling-julia-from-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: Calling Julia from Python</h2>
<p>In this example we use the Python module <code>juliacall</code> from an IPython notebook to train a simple neural network:</p>
<ul>
<li>We generate some random training data using Python's <code>numpy</code>.</li>
<li>We construct and train a neural network model using Julia's <code>Flux</code>.</li>
<li>We plot some sample output from the model using Python's <code>matplotlib.pyplot</code>.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/examples/flux.png"><img src="https://raw.githubusercontent.com/cjdoris/PythonCall.jl/master/examples/flux.png" alt="Flux example screenshot" style="max-width:100%;"></a></p>
</article></div>