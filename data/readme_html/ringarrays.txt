<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ringarrays" class="anchor" aria-hidden="true" href="#ringarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RingArrays</h1>
<p><a href="https://travis-ci.org/invenia/RingArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bbb71b99aab810682c5cba83a42437a36dd96cc29afd3351e85c199ad3d12e99/68747470733a2f2f7472617669732d63692e6f72672f696e76656e69612f52696e674172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/invenia/RingArrays.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/samuel-massinon-invenia/ringarrays-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/536a381faad9836e23324c9c1050a830e4e2ae8d68a3106b7575a19a0ab9df9d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f753279796a396e6563756f6277376f373f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/u2yyj9necuobw7o7?svg=true" style="max-width:100%;"></a> <a href="https://codecov.io/github/invenia/RingArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b2aa424c8747ebb39b70c78b74f00fe0414be0b01679d389b46926fd3e4e835f/68747470733a2f2f636f6465636f762e696f2f6769746875622f696e76656e69612f52696e674172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/invenia/RingArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>RingArrays is a way to access a large dataset in incremental chucks to limit the amount of memory you need. You would use a RingArray when you are wanting to work with a massive dataset like an array.</p>
<p>The idea of the RingArray is that it should act like a sliding window on a massive array where the window is the only part of the array you currently care about. The sliding window will move at the pace you tell it to and will contain as much data as you want.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To get a copy of RingArray, you can run <code>Pkg.add("RingArrays")</code>.</p>
<h2><a id="user-content-read-only" class="anchor" aria-hidden="true" href="#read-only"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Read Only</h2>
<p>The RingArray is in a read only state. Trying to set a value will throw this error.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ring[1] = 1
ERROR: indexing not defined for RingArrays.RingArray{Int64,1}
 in setindex! at ./abstractarray.jl:584
 in eval at ./boot.jl:265
"><pre>julia<span class="pl-k">&gt;</span> ring[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
ERROR<span class="pl-k">:</span> indexing not defined <span class="pl-k">for</span> RingArrays<span class="pl-k">.</span>RingArray{Int64,<span class="pl-c1">1</span>}
 <span class="pl-k">in</span> setindex! at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">584</span>
 <span class="pl-k">in</span> eval at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">265</span></pre></div>
<p>Even the views into RingArray are read only.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; view = ring[1:2];

julia&gt; view[1] = 1
ERROR: indexing not defined for RingArrays.RingArray{Int64,1}
 [inlined code] from ./abstractarray.jl:584
 in setindex! at ./subarray.jl:587
 in setindex! at /Users/samuelmassinon/.julia/v0.5/VirtualArrays/src/VirtualArrays.jl:72
 in eval at ./boot.jl:265
"><pre>julia<span class="pl-k">&gt;</span> view <span class="pl-k">=</span> ring[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>];

julia<span class="pl-k">&gt;</span> view[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
ERROR<span class="pl-k">:</span> indexing not defined <span class="pl-k">for</span> RingArrays<span class="pl-k">.</span>RingArray{Int64,<span class="pl-c1">1</span>}
 [inlined code] from <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">584</span>
 <span class="pl-k">in</span> setindex! at <span class="pl-k">./</span>subarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">587</span>
 <span class="pl-k">in</span> setindex! at <span class="pl-k">/</span>Users<span class="pl-k">/</span>samuelmassinon<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">5</span><span class="pl-k">/</span>VirtualArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>VirtualArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">72</span>
 <span class="pl-k">in</span> eval at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">265</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-creating" class="anchor" aria-hidden="true" href="#creating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating</h3>
<p>Creating a RingArray only needs three values, all of which have default if you pass nothing.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 3}(max_blocks=10, block_size=(10,10,10), data_length=1000)
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 3}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">10</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>), data_length<span class="pl-k">=</span><span class="pl-c1">1000</span>)</pre></div>
<p><code>max_block</code> will determine the most number of blocks the ring array can hold at any time.</p>
<p><code>block_size</code> is the dimension size of the blocks. Each block must have the same size.</p>
<p><code>data_length</code> is the max length of RingArray, along the first dimensions.</p>
<h3><a id="user-content-loading-blocks" class="anchor" aria-hidden="true" href="#loading-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading Blocks</h3>
<p>RingArrays need their blocks to be loaded manually.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=5, block_size=(2,));
data = rand(Int64, ring.block_size);
load_block(ring, data);
display(ring)
data = rand(Int64, ring.block_size);
load_block(ring, data);
display(ring)
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">5</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,));
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int64, ring<span class="pl-k">.</span>block_size);
<span class="pl-c1">load_block</span>(ring, data);
<span class="pl-c1">display</span>(ring)
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int64, ring<span class="pl-k">.</span>block_size);
<span class="pl-c1">load_block</span>(ring, data);
<span class="pl-c1">display</span>(ring)</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="5-element Array{AbstractArray{Int64,1},1}:
    [3786009800613455090,1882121033597674828]
 #undef                                      
 #undef                                      
 #undef                                      
 #undef                                      
5-element Array{AbstractArray{Int64,1},1}:
    [3786009800613455090,1882121033597674828] 
    [5361907351193705983,-3065296439201106247]
 #undef                                       
 #undef                                       
 #undef  
"><pre><span class="pl-c1">5</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    [<span class="pl-c1">3786009800613455090</span>,<span class="pl-c1">1882121033597674828</span>]
 <span class="pl-c"><span class="pl-c">#</span>undef                                      </span>
 <span class="pl-c"><span class="pl-c">#</span>undef                                      </span>
 <span class="pl-c"><span class="pl-c">#</span>undef                                      </span>
 <span class="pl-c"><span class="pl-c">#</span>undef                                      </span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    [<span class="pl-c1">3786009800613455090</span>,<span class="pl-c1">1882121033597674828</span>] 
    [<span class="pl-c1">5361907351193705983</span>,<span class="pl-k">-</span><span class="pl-c1">3065296439201106247</span>]
 <span class="pl-c"><span class="pl-c">#</span>undef                                       </span>
 <span class="pl-c"><span class="pl-c">#</span>undef                                       </span>
 <span class="pl-c"><span class="pl-c">#</span>undef  </span></pre></div>
<p>As you can see, the first display shows the first block loaded and the second display has the second block loaded too.</p>
<h4><a id="user-content-when-loading-lots-of-blocks" class="anchor" aria-hidden="true" href="#when-loading-lots-of-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>When loading lots of blocks</h4>
<p>When you load more blocks than your RingArray can handle, it will begin to overwrite blocks, starting with the oldest.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=5, block_size=(2,), data_length=100);
for i in 1:4
    data = rand(Int64, ring.block_size);
    load_block(ring, data);
end
display(ring)
data = rand(Int64, ring.block_size);
load_block(ring, data);
display(ring)
data = rand(Int64, ring.block_size);
load_block(ring, data);
display(ring)
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">5</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
    data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int64, ring<span class="pl-k">.</span>block_size);
    <span class="pl-c1">load_block</span>(ring, data);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring)
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int64, ring<span class="pl-k">.</span>block_size);
<span class="pl-c1">load_block</span>(ring, data);
<span class="pl-c1">display</span>(ring)
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int64, ring<span class="pl-k">.</span>block_size);
<span class="pl-c1">load_block</span>(ring, data);
<span class="pl-c1">display</span>(ring)</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="5-element Array{AbstractArray{Int64,1},1}:
    [-5440869056910226509,1048203488083884946]
    [-5465828022146027573,2059040906267543744]
    [-4870925121561723238,7387116789012817270]
    [4235087124507848396,-1752098218431852782]
 #undef                                       
5-element Array{AbstractArray{Int64,1},1}:
 [-5440869056910226509,1048203488083884946] 
 [-5465828022146027573,2059040906267543744] 
 [-4870925121561723238,7387116789012817270] 
 [4235087124507848396,-1752098218431852782] 
 [-7708650732046828053,-5831043268171991420]
5-element Array{AbstractArray{Int64,1},1}:
 [-2394580099307101489,-5939753501841389193]
 [-5465828022146027573,2059040906267543744] 
 [-4870925121561723238,7387116789012817270] 
 [4235087124507848396,-1752098218431852782] 
 [-7708650732046828053,-5831043268171991420]
"><pre><span class="pl-c1">5</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    [<span class="pl-k">-</span><span class="pl-c1">5440869056910226509</span>,<span class="pl-c1">1048203488083884946</span>]
    [<span class="pl-k">-</span><span class="pl-c1">5465828022146027573</span>,<span class="pl-c1">2059040906267543744</span>]
    [<span class="pl-k">-</span><span class="pl-c1">4870925121561723238</span>,<span class="pl-c1">7387116789012817270</span>]
    [<span class="pl-c1">4235087124507848396</span>,<span class="pl-k">-</span><span class="pl-c1">1752098218431852782</span>]
 <span class="pl-c"><span class="pl-c">#</span>undef                                       </span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">5440869056910226509</span>,<span class="pl-c1">1048203488083884946</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">5465828022146027573</span>,<span class="pl-c1">2059040906267543744</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">4870925121561723238</span>,<span class="pl-c1">7387116789012817270</span>] 
 [<span class="pl-c1">4235087124507848396</span>,<span class="pl-k">-</span><span class="pl-c1">1752098218431852782</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">7708650732046828053</span>,<span class="pl-k">-</span><span class="pl-c1">5831043268171991420</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">2394580099307101489</span>,<span class="pl-k">-</span><span class="pl-c1">5939753501841389193</span>]
 [<span class="pl-k">-</span><span class="pl-c1">5465828022146027573</span>,<span class="pl-c1">2059040906267543744</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">4870925121561723238</span>,<span class="pl-c1">7387116789012817270</span>] 
 [<span class="pl-c1">4235087124507848396</span>,<span class="pl-k">-</span><span class="pl-c1">1752098218431852782</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">7708650732046828053</span>,<span class="pl-k">-</span><span class="pl-c1">5831043268171991420</span>]</pre></div>
<p>In the last display, we can see that the first row of values have been overwritten by the last load.</p>
<h3><a id="user-content-indexing" class="anchor" aria-hidden="true" href="#indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Indexing</h3>
<p>A RingArray can be accessed like the array it is 'sliding' over.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:6
    load_block(ring, big_array[i:i+1]);
end
display(big_array[3])
display(ring[3])
for i in 7:2:12
    load_block(ring, big_array[i:i+1]);
end
display(big_array[8])
display(ring[8])
for i in 13:2:99
    load_block(ring, big_array[i:i+1]);
end
display(big_array[99])
display(ring[99])
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">3</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">3</span>])
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">12</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">8</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">8</span>])
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">13</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">99</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">99</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">99</span>])</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="8138703126850143818
8138703126850143818
8704347357339359336
8704347357339359336
-1266028625934220613
-1266028625934220613
"><pre><span class="pl-c1">8138703126850143818</span>
<span class="pl-c1">8138703126850143818</span>
<span class="pl-c1">8704347357339359336</span>
<span class="pl-c1">8704347357339359336</span>
<span class="pl-k">-</span><span class="pl-c1">1266028625934220613</span>
<span class="pl-k">-</span><span class="pl-c1">1266028625934220613</span></pre></div>
<p>The output shows that the value we get from the RingArray is identical to the value we get from the 'big_array' we are looking at. The difference here is that the RingArray contains a max for <code>4 * 2 = 8</code> elements.</p>
<h4><a id="user-content-range-indexingviews" class="anchor" aria-hidden="true" href="#range-indexingviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Range Indexing/Views</h4>
<p>You can even use ranges to index into a RingArray, just like the 'big array'.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:6
    load_block(ring, big_array[i:i+1]);
end
display(big_array[3:5])
display(ring[3:5])
for i in 7:2:99
    load_block(ring, big_array[i:i+1]);
end
display(big_array[93:100])
display(ring[93:100])
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">99</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">93</span><span class="pl-k">:</span><span class="pl-c1">100</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">93</span><span class="pl-k">:</span><span class="pl-c1">100</span>])</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="3-element Array{Int64,1}:
  4888954431626633721
  -735569853239964777
 -2209041541700469789
3-element VirtualArrays.VirtualArray{Int64,1}:
  4888954431626633721
  -735569853239964777
 -2209041541700469789
8-element Array{Int64,1}:
 -8890283379952347965
  6099240732283067744
  1774549867342630701
 -7876908337657579670
  -655444807932357004
  6237563287695816159
  9143358181757180448
  5233312637010446397
8-element VirtualArrays.VirtualArray{Int64,1}:
 -8890283379952347965
  6099240732283067744
  1774549867342630701
 -7876908337657579670
  -655444807932357004
  6237563287695816159
  9143358181757180448
  5233312637010446397
"><pre><span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">4888954431626633721</span>
  <span class="pl-k">-</span><span class="pl-c1">735569853239964777</span>
 <span class="pl-k">-</span><span class="pl-c1">2209041541700469789</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">4888954431626633721</span>
  <span class="pl-k">-</span><span class="pl-c1">735569853239964777</span>
 <span class="pl-k">-</span><span class="pl-c1">2209041541700469789</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">8890283379952347965</span>
  <span class="pl-c1">6099240732283067744</span>
  <span class="pl-c1">1774549867342630701</span>
 <span class="pl-k">-</span><span class="pl-c1">7876908337657579670</span>
  <span class="pl-k">-</span><span class="pl-c1">655444807932357004</span>
  <span class="pl-c1">6237563287695816159</span>
  <span class="pl-c1">9143358181757180448</span>
  <span class="pl-c1">5233312637010446397</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">8890283379952347965</span>
  <span class="pl-c1">6099240732283067744</span>
  <span class="pl-c1">1774549867342630701</span>
 <span class="pl-k">-</span><span class="pl-c1">7876908337657579670</span>
  <span class="pl-k">-</span><span class="pl-c1">655444807932357004</span>
  <span class="pl-c1">6237563287695816159</span>
  <span class="pl-c1">9143358181757180448</span>
  <span class="pl-c1">5233312637010446397</span></pre></div>
<p>All the values are the same. One thing to note is that the values returned are stored into a VirtualArray. It should act just like an array you would get from the 'big array' except will save on memory usage.</p>
<h4><a id="user-content-where-you-can-index" class="anchor" aria-hidden="true" href="#where-you-can-index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Where you can index</h4>
<p>Since the RingArray is suppose to be treated like a sliding window over a larger array, our indexes must be within the window the RingArray currently has. In the example below, we output the ranges the RingArray has:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:6
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(big_array[3])
display(ring[3])
for i in 7:2:12
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(big_array[8])
display(ring[8])
for i in 13:2:99
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(big_array[99])
display(ring[99])
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">3</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">3</span>])
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">12</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">8</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">8</span>])
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">13</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">99</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">99</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">99</span>])</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="6-element UnitRange{Int64}:
 1,2,3,4,5,6
-5471073722013832555
-5471073722013832555
8-element UnitRange{Int64}:
 5,6,7,8,9,10,11,12
4049429779710085286
4049429779710085286
8-element UnitRange{Int64}:
 93,94,95,96,97,98,99,100
-7554212529707423474
-7554212529707423474
"><pre><span class="pl-c1">6</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>
<span class="pl-k">-</span><span class="pl-c1">5471073722013832555</span>
<span class="pl-k">-</span><span class="pl-c1">5471073722013832555</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>
<span class="pl-c1">4049429779710085286</span>
<span class="pl-c1">4049429779710085286</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">93</span>,<span class="pl-c1">94</span>,<span class="pl-c1">95</span>,<span class="pl-c1">96</span>,<span class="pl-c1">97</span>,<span class="pl-c1">98</span>,<span class="pl-c1">99</span>,<span class="pl-c1">100</span>
<span class="pl-k">-</span><span class="pl-c1">7554212529707423474</span>
<span class="pl-k">-</span><span class="pl-c1">7554212529707423474</span></pre></div>
<p>Anything between <code>ring.range</code> is a viable index into RingArray. Below is an example of indexing a value out of scope.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:12
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(big_array[3])
display(ring[3])
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">12</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(big_array[<span class="pl-c1">3</span>])
<span class="pl-c1">display</span>(ring[<span class="pl-c1">3</span>])</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="8-element UnitRange{Int64}:
 5,6,7,8,9,10,11,12
647156453227300720
ERROR: RingArrayBoundsError: Cannot index (3,), outside of range (5:12,)
 in checkbounds at /Users/samuelmassinon/.julia/v0.5/RingArrays/src/RingArrays.jl:83
 in getindex at /Users/samuelmassinon/.julia/v0.5/RingArrays/src/RingArrays.jl:98
 in eval at ./boot.jl:265
"><pre><span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>
<span class="pl-c1">647156453227300720</span>
ERROR<span class="pl-k">:</span> RingArrayBoundsError<span class="pl-k">:</span> Cannot index (<span class="pl-c1">3</span>,), outside of range (<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">12</span>,)
 <span class="pl-k">in</span> checkbounds at <span class="pl-k">/</span>Users<span class="pl-k">/</span>samuelmassinon<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">5</span><span class="pl-k">/</span>RingArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>RingArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">83</span>
 <span class="pl-k">in</span> getindex at <span class="pl-k">/</span>Users<span class="pl-k">/</span>samuelmassinon<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">5</span><span class="pl-k">/</span>RingArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>RingArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">98</span>
 <span class="pl-k">in</span> eval at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">265</span></pre></div>
<p>A custom error message will appear saying where you went out of bounds.</p>
<h3><a id="user-content-reference-counting" class="anchor" aria-hidden="true" href="#reference-counting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference Counting</h3>
<p>Views are a window into the RingArray and are not a copy of the original data. So if we were loading blocking into the RingArray and overwrote a view we had, that view would no longer point at what we want.</p>
<h4><a id="user-content-preventing-overwrite" class="anchor" aria-hidden="true" href="#preventing-overwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Preventing overwrite</h4>
<p>To prevent this from happening, we implemented reference counting. This always us to make sure a block is no longer being used before we overwrite it. The example below shows what happens when we try to overwrite a block in use.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:10
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
view = ring[5:7];
display(view)
display(ring.blocks)
for i in 11:2:20
    load_block(ring, big_array[i:i+1]);
end
display(view)
display(ring.blocks)
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
view <span class="pl-k">=</span> ring[<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>];
<span class="pl-c1">display</span>(view)
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>blocks)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(view)
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>blocks)</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="8-element UnitRange{Int64}:
 3,4,5,6,7,8,9,10
3-element VirtualArrays.VirtualArray{Int64,1}:
 1544057856107072830
 8929073097273941100
 4699659618912958729
4-element Array{AbstractArray{Int64,1},1}:
 [-5031990884861863335,-3164449225297417624]
 [5365344782569642274,5184980088932498570]  
 [1544057856107072830,8929073097273941100]  
 [4699659618912958729,-3175526180812364101] 
ERROR: OverwriteError: Cannot overwrite block 3 since it has 1 views
 in load_block at /Users/samuelmassinon/.julia/v0.5/RingArrays/src/RingArrays.jl:119
 [inlined code] from ./range.jl:83
 in anonymous at ./range.jl:97
 in eval at ./boot.jl:265

 3-element VirtualArrays.VirtualArray{Int64,1}:
 1544057856107072830
 8929073097273941100
 4699659618912958729
4-element Array{AbstractArray{Int64,1},1}:
 [-5031990884861863335,-3164449225297417624]
 [6934442229844147992,1829732299464057830]  
 [1544057856107072830,8929073097273941100]  
 [4699659618912958729,-3175526180812364101]
"><pre><span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1544057856107072830</span>
 <span class="pl-c1">8929073097273941100</span>
 <span class="pl-c1">4699659618912958729</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">5031990884861863335</span>,<span class="pl-k">-</span><span class="pl-c1">3164449225297417624</span>]
 [<span class="pl-c1">5365344782569642274</span>,<span class="pl-c1">5184980088932498570</span>]  
 [<span class="pl-c1">1544057856107072830</span>,<span class="pl-c1">8929073097273941100</span>]  
 [<span class="pl-c1">4699659618912958729</span>,<span class="pl-k">-</span><span class="pl-c1">3175526180812364101</span>] 
ERROR<span class="pl-k">:</span> OverwriteError<span class="pl-k">:</span> Cannot overwrite block <span class="pl-c1">3</span> since it has <span class="pl-c1">1</span> views
 <span class="pl-k">in</span> load_block at <span class="pl-k">/</span>Users<span class="pl-k">/</span>samuelmassinon<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">5</span><span class="pl-k">/</span>RingArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>RingArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">119</span>
 [inlined code] from <span class="pl-k">./</span>range<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">83</span>
 <span class="pl-k">in</span> anonymous at <span class="pl-k">./</span>range<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">97</span>
 <span class="pl-k">in</span> eval at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">265</span>

 <span class="pl-c1">3</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1544057856107072830</span>
 <span class="pl-c1">8929073097273941100</span>
 <span class="pl-c1">4699659618912958729</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">5031990884861863335</span>,<span class="pl-k">-</span><span class="pl-c1">3164449225297417624</span>]
 [<span class="pl-c1">6934442229844147992</span>,<span class="pl-c1">1829732299464057830</span>]  
 [<span class="pl-c1">1544057856107072830</span>,<span class="pl-c1">8929073097273941100</span>]  
 [<span class="pl-c1">4699659618912958729</span>,<span class="pl-k">-</span><span class="pl-c1">3175526180812364101</span>]</pre></div>
<p>The output shows that the 2nd block was overwritten, but when we tried to overwrite the 3rd block, RingArray checked and saw that it still had a view and threw an error.</p>
<h4><a id="user-content-reference-counting-is-manage-by-ringarray" class="anchor" aria-hidden="true" href="#reference-counting-is-manage-by-ringarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference counting is manage by RingArray</h4>
<p>When accessing elements of the RingArray where a view is returned, reference counters are incremented. Likewise, when the returned views go out of scope and the julia gc runs the reference counters are decremented. Only blocks with a count of 0 will be overwritten.</p>
<p>Here is an example of being able to overwrite a block after we get rid of the view.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 1}(max_blocks=4, block_size=(2,), data_length=100);
big_array = rand(Int, 100);
for i in 1:2:10
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
view = ring[5:7];
display(view)
display(ring.blocks)
for i in 11:2:20
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(view)
display(ring.blocks)
view = 1; # the view no longer exists
for i in 13:2:20
    load_block(ring, big_array[i:i+1]);
end
display(ring.range)
display(view)
display(ring.blocks)
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 1}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">4</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), data_length<span class="pl-k">=</span><span class="pl-c1">100</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
view <span class="pl-k">=</span> ring[<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>];
<span class="pl-c1">display</span>(view)
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>blocks)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(view)
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>blocks)
view <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> the view no longer exists</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">13</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>range)
<span class="pl-c1">display</span>(view)
<span class="pl-c1">display</span>(ring<span class="pl-k">.</span>blocks)</pre></div>
<p>The output is,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="8-element UnitRange{Int64}:
 3,4,5,6,7,8,9,10
3-element VirtualArrays.VirtualArray{Int64,1}:
 5911735777477926249
 3910434893574962823
 -906348638428454513
4-element Array{AbstractArray{Int64,1},1}:
 [-625772552758151126,743620623558767253]  
 [-9012475836041925679,8620617579832117383]
 [5911735777477926249,3910434893574962823] 
 [-906348638428454513,2603597537533504413] 
ERROR: OverwriteError: Cannot overwrite block 3 since it has 1 views
 in load_block at /Users/samuelmassinon/.julia/v0.5/RingArrays/src/RingArrays.jl:119
 [inlined code] from ./range.jl:83
 in anonymous at ./range.jl:97
 in eval at ./boot.jl:265

 8-element UnitRange{Int64}:
 5,6,7,8,9,10,11,12
3-element VirtualArrays.VirtualArray{Int64,1}:
 5911735777477926249
 3910434893574962823
 -906348638428454513
4-element Array{AbstractArray{Int64,1},1}:
 [-625772552758151126,743620623558767253] 
 [2405481536158146032,4216339971683807994]
 [5911735777477926249,3910434893574962823]
 [-906348638428454513,2603597537533504413]
8-element UnitRange{Int64}:
 13,14,15,16,17,18,19,20
1
4-element Array{AbstractArray{Int64,1},1}:
 [-4896354921357038745,-63704711846758516] 
 [8336018676551718190,9077386792586977037] 
 [-970205719865134290,-8463847478386580504]
 [1002526877401869676,1037177028879382219] 
"><pre><span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">5911735777477926249</span>
 <span class="pl-c1">3910434893574962823</span>
 <span class="pl-k">-</span><span class="pl-c1">906348638428454513</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">625772552758151126</span>,<span class="pl-c1">743620623558767253</span>]  
 [<span class="pl-k">-</span><span class="pl-c1">9012475836041925679</span>,<span class="pl-c1">8620617579832117383</span>]
 [<span class="pl-c1">5911735777477926249</span>,<span class="pl-c1">3910434893574962823</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">906348638428454513</span>,<span class="pl-c1">2603597537533504413</span>] 
ERROR<span class="pl-k">:</span> OverwriteError<span class="pl-k">:</span> Cannot overwrite block <span class="pl-c1">3</span> since it has <span class="pl-c1">1</span> views
 <span class="pl-k">in</span> load_block at <span class="pl-k">/</span>Users<span class="pl-k">/</span>samuelmassinon<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">5</span><span class="pl-k">/</span>RingArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>RingArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">119</span>
 [inlined code] from <span class="pl-k">./</span>range<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">83</span>
 <span class="pl-k">in</span> anonymous at <span class="pl-k">./</span>range<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">97</span>
 <span class="pl-k">in</span> eval at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">265</span>

 <span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element VirtualArrays<span class="pl-k">.</span>VirtualArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">5911735777477926249</span>
 <span class="pl-c1">3910434893574962823</span>
 <span class="pl-k">-</span><span class="pl-c1">906348638428454513</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">625772552758151126</span>,<span class="pl-c1">743620623558767253</span>] 
 [<span class="pl-c1">2405481536158146032</span>,<span class="pl-c1">4216339971683807994</span>]
 [<span class="pl-c1">5911735777477926249</span>,<span class="pl-c1">3910434893574962823</span>]
 [<span class="pl-k">-</span><span class="pl-c1">906348638428454513</span>,<span class="pl-c1">2603597537533504413</span>]
<span class="pl-c1">8</span><span class="pl-k">-</span>element UnitRange{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">13</span>,<span class="pl-c1">14</span>,<span class="pl-c1">15</span>,<span class="pl-c1">16</span>,<span class="pl-c1">17</span>,<span class="pl-c1">18</span>,<span class="pl-c1">19</span>,<span class="pl-c1">20</span>
<span class="pl-c1">1</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{AbstractArray{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-k">-</span><span class="pl-c1">4896354921357038745</span>,<span class="pl-k">-</span><span class="pl-c1">63704711846758516</span>] 
 [<span class="pl-c1">8336018676551718190</span>,<span class="pl-c1">9077386792586977037</span>] 
 [<span class="pl-k">-</span><span class="pl-c1">970205719865134290</span>,<span class="pl-k">-</span><span class="pl-c1">8463847478386580504</span>]
 [<span class="pl-c1">1002526877401869676</span>,<span class="pl-c1">1037177028879382219</span>] </pre></div>
<p>The output shows that after we set <code>view = 1</code>, the block we want to overwrite no longer has any views into it and can be overwrite it.</p>
<h3><a id="user-content-expansions" class="anchor" aria-hidden="true" href="#expansions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expansions</h3>
<p>The RingArray expects that the blocks stack on the first dimensions, so that the RingArray will expanded along the first dimension.</p>
<h2><a id="user-content-memory-usage" class="anchor" aria-hidden="true" href="#memory-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Memory Usage</h2>
<p>It is rather difficult to show how little memory a RingArray will take in comparison to its array counterpart. What I was able to show is how much memory a RingArray has in comparison of the array it is sliding along.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ring = RingArray{Int, 3}(max_blocks=10, block_size=(100,100,100), data_length=100000);
big_array = rand(Int, 100000, 100, 100);
for i in 1:100:10000
    load_block(ring, big_array[i:i+99,1:end,1:end]);
end
whos()
for i in 10001:100:100000
    load_block(ring, big_array[i:i+99,1:end,1:end]);
end
whos()
"><pre>ring <span class="pl-k">=</span> <span class="pl-c1">RingArray</span><span class="pl-c1">{Int, 3}</span>(max_blocks<span class="pl-k">=</span><span class="pl-c1">10</span>, block_size<span class="pl-k">=</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>,<span class="pl-c1">100</span>), data_length<span class="pl-k">=</span><span class="pl-c1">100000</span>);
big_array <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int, <span class="pl-c1">100000</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">10000</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">99</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">whos</span>()
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">10001</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">100000</span>
    <span class="pl-c1">load_block</span>(ring, big_array[i<span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">99</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]);
<span class="pl-k">end</span>
<span class="pl-c1">whos</span>()</pre></div>
<p>The output is, (only showing what's important)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=".
.
.
                     big_array 7812500 KB     100000x100x100 Array{Int64,3}
                          ring  78125 KB     1000x100x100 RingArrays.RingArray{Int64,3}
.
.
.
                     big_array 7812500 KB     100000x100x100 Array{Int64,3}
                          ring  78125 KB     1000x100x100 RingArrays.RingArray{Int64,3}
.
.
.
"><pre>.
.
.
                     big_array <span class="pl-c1">7812500</span> KB     <span class="pl-c1">100000</span>x100x100 Array{Int64,<span class="pl-c1">3</span>}
                          ring  <span class="pl-c1">78125</span> KB     <span class="pl-c1">1000</span>x100x100 RingArrays<span class="pl-k">.</span>RingArray{Int64,<span class="pl-c1">3</span>}
.
.
.
                     big_array <span class="pl-c1">7812500</span> KB     <span class="pl-c1">100000</span>x100x100 Array{Int64,<span class="pl-c1">3</span>}
                          ring  <span class="pl-c1">78125</span> KB     <span class="pl-c1">1000</span>x100x100 RingArrays<span class="pl-k">.</span>RingArray{Int64,<span class="pl-c1">3</span>}
.
.
.</pre></div>
<p>From the output, we see that in both cases, the RingArray keeps a constant size of <code>78125 KB</code> which is much smaller than the 'big array' at <code>7812500 KB</code>.</p>
<h2><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmark</h2>
<p>The results of the benchmarks can be viewed <a href="benchmark/BENCHMARK.md">here</a>.</p>
</article></div>