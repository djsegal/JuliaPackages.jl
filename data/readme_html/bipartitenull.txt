<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-bipartitenulljl" class="anchor" aria-hidden="true" href="#bipartitenulljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BipartiteNull.jl</h2>
<h3 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h3>
<p dir="auto">BipartiteNull.jl is a tool for building null model of bipartite network. This work refers to the R package bipartite.</p>
<h3 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h3>
<ul dir="auto">
<li>Install this package by Julia:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg;
Pkg.add(&quot;BipartiteNull&quot;)"><pre><span class="pl-k">using</span> Pkg;
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BipartiteNull<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li>Install this package by Github:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg;
Pkg.add(PackageSpec(url=&quot;https://github.com/JiangXingChi/BipartiteNull.jl&quot;))"><pre><span class="pl-k">using</span> Pkg;
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/JiangXingChi/BipartiteNull.jl<span class="pl-pds">"</span></span>))</pre></div>
<ul dir="auto">
<li>Install this package by Gitee:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg;
Pkg.add(PackageSpec(url=&quot;https://gitee.com/pandalinux/bipartite-null.jl&quot;))"><pre><span class="pl-k">using</span> Pkg;
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://gitee.com/pandalinux/bipartite-null.jl<span class="pl-pds">"</span></span>))</pre></div>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">Example1:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using BipartiteNull,DataFrames;
data=ExampleData(2);
print(data);
df=NullNetworkLevel(data)"><pre class="notranslate"><code>using BipartiteNull,DataFrames;
data=ExampleData(2);
print(data);
df=NullNetworkLevel(data)
</code></pre></div>
<h3 dir="auto"><a id="user-content-function" class="anchor" aria-hidden="true" href="#function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function</h3>
<h4 dir="auto"><a id="user-content-data-handling" class="anchor" aria-hidden="true" href="#data-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data handling</h4>
<h5 dir="auto"><a id="user-content-exampledata" class="anchor" aria-hidden="true" href="#exampledata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExampleData</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`ExampleData(order::Int)`
Some simple examples.
# Argument
* `order`:1~7.
# Return
* `data`:One dataframe.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(1)"><pre><span class="pl-s"><span class="pl-pds">`</span>ExampleData(order::Int)<span class="pl-pds">`</span></span>
Some simple examples.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>order<span class="pl-pds">`</span></span>:<span class="pl-c1">1</span><span class="pl-k">~</span><span class="pl-c1">7.</span>
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:One</span> dataframe.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>)</pre></div>
<h5 dir="auto"><a id="user-content-readcsv" class="anchor" aria-hidden="true" href="#readcsv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReadCSV</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`ReadCSV(file::String)`
Read the csv file and convert it to dataframe.
# Argument
* `file`:File name (including path).
# Return
* `data`:One dataframe."><pre><span class="pl-s"><span class="pl-pds">`</span>ReadCSV(file::String)<span class="pl-pds">`</span></span>
Read the csv file and convert it to dataframe.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>file<span class="pl-pds">`</span></span><span class="pl-c1">:File</span> name (including path)<span class="pl-k">.</span>
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:One</span> dataframe.</pre></div>
<h5 dir="auto"><a id="user-content-writecsv" class="anchor" aria-hidden="true" href="#writecsv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WriteCSV</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`WriteCSV(file::String,df::DataFrame)`
Write a csv file.
# Argument
* `file`:File name (including path).
* `df`:A dataframe."><pre><span class="pl-s"><span class="pl-pds">`</span>WriteCSV(file::String,df::DataFrame)<span class="pl-pds">`</span></span>
Write a csv file.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>file<span class="pl-pds">`</span></span><span class="pl-c1">:File</span> name (including path)<span class="pl-k">.</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>df<span class="pl-pds">`</span></span><span class="pl-c1">:A</span> dataframe.</pre></div>
<h5 dir="auto"><a id="user-content-rmzerocol" class="anchor" aria-hidden="true" href="#rmzerocol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RmZeroCol</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`RmZeroCol(data::DataFrame)`
Delete all 0 columns.
# Argument
* `data`:Adjacency matrix of a bipartite network.
# Return
* `newdata`:The columns that are all 0 are deleted on the basis of data.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(1);
print(data);
newdata=RmZeroCol(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>RmZeroCol(data::DataFrame)<span class="pl-pds">`</span></span>
Delete all <span class="pl-c1">0</span> columns.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:Adjacency</span> matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> columns that are all <span class="pl-c1">0</span> are deleted on the basis of data.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">RmZeroCol</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-rmzerorow" class="anchor" aria-hidden="true" href="#rmzerorow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RmZeroRow</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`RmZeroRow(data::DataFrame)`
Delete all 0 rows.
# Argument
* `data`:Adjacency matrix of a bipartite network.
# Return
* `newdata`:The rows that are all 0 are deleted on the basis of data.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(1);
print(data);
newdata=RmZeroRow(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>RmZeroRow(data::DataFrame)<span class="pl-pds">`</span></span>
Delete all <span class="pl-c1">0</span> rows.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:Adjacency</span> matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> rows that are all <span class="pl-c1">0</span> are deleted on the basis of data.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">RmZeroRow</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-weight2bool" class="anchor" aria-hidden="true" href="#weight2bool"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Weight2Bool</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Weight2Bool(data::DataFrame)`
Convert weight values in the matrix to Boolean values.
# Argument
* `data`:Weight adjacency matrix of a bipartite network.
# Return
* `newdata`:Boolean adjacency matrix of a bipartite network.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(5);
print(data);
newdata=Weight2Bool(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Weight2Bool(data::DataFrame)<span class="pl-pds">`</span></span>
Convert weight values <span class="pl-k">in</span> the matrix to Boolean values.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:Weight</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:Boolean</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">5</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">Weight2Bool</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-samplevector" class="anchor" aria-hidden="true" href="#samplevector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SampleVector</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`SampleVector(v::Vector)`
Reorder.
# Argument
* `v`:Vector.
# Return
* `vnull`:New vector.
# Example
using BipartiteNull;
v=[1,2,3,4,5,6,7,8,9];
print(v);
vnull=SampleVector(v)"><pre><span class="pl-s"><span class="pl-pds">`</span>SampleVector(v::Vector)<span class="pl-pds">`</span></span>
Reorder.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>v<span class="pl-pds">`</span></span><span class="pl-c1">:Vector</span>.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>vnull<span class="pl-pds">`</span></span><span class="pl-c1">:New</span> vector.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull;
v<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>];
<span class="pl-c1">print</span>(v);
vnull<span class="pl-k">=</span><span class="pl-c1">SampleVector</span>(v)</pre></div>
<h5 dir="auto"><a id="user-content-coin" class="anchor" aria-hidden="true" href="#coin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Coin</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Coin(pvalue::Float64)`
Output true by probability
# Argument
* `pvalue`:Probability of true output(greater than 0 but less than 1).Please enter the value to one decimal place or two decimal places.
# Return
* `Bool`:2 values, true or false.
# Example
using BipartiteNull;
Coin(0.5)"><pre><span class="pl-s"><span class="pl-pds">`</span>Coin(pvalue::Float64)<span class="pl-pds">`</span></span>
Output <span class="pl-c1">true</span> by probability
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>pvalue<span class="pl-pds">`</span></span><span class="pl-c1">:Probability</span> of <span class="pl-c1">true</span> <span class="pl-c1">output</span>(greater than <span class="pl-c1">0</span> but less than <span class="pl-c1">1</span>)<span class="pl-k">.</span>Please enter the value to one decimal place or two decimal places.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>Bool<span class="pl-pds">`</span></span>:<span class="pl-c1">2</span> values, <span class="pl-c1">true</span> or <span class="pl-c1">false</span>.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull;
<span class="pl-c1">Coin</span>(<span class="pl-c1">0.5</span>)</pre></div>
<h5 dir="auto"><a id="user-content-cointest" class="anchor" aria-hidden="true" href="#cointest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CoinTest</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`CoinTest(pvalue::Float64,testnumber::Int)`
Test Coin function.
# Argument
* `pvalue`:Probability of true output(greater than 0 but less than 1).Please enter the value to one decimal place or two decimal places.
* `testnumber`:Test number.
# Return
* `Bool`:The frequency of true is theoretically close to pvalue.
# Example
using BipartiteNull;
CoinTest(0.5,100000)"><pre><span class="pl-s"><span class="pl-pds">`</span>CoinTest(pvalue::Float64,testnumber::Int)<span class="pl-pds">`</span></span>
Test Coin <span class="pl-k">function</span>.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>pvalue<span class="pl-pds">`</span></span><span class="pl-c1">:Probability</span> of <span class="pl-c1">true</span> <span class="pl-c1">output</span>(greater than <span class="pl-c1">0</span> but less than <span class="pl-c1">1</span>)<span class="pl-k">.</span>Please enter the value to one decimal place or two decimal places.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>testnumber<span class="pl-pds">`</span></span><span class="pl-c1">:Test</span> number.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>Bool<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> frequency of <span class="pl-c1">true</span> is theoretically close to pvalue.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull;
<span class="pl-c1">CoinTest</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">100000</span>)</pre></div>
<h5 dir="auto"><a id="user-content-row2edge" class="anchor" aria-hidden="true" href="#row2edge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Row2Edge</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Row2Edge(data::DataFrame)`
Convert nodes represented by rows to edges.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `newdata`:One-mode network after projection.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(6);
print(data);
newdata=Row2Edge(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Row2Edge(data::DataFrame)<span class="pl-pds">`</span></span>
Convert nodes represented by rows to edges.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:One</span><span class="pl-k">-</span>mode network after projection.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">Row2Edge</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-col2edge" class="anchor" aria-hidden="true" href="#col2edge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Col2Edge</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Col2Edge(data::DataFrame)`
Convert nodes represented by columns to edges.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `newdata`:One-mode network after projection.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(6);
print(data);
newdata=Col2Edge(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Col2Edge(data::DataFrame)<span class="pl-pds">`</span></span>
Convert nodes represented by columns to edges.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:One</span><span class="pl-k">-</span>mode network after projection.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">Col2Edge</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-splicing4matrix" class="anchor" aria-hidden="true" href="#splicing4matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Splicing4Matrix</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Splicing4Matrix(data::DataFrame)`
The bipartite network is expanded into a one-mode network through matrix splicing.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `newdata`:One-mode network after splicing.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(6);
print(data);
newdata=Splicing4Matrix(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Splicing4Matrix(data::DataFrame)<span class="pl-pds">`</span></span>
The bipartite network is expanded into a one<span class="pl-k">-</span>mode network through matrix splicing.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newdata<span class="pl-pds">`</span></span><span class="pl-c1">:One</span><span class="pl-k">-</span>mode network after splicing.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
newdata<span class="pl-k">=</span><span class="pl-c1">Splicing4Matrix</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-bipartite2graph" class="anchor" aria-hidden="true" href="#bipartite2graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bipartite2Graph</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Bipartite2Graph(data::DataFrame,model::String)`
Convert the adjacency matrix of the bipartite network into the network structure under Graphs.jl through projection or expansion.
# Argument
* `data`:The adjacency matrix of a bipartite network.
* `fun`:Select the conversion method and support three functions:&quot;Row2Edge&quot;,&quot;Col2Edge&quot;,&quot;Splicing4Matrix&quot;.
# Return
* `omm`:One-mode matrix by projection or expansion.
* `graph`:The network structure under Graphs.jl.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(6);
print(data);
omm,graph=Bipartite2Graph(data,&quot;Row2Edge&quot;)"><pre><span class="pl-s"><span class="pl-pds">`</span>Bipartite2Graph(data::DataFrame,model::String)<span class="pl-pds">`</span></span>
Convert the adjacency matrix of the bipartite network into the network structure under Graphs<span class="pl-k">.</span>jl through projection or expansion.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>fun<span class="pl-pds">`</span></span><span class="pl-c1">:Select</span> the conversion method and support three functions<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>Row2Edge<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Col2Edge<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Splicing4Matrix<span class="pl-pds">"</span></span>.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>omm<span class="pl-pds">`</span></span><span class="pl-c1">:One</span><span class="pl-k">-</span>mode matrix by projection or expansion.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>graph<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> network structure under Graphs<span class="pl-k">.</span>jl.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
omm,graph<span class="pl-k">=</span><span class="pl-c1">Bipartite2Graph</span>(data,<span class="pl-s"><span class="pl-pds">"</span>Row2Edge<span class="pl-pds">"</span></span>)</pre></div>
<h5 dir="auto"><a id="user-content-pn1" class="anchor" aria-hidden="true" href="#pn1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PN1</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`PN1(v::Vector)`
Calculate the number of -1*1.
# Argument
* `v`:A vector.
# Return
* `c`:The number of -1*1.
# Example
v=[1,1,-1,0];
PN1(v)"><pre><span class="pl-s"><span class="pl-pds">`</span>PN1(v::Vector)<span class="pl-pds">`</span></span>
Calculate the number of <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">*</span><span class="pl-c1">1.</span>
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>v<span class="pl-pds">`</span></span><span class="pl-c1">:A</span> vector.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>c<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> number of <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">*</span><span class="pl-c1">1.</span>
<span class="pl-c"><span class="pl-c">#</span> Example</span>
v<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>];
<span class="pl-c1">PN1</span>(v)</pre></div>
<h4 dir="auto"><a id="user-content-bipartite-network-attributes" class="anchor" aria-hidden="true" href="#bipartite-network-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bipartite network attributes</h4>
<h5 dir="auto"><a id="user-content-connectance" class="anchor" aria-hidden="true" href="#connectance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connectance</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Connectance(data::DataFrame)`
Realised proportion of possible links.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `value`:Connectance value.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(6);
print(data);
value=Connectance(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Connectance(data::DataFrame)<span class="pl-pds">`</span></span>
Realised proportion of possible links.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>value<span class="pl-pds">`</span></span><span class="pl-c1">:Connectance</span> value.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
value<span class="pl-k">=</span><span class="pl-c1">Connectance</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-linksperspecies" class="anchor" aria-hidden="true" href="#linksperspecies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinksPerSpecies</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`LinksPerSpecies(data::DataFrame)`
Sum of links divided by number of species(consider the overall and individual situation).
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Sum of links divided by number of all species.
* `agroup`:Sum of links divided by number of the species of rows.
* `bgroup`:Sum of links divided by number of the species of columns.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(6);
print(data);
all,agroup,bgroup=LinksPerSpecies(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>LinksPerSpecies(data::DataFrame)<span class="pl-pds">`</span></span>
Sum of links divided by number of <span class="pl-c1">species</span>(consider the overall and individual situation).
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Sum</span> of links divided by number of all species.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Sum</span> of links divided by number of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Sum</span> of links divided by number of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">LinksPerSpecies</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-cscore" class="anchor" aria-hidden="true" href="#cscore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cscore</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Cscore(data::DataFrame)`
Calculate checkerboard units.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Checkerboard units/2*2 units.
* `agroup`:C score of the species of rows.
* `bgroup`:C score of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(2);
print(data);
all,agroup,bgroup=Cscore(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Cscore(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate checkerboard units.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Checkerboard</span> units<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">2</span> units.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:C</span> score of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:C</span> score of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">2</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">Cscore</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-cscore22" class="anchor" aria-hidden="true" href="#cscore22"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cscore22</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Cscore22(data::DataFrame)`
Calculate checkerboard units.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Checkerboard units/2*2 units.
* `agroup`:C score of the species of rows.
* `bgroup`:C score of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(2);
print(data);
all,agroup,bgroup=Cscore22(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Cscore22(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate checkerboard units.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Checkerboard</span> units<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">2</span> units.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:C</span> score of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:C</span> score of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">2</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">Cscore22</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-globalclustercoefficient" class="anchor" aria-hidden="true" href="#globalclustercoefficient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GlobalClusterCoefficient</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`GlobalClusterCoefficient(data::DataFrame)`
Calculate the global cluster coefficient of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `agroup`:Global cluster coefficient of the species of rows.
* `bgroup`:Global cluster coefficient of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(6);
print(data);
agroup,bgroup=GlobalClusterCoefficient(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>GlobalClusterCoefficient(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the <span class="pl-k">global</span> cluster coefficient of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Global</span> cluster coefficient of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Global</span> cluster coefficient of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">GlobalClusterCoefficient</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-globalclustercoefficientquaternion" class="anchor" aria-hidden="true" href="#globalclustercoefficientquaternion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GlobalClusterCoefficientQuaternion</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`GlobalClusterCoefficientQuaternion(data::DataFrame)`
Calculate the global cluster coefficient(quaternion) of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `value`:Global cluster coefficient(quaternion).
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(3);
print(data);
vlaue=GlobalClusterCoefficientQuaternion(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>GlobalClusterCoefficientQuaternion(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the <span class="pl-k">global</span> cluster <span class="pl-c1">coefficient</span>(quaternion) of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>value<span class="pl-pds">`</span></span><span class="pl-c1">:Global</span> cluster <span class="pl-c1">coefficient</span>(quaternion).
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">3</span>);
<span class="pl-c1">print</span>(data);
vlaue<span class="pl-k">=</span><span class="pl-c1">GlobalClusterCoefficientQuaternion</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-meanlocalclusteringcoefficient" class="anchor" aria-hidden="true" href="#meanlocalclusteringcoefficient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MeanLocalClusteringCoefficient</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`MeanLocalClusteringCoefficient(data::DataFrame)`
Calculate the local cluster coefficient of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `agroup`:Local cluster coefficient of the species of rows.
* `bgroup`:Local cluster coefficient of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(6);
print(data);
agroup,bgroup=MeanLocalClusteringCoefficient(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>MeanLocalClusteringCoefficient(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the <span class="pl-k">local</span> cluster coefficient of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Local</span> cluster coefficient of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Local</span> cluster coefficient of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">MeanLocalClusteringCoefficient</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-modularitylabelpropagation" class="anchor" aria-hidden="true" href="#modularitylabelpropagation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModularityLabelPropagation</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`ModularityLabelPropagation(data::DataFrame)`
Calculate the modularity by label propagation.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Modularity of all species.
* `agroup`:Modularity of the species of rows.
* `bgroup`:Modularity of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(1);
print(data);
all,agroup,bgroup=ModularityLabelPropagation(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>ModularityLabelPropagation(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the modularity by label propagation.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Modularity</span> of all species.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Modularity</span> of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Modularity</span> of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">ModularityLabelPropagation</span>(data)</pre></div>
<h4 dir="auto"><a id="user-content-vertex-attributes" class="anchor" aria-hidden="true" href="#vertex-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vertex attributes</h4>
<h5 dir="auto"><a id="user-content-localclusteringcoefficient" class="anchor" aria-hidden="true" href="#localclusteringcoefficient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LocalClusteringCoefficient</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`LocalClusteringCoefficient(data::DataFrame)`
Calculate the local cluster coefficient of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `agroup`:Local cluster coefficient of the species of rows.
* `bgroup`:Local cluster coefficient of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(6);
print(data);
agroup,bgroup=LocalClusteringCoefficient(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>LocalClusteringCoefficient(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the <span class="pl-k">local</span> cluster coefficient of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Local</span> cluster coefficient of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Local</span> cluster coefficient of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">6</span>);
<span class="pl-c1">print</span>(data);
agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">LocalClusteringCoefficient</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-labelpropagation" class="anchor" aria-hidden="true" href="#labelpropagation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LabelPropagation</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`LabelPropagation(data::DataFrame)`
Mark the label by label propagation.
# Argument
* `data`:The adjacency matrix of a bipartite network.
* `maxiter`:Return after maxiter iterations if convergence has not completed.
# Return
* `newlabel`:Vertex and label information.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(1);
print(data);
newlabel=LabelPropagation(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>LabelPropagation(data::DataFrame)<span class="pl-pds">`</span></span>
Mark the label by label propagation.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>maxiter<span class="pl-pds">`</span></span><span class="pl-c1">:Return</span> after maxiter iterations <span class="pl-k">if</span> convergence has not completed.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>newlabel<span class="pl-pds">`</span></span><span class="pl-c1">:Vertex</span> and label information.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
newlabel<span class="pl-k">=</span><span class="pl-c1">LabelPropagation</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-betweennesscentrality" class="anchor" aria-hidden="true" href="#betweennesscentrality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BetweennessCentrality</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`BetweennessCentrality(data::DataFrame)`
Calculate the betweenness centrality of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Betweenness centrality of all species.
* `agroup`:Betweenness centrality of the species of rows.
* `bgroup`:Betweenness centrality of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(1);
print(data);
all,agroup,bgroup=BetweennessCentrality(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>BetweennessCentrality(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the betweenness centrality of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Betweenness</span> centrality of all species.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Betweenness</span> centrality of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Betweenness</span> centrality of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">BetweennessCentrality</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-closenesscentrality" class="anchor" aria-hidden="true" href="#closenesscentrality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ClosenessCentrality</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`ClosenessCentrality(data::DataFrame)`
Calculate the closeness centrality of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Closeness centrality of all species.
* `agroup`:Closeness centrality of the species of rows.
* `bgroup`:Closeness centrality of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(1);
print(data);
all,agroup,bgroup=ClosenessCentrality(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>ClosenessCentrality(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the closeness centrality of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Closeness</span> centrality of all species.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Closeness</span> centrality of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Closeness</span> centrality of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">ClosenessCentrality</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-degreecentrality" class="anchor" aria-hidden="true" href="#degreecentrality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DegreeCentrality</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`DegreeCentrality(data::DataFrame)`
Calculate the degree centrality of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `all`:Degree centrality of all species.
* `agroup`:Degree centrality of the species of rows.
* `bgroup`:Degree centrality of the species of columns.
# Example
using BipartiteNull,DataFrames,Graphs;
data=ExampleData(1);
print(data);
all,agroup,bgroup=DegreeCentrality(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>DegreeCentrality(data::DataFrame)<span class="pl-pds">`</span></span>
Calculate the degree centrality of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>all<span class="pl-pds">`</span></span><span class="pl-c1">:Degree</span> centrality of all species.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>agroup<span class="pl-pds">`</span></span><span class="pl-c1">:Degree</span> centrality of the species of rows.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>bgroup<span class="pl-pds">`</span></span><span class="pl-c1">:Degree</span> centrality of the species of columns.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames,Graphs;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">1</span>);
<span class="pl-c1">print</span>(data);
all,agroup,bgroup<span class="pl-k">=</span><span class="pl-c1">DegreeCentrality</span>(data)</pre></div>
<h4 dir="auto"><a id="user-content-null-model" class="anchor" aria-hidden="true" href="#null-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Null model</h4>
<h5 dir="auto"><a id="user-content-null1" class="anchor" aria-hidden="true" href="#null1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Null1</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Null1(data::DataFrame)`
Null model 1, the constraint condition is that the number of species remains unchanged and the connectivity remains unchanged.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `nulldata`:Dataframe generated by null model 1.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(7);
print(data);
nulldata=Null1(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Null1(data::DataFrame)<span class="pl-pds">`</span></span>
Null model <span class="pl-c1">1</span>, the constraint condition is that the number of species remains unchanged and the connectivity remains unchanged.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>nulldata<span class="pl-pds">`</span></span><span class="pl-c1">:Dataframe</span> generated by null model <span class="pl-c1">1.</span>
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">7</span>);
<span class="pl-c1">print</span>(data);
nulldata<span class="pl-k">=</span><span class="pl-c1">Null1</span>(data)</pre></div>
<h5 dir="auto"><a id="user-content-null2" class="anchor" aria-hidden="true" href="#null2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Null2</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Null2(data::DataFrame,coinpvalue::Float64)`
Keep the degree distribution of the original node unchanged.
# Argument
* `data`:The adjacency matrix of a bipartite network.
* `coinpvalue`:Probability of true output(greater than 0 but less than 1).Please enter the value to one decimal place or two decimal places.
# Return
* `nulldata`:Dataframe generated by null model 2.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(7);
print(data);
nulldata=Null2(data,0.5)"><pre><span class="pl-s"><span class="pl-pds">`</span>Null2(data::DataFrame,coinpvalue::Float64)<span class="pl-pds">`</span></span>
Keep the degree distribution of the original node unchanged.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>coinpvalue<span class="pl-pds">`</span></span><span class="pl-c1">:Probability</span> of <span class="pl-c1">true</span> <span class="pl-c1">output</span>(greater than <span class="pl-c1">0</span> but less than <span class="pl-c1">1</span>)<span class="pl-k">.</span>Please enter the value to one decimal place or two decimal places.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>nulldata<span class="pl-pds">`</span></span><span class="pl-c1">:Dataframe</span> generated by null model <span class="pl-c1">2.</span>
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">7</span>);
<span class="pl-c1">print</span>(data);
nulldata<span class="pl-k">=</span><span class="pl-c1">Null2</span>(data,<span class="pl-c1">0.5</span>)</pre></div>
<h5 dir="auto"><a id="user-content-null3" class="anchor" aria-hidden="true" href="#null3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Null3</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`Null3(data::DataFrame)`
Keep the degree distribution of the original node unchanged.
# Argument
* `data`:The adjacency matrix of a bipartite network.
# Return
* `nulldata`:Dataframe generated by null model 3.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(7);
print(data);
nulldata=Null3(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>Null3(data::DataFrame)<span class="pl-pds">`</span></span>
Keep the degree distribution of the original node unchanged.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>nulldata<span class="pl-pds">`</span></span><span class="pl-c1">:Dataframe</span> generated by null model <span class="pl-c1">3.</span>
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">7</span>);
<span class="pl-c1">print</span>(data);
nulldata<span class="pl-k">=</span><span class="pl-c1">Null3</span>(data)</pre></div>
<h4 dir="auto"><a id="user-content-result-integration" class="anchor" aria-hidden="true" href="#result-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Result integration</h4>
<h5 dir="auto"><a id="user-content-networklevel" class="anchor" aria-hidden="true" href="#networklevel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NetworkLevel</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`NetworkLevel(data::DataFrame,ID::String)`
Integration of some indicators of the bipartite network.
# Argument
* `data`:The adjacency matrix of a bipartite network.
* `ID`:The name of the network.
# Return
* `df`:Integration of some indicators of the bipartite network.
# Example
using BipartiteNull,DataFrames;
data=ExampleData(7);
print(data);
df=NetworkLevel(data,&quot;original&quot;)"><pre><span class="pl-s"><span class="pl-pds">`</span>NetworkLevel(data::DataFrame,ID::String)<span class="pl-pds">`</span></span>
Integration of some indicators of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>ID<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> name of the network.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>df<span class="pl-pds">`</span></span><span class="pl-c1">:Integration</span> of some indicators of the bipartite network.
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">7</span>);
<span class="pl-c1">print</span>(data);
df<span class="pl-k">=</span><span class="pl-c1">NetworkLevel</span>(data,<span class="pl-s"><span class="pl-pds">"</span>original<span class="pl-pds">"</span></span>)</pre></div>
<h5 dir="auto"><a id="user-content-nullnetworklevel" class="anchor" aria-hidden="true" href="#nullnetworklevel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NullNetworkLevel</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="`NullNetworkLevel(data::DataFrame;num=100,fun=&quot;Null3&quot;,coinpvalue=0.5)`
Integration of some indicators of the bipartite network(original and null model).
# Argument
* `data`:The adjacency matrix of a bipartite network.
* `num`:Generated quantity of null model.
* `fun`:Generation method of null model, you can select &quot;Null1&quot;,&quot;Null2&quot;,&quot;Null3&quot;.
* `coinpvalue`:Probability of true output(greater than 0 but less than 1).Please enter the value to one decimal place or two decimal places.
# Return
* `df`:Integration of some indicators of the bipartite network(original and null model).
# Example
using BipartiteNull,DataFrames;
data=ExampleData(2);
print(data);
df=NullNetworkLevel(data)"><pre><span class="pl-s"><span class="pl-pds">`</span>NullNetworkLevel(data::DataFrame;num=100,fun="Null3",coinpvalue=0.5)<span class="pl-pds">`</span></span>
Integration of some indicators of the bipartite <span class="pl-c1">network</span>(original and null model).
<span class="pl-c"><span class="pl-c">#</span> Argument</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span><span class="pl-c1">:The</span> adjacency matrix of a bipartite network.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>num<span class="pl-pds">`</span></span><span class="pl-c1">:Generated</span> quantity of null model.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>fun<span class="pl-pds">`</span></span><span class="pl-c1">:Generation</span> method of null model, you can select <span class="pl-s"><span class="pl-pds">"</span>Null1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Null2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Null3<span class="pl-pds">"</span></span>.
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>coinpvalue<span class="pl-pds">`</span></span><span class="pl-c1">:Probability</span> of <span class="pl-c1">true</span> <span class="pl-c1">output</span>(greater than <span class="pl-c1">0</span> but less than <span class="pl-c1">1</span>)<span class="pl-k">.</span>Please enter the value to one decimal place or two decimal places.
<span class="pl-c"><span class="pl-c">#</span> Return</span>
<span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>df<span class="pl-pds">`</span></span><span class="pl-c1">:Integration</span> of some indicators of the bipartite <span class="pl-c1">network</span>(original and null model).
<span class="pl-c"><span class="pl-c">#</span> Example</span>
<span class="pl-k">using</span> BipartiteNull,DataFrames;
data<span class="pl-k">=</span><span class="pl-c1">ExampleData</span>(<span class="pl-c1">2</span>);
<span class="pl-c1">print</span>(data);
df<span class="pl-k">=</span><span class="pl-c1">NullNetworkLevel</span>(data)</pre></div>
</article></div>