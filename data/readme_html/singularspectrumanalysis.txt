<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-singularspectrumanalysis" class="anchor" aria-hidden="true" href="#singularspectrumanalysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SingularSpectrumAnalysis</h1>
<p><a href="https://github.com/baggepinnen/SingularSpectrumAnalysis.jl/actions"><img src="https://github.com/baggepinnen/SingularSpectrumAnalysis.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/SingularSpectrumAnalysis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73fc45d977128bb8bce142d7add61bec5184589e1cab3cc8d8847b765332f587/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f53696e67756c6172537065637472756d416e616c797369732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/SingularSpectrumAnalysis.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A package for performing Singular Spectrum Analysis (SSA) <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis" rel="nofollow">https://en.wikipedia.org/wiki/Singular_spectrum_analysis</a></p>
<h2><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple Usage</h2>
<p>The example below creates a simulated signal that has two strong seasonal components. The main entry function is <code>analyze(y,L)</code> that returns the trend and seasonal components. <code>y</code> is the signal to decompose and <code>L</code> is a window length to use for the internal embedding.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SingularSpectrumAnalysis, Plots
# generate some data
L   = 20                      # Window length
K   = 100
N   = K*L;                    # number of datapoints
t   = 1:N;                    # Time vector
T   = 20;                     # period of main oscillation
y   = sin.(2pi/T*t);          # Signal
y .+= (0.5sin.(2pi/T*4*t)).^2 # Add another frequency
e   = 0.1randn(N);            # Add some noise
yn = y+e;
# plot(ys)

yt, ys = analyze(yn, L, robust=true) # trend and seasonal components
plot(yt, lab=&quot;Trend&quot;)
plot!(ys, lab=&quot;Season&quot;)
"><pre><span class="pl-k">using</span> SingularSpectrumAnalysis, Plots
<span class="pl-c"><span class="pl-c">#</span> generate some data</span>
L   <span class="pl-k">=</span> <span class="pl-c1">20</span>                      <span class="pl-c"><span class="pl-c">#</span> Window length</span>
K   <span class="pl-k">=</span> <span class="pl-c1">100</span>
N   <span class="pl-k">=</span> K<span class="pl-k">*</span>L;                    <span class="pl-c"><span class="pl-c">#</span> number of datapoints</span>
t   <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N;                    <span class="pl-c"><span class="pl-c">#</span> Time vector</span>
T   <span class="pl-k">=</span> <span class="pl-c1">20</span>;                     <span class="pl-c"><span class="pl-c">#</span> period of main oscillation</span>
y   <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi<span class="pl-k">/</span>T<span class="pl-k">*</span>t);          <span class="pl-c"><span class="pl-c">#</span> Signal</span>
y <span class="pl-k">.+</span><span class="pl-k">=</span> (<span class="pl-c1">0.5</span><span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi<span class="pl-k">/</span>T<span class="pl-k">*</span><span class="pl-c1">4</span><span class="pl-k">*</span>t))<span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Add another frequency</span>
e   <span class="pl-k">=</span> <span class="pl-c1">0.1</span><span class="pl-c1">randn</span>(N);            <span class="pl-c"><span class="pl-c">#</span> Add some noise</span>
yn <span class="pl-k">=</span> y<span class="pl-k">+</span>e;
<span class="pl-c"><span class="pl-c">#</span> plot(ys)</span>

yt, ys <span class="pl-k">=</span> <span class="pl-c1">analyze</span>(yn, L, robust<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> trend and seasonal components</span>
<span class="pl-c1">plot</span>(yt, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Trend<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(ys, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Season<span class="pl-pds">"</span></span>)</pre></div>
<p>The <code>robust</code> keyword makes the analysis robust against large, sparse outliers, at the expense of longer computational time.</p>
<h3><a id="user-content-esprit" class="anchor" aria-hidden="true" href="#esprit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ESPRIT</h3>
<ul>
<li><code>esprit(x, L, r; fs=1, robust=false)</code> Estimates <code>r</code> (positive) frequencies present in signal <code>x</code> using a lag-correlation matrix of size <code>L</code>.</li>
</ul>
<h2><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced usage</h2>
<p>Internally a Hankel matrix is formed and the SVD of this is calculated. The singular values of the SVD can be plotted to manually determine which singular value belongs to the trend, and which pairs belong to seasonal components (these are always pairs).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="USV = hsvd(yn,L,robust=false) # Perform svd on the trajectory matrix, robust uses a robust version of svd, resistant to outliers
plot(USV, cumulative=false) # Plot normalized singular values
"><pre>USV <span class="pl-k">=</span> <span class="pl-c1">hsvd</span>(yn,L,robust<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> Perform svd on the trajectory matrix, robust uses a robust version of svd, resistant to outliers</span>
<span class="pl-c1">plot</span>(USV, cumulative<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> Plot normalized singular values</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/sigmaplot.svg"><img src="figs/sigmaplot.svg" alt="window" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="seasonal_groupings = [1:2, 4:5] # Determine pairs of singular values corresponding to seasonal components
trend_i = 3 # If some singular value lacks a buddy, this is a trend component
# trend_i, seasonal_groupings = autogroup(USV) # This uses a heuristic
pairplot(USV,seasonal_groupings) # plot phase plots for all seasonal components
yrt, yrs = reconstruct(USV, trend_i, seasonal_groupings) # Reconstruct the underlying signal without noise, based on all identified components with significant singular values
yr = sum([yrt yrs],dims = 2) # Form full reconstruction
plot([y ys yr], lab=[&quot;y&quot; &quot;ys&quot; &quot;ys&quot; &quot;yr&quot;])
"><pre>seasonal_groupings <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>] <span class="pl-c"><span class="pl-c">#</span> Determine pairs of singular values corresponding to seasonal components</span>
trend_i <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> If some singular value lacks a buddy, this is a trend component</span>
<span class="pl-c"><span class="pl-c">#</span> trend_i, seasonal_groupings = autogroup(USV) # This uses a heuristic</span>
<span class="pl-c1">pairplot</span>(USV,seasonal_groupings) <span class="pl-c"><span class="pl-c">#</span> plot phase plots for all seasonal components</span>
yrt, yrs <span class="pl-k">=</span> <span class="pl-c1">reconstruct</span>(USV, trend_i, seasonal_groupings) <span class="pl-c"><span class="pl-c">#</span> Reconstruct the underlying signal without noise, based on all identified components with significant singular values</span>
yr <span class="pl-k">=</span> <span class="pl-c1">sum</span>([yrt yrs],dims <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Form full reconstruction</span>
<span class="pl-c1">plot</span>([y ys yr], lab<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>ys<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>ys<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>yr<span class="pl-pds">"</span></span>])</pre></div>
<h2><a id="user-content-forecasting" class="anchor" aria-hidden="true" href="#forecasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Forecasting</h2>
<p>We provide the function <code>fit_trend(yt, order)</code> to fit an n:th order polynomial to the trend:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="yt, ys = analyze(yn, L)
A,x = fit_trend(yt, 1)
"><pre>yt, ys <span class="pl-k">=</span> <span class="pl-c1">analyze</span>(yn, L)
A,x <span class="pl-k">=</span> <span class="pl-c1">fit_trend</span>(yt, <span class="pl-c1">1</span>)</pre></div>
<p>This returns the regressor matrix <code>A</code> and the polynomial coefficients <code>x</code>. This fit can be used to forecast the trend. To forecast the seasonal components, we make use of the package <a href="https://github.com/baggepinnen/ControlSystemIdentification.jl">ControlSystemIdentification.jl</a> to fit AR(na) models. We create a simulated signal to test with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Random
Random.seed!(0)
L = 20
K = 10
N = K*L;
t = 1:N;
T = 20;
y = sin.(2pi/T*t);            # Add seasons
y .+= (0.5sin.(2pi/T*4*t)).^2 # Add seasons
y .+= LinRange(0,1,N)         # Add trend
e = 0.1randn(N);
yn = y+e;                     # Add noise
"><pre><span class="pl-k">using</span> Random
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">0</span>)
L <span class="pl-k">=</span> <span class="pl-c1">20</span>
K <span class="pl-k">=</span> <span class="pl-c1">10</span>
N <span class="pl-k">=</span> K<span class="pl-k">*</span>L;
t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N;
T <span class="pl-k">=</span> <span class="pl-c1">20</span>;
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi<span class="pl-k">/</span>T<span class="pl-k">*</span>t);            <span class="pl-c"><span class="pl-c">#</span> Add seasons</span>
y <span class="pl-k">.+</span><span class="pl-k">=</span> (<span class="pl-c1">0.5</span><span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi<span class="pl-k">/</span>T<span class="pl-k">*</span><span class="pl-c1">4</span><span class="pl-k">*</span>t))<span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Add seasons</span>
y <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,N)         <span class="pl-c"><span class="pl-c">#</span> Add trend</span>
e <span class="pl-k">=</span> <span class="pl-c1">0.1</span><span class="pl-c1">randn</span>(N);
yn <span class="pl-k">=</span> y<span class="pl-k">+</span>e;                     <span class="pl-c"><span class="pl-c">#</span> Add noise</span></pre></div>
<p>Next, we use SSA to find the trend and the seasonal components</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="yt, ys = analyze(yn, L) # trend and seasons
using ControlSystemIdentification
pd  = PredictionData(yt, ys, trend_order=1, ar_order=2)
yth = trend(pd)
ysh = seasons(pd)
"><pre>yt, ys <span class="pl-k">=</span> <span class="pl-c1">analyze</span>(yn, L) <span class="pl-c"><span class="pl-c">#</span> trend and seasons</span>
<span class="pl-k">using</span> ControlSystemIdentification
pd  <span class="pl-k">=</span> <span class="pl-c1">PredictionData</span>(yt, ys, trend_order<span class="pl-k">=</span><span class="pl-c1">1</span>, ar_order<span class="pl-k">=</span><span class="pl-c1">2</span>)
yth <span class="pl-k">=</span> <span class="pl-c1">trend</span>(pd)
ysh <span class="pl-k">=</span> <span class="pl-c1">seasons</span>(pd)</pre></div>
<p>Next, we visualize the trends and seasonal components estimated by both SSA and AR models.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(ys, layout=size(ys,2), lab=&quot;SSA&quot;, title=&quot;Estimated seasonal components&quot;)
plot!(ysh, lab=&quot;AR&quot;)
"><pre><span class="pl-c1">plot</span>(ys, layout<span class="pl-k">=</span><span class="pl-c1">size</span>(ys,<span class="pl-c1">2</span>), lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SSA<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated seasonal components<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(ysh, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AR<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/season.svg"><img src="figs/season.svg" alt="window" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(yt, lab=&quot;SSA&quot;, title=&quot;Estimated trend&quot;)
plot!(yth, lab=&quot;Polyfit&quot;)
"><pre><span class="pl-c1">plot</span>(yt, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SSA<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated trend<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(yth, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Polyfit<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/trend.svg"><img src="figs/trend.svg" alt="window" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="yr = yt+sum(ys, dims=2)
plot(yn, lab=&quot;Measured&quot;, title=&quot;Full reconstructions&quot;)
plot!(yr, lab=&quot;SSA&quot;)
plot!(+(yth, ysh...), subplot=1, lab=&quot;AR&quot;, l=(:dash,))
"><pre>yr <span class="pl-k">=</span> yt<span class="pl-k">+</span><span class="pl-c1">sum</span>(ys, dims<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot</span>(yn, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Measured<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Full reconstructions<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(yr, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SSA<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-k">+</span>(yth, ysh<span class="pl-k">...</span>), subplot<span class="pl-k">=</span><span class="pl-c1">1</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AR<span class="pl-pds">"</span></span>, l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>,))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/reconstruction.svg"><img src="figs/reconstruction.svg" alt="window" style="max-width:100%;"></a></p>
<p>To perform <code>n</code>-step prediction, use the function <code>pred</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pd = pred(pd,2) # Predict two steps
yth = trend(pd)
ysh = seasons(pd)
"><pre>pd <span class="pl-k">=</span> <span class="pl-c1">pred</span>(pd,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Predict two steps</span>
yth <span class="pl-k">=</span> <span class="pl-c1">trend</span>(pd)
ysh <span class="pl-k">=</span> <span class="pl-c1">seasons</span>(pd)</pre></div>
<p>The example above is implemented in <a href="https://github.com/baggepinnen/SingularSpectrumAnalysis.jl/blob/master/test/forecast.jl"><code>forecast.jl</code></a>.</p>
<h2><a id="user-content-missing-data--outliers" class="anchor" aria-hidden="true" href="#missing-data--outliers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Missing data / outliers</h2>
<p>See the keyword argument <code>robust</code>. The robust estimation is handled by <a href="https://github.com/baggepinnen/TotalLeastSquares.jl">TotalLeastSquares.jl</a> which performs a robust PCA of the Hankel matrix. This factorization handles large but sparse outliers very well. To indicate that a value is missing, you can set it to some large value that is very far from the other values and it will be identified as an outlier by the robust factorization. To obtain the inferred values for the missing data, call the low-level function directly</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="X = hankel(y,L) # Form trajectory matrix
X̂, E = rpca(X)
ŷ = unhankel(X̂)
"><pre>X <span class="pl-k">=</span> <span class="pl-c1">hankel</span>(y,L) <span class="pl-c"><span class="pl-c">#</span> Form trajectory matrix</span>
X̂, E <span class="pl-k">=</span> <span class="pl-c1">rpca</span>(X)
ŷ <span class="pl-k">=</span> <span class="pl-c1">unhankel</span>(X̂)</pre></div>
<p>Where <code>ŷ</code> is a clean version of the signal. The sparse matrix <code>E</code> contains the estimated noise values. See also function <code>lowrankfilter</code> which packages this procedure.</p>
<p>See further documentation and examples <a href="https://github.com/baggepinnen/TotalLeastSquares.jl#missing-data-imputation">here</a>.</p>
<h2><a id="user-content-advanced-low-level-usage" class="anchor" aria-hidden="true" href="#advanced-low-level-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced low-level usage</h2>
<p>See the implementation of functions <code>hsvd</code> and <code>reconstruct</code></p>
<h2><a id="user-content-reading" class="anchor" aria-hidden="true" href="#reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading</h2>
<p>See <a href="http://www.jds-online.com/files/JDS-396.pdf" rel="nofollow">http://www.jds-online.com/files/JDS-396.pdf</a> for an easy-to-read introduction to SSA</p>
</article></div>