<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ply-polygon-file-io" class="anchor" aria-hidden="true" href="#ply-polygon-file-io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ply polygon file IO</h1>
<p><strong>PlyIO</strong> is a package for reading and writing data in the
<a href="http://paulbourke.net/dataformats/ply/" rel="nofollow">Ply</a> polygon file format, also called
the Stanford triangle format.</p>
<p><a href="https://github.com/JuliaGeometry/PlyIO.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGeometry/PlyIO.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<h3><a id="user-content-writing-ply" class="anchor" aria-hidden="true" href="#writing-ply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing ply</h3>
<p>Here's an example of how to write a basic ply file containing random triangles
and edges:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PlyIO

ply <span class="pl-k">=</span> <span class="pl-c1">Ply</span>()
<span class="pl-c1">push!</span>(ply, <span class="pl-c1">PlyComment</span>(<span class="pl-s"><span class="pl-pds">"</span>An example ply file<span class="pl-pds">"</span></span>))

nverts <span class="pl-k">=</span> <span class="pl-c1">1000</span>

<span class="pl-c"><span class="pl-c">#</span> Random vertices with position and color</span>
vertex <span class="pl-k">=</span> <span class="pl-c1">PlyElement</span>(<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>,
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">randn</span>(nverts)),
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">randn</span>(nverts)),
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>, <span class="pl-c1">randn</span>(nverts)),
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(nverts)),
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(nverts)),
                    <span class="pl-c1">ArrayProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(nverts)))
<span class="pl-c1">push!</span>(ply, vertex)

<span class="pl-c"><span class="pl-c">#</span> Some triangular faces.</span>
<span class="pl-c"><span class="pl-c">#</span> The UInt8 is the type used for serializing the number of list elements (equal</span>
<span class="pl-c"><span class="pl-c">#</span> to 3 for a triangular mesh); the Int32 is the type used to serialize indices</span>
<span class="pl-c"><span class="pl-c">#</span> into the vertex array.</span>
vertex_index <span class="pl-k">=</span> <span class="pl-c1">ListProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>vertex_index<span class="pl-pds">"</span></span>, UInt8, Int32)
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>nverts
   <span class="pl-c1">push!</span>(vertex_index, <span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>nverts<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>))
<span class="pl-k">end</span>
<span class="pl-c1">push!</span>(ply, <span class="pl-c1">PlyElement</span>(<span class="pl-s"><span class="pl-pds">"</span>face<span class="pl-pds">"</span></span>, vertex_index))

<span class="pl-c"><span class="pl-c">#</span> Some edges</span>
vertex_index <span class="pl-k">=</span> <span class="pl-c1">ListProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>vertex_index<span class="pl-pds">"</span></span>, Int32, Int32)
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>nverts
   <span class="pl-c1">push!</span>(vertex_index, <span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>nverts<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-k">end</span>
<span class="pl-c1">push!</span>(ply, <span class="pl-c1">PlyElement</span>(<span class="pl-s"><span class="pl-pds">"</span>edge<span class="pl-pds">"</span></span>, vertex_index))

<span class="pl-c"><span class="pl-c">#</span> For the sake of the example, ascii format is used, the default binary mode is faster.</span>
<span class="pl-c1">save_ply</span>(ply, <span class="pl-s"><span class="pl-pds">"</span>example1.ply<span class="pl-pds">"</span></span>, ascii<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>Opening this file using a program like
<a href="https://github.com/c42f/displaz">displaz</a>, for example using <code>displaz example1.ply</code>,
you should see something like</p>
<p><a target="_blank" rel="noopener noreferrer" href="doc/example1.png"><img src="doc/example1.png" alt="Example one" style="max-width:100%;"></a></p>
<h3><a id="user-content-reading-ply" class="anchor" aria-hidden="true" href="#reading-ply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading ply</h3>
<p>Reading the ply file generated above is quite simple:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PlyIO

julia<span class="pl-k">&gt;</span> ply <span class="pl-k">=</span> <span class="pl-c1">load_ply</span>(<span class="pl-s"><span class="pl-pds">"</span>example1.ply<span class="pl-pds">"</span></span>)
PlyIO<span class="pl-k">.</span>Ply with header<span class="pl-k">:</span>
 ply
 format ascii <span class="pl-c1">1.0</span>
 comment An example ply file
 element vertex <span class="pl-c1">1000</span>
 property float64 x
 property float64 y
 property float64 z
 property float64 r
 property float64 g
 property float64 b
 element face <span class="pl-c1">1000</span>
 property list int32 int32 vertex_index
 element edge <span class="pl-c1">1000</span>
 property list int32 int32 vertex_index
 end_header

julia<span class="pl-k">&gt;</span> ply[<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>]
PlyElement <span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span> of length <span class="pl-c1">1000</span> with properties [<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> ply[<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>]
<span class="pl-c1">1000</span><span class="pl-k">-</span>element PlyIO<span class="pl-k">.</span>ArrayProperty{Float64,String} <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>:
 <span class="pl-k">-</span><span class="pl-c1">0.472592</span>
  <span class="pl-c1">1.04326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.982202</span>
 â‹®
 <span class="pl-k">-</span><span class="pl-c1">2.55605</span>
  <span class="pl-c1">0.773923</span>
 <span class="pl-k">-</span><span class="pl-c1">2.10675</span></pre></div>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<h3><a id="user-content-the-file-format" class="anchor" aria-hidden="true" href="#the-file-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The file format</h3>
<p>Conceptually, the ply format is a container for a set of named tables of numeric
data.  Each table, or <strong>element</strong>, has several named columns or <strong>properties</strong>.
Properties can be either simple numeric arrays (floating point or
signed/unsigned integers), or arrays of variable length lists of such numeric
values.</p>
<p>As described, ply is quite a generic format but it's primarily used for
geometric data. For this use there are some loose
<a href="http://paulbourke.net/dataformats/ply/" rel="nofollow">naming conventions</a> which attach
geometric meaning to certian combinations of element and property names.
Unfortunately there's no official standard.</p>
<h3><a id="user-content-document-object-model" class="anchor" aria-hidden="true" href="#document-object-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Document object model</h3>
<p>Ply elements are represented with the <code>PlyElement</code> type which is a list of
properties which may be looked up by name.</p>
<p>Properties may be represented by an <code>AbstractArray</code> type which has the the
<code>plyname</code> function defined, which should return a name for the property.  The
builtin types <code>ArrayProperty</code> and <code>ListProperty</code> are used as containers for data
when reading a ply file.</p>
<p>The <code>Ply</code> type is a container for several interleaved <code>PlyElement</code> and
<code>PlyComment</code> fields, in the order which would be observed in a standard ply
header.</p>
<h3><a id="user-content-reading-and-writing" class="anchor" aria-hidden="true" href="#reading-and-writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading and writing</h3>
<p>To read and write <code>Ply</code> objects from files or <code>IO</code> streams, use the functions
<code>load_ply()</code> and <code>save_ply()</code>.</p>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p><a href="https://github.com/FugroRoames"><img src="https://avatars.githubusercontent.com/FugroRoames?s=150" alt="FugroRoames" style="max-width:100%;"></a></p>
</article></div>