<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hypergeometricfunctionsjl" class="anchor" aria-hidden="true" href="#hypergeometricfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HypergeometricFunctions.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/HypergeometricFunctions.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaMath/HypergeometricFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaMath/HypergeometricFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/80aeb8a176c14c6796eafd7a67a37265403b8a76dde6bf4914a933aec6bcb7e4/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f487970657267656f6d657472696346756e6374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMath/HypergeometricFunctions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for calculating hypergeometric functions</p>
<p dir="auto">This package implements the generalized hypergeometric function <code>pFq((α1,…,αp), (β1,…,βq), z)</code>. In particular, the Gauss hypergeometric function is available as <code>_₂F₁(a, b, c, z)</code>, confluent hypergeometric function is available as <code>_₁F₁(a, b, z) ≡ HypergeometricFunctions.M(a, b, z)</code> and <code>HypergeometricFunctions.U(a, b, z)</code>, as well as <code>_₃F₂(a1, a2, a3, b1, b2, z)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using HypergeometricFunctions

julia&gt; pFq((), (), 0.1) # ≡ exp(0.1)
1.1051709180756477

julia&gt; pFq((0.5, ), (), 1.0+0.001im) # ≡ exp(-0.5*log1p(-1.0-0.001im))
22.360679774997894 + 22.36067977499789im

julia&gt; pFq((1, ), (2, ), 0.01) # ≡ expm1(0.01)/0.01
1.0050167084168058

julia&gt; pFq((1/3, ), (2/3, ), -1000) # ₁F₁
0.05055805394644902

julia&gt; pFq((1, 2), (4, ), 1) # a well-poised ₂F₁
2.9999999999999996

julia&gt; pFq((1, 2+im), (3.5, ), exp(im*π/3)) # ₂F₁ at that special point in ℂ
0.6786952632946589 + 0.45235049292850116im

julia&gt; pFq((1, 2+im), (3.5, ), exp(im*big(π)/3)) # More digits, you say?
0.6786952632946589823300834090168381068073515492901393549193461972311801512528478 + 0.4523504929285013648194489713901658143893464679689810112119412310631860619948458im

julia&gt; pFq((1, 2+im, 2.5), (3.5, 4), exp(im*π/3)) # ₃F₂ because why not
0.843443403161569 + 0.3417550761546328im

julia&gt; pFq((1, 2+im, 2.5), (3.5, 4), exp(im*big(π)/3)) # Also in extended precision
0.8434434031615690763389963048175253868863156451003855955719081209861492349265671 + 0.3417550761546319732614495656712509723030350666571102474299311122586948108410529im

julia&gt; pFq((1, 1), (), -1) # A divergent series
0.5963473623231935

julia&gt; pFq((1, 1), (), -big(1))
0.5963473623231940743410784993692793760741778601525487815734849104823272191158165
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HypergeometricFunctions

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((), (), <span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span> ≡ exp(0.1)</span>
<span class="pl-c1">1.1051709180756477</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">0.5</span>, ), (), <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.001im</span>) <span class="pl-c"><span class="pl-c">#</span> ≡ exp(-0.5*log1p(-1.0-0.001im))</span>
<span class="pl-c1">22.360679774997894</span> <span class="pl-k">+</span> <span class="pl-c1">22.36067977499789im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, ), (<span class="pl-c1">2</span>, ), <span class="pl-c1">0.01</span>) <span class="pl-c"><span class="pl-c">#</span> ≡ expm1(0.01)/0.01</span>
<span class="pl-c1">1.0050167084168058</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>, ), (<span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span>, ), <span class="pl-k">-</span><span class="pl-c1">1000</span>) <span class="pl-c"><span class="pl-c">#</span> ₁F₁</span>
<span class="pl-c1">0.05055805394644902</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">4</span>, ), <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> a well-poised ₂F₁</span>
<span class="pl-c1">2.9999999999999996</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">+</span>im), (<span class="pl-c1">3.5</span>, ), <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> ₂F₁ at that special point in ℂ</span>
<span class="pl-c1">0.6786952632946589</span> <span class="pl-k">+</span> <span class="pl-c1">0.45235049292850116im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">+</span>im), (<span class="pl-c1">3.5</span>, ), <span class="pl-c1">exp</span>(im<span class="pl-k">*</span><span class="pl-c1">big</span>(π)<span class="pl-k">/</span><span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> More digits, you say?</span>
<span class="pl-c1">0.6786952632946589823300834090168381068073515492901393549193461972311801512528478</span> <span class="pl-k">+</span> <span class="pl-c1">0.4523504929285013648194489713901658143893464679689810112119412310631860619948458im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">+</span>im, <span class="pl-c1">2.5</span>), (<span class="pl-c1">3.5</span>, <span class="pl-c1">4</span>), <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> ₃F₂ because why not</span>
<span class="pl-c1">0.843443403161569</span> <span class="pl-k">+</span> <span class="pl-c1">0.3417550761546328im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">+</span>im, <span class="pl-c1">2.5</span>), (<span class="pl-c1">3.5</span>, <span class="pl-c1">4</span>), <span class="pl-c1">exp</span>(im<span class="pl-k">*</span><span class="pl-c1">big</span>(π)<span class="pl-k">/</span><span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> Also in extended precision</span>
<span class="pl-c1">0.8434434031615690763389963048175253868863156451003855955719081209861492349265671</span> <span class="pl-k">+</span> <span class="pl-c1">0.3417550761546319732614495656712509723030350666571102474299311122586948108410529im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (), <span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> A divergent series</span>
<span class="pl-c1">0.5963473623231935</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pFq</span>((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (), <span class="pl-k">-</span><span class="pl-c1">big</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">0.5963473623231940743410784993692793760741778601525487815734849104823272191158165</span>
</pre></div>
</article></div>