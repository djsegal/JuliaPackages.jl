<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mocking" class="anchor" aria-hidden="true" href="#mocking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mocking</h1>
<p dir="auto"><a href="https://github.com/JuliaTesting/Mocking.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaTesting/Mocking.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/invenia/Mocking.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7373cb1f9e88067dbf6764724c84a3a03de1b32eb8d372ef6f1ca362fe45bd5c/687474703a2f2f636f6465636f762e696f2f6769746875622f696e76656e69612f4d6f636b696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/invenia/Mocking.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Allows Julia function calls to be temporarily overloaded for purpose of testing.</p>
<h2 dir="auto"><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contents</h2>
<ul dir="auto">
<li><a href="#usage">Usage</a></li>
<li><a href="#gotchas">Gotchas</a></li>
<li><a href="#overhead">Overhead</a></li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Suppose you wrote the function <code>randdev</code> (UNIX only). How would you go about writing tests
for it?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function randdev(n::Integer)
    open(&quot;/dev/urandom&quot;) do fp
        reverse(read(fp, n))
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">randdev</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/dev/urandom<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> fp
        <span class="pl-c1">reverse</span>(<span class="pl-c1">read</span>(fp, n))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The non-deterministic behaviour of this function makes it hard to test but we can write some
tests dealing with the deterministic properties of the function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test
using ...: randdev

n = 10
result = randdev(n)
@test eltype(result) == UInt8
@test length(result) == n"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> <span class="pl-k">...</span>: randdev

n <span class="pl-k">=</span> <span class="pl-c1">10</span>
result <span class="pl-k">=</span> <span class="pl-c1">randdev</span>(n)
<span class="pl-c1">@test</span> <span class="pl-c1">eltype</span>(result) <span class="pl-k">==</span> UInt8
<span class="pl-c1">@test</span> <span class="pl-c1">length</span>(result) <span class="pl-k">==</span> n</pre></div>
<p dir="auto">How could we create a test that shows the output of the function is reversed? Mocking.jl
provides the <code>@mock</code> macro which allows package developers to temporarily overload a
specific calls in their package. In this example we will apply <code>@mock</code> to the <code>open</code> call
in <code>randdev</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mocking

function randdev(n::Integer)
    @mock open(&quot;/dev/urandom&quot;) do fp
        reverse(read(fp, n))
    end
end"><pre><span class="pl-k">using</span> Mocking

<span class="pl-k">function</span> <span class="pl-en">randdev</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    <span class="pl-c1">@mock</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/dev/urandom<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> fp
        <span class="pl-c1">reverse</span>(<span class="pl-c1">read</span>(fp, n))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">With the call site being marked as "mockable" we can now write a testcase which allows
us to demonstrate the reversing behaviour within the <code>randdev</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mocking
using Test
using ...: randdev

Mocking.activate()  # Need to call `activate` before executing `apply`

n = 10
result = randdev(n)
@test eltype(result) == UInt8
@test length(result) == n

# Produces a string with sequential UInt8 values from 1:n
data = unsafe_string(pointer(convert(Array{UInt8}, 1:n)))

# Generate a alternative method of `open` which call we wish to mock
patch = @patch open(fn::Function, f::AbstractString) = fn(IOBuffer(data))

# Apply the patch which will modify the behaviour for our test
apply(patch) do
    @test randdev(n) == convert(Array{UInt8}, n:-1:1)
end

# Outside of the scope of the patched environment `@mock` is essentially a no-op
@test randdev(n) != convert(Array{UInt8}, n:-1:1)"><pre><span class="pl-k">using</span> Mocking
<span class="pl-k">using</span> Test
<span class="pl-k">using</span> <span class="pl-k">...</span>: randdev

Mocking<span class="pl-k">.</span><span class="pl-c1">activate</span>()  <span class="pl-c"><span class="pl-c">#</span> Need to call `activate` before executing `apply`</span>

n <span class="pl-k">=</span> <span class="pl-c1">10</span>
result <span class="pl-k">=</span> <span class="pl-c1">randdev</span>(n)
<span class="pl-c1">@test</span> <span class="pl-c1">eltype</span>(result) <span class="pl-k">==</span> UInt8
<span class="pl-c1">@test</span> <span class="pl-c1">length</span>(result) <span class="pl-k">==</span> n

<span class="pl-c"><span class="pl-c">#</span> Produces a string with sequential UInt8 values from 1:n</span>
data <span class="pl-k">=</span> <span class="pl-c1">unsafe_string</span>(<span class="pl-c1">pointer</span>(<span class="pl-c1">convert</span>(Array{UInt8}, <span class="pl-c1">1</span><span class="pl-k">:</span>n)))

<span class="pl-c"><span class="pl-c">#</span> Generate a alternative method of `open` which call we wish to mock</span>
patch <span class="pl-k">=</span> <span class="pl-c1">@patch</span> <span class="pl-en">open</span>(fn<span class="pl-k">::</span><span class="pl-c1">Function</span>, f<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">fn</span>(<span class="pl-c1">IOBuffer</span>(data))

<span class="pl-c"><span class="pl-c">#</span> Apply the patch which will modify the behaviour for our test</span>
<span class="pl-c1">apply</span>(patch) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">randdev</span>(n) <span class="pl-k">==</span> <span class="pl-c1">convert</span>(Array{UInt8}, n<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Outside of the scope of the patched environment `@mock` is essentially a no-op</span>
<span class="pl-c1">@test</span> <span class="pl-c1">randdev</span>(n) <span class="pl-k">!=</span> <span class="pl-c1">convert</span>(Array{UInt8}, n<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)</pre></div>
<h2 dir="auto"><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gotchas</h2>
<p dir="auto">Remember to:</p>
<ul dir="auto">
<li>Use <code>@mock</code> at desired call sites</li>
<li>Run <code>Mocking.activate()</code> before executing any <code>apply</code> calls</li>
</ul>
<h2 dir="auto"><a id="user-content-overhead" class="anchor" aria-hidden="true" href="#overhead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overhead</h2>
<p dir="auto">The <code>@mock</code> macro uses a conditional check of <code>Mocking.activated()</code> which only allows
patches to be utilized only when Mocking has been activated. By default, Mocking starts as
disabled which should result conditional being optimized away allowing for zero-overhead.
Once activated via <code>Mocking.activate()</code> the <code>Mocking.activated</code> function will be
re-defined, causing all methods dependent on <code>@mock</code> to be recompiled.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">Mocking.jl is provided under the <a href="LICENSE.md">MIT "Expat" License</a>.</p>
</article></div>