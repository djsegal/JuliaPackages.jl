<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kernelfunctionsjl" class="anchor" aria-hidden="true" href="#kernelfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KernelFunctions.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaGaussianProcesses/KernelFunctions.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/JuliaGaussianProcesses/KernelFunctions.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGaussianProcesses/KernelFunctions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/915545990d9dd6c1109341c0348dd9b8d481f2435a213bccd54d444170ee4dda/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961476175737369616e50726f6365737365732f4b65726e656c46756e6374696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGaussianProcesses/KernelFunctions.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliagaussianprocesses.github.io/KernelFunctions.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation (stable)" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliagaussianprocesses.github.io/KernelFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation (latest)" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-kernel-functions-for-machine-learning" class="anchor" aria-hidden="true" href="#kernel-functions-for-machine-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kernel functions for machine learning</h2>
<p>KernelFunctions.jl provide a flexible and complete framework for kernel functions, pretransforming the input data.</p>
<p>The aim is to make the API as model-agnostic as possible while still being user-friendly.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = range(-3.0, 3.0; length=100)

# A simple standardised squared-exponential / exponentiated-quadratic kernel.
k₁ = SqExponentialKernel()
K₁ = kernelmatrix(k₁, x)

# Set a function transformation on the data
k₂ = Matern32Kernel() ∘ FunctionTransform(sin)
K₂ = kernelmatrix(k₂, x)

# Set a matrix premultiplication on the data
k₃ = PolynomialKernel(; c=2.0, degree=2) ∘ LinearTransform(randn(4, 1))
K₃ = kernelmatrix(k₃, x)

# Add and sum kernels
k₄ = 0.5 * SqExponentialKernel() * LinearKernel(; c=0.5) + 0.4 * k₂
K₄ = kernelmatrix(k₄, x)

plot(
    heatmap.([K₁, K₂, K₃, K₄]; yflip=true, colorbar=false)...;
    layout=(2, 2), title=[&quot;K₁&quot; &quot;K₂&quot; &quot;K₃&quot; &quot;K₄&quot;],
)
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">3.0</span>, <span class="pl-c1">3.0</span>; length<span class="pl-k">=</span><span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> A simple standardised squared-exponential / exponentiated-quadratic kernel.</span>
k₁ <span class="pl-k">=</span> <span class="pl-c1">SqExponentialKernel</span>()
K₁ <span class="pl-k">=</span> <span class="pl-c1">kernelmatrix</span>(k₁, x)

<span class="pl-c"><span class="pl-c">#</span> Set a function transformation on the data</span>
k₂ <span class="pl-k">=</span> <span class="pl-c1">Matern32Kernel</span>() <span class="pl-k">∘</span> <span class="pl-c1">FunctionTransform</span>(sin)
K₂ <span class="pl-k">=</span> <span class="pl-c1">kernelmatrix</span>(k₂, x)

<span class="pl-c"><span class="pl-c">#</span> Set a matrix premultiplication on the data</span>
k₃ <span class="pl-k">=</span> <span class="pl-c1">PolynomialKernel</span>(; c<span class="pl-k">=</span><span class="pl-c1">2.0</span>, degree<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">∘</span> <span class="pl-c1">LinearTransform</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">4</span>, <span class="pl-c1">1</span>))
K₃ <span class="pl-k">=</span> <span class="pl-c1">kernelmatrix</span>(k₃, x)

<span class="pl-c"><span class="pl-c">#</span> Add and sum kernels</span>
k₄ <span class="pl-k">=</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> <span class="pl-c1">SqExponentialKernel</span>() <span class="pl-k">*</span> <span class="pl-c1">LinearKernel</span>(; c<span class="pl-k">=</span><span class="pl-c1">0.5</span>) <span class="pl-k">+</span> <span class="pl-c1">0.4</span> <span class="pl-k">*</span> k₂
K₄ <span class="pl-k">=</span> <span class="pl-c1">kernelmatrix</span>(k₄, x)

<span class="pl-c1">plot</span>(
    <span class="pl-c1">heatmap</span>.([K₁, K₂, K₃, K₄]; yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>)<span class="pl-k">...</span>;
    layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), title<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>K₁<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>K₂<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>K₃<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>K₄<span class="pl-pds">"</span></span>],
)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/heatmap_combination.png"><img src="docs/src/assets/heatmap_combination.png" width="400px" style="max-width:100%;"></a>
</p>
<h2><a id="user-content-packages-goals-by-priority" class="anchor" aria-hidden="true" href="#packages-goals-by-priority"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Packages goals (by priority)</h2>
<ul>
<li>Ensure AD Compatibility (already the case for Zygote, ForwardDiff)</li>
<li>Toeplitz Matrices compatibility</li>
</ul>
<p>Directly inspired by the <a href="https://github.com/trthatcher/MLKernels.jl">MLKernels</a> package.</p>
<h2><a id="user-content-issuescontributing" class="anchor" aria-hidden="true" href="#issuescontributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Issues/Contributing</h2>
<p>If you notice a problem or would like to contribute by adding more kernel functions or features please <a href="https://github.com/JuliaGaussianProcesses/KernelFunctions.jl/issues">submit an issue</a>, or open a PR (please see the <a href="https://github.com/SciML/ColPrac">ColPrac</a> contribution guidelines).</p>
</article></div>