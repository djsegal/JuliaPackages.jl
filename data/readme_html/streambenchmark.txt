<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-streambenchmark" class="anchor" aria-hidden="true" href="#streambenchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>STREAMBenchmark</h1>
<p><a href="https://github.com/JuliaPerf/STREAMBenchmark.jl/actions"><img src="https://github.com/JuliaPerf/STREAMBenchmark.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaPerf/STREAMBenchmark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7599bd9ccd64f1690edcbfd38df32255d7b758e8390a664f3693031ba6d59c64/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506572662f53545245414d42656e63686d61726b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaPerf/STREAMBenchmark.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Getting a realistic <strong>estimate</strong> of the achievable (maximal) <strong>memory bandwidth</strong>.</p>
<p><strong>Note</strong> This package implements a simple variant of the <a href="https://www.cs.virginia.edu/stream/" rel="nofollow">original STREAM benchmark</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The function <code>memory_bandwidth()</code> estimates the memory bandwidth in megabytes per second (MB/s). It returns a named tuple indicating the median, minimum, and maximum of the four measurements.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using STREAMBenchmark

julia&gt; memory_bandwidth()
(median = 26885.2, minimum = 26475.1, maximum = 27437.5)

julia&gt; memory_bandwidth(verbose=true)
╔══╡ Multi-threaded:
╠══╡ (6 threads)
╟─ COPY:  26659.2 MB/s
╟─ SCALE: 27236.0 MB/s
╟─ ADD:   26017.5 MB/s
╟─ TRIAD: 26719.0 MB/s
╟─────────────────────
║ Median: 26689.1 MB/s
╚═════════════════════
(median = 26689.1, minimum = 26017.5, maximum = 27236.0)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> STREAMBenchmark

julia<span class="pl-k">&gt;</span> <span class="pl-c1">memory_bandwidth</span>()
(median <span class="pl-k">=</span> <span class="pl-c1">26885.2</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">26475.1</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">27437.5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">memory_bandwidth</span>(verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)
╔══╡ Multi<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╠══╡ (<span class="pl-c1">6</span> threads)
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">26659.2</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">27236.0</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">26017.5</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">26719.0</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">26689.1</span> MB<span class="pl-k">/</span>s
╚═════════════════════
(median <span class="pl-k">=</span> <span class="pl-c1">26689.1</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">26017.5</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">27236.0</span>)</pre></div>
<p>Note that we count / assume write-allocates by default (you can use <code>write_allocate=false</code> to disregard them).</p>
<h3><a id="user-content-multithreading" class="anchor" aria-hidden="true" href="#multithreading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multithreading</h3>
<p>If you start Julia with multiple threads (e.g. <code>julia -t 4</code>) and call <code>memory_bandwidth</code> the kernel loops will be run in parallel. To disable multithreading you can set the keyword argument <code>multithreading=false</code>.</p>
<p>If you want to run both the single- and multi-threaded benchmark at once you can call <code>benchmark()</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; benchmark()
╔══╡ Single-threaded:
╟─ COPY:  26572.5 MB/s
╟─ SCALE: 26744.5 MB/s
╟─ ADD:   26942.0 MB/s
╟─ TRIAD: 26943.6 MB/s
╟─────────────────────
║ Median: 26843.2 MB/s
╚═════════════════════

╔══╡ Multi-threaded:
╠══╡ (6 threads)
╟─ COPY:  26586.4 MB/s
╟─ SCALE: 28006.7 MB/s
╟─ ADD:   25329.7 MB/s
╟─ TRIAD: 26576.3 MB/s
╟─────────────────────
║ Median: 26581.3 MB/s
╚═════════════════════

(single = (median = 26843.2, minimum = 26572.5, maximum = 26943.6), multi = (median = 26581.3, minimum = 25329.7, maximum = 28006.7))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">benchmark</span>()
╔══╡ Single<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">26572.5</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">26744.5</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">26942.0</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">26943.6</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">26843.2</span> MB<span class="pl-k">/</span>s
╚═════════════════════

╔══╡ Multi<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╠══╡ (<span class="pl-c1">6</span> threads)
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">26586.4</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">28006.7</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">25329.7</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">26576.3</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">26581.3</span> MB<span class="pl-k">/</span>s
╚═════════════════════

(single <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">26843.2</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">26572.5</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">26943.6</span>), multi <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">26581.3</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">25329.7</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">28006.7</span>))</pre></div>
<h4><a id="user-content-loopvectorization" class="anchor" aria-hidden="true" href="#loopvectorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LoopVectorization</h4>
<p>You can make STREAMBenchmarks.jl use <a href="https://github.com/JuliaSIMD/LoopVectorization.jl">LoopVectorization</a>'s <code>@avxt</code> instead of <code>@threads</code> by setting <code>STREAMBenchmark.avxt() = true</code>.</p>
<h3><a id="user-content-thread-pinning" class="anchor" aria-hidden="true" href="#thread-pinning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thread pinning</h3>
<p>It is probably a good idea to start julia with <code>JULIA_EXLUSIVE=1 julia -t4</code> (for 4 threads), i.e. to set the environmental variable <code>JULIA_EXCLUSIVE = 1</code>. This should pin the used threads to the first <code>1:nthreads()</code> cores. On a cluster you might also want to consider using <code>numactl --physcpubind 0,1,2,3 julia -t4</code> to bin the julia process to the list of virtual CPUs. There is also <code>likwid-pin -c 0,1,2,3 julia -t4</code> (see <a href="https://github.com/RRZE-HPC/likwid/wiki/Likwid-Pin">likwid-pin</a>) but I'm not sure that it works reliably.</p>
<h3><a id="user-content-vector-length" class="anchor" aria-hidden="true" href="#vector-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vector length</h3>
<p>By default a vector length of four times the size of the outermost cache is used (a rule of thumb <a href="https://blogs.fau.de/hager/archives/8263" rel="nofollow">"laid down by Dr. Bandwidth"</a>). To measure the memory bandwidth for a few other factorsas well you might want to use <code>STREAMBenchmark.vector_length_dependence()</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; STREAMBenchmark.vector_length_dependence()
1: 12582912 =&gt; 27101.3
2: 25165824 =&gt; 27096.8
3: 37748736 =&gt; 26879.4
4: 50331648 =&gt; 26889.9
Dict{Int64, Float64} with 4 entries:
  37748736 =&gt; 26879.4
  25165824 =&gt; 27096.8
  12582912 =&gt; 27101.3
  50331648 =&gt; 26889.9
"><pre>julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">vector_length_dependence</span>()
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">12582912</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">27101.3</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">25165824</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">27096.8</span>
<span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">37748736</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">26879.4</span>
<span class="pl-c1">4</span><span class="pl-k">:</span> <span class="pl-c1">50331648</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">26889.9</span>
Dict{Int64, Float64} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">37748736</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">26879.4</span>
  <span class="pl-c1">25165824</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">27096.8</span>
  <span class="pl-c1">12582912</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">27101.3</span>
  <span class="pl-c1">50331648</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">26889.9</span></pre></div>
<h2><a id="user-content-comparison-with-original-stream-benchmark" class="anchor" aria-hidden="true" href="#comparison-with-original-stream-benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparison with original STREAM benchmark</h2>
<p>We can download and compile the <a href="https://www.cs.virginia.edu/stream/FTP/Code/" rel="nofollow">C source code</a> of the original STREAM benchmark via STREAMBenchmark.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using STREAMBenchmark

julia&gt; STREAMBenchmark.download_original_STREAM()
- Creating folder &quot;stream&quot;
- Downloading C STREAM benchmark
- Done.

julia&gt; STREAMBenchmark.compile_original_STREAM(compiler=:gcc, multithreading=false)
- Trying to compile &quot;stream.c&quot; using gcc
  Using options: -O3 -DSTREAM_ARRAY_SIZE=33554432
- Done.

julia&gt; STREAMBenchmark.execute_original_STREAM()
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 33554432 (elements), Offset = 0 (elements)
Memory per array = 256.0 MiB (= 0.2 GiB).
Total memory required = 768.0 MiB (= 0.8 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 31889 microseconds.
   (= 31889 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           10745.4     0.049993     0.049963     0.050080
Scale:          10774.3     0.049869     0.049829     0.049904
Add:            11538.8     0.069876     0.069791     0.070274
Triad:          11429.4     0.070508     0.070459     0.070640
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------

julia&gt; benchmark(write_allocate=false) # the original benchmark doesn't count / assumes the absence of write-allocates
╔══╡ Single-threaded:
╟─ COPY:  10699.4 MB/s
╟─ SCALE: 10542.2 MB/s
╟─ ADD:   11088.3 MB/s
╟─ TRIAD: 11099.2 MB/s
╟─────────────────────
║ Median: 10893.9 MB/s
╚═════════════════════

╔══╡ Multi-threaded:
╟─ COPY:  10625.1 MB/s
╟─ SCALE: 10226.7 MB/s
╟─ ADD:   11052.4 MB/s
╟─ TRIAD: 10902.9 MB/s
╟─────────────────────
║ Median: 10764.0 MB/s
╚═════════════════════

(single = (median = 10893.9, minimum = 10542.2, maximum = 11099.2), multi = (median = 10764.0, minimum = 10226.7, maximum = 11052.4))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> STREAMBenchmark

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">download_original_STREAM</span>()
<span class="pl-k">-</span> Creating folder <span class="pl-s"><span class="pl-pds">"</span>stream<span class="pl-pds">"</span></span>
<span class="pl-k">-</span> Downloading C STREAM benchmark
<span class="pl-k">-</span> Done.

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">compile_original_STREAM</span>(compiler<span class="pl-k">=</span><span class="pl-c1">:gcc</span>, multithreading<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-k">-</span> Trying to compile <span class="pl-s"><span class="pl-pds">"</span>stream.c<span class="pl-pds">"</span></span> <span class="pl-k">using</span> gcc
  Using options<span class="pl-k">:</span> <span class="pl-k">-</span>O3 <span class="pl-k">-</span>DSTREAM_ARRAY_SIZE<span class="pl-k">=</span><span class="pl-c1">33554432</span>
<span class="pl-k">-</span> Done.

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">execute_original_STREAM</span>()
<span class="pl-k">-------------------------------------------------------------</span>
STREAM version <span class="pl-k">$</span>Revision<span class="pl-k">:</span> <span class="pl-c1">5.10</span> $
<span class="pl-k">-------------------------------------------------------------</span>
This system uses <span class="pl-c1">8</span> bytes per array element.
<span class="pl-k">-------------------------------------------------------------</span>
Array size <span class="pl-k">=</span> <span class="pl-c1">33554432</span> (elements), Offset <span class="pl-k">=</span> <span class="pl-c1">0</span> (elements)
Memory per array <span class="pl-k">=</span> <span class="pl-c1">256.0</span> MiB (<span class="pl-k">=</span> <span class="pl-c1">0.2</span> GiB).
Total memory required <span class="pl-k">=</span> <span class="pl-c1">768.0</span> MiB (<span class="pl-k">=</span> <span class="pl-c1">0.8</span> GiB).
Each kernel will be executed <span class="pl-c1">10</span> times.
 The <span class="pl-k">*</span>best<span class="pl-k">*</span> time <span class="pl-k">for</span> each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
<span class="pl-k">-------------------------------------------------------------</span>
Your clock granularity<span class="pl-k">/</span>precision appears to be <span class="pl-c1">1</span> microseconds.
Each test below will take on the order of <span class="pl-c1">31889</span> microseconds.
   (<span class="pl-k">=</span> <span class="pl-c1">31889</span> clock ticks)
Increase the size of the arrays <span class="pl-k">if</span> this shows that
you are not getting at least <span class="pl-c1">20</span> clock ticks per test.
<span class="pl-k">-------------------------------------------------------------</span>
WARNING <span class="pl-k">--</span> The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
<span class="pl-k">-------------------------------------------------------------</span>
Function    Best Rate MB<span class="pl-k">/</span>s  Avg time     Min time     Max time
Copy<span class="pl-k">:</span>           <span class="pl-c1">10745.4</span>     <span class="pl-c1">0.049993</span>     <span class="pl-c1">0.049963</span>     <span class="pl-c1">0.050080</span>
Scale<span class="pl-k">:</span>          <span class="pl-c1">10774.3</span>     <span class="pl-c1">0.049869</span>     <span class="pl-c1">0.049829</span>     <span class="pl-c1">0.049904</span>
Add<span class="pl-k">:</span>            <span class="pl-c1">11538.8</span>     <span class="pl-c1">0.069876</span>     <span class="pl-c1">0.069791</span>     <span class="pl-c1">0.070274</span>
Triad<span class="pl-k">:</span>          <span class="pl-c1">11429.4</span>     <span class="pl-c1">0.070508</span>     <span class="pl-c1">0.070459</span>     <span class="pl-c1">0.070640</span>
<span class="pl-k">-------------------------------------------------------------</span>
Solution Validates<span class="pl-k">:</span> avg error less than <span class="pl-c1">1.000000e-13</span> on all three arrays
<span class="pl-k">-------------------------------------------------------------</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">benchmark</span>(write_allocate<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> the original benchmark doesn't count / assumes the absence of write-allocates</span>
╔══╡ Single<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">10699.4</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">10542.2</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">11088.3</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">11099.2</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">10893.9</span> MB<span class="pl-k">/</span>s
╚═════════════════════

╔══╡ Multi<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">10625.1</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">10226.7</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">11052.4</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">10902.9</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">10764.0</span> MB<span class="pl-k">/</span>s
╚═════════════════════

(single <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">10893.9</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">10542.2</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">11099.2</span>), multi <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">10764.0</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">10226.7</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">11052.4</span>))</pre></div>
<h2><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Resources</h2>
<ul>
<li>Original STREAM benchmark (C/Fortran): <a href="https://www.cs.virginia.edu/stream/" rel="nofollow">https://www.cs.virginia.edu/stream/</a></li>
<li>Blog post about how to optimize and interpret the benchmark: <a href="https://blogs.fau.de/hager/archives/8263" rel="nofollow">https://blogs.fau.de/hager/archives/8263</a></li>
</ul>
</article></div>