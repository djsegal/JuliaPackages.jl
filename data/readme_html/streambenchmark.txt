<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPerf/STREAMBenchmark.jl/raw/master/logo/stream_logo_notxt.svg"><img src="https://github.com/JuliaPerf/STREAMBenchmark.jl/raw/master/logo/stream_logo_notxt.svg" width="140" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-streambenchmark" class="anchor" aria-hidden="true" href="#streambenchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>STREAMBenchmark</h1>

<p dir="auto"><a href="https://git.uni-paderborn.de/pc2-ci/julia/STREAMBenchmark-jl/-/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/3ba8879ce37fd52a1ac70abf02e6b96aa1e5fd51044ed1f707dae33093899087/68747470733a2f2f6769742e756e692d7061646572626f726e2e64652f7063322d63692f6a756c69612f53545245414d42656e63686d61726b2d6a6c2f6261646765732f6d61737465722f706970656c696e652e7376673f6b65795f746578743d434940504332" alt="CI@PC2" data-canonical-src="https://git.uni-paderborn.de/pc2-ci/julia/STREAMBenchmark-jl/badges/master/pipeline.svg?key_text=CI@PC2" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPerf/STREAMBenchmark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7599bd9ccd64f1690edcbfd38df32255d7b758e8390a664f3693031ba6d59c64/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506572662f53545245414d42656e63686d61726b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaPerf/STREAMBenchmark.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Getting a realistic <strong>estimate</strong> of the achievable (maximal) <strong>memory bandwidth</strong></em></p>
<p dir="auto"><strong>Note:</strong> This package implements a simple variant of the <a href="https://www.cs.virginia.edu/stream/" rel="nofollow">original STREAM benchmark</a>. There also is <a href="https://github.com/JuliaPerf/BandwidthBenchmark.jl">BandwidthBenchmark.jl</a>, which is a variant of <a href="https://github.com/RRZE-HPC/TheBandwidthBenchmark">TheBandwidthBenchmark</a>.</p>
<h2 dir="auto"><a id="user-content-memory_bandwidth" class="anchor" aria-hidden="true" href="#memory_bandwidth"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>memory_bandwidth()</code></h2>
<p dir="auto">The function <code>memory_bandwidth()</code> estimates the memory bandwidth in megabytes per second (MB/s). It returns a named tuple indicating the median, minimum, and maximum of the four measurements.</p>
<p dir="auto">A few <strong>important remarks</strong> upfront:</p>
<ul dir="auto">
<li>To obtain a reasonable estimate you should start julia with enough threads (e.g. as many as you have physical cores).</li>
<li>You should play around with the length of the vectors, used in the streaming kernels, via the keyword argument <code>N</code>. Make it large enough (e.g. # of NUMA nodes times four times the size of the outermost cache size) in particular if you get unreasonably high bandwidths.</li>
<li>If possible, you should pin the Julia threads to separate cores. The simplest ways to pin <code>N</code> Julia threads to the first <code>N</code> cores (compact pinning) are 1) settings <code>JULIA_EXLUSIVE=1</code> or 2) using <a href="https://github.com/carstenbauer/ThreadPinning.jl">ThreadPinning.jl's</a> <code>pinthreads(:compact)</code>. We will use the latter below.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ThreadPinning

julia&gt; pinthreads(:compact)

julia&gt; using STREAMBenchmark

julia&gt; memory_bandwidth(verbose=true)
╔══╡ Multi-threaded:
╠══╡ (10 threads)
╟─ COPY:  100205.2 MB/s
╟─ SCALE: 100218.7 MB/s
╟─ ADD:   100364.7 MB/s
╟─ TRIAD: 100293.1 MB/s
╟─────────────────────
║ Median: 100255.9 MB/s
╚═════════════════════
(median = 100255.9, minimum = 100205.2, maximum = 100364.7)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThreadPinning

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pinthreads</span>(<span class="pl-c1">:compact</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> STREAMBenchmark

julia<span class="pl-k">&gt;</span> <span class="pl-c1">memory_bandwidth</span>(verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)
╔══╡ Multi<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╠══╡ (<span class="pl-c1">10</span> threads)
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">100205.2</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">100218.7</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">100364.7</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">100293.1</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">100255.9</span> MB<span class="pl-k">/</span>s
╚═════════════════════
(median <span class="pl-k">=</span> <span class="pl-c1">100255.9</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">100205.2</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">100364.7</span>)</pre></div>
<h3 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword arguments</h3>
<ul dir="auto">
<li><code>N</code> (default <code>STREAMBenchmark.default_vector_length()</code>): length of the vectors used in the streaming kernels</li>
<li><code>nthreads</code> (default <code>Threads.nthreads()</code>): Use <code>nthreads</code> threads for the benchmark. It must hold <code>1 ≤ nthreads ≤ Threads.nthreads()</code>.</li>
<li><code>write_allocate</code> (default: <code>true</code>): assume the use / count write allocates.</li>
<li><code>verbose</code> (default: <code>false</code>): verbose output, including the individual results of the streaming kernels.</li>
</ul>
<h2 dir="auto"><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>benchmark()</code></h2>
<p dir="auto">If you want to run both the single- and multi-threaded benchmark at once you can call <code>benchmark()</code> which produces an output like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; benchmark()
╔══╡ Single-threaded:
╟─ COPY:  18880.8 MB/s
╟─ SCALE: 18537.2 MB/s
╟─ ADD:   17380.2 MB/s
╟─ TRIAD: 17359.9 MB/s
╟─────────────────────
║ Median: 17958.7 MB/s
╚═════════════════════

╔══╡ Multi-threaded:
╠══╡ (10 threads)
╟─ COPY:  100358.1 MB/s
╟─ SCALE: 100218.2 MB/s
╟─ ADD:   99508.0 MB/s
╟─ TRIAD: 99582.4 MB/s
╟─────────────────────
║ Median: 99900.3 MB/s
╚═════════════════════

(single = (median = 17958.7, minimum = 17359.9, maximum = 18880.8), multi = (median = 99900.3, minimum = 99508.0, maximum = 100358.1))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">benchmark</span>()
╔══╡ Single<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">18880.8</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">18537.2</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">17380.2</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">17359.9</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">17958.7</span> MB<span class="pl-k">/</span>s
╚═════════════════════

╔══╡ Multi<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╠══╡ (<span class="pl-c1">10</span> threads)
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">100358.1</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">100218.2</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">99508.0</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">99582.4</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">99900.3</span> MB<span class="pl-k">/</span>s
╚═════════════════════

(single <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">17958.7</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">17359.9</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">18880.8</span>), multi <span class="pl-k">=</span> (median <span class="pl-k">=</span> <span class="pl-c1">99900.3</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">99508.0</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">100358.1</span>))</pre></div>
<h2 dir="auto"><a id="user-content-scaling" class="anchor" aria-hidden="true" href="#scaling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scaling</h2>
<h3 dir="auto"><a id="user-content-number-of-threads" class="anchor" aria-hidden="true" href="#number-of-threads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Number of threads</h3>
<p dir="auto">To assess the scaling of the maximal memory bandwidth with the number of threads, we provide the function <code>scaling_benchmark()</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; y = scaling_benchmark()
# Threads: 1	Max. memory bandwidth: 19058.7
# Threads: 2	Max. memory bandwidth: 37511.2
# Threads: 3	Max. memory bandwidth: 55204.6
# Threads: 4	Max. memory bandwidth: 68706.6
# Threads: 5	Max. memory bandwidth: 76869.9
# Threads: 6	Max. memory bandwidth: 83669.9
# Threads: 7	Max. memory bandwidth: 88656.0
# Threads: 8	Max. memory bandwidth: 93701.0
# Threads: 9	Max. memory bandwidth: 97093.6
# Threads: 10	Max. memory bandwidth: 101293.9
10-element Vector{Float64}:
  19058.7
  37511.2
  55204.6
  68706.6
  76869.9
  83669.9
  88656.0
  93701.0
  97093.6
 101293.9
 
julia&gt; using UnicodePlots

julia&gt; lineplot(1:length(y), y, title = &quot;Bandwidth Scaling&quot;, xlabel = &quot;# cores&quot;, ylabel = &quot;MB/s&quot;, border = :ascii, canvas = AsciiCanvas)

                            Bandwidth Scaling
               +----------------------------------------+
        110000 |                                        |
               |                                   __r-*|
               |                            __--&quot;&quot;&quot;     |
               |                      __-*&quot;&quot;            |
               |                 ._-*&quot;                  |
               |              .r*&quot;                      |
               |           .r&quot;`                         |
   MB/s        |         .*'                            |
               |       ./`                              |
               |      .'                                |
               |    ./                                  |
               |  .r`                                   |
               | ./                                     |
               |*`                                      |
         10000 |                                        |
               +----------------------------------------+
                1                                     10
                                 # cores"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">scaling_benchmark</span>()
<span class="pl-c"><span class="pl-c">#</span> Threads: 1	Max. memory bandwidth: 19058.7</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 2	Max. memory bandwidth: 37511.2</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 3	Max. memory bandwidth: 55204.6</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 4	Max. memory bandwidth: 68706.6</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 5	Max. memory bandwidth: 76869.9</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 6	Max. memory bandwidth: 83669.9</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 7	Max. memory bandwidth: 88656.0</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 8	Max. memory bandwidth: 93701.0</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 9	Max. memory bandwidth: 97093.6</span>
<span class="pl-c"><span class="pl-c">#</span> Threads: 10	Max. memory bandwidth: 101293.9</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">19058.7</span>
  <span class="pl-c1">37511.2</span>
  <span class="pl-c1">55204.6</span>
  <span class="pl-c1">68706.6</span>
  <span class="pl-c1">76869.9</span>
  <span class="pl-c1">83669.9</span>
  <span class="pl-c1">88656.0</span>
  <span class="pl-c1">93701.0</span>
  <span class="pl-c1">97093.6</span>
 <span class="pl-c1">101293.9</span>
 
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnicodePlots

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(y), y, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Bandwidth Scaling<span class="pl-pds">"</span></span>, xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span># cores<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MB/s<span class="pl-pds">"</span></span>, border <span class="pl-k">=</span> <span class="pl-c1">:ascii</span>, canvas <span class="pl-k">=</span> AsciiCanvas)

                            Bandwidth Scaling
               <span class="pl-k">+----------------------------------------+</span>
        <span class="pl-c1">110000</span> <span class="pl-k">|</span>                                        <span class="pl-k">|</span>
               <span class="pl-k">|</span>                                   __r<span class="pl-k">-*</span><span class="pl-k">|</span>
               <span class="pl-k">|</span>                            __<span class="pl-k">--</span><span class="pl-s"><span class="pl-pds">"""</span>     |</span>
<span class="pl-s">               |                      __-*""            |</span>
<span class="pl-s">               |                 ._-*"                  |</span>
<span class="pl-s">               |              .r*"                      |</span>
<span class="pl-s">               |           .r"`                         |</span>
<span class="pl-s">   MB/s        |         .*'                            |</span>
<span class="pl-s">               |       ./`                              |</span>
<span class="pl-s">               |      .'                                |</span>
<span class="pl-s">               |    ./                                  |</span>
<span class="pl-s">               |  .r`                                   |</span>
<span class="pl-s">               | ./                                     |</span>
<span class="pl-s">               |*`                                      |</span>
<span class="pl-s">         10000 |                                        |</span>
<span class="pl-s">               +----------------------------------------+</span>
<span class="pl-s">                1                                     10</span>
<span class="pl-s">                                 # cores</span></pre></div>
<h3 dir="auto"><a id="user-content-vector-length" class="anchor" aria-hidden="true" href="#vector-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vector length</h3>
<p dir="auto">By default a vector length of four times the size of the outermost cache is used (a rule of thumb <a href="https://blogs.fau.de/hager/archives/8263" rel="nofollow">"laid down by Dr. Bandwidth"</a>). To measure the memory bandwidth for a few other factorsas well you might want to use <code>STREAMBenchmark.vector_length_dependence()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; STREAMBenchmark.vector_length_dependence()
1: 3604480 =&gt; 121692.2
2: 7208960 =&gt; 99755.5
3: 10813440 =&gt; 98705.5
4: 14417920 =&gt; 98660.5
Dict{Int64, Float64} with 4 entries:
  10813440 =&gt; 98705.5
  7208960  =&gt; 99755.5
  3604480  =&gt; 1.21692e5
  14417920 =&gt; 98660.5"><pre>julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">vector_length_dependence</span>()
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">3604480</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">121692.2</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">7208960</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">99755.5</span>
<span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">10813440</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">98705.5</span>
<span class="pl-c1">4</span><span class="pl-k">:</span> <span class="pl-c1">14417920</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">98660.5</span>
Dict{Int64, Float64} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">10813440</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">98705.5</span>
  <span class="pl-c1">7208960</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">99755.5</span>
  <span class="pl-c1">3604480</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1.21692e5</span>
  <span class="pl-c1">14417920</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">98660.5</span></pre></div>
<h2 dir="auto"><a id="user-content-comparison-with-original-stream-benchmark" class="anchor" aria-hidden="true" href="#comparison-with-original-stream-benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison with original STREAM benchmark</h2>
<p dir="auto">We can download and compile the <a href="https://www.cs.virginia.edu/stream/FTP/Code/" rel="nofollow">C source code</a> of the original STREAM benchmark via STREAMBenchmark.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using STREAMBenchmark

julia&gt; STREAMBenchmark.download_original_STREAM()
- Creating folder &quot;stream&quot;
- Downloading C STREAM benchmark
- Done.

julia&gt; STREAMBenchmark.compile_original_STREAM(compiler=:gcc, multithreading=false)
- Trying to compile &quot;stream.c&quot; using gcc
  Using options: -O3 -DSTREAM_ARRAY_SIZE=14417920
- Done.

julia&gt; STREAMBenchmark.execute_original_STREAM()
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 14417920 (elements), Offset = 0 (elements)
Memory per array = 110.0 MiB (= 0.1 GiB).
Total memory required = 330.0 MiB (= 0.3 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11047 microseconds.
   (= 11047 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           11039.8     0.020987     0.020896     0.021092
Scale:          12491.1     0.018509     0.018468     0.018537
Add:            13370.0     0.025934     0.025881     0.026183
Triad:          13396.9     0.025903     0.025829     0.026223
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------

julia&gt; memory_bandwidth(verbose=true, nthreads=1, write_allocate=false) # the original benchmark doesn't count / assumes the absence of write-allocates
╔══╡ Single-threaded:
╠══╡ (1 threads)
╟─ COPY:  12749.1 MB/s
╟─ SCALE: 12468.2 MB/s
╟─ ADD:   13095.3 MB/s
╟─ TRIAD: 13131.2 MB/s
╟─────────────────────
║ Median: 12922.2 MB/s
╚═════════════════════
(median = 12922.2, minimum = 12468.2, maximum = 13131.2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> STREAMBenchmark

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">download_original_STREAM</span>()
<span class="pl-k">-</span> Creating folder <span class="pl-s"><span class="pl-pds">"</span>stream<span class="pl-pds">"</span></span>
<span class="pl-k">-</span> Downloading C STREAM benchmark
<span class="pl-k">-</span> Done.

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">compile_original_STREAM</span>(compiler<span class="pl-k">=</span><span class="pl-c1">:gcc</span>, multithreading<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-k">-</span> Trying to compile <span class="pl-s"><span class="pl-pds">"</span>stream.c<span class="pl-pds">"</span></span> <span class="pl-k">using</span> gcc
  Using options<span class="pl-k">:</span> <span class="pl-k">-</span>O3 <span class="pl-k">-</span>DSTREAM_ARRAY_SIZE<span class="pl-k">=</span><span class="pl-c1">14417920</span>
<span class="pl-k">-</span> Done.

julia<span class="pl-k">&gt;</span> STREAMBenchmark<span class="pl-k">.</span><span class="pl-c1">execute_original_STREAM</span>()
<span class="pl-k">-------------------------------------------------------------</span>
STREAM version <span class="pl-k">$</span>Revision<span class="pl-k">:</span> <span class="pl-c1">5.10</span> $
<span class="pl-k">-------------------------------------------------------------</span>
This system uses <span class="pl-c1">8</span> bytes per array element.
<span class="pl-k">-------------------------------------------------------------</span>
Array size <span class="pl-k">=</span> <span class="pl-c1">14417920</span> (elements), Offset <span class="pl-k">=</span> <span class="pl-c1">0</span> (elements)
Memory per array <span class="pl-k">=</span> <span class="pl-c1">110.0</span> MiB (<span class="pl-k">=</span> <span class="pl-c1">0.1</span> GiB)<span class="pl-k">.</span>
Total memory required <span class="pl-k">=</span> <span class="pl-c1">330.0</span> MiB (<span class="pl-k">=</span> <span class="pl-c1">0.3</span> GiB)<span class="pl-k">.</span>
Each kernel will be executed <span class="pl-c1">10</span> times.
 The <span class="pl-k">*</span>best<span class="pl-k">*</span> time <span class="pl-k">for</span> each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
<span class="pl-k">-------------------------------------------------------------</span>
Your clock granularity<span class="pl-k">/</span>precision appears to be <span class="pl-c1">1</span> microseconds.
Each test below will take on the order of <span class="pl-c1">11047</span> microseconds.
   (<span class="pl-k">=</span> <span class="pl-c1">11047</span> clock ticks)
Increase the size of the arrays <span class="pl-k">if</span> this shows that
you are not getting at least <span class="pl-c1">20</span> clock ticks per test.
<span class="pl-k">-------------------------------------------------------------</span>
WARNING <span class="pl-k">--</span> The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
<span class="pl-k">-------------------------------------------------------------</span>
Function    Best Rate MB<span class="pl-k">/</span>s  Avg time     Min time     Max time
Copy<span class="pl-k">:</span>           <span class="pl-c1">11039.8</span>     <span class="pl-c1">0.020987</span>     <span class="pl-c1">0.020896</span>     <span class="pl-c1">0.021092</span>
Scale<span class="pl-k">:</span>          <span class="pl-c1">12491.1</span>     <span class="pl-c1">0.018509</span>     <span class="pl-c1">0.018468</span>     <span class="pl-c1">0.018537</span>
Add<span class="pl-k">:</span>            <span class="pl-c1">13370.0</span>     <span class="pl-c1">0.025934</span>     <span class="pl-c1">0.025881</span>     <span class="pl-c1">0.026183</span>
Triad<span class="pl-k">:</span>          <span class="pl-c1">13396.9</span>     <span class="pl-c1">0.025903</span>     <span class="pl-c1">0.025829</span>     <span class="pl-c1">0.026223</span>
<span class="pl-k">-------------------------------------------------------------</span>
Solution Validates<span class="pl-k">:</span> avg error less than <span class="pl-c1">1.000000e-13</span> on all three arrays
<span class="pl-k">-------------------------------------------------------------</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">memory_bandwidth</span>(verbose<span class="pl-k">=</span><span class="pl-c1">true</span>, nthreads<span class="pl-k">=</span><span class="pl-c1">1</span>, write_allocate<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> the original benchmark doesn't count / assumes the absence of write-allocates</span>
╔══╡ Single<span class="pl-k">-</span>threaded<span class="pl-k">:</span>
╠══╡ (<span class="pl-c1">1</span> threads)
╟─ COPY<span class="pl-k">:</span>  <span class="pl-c1">12749.1</span> MB<span class="pl-k">/</span>s
╟─ SCALE<span class="pl-k">:</span> <span class="pl-c1">12468.2</span> MB<span class="pl-k">/</span>s
╟─ ADD<span class="pl-k">:</span>   <span class="pl-c1">13095.3</span> MB<span class="pl-k">/</span>s
╟─ TRIAD<span class="pl-k">:</span> <span class="pl-c1">13131.2</span> MB<span class="pl-k">/</span>s
╟─────────────────────
║ Median<span class="pl-k">:</span> <span class="pl-c1">12922.2</span> MB<span class="pl-k">/</span>s
╚═════════════════════
(median <span class="pl-k">=</span> <span class="pl-c1">12922.2</span>, minimum <span class="pl-k">=</span> <span class="pl-c1">12468.2</span>, maximum <span class="pl-k">=</span> <span class="pl-c1">13131.2</span>)</pre></div>
<h2 dir="auto"><a id="user-content-further-options-and-comments" class="anchor" aria-hidden="true" href="#further-options-and-comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Further Options and Comments</h2>
<h3 dir="auto"><a id="user-content-loopvectorization" class="anchor" aria-hidden="true" href="#loopvectorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LoopVectorization</h3>
<p dir="auto">You can make STREAMBenchmarks.jl use <a href="https://github.com/JuliaSIMD/LoopVectorization.jl">LoopVectorization</a>'s <code>@avxt</code> instead of <code>@threads</code> by setting <code>STREAMBenchmark.avxt() = true</code>. Note, however, that this only works if <code>nthreads=1</code> (single thread is used) or <code>nthreads=Threads.nthreads()</code> (all threads are used). This because <code>@avxt</code> isn't compatible with our way to let the benchmark only run on a subset of the available Julia threads.</p>
<h3 dir="auto"><a id="user-content-thread-pinning" class="anchor" aria-hidden="true" href="#thread-pinning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thread pinning</h3>
<p dir="auto">It is recommended to either set the environmental variable <code>JULIA_EXCLUSIVE = 1</code> or use <code>pinthreads(:compact)</code> from <a href="https://github.com/carstenbauer/ThreadPinning.jl">ThreadPinning.jl</a> to pin the used Julia threads to the first <code>1:nthreads</code> cores.</p>
<p dir="auto">See <a href="https://discourse.julialang.org/t/thread-affinitization-pinning-julia-threads-to-cores/58069" rel="nofollow">https://discourse.julialang.org/t/thread-affinitization-pinning-julia-threads-to-cores/58069</a> for a discussion of other options like <code>numactl</code> (with caveats).</p>
<h2 dir="auto"><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resources</h2>
<ul dir="auto">
<li>Original STREAM benchmark (C/Fortran): <a href="https://www.cs.virginia.edu/stream/" rel="nofollow">https://www.cs.virginia.edu/stream/</a></li>
<li>Blog post about how to optimize and interpret the benchmark: <a href="https://blogs.fau.de/hager/archives/8263" rel="nofollow">https://blogs.fau.de/hager/archives/8263</a></li>
</ul>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<ul dir="auto">
<li>CI infrastructure is provided by the <a href="https://pc2.uni-paderborn.de/" rel="nofollow">Paderborn Center for Parallel Computing (PC²)</a></li>
</ul>
</article></div>