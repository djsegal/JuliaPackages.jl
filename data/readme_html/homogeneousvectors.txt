<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-homogeneousvectors" class="anchor" aria-hidden="true" href="#homogeneousvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HomogeneousVectors</h1>
<p dir="auto"><a href="https://cserteGT3.github.io/HomogeneousVectors.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cserteGT3.github.io/HomogeneousVectors.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cserteGT3/HomogeneousVectors.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/cserteGT3/HomogeneousVectors.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">HomogeneousVectors.jl is a package for easy 3D coordinate transformation.
It's main purpose is to give an easily usable interface for one-time transformations.
If many vectors need transformations, it is maybe more convinient to use 4 long <code>SVector</code>s.</p>
<p dir="auto">Here's an example for usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using HomogeneousVectors

julia&gt; v1 = [0, 1, 2]
3-element Vector{Int64}:
 0
 1
 2

julia&gt; hm = SHM([1 0 0; 0 1 0; 0 0 1], [0, -1, -2])
4×4 SMatrix{4, 4, Int64, 16} with indices SOneTo(4)×SOneTo(4):
 1  0  0   0
 0  1  0  -1
 0  0  1  -2
 0  0  0   1

julia&gt; vtransformed = HV(v1)*hm
3-element Vector{Int64}:
 0
 0
 0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HomogeneousVectors

julia<span class="pl-k">&gt;</span> v1 <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> hm <span class="pl-k">=</span> <span class="pl-c1">SHM</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>], [<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>])
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> SMatrix{<span class="pl-c1">4</span>, <span class="pl-c1">4</span>, Int64, <span class="pl-c1">16</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>   <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>   <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> vtransformed <span class="pl-k">=</span> <span class="pl-c1">HV</span>(v1)<span class="pl-k">*</span>hm
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>
</pre></div>
<h2 dir="auto"><a id="user-content-design-details" class="anchor" aria-hidden="true" href="#design-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Design details</h2>
<p dir="auto">The main idea behind the package is, that many times 3 long vectors are used and it would be inconvinient ti always add a 4th <code>1</code> element for homogeneous transformations.
Therefore the type <code>HomogeneousVector</code> (or shortly <code>HV</code>) wraps the vector, and by multiplying in with a homogeneous matrix, a vector of the original type is returned.</p>
<p dir="auto">Homogeneous matrixes types are aliases for <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays</a> matrixes and are available as:</p>
<ul dir="auto">
<li><code>StaticHomogeneousMatrix{T}</code> (or <code>SHM</code>): is an alias for <code>SMatrix{4,4,T,16}</code> and is static.</li>
<li><code>MutableHomogeneousMatrix{T}</code> (or <code>MHM</code>): is an alias for <code>MMatrix{4,4,T,16}</code> and is mutable.</li>
</ul>
<p dir="auto">Convinience constructors are available as shown in the above example: <code>SHM(rotationmatrix, translationvector)</code> and <code>MHM(rotationmatrix, translationvector)</code>.
Further constructors are planned.</p>
</article></div>