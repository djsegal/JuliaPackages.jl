<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nanovg" class="anchor" aria-hidden="true" href="#nanovg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NanoVG</h1>
<p dir="auto">Julia bindings for the <a href="https://github.com/memononen/nanovg">NanoVG</a> drawing library.</p>
<blockquote>
<p dir="auto">NanoVG is small antialiased vector graphics rendering library for OpenGL.
It has lean API modeled after HTML5 canvas API. It is aimed to be a practical and fun toolset for building scalable user interfaces and visualizations.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-screenshot" class="anchor" aria-hidden="true" href="#screenshot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Screenshot</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/screenshot.png"><img src="assets/screenshot.png" alt="NanoVG Demo" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">NanoVG is a Â 
<a href="https://julialang.org" rel="nofollow">
<img src="https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico" width="16em" style="max-width: 100%;">
Julia Language
</a>
Â  package. To install NanoVG,
<a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">open
Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command:</p>
<p dir="auto"></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/dylanxyz/NanoVG.jl"><pre>pkg<span class="pl-k">&gt;</span> add https://github.com/dylanxyz/NanoVG.jl</pre></div>
<blockquote>
<p dir="auto">Note that NanoVG is not yet at the public registry,
installation is done directly from this repo.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">In progress...</p>
<h2 dir="auto"><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GLFW
using NanoVG
using ModernGL

function main()
   title = &quot;NanoVG Basic Example&quot;
   width = 800
   height = 600

   window = GLFW.CreateWindow(width, height, title)
   @assert window.handle != C_NULL &quot;Could not create a GLFW window ðŸ˜¢&quot;

   GLFW.MakeContextCurrent(window)

   # Create the NanoVG context with the GL3 implementation
   NanoVG.create(NanoVG.GL3, antialiasing=true)

   while true
      if GLFW.WindowShouldClose(window) break end
      # get the framebuffer size
      width, height = GLFW.GetFramebufferSize(window)
      # get the window size
      winWidth, winHeight = GLFW.GetWindowSize(window)
      # dpr = device pixel ratio
      dpr = width / winWidth
      # set the viewport
      glViewport(0, 0, width, height)
      # create a new frame
      NanoVG.frame(winWidth, winHeight, dpr)
      # drawing functions should be called here
      
      # set the fill color
      fillcolor(rgb(128, 32, 56))
      # draw a filled circle at the center of the screen
      circle(width/2, height/2, 128, :fill)

      # render the frame to the screen
      NanoVG.render()

      GLFW.SwapBuffers(window)
      GLFW.PollEvents()
   end

   NanoVG.dispose()
   GLFW.DestroyWindow(window)
end

main()"><pre><span class="pl-k">using</span> GLFW
<span class="pl-k">using</span> NanoVG
<span class="pl-k">using</span> ModernGL

<span class="pl-k">function</span> <span class="pl-en">main</span>()
   title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>NanoVG Basic Example<span class="pl-pds">"</span></span>
   width <span class="pl-k">=</span> <span class="pl-c1">800</span>
   height <span class="pl-k">=</span> <span class="pl-c1">600</span>

   window <span class="pl-k">=</span> GLFW<span class="pl-k">.</span><span class="pl-c1">CreateWindow</span>(width, height, title)
   <span class="pl-c1">@assert</span> window<span class="pl-k">.</span>handle <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span> <span class="pl-s"><span class="pl-pds">"</span>Could not create a GLFW window ðŸ˜¢<span class="pl-pds">"</span></span>

   GLFW<span class="pl-k">.</span><span class="pl-c1">MakeContextCurrent</span>(window)

   <span class="pl-c"><span class="pl-c">#</span> Create the NanoVG context with the GL3 implementation</span>
   NanoVG<span class="pl-k">.</span><span class="pl-c1">create</span>(NanoVG<span class="pl-k">.</span>GL3, antialiasing<span class="pl-k">=</span><span class="pl-c1">true</span>)

   <span class="pl-k">while</span> <span class="pl-c1">true</span>
      <span class="pl-k">if</span> GLFW<span class="pl-k">.</span><span class="pl-c1">WindowShouldClose</span>(window) <span class="pl-k">break</span> <span class="pl-k">end</span>
      <span class="pl-c"><span class="pl-c">#</span> get the framebuffer size</span>
      width, height <span class="pl-k">=</span> GLFW<span class="pl-k">.</span><span class="pl-c1">GetFramebufferSize</span>(window)
      <span class="pl-c"><span class="pl-c">#</span> get the window size</span>
      winWidth, winHeight <span class="pl-k">=</span> GLFW<span class="pl-k">.</span><span class="pl-c1">GetWindowSize</span>(window)
      <span class="pl-c"><span class="pl-c">#</span> dpr = device pixel ratio</span>
      dpr <span class="pl-k">=</span> width <span class="pl-k">/</span> winWidth
      <span class="pl-c"><span class="pl-c">#</span> set the viewport</span>
      <span class="pl-c1">glViewport</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, width, height)
      <span class="pl-c"><span class="pl-c">#</span> create a new frame</span>
      NanoVG<span class="pl-k">.</span><span class="pl-c1">frame</span>(winWidth, winHeight, dpr)
      <span class="pl-c"><span class="pl-c">#</span> drawing functions should be called here</span>
      
      <span class="pl-c"><span class="pl-c">#</span> set the fill color</span>
      <span class="pl-c1">fillcolor</span>(<span class="pl-c1">rgb</span>(<span class="pl-c1">128</span>, <span class="pl-c1">32</span>, <span class="pl-c1">56</span>))
      <span class="pl-c"><span class="pl-c">#</span> draw a filled circle at the center of the screen</span>
      <span class="pl-c1">circle</span>(width<span class="pl-k">/</span><span class="pl-c1">2</span>, height<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">128</span>, <span class="pl-c1">:fill</span>)

      <span class="pl-c"><span class="pl-c">#</span> render the frame to the screen</span>
      NanoVG<span class="pl-k">.</span><span class="pl-c1">render</span>()

      GLFW<span class="pl-k">.</span><span class="pl-c1">SwapBuffers</span>(window)
      GLFW<span class="pl-k">.</span><span class="pl-c1">PollEvents</span>()
   <span class="pl-k">end</span>

   NanoVG<span class="pl-k">.</span><span class="pl-c1">dispose</span>()
   GLFW<span class="pl-k">.</span><span class="pl-c1">DestroyWindow</span>(window)
<span class="pl-k">end</span>

<span class="pl-c1">main</span>()</pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">This package is licensed under the <a href="LICENSE">MIT</a> license.</p>
<p dir="auto">NanoVG is licensed under the <a href="https://github.com/memononen/nanovg/blob/master/LICENSE.txt">zlib license</a>.</p>
<p dir="auto">Additional licenses for <a href="examples/assets">assets</a>:</p>
<ul dir="auto">
<li>Roboto is licensed under the <a href="https://www.apache.org/licenses/LICENSE-2.0" rel="nofollow">Apache License</a></li>
<li>Entypo licensed under CC BY-SA 4.0.</li>
<li>Noto Emoji licensed under <a href="http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=OFL" rel="nofollow">SIL Open Font License, Version 1.1</a></li>
</ul>
</article></div>