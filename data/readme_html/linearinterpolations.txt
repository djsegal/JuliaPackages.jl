<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-linearinterpolations" class="anchor" aria-hidden="true" href="#linearinterpolations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LinearInterpolations</h1>
<p><a href="https://jw3126.github.io/LinearInterpolations.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jw3126.github.io/LinearInterpolations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/jw3126/LinearInterpolations.jl/actions"><img src="https://github.com/jw3126/LinearInterpolations.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<h1><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why?</h1>
<p>There are many excellent packages for interpolation in Julia. For instance:</p>
<ul>
<li><a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a></li>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a></li>
<li><a href="https://github.com/sisl/GridInterpolations.jl">GridInterpolations.jl</a></li>
</ul>
<p>All packages I am aware of assume, that the objects being interpolated implement addition and
scalar multiplication. However mathematically only a notion of weighted average is required for linear interpolation.
Examples of objects that support weighted average, but not addition and/or scalar multiplication are:</p>
<ul>
<li>Probability distributions</li>
<li>Rotations and various other Lie groups</li>
</ul>
<p>This package works with any notion of weighted average.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearInterpolations

julia&gt; xs = 1:3; ys=[10, 100, 1000]; # 1d

julia&gt; interpolate(xs, ys, 1)
10.0

julia&gt; interpolate(xs, ys, 1.5)
55.0

julia&gt; pt = [1.5]; interpolate(xs, ys, pt)
55.0

julia&gt; itp = Interpolate(xs, ys); # construct a callable for convenience

julia&gt; itp(1.5)
55.0

julia&gt; grid=(1:3, [10, 15]); vals = [1 2; 3 4; 5 6]; pt=[1,10]; # multi dimensional

julia&gt; interpolate(grid, vals, pt)
1.0

julia&gt; function winner_takes_it_all(wts, objs)
    # custom notion of weighted average
    I = argmax(wts)
    return objs[I]
end

julia&gt; xs = 1:4; ys=[:no, :addition, :or, :multiplication];

julia&gt; interpolate(xs, ys, 1.1, combine=winner_takes_it_all)
:no

julia&gt; interpolate(xs, ys, 1.9, combine=winner_takes_it_all)
:addition

julia&gt; interpolate(xs, ys, 3.7, combine=winner_takes_it_all)
:multiplication
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearInterpolations

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>; ys<span class="pl-k">=</span>[<span class="pl-c1">10</span>, <span class="pl-c1">100</span>, <span class="pl-c1">1000</span>]; <span class="pl-c"><span class="pl-c">#</span> 1d</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(xs, ys, <span class="pl-c1">1</span>)
<span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(xs, ys, <span class="pl-c1">1.5</span>)
<span class="pl-c1">55.0</span>

julia<span class="pl-k">&gt;</span> pt <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>]; <span class="pl-c1">interpolate</span>(xs, ys, pt)
<span class="pl-c1">55.0</span>

julia<span class="pl-k">&gt;</span> itp <span class="pl-k">=</span> <span class="pl-c1">Interpolate</span>(xs, ys); <span class="pl-c"><span class="pl-c">#</span> construct a callable for convenience</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">itp</span>(<span class="pl-c1">1.5</span>)
<span class="pl-c1">55.0</span>

julia<span class="pl-k">&gt;</span> grid<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, [<span class="pl-c1">10</span>, <span class="pl-c1">15</span>]); vals <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>; <span class="pl-c1">5</span> <span class="pl-c1">6</span>]; pt<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">10</span>]; <span class="pl-c"><span class="pl-c">#</span> multi dimensional</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(grid, vals, pt)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">winner_takes_it_all</span>(wts, objs)
    <span class="pl-c"><span class="pl-c">#</span> custom notion of weighted average</span>
    I <span class="pl-k">=</span> <span class="pl-c1">argmax</span>(wts)
    <span class="pl-k">return</span> objs[I]
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>; ys<span class="pl-k">=</span>[<span class="pl-c1">:no</span>, <span class="pl-c1">:addition</span>, <span class="pl-c1">:or</span>, <span class="pl-c1">:multiplication</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(xs, ys, <span class="pl-c1">1.1</span>, combine<span class="pl-k">=</span>winner_takes_it_all)
<span class="pl-c1">:no</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(xs, ys, <span class="pl-c1">1.9</span>, combine<span class="pl-k">=</span>winner_takes_it_all)
<span class="pl-c1">:addition</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(xs, ys, <span class="pl-c1">3.7</span>, combine<span class="pl-k">=</span>winner_takes_it_all)
<span class="pl-c1">:multiplication</span></pre></div>
<h1><a id="user-content-design-goals" class="anchor" aria-hidden="true" href="#design-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Design goals</h1>
<ul>
<li>Lightweight and simple</li>
<li>Support interpolation of objects that don't define <code>+,*</code></li>
<li>Reasonable performance</li>
</ul>
</article></div>