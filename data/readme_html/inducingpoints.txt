<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-inducingpoints" class="anchor" aria-hidden="true" href="#inducingpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InducingPoints</h1>
<p dir="auto"><a href="https://JuliaGaussianProcesses.github.io/InducingPoints.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaGaussianProcesses.github.io/InducingPoints.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaGaussianProcesses/InducingPoints.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaGaussianProcesses/InducingPoints.jl/workflows/CI/badge.svg" alt="BuildStatus" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaGaussianProcesses/InducingPoints.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6c00d5c86affe32f1990c7780402139750ad9822a1faad84a73d135a461ee185/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961476175737369616e50726f6365737365732f496e647563696e67506f696e74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/JuliaGaussianProcesses/InducingPoints.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A package for selecting inducing points for sparse GPs</p>
<p dir="auto">This package provide a collection of inducing point location selection algorithms, both offline and online.</p>
<h2 dir="auto"><a id="user-content-offline-algorithms" class="anchor" aria-hidden="true" href="#offline-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Offline algorithms</h2>
<p dir="auto">Offline algorithms are meant to be run once over the data before training begins.
Here is an example where we use the k-means algorithm</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using InducingPoints
X = [rand(5) for _ in 1:100]
alg = KMeansAlg(10) # Create the kmeans algorithm
Z = inducingpoints(alg, X) # Returns a vector of vector of size 10 "><pre><span class="pl-k">using</span> InducingPoints
X <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]
alg <span class="pl-k">=</span> <span class="pl-c1">KMeansAlg</span>(<span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> Create the kmeans algorithm</span>
Z <span class="pl-k">=</span> <span class="pl-c1">inducingpoints</span>(alg, X) <span class="pl-c"><span class="pl-c">#</span> Returns a vector of vector of size 10 </span></pre></div>
<p dir="auto">will return 10 inducing points selected as clusters by the k-means algorithm</p>
<p dir="auto">Note that it is possible to pass data as a matrix as well following the convention of <a href="https://juliagaussianprocesses.github.io/KernelFunctions.jl/dev/userguide/#Creating-a-Kernel-Matrix" rel="nofollow">KernelFunctions.jl</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="X = rand(5 , 1000)
alg = KMeansAlg(10, Euclidean()) # We can also use different metrics
Z = inducingpoints(alg, X) # This still returns a vector of vector of size 10 "><pre>X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span> , <span class="pl-c1">1000</span>)
alg <span class="pl-k">=</span> <span class="pl-c1">KMeansAlg</span>(<span class="pl-c1">10</span>, <span class="pl-c1">Euclidean</span>()) <span class="pl-c"><span class="pl-c">#</span> We can also use different metrics</span>
Z <span class="pl-k">=</span> <span class="pl-c1">inducingpoints</span>(alg, X) <span class="pl-c"><span class="pl-c">#</span> This still returns a vector of vector of size 10 </span></pre></div>
<h2 dir="auto"><a id="user-content-online-algorithms" class="anchor" aria-hidden="true" href="#online-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Online algorithms</h2>
<p dir="auto">Online algorithms needs two API, a first one to create the initial vector of inducing points and another one to update it with new data.
For example following <a href="https://drive.google.com/file/d/1IPTUBfY_b2WElTWBIVU4lrbHcXnbTWdB/view" rel="nofollow">this work</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="alg = OIPS(200) # We expect 200 inducing points
kernel = SqExponential()
X = [rand(5) for _ in 1:100] # We have some initial data
Z = inducingpoints(alg, X; kernel=kernel) # We create an initial vector
X_new = [rand(5) for _ in 1:50] # We get some new data
updateZ!(Z, alg, X_new; kernel=kernel) # Points will be acordingly added (or removed!)"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">OIPS</span>(<span class="pl-c1">200</span>) <span class="pl-c"><span class="pl-c">#</span> We expect 200 inducing points</span>
kernel <span class="pl-k">=</span> <span class="pl-c1">SqExponential</span>()
X <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-c"><span class="pl-c">#</span> We have some initial data</span>
Z <span class="pl-k">=</span> <span class="pl-c1">inducingpoints</span>(alg, X; kernel<span class="pl-k">=</span>kernel) <span class="pl-c"><span class="pl-c">#</span> We create an initial vector</span>
X_new <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>] <span class="pl-c"><span class="pl-c">#</span> We get some new data</span>
<span class="pl-c1">updateZ!</span>(Z, alg, X_new; kernel<span class="pl-k">=</span>kernel) <span class="pl-c"><span class="pl-c">#</span> Points will be acordingly added (or removed!)</span></pre></div>
<p dir="auto">Note that <code>Z</code> is directly changed in place.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">Make sure to check each algorithm docs independently, they will give you more details on what arguments they need and what they do!</p>
</article></div>