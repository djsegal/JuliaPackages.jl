<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-histogramthresholdingjl" class="anchor" aria-hidden="true" href="#histogramthresholdingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HistogramThresholding.jl</h1>
<p><a href="https://github.com/zygmuntszpak/HistogramThresholding.jl/actions"><img src="https://github.com/zygmuntszpak/HistogramThresholding.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d3a22a052840e5f957de03edc6edddd9d47c55660c33356b8502e61ebc892b47/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f482f486973746f6772616d5468726573686f6c64696e672e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/H/HistogramThresholding.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/zygmuntszpak/HistogramThresholding.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85043a11dc3d0762c80043f131faf1f933aea8b8bc4690e2150bf1bd9be3e536/68747470733a2f2f636f6465636f762e696f2f67682f7a79676d756e74737a70616b2f486973746f6772616d5468726573686f6c64696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/zygmuntszpak/HistogramThresholding.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://zygmuntszpak.github.io/HistogramThresholding.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://zygmuntszpak.github.io/HistogramThresholding.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>A Julia package for analyzing a one-dimensional histogram and automatically choosing a threshold which partitions the histogram into two parts.</p>
<p>A full list of algorithms can be found in the <a href="https://zygmuntszpak.github.io/HistogramThresholding.jl/stable" rel="nofollow">documentation</a>. The algorithms were devised in the context of image processing applications but could prove useful in a variety of scenarios.</p>
<p>The general usage pattern is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = find_threshold(algorithm::ThresholdAlgorithm, histogram::AbstractArray, edges::AbstractRange)
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">find_threshold</span>(algorithm<span class="pl-k">::</span><span class="pl-c1">ThresholdAlgorithm</span>, histogram<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, edges<span class="pl-k">::</span><span class="pl-c1">AbstractRange</span>)</pre></div>
<p>where <code>length(histogram)</code> must match <code>length(edges)</code>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Suppose one wants to binarize an image. Binarization requires choosing a grey level (a threshold <code>t</code>) such that all pixel intensities below that threshold are set to black and all intensities equal or above the threshold are set to white. One can attempt to choose a reasonable threshold automatically by analyzing the distribution of intensities in the image.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HistogramThresholding
using TestImages # For the moonsurface image.  
using ImageContrastAdjustment # For the build_histogram() function.

img = testimage(&quot;moonsurface&quot;)
edges, counts = build_histogram(img,256)
#=
  The `counts` array stores at index 0 the frequencies that were below the
  first bin edge. Since we are seeking a threshold over the interval
  partitioned by `edges` we need to discard the first bin in `counts`
  so that the dimensions of `edges` and `counts` match.
=#
t = find_threshold(UnimodalRosin(), counts[1:end], edges)

# The threshold `t` can now be used to determine which intensities should be
# set to 0 (black), and which intensities should be set to 1 (white). 
"><pre><span class="pl-k">using</span> HistogramThresholding
<span class="pl-k">using</span> TestImages <span class="pl-c"><span class="pl-c">#</span> For the moonsurface image.  </span>
<span class="pl-k">using</span> ImageContrastAdjustment <span class="pl-c"><span class="pl-c">#</span> For the build_histogram() function.</span>

img <span class="pl-k">=</span> <span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>moonsurface<span class="pl-pds">"</span></span>)
edges, counts <span class="pl-k">=</span> <span class="pl-c1">build_histogram</span>(img,<span class="pl-c1">256</span>)
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">  The `counts` array stores at index 0 the frequencies that were below the</span>
<span class="pl-c">  first bin edge. Since we are seeking a threshold over the interval</span>
<span class="pl-c">  partitioned by `edges` we need to discard the first bin in `counts`</span>
<span class="pl-c">  so that the dimensions of `edges` and `counts` match.</span>
<span class="pl-c"><span class="pl-c">=#</span></span>
t <span class="pl-k">=</span> <span class="pl-c1">find_threshold</span>(<span class="pl-c1">UnimodalRosin</span>(), counts[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>], edges)

<span class="pl-c"><span class="pl-c">#</span> The threshold `t` can now be used to determine which intensities should be</span>
<span class="pl-c"><span class="pl-c">#</span> set to 0 (black), and which intensities should be set to 1 (white). </span></pre></div>
</article></div>