<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pencilffts" class="anchor" aria-hidden="true" href="#pencilffts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PencilFFTs</h1>
<p><a href="https://jipolanco.github.io/PencilFFTs.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jipolanco.github.io/PencilFFTs.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3618781" rel="nofollow"><img src="https://camo.githubusercontent.com/6a27c1db76472d4775d2492d70ff2e17422b1ecb69d895a55df3b5b12688aeea/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333631383738312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3618781.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/jipolanco/PencilFFTs.jl/actions"><img src="https://github.com/jipolanco/PencilFFTs.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jipolanco/PencilFFTs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cd41afa7f0c62ec5d017bc9c97d4ecfd6ea073cd141fd6c7c679b2f0fae6fbb/68747470733a2f2f636f6465636f762e696f2f67682f6a69706f6c616e636f2f50656e63696c464654732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jipolanco/PencilFFTs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Fast Fourier transforms of MPI-distributed Julia arrays.</p>
<p>This package provides multidimensional FFTs and related transforms on
MPI-distributed Julia arrays via the
<a href="https://github.com/jipolanco/PencilArrays.jl">PencilArrays</a> package.</p>
<p>The name of this package originates from the decomposition of 3D domains along
two out of three dimensions, sometimes called <em>pencil</em> decomposition.
This is illustrated by the figure below,
where each coloured block is managed by a different MPI process.
Typically, one wants to compute FFTs on a scalar or vector field along the
three spatial dimensions.
In the case of a pencil decomposition, 3D FFTs are performed one dimension at
a time (along the non-decomposed direction, using a serial FFT implementation).
Global data transpositions are then needed to switch from one pencil
configuration to the other and perform FFTs along the other dimensions.</p>
<p align="center">
  <br>
  <a target="_blank" rel="noopener noreferrer" href="docs/src/img/pencils.svg"><img width="85%" alt="Pencil decomposition of 3D domains" src="docs/src/img/pencils.svg" style="max-width:100%;"></a>
</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>
<p>distributed <code>N</code>-dimensional FFTs of MPI-distributed Julia arrays, using
the <a href="https://github.com/jipolanco/PencilArrays.jl">PencilArrays</a> package;</p>
</li>
<li>
<p>FFTs and related transforms (e.g.
<a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" rel="nofollow">DCTs</a> / Chebyshev
transforms) may be arbitrarily combined along different dimensions;</p>
</li>
<li>
<p>in-place and out-of-place transforms;</p>
</li>
<li>
<p>high scalability up to (at least) tens of thousands of MPI processes.</p>
</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>PencilFFTs can be installed using the Julia package manager:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add PencilFFTs
"><pre><code>julia&gt; ] add PencilFFTs
</code></pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>The following example shows how to apply a 3D FFT of real data over 12 MPI
processes distributed on a <code>3 × 4</code> grid (same distribution as in the figure
above).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using PencilFFTs
using Random

MPI.Init()

dims = (16, 32, 64)  # input data dimensions
transform = Transforms.RFFT()  # apply a 3D real-to-complex FFT

# Distribute 12 processes on a 3 × 4 grid.
comm = MPI.COMM_WORLD  # we assume MPI.Comm_size(comm) == 12
proc_dims = (3, 4)

# Create plan
plan = PencilFFTPlan(dims, transform, proc_dims, comm)

# Allocate and initialise input data, and apply transform.
u = allocate_input(plan)
rand!(u)
uF = plan * u

# Apply backwards transform. Note that the result is normalised.
v = plan \ uF
@assert u ≈ v
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> PencilFFTs
<span class="pl-k">using</span> Random

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()

dims <span class="pl-k">=</span> (<span class="pl-c1">16</span>, <span class="pl-c1">32</span>, <span class="pl-c1">64</span>)  <span class="pl-c"><span class="pl-c">#</span> input data dimensions</span>
transform <span class="pl-k">=</span> Transforms<span class="pl-k">.</span><span class="pl-c1">RFFT</span>()  <span class="pl-c"><span class="pl-c">#</span> apply a 3D real-to-complex FFT</span>

<span class="pl-c"><span class="pl-c">#</span> Distribute 12 processes on a 3 × 4 grid.</span>
comm <span class="pl-k">=</span> MPI<span class="pl-k">.</span>COMM_WORLD  <span class="pl-c"><span class="pl-c">#</span> we assume MPI.Comm_size(comm) == 12</span>
proc_dims <span class="pl-k">=</span> (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Create plan</span>
plan <span class="pl-k">=</span> <span class="pl-c1">PencilFFTPlan</span>(dims, transform, proc_dims, comm)

<span class="pl-c"><span class="pl-c">#</span> Allocate and initialise input data, and apply transform.</span>
u <span class="pl-k">=</span> <span class="pl-c1">allocate_input</span>(plan)
<span class="pl-c1">rand!</span>(u)
uF <span class="pl-k">=</span> plan <span class="pl-k">*</span> u

<span class="pl-c"><span class="pl-c">#</span> Apply backwards transform. Note that the result is normalised.</span>
v <span class="pl-k">=</span> plan <span class="pl-k">\</span> uF
<span class="pl-c1">@assert</span> u <span class="pl-k">≈</span> v</pre></div>
<p>For more details see the
<a href="https://jipolanco.github.io/PencilFFTs.jl/dev/tutorial/" rel="nofollow">tutorial</a>.</p>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>The performance of PencilFFTs is comparable to that of widely adopted MPI-based
FFT libraries implemented in lower-level languages.
As seen below, with its default settings, PencilFFTs generally outperforms the Fortran <a href="https://www.p3dfft.net/" rel="nofollow">P3DFFT</a> libraries.</p>
<p align="center">
  <br>
  <a target="_blank" rel="noopener noreferrer" href="docs/src/img/benchmark_idris.svg"><img width="70%" alt="Strong scaling of PencilFFTs" src="docs/src/img/benchmark_idris.svg" style="max-width:100%;"></a>
</p>
<p>See <a href="https://jipolanco.github.io/PencilFFTs.jl/dev/benchmarks/" rel="nofollow">the benchmarks
section</a> of the docs
for details.</p>
</article></div>