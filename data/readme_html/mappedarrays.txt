<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mappedarrays" class="anchor" aria-hidden="true" href="#mappedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MappedArrays</h1>
<p dir="auto"><a href="https://github.com/JuliaArrays/MappedArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaArrays/MappedArrays.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaArrays/MappedArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9ca036f22423ca5d967d02b8ebd8356ab2ad5351e31d30715a1eb72f1d9feb97/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f4d61707065644172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/MappedArrays.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements "lazy" in-place elementwise transformations of
arrays for the Julia programming language. Explicitly, it provides a
"view" <code>M</code> of an array <code>A</code> so that <code>M[i] = f(A[i])</code> for a specified
(but arbitrary) function <code>f</code>, without ever having to compute <code>M</code>
explicitly (in the sense of allocating storage for <code>M</code>).  The name of
the package comes from the fact that <code>M == map(f, A)</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-single-source-arrays" class="anchor" aria-hidden="true" href="#single-source-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Single source arrays</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MappedArrays

julia&gt; a = [1,4,9,16]
4-element Array{Int64,1}:
  1
  4
  9
 16

julia&gt; b = mappedarray(sqrt, a)
4-element mappedarray(sqrt, ::Array{Int64,1}) with eltype Float64:
 1.0
 2.0
 3.0
 4.0

julia&gt; b[3]
3.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MappedArrays

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">9</span>,<span class="pl-c1">16</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">mappedarray</span>(sqrt, a)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">mappedarray</span>(sqrt, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">3</span>]
<span class="pl-c1">3.0</span></pre></div>
<p dir="auto">Note that you can't set values in the array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; b[3] = 2
ERROR: setindex! not defined for ReadonlyMappedArray{Float64,1,Array{Int64,1},typeof(sqrt)}
Stacktrace:
 [1] error(::String, ::Type) at ./error.jl:42
 [2] error_if_canonical_setindex at ./abstractarray.jl:1005 [inlined]
 [3] setindex!(::ReadonlyMappedArray{Float64,1,Array{Int64,1},typeof(sqrt)}, ::Int64, ::Int64) at ./abstractarray.jl:996
 [4] top-level scope at none:0"><pre>julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>
ERROR<span class="pl-k">:</span> setindex! not defined <span class="pl-k">for</span> ReadonlyMappedArray{Float64,<span class="pl-c1">1</span>,Array{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">typeof</span>(sqrt)}
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>, <span class="pl-k">::</span><span class="pl-c1">Type</span>) at <span class="pl-k">./</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">42</span>
 [<span class="pl-c1">2</span>] error_if_canonical_setindex at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">1005</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">setindex!</span>(<span class="pl-k">::</span><span class="pl-c1">ReadonlyMappedArray{Float64,1,Array{Int64,1},typeof(sqrt)}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">996</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p dir="auto"><strong>unless</strong> you also supply the inverse function, using <code>mappedarray(f, finv, A)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; c = mappedarray(sqrt, x-&gt;x*x, a)
4-element mappedarray(sqrt, x-&gt;x * x, ::Array{Int64,1}) with eltype Float64:
 1.0
 2.0
 3.0
 4.0

julia&gt; c[3]
3.0

julia&gt; c[3] = 2
2

julia&gt; a
4-element Array{Int64,1}:
  1
  4
  4
 16"><pre class="notranslate"><code>julia&gt; c = mappedarray(sqrt, x-&gt;x*x, a)
4-element mappedarray(sqrt, x-&gt;x * x, ::Array{Int64,1}) with eltype Float64:
 1.0
 2.0
 3.0
 4.0

julia&gt; c[3]
3.0

julia&gt; c[3] = 2
2

julia&gt; a
4-element Array{Int64,1}:
  1
  4
  4
 16
</code></pre></div>
<p dir="auto">Naturally, the "backing" array <code>a</code> has to be able to represent any value that you set:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c[3] = 2.2
ERROR: InexactError: Int64(Int64, 4.840000000000001)
Stacktrace:
 [1] Type at ./float.jl:692 [inlined]
 [2] convert at ./number.jl:7 [inlined]
 [3] setindex! at ./array.jl:743 [inlined]
 [4] setindex!(::MappedArray{Float64,1,Array{Int64,1},typeof(sqrt),getfield(Main, Symbol(&quot;##5#6&quot;))}, ::Float64, ::Int64) at /home/tim/.julia/dev/MappedArrays/src/MappedArrays.jl:173
 [5] top-level scope at none:0"><pre>julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2.2</span>
ERROR<span class="pl-k">:</span> InexactError<span class="pl-k">:</span> <span class="pl-c1">Int64</span>(Int64, <span class="pl-c1">4.840000000000001</span>)
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] Type at <span class="pl-k">./</span>float<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">692</span> [inlined]
 [<span class="pl-c1">2</span>] convert at <span class="pl-k">./</span>number<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">7</span> [inlined]
 [<span class="pl-c1">3</span>] setindex! at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">743</span> [inlined]
 [<span class="pl-c1">4</span>] <span class="pl-c1">setindex!</span>(<span class="pl-k">::</span><span class="pl-c1">MappedArray{Float64,1,Array{Int64,1},typeof(sqrt),getfield(Main, Symbol("##5#6"))}</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>MappedArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>MappedArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">173</span>
 [<span class="pl-c1">5</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p dir="auto">because <code>2.2^2 = 4.84</code> is not representable as an <code>Int</code>. In contrast,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = [1.0, 4.0, 9.0, 16.0]
4-element Array{Float64,1}:
  1.0
  4.0
  9.0
 16.0

julia&gt; c = mappedarray(sqrt, x-&gt;x*x, a)
4-element mappedarray(sqrt, x-&gt;x * x, ::Array{Float64,1}) with eltype Float64:
 1.0
 2.0
 3.0
 4.0

julia&gt; c[3] = 2.2
2.2

julia&gt; a
4-element Array{Float64,1}:
  1.0
  4.0
  4.840000000000001
 16.0"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">9.0</span>, <span class="pl-c1">16.0</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>
  <span class="pl-c1">4.0</span>
  <span class="pl-c1">9.0</span>
 <span class="pl-c1">16.0</span>

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">mappedarray</span>(sqrt, x<span class="pl-k">-&gt;</span>x<span class="pl-k">*</span>x, a)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">mappedarray</span>(sqrt, x<span class="pl-k">-&gt;</span>x <span class="pl-k">*</span> x, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2.2</span>
<span class="pl-c1">2.2</span>

julia<span class="pl-k">&gt;</span> a
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>
  <span class="pl-c1">4.0</span>
  <span class="pl-c1">4.840000000000001</span>
 <span class="pl-c1">16.0</span></pre></div>
<p dir="auto">works without trouble.</p>
<p dir="auto">So far our examples have all been one-dimensional, but this package
also supports arbitrary-dimensional arrays:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = randn(3,5,2)
3×5×2 Array{Float64,3}:
[:, :, 1] =
  1.47716    0.323915   0.448389  -0.56426   2.67922
 -0.255123  -0.752548  -0.41303    0.306604  1.5196
  0.154179   0.425001  -1.95575   -0.982299  0.145111

[:, :, 2] =
 -0.799232  -0.301813  -0.457817  -0.115742  -1.22948
 -0.486558  -1.27959   -1.59661    1.05867    2.06828
 -0.315976  -0.188828  -0.567672   0.405086   1.06983

julia&gt; b = mappedarray(abs, a)
3×5×2 mappedarray(abs, ::Array{Float64,3}) with eltype Float64:
[:, :, 1] =
 1.47716   0.323915  0.448389  0.56426   2.67922
 0.255123  0.752548  0.41303   0.306604  1.5196
 0.154179  0.425001  1.95575   0.982299  0.145111

[:, :, 2] =
 0.799232  0.301813  0.457817  0.115742  1.22948
 0.486558  1.27959   1.59661   1.05867   2.06828
 0.315976  0.188828  0.567672  0.405086  1.06983"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
  <span class="pl-c1">1.47716</span>    <span class="pl-c1">0.323915</span>   <span class="pl-c1">0.448389</span>  <span class="pl-k">-</span><span class="pl-c1">0.56426</span>   <span class="pl-c1">2.67922</span>
 <span class="pl-k">-</span><span class="pl-c1">0.255123</span>  <span class="pl-k">-</span><span class="pl-c1">0.752548</span>  <span class="pl-k">-</span><span class="pl-c1">0.41303</span>    <span class="pl-c1">0.306604</span>  <span class="pl-c1">1.5196</span>
  <span class="pl-c1">0.154179</span>   <span class="pl-c1">0.425001</span>  <span class="pl-k">-</span><span class="pl-c1">1.95575</span>   <span class="pl-k">-</span><span class="pl-c1">0.982299</span>  <span class="pl-c1">0.145111</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-k">-</span><span class="pl-c1">0.799232</span>  <span class="pl-k">-</span><span class="pl-c1">0.301813</span>  <span class="pl-k">-</span><span class="pl-c1">0.457817</span>  <span class="pl-k">-</span><span class="pl-c1">0.115742</span>  <span class="pl-k">-</span><span class="pl-c1">1.22948</span>
 <span class="pl-k">-</span><span class="pl-c1">0.486558</span>  <span class="pl-k">-</span><span class="pl-c1">1.27959</span>   <span class="pl-k">-</span><span class="pl-c1">1.59661</span>    <span class="pl-c1">1.05867</span>    <span class="pl-c1">2.06828</span>
 <span class="pl-k">-</span><span class="pl-c1">0.315976</span>  <span class="pl-k">-</span><span class="pl-c1">0.188828</span>  <span class="pl-k">-</span><span class="pl-c1">0.567672</span>   <span class="pl-c1">0.405086</span>   <span class="pl-c1">1.06983</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">mappedarray</span>(abs, a)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">mappedarray</span>(abs, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,3}</span>) with eltype Float64<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1.47716</span>   <span class="pl-c1">0.323915</span>  <span class="pl-c1">0.448389</span>  <span class="pl-c1">0.56426</span>   <span class="pl-c1">2.67922</span>
 <span class="pl-c1">0.255123</span>  <span class="pl-c1">0.752548</span>  <span class="pl-c1">0.41303</span>   <span class="pl-c1">0.306604</span>  <span class="pl-c1">1.5196</span>
 <span class="pl-c1">0.154179</span>  <span class="pl-c1">0.425001</span>  <span class="pl-c1">1.95575</span>   <span class="pl-c1">0.982299</span>  <span class="pl-c1">0.145111</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.799232</span>  <span class="pl-c1">0.301813</span>  <span class="pl-c1">0.457817</span>  <span class="pl-c1">0.115742</span>  <span class="pl-c1">1.22948</span>
 <span class="pl-c1">0.486558</span>  <span class="pl-c1">1.27959</span>   <span class="pl-c1">1.59661</span>   <span class="pl-c1">1.05867</span>   <span class="pl-c1">2.06828</span>
 <span class="pl-c1">0.315976</span>  <span class="pl-c1">0.188828</span>  <span class="pl-c1">0.567672</span>  <span class="pl-c1">0.405086</span>  <span class="pl-c1">1.06983</span></pre></div>
<h3 dir="auto"><a id="user-content-multiple-source-arrays" class="anchor" aria-hidden="true" href="#multiple-source-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiple source arrays</h3>
<p dir="auto">Just as <code>map(f, a, b)</code> can take multiple containers <code>a</code> and <code>b</code>, <code>mappedarray</code> can too:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = [0.1 0.2; 0.3 0.4]
2×2 Array{Float64,2}:
 0.1  0.2
 0.3  0.4

julia&gt; b = [1 2; 3 4]
2×2 Array{Int64,2}:
 1  2
 3  4

julia&gt; c = mappedarray(+, a, b)
2×2 mappedarray(+, ::Array{Float64,2}, ::Array{Int64,2}) with eltype Float64:
 1.1  2.2
 3.3  4.4"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> [<span class="pl-c1">0.1</span> <span class="pl-c1">0.2</span>; <span class="pl-c1">0.3</span> <span class="pl-c1">0.4</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.1</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.3</span>  <span class="pl-c1">0.4</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">mappedarray</span>(<span class="pl-k">+</span>, a, b)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">mappedarray</span>(<span class="pl-k">+</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">1.1</span>  <span class="pl-c1">2.2</span>
 <span class="pl-c1">3.3</span>  <span class="pl-c1">4.4</span></pre></div>
<p dir="auto">In some cases you can also supply an inverse function, which should return a tuple (one value for each input array):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ColorTypes

julia&gt; redchan = [0.1 0.2; 0.3 0.4];

julia&gt; greenchan = [0.8 0.75; 0.7 0.65];

julia&gt; bluechan = [0 1; 0 1];

julia&gt; m = mappedarray(RGB{Float64}, c-&gt;(red(c), green(c), blue(c)), redchan, greenchan, bluechan)
2×2 mappedarray(RGB{Float64}, getfield(Main, Symbol(&quot;##11#12&quot;))(), ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Int64,2}) with eltype RGB{Float64}:
 RGB{Float64}(0.1,0.8,0.0)  RGB{Float64}(0.2,0.75,1.0)
 RGB{Float64}(0.3,0.7,0.0)  RGB{Float64}(0.4,0.65,1.0)

 julia&gt; m[1,2] = RGB(0,0,0)
RGB{N0f8}(0.0,0.0,0.0)

julia&gt; redchan
2×2 Array{Float64,2}:
 0.1  0.0
 0.3  0.4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ColorTypes

julia<span class="pl-k">&gt;</span> redchan <span class="pl-k">=</span> [<span class="pl-c1">0.1</span> <span class="pl-c1">0.2</span>; <span class="pl-c1">0.3</span> <span class="pl-c1">0.4</span>];

julia<span class="pl-k">&gt;</span> greenchan <span class="pl-k">=</span> [<span class="pl-c1">0.8</span> <span class="pl-c1">0.75</span>; <span class="pl-c1">0.7</span> <span class="pl-c1">0.65</span>];

julia<span class="pl-k">&gt;</span> bluechan <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">mappedarray</span>(RGB{Float64}, c<span class="pl-k">-&gt;</span>(<span class="pl-c1">red</span>(c), <span class="pl-c1">green</span>(c), <span class="pl-c1">blue</span>(c)), redchan, greenchan, bluechan)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">mappedarray</span>(RGB{Float64}, <span class="pl-c1">getfield</span>(Main, <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>##11#12<span class="pl-pds">"</span></span>))(), <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>) with eltype RGB{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.8</span>,<span class="pl-c1">0.0</span>)  <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.2</span>,<span class="pl-c1">0.75</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.3</span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">0.0</span>)  <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.4</span>,<span class="pl-c1">0.65</span>,<span class="pl-c1">1.0</span>)

 julia<span class="pl-k">&gt;</span> m[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">RGB</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)
<span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> redchan
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.1</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.3</span>  <span class="pl-c1">0.4</span></pre></div>
<p dir="auto">Note that in some cases the function or inverse-function is too
complicated to print nicely in the summary line.</p>
<h3 dir="auto"><a id="user-content-of_eltype" class="anchor" aria-hidden="true" href="#of_eltype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>of_eltype</h3>
<p dir="auto">This package defines a convenience method, <code>of_eltype</code>, which
"lazily-converts" arrays to a specific <code>eltype</code>.  (It works simply by
defining <code>convert</code> functions for both <code>f</code> and <code>finv</code>.)</p>
<p dir="auto">Using <code>of_eltype</code> you can "convert" a series of arrays to a chosen element type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; arrays = (rand(2,2), rand(Int,2,2), [0x01 0x03; 0x02 0x04])
([0.984799 0.871579; 0.106783 0.0619827], [-6481735407318330164 5092084295348224098; -6063116549749853620 -8721118838052351006], UInt8[0x01 0x03; 0x02 0x04])

julia&gt; arraysT = map(A-&gt;of_eltype(Float64, A), arrays)
([0.984799 0.871579; 0.106783 0.0619827], [-6.48174e18 5.09208e18; -6.06312e18 -8.72112e18], [1.0 3.0; 2.0 4.0])"><pre>julia<span class="pl-k">&gt;</span> arrays <span class="pl-k">=</span> (<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), <span class="pl-c1">rand</span>(Int,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), [<span class="pl-c1">0x01</span> <span class="pl-c1">0x03</span>; <span class="pl-c1">0x02</span> <span class="pl-c1">0x04</span>])
([<span class="pl-c1">0.984799</span> <span class="pl-c1">0.871579</span>; <span class="pl-c1">0.106783</span> <span class="pl-c1">0.0619827</span>], [<span class="pl-k">-</span><span class="pl-c1">6481735407318330164</span> <span class="pl-c1">5092084295348224098</span>; <span class="pl-k">-</span><span class="pl-c1">6063116549749853620</span> <span class="pl-k">-</span><span class="pl-c1">8721118838052351006</span>], UInt8[<span class="pl-c1">0x01</span> <span class="pl-c1">0x03</span>; <span class="pl-c1">0x02</span> <span class="pl-c1">0x04</span>])

julia<span class="pl-k">&gt;</span> arraysT <span class="pl-k">=</span> <span class="pl-c1">map</span>(A<span class="pl-k">-&gt;</span><span class="pl-c1">of_eltype</span>(Float64, A), arrays)
([<span class="pl-c1">0.984799</span> <span class="pl-c1">0.871579</span>; <span class="pl-c1">0.106783</span> <span class="pl-c1">0.0619827</span>], [<span class="pl-k">-</span><span class="pl-c1">6.48174e18</span> <span class="pl-c1">5.09208e18</span>; <span class="pl-k">-</span><span class="pl-c1">6.06312e18</span> <span class="pl-k">-</span><span class="pl-c1">8.72112e18</span>], [<span class="pl-c1">1.0</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">4.0</span>])</pre></div>
<p dir="auto">This construct is inferrable (type-stable), so it can be a useful
means to "coerce" arrays to a common type. This can sometimes solve
type-stability problems without requiring that one copy the data.</p>
</article></div>