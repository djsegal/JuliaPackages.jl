<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-convextests" class="anchor" aria-hidden="true" href="#convextests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ConvexTests</h1>
<p><a href="https://github.com/ericphanson/ConvexTests.jl/actions"><img src="https://github.com/ericphanson/ConvexTests.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/ConvexTests.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Uses the Convex.jl <a href="https://www.juliaopt.org/Convex.jl/stable/problem_depot/" rel="nofollow">Problem Depot</a>
to test various optimization solvers. See the
<a href="https://ericphanson.github.io/ConvexTests.jl/dev" rel="nofollow">docs</a> for the test results.
Uses <a href="https://github.com/ericphanson/TableTestSets.jl">https://github.com/ericphanson/TableTestSets.jl</a> for printing the test
results to HTML tables (and GitHub actions to run everything). This is meant to
help solver developers test against a variety of problems and see where things
can be improved.</p>
<p>Note that some of the problems are fairly strange (e.g. only one feasible
point), which can be difficult for solvers to handle.</p>
<p>Pull requests to tweak the parameters of the solvers or the exclusions, or add
more solvers, are welcome. The exclusion methodology I am using is as follows:</p>
<ul>
<li>exclude problems which belong to a class that the solver choses not to solve
(e.g. Tulip is a linear programming solver, so SDPs, SOCPs, exponential cone
problems, and mixed-integer problems are all excluded)</li>
<li>or problems which take an excessive amount of time to solve</li>
</ul>
<p>Regarding the parameters, I am trying to use a single choice of parameters for
the entire set of problems (as opposed to choosing different parameters for
different problems).</p>
<p>I added all open-source (and non-MATLAB-based) solvers from
<a href="http://www.juliaopt.org/JuMP.jl/v0.21.1/installation/#Getting-Solvers-1" rel="nofollow">http://www.juliaopt.org/JuMP.jl/v0.21.1/installation/#Getting-Solvers-1</a>, besides
the LP and MILP-only ones. I've also added Mosek by running it locally.</p>
</article></div>