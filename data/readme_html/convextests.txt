<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-convextests" class="anchor" aria-hidden="true" href="#convextests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConvexTests</h1>
<p><a href="https://github.com/ericphanson/ConvexTests.jl/actions"><img src="https://github.com/ericphanson/ConvexTests.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/ConvexTests.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Uses the Convex.jl <a href="https://www.juliaopt.org/Convex.jl/stable/problem_depot/" rel="nofollow">Problem Depot</a>
to test various optimization solvers. See the
<a href="https://ericphanson.github.io/ConvexTests.jl/dev" rel="nofollow">docs</a> for the test results.
Uses <a href="https://github.com/ericphanson/TableTestSets.jl">https://github.com/ericphanson/TableTestSets.jl</a> for printing the test
results to HTML tables (and GitHub actions to run everything). This is meant to
help solver developers test against a variety of problems and see where things
can be improved.</p>
<p>Note that some of the problems are fairly strange (e.g. only one feasible
point), which can be difficult for solvers to handle.</p>
<p>Pull requests to tweak the parameters of the solvers or the exclusions, or add
more solvers, are welcome. The exclusion methodology I am using is as follows:</p>
<ul>
<li>exclude problems which belong to a class that the solver choses not to solve
(e.g. Tulip is a linear programming solver, so SDPs, SOCPs, exponential cone
problems, and mixed-integer problems are all excluded)</li>
<li>or problems which take an excessive amount of time to solve</li>
</ul>
<p>Regarding the parameters, I am trying to use a single choice of parameters for
the entire set of problems (as opposed to choosing different parameters for
different problems).</p>
<p>I added all open-source (and non-MATLAB-based) solvers from
<a href="http://www.juliaopt.org/JuMP.jl/v0.21.1/installation/#Getting-Solvers-1" rel="nofollow">http://www.juliaopt.org/JuMP.jl/v0.21.1/installation/#Getting-Solvers-1</a>, besides
the LP and MILP-only ones. I've also added Mosek by running it locally.</p>
</article></div>