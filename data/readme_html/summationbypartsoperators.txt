<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-summationbypartsoperatorsjl-a-julia-library-of-provably-stable-semidiscretization-techniques-with-mimetic-properties" class="anchor" aria-hidden="true" href="#summationbypartsoperatorsjl-a-julia-library-of-provably-stable-semidiscretization-techniques-with-mimetic-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SummationByPartsOperators.jl: A Julia library of provably stable semidiscretization techniques with mimetic properties</h1>
<p><a href="https://ranocha.github.io/SummationByPartsOperators.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://ranocha.github.io/SummationByPartsOperators.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/ranocha/SummationByPartsOperators.jl/actions"><img src="https://github.com/ranocha/SummationByPartsOperators.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/ranocha/SummationByPartsOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9f432fa8582e9b676594dc86ef870a1963dabc21c1fd41d85f285617095d5899/687474703a2f2f636f6465636f762e696f2f6769746875622f72616e6f6368612f53756d6d6174696f6e427950617274734f70657261746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov" data-canonical-src="http://codecov.io/github/ranocha/SummationByPartsOperators.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ranocha/SummationByPartsOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f44cc75e4fe52d026eb114e4a6c393956e118c94d6d596a6a52b0af9124a92fc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f72616e6f6368612f53756d6d6174696f6e427950617274734f70657261746f72732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/ranocha/SummationByPartsOperators.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.4773575" rel="nofollow"><img src="https://camo.githubusercontent.com/d48e340e2008534add7549e30d3e44bb44c5e4850c9600cde6f07a2beeaa7662/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e343737333537352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.4773575.svg" style="max-width:100%;"></a>
<a href="https://github.com/ranocha/SummationByPartsOperators.jl"><img src="https://camo.githubusercontent.com/d461c26ac838ec91b2c49c11985b73f9cf69fc95b4636dcff1169f478b968d5e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f72616e6f6368612f53756d6d6174696f6e427950617274734f70657261746f72732e6a6c2f76302e342e352e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/ranocha/SummationByPartsOperators.jl/v0.4.5.svg?style=social&amp;logo=github" style="max-width:100%;"></a></p>

<p><a href="https://github.com/ranocha/SummationByPartsOperators.jl">SummationByPartsOperators.jl</a>
is a Julia library of summation-by-parts (SBP) operators, which are discrete
derivative operators developed to get provably stable semidiscretizations,
paying special attention to boundary conditions. Discretizations included in this
framework are finite difference, Fourier pseudospectral, continuous Galerkin,
and discontinuous Galerkin methods. The main aim of
<a href="https://github.com/ranocha/SummationByPartsOperators.jl">SummationByPartsOperators.jl</a>
is to be useful for researchers and students to learn the basic concepts by
providing a unified framework of all of these seemingly different discretizations.
At the same time, the implementation is optimized to achieve good performance
without sacrificing flexibility.</p>
<h2><a id="user-content-basic-operators" class="anchor" aria-hidden="true" href="#basic-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Operators</h2>
<p>The following derivative operators are implemented as "lazy"/matrix-free
operators, i.e. no large (size of the computational grid) matrix is formed
explicitly.</p>
<h3><a id="user-content-periodic-domains" class="anchor" aria-hidden="true" href="#periodic-domains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Periodic Domains</h3>
<ul>
<li>
<p><code>periodic_derivative_operator(derivative_order, accuracy_order, xmin, xmax, N)</code></p>
<p>These are classical central finite difference operators using <code>N</code> nodes on the
interval <code>[xmin, xmax]</code>.</p>
</li>
<li>
<p><code>periodic_derivative_operator(Holoborodko2008(), derivative_order, accuracy_order, xmin, xmax, N)</code></p>
<p>These are central finite difference operators using <code>N</code> nodes on the
interval <code>[xmin, xmax]</code> and the coefficients of <a href="http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/" rel="nofollow">Pavel Holoborodko</a>.</p>
</li>
<li>
<p><code>fourier_derivative_operator(xmin, xmax, N)</code></p>
<p>Fourier derivative operators are implemented using the fast Fourier transform of <a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl</a>.</p>
</li>
</ul>
<h3><a id="user-content-finitenonperiodic-domains" class="anchor" aria-hidden="true" href="#finitenonperiodic-domains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Finite/Nonperiodic Domains</h3>
<ul>
<li>
<p><code>derivative_operator(source_of_coefficients, derivative_order, accuracy_order, xmin, xmax, N)</code></p>
<p>Finite difference SBP operators for first and second derivatives can be obained by using <code>MattssonNordstr√∂m2004()</code> as <code>source_of_coefficients</code>.
Other sources of coefficients are implemented as well. To obtain a full list for all operators, use <code>subtypes(SourceOfCoefficients)</code>.</p>
</li>
<li>
<p><code>legendre_derivative_operator(xmin, xmax, N)</code></p>
<p>Use Lobatto Legendre polynomial collocation schemes on <code>N</code>, i.e.
polynomials of degree <code>N-1</code>, implemented via <a href="https://github.com/ranocha/PolynomialBases.jl">PolynomialBases.jl</a>.</p>
</li>
</ul>
<h3><a id="user-content-dissipation-operators" class="anchor" aria-hidden="true" href="#dissipation-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dissipation Operators</h3>
<p>Additionally, some artificial dissipation/viscosity operators are implemented.
The most basic usage is <code>Di = dissipation_operator(D)</code>,
where <code>D</code> can be a (periodic, Fourier, Legendre, SBP FD) derivative
operator. Use <code>?dissipation_operator</code> for more details.</p>
<h3><a id="user-content-conversion-to-other-forms" class="anchor" aria-hidden="true" href="#conversion-to-other-forms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversion to Other Forms</h3>
<p>Sometimes, it can be convenient to obtain an explicit (sparse, banded) matrix form of the operators. Therefore, some conversion functions are supplied, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SummationByPartsOperators

julia&gt; D = derivative_operator(MattssonNordstr√∂m2004(), 1, 2, 0., 1., 5)
SBP 1st derivative operator of order 2 {T=Float64, Parallel=Val{:serial}}
on a grid in [0.0, 1.0] using 5 nodes
and coefficients given in
  Mattsson, Nordstr√∂m (2004)
  Summation by parts operators for finite difference approximations of second
    derivaties.
  Journal of Computational Physics 199, pp.503-540.


julia&gt; Matrix(D)
5√ó5 Array{Float64,2}:
 -4.0   4.0   0.0   0.0  0.0
 -2.0   0.0   2.0   0.0  0.0
  0.0  -2.0   0.0   2.0  0.0
  0.0   0.0  -2.0   0.0  2.0
  0.0   0.0   0.0  -4.0  4.0

julia&gt; using SparseArrays

julia&gt; sparse(D)
5√ó5 SparseMatrixCSC{Float64,Int64} with 10 stored entries:
  [1, 1]  =  -4.0
  [2, 1]  =  -2.0
  [1, 2]  =  4.0
  [3, 2]  =  -2.0
  [2, 3]  =  2.0
  [4, 3]  =  -2.0
  [3, 4]  =  2.0
  [5, 4]  =  -4.0
  [4, 5]  =  2.0
  [5, 5]  =  4.0

julia&gt; using BandedMatrices

julia&gt; BandedMatrix(D)
5√ó5 BandedMatrix{Float64,Array{Float64,2},Base.OneTo{Int64}}:
 -4.0   4.0    ‚ãÖ     ‚ãÖ    ‚ãÖ
 -2.0   0.0   2.0    ‚ãÖ    ‚ãÖ
   ‚ãÖ   -2.0   0.0   2.0   ‚ãÖ
   ‚ãÖ     ‚ãÖ   -2.0   0.0  2.0
   ‚ãÖ     ‚ãÖ     ‚ãÖ   -4.0  4.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SummationByPartsOperators

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">derivative_operator</span>(<span class="pl-c1">MattssonNordstr√∂m2004</span>(), <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">5</span>)
SBP <span class="pl-c1">1</span>st derivative operator of order <span class="pl-c1">2</span> {T<span class="pl-k">=</span>Float64, Parallel<span class="pl-k">=</span>Val{<span class="pl-c1">:serial</span>}}
on a grid <span class="pl-k">in</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>] <span class="pl-k">using</span> <span class="pl-c1">5</span> nodes
and coefficients given <span class="pl-k">in</span>
  Mattsson, Nordstr√∂m (<span class="pl-c1">2004</span>)
  Summation by parts operators <span class="pl-k">for</span> finite difference approximations of second
    derivaties.
  Journal of Computational Physics <span class="pl-c1">199</span>, pp.<span class="pl-c1">503</span><span class="pl-k">-</span><span class="pl-c1">540.</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(D)
<span class="pl-c1">5</span><span class="pl-k">√ó</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">4.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">2.0</span>  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">2.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sparse</span>(D)
<span class="pl-c1">5</span><span class="pl-k">√ó</span><span class="pl-c1">5</span> SparseMatrixCSC{Float64,Int64} with <span class="pl-c1">10</span> stored entries<span class="pl-k">:</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]  <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>]  <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-k">=</span>  <span class="pl-c1">4.0</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">2</span>]  <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>]  <span class="pl-k">=</span>  <span class="pl-c1">2.0</span>
  [<span class="pl-c1">4</span>, <span class="pl-c1">3</span>]  <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]  <span class="pl-k">=</span>  <span class="pl-c1">2.0</span>
  [<span class="pl-c1">5</span>, <span class="pl-c1">4</span>]  <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>
  [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>]  <span class="pl-k">=</span>  <span class="pl-c1">2.0</span>
  [<span class="pl-c1">5</span>, <span class="pl-c1">5</span>]  <span class="pl-k">=</span>  <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BandedMatrices

julia<span class="pl-k">&gt;</span> <span class="pl-c1">BandedMatrix</span>(D)
<span class="pl-c1">5</span><span class="pl-k">√ó</span><span class="pl-c1">5</span> BandedMatrix{Float64,Array{Float64,<span class="pl-c1">2</span>},Base<span class="pl-k">.</span>OneTo{Int64}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">4.0</span>    <span class="pl-k">‚ãÖ</span>     <span class="pl-k">‚ãÖ</span>    <span class="pl-k">‚ãÖ</span>
 <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">2.0</span>    <span class="pl-k">‚ãÖ</span>    <span class="pl-k">‚ãÖ</span>
   <span class="pl-k">‚ãÖ</span>   <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">2.0</span>   <span class="pl-k">‚ãÖ</span>
   <span class="pl-k">‚ãÖ</span>     <span class="pl-k">‚ãÖ</span>   <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">2.0</span>
   <span class="pl-k">‚ãÖ</span>     <span class="pl-k">‚ãÖ</span>     <span class="pl-k">‚ãÖ</span>   <span class="pl-k">-</span><span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span></pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Examples can be found in the directory <a href="https://github.com/ranocha/SummationByPartsOperators.jl/tree/master/notebooks"><code>notebooks</code></a>.
In particular, examples of complete discretisations of
<a href="https://github.com/ranocha/SummationByPartsOperators.jl/blob/master/notebooks/Advection_equation.ipynb">the linear advection equation</a>,
<a href="https://github.com/ranocha/SummationByPartsOperators.jl/blob/master/notebooks/Heat_equation.ipynb">the heat equation</a>,
and the <a href="https://github.com/ranocha/SummationByPartsOperators.jl/blob/master/notebooks/Wave_equation.ipynb">wave equation</a> are supplied.
Further examples are supplied as <a href="https://github.com/ranocha/SummationByPartsOperators.jl/tree/master/test">tests</a>.</p>
</article></div>