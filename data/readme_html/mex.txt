<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mexjl" class="anchor" aria-hidden="true" href="#mexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mex.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/byuflowlab/Mex.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/byuflowlab/Mex.jl/workflows/Run%20tests/badge.svg" alt="" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Embedding <a href="http://julialang.org/" rel="nofollow">Julia</a> in the <a href="http://www.mathworks.com/products/matlab/" rel="nofollow">MATLAB</a> process</em></p>
<p dir="auto"><strong>Mex.jl</strong> embeds Julia into the MATLAB process using MATLAB's <a href="https://www.mathworks.com/help/matlab/cpp-mex-file-applications.html" rel="nofollow">C++ Mex interface</a>.  This allows Julia functions to be called from MATLAB.  This also allows (embedded) Julia to call MATLAB functions.</p>
<h2 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h2>
<table>
<thead>
<tr>
<th><g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png">‚ùó</g-emoji>  This package cannot be used with MATLAB 2022a/2022b because these versions are currently incompatible with <a href="https://github.com/JuliaInterop/MATLAB.jl">MATLAB.jl</a>.</th>
</tr>
</thead>
</table>
<p dir="auto"><code>Mex.jl</code> requires MATLAB and Julia along with a C++ compiler configured to work with MATLAB's <code>mex</code> command, the last is required for building the <code>mexjulia</code> MEX function. You can check that a compiler is properly configured by executing:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; mex -setup C++"><pre class="notranslate"><code>&gt;&gt; mex -setup C++
</code></pre></div>
<p dir="auto">from the MATLAB command prompt.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">First ensure that the <a href="https://github.com/JuliaInterop/MATLAB.jl">MATLAB.jl</a> Julia package can be properly installed.</p>
<p dir="auto">Then enter the package manager by typing <code>]</code> and then run the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add Mex"><pre>pkg<span class="pl-k">&gt;</span> add Mex</pre></div>
<p dir="auto">The build process will:</p>
<ol dir="auto">
<li>use <code>julia</code> to determine build options,</li>
<li>build the <code>mexjulia</code> MEX function from source,</li>
<li>add the <code>mexjulia</code> directory to your MATLAB path.</li>
</ol>
<p dir="auto">By default, <code>Mex.jl</code> uses the MATLAB installation with the greatest version number. To specify that a specific MATLAB installation should be used, set the environment variable <code>MATLAB_ROOT</code>.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">Use <code>jl.eval</code> to parse and evaluate MATLAB strings as Julia expressions:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jl.eval('2+2')

ans =

  int64

   4"><pre class="notranslate"><code>&gt;&gt; jl.eval('2+2')

ans =

  int64

   4
</code></pre></div>
<p dir="auto">You can evaluate multiple expressions in a single call:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; [s, c] = jl.eval('sin(pi/3), cos(pi/3)')

s =

    0.8660


c =

    0.5000"><pre class="notranslate"><code>&gt;&gt; [s, c] = jl.eval('sin(pi/3), cos(pi/3)')

s =

    0.8660


c =

    0.5000
</code></pre></div>
<p dir="auto">Note that Julia's <code>STDOUT</code> and <code>STDERR</code> are not redirected to the MATLAB console.  But if MATLAB is launched from the terminal they will appear there.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jl.eval('println(&quot;Hello, world!&quot;)');
&gt;&gt; jl.eval('@warn(&quot;Oh, no!&quot;)');"><pre class="notranslate"><code>&gt;&gt; jl.eval('println("Hello, world!")');
&gt;&gt; jl.eval('@warn("Oh, no!")');
</code></pre></div>
<p dir="auto">One can avoid the parentheses and string quotes using <code>jleval</code> (a simple wrapper around
<code>jl.eval</code>) and MATLAB's command syntax:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jleval 1 + 1

ans =

  int64

   2

&gt;&gt; jleval println(&quot;Hello, world!&quot;)
Hello, world!"><pre class="notranslate"><code>&gt;&gt; jleval 1 + 1

ans =

  int64

   2

&gt;&gt; jleval println("Hello, world!")
Hello, world!
</code></pre></div>
<p dir="auto">Use <code>jl.call</code> to call a Julia function specified by its name as a string:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jl.call('factorial', int64(10))

ans =

     3628800"><pre class="notranslate"><code>&gt;&gt; jl.call('factorial', int64(10))

ans =

     3628800
</code></pre></div>
<p dir="auto">Load new Julia code by calling <code>jl.include</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jl.include('my_own_julia_code.jl')"><pre class="notranslate"><code>&gt;&gt; jl.include('my_own_julia_code.jl')
</code></pre></div>
<p dir="auto">Exercise more control over how data is marshaled between MATLAB and Julia by defining
a Julia function with a "MEX-like" signature and invoking it with <code>jl.mex</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; jleval import MATLAB
&gt;&gt; jleval double_it(args::Vector{MATLAB.MxArray}) = [2*MATLAB.jvalue(arg) for arg in args]
&gt;&gt; a = rand(5,5)

a =

    0.6443    0.9390    0.2077    0.1948    0.3111
    0.3786    0.8759    0.3012    0.2259    0.9234
    0.8116    0.5502    0.4709    0.1707    0.4302
    0.5328    0.6225    0.2305    0.2277    0.1848
    0.3507    0.5870    0.8443    0.4357    0.9049

&gt;&gt; jl.mex('double_it', a)

ans =

    1.2886    1.8780    0.4155    0.3895    0.6222
    0.7572    1.7519    0.6025    0.4518    1.8468
    1.6232    1.1003    0.9418    0.3414    0.8604
    1.0657    1.2450    0.4610    0.4553    0.3696
    0.7015    1.1741    1.6886    0.8714    1.8098"><pre class="notranslate"><code>&gt;&gt; jleval import MATLAB
&gt;&gt; jleval double_it(args::Vector{MATLAB.MxArray}) = [2*MATLAB.jvalue(arg) for arg in args]
&gt;&gt; a = rand(5,5)

a =

    0.6443    0.9390    0.2077    0.1948    0.3111
    0.3786    0.8759    0.3012    0.2259    0.9234
    0.8116    0.5502    0.4709    0.1707    0.4302
    0.5328    0.6225    0.2305    0.2277    0.1848
    0.3507    0.5870    0.8443    0.4357    0.9049

&gt;&gt; jl.mex('double_it', a)

ans =

    1.2886    1.8780    0.4155    0.3895    0.6222
    0.7572    1.7519    0.6025    0.4518    1.8468
    1.6232    1.1003    0.9418    0.3414    0.8604
    1.0657    1.2450    0.4610    0.4553    0.3696
    0.7015    1.1741    1.6886    0.8714    1.8098
</code></pre></div>
<p dir="auto">The first argument to <code>jl.mex</code> is the name of the function to be invoked. All remaining arguments are treated as function arguments.</p>
<p dir="auto"><code>jl.mex</code> expects the functions on which it is invoked to accept a single argument of type <code>Vector{MATLAB.MxArray}</code> and to return an iterable collection of values on which <code>MATLAB.mxarray</code> may be successfully invoked (<em>e.g.</em>, a value of type <code>Vector{MATLAB.MxArray}</code>).</p>
<h2 dir="auto"><a id="user-content-additional-examples" class="anchor" aria-hidden="true" href="#additional-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional Examples</h2>
<p dir="auto">Additional usage examples may be found in the <code>examples</code> folder.</p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">To learn how to reduce the overhead associated with this package, see <code>performance.m</code> in the example folder.</p>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">The starting point for the development of this package was the <a href="https://github.com/juliamatlab/mexjulia"><code>mexjulia</code></a> project, which was designed to embed early versions of Julia into the MATLAB process.</p>
</article></div>