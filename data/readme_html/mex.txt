<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="doc/logo.png"><img src="doc/logo.png" alt="mexjulia.icon" style="max-width:100%;"></a></p>
<h1><a id="user-content-mexjulia-embedding-julia-in-the-matlab-process" class="anchor" aria-hidden="true" href="#mexjulia-embedding-julia-in-the-matlab-process"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>mexjulia</code>: embedding <a href="http://julialang.org/" rel="nofollow">Julia</a> in the <a href="http://www.mathworks.com/products/matlab/" rel="nofollow">MATLAB</a> process.</h1>
<p>Note: this project is effectively in hibernation as its author no longer has access to matlab.</p>
<h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisites</h2>
<p><code>mexjulia</code> requires MATLAB (tested with R2016b) and Julia (&gt;=v.0.6-dev) along with a C++ compiler configured to work with MATLAB's <code>mex</code> command, the last is required for building the <code>mexjulia</code> MEX function. You can check that a compiler is properly configured by executing:</p>
<pre><code>&gt;&gt; mex -setup C++
</code></pre>
<p>from the MATLAB command prompt.</p>
<h2><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configuration</h2>
<p>Start MATLAB and navigate to the <code>mexjulia</code> directory. Once there, run:</p>
<pre><code>&gt;&gt; jl.config
</code></pre>
<p>You will be prompted to select a <code>julia</code> executable. The build process will:</p>
<ol>
<li>use <code>julia</code> to determine build options,</li>
<li>build the <code>mexjulia</code> MEX function from source,</li>
<li>add the <code>mexjulia</code> directory to your MATLAB path.</li>
</ol>
<p>Call <code>jl.config</code> any time you want to build against a different version of Julia. You can
pass in the path to the desired Julia executable to build against if you don't want
to be prompted to select one.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>Use <code>jl.eval</code> to parse and evaluate MATLAB strings as Julia expressions:</p>
<pre><code>&gt;&gt; jl.eval('2+2')

ans =

  int64

   4
</code></pre>
<p>You can evaluate multiple expressions in a single call:</p>
<pre><code>&gt;&gt; [s, c] = jl.eval('sin(pi/3)', 'cos(pi/3)')

s =

    0.8660


c =

    0.5000
</code></pre>
<p>Julia's <code>STDOUT</code> and <code>STDERR</code> are redirected to the MATLAB console:</p>
<pre><code>&gt;&gt; jl.eval('println("Hello, world!")');
Hello, world!
&gt;&gt; jl.eval('warn("Oh, no!")');
WARNING: Oh, no!
</code></pre>
<p>One can avoid the parentheses and string quotes using <code>jleval</code> (a simple wrapper around
<code>jl.eval</code>) and MATLAB's command syntax:</p>
<pre><code>&gt;&gt; jleval 1 + 1

ans =

  int64

   2

&gt;&gt; jleval println("Hello, world!")
Hello, world!
</code></pre>
<p>Use <code>jl.call</code> to call a Julia function specified by its name as a string:</p>
<pre><code>&gt;&gt; jl.call('factorial', 10)

ans =

     3628800
</code></pre>
<p><code>jl.call</code> marshals MATLAB data to/from Julia making certain default choices for doing so.</p>
<p>Load new Julia code by calling <code>jl.include</code>:</p>
<pre><code>&gt;&gt; jl.include('my_own_julia_code.jl')
</code></pre>
<p>Exercise more control over how data is marshaled between MATLAB and Julia by defining
a Julia function with a "MEX-like" signature and invoking it with <code>jl.mex</code>:</p>
<pre><code>&gt;&gt; jleval double_it(args::Vector{MxArray}) = [2*jvalue(arg) for arg in args]
&gt;&gt; a = rand(5,5)

a =

    0.6443    0.9390    0.2077    0.1948    0.3111
    0.3786    0.8759    0.3012    0.2259    0.9234
    0.8116    0.5502    0.4709    0.1707    0.4302
    0.5328    0.6225    0.2305    0.2277    0.1848
    0.3507    0.5870    0.8443    0.4357    0.9049

&gt;&gt; jl.mex(1, 'double_it', a)

ans =

    1.2886    1.8780    0.4155    0.3895    0.6222
    0.7572    1.7519    0.6025    0.4518    1.8468
    1.6232    1.1003    0.9418    0.3414    0.8604
    1.0657    1.2450    0.4610    0.4553    0.3696
    0.7015    1.1741    1.6886    0.8714    1.8098
</code></pre>
<p>The first argument to <code>jl.mex</code> is the number of return values to expect. The second is the name of the function to be invoked. All remaining arguments are treated as function arguments. <code>jl.mex</code> expects the functions on which it is invoked to accept a single argument of type <code>Vector{MxArray}</code> and to return an iterable collection of values on which <code>mxarray</code> may be successfully invoked (<em>e.g.</em>, a value of type <code>Vector{MxArray}</code>).</p>
<p>See <a href="examples/lmdif_test.m"><code>lmdif_test.m</code></a>, <a href="examples/lmdif.m"><code>lm.m</code></a>, and <a href="examples/lmdif.jl"><code>lmdif.jl</code></a> for a more complex example that exposes <a href="https://github.com/JuliaOpt/Optim.jl"><code>Optim.jl</code></a>'s Levenberg-Marquardt solver to MATLAB. It presents an example of a MATLAB function handle being passed to Julia and used as a
callback. (The default marshaling wraps matlab function handles in an anonymous function.)</p>
<h2><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Issues</h2>
<ul>
<li>On Windows, if a julia is on the path it must be the one against which <code>mexjulia</code> is built.</li>
</ul>
</article></div>