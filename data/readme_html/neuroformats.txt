<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-neuroformatsjl" class="anchor" aria-hidden="true" href="#neuroformatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NeuroFormats.jl</h1>
<p dir="auto">Handling of structural neuroimaging file formats for <a href="https://julialang.org" rel="nofollow">Julia</a>.</p>
<h2 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h2>
<p dir="auto">The NeuroFormats package provides an API for reading structural neuroimaging data files in Julia. The focus is on surface-based data, as produced by <a href="https://freesurfer.net" rel="nofollow">FreeSurfer</a>. The aim of the package is to allow scientists to access their neuroimaging data in Julia so they can use the language's power to implement custom data analysis pipelines.</p>
<p dir="auto">Note that some functions for reading neuroimaging data files are available from <a href="https://github.com/JuliaNeuroscience">JuliaNeuroscience</a>, e.g., <a href="https://github.com/JuliaNeuroscience/NIfTI.jl">NIFTI volume</a> and <a href="https://github.com/JuliaNeuroscience/GIFTI.jl">GIFTI mesh</a> support. This package does not duplicate these functionalities.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Read and write FreeSurfer per-vertex data in curv format (like <code>subject/surf/lh.thickness</code>): functions <code>read_curv()</code> and <code>write_curv()</code></li>
<li>Read brain meshes in FreeSurfer binary mesh format (like <code>subject/surf/lh.white</code>): <code>read_surf()</code></li>
<li>Read FreeSurfer label files (like <code>subject/label/lh.cortex.label</code>): <code>read_label()</code></li>
<li>Read FreeSurfer brain surface parcellations (like <code>subject/label/lh.aparc.annot</code>): <code>read_annot()</code></li>
<li>Read and write FreeSurfer MGH and MGZ brain volumes (4D voxel images, like <code>subject/mri/brain.mgz</code>): <code>read_mgh()</code> and <code>write_mgh()</code></li>
<li>Read DTI track data from <a href="https://www.mrtrix.org/" rel="nofollow">MRtrix3</a> TCK files: <code>read_tck()</code></li>
<li>Read DTI track data from <a href="http://trackvis.org/dtk/" rel="nofollow">DiffusionToolkit</a> TRK files: <code>read_trk()</code></li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can find <a href="https://juliahub.com/ui/Packages/NeuroFormats/zxLcF/" rel="nofollow">NeuroFormats on JuliaHub</a>, so all you need to do is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;NeuroFormats&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NeuroFormats<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">from a Julia session.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">The documentation is included with the package and can be <a href="https://juliahub.com/docs/NeuroFormats/zxLcF/0.2.1/" rel="nofollow">browsed online at JuliaHub</a>. It is not repeated on this website.</p>
<p dir="auto">Use <code>?</code> to access the package documentation from within Julia, e.g., get help on a function named <code>read_curv</code> from within Julia by typing <code>?read_curv</code>. I also encourage you to have a look at the <a href="./test/">unit tests of this package</a>, they are essentially a collection of usage examples.</p>
<h2 dir="auto"><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Examples</h2>
<h3 dir="auto"><a id="user-content-example-1-cortical-thickness-on-a-brain-mesh" class="anchor" aria-hidden="true" href="#example-1-cortical-thickness-on-a-brain-mesh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Cortical thickness on a brain mesh</h3>
<p dir="auto">The following example shows how to load a FreeSurfer brain mesh with per-vertex data and visualize it in Julia using NeuroFormats and GLMakie.</p>
<p dir="auto">Note: If you do not have <code>GLMakie</code> installed, install it with <code>Pkg.add()</code> as described for <code>NeuroFormats</code> above. In that case, the example below will take a while to execute the first time you run it, as the packages will need to be precompiled first. Afterwards, visualization will be almost instant.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NeuroFormats
using GLMakie

# Uses NeuroFormats demo data, feel free to use your own FreeSurfer data.
fs_subject_dir = joinpath(tdd(), &quot;subjects_dir/subject1/&quot;)

surf = read_surf(joinpath(fs_subject_dir, &quot;surf/lh.white&quot;)) # The brain mesh.
curv = read_curv(joinpath(fs_subject_dir, &quot;surf/lh.thickness&quot;)) # cortical thickness.

vertices = surf.mesh.vertices
faces = surf.mesh.faces .+ 1

scene = mesh(vertices, faces, color = curv)"><pre><span class="pl-k">using</span> NeuroFormats
<span class="pl-k">using</span> GLMakie

<span class="pl-c"><span class="pl-c">#</span> Uses NeuroFormats demo data, feel free to use your own FreeSurfer data.</span>
fs_subject_dir <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">tdd</span>(), <span class="pl-s"><span class="pl-pds">"</span>subjects_dir/subject1/<span class="pl-pds">"</span></span>)

surf <span class="pl-k">=</span> <span class="pl-c1">read_surf</span>(<span class="pl-c1">joinpath</span>(fs_subject_dir, <span class="pl-s"><span class="pl-pds">"</span>surf/lh.white<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> The brain mesh.</span>
curv <span class="pl-k">=</span> <span class="pl-c1">read_curv</span>(<span class="pl-c1">joinpath</span>(fs_subject_dir, <span class="pl-s"><span class="pl-pds">"</span>surf/lh.thickness<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> cortical thickness.</span>

vertices <span class="pl-k">=</span> surf<span class="pl-k">.</span>mesh<span class="pl-k">.</span>vertices
faces <span class="pl-k">=</span> surf<span class="pl-k">.</span>mesh<span class="pl-k">.</span>faces <span class="pl-k">.+</span> <span class="pl-c1">1</span>

scene <span class="pl-k">=</span> <span class="pl-c1">mesh</span>(vertices, faces, color <span class="pl-k">=</span> curv)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/julia_brainplot_NeuroFormats.png?raw=true"><img src="./examples/julia_brainplot_NeuroFormats.png?raw=true" alt="Vis" title="A 3D brain surface visualization created in Julia." style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-2-an-mri-volume" class="anchor" aria-hidden="true" href="#example-2-an-mri-volume"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: An MRI volume</h3>
<p dir="auto">This example loads a 3D MRI scan of a brain and visualizes it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NeuroFormats
using GLMakie

mgh = read_mgh(joinpath(tdd(), &quot;subjects_dir/subject1/mri/brain.mgz&quot;))
volume = dropdims(mgh.data, dims = 4) # drop time dimension, we only have one frame here.

axis = range(0, stop = 1, length = size(volume, 1))
scene3d = contour(axis, axis, axis, volume, alpha = 0.1, levels = 6)"><pre><span class="pl-k">using</span> NeuroFormats
<span class="pl-k">using</span> GLMakie

mgh <span class="pl-k">=</span> <span class="pl-c1">read_mgh</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">tdd</span>(), <span class="pl-s"><span class="pl-pds">"</span>subjects_dir/subject1/mri/brain.mgz<span class="pl-pds">"</span></span>))
volume <span class="pl-k">=</span> <span class="pl-c1">dropdims</span>(mgh<span class="pl-k">.</span>data, dims <span class="pl-k">=</span> <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> drop time dimension, we only have one frame here.</span>

axis <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop <span class="pl-k">=</span> <span class="pl-c1">1</span>, length <span class="pl-k">=</span> <span class="pl-c1">size</span>(volume, <span class="pl-c1">1</span>))
scene3d <span class="pl-k">=</span> <span class="pl-c1">contour</span>(axis, axis, axis, volume, alpha <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, levels <span class="pl-k">=</span> <span class="pl-c1">6</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/julia_brainplot_voxels_NeuroFormats.png?raw=true"><img src="./examples/julia_brainplot_voxels_NeuroFormats.png?raw=true" alt="VisVox" title="A 3D brain volume visualization created in Julia." style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-3-an-atlas-based-brain-surface-parcellation" class="anchor" aria-hidden="true" href="#example-3-an-atlas-based-brain-surface-parcellation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: An atlas-based brain surface parcellation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NeuroFormats
using GLMakie

fs_subject_dir = joinpath(tdd(), &quot;subjects_dir/subject1/&quot;)

surf = read_surf(joinpath(fs_subject_dir, &quot;surf/lh.white&quot;))
annot = read_annot(joinpath(fs_subject_dir, &quot;label/lh.aparc.annot&quot;)) # from Desikan-Killiani atlas

vertices = surf.mesh.vertices
faces = surf.mesh.faces .+ 1

scene = mesh(vertices, faces, color = vertex_colors(annot))"><pre><span class="pl-k">using</span> NeuroFormats
<span class="pl-k">using</span> GLMakie

fs_subject_dir <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">tdd</span>(), <span class="pl-s"><span class="pl-pds">"</span>subjects_dir/subject1/<span class="pl-pds">"</span></span>)

surf <span class="pl-k">=</span> <span class="pl-c1">read_surf</span>(<span class="pl-c1">joinpath</span>(fs_subject_dir, <span class="pl-s"><span class="pl-pds">"</span>surf/lh.white<span class="pl-pds">"</span></span>))
annot <span class="pl-k">=</span> <span class="pl-c1">read_annot</span>(<span class="pl-c1">joinpath</span>(fs_subject_dir, <span class="pl-s"><span class="pl-pds">"</span>label/lh.aparc.annot<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> from Desikan-Killiani atlas</span>

vertices <span class="pl-k">=</span> surf<span class="pl-k">.</span>mesh<span class="pl-k">.</span>vertices
faces <span class="pl-k">=</span> surf<span class="pl-k">.</span>mesh<span class="pl-k">.</span>faces <span class="pl-k">.+</span> <span class="pl-c1">1</span>

scene <span class="pl-k">=</span> <span class="pl-c1">mesh</span>(vertices, faces, color <span class="pl-k">=</span> <span class="pl-c1">vertex_colors</span>(annot))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/julia_brainplot_parcellation_NeuroFormats.png?raw=true"><img src="./examples/julia_brainplot_parcellation_NeuroFormats.png?raw=true" alt="VisAnnot" title="A 3D brain surface visualization created in Julia." style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<h3 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h3>
<p dir="auto">NeuroFormats is free software published under the GPL v3, see the <a href="./LICENSE">LICENSE file</a> for the full license.</p>
<h3 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h3>
<p dir="auto">Please consider citing NeuroFormats if you use it for your research.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="To cite package ‘NeuroFormats’ in publications use:

  Tim Schäfer (2021). NeuroFormats: Handling of structural neuroimaging file formats for Julia. Julia package version 0.2.2. https://juliahub.com/ui/Packages/NeuroFormats/zxLcF/

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {NeuroFormats: Handling of structural neuroimaging file formats for Julia},
    author = {Tim Schäfer},
    year = {2021},
    note = {Julia package version 0.2.2},
    url = {https://juliahub.com/ui/Packages/NeuroFormats/zxLcF/},
  }"><pre class="notranslate"><code>To cite package ‘NeuroFormats’ in publications use:

  Tim Schäfer (2021). NeuroFormats: Handling of structural neuroimaging file formats for Julia. Julia package version 0.2.2. https://juliahub.com/ui/Packages/NeuroFormats/zxLcF/

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {NeuroFormats: Handling of structural neuroimaging file formats for Julia},
    author = {Tim Schäfer},
    year = {2021},
    note = {Julia package version 0.2.2},
    url = {https://juliahub.com/ui/Packages/NeuroFormats/zxLcF/},
  }
</code></pre></div>
<p dir="auto">Be sure to adapt the package version to the version you actually used.</p>
<h3 dir="auto"><a id="user-content-unit-tests-and-continuous-integration" class="anchor" aria-hidden="true" href="#unit-tests-and-continuous-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unit tests and continuous integration</h3>
<p dir="auto">Continuous integration results:</p>
<p dir="auto"><a href="https://travis-ci.org/dfsp-spirit/NeuroFormats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b51af3320d5cd658efc052871025094ade83a00c3a8b247589e7648bab097880/68747470733a2f2f7472617669732d63692e6f72672f646673702d7370697269742f4e6575726f466f726d6174732e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.org/dfsp-spirit/NeuroFormats.jl.svg?branch=main" style="max-width: 100%;"></a> Travis CI under Linux</p>
<h3 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h3>
<p dir="auto">If you found a bug, have any question, suggestion or comment on freesurferformats, please <a href="https://github.com/dfsp-spirit/NeuroFormats.jl/issues">open an issue</a>. I will definitely answer and try to help. You can also let me know if you need support for a new file format.</p>
<p dir="auto">Please see <a href="CONTRIBUTING.md">CONTRIBUTING.md</a> for instructions on how to contribute code.</p>
<p dir="auto">The NeuroFormats package was written by <a href="https://ts.rcmd.org" rel="nofollow">Tim Schäfer</a>. To contact me in person, please use the email address given on my website.</p>
</article></div>