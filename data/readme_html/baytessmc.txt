<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-baytessmc" class="anchor" aria-hidden="true" href="#baytessmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BaytesSMC</h1>

<p dir="auto"><a href="https://paschermayr.github.io/BaytesSMC.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation, Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/paschermayr/BaytesSMC.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/paschermayr/BaytesSMC.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/paschermayr/BaytesSMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45121c3faef784516a1f60bcdc09d64b5621a3e1abc6822fd24b932cdcbab04a/68747470733a2f2f636f6465636f762e696f2f67682f706173636865726d6179722f426179746573534d432e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/paschermayr/BaytesSMC.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">BaytesSMC.jl is a library to perform SMC proposal steps on <code>ModelWrapper</code> structs, see <a href="https://github.com/paschermayr/ModelWrappers.jl">ModelWrappers.jl</a>. Kernels that are defined in <a href="https://github.com/paschermayr/BaytesMCMC.jl">BaytesMCMC.jl</a> and <a href="https://github.com/paschermayr/BaytesFilters.jl">BaytesFilters.jl</a> can be
used inside this library.</p>
<p dir="auto">BaytesSMC.jl supports sequential parameter estimation frameworks such as IBIS and SMC2. This can be achieved via data tempering, which is explained in more detail in the upcoming Baytes.jl library. Moreover, a SMC variant for batch data is provided as well, where tempering of the objective function is used until the temperature reaches 1.0.</p>

<h2 dir="auto"><a id="user-content-first-steps" class="anchor" aria-hidden="true" href="#first-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>First steps</h2>
<p dir="auto">All standard Baytes.jl functions call can be used in BaytesSMC.jl. To start with, we have
to define parameter and an objective function first.
Let us use the model initially defined in the <a href="https://github.com/paschermayr/ModelWrappers.jl">ModelWrappers.jl</a> introduction:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ModelWrappers, BaytesSMC
using Distributions, Random, UnPack
_rng = Random.GLOBAL_RNG
#Create Model and data
myparameter = (μ = Param(Normal(), 0.0, ), σ = Param(Gamma(), 1.0, ))
mymodel = ModelWrapper(myparameter)
data = randn(1000)
#Create objective for both μ and σ and define a target function for it
myobjective = Objective(mymodel, data, (:μ, :σ))
function (objective::Objective{&lt;:ModelWrapper{BaseModel}})(θ::NamedTuple)
	@unpack data = objective
	lprior = Distributions.logpdf(Distributions.Normal(),θ.μ) + Distributions.logpdf(Distributions.Exponential(), θ.σ)
    llik = sum(Distributions.logpdf( Distributions.Normal(θ.μ, θ.σ), data[iter] ) for iter in eachindex(data))
	return lprior + llik
end"><pre><span class="pl-k">using</span> ModelWrappers, BaytesSMC
<span class="pl-k">using</span> Distributions, Random, UnPack
_rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG
<span class="pl-c"><span class="pl-c">#</span>Create Model and data</span>
myparameter <span class="pl-k">=</span> (μ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>, ), σ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Gamma</span>(), <span class="pl-c1">1.0</span>, ))
mymodel <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter)
data <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>)
<span class="pl-c"><span class="pl-c">#</span>Create objective for both μ and σ and define a target function for it</span>
myobjective <span class="pl-k">=</span> <span class="pl-c1">Objective</span>(mymodel, data, (<span class="pl-c1">:μ</span>, <span class="pl-c1">:σ</span>))
<span class="pl-k">function</span> (objective<span class="pl-k">::</span><span class="pl-c1">Objective{&lt;:ModelWrapper{BaseModel}}</span>)(θ<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>)
	<span class="pl-c1">@unpack</span> data <span class="pl-k">=</span> objective
	lprior <span class="pl-k">=</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(),θ<span class="pl-k">.</span>μ) <span class="pl-k">+</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Exponential</span>(), θ<span class="pl-k">.</span>σ)
    llik <span class="pl-k">=</span> <span class="pl-c1">sum</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>( Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(θ<span class="pl-k">.</span>μ, θ<span class="pl-k">.</span>σ), data[iter] ) <span class="pl-k">for</span> iter <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(data))
	<span class="pl-k">return</span> lprior <span class="pl-k">+</span> llik
<span class="pl-k">end</span></pre></div>
<p dir="auto">A particle in the SMC framework corresponds to a full model. We will assign assign a NUTS sampler for each particle, and propose new parameter via SMC in the standard Bayes.jl framework:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BaytesMCMC
smc = SMC(_rng, MCMC(NUTS,(:μ, :σ,)), myobjective)
propose!(_rng, smc, mymodel, data)"><pre><span class="pl-k">using</span> BaytesMCMC
smc <span class="pl-k">=</span> <span class="pl-c1">SMC</span>(_rng, <span class="pl-c1">MCMC</span>(NUTS,(<span class="pl-c1">:μ</span>, <span class="pl-c1">:σ</span>,)), myobjective)
<span class="pl-c1">propose!</span>(_rng, smc, mymodel, data)</pre></div>
<h2 dir="auto"><a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Customization</h2>
<p dir="auto">Construction is highly flexible, and can be tweaked via keyword assignments in the following helper structs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="kerneldefault  = SMCDefault(Ntuning = 50, jittermin = 1, jittermax = 10)
samplingdefault = SampleDefault(chains = 10)
SMC(_rng, MCMC(NUTS,(:μ, :σ,)), myobjective, kerneldefault, samplingdefault)"><pre>kerneldefault  <span class="pl-k">=</span> <span class="pl-c1">SMCDefault</span>(Ntuning <span class="pl-k">=</span> <span class="pl-c1">50</span>, jittermin <span class="pl-k">=</span> <span class="pl-c1">1</span>, jittermax <span class="pl-k">=</span> <span class="pl-c1">10</span>)
samplingdefault <span class="pl-k">=</span> <span class="pl-c1">SampleDefault</span>(chains <span class="pl-k">=</span> <span class="pl-c1">10</span>)
<span class="pl-c1">SMC</span>(_rng, <span class="pl-c1">MCMC</span>(NUTS,(<span class="pl-c1">:μ</span>, <span class="pl-c1">:σ</span>,)), myobjective, kerneldefault, samplingdefault)</pre></div>
<p dir="auto"><code>kerneldefault</code> consists of tuning parameter that are specific for SMC,
<code>samplingdefault</code> consists of tuning parameter that are observed over the whole sampling process. The latter is explained in more detail in Baytes.jl.</p>
<h2 dir="auto"><a id="user-content-going-forward" class="anchor" aria-hidden="true" href="#going-forward"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Going Forward</h2>
<p dir="auto">This package is still highly experimental - suggestions and comments are always welcome!</p>

</article></div>