<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="docs/RankAggregation.png"><img src="docs/RankAggregation.png" height="200" style="max-width:100%;"></a><br>
  <a href="https://travis-ci.org/JuliaEarth/RankAggregation.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/2de65c6e8e950d09fa9ce49a6c290f7e87305d7e/68747470733a2f2f7472617669732d63692e6f72672f4a756c696145617274682f52616e6b4167677265676174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/JuliaEarth/RankAggregation.jl.svg?branch=master" style="max-width:100%;">
  </a>
  <a href="https://codecov.io/gh/JuliaEarth/RankAggregation.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/8a2b2654107b09978e2653e8a38b67405297f3b3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696145617274682f52616e6b4167677265676174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" data-canonical-src="https://codecov.io/gh/JuliaEarth/RankAggregation.jl/branch/master/graph/badge.svg" style="max-width:100%;">
  </a>
  <a href="LICENSE">
    <img src="https://camo.githubusercontent.com/4a586bb04a6e62fd66a9cfb56339a74809ec4d32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4953432d626c75652e737667" data-canonical-src="https://img.shields.io/badge/license-ISC-blue.svg" style="max-width:100%;">
  </a>
</p>
<p>Given a set of objects (e.g. rows of a table) with scores
given by different scoring methods (e.g. columns), how to
rank the objects? This problem is known in the literature
as the rank aggregation problem.</p>
<p>The problem is trivial when there is only one score for
each object (one column), but ranking objects on the basis
of multiple (conflicting) scores is challenging. This
package provides algorithms to aggregate multiple scores
stored in a tabular format
(see <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a>)
into a final rank vector.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Get the latest stable release with Julia's package manager:</p>
<div class="highlight highlight-source-julia"><pre>] add RankAggregation</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Given a table with scores <code>score1</code> and <code>score2</code> for objects <code>a</code>, <code>b</code>, and <code>c</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RankAggregation

julia<span class="pl-k">&gt;</span> objects <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(object<span class="pl-k">=</span>[<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>], score1<span class="pl-k">=</span>[<span class="pl-c1">0.9</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.5</span>], score2<span class="pl-k">=</span>[<span class="pl-c1">0.8</span>, <span class="pl-c1">0.9</span>, <span class="pl-c1">0.4</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
│ Row │ object │ score1  │ score2  │
│     │ Symbol │ Float64 │ Float64 │
├─────┼────────┼─────────┼─────────┤
│ <span class="pl-c1">1</span>   │ a      │ <span class="pl-c1">0.9</span>     │ <span class="pl-c1">0.8</span>     │
│ <span class="pl-c1">2</span>   │ b      │ <span class="pl-c1">0.7</span>     │ <span class="pl-c1">0.9</span>     │
│ <span class="pl-c1">3</span>   │ c      │ <span class="pl-c1">0.5</span>     │ <span class="pl-c1">0.4</span>     │</pre></div>
<p>rank the objects using:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(objects, <span class="pl-c1">:score1</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(objects, <span class="pl-c1">:score2</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(objects, (<span class="pl-c1">:score1</span>,<span class="pl-c1">:score2</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>Optionally, specify the aggregation method:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(objects, (<span class="pl-c1">:score1</span>,<span class="pl-c1">:score2</span>), <span class="pl-c1">TauModel</span>())
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>and the reverse option:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(objects, (<span class="pl-c1">:score1</span>,<span class="pl-c1">:score2</span>), rev<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span></pre></div>
<h2><a id="user-content-aggregation-methods" class="anchor" aria-hidden="true" href="#aggregation-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Aggregation Methods</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>References</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TauModel</code></td>
<td>Journel 2002. Combining Knowledge From Diverse Sources: An Alternative to Traditional Data Independence Hypotheses.</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Contributions are very welcome, as are feature requests and suggestions.</p>
<p>Please <a href="https://github.com/JuliaEarth/RankAggregation.jl/issues">open an issue</a> if you encounter
any problems.</p>
</article></div>