<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mpskitmodelsjl" class="anchor" aria-hidden="true" href="#mpskitmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MPSKitModels.jl</h1>
<p dir="auto"><a href="https://maartenvd.github.io/MPSKitModels.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/maartenvd/MPSKitModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aebd7947844d1c36e3bdb2af724db041a40709dcdf0ab2776c02ff524b1ef99b/68747470733a2f2f636f6465636f762e696f2f67682f6d61617274656e76642f4d50534b69744d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/maartenvd/MPSKitModels.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="https://github.com/maartenvd/MPSKitModels.jl/workflows/CI/badge.svg"><img src="https://github.com/maartenvd/MPSKitModels.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;MPSKitModels&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MPSKitModels<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">MPSKitModels.jl provides operators, tools and utilities for MPSKit.jl.
The main goal is to facilitate the definition and readability of hamiltonians on 1-dimensional systems, as well as quasi-1-dimensional systems defined on a cylinder or infinite strips.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The main building blocks of these Hamiltonians are local <code>N</code>-body operators, which should be provided in the form of an <code>AbstractTensorMap{N,N}</code> (see TensorKit.jl).
Several often-used operators are defined and exported within MPSKitModels.jl:</p>
<ul dir="auto">
<li>spin operators (<code>sigma_x</code>, <code>sigma_y</code>, <code>sigma_z</code>, <code>sigma_plus</code>, <code>sigma_min</code>)</li>
<li>spin exchange couplings (<code>sigma_xx</code>, <code>sigma_yy</code>, <code>sigma_zz</code>, <code>sigma_exchange</code>, <code>sigma_plusmin</code>, <code>sigma_minplus</code>)</li>
<li>fermionic creation and annihilation operators (<code>cc</code>, <code>ccdag</code>, <code>cdagc</code>, <code>cdagcdag</code>, <code>number</code>)</li>
<li>...</li>
</ul>
<p dir="auto">These operators can then be combined to define Hamiltonians by way of the <code>@mpoham</code> macro.
This transforms <code>{}</code> expressions to denote the site-indices upon which the operators act, and generates site-indices for various geometries.
Some examples to showcase this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MPSKitModels
h = 0.5
H_ising = @mpoham sum(sigma_xx(){i, i + 1} + h * sigma_z(){i} for i in -Inf:Inf)

J = [1.0 -1.0]  # staggered couplings over unit cell of length 2
H_heisenberg = @mpoham sum(J[i] * sigma_exchange(){i, i + 1} for i in -Inf:2:Inf)

H_heisenberg_cylinder =
    @mpoham sum(J1 * sigma_exchange(){i, j} for (i, j) in nearest_neighbours(InfiniteCylinder(3)))

J1 = 0.8
J2 = 0.2

H_J1J2 = @mpoham sum(J1 * sigma_exchange(){i, j} for (i, j) in nearest_neighbours(InfiniteCylinder(4))) +
    sum(J2 * sigma_exchange(){i,j} for (i, j) in next_nearest_neighbours(InfiniteCylinder(4)))"><pre><span class="pl-k">using</span> MPSKitModels
h <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
H_ising <span class="pl-k">=</span> <span class="pl-c1">@mpoham</span> <span class="pl-c1">sum</span>(<span class="pl-c1">sigma_xx</span>(){i, i <span class="pl-k">+</span> <span class="pl-c1">1</span>} <span class="pl-k">+</span> h <span class="pl-k">*</span> <span class="pl-c1">sigma_z</span>(){i} <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span><span class="pl-k">:</span><span class="pl-c1">Inf</span>)

J <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>]  <span class="pl-c"><span class="pl-c">#</span> staggered couplings over unit cell of length 2</span>
H_heisenberg <span class="pl-k">=</span> <span class="pl-c1">@mpoham</span> <span class="pl-c1">sum</span>(J[i] <span class="pl-k">*</span> <span class="pl-c1">sigma_exchange</span>(){i, i <span class="pl-k">+</span> <span class="pl-c1">1</span>} <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">Inf</span>)

H_heisenberg_cylinder <span class="pl-k">=</span>
    <span class="pl-c1">@mpoham</span> <span class="pl-c1">sum</span>(J1 <span class="pl-k">*</span> <span class="pl-c1">sigma_exchange</span>(){i, j} <span class="pl-k">for</span> (i, j) <span class="pl-k">in</span> <span class="pl-c1">nearest_neighbours</span>(<span class="pl-c1">InfiniteCylinder</span>(<span class="pl-c1">3</span>)))

J1 <span class="pl-k">=</span> <span class="pl-c1">0.8</span>
J2 <span class="pl-k">=</span> <span class="pl-c1">0.2</span>

H_J1J2 <span class="pl-k">=</span> <span class="pl-c1">@mpoham</span> <span class="pl-c1">sum</span>(J1 <span class="pl-k">*</span> <span class="pl-c1">sigma_exchange</span>(){i, j} <span class="pl-k">for</span> (i, j) <span class="pl-k">in</span> <span class="pl-c1">nearest_neighbours</span>(<span class="pl-c1">InfiniteCylinder</span>(<span class="pl-c1">4</span>))) <span class="pl-k">+</span>
    <span class="pl-c1">sum</span>(J2 <span class="pl-k">*</span> <span class="pl-c1">sigma_exchange</span>(){i,j} <span class="pl-k">for</span> (i, j) <span class="pl-k">in</span> <span class="pl-c1">next_nearest_neighbours</span>(<span class="pl-c1">InfiniteCylinder</span>(<span class="pl-c1">4</span>)))</pre></div>
<p dir="auto">For convenience, several models have already been defined. The full list can be found, along with all information in the docs.</p>
</article></div>