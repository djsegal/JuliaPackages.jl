<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-debugjl-v01" class="anchor" aria-hidden="true" href="#debugjl-v01"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Debug.jl v0.1</h1>
<p>Prototype interactive debugger for <a href="http://julialang.org" rel="nofollow">the Julia language</a>.
Bug reports and feature suggestions are welcome at
<a href="https://github.com/toivoh/Debug.jl/issues">https://github.com/toivoh/Debug.jl/issues</a>.
The package also supports evaluation of expressions in local scope.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In julia, install the <code>Debug</code> package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Debug&quot;)
"><pre><code>Pkg.add("Debug")
</code></pre></div>
<h2><a id="user-content-interactive-usage" class="anchor" aria-hidden="true" href="#interactive-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interactive Usage</h2>
<p>First, import the <code>Debug</code> package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Debug
"><pre><code>using Debug
</code></pre></div>
<p>Use the <code>@debug</code> macro to mark code that you want to be able to step through.
Use the <code>@bp</code> macro to set a breakpoint
-- interactive debugging will commence at the first breakpoint encountered.
There is also a conditional version, e.g. <code>@bp x&gt;0</code> will break only when x&gt;0.
<code>@debug</code> can only be used in global (i.e. module) scope,
since it needs access to all
scopes that surround a piece of code to be analyzed.</p>
<p>The following single-character commands have special meaning:<br>
<code>h</code>: display help text<br>
<code>s</code>: step into<br>
<code>n</code>: step over any enclosed scope<br>
<code>o</code>: step out from the current scope<br>
<code>c</code>: continue to next breakpoint<br>
<code>l [n]</code>: list <code>n</code> source lines above and below current line, if source file information is available at this point (default <code>n = 3</code>)<br>
<code>p cmd</code>: print <code>cmd</code> evaluated in current scope<br>
<code>q</code>: quit debug session (calls <code>error("interrupted")</code>)<br>
Anything else is parsed and evaluated in the current scope.
To e.g. evaluate a variable named <code>n</code>, it can be entered with
a space prepended.</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<p>Put the following in a file called <code>example.jl</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Debug
@debug function test()
    parts = {}
    @bp
    for j=1:3
        for i=1:3
            push!(parts,&quot;($i,$j) &quot;)
        end
    end
    @bp
    println(parts...)
end

test()
"><pre><code>using Debug
@debug function test()
    parts = {}
    @bp
    for j=1:3
        for i=1:3
            push!(parts,"($i,$j) ")
        end
    end
    @bp
    println(parts...)
end

test()
</code></pre></div>
<p>Then, in the Julia terminal:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; include(&quot;example.jl&quot;)

at /home/toivo/.julia/Debug/test/example.jl:4

      3        parts = {}
 --&gt;  4        @bp
      5        for j=1:3

debug:4&gt; j
j not defined

debug:4&gt; parts
{}

debug:4&gt; s

at /home/toivo/.julia/Debug/test/example.jl:5

      4        @bp
 --&gt;  5        for j=1:3
      6            for i=1:3

debug:5&gt; s

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,&quot;($i,$j) &quot;)

debug:6&gt; s

at /home/toivo/.julia/Debug/test/example.jl:7

      6            for i=1:3
 --&gt;  7                push!(parts,&quot;($i,$j) &quot;)
      8            end

debug:7&gt; i
1

debug:7&gt; s

at /home/toivo/.julia/Debug/test/example.jl:7

      6            for i=1:3
 --&gt;  7                push!(parts,&quot;($i,$j) &quot;)
      8            end

debug:7&gt; i
2

debug:7&gt; parts
{&quot;(1,1) &quot;}

debug:7&gt; parts = {}
{}

debug:7&gt; o

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,&quot;($i,$j) &quot;)

debug:6&gt; j
2

debug:6&gt; n

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,&quot;($i,$j) &quot;)

debug:6&gt; j
3

debug:6&gt; push!(parts, &quot;foo &quot;)
{&quot;(2,1) &quot;,&quot;(3,1) &quot;,&quot;(1,2) &quot;,&quot;(2,2) &quot;,&quot;(3,2) &quot;,&quot;foo &quot;}

debug:6&gt; c

at /home/toivo/.julia/Debug/test/example.jl:10

      9        end
 --&gt;  10       @bp
      11       println(parts...)

debug:10&gt; parts 
{&quot;(2,1) &quot;,&quot;(3,1) &quot;,&quot;(1,2) &quot;,&quot;(2,2) &quot;,&quot;(3,2) &quot;,&quot;foo &quot;,&quot;(1,3) &quot;,&quot;(2,3) &quot;,&quot;(3,3) &quot;}

debug:10&gt; c
(2,1) (3,1) (1,2) (2,2) (3,2) foo (1,3) (2,3) (3,3) 

julia&gt; 
"><pre><code>julia&gt; include("example.jl")

at /home/toivo/.julia/Debug/test/example.jl:4

      3        parts = {}
 --&gt;  4        @bp
      5        for j=1:3

debug:4&gt; j
j not defined

debug:4&gt; parts
{}

debug:4&gt; s

at /home/toivo/.julia/Debug/test/example.jl:5

      4        @bp
 --&gt;  5        for j=1:3
      6            for i=1:3

debug:5&gt; s

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,"($i,$j) ")

debug:6&gt; s

at /home/toivo/.julia/Debug/test/example.jl:7

      6            for i=1:3
 --&gt;  7                push!(parts,"($i,$j) ")
      8            end

debug:7&gt; i
1

debug:7&gt; s

at /home/toivo/.julia/Debug/test/example.jl:7

      6            for i=1:3
 --&gt;  7                push!(parts,"($i,$j) ")
      8            end

debug:7&gt; i
2

debug:7&gt; parts
{"(1,1) "}

debug:7&gt; parts = {}
{}

debug:7&gt; o

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,"($i,$j) ")

debug:6&gt; j
2

debug:6&gt; n

at /home/toivo/.julia/Debug/test/example.jl:6

      5        for j=1:3
 --&gt;  6            for i=1:3
      7                push!(parts,"($i,$j) ")

debug:6&gt; j
3

debug:6&gt; push!(parts, "foo ")
{"(2,1) ","(3,1) ","(1,2) ","(2,2) ","(3,2) ","foo "}

debug:6&gt; c

at /home/toivo/.julia/Debug/test/example.jl:10

      9        end
 --&gt;  10       @bp
      11       println(parts...)

debug:10&gt; parts 
{"(2,1) ","(3,1) ","(1,2) ","(2,2) ","(3,2) ","foo ","(1,3) ","(2,3) ","(3,3) "}

debug:10&gt; c
(2,1) (3,1) (1,2) (2,2) (3,2) foo (1,3) (2,3) (3,3) 

julia&gt; 
</code></pre></div>
<h2><a id="user-content-considerations-for-parallel-code" class="anchor" aria-hidden="true" href="#considerations-for-parallel-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Considerations for parallel code</h2>
<p>The <code>Debug</code> package has not been written with support for parallel execution in
mind. The instrumentation code that is inserted by the <code>@debug</code> macro will
likely not work as intended for code that is sent to another process, or run in
another thread. It might also cause trouble for Julia's serialization code,
since the instrumentation code contains references to data structures with
cycles.</p>
<p>For these reasons, it is recommended that if there is code inside of a
<code>@debug</code> macro invocation that might be run in another thread or process to
additionally wrap that code with the <code>@notrap</code> macro, and not use <code>Debug</code>
features such as <code>@localscope</code> inside of it.
This will ensure that no instrumentation is
generated for the code in question and it will be passed through as is.
Consequently, stepping through code wrapped in <code>@notrap</code> is not possible.</p>
<h2><a id="user-content-experimental-features" class="anchor" aria-hidden="true" href="#experimental-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Experimental Features</h2>
<p>Interpolations in entered code will currently be evaluated in the context of
the <code>Debug.Session</code> module, before the expression itself is evaluated
in the context of the current scope.
Some of the debugger's internal state has been made
available through this mechanism, and can be manipulated to influence
debugging:<br>
<code>$n</code>:    The current node<br>
<code>$s</code>:    The current scope<br>
<code>$bp</code>:   <code>Set{Node}</code> of enabled breakpoints<br>
<code>$nobp</code>: <code>Set{Node}</code> of disabled <code>@bp</code> breakpoints<br>
<code>$pre</code>:  <code>Dict{Node}</code> of grafts<br>
Nodes refer to positions in the instrumented code,
represented by nodes in the decorated AST produced from the original code.</p>
<p>Breakpoints can be manipulated using e.g.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$(push!(bp, n))    # set breakpoint at the current node
$(delete!(bp, n))  # unset breakpoint at the current node
$(push!(nobp, n))  # ignore @bp breakpoint at the current node
"><pre><code>$(push!(bp, n))    # set breakpoint at the current node
$(delete!(bp, n))  # unset breakpoint at the current node
$(push!(nobp, n))  # ignore @bp breakpoint at the current node
</code></pre></div>
<p>The above examples can also be written as e.g. <code>$push!($bp, $n)</code>.<br>
Code snippets can also be grafted into instrumented code. E.g.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$(pre[n] = :(x = 0))
"><pre><code>$(pre[n] = :(x = 0))
</code></pre></div>
<p>will make the code <code>x = 0</code> execute right before each execution of the current
node.</p>
<p>Other nodes than the current node <code>$n</code> could be used
in the examples above.
Such nodes can be found by navigating from the current node,
but the there is not much support for this yet.</p>
<h2><a id="user-content-evaluation-of-code-in-local-scope" class="anchor" aria-hidden="true" href="#evaluation-of-code-in-local-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluation of code in local scope</h2>
<p>By design, the Julia <a href="http://docs.julialang.org/en/latest/stdlib/base/#Base.eval" rel="nofollow">eval</a>
function only allows to evaluate code in global (i.e. module) scope.
This allows for all kinds of optimizations, e.g. since the compiler can see all
uses of all local variables.</p>
<p>The <code>Debug</code> package needs to be able to evaluate code in local scopes when it
is entered at the debug prompt however; in fact this is the main functionality
that the package provides, and can also be used as a standalone feature.
To allow evaluation in a local scope, code is instrumented to create <code>Scope</code> objects, which contain getter and setter functions for each local variable
accesible in a given scope.</p>
<p>Code wrapped inside the <code>@debug</code> macro can retrieve the current scope object
using the <code>@localscope</code> macro. If minimal code instrumentation is desired,
parts or all of the code wrapped in the <code>@debug</code> macro can be wrapped in the
<code>@notrap</code> macro. The <code>@notrap</code> macro will disable stepping through the wrapped code, but will still allow the <code>@localscope</code> macro to be used.
<code>Scope</code> objects will then only be created when entering scopes where they will
be needed by some nested <code>@localscope</code> invocation.</p>
<p>Once a <code>Scope</code> object is available, local variables can be read and assigned
in it by indexing with the corresponding symbols, and listed using
<code>keys(scope)</code>. Expressions can also be evaluated in a scope using the
<code>debug_eval</code> function:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Debug
@debug @notrap function f(x)
    outer = @localscope
    local inner
    pos = &quot;outer&quot;
    let pos = &quot;inner&quot;
        y = x
        inner = @localscope
    end
    (outer, inner)
end

outer, inner = f(5)

@show keys(outer) keys(inner) # y is only present in inner

println()
@show outer[:x] inner[:x]     # x is the same variable in both scopes
@show outer[:pos] inner[:pos] # pos refers to different variables in inner and outer

println(&quot;\nSetting `inner[:x] = 3`:&quot;)
inner[:x] = 3             # assigns to the single variable x
@show outer[:x] inner[:x] # both values have been updated

println()
@show debug_eval(inner, :(x*x)) # evaluate an expression in the inner scope
"><pre><code>using Debug
@debug @notrap function f(x)
    outer = @localscope
    local inner
    pos = "outer"
    let pos = "inner"
        y = x
        inner = @localscope
    end
    (outer, inner)
end

outer, inner = f(5)

@show keys(outer) keys(inner) # y is only present in inner

println()
@show outer[:x] inner[:x]     # x is the same variable in both scopes
@show outer[:pos] inner[:pos] # pos refers to different variables in inner and outer

println("\nSetting `inner[:x] = 3`:")
inner[:x] = 3             # assigns to the single variable x
@show outer[:x] inner[:x] # both values have been updated

println()
@show debug_eval(inner, :(x*x)) # evaluate an expression in the inner scope
</code></pre></div>
<p>which produces the output</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="keys(outer) =&gt; Set{Symbol}({:outer,:pos,:inner,:x})
keys(inner) =&gt; Set{Symbol}({:outer,:pos,:inner,:x,:y})

outer[:x] =&gt; 5
inner[:x] =&gt; 5
outer[:pos] =&gt; &quot;outer&quot;
inner[:pos] =&gt; &quot;inner&quot;

Setting `inner[:x] = 3`:
outer[:x] =&gt; 3
inner[:x] =&gt; 3

debug_eval(inner,:(x * x)) =&gt; 9
"><pre><code>keys(outer) =&gt; Set{Symbol}({:outer,:pos,:inner,:x})
keys(inner) =&gt; Set{Symbol}({:outer,:pos,:inner,:x,:y})

outer[:x] =&gt; 5
inner[:x] =&gt; 5
outer[:pos] =&gt; "outer"
inner[:pos] =&gt; "inner"

Setting `inner[:x] = 3`:
outer[:x] =&gt; 3
inner[:x] =&gt; 3

debug_eval(inner,:(x * x)) =&gt; 9
</code></pre></div>
<p>As seen above, it is possible to evaluate code in a local scope and to change
the values of variables in it.
It is however not possible to define new variables in a local scope,
so the expression passed to <code>debug_eval</code> will be evaluated as if it
were inside a <code>let</code> block in the given scope.</p>
<h2><a id="user-content-custom-traps" class="anchor" aria-hidden="true" href="#custom-traps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Traps</h2>
<p>There is an <code>@instrument</code> macro that works similarly to the <code>@debug</code> macro,
but takes as first argument a trap function to be called at each
expression that lies directly in a block. The example</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="load(&quot;Debug.jl&quot;)
using Base, Debug

firstline = -1
function trap(node::Node, scope::Scope) 
    global firstline = (firstline == -1) ? node.loc.line : firstline
    line = node.loc.line - firstline + 1
    print(line, &quot;:&quot;)

    if (line == 2); debug_eval(scope, :(x += 1)) end

    if (line &gt;  1); print(&quot;\tx = &quot;, debug_eval(scope, :x)) end
    if (line == 3); print(&quot;\tk = &quot;, debug_eval(scope, :k)) end
    println()
end

@instrument trap function f(n)
    x = 0       # line 1
    for k=1:n   # line 2
        x += k  # line 3
    end         # line 4
    x = x*x     # line 5
    x           # line 6
end

f(3)
"><pre><code>load("Debug.jl")
using Base, Debug

firstline = -1
function trap(node::Node, scope::Scope) 
    global firstline = (firstline == -1) ? node.loc.line : firstline
    line = node.loc.line - firstline + 1
    print(line, ":")

    if (line == 2); debug_eval(scope, :(x += 1)) end

    if (line &gt;  1); print("\tx = ", debug_eval(scope, :x)) end
    if (line == 3); print("\tk = ", debug_eval(scope, :k)) end
    println()
end

@instrument trap function f(n)
    x = 0       # line 1
    for k=1:n   # line 2
        x += k  # line 3
    end         # line 4
    x = x*x     # line 5
    x           # line 6
end

f(3)
</code></pre></div>
<p>produces the output</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="1:
2:	x = 1
3:	x = 1	k = 1
3:	x = 2	k = 2
3:	x = 4	k = 3
5:	x = 7
7:	x = 49
"><pre><code>1:
2:	x = 1
3:	x = 1	k = 1
3:	x = 2	k = 2
3:	x = 4	k = 3
5:	x = 7
7:	x = 49
</code></pre></div>
<p>The <code>scope</code> argument passed to the <code>trap</code> function can be used with
<code>debug_eval(scope, ex)</code> to evaluate an expression <code>ex</code> as if it were in
that scope.
<code>@instrument</code> in turn relies on the function <code>Debug.Graft.instrument</code>,
which also allows to to specify at which nodes to add traps.</p>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it Works</h2>
<p>The foundations of the <code>Debug</code> package is code for
analyzing the scoping of symbols in a piece of code,
and to modify code to allow one piece of code to be evaluated as
if it were at some particular point in another piece of code.
The interactive debug facility is built on top of this.
The <code>@debug</code> macro triggers a number of steps:</p>
<ul>
<li>The code passed to <code>@debug</code> is <em>analyzed</em>,
and turned into a decorated AST built from nodes of type <code>Debug.AST.Node</code>.
The format is almost identical to Julia's native AST format,
but nodes also keep track of
parent, static scope, and location in the source code.</li>
<li>The code is then <em>instrumented</em> to insert trap calls at each stepping point,
entry/exit to scope blocks, etc.
A <code>Scope</code> object that contains getter and setter
functions for each visible local symbol is also created upon entry to
each block that lies within a new environment.</li>
<li>The code passed to <code>debug_eval</code> is analyzed in the same way as to <code>@debug</code>.
The code is then <em>grafted</em> into the supplied scope by
replacing each read/write to a variable
with a call to the corresponding getter/setter function,
if it is visible at that point in the grafted code.</li>
</ul>
<h2><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Issues</h2>
<p>I have tried to encode the scoping rules of Julia as accurately as possible,
but I'm bound to have missed something. Also,</p>
<ul>
<li>The scoping rules for <code>for</code> blocks etc. in global scope
are not quite accurate.</li>
<li>Code within macro expansions may become tagged with the wrong source file.</li>
</ul>
<p>Known issues can also be found at the
<a href="https://github.com/toivoh/Debug.jl/issues">issues page</a>.
Bug reports and feature requests are welcome.</p>
</article></div>