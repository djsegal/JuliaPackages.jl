<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unitjump" class="anchor" aria-hidden="true" href="#unitjump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnitJuMP</h1>
<p dir="auto"><a href="https://github.com/trulsf/UnitJuMP.jl/actions?query=workflow%3ACI"><img src="https://github.com/trulsf/UnitJuMP.jl/workflows/CI/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/trulsf/UnitJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c754e481145298c2e9e48ed26855e4e119a60258fe725db3929fbb415bc148c/68747470733a2f2f636f6465636f762e696f2f67682f7472756c73662f556e69744a754d502e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/trulsf/UnitJuMP.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is an experimental and proof-of-concept package that allows JuMP to be
combined with units using Unitful.</p>
<p dir="auto">Currently, the package only supports a limited set of modelling with linear and quadratic
constraints using the <code>@variable</code> and <code>@constraint</code> macros.</p>
<h2 dir="auto"><a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variables</h2>
<p dir="auto">Variables are defined with units using the <code>@variable</code> macro by adding the unit
as a separate argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@variable(m, speed, u&quot;m/s&quot;)
@variable(m, length, u&quot;cm&quot;)"><pre><span class="pl-c1">@variable</span>(m, speed, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>)
<span class="pl-c1">@variable</span>(m, length, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-constraints" class="anchor" aria-hidden="true" href="#constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constraints</h2>
<p dir="auto">Constraints are automatically created with units using the  <code>@constraint</code> macro
if any of the involved parameters or variables have units. It is possible to
specify the unit used for the constraint by adding it is an extra argument
(e.g., for consistent scaling):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="period = 1.4u&quot;s&quot;
max_length = 1200u&quot;ft&quot;
@constraint(m, period * speed + length  &lt;= max_length, u&quot;km&quot;)"><pre>period <span class="pl-k">=</span> <span class="pl-c1">1.4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>
max_length <span class="pl-k">=</span> <span class="pl-c1">1200</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ft<span class="pl-pds">"</span></span>
<span class="pl-c1">@constraint</span>(m, period <span class="pl-k">*</span> speed <span class="pl-k">+</span> length  <span class="pl-k">&lt;=</span> max_length, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">If no unit is provided, the unit of the first term is used. Note that it may
cause problems if using numerical parameters with units directly in the macro
expression. Instead, create a separate parameter to hold the value.</p>
<h2 dir="auto"><a id="user-content-expressions-and-objective" class="anchor" aria-hidden="true" href="#expressions-and-objective"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Expressions and objective</h2>
<p dir="auto">Both the @expression and @objective macros will handle variables with units, but
it is not possible to specify units as part of the macro arguments. If one wants
to use a different unit for the objective, the best approach is to create the
objective as a separate expression and then convert it to the required unit
before setting the objective:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="obj = Unitful.uconvert(u&quot;km/hr&quot;, @expression(m, x + y))
@objective(m, Max, obj)"><pre>obj <span class="pl-k">=</span> Unitful<span class="pl-k">.</span><span class="pl-c1">uconvert</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/hr<span class="pl-pds">"</span></span>, <span class="pl-c1">@expression</span>(m, x <span class="pl-k">+</span> y))
<span class="pl-c1">@objective</span>(m, Max, obj)</pre></div>
<p dir="auto">As an alternative the objective can also be built incrementally as a
<code>UnitExpression</code> of a given unit:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="obj = UnitExpression(AffExpr(), u&quot;km/hr&quot;)
obj += x + y
@objective(m, Max, obj)"><pre>obj <span class="pl-k">=</span> <span class="pl-c1">UnitExpression</span>(<span class="pl-c1">AffExpr</span>(), <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/hr<span class="pl-pds">"</span></span>)
obj <span class="pl-k">+=</span> x <span class="pl-k">+</span> y
<span class="pl-c1">@objective</span>(m, Max, obj)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnitJuMP, HiGHS
m = Model(HiGHS.Optimizer)
@variable(m, x &gt;= 0, u&quot;m/s&quot;)
@variable(m, y &gt;= 0, u&quot;ft/s&quot;)
max_speed = 60u&quot;km/hr&quot;
@constraint(m, x + y &lt;= max_speed, u&quot;km/hr&quot;)
@constraint(m, x &lt;= 0.5y)
obj = @objective(m, Max, x + y)
optimize!(m)
println(&quot;x = $(value(x))  y = $(value(y))&quot;)
println(&quot;objective value = $(value(obj))&quot;)

#output x = 5.555555555555556 m s^-1  y = 36.45377661125693 ft s^-1
#       objective value = 16.666666666666668 m s^-1"><pre><span class="pl-k">using</span> UnitJuMP, HiGHS
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(HiGHS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(m, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>)
<span class="pl-c1">@variable</span>(m, y <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ft/s<span class="pl-pds">"</span></span>)
max_speed <span class="pl-k">=</span> <span class="pl-c1">60</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/hr<span class="pl-pds">"</span></span>
<span class="pl-c1">@constraint</span>(m, x <span class="pl-k">+</span> y <span class="pl-k">&lt;=</span> max_speed, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/hr<span class="pl-pds">"</span></span>)
<span class="pl-c1">@constraint</span>(m, x <span class="pl-k">&lt;=</span> <span class="pl-c1">0.5</span>y)
obj <span class="pl-k">=</span> <span class="pl-c1">@objective</span>(m, Max, x <span class="pl-k">+</span> y)
<span class="pl-c1">optimize!</span>(m)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-v">$(<span class="pl-c1">value</span>(x))</span>  y = <span class="pl-v">$(<span class="pl-c1">value</span>(y))</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>objective value = <span class="pl-v">$(<span class="pl-c1">value</span>(obj))</span><span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>output x = 5.555555555555556 m s^-1  y = 36.45377661125693 ft s^-1</span>
<span class="pl-c"><span class="pl-c">#</span>       objective value = 16.666666666666668 m s^-1</span></pre></div>
</article></div>