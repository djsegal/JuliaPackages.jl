<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-femsparsejl" class="anchor" aria-hidden="true" href="#femsparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FEMSparse.jl</h1>
<p><a href="https://travis-ci.org/JuliaFEM/FEMSparse.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dffb3fe115bfa9e7df33d0b2e7e71fc8f761de42/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f46454d5370617273652e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaFEM/FEMSparse.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FEMSparse&amp;ver=0.7" rel="nofollow"><img src="https://camo.githubusercontent.com/caf0b83600b932ec000e4220b1b26005e46cc9d3/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46454d5370617273655f302e372e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/FEMSparse_0.7.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FEMSparse&amp;ver=1.0" rel="nofollow"><img src="https://camo.githubusercontent.com/57b0f88c753447bed38c913210ecf8a639facd46/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46454d5370617273655f312e302e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/FEMSparse_1.0.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaFEM/FEMSparse.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3e9506f3dccab2e455573cf75abb5a473b0b7f7f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f46454d5370617273652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/FEMSparse.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFEM/FEMSparse.jl/issues"><img src="https://camo.githubusercontent.com/86745b3c9b168ae51941bfd07973b01e2cf22adb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f46454d5370617273652e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/FEMSparse.jl.svg" style="max-width:100%;"></a></p>
<p>FEMSparse package contains sparse matrix operations spesifically designed for
finite element simulations. In particular, we aim to provide support for
sparse matrices which are fast to fill with dense local element matrices.
In literature, this is called to <em>finite element assembly procedure</em>, where
element local degrees of freedom are connected to the global degrees of freedom
of model. Typically this procedure looks something similar to below:</p>
<div class="highlight highlight-source-julia"><pre>K <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(N, N)
Ke <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>; <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]
dofs1 <span class="pl-k">=</span> [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
dofs2 <span class="pl-k">=</span> [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
K[dofs1, dofs2] <span class="pl-k">+=</span> Ke</pre></div>
<h2><a id="user-content-performance-test" class="anchor" aria-hidden="true" href="#performance-test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance test</h2>
<p>To demonstrate the performance of the package, Poisson problem in 1 dimension
is assembled (see <code>examples/poisson1d.jl</code>) using three different strategies:</p>
<ol>
<li>assemble to dense matrix, like shown above</li>
<li>assemble to sparse matrix of CSC format</li>
<li>assemble to sparse matrix of COO format</li>
</ol>
<h3><a id="user-content-assembling-to-dense-matrix" class="anchor" aria-hidden="true" href="#assembling-to-dense-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assembling to dense matrix</h3>
<div class="highlight highlight-source-shell"><pre>[ Info: Dense matrix:
 2.298 s (30004 allocations: 6.71 GiB)</pre></div>
<p>Dense matrix is not suitable for global (sparse) assembly due to it's massive
requirement of available memory.</p>
<h3><a id="user-content-assembling-to-the-sparse-matrix-format-csc" class="anchor" aria-hidden="true" href="#assembling-to-the-sparse-matrix-format-csc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assembling to the sparse matrix format CSC</h3>
<h4><a id="user-content-naive-attempt" class="anchor" aria-hidden="true" href="#naive-attempt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Naive attempt</h4>
<div class="highlight highlight-source-shell"><pre>[ Info: Sparse matrix (CSC format):
 15.536 s (568673 allocations: 26.97 GiB)</pre></div>
<p><code>SparseMatrixCSC</code> is not suitable for (naive) assembly because the change of
sparsity pattern is very expensive.</p>
<h4><a id="user-content-use-of-existing-sparsity-pattern" class="anchor" aria-hidden="true" href="#use-of-existing-sparsity-pattern"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Use of existing sparsity pattern</h4>
<p>However, if an existing "sparsity pattern" exist (a sparse matrix where the locations of all non zeros
have already been allocated) it is possible to efficiently assemble directly into it.</p>
<p>For example,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(Float64[<span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>;
                          <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
                          <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
                          <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>];)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill!</span>(K, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> K<span class="pl-k">.</span>colptr<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">5</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> K<span class="pl-k">.</span>rowval<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">8</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p>Assembling into this sparsity pattern is now done by</p>
<div class="highlight highlight-source-julia"><pre>dofs1 <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>]
dofs2 <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]
dofs3 <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>]
Ke1 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
Ke2 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
Ke3 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
assembler <span class="pl-k">=</span> FEMSparse<span class="pl-k">.</span><span class="pl-c1">start_assemble</span>(K)
<span class="pl-k">for</span> (dofs, Ke) <span class="pl-k">in</span> <span class="pl-c1">zip</span>([dofs1, dofs2, dofs3], [Ke1, Ke2, Ke3])
    FEMSparse<span class="pl-k">.</span><span class="pl-c1">assemble_local_matrix!</span>(assembler, dofs, Ke)
<span class="pl-k">end</span></pre></div>
<p>resulting in that the content of <code>K</code> (here shown as a dense matrix for clarity) contains:</p>
<pre><code>4×4 Array{Float64,2}:
 2.0  0.0  1.0  1.0
 0.0  1.0  0.0  1.0
 1.0  0.0  1.0  0.0
 1.0  1.0  0.0  2.0
</code></pre>
<h3><a id="user-content-assembling-to-the-sparse-matrix-format-coo" class="anchor" aria-hidden="true" href="#assembling-to-the-sparse-matrix-format-coo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assembling to the sparse matrix format COO</h3>
<div class="highlight highlight-source-shell"><pre>[ Info: Sparse matrix (COO format):
 5.854 ms (73 allocations: 9.89 MiB)</pre></div>
<p><code>SparseMatrixCOO</code> is suitable sparse format for assembling global matrices, yet
it still have some shortcomings. In practice for solving linear system, COO format
needs to be converted to CSC format and it costs. Thus it would be benefical to do
first-time assembly in COO format, and after that store the sparsity pattern and
move to use direct assembly to CSC format.</p>
</article></div>