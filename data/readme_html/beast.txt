<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-beast" class="anchor" aria-hidden="true" href="#beast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BEAST</h1>
<p dir="auto">Boundary Element Analysis and Simulation Toolkit</p>
<p dir="auto"><a href="https://github.com/krcools/BEAST.jl/actions"><img src="https://github.com/krcools/BEAST.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/krcools/BEAST.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b21f14e8ae044b95d25ad05984e00fc44e9d8d3e304a39c195ec0205bc0abc4d/687474703a2f2f636f6465636f762e696f2f6769746875622f6b72636f6f6c732f42454153542e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/krcools/BEAST.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://krcools.github.io/BEAST.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/87720391" rel="nofollow"><img src="https://camo.githubusercontent.com/86bf5fd8e4c23578f8b518e6614684c26e731979400c1dd8ce78eba71a0b4f32/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f38373732303339312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/87720391.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This package contains common basis functions and assembly routines for the implementation of
boundary element methods. Examples are included for the 2D and 3D Helmholtz equations and for
the 3D Maxwell equations.</p>
<p dir="auto">Support for the space-time Galerkin based solution of time domain integral equations is in
place for the 3D Helmholtz and Maxwell equations.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Installing <code>BEAST</code> is done by entering the package manager (enter <code>]</code> at the julia REPL) and issuing:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt;add BEAST"><pre class="notranslate"><code>pkg&gt;add BEAST
</code></pre></div>
<p dir="auto">To run the examples, the following steps are required in addition:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add CompScienceMeshes # For the creation of scatterer geometries
pkg&gt; add Plots             # For visualising the results
pkg&gt; add GR                # Other Plots compatible back-ends can be chosen"><pre class="notranslate"><code>pkg&gt; add CompScienceMeshes # For the creation of scatterer geometries
pkg&gt; add Plots             # For visualising the results
pkg&gt; add GR                # Other Plots compatible back-ends can be chosen
</code></pre></div>
<p dir="auto">Examples can be run by:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt;using BEAST
julia&gt;d = dirname(pathof(BEAST))
julia&gt;include(joinpath(d,&quot;../examples/efie.jl&quot;))"><pre class="notranslate"><code>julia&gt;using BEAST
julia&gt;d = dirname(pathof(BEAST))
julia&gt;include(joinpath(d,"../examples/efie.jl"))
</code></pre></div>
<h2 dir="auto"><a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hello World</h2>
<p dir="auto">To solve scattering of a time harmonic electromagnetic plane wave by a perfectly conducting
sphere:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CompScienceMeshes, BEAST

Γ = readmesh(joinpath(dirname(pathof(BEAST)),&quot;../examples/sphere2.in&quot;))
X = raviartthomas(Γ)

t = Maxwell3D.singlelayer(wavenumber=1.0)
E = Maxwell3D.planewave(direction=ẑ, polarization=x̂, wavenumber=1.0)
e = (n × E) × n

@hilbertspace j
@hilbertspace k
efie = @discretise t[k,j]==e[k]  j∈X k∈X
u = gmres(efie)"><pre><span class="pl-k">using</span> CompScienceMeshes, BEAST

Γ <span class="pl-k">=</span> <span class="pl-c1">readmesh</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(BEAST)),<span class="pl-s"><span class="pl-pds">"</span>../examples/sphere2.in<span class="pl-pds">"</span></span>))
X <span class="pl-k">=</span> <span class="pl-c1">raviartthomas</span>(Γ)

t <span class="pl-k">=</span> Maxwell3D<span class="pl-k">.</span><span class="pl-c1">singlelayer</span>(wavenumber<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
E <span class="pl-k">=</span> Maxwell3D<span class="pl-k">.</span><span class="pl-c1">planewave</span>(direction<span class="pl-k">=</span>ẑ, polarization<span class="pl-k">=</span>x̂, wavenumber<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
e <span class="pl-k">=</span> (n <span class="pl-k">×</span> E) <span class="pl-k">×</span> n

<span class="pl-c1">@hilbertspace</span> j
<span class="pl-c1">@hilbertspace</span> k
efie <span class="pl-k">=</span> <span class="pl-c1">@discretise</span> t[k,j]<span class="pl-k">==</span>e[k]  j<span class="pl-k">∈</span>X k<span class="pl-k">∈</span>X
u <span class="pl-k">=</span> <span class="pl-c1">gmres</span>(efie)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="output.png"><img src="output.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>General framework allowing to easily add support for more kernels, finite element spaces, and excitations.</li>
<li>Assembly routines that take in symbolic representations of the defining bilinear form. Support for block systems and finite element spaces defined in terms of direct products or tensor products of atomic spaces.</li>
<li>LU and iterative solution of the resulting system.</li>
<li>Computation of secondary quantities of interest such as the near field and the limiting far field.</li>
<li>Support for space-time Galerkin and convolution quadrature approaches to the solution of time domain boundary integral equations.</li>
<li>Implementation of Lagrange zeroth and first order space, Raviart-Thomas, Brezzi-Douglas-Marini, and Buffa-Christianssen vector elemenents.</li>
</ul>
</article></div>