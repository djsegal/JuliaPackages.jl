<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stablemap" class="anchor" aria-hidden="true" href="#stablemap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StableMap</h1>
<p dir="auto"><a href="https://github.com/chriselrod/StableMap.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/chriselrod/StableMap.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chriselrod/StableMap.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3c6d2c1556ccb918c8822a0809b5ffa4967d844fb0f8856382391af381c6f846/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f537461626c654d61702e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chriselrod/StableMap.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The map that preserves the relative order of inputs mapped to outputs.
So do other maps, of course.</p>
<p dir="auto">StableMap tries to return vectors that are as concretely typed as possible.
For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StableMap, ForwardDiff, BenchmarkTools
[ Info: Precompiling StableMap [626594ce-0aac-4e81-a7f6-bc4bb5ff97e9]

julia&gt; f(x) = x &gt; 1 ? x : 1.0
f (generic function with 1 method)

julia&gt; g(x) = Base.inferencebarrier(x &gt; 1 ? x : 1.0)
g (generic function with 1 method)

julia&gt; h(x) = Base.inferencebarrier(x)
h (generic function with 1 method)

julia&gt; x = [ForwardDiff.Dual(0f0,1f0), ForwardDiff.Dual(2f0,1f0)];

julia&gt; y = [ForwardDiff.Dual(2f0,1f0), ForwardDiff.Dual(0f0,1f0)];

julia&gt; @btime map(f, $x)
  208.010 ns (4 allocations: 176 bytes)
2-element Vector{Real}:
               1.0
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime stable_map(f, $x)
  93.329 ns (1 allocation: 96 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float64, 1}}:
 Dual{Nothing}(1.0,0.0)
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime map(f, $y)
  210.378 ns (4 allocations: 176 bytes)
2-element Vector{Real}:
 Dual{Nothing}(2.0,1.0)
               1.0

julia&gt; @btime stable_map(f, $y)
  94.547 ns (1 allocation: 96 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float64, 1}}:
 Dual{Nothing}(2.0,1.0)
 Dual{Nothing}(1.0,0.0)

julia&gt; @btime map(g, $x)
  890.247 ns (10 allocations: 272 bytes)
2-element Vector{Real}:
               1.0
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime stable_map(g, $x)
  3.221 μs (18 allocations: 800 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float64, 1}}:
 Dual{Nothing}(1.0,0.0)
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime map(g, $y)
  866.372 ns (10 allocations: 272 bytes)
2-element Vector{Real}:
 Dual{Nothing}(2.0,1.0)
               1.0

julia&gt; @btime stable_map(g, $y)
  3.357 μs (18 allocations: 800 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float64, 1}}:
 Dual{Nothing}(2.0,1.0)
 Dual{Nothing}(1.0,0.0)

julia&gt; @btime map(h, $x)
  531.503 ns (5 allocations: 144 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float32, 1}}:
 Dual{Nothing}(0.0,1.0)
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime stable_map(h, $x)
  810.656 ns (4 allocations: 128 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float32, 1}}:
 Dual{Nothing}(0.0,1.0)
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime map(h, $y)
  535.145 ns (5 allocations: 144 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float32, 1}}:
 Dual{Nothing}(2.0,1.0)
 Dual{Nothing}(0.0,1.0)

julia&gt; @btime stable_map(h, $y)
  816.471 ns (4 allocations: 128 bytes)
2-element Vector{ForwardDiff.Dual{Nothing, Float32, 1}}:
 Dual{Nothing}(2.0,1.0)
 Dual{Nothing}(0.0,1.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StableMap, ForwardDiff, BenchmarkTools
[ Info<span class="pl-k">:</span> Precompiling StableMap [<span class="pl-c1">626594</span>ce<span class="pl-k">-</span><span class="pl-c1">0</span>aac<span class="pl-k">-</span><span class="pl-c1">4e81</span><span class="pl-k">-</span>a7f6<span class="pl-k">-</span>bc4bb5ff97e9]

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">?</span> x <span class="pl-k">:</span> <span class="pl-c1">1.0</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">g</span>(x) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">inferencebarrier</span>(x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">?</span> x <span class="pl-k">:</span> <span class="pl-c1">1.0</span>)
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">h</span>(x) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">inferencebarrier</span>(x)
h (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [ForwardDiff<span class="pl-k">.</span><span class="pl-c1">Dual</span>(<span class="pl-c1">0f0</span>,<span class="pl-c1">1f0</span>), ForwardDiff<span class="pl-k">.</span><span class="pl-c1">Dual</span>(<span class="pl-c1">2f0</span>,<span class="pl-c1">1f0</span>)];

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> [ForwardDiff<span class="pl-k">.</span><span class="pl-c1">Dual</span>(<span class="pl-c1">2f0</span>,<span class="pl-c1">1f0</span>), ForwardDiff<span class="pl-k">.</span><span class="pl-c1">Dual</span>(<span class="pl-c1">0f0</span>,<span class="pl-c1">1f0</span>)];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(f, <span class="pl-k">$</span>x)
  <span class="pl-c1">208.010</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">176</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Real}<span class="pl-k">:</span>
               <span class="pl-c1">1.0</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(f, <span class="pl-k">$</span>x)
  <span class="pl-c1">93.329</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">96</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float64, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(f, <span class="pl-k">$</span>y)
  <span class="pl-c1">210.378</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">176</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Real}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
               <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(f, <span class="pl-k">$</span>y)
  <span class="pl-c1">94.547</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">96</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float64, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(g, <span class="pl-k">$</span>x)
  <span class="pl-c1">890.247</span> ns (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">272</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Real}<span class="pl-k">:</span>
               <span class="pl-c1">1.0</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(g, <span class="pl-k">$</span>x)
  <span class="pl-c1">3.221</span> μs (<span class="pl-c1">18</span> allocations<span class="pl-k">:</span> <span class="pl-c1">800</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float64, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(g, <span class="pl-k">$</span>y)
  <span class="pl-c1">866.372</span> ns (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">272</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Real}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
               <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(g, <span class="pl-k">$</span>y)
  <span class="pl-c1">3.357</span> μs (<span class="pl-c1">18</span> allocations<span class="pl-k">:</span> <span class="pl-c1">800</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float64, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(h, <span class="pl-k">$</span>x)
  <span class="pl-c1">531.503</span> ns (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(h, <span class="pl-k">$</span>x)
  <span class="pl-c1">810.656</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">128</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(h, <span class="pl-k">$</span>y)
  <span class="pl-c1">535.145</span> ns (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(h, <span class="pl-k">$</span>y)
  <span class="pl-c1">816.471</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">128</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)</pre></div>
<p dir="auto">It can be faster at handling small unions than <code>Base.map</code>, but is currently slower for functions than return <code>Any</code>. However, in both cases, it has the benefit of returning as concretely-typed arrays as possible.</p>
<p dir="auto">It will try to promote returned objects to the same type, and if this is not possible, it will return a small union.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; m(x) = x &gt; 1.0 ? x : [x]
m (generic function with 1 method)

julia&gt; @btime map(m, $x)
  257.890 ns (4 allocations: 208 bytes)
2-element Vector{Any}:
                ForwardDiff.Dual{Nothing, Float32, 1}[Dual{Nothing}(0.0,1.0)]
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime stable_map(m, $x)
  194.158 ns (3 allocations: 144 bytes)
2-element Vector{Union{ForwardDiff.Dual{Nothing, Float32, 1}, Vector{ForwardDiff.Dual{Nothing, Float32, 1}}}}:
                ForwardDiff.Dual{Nothing, Float32, 1}[Dual{Nothing}(0.0,1.0)]
 Dual{Nothing}(2.0,1.0)

julia&gt; @btime map(m, $y)
  260.979 ns (4 allocations: 224 bytes)
2-element Vector{Any}:
 Dual{Nothing}(2.0,1.0)
                ForwardDiff.Dual{Nothing, Float32, 1}[Dual{Nothing}(0.0,1.0)]

julia&gt; @btime stable_map(m, $y)
  190.128 ns (3 allocations: 144 bytes)
2-element Vector{Union{ForwardDiff.Dual{Nothing, Float32, 1}, Vector{ForwardDiff.Dual{Nothing, Float32, 1}}}}:
 Dual{Nothing}(2.0,1.0)
                ForwardDiff.Dual{Nothing, Float32, 1}[Dual{Nothing}(0.0,1.0)]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">m</span>(x) <span class="pl-k">=</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">?</span> x <span class="pl-k">:</span> [x]
m (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(m, <span class="pl-k">$</span>x)
  <span class="pl-c1">257.890</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">208</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
                ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}[<span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)]
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(m, <span class="pl-k">$</span>x)
  <span class="pl-c1">194.158</span> ns (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Union{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}, Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}}}<span class="pl-k">:</span>
                ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}[<span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)]
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(m, <span class="pl-k">$</span>y)
  <span class="pl-c1">260.979</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">224</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
                ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}[<span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">stable_map</span>(m, <span class="pl-k">$</span>y)
  <span class="pl-c1">190.128</span> ns (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Union{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}, Vector{ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}}}}<span class="pl-k">:</span>
 <span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1.0</span>)
                ForwardDiff<span class="pl-k">.</span>Dual{Nothing, Float32, <span class="pl-c1">1</span>}[<span class="pl-c1">Dual</span><span class="pl-c1">{Nothing}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)]</pre></div>
</article></div>