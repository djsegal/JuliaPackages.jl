<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-datatools-manipulating-flat-tables-and-nested-data-structures-using-transducersjl" class="anchor" aria-hidden="true" href="#datatools-manipulating-flat-tables-and-nested-data-structures-using-transducersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DataTools: manipulating flat tables and nested data structures using Transducers.jl</h1>
<p dir="auto"><a href="https://juliafolds.github.io/DataTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/DataTools.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/DataTools.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataTools: oncol, modifying, averaging

julia&gt; using Transducers: Filter

julia&gt; data = [(a = 1, b = 7), (a = 2, b = 3), (a = 3, b = 4)];

julia&gt; rf = oncol(a = +, b = averaging);

julia&gt; foldl(rf, Filter(x -&gt; isodd(x.a)), data)
(a = 4, b = 5.5)

julia&gt; map(modifying(a = string), data)
3-element Array{NamedTuple{(:a, :b),Tuple{String,Int64}},1}:
 (a = &quot;1&quot;, b = 7)
 (a = &quot;2&quot;, b = 3)
 (a = &quot;3&quot;, b = 4)

julia&gt; reduce(modifying(a = +), data)
(a = 6, b = 7)

julia&gt; using Accessors: @optic

julia&gt; data = [(a = ((b = 1,), 2),), (a = ((b = 3,), 4),)];

julia&gt; map(modifying(@optic(_.a[1].b) =&gt; x -&gt; 10x), data)
2-element Array{NamedTuple{(:a,),Tuple{Tuple{NamedTuple{(:b,),Tuple{Int64}},Int64}}},1}:
 (a = ((b = 10,), 2),)
 (a = ((b = 30,), 4),)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataTools<span class="pl-k">:</span> oncol, modifying, averaging

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Transducers<span class="pl-k">:</span> Filter

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> [(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">7</span>), (a <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-c1">3</span>), (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">4</span>)];

julia<span class="pl-k">&gt;</span> rf <span class="pl-k">=</span> <span class="pl-c1">oncol</span>(a <span class="pl-k">=</span> <span class="pl-k">+</span>, b <span class="pl-k">=</span> averaging);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>(rf, <span class="pl-c1">Filter</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">isodd</span>(x<span class="pl-k">.</span>a)), data)
(a <span class="pl-k">=</span> <span class="pl-c1">4</span>, b <span class="pl-k">=</span> <span class="pl-c1">5.5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(<span class="pl-c1">modifying</span>(a <span class="pl-k">=</span> string), data)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{String,Int64}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, b <span class="pl-k">=</span> <span class="pl-c1">7</span>)
 (a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>, b <span class="pl-k">=</span> <span class="pl-c1">3</span>)
 (a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>, b <span class="pl-k">=</span> <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reduce</span>(<span class="pl-c1">modifying</span>(a <span class="pl-k">=</span> <span class="pl-k">+</span>), data)
(a <span class="pl-k">=</span> <span class="pl-c1">6</span>, b <span class="pl-k">=</span> <span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Accessors<span class="pl-k">:</span> <span class="pl-c1">@optic</span>

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> [(a <span class="pl-k">=</span> ((b <span class="pl-k">=</span> <span class="pl-c1">1</span>,), <span class="pl-c1">2</span>),), (a <span class="pl-k">=</span> ((b <span class="pl-k">=</span> <span class="pl-c1">3</span>,), <span class="pl-c1">4</span>),)];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(<span class="pl-c1">modifying</span>(<span class="pl-c1">@optic</span>(_<span class="pl-k">.</span>a[<span class="pl-c1">1</span>]<span class="pl-k">.</span>b) <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">10</span>x), data)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{NamedTuple{(<span class="pl-c1">:a</span>,),Tuple{Tuple{NamedTuple{(<span class="pl-c1">:b</span>,),Tuple{Int64}},Int64}}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> ((b <span class="pl-k">=</span> <span class="pl-c1">10</span>,), <span class="pl-c1">2</span>),)
 (a <span class="pl-k">=</span> ((b <span class="pl-k">=</span> <span class="pl-c1">30</span>,), <span class="pl-c1">4</span>),)</pre></div>
</article></div>