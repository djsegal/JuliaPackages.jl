<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-transducersjl-efficient-transducers-for-julia" class="anchor" aria-hidden="true" href="#transducersjl-efficient-transducers-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transducers.jl: Efficient transducers for Julia</h1>
<p dir="auto"><a href="https://juliafolds.github.io/Transducers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafolds.github.io/Transducers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Latest documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/JuliaFolds/Transducers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/35c88fac3f953554a1ce5787101c80353c51713ae1b6b76fcaa6a7afa7a04e6b/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961466f6c64732f5472616e736475636572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Status" data-canonical-src="https://travis-ci.com/JuliaFolds/Transducers.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaFolds/Transducers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b3f280c5582e3cc6e0acf0951d816dee2ba0b55277b0f12d14eaaefb5f23a56b/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961466f6c64732f5472616e736475636572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaFolds/Transducers.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaFolds/Transducers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/744d6cb7ab769417c22388fffa2c9d8601689764d84b1c9f2f1d52d3c985d754/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961466f6c64732f5472616e736475636572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaFolds/Transducers.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a></p>
<p dir="auto">Transducers.jl provides composable algorithms on "sequence" of inputs.
They are called <em><a href="https://clojure.org/reference/transducers" rel="nofollow">transducers</a></em>, first introduced in Clojure language
by Rich Hickey.</p>
<p dir="auto">Using transducers is quite straightforward, especially if you already
know similar concepts in iterator libraries:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Transducers
1:40 |&gt; Partition(7) |&gt; Filter(x -&gt; prod(x) % 11 == 0) |&gt; Cat() |&gt; Scan(+) |&gt; sum"><pre><span class="pl-k">using</span> Transducers
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">40</span> <span class="pl-k">|&gt;</span> <span class="pl-c1">Partition</span>(<span class="pl-c1">7</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Filter</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">prod</span>(x) <span class="pl-k">%</span> <span class="pl-c1">11</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Cat</span>() <span class="pl-k">|&gt;</span> <span class="pl-c1">Scan</span>(<span class="pl-k">+</span>) <span class="pl-k">|&gt;</span> sum</pre></div>
<p dir="auto">However, the protocol used for the transducers is quite different from
iterators and results in a better performance for complex
compositions.  Furthermore, some transducers support parallel
execution.  If a transducer is composed of such transducers, it can be
automatically re-used both in sequential (<code>foldl</code> etc.) and parallel
(<code>reduce</code> etc.) contexts.</p>
<p dir="auto">See more in the <a href="https://juliafolds.github.io/Transducers.jl/dev" rel="nofollow">documentation</a>.</p>
<p dir="auto">If you are interested in parallel programming in general, see also:
<a href="https://juliafolds.github.io/data-parallelism/tutorials/quick-introduction/" rel="nofollow">A quick introduction to data parallelism in Julia</a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Transducers&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Transducers<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<p dir="auto">Following packages are supported by Transducers.jl.  In particular, they rely on
the Transducers.jl protocol to support multi-threading, multi-processing, and
GPU-based parallelism.</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaFolds/Folds.jl">Folds.jl</a> implements parallelized
<code>Base</code>-like API based on Transducers.jl.  This package can be used without
knowing anything about transducers.</li>
<li><a href="https://github.com/JuliaFolds/FLoops.jl">FLoops.jl</a> provides <code>for</code>-loop
syntax for using the loop executed by the Transducers.jl protocol.</li>
<li><a href="https://github.com/JuliaFolds/BangBang.jl">BangBang.jl</a> implements
mutate-or-widen API.  This is the foundation of
<a href="https://discourse.julialang.org/search?q=typocalypse" rel="nofollow">typocalypse</a>-free
<code>map</code>/<code>collect</code>-like functions.  Functions such as <code>append!!</code>,
<code>merge!!</code>, <code>mergewith!!</code>, <code>union!!</code>, etc. are useful as a reducing
function.</li>
<li><a href="https://github.com/JuliaFolds/InitialValues.jl">InitialValues.jl</a>
provides a framework for initial/identity element of folds.</li>
<li><a href="https://github.com/JuliaFolds/MicroCollections.jl">MicroCollections.jl</a>
provides empty and singleton collections (arrays, dicts and sets).
They are useful when writing transducers and reducing functions that
construct a data collection.</li>
</ul>
</article></div>