<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-transducersjl-efficient-transducers-for-julia" class="anchor" aria-hidden="true" href="#transducersjl-efficient-transducers-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transducers.jl: Efficient transducers for Julia</h1>
<p><a href="https://juliafolds.github.io/Transducers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliafolds.github.io/Transducers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Latest documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/JuliaFolds/Transducers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7475426763fe32e7bca30cb8f8b38da15e39735/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961466f6c64732f5472616e736475636572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Status" data-canonical-src="https://travis-ci.com/JuliaFolds/Transducers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaFolds/Transducers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/21e2abbc3bc4c9b9b5158ad5605fec0cd274fc88/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961466f6c64732f5472616e736475636572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaFolds/Transducers.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaFolds/Transducers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/28641334392043e9c483797afdaeb58cbe1c13f0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961466f6c64732f5472616e736475636572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaFolds/Transducers.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="https://github.com/tkf/Aqua.jl"><img src="https://camo.githubusercontent.com/6100188045368e759fea6ce8c4df2e322ea75b3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175612e6a6c2d2546302539462538432541322d617175612e737667" alt="Aqua QA" data-canonical-src="https://img.shields.io/badge/Aqua.jl-%F0%9F%8C%A2-aqua.svg" style="max-width:100%;"></a></p>
<p>Transducers.jl provides composable algorithms on "sequence" of inputs.
They are called <em><a href="https://clojure.org/reference/transducers" rel="nofollow">transducers</a></em>, first introduced in Clojure language
by Rich Hickey.</p>
<p>Using transducers is quite straightforward, especially if you already
know similar concepts in iterator libraries:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Transducers
xf <span class="pl-k">=</span> <span class="pl-c1">Partition</span>(<span class="pl-c1">7</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Filter</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">prod</span>(x) <span class="pl-k">%</span> <span class="pl-c1">11</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Cat</span>() <span class="pl-k">|&gt;</span> <span class="pl-c1">Scan</span>(<span class="pl-k">+</span>)
<span class="pl-c1">foldl</span>(<span class="pl-k">+</span>, xf, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">40</span>)</pre></div>
<p>However, the protocol used for the transducers is quite different from
iterators and results in a better performance for complex
compositions.  Furthermore, some transducers support parallel
execution.  If a transducer is composed of such transducers, it can be
automatically re-used both in sequential (<code>foldl</code> etc.) and parallel
(<code>reduce</code> etc.) contexts.</p>
<p>See more in the <a href="https://juliafolds.github.io/Transducers.jl/dev" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<pre><code>]add Transducers
</code></pre>
</article></div>