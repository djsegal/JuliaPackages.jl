<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-lightxmljl" class="anchor" aria-hidden="true" href="#lightxmljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LightXML.jl</h2>
<p><a href="https://travis-ci.org/JuliaIO/LightXML.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d0e5937cca3f61d63d03600ec023c8b48d36e4b0/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f4c69676874584d4c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/LightXML.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tkelman/lightxml-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/fdb39689ba0b2c55a1041d2596fcdfc64131f50f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f31346c303937796939326672716b716d2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/14l097yi92frqkqm/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=LightXML&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/559ed0cc521d9e8236799569fd29e4dc6db01462/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4c69676874584d4c5f302e362e737667" alt="LightXML" data-canonical-src="http://pkg.julialang.org/badges/LightXML_0.6.svg" style="max-width:100%;"></a></p>
<p>This package is a light-weight Julia wrapper of <a href="http://www.xmlsoft.org" rel="nofollow">libxml2</a>, which provides a minimal interface that covers functionalities that are commonly needed:</p>
<ul>
<li>Parse a XML file or string into a tree</li>
<li>Access XML tree structure</li>
<li>Create an XML tree</li>
<li>Export an XML tree to a string or an XML file</li>
</ul>
<h3><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setup</h3>
<p>Like other Julia packages, you may checkout <em>LightXML</em> from METADATA repo, as</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LightXML<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Note:</strong> This package relies on the library <em>libxml2</em> to work, which is shipped with Mac OS X and many Linux systems. So this package may work out of the box. If not, you may check whether <em>libxml2</em> has been in your system and whether <em>libxml2.so</em> (for Linux) or <em>libxml2.dylib</em> (for Mac) is on your library search path.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>The following examples show how you may use this package to accomplish common tasks.</p>
<h4><a id="user-content-read-an-xml-file" class="anchor" aria-hidden="true" href="#read-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Read an XML file</h4>
<p>Suppose you have an XML file <code>ex1.xml</code> as below</p>
<div class="highlight highlight-text-xml"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">bookstore</span>&gt;
  &lt;<span class="pl-ent">book</span> <span class="pl-e">category</span>=<span class="pl-s"><span class="pl-pds">"</span>COOKING<span class="pl-pds">"</span></span> <span class="pl-e">tag</span>=<span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">title</span> <span class="pl-e">lang</span>=<span class="pl-s"><span class="pl-pds">"</span>en<span class="pl-pds">"</span></span>&gt;Everyday Italian&lt;/<span class="pl-ent">title</span>&gt;
    &lt;<span class="pl-ent">author</span>&gt;Giada De Laurentiis&lt;/<span class="pl-ent">author</span>&gt;
    &lt;<span class="pl-ent">year</span>&gt;2005&lt;/<span class="pl-ent">year</span>&gt;
    &lt;<span class="pl-ent">price</span>&gt;30.00&lt;/<span class="pl-ent">price</span>&gt;
  &lt;/<span class="pl-ent">book</span>&gt;
  &lt;<span class="pl-ent">book</span> <span class="pl-e">category</span>=<span class="pl-s"><span class="pl-pds">"</span>CHILDREN<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">title</span> <span class="pl-e">lang</span>=<span class="pl-s"><span class="pl-pds">"</span>en<span class="pl-pds">"</span></span>&gt;Harry Potter&lt;/<span class="pl-ent">title</span>&gt;
    &lt;<span class="pl-ent">author</span>&gt;J K. Rowling&lt;/<span class="pl-ent">author</span>&gt;
    &lt;<span class="pl-ent">year</span>&gt;2005&lt;/<span class="pl-ent">year</span>&gt;
    &lt;<span class="pl-ent">price</span>&gt;29.99&lt;/<span class="pl-ent">price</span>&gt;
  &lt;/<span class="pl-ent">book</span>&gt;
&lt;/<span class="pl-ent">bookstore</span>&gt;</pre></div>
<p>Here is the code to parse this file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightXML

<span class="pl-c"><span class="pl-c">#</span> parse ex1.xml:</span>
<span class="pl-c"><span class="pl-c">#</span> xdoc is an instance of XMLDocument, which maintains a tree structure</span>
xdoc <span class="pl-k">=</span> <span class="pl-c1">parse_file</span>(<span class="pl-s"><span class="pl-pds">"</span>ex1.xml<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> get the root element</span>
xroot <span class="pl-k">=</span> <span class="pl-c1">root</span>(xdoc)  <span class="pl-c"><span class="pl-c">#</span> an instance of XMLElement</span>
<span class="pl-c"><span class="pl-c">#</span> print its name</span>
<span class="pl-c1">println</span>(<span class="pl-c1">name</span>(xroot))  <span class="pl-c"><span class="pl-c">#</span> this should print: bookstore</span>

<span class="pl-c"><span class="pl-c">#</span> traverse all its child nodes and print element names</span>
<span class="pl-k">for</span> c <span class="pl-k">in</span> <span class="pl-c1">child_nodes</span>(xroot)  <span class="pl-c"><span class="pl-c">#</span> c is an instance of XMLNode</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">nodetype</span>(c))
    <span class="pl-k">if</span> <span class="pl-c1">is_elementnode</span>(c)
        e <span class="pl-k">=</span> <span class="pl-c1">XMLElement</span>(c)  <span class="pl-c"><span class="pl-c">#</span> this makes an XMLElement instance</span>
        <span class="pl-c1">println</span>(<span class="pl-c1">name</span>(e))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">If the remainder of the script does not use the document or any of its children,</span>
<span class="pl-c">you can call free here to deallocate the memory. The memory will only get</span>
<span class="pl-c">deallocated by calling free or by exiting julia -- i.e., the memory allocated by</span>
<span class="pl-c">libxml2 will not get freed when the julia variable wrapping it goes out of</span>
<span class="pl-c">scope.</span>
<span class="pl-c"><span class="pl-c">=#</span></span>
<span class="pl-c1">free</span>(xdoc)</pre></div>
<p>There are actually five child nodes under <code>&lt;bookstore&gt;</code>: the 1st, 3rd, 5th children are text nodes (any space between node elements are captured by text nodes), while the 2nd and 4th nodes are element nodes corresponding to the <code>&lt;book&gt;</code> elements.</p>
<p>One may use the function <code>nodetype</code> to determine the type of a node, which returns an integer following the table <a href="https://www.w3schools.com/jsref/prop_node_nodetype.asp" rel="nofollow">here</a>. In particular, 1 indicates element node and 3 indicates text node.</p>
<p>If you only care about child elements, you may use <code>child_elements</code> instead of <code>child_nodes</code>.</p>
<div class="highlight highlight-source-julia"><pre>ces <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">child_elements</span>(xroot))  <span class="pl-c"><span class="pl-c">#</span> get a list of all child elements</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">length</span>(ces) <span class="pl-k">==</span> <span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> if you know the child element tagname, you can instead get a list as</span>
ces <span class="pl-k">=</span> <span class="pl-c1">get_elements_by_tagname</span>(xroot, <span class="pl-s"><span class="pl-pds">"</span>book<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or shorthand:</span>
ces <span class="pl-k">=</span> xroot[<span class="pl-s"><span class="pl-pds">"</span>book<span class="pl-pds">"</span></span>]

e1 <span class="pl-k">=</span> ces[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> the first book element</span>

<span class="pl-c"><span class="pl-c">#</span> print the value of an attribute</span>
<span class="pl-c1">println</span>(<span class="pl-c1">attribute</span>(e1, <span class="pl-s"><span class="pl-pds">"</span>category<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> find the first title element under e1</span>
t <span class="pl-k">=</span> <span class="pl-c1">find_element</span>(e1, <span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> retrieve the value of lang attribute of t</span>
a <span class="pl-k">=</span> <span class="pl-c1">attribute</span>(t, <span class="pl-s"><span class="pl-pds">"</span>lang<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> a &lt;- "en"</span>

<span class="pl-c"><span class="pl-c">#</span> retrieve the text content of t</span>
r <span class="pl-k">=</span> <span class="pl-c1">content</span>(t)  <span class="pl-c"><span class="pl-c">#</span> r &lt;- "Everyday Italian"</span></pre></div>
<p>One can also traverse all attributes of an element (<code>e1</code>) as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> a <span class="pl-k">in</span> <span class="pl-c1">attributes</span>(e1)  <span class="pl-c"><span class="pl-c">#</span> a is an instance of XMLAttr</span>
    n <span class="pl-k">=</span> <span class="pl-c1">name</span>(a)
    v <span class="pl-k">=</span> <span class="pl-c1">value</span>(a)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$n</span> = <span class="pl-v">$v</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Another way to access attributes is to turn them into a dictionary using <code>attributes_dict</code>, as</p>
<div class="highlight highlight-source-julia"><pre>ad <span class="pl-k">=</span> <span class="pl-c1">attributes_dict</span>(e1)
v <span class="pl-k">=</span> ad[<span class="pl-s"><span class="pl-pds">"</span>category<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span> v &lt;-- "COOKING"</span></pre></div>
<p><strong>Note:</strong> The functions <code>child_nodes</code>, <code>child_elements</code>, and <code>attributes</code> return light weight iterators -- so that one can use them with for-loop. To get an array of all items, one may use the <code>collect</code> function provided by Julia.</p>
<h4><a id="user-content-create-an-xml-document" class="anchor" aria-hidden="true" href="#create-an-xml-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create an XML Document</h4>
<p>This package allows you to construct an XML document programmatically. For example, to create an XML document as</p>
<div class="highlight highlight-text-xml"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>utf-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">States</span>&gt;
  &lt;<span class="pl-ent">State</span> <span class="pl-e">tag</span>=<span class="pl-s"><span class="pl-pds">"</span>MA<span class="pl-pds">"</span></span>&gt;Massachusetts&lt;/<span class="pl-ent">State</span>&gt;
  &lt;<span class="pl-ent">State</span> <span class="pl-e">tag</span>=<span class="pl-s"><span class="pl-pds">"</span>IL<span class="pl-pds">"</span></span> <span class="pl-e">cap</span>=<span class="pl-s"><span class="pl-pds">"</span>Springfield<span class="pl-pds">"</span></span>&gt;Illinois&lt;/<span class="pl-ent">State</span>&gt;
  &lt;<span class="pl-ent">State</span> <span class="pl-e">tag</span>=<span class="pl-s"><span class="pl-pds">"</span>CA<span class="pl-pds">"</span></span> <span class="pl-e">cap</span>=<span class="pl-s"><span class="pl-pds">"</span>Sacramento<span class="pl-pds">"</span></span>&gt;California&lt;/<span class="pl-ent">State</span>&gt;
&lt;/<span class="pl-ent">States</span>&gt;</pre></div>
<p>You may write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> create an empty XML document</span>
xdoc <span class="pl-k">=</span> <span class="pl-c1">XMLDocument</span>()

<span class="pl-c"><span class="pl-c">#</span> create &amp; attach a root node</span>
xroot <span class="pl-k">=</span> <span class="pl-c1">create_root</span>(xdoc, <span class="pl-s"><span class="pl-pds">"</span>States<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> create the first child</span>
xs1 <span class="pl-k">=</span> <span class="pl-c1">new_child</span>(xroot, <span class="pl-s"><span class="pl-pds">"</span>State<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> add the inner content</span>
<span class="pl-c1">add_text</span>(xs1, <span class="pl-s"><span class="pl-pds">"</span>Massachusetts<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> set attribute</span>
<span class="pl-c1">set_attribute</span>(xs1, <span class="pl-s"><span class="pl-pds">"</span>tag<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MA<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> likewise for the second child</span>
xs2 <span class="pl-k">=</span> <span class="pl-c1">new_child</span>(xroot, <span class="pl-s"><span class="pl-pds">"</span>State<span class="pl-pds">"</span></span>)
<span class="pl-c1">add_text</span>(xs2, <span class="pl-s"><span class="pl-pds">"</span>Illinois<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> set multiple attributes using a dict</span>
<span class="pl-c1">set_attributes</span>(xs2, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>tag<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>IL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cap<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Springfield<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> now, the third child</span>
xs3 <span class="pl-k">=</span> <span class="pl-c1">new_child</span>(xroot, <span class="pl-s"><span class="pl-pds">"</span>State<span class="pl-pds">"</span></span>)
<span class="pl-c1">add_text</span>(xs3, <span class="pl-s"><span class="pl-pds">"</span>California<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> set attributes using keyword arguments</span>
<span class="pl-c1">set_attributes</span>(xs3; tag<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CA<span class="pl-pds">"</span></span>, cap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Sacramento<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Note:</strong> When you create XML documents and elements directly you need to take care not to leak memory; memory management in the underlying libxml2 library is complex and LightXML currently does not integrate well with Julia's garbage collection system. You can call <code>free</code> on an XMLDocument, XMLNode or XMLElement but you must take care not to reference any child elements after they have been manually freed.</p>
<h4><a id="user-content-export-an-xml-file" class="anchor" aria-hidden="true" href="#export-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Export an XML file</h4>
<p>With this package, you can easily export an XML file to a string or a file, or show it on the console, as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> save to an XML file</span>
<span class="pl-c1">save_file</span>(xdoc, <span class="pl-s"><span class="pl-pds">"</span>f1.xml<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> output to a string</span>
s <span class="pl-k">=</span> <span class="pl-c1">string</span>(xdoc)

<span class="pl-c"><span class="pl-c">#</span> print to the console (in a pretty format as in an XML file)</span>
<span class="pl-c1">print</span>(xdoc)</pre></div>
<p><strong>Note:</strong> the <code>string</code> and <code>show</code> functions are specialized for both <code>XMLDocument</code> and <code>XMLElement</code>.</p>
<h3><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h3>
<p>Main types of this package</p>
<ul>
<li><code>XMLDocument</code>: represent an XML document (in a tree)</li>
<li><code>XMLElement</code>: represent an XML element (<code>child_elements</code> give you this)</li>
<li><code>XMLNode</code>: represent a generic XML node (<code>child_nodes</code> give you this)</li>
<li><code>XMLAttr</code>: represent an XML attribute</li>
</ul>
<p><strong>Note:</strong> If an <code>XMLNode</code> instance <code>x</code> is actually an element node, one may construct an <code>XMLElement</code> instance by <code>XMLElement(x)</code>.</p>
<h3><a id="user-content-api-functions" class="anchor" aria-hidden="true" href="#api-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API Functions</h3>
<p>A list of API functions:</p>
<h5><a id="user-content-functions-to-access-an-xml-tree" class="anchor" aria-hidden="true" href="#functions-to-access-an-xml-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions to access an XML tree</h5>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Let xdoc be a document, x be a node/element, e be an element</span>

<span class="pl-c1">root</span>(xdoc)   <span class="pl-c"><span class="pl-c">#</span> get the root element of a document</span>

<span class="pl-c1">nodetype</span>(x)  <span class="pl-c"><span class="pl-c">#</span> get an integer indicating the node type</span>
<span class="pl-c1">name</span>(x)      <span class="pl-c"><span class="pl-c">#</span> get the name of a node/element</span>
<span class="pl-c1">content</span>(x)   <span class="pl-c"><span class="pl-c">#</span> get text content of a node/element</span>
             <span class="pl-c"><span class="pl-c">#</span> if x is an element, this returns all text (concatenated) within x</span>

<span class="pl-c1">is_elementnode</span>(x)       <span class="pl-c"><span class="pl-c">#</span> whether x is an element node</span>
<span class="pl-c1">is_textnode</span>(x)          <span class="pl-c"><span class="pl-c">#</span> whether x is a text node</span>
<span class="pl-c1">is_cdatanode</span>(x)         <span class="pl-c"><span class="pl-c">#</span> whether x is a CDATA node</span>
<span class="pl-c1">is_commentnode</span>(x)       <span class="pl-c"><span class="pl-c">#</span> whether x is a comment node</span>

<span class="pl-c1">has_children</span>(e)         <span class="pl-c"><span class="pl-c">#</span> whether e has child nodes</span>
<span class="pl-c1">has_attributes</span>(e)       <span class="pl-c"><span class="pl-c">#</span> whether e has attributes</span>

<span class="pl-c1">child_nodes</span>(x)          <span class="pl-c"><span class="pl-c">#</span> iterator of all child nodes of a node/element x</span>
<span class="pl-c1">child_elements</span>(e)       <span class="pl-c"><span class="pl-c">#</span> iterator of all child elements of e</span>
<span class="pl-c1">attributes</span>(e)           <span class="pl-c"><span class="pl-c">#</span> iterator of all attributes of e</span>

<span class="pl-c1">attributes_dict</span>(e)      <span class="pl-c"><span class="pl-c">#</span> a dictionary of all attributes of e,</span>
                        <span class="pl-c"><span class="pl-c">#</span> which maps names to corresponding values</span>

<span class="pl-c1">has_attribute</span>(e, name)  <span class="pl-c"><span class="pl-c">#</span> whether a named attribute exists for e</span>

<span class="pl-c"><span class="pl-c">#</span> get the value of a named attribute</span>
<span class="pl-c"><span class="pl-c">#</span> when the attribute does not exist, it either</span>
<span class="pl-c"><span class="pl-c">#</span> throws an exception (when required is true)</span>
<span class="pl-c"><span class="pl-c">#</span> or returns nothing (when required is false)</span>
<span class="pl-c1">attribute</span>(e, name; required<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c1">find_element</span>(e, name)   <span class="pl-c"><span class="pl-c">#</span> the first element of specified name under e</span>
                        <span class="pl-c"><span class="pl-c">#</span> return nothing is no such an element is found</span>

<span class="pl-c1">get_elements_by_tagname</span>(e, name)  <span class="pl-c"><span class="pl-c">#</span> a list of all child elements of e with</span>
                                  <span class="pl-c"><span class="pl-c">#</span> the specified name. Equivalent to e[name]</span>

<span class="pl-c1">string</span>(e)               <span class="pl-c"><span class="pl-c">#</span> format an XML element into a string</span>
<span class="pl-c1">show</span>(io, e)             <span class="pl-c"><span class="pl-c">#</span> output formatted XML element</span>

<span class="pl-c1">unlink</span>(x)               <span class="pl-c"><span class="pl-c">#</span> remove a node or element from its current context</span>
                        <span class="pl-c"><span class="pl-c">#</span> (unlink does not free the memory for the node/element)</span>
<span class="pl-c1">free</span>(xdoc)              <span class="pl-c"><span class="pl-c">#</span> release memory for a document and all its children</span>
<span class="pl-c1">free</span>(x)                 <span class="pl-c"><span class="pl-c">#</span> release memory for a node/element and all its children</span></pre></div>
<h5><a id="user-content-functions-to-create-an-xml-document" class="anchor" aria-hidden="true" href="#functions-to-create-an-xml-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions to create an XML document</h5>
<div class="highlight highlight-source-julia"><pre>xdoc <span class="pl-k">=</span> <span class="pl-c1">XMLDocument</span>()           <span class="pl-c"><span class="pl-c">#</span> create an empty XML document</span>

e <span class="pl-k">=</span> <span class="pl-c1">new_element</span>(name)          <span class="pl-c"><span class="pl-c">#</span> create a new XML element</span>
                               <span class="pl-c"><span class="pl-c">#</span> this does not attach e to a tree</span>

t <span class="pl-k">=</span> <span class="pl-c1">new_textnode</span>(content)      <span class="pl-c"><span class="pl-c">#</span> create a new text node</span>
                               <span class="pl-c"><span class="pl-c">#</span> this does not attach t to a tree</span>

<span class="pl-c1">set_root</span>(xdoc, e)              <span class="pl-c"><span class="pl-c">#</span> set element e as the root of xdoc</span>
<span class="pl-c1">add_child</span>(parent, x)           <span class="pl-c"><span class="pl-c">#</span> add x as a child of a parent element</span>

e <span class="pl-k">=</span> <span class="pl-c1">create_root</span>(xdoc, name)    <span class="pl-c"><span class="pl-c">#</span> create a root element and set it as root</span>
                               <span class="pl-c"><span class="pl-c">#</span> equiv. to new_element + set_root</span>

e <span class="pl-k">=</span> <span class="pl-c1">new_child</span>(parent, name)    <span class="pl-c"><span class="pl-c">#</span> create a new element and add it as a child</span>
                               <span class="pl-c"><span class="pl-c">#</span> equiv. to new_element + add_child</span>

<span class="pl-c1">add_text</span>(e, text)              <span class="pl-c"><span class="pl-c">#</span> add text content to an element</span>
                               <span class="pl-c"><span class="pl-c">#</span> equiv. to new_textnode + add_child</span>

<span class="pl-c1">set_content</span>(e, text)           <span class="pl-c"><span class="pl-c">#</span> replace text content of an element</span>

<span class="pl-c1">add_cdata</span>(xdoc, e, text)       <span class="pl-c"><span class="pl-c">#</span> add cdata content to an element</span>
                               <span class="pl-c"><span class="pl-c">#</span> equiv. to new_cdatanode + add_child</span>

<span class="pl-c1">set_attribute</span>(e, name, value)  <span class="pl-c"><span class="pl-c">#</span> set an attribute of an element</span>
                               <span class="pl-c"><span class="pl-c">#</span> this returns the added attribute</span>
                               <span class="pl-c"><span class="pl-c">#</span> as an instance of XMLAttr</span>

<span class="pl-c1">set_attributes</span>(e, attrs)       <span class="pl-c"><span class="pl-c">#</span> set multiple attributes in one call</span>
                               <span class="pl-c"><span class="pl-c">#</span> attrs can be a dictionary or</span>
                               <span class="pl-c"><span class="pl-c">#</span> a list of pairs as (name, value)</span>

<span class="pl-c"><span class="pl-c">#</span> one can also use keyword arguments to set attributes to an element</span>
<span class="pl-c1">set_attributes</span>(e, key1<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>val1<span class="pl-pds">"</span></span>, key2<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>val2<span class="pl-pds">"</span></span>, <span class="pl-k">...</span>)</pre></div>
<h5><a id="user-content-functions-to-work-with-a-document" class="anchor" aria-hidden="true" href="#functions-to-work-with-a-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions to work with a document</h5>
<div class="highlight highlight-source-julia"><pre>xdoc <span class="pl-k">=</span> <span class="pl-c1">parse_file</span>(filename)  <span class="pl-c"><span class="pl-c">#</span> parse an XML file</span>
xdoc <span class="pl-k">=</span> <span class="pl-c1">parse_file</span>(filename,  <span class="pl-c"><span class="pl-c">#</span> parse an XML file with a specified encoding and parser options,</span>
         encoding, options)  <span class="pl-c"><span class="pl-c">#</span> see http://xmlsoft.org/html/libxml-parser.html#xmlReadFile</span>
                             <span class="pl-c"><span class="pl-c">#</span> and http://xmlsoft.org/html/libxml-parser.html#xmlParserOption</span>
xdoc <span class="pl-k">=</span> <span class="pl-c1">parse_string</span>(str)     <span class="pl-c"><span class="pl-c">#</span> parse an XML doc from a string</span>
<span class="pl-c1">save_file</span>(xdoc, filename)    <span class="pl-c"><span class="pl-c">#</span> save xdoc to an XML file</span>

<span class="pl-c1">string</span>(xdoc)                 <span class="pl-c"><span class="pl-c">#</span> formatted XML doc to a string</span>
<span class="pl-c1">show</span>(io, xdoc)               <span class="pl-c"><span class="pl-c">#</span> output formatted XML document</span></pre></div>
</article></div>