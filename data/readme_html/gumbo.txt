<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-gumbojl" class="anchor" aria-hidden="true" href="#gumbojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gumbo.jl</h1>
<p><a href="https://travis-ci.org/JuliaWeb/Gumbo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/01e317d903bf9e7fb7b506ee604d7e7acfe6042f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f47756d626f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/Gumbo.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/porterjamesj/gumbo-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a15f5a7b054fc4f50a909d4a3d498d2f37d83798/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3579356868346c7630776777346931323f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/5y5hh4lv0wgw4i12?svg=true" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=Gumbo" rel="nofollow"><img src="https://camo.githubusercontent.com/49f04c152671337a097a5a1d616c428c290a4078/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47756d626f5f302e332e737667" alt="Gumbo" data-canonical-src="http://pkg.julialang.org/badges/Gumbo_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gumbo" rel="nofollow"><img src="https://camo.githubusercontent.com/7229d21cf32eaf6c0df4db3fa027dd19bafb6621/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47756d626f5f302e342e737667" alt="Gumbo" data-canonical-src="http://pkg.julialang.org/badges/Gumbo_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gumbo" rel="nofollow"><img src="https://camo.githubusercontent.com/fedd098793326f79ea42c42641dd575613cada1d/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47756d626f5f302e352e737667" alt="Gumbo" data-canonical-src="http://pkg.julialang.org/badges/Gumbo_0.5.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gumbo" rel="nofollow"><img src="https://camo.githubusercontent.com/3d2fbb5692f9b9e6238f415b2a7d987fa2a0cde5/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47756d626f5f302e362e737667" alt="Gumbo" data-canonical-src="http://pkg.julialang.org/badges/Gumbo_0.6.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gumbo" rel="nofollow"><img src="https://camo.githubusercontent.com/03960c5358c597e355d8eec17944cf8fc715e8f7/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47756d626f5f302e372e737667" alt="Gumbo" data-canonical-src="http://pkg.julialang.org/badges/Gumbo_0.7.svg" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaWeb/Gumbo.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6548ac95f0887e4903dd780ee634ea0a53c664a0/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f47756d626f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/Gumbo.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Gumbo.jl is a Julia wrapper around
<a href="https://github.com/google/gumbo-parser">Google's gumbo library</a> for
parsing HTML.</p>
<p>Getting started is very easy:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Gumbo

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)
HTML Document<span class="pl-k">:</span>
<span class="pl-k">&lt;</span><span class="pl-k">!</span>DOCTYPE <span class="pl-k">&gt;</span>
HTMLElement{<span class="pl-c1">:HTML</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>HTML<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>head<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>head<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>body<span class="pl-k">&gt;</span>
    <span class="pl-k">&lt;</span>h1<span class="pl-k">&gt;</span>
       Hello, world!
    <span class="pl-k">&lt;</span><span class="pl-k">/</span>h1<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span><span class="pl-k">/</span>body<span class="pl-k">&gt;</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span>HTML<span class="pl-k">&gt;</span></pre></div>
<p>Read on for further documentation.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Gumbo<span class="pl-pds">"</span></span>)</pre></div>
<p>or activate <code>Pkg</code> mode in the REPL by typing <code>]</code>, and then:</p>
<pre><code>add Gumbo
</code></pre>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic usage</h2>
<p>The workhorse is the <code>parsehtml</code> function, which takes a single
argument, a valid UTF8 string, which is interpreted as HTML data to be
parsed, e.g.:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)</pre></div>
<p>Parsing an HTML file named <code>filename</code>can be done using:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">parsehtml</span>(<span class="pl-c1">read</span>(filename, String))</pre></div>
<p>The result of a call to <code>parsehtml</code> is an <code>HTMLDocument</code>, a type which
has two fields: <code>doctype</code>, which is the doctype of the parsed document
(this will be the empty string if no doctype is provided), and <code>root</code>,
which is a reference to the <code>HTMLElement</code> that is the root of the
document.</p>
<p>Note that gumbo is a very permissive HTML parser, designed to
gracefully handle the insanity that passes for HTML out on the wild,
wild web. It will return a valid HTML document for <em>any</em> input, doing
all sorts of algorithmic gymnastics to twist what you give it into
valid HTML.</p>
<p>If you want an HTML validator, this is probably not your library. That
said, <code>parsehtml</code> does take an optional <code>Bool</code> keyword argument,
<code>strict</code> which, if <code>true</code>, causes an <code>InvalidHTMLError</code> to be thrown
if the call to the gumbo C library produces any errors.</p>
<h2><a id="user-content-html-types" class="anchor" aria-hidden="true" href="#html-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML types</h2>
<p>This library defines a number of types for representing HTML.</p>
<h3><a id="user-content-htmldocument" class="anchor" aria-hidden="true" href="#htmldocument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>HTMLDocument</code></h3>
<p><code>HTMlDocument</code> is what is returned from a call to <code>parsehtml</code> it has a
<code>doctype</code> field, which contains the doctype of the parsed document,
and a <code>root</code> field, which is a reference to the root of the document.</p>
<h3><a id="user-content-htmlnodes" class="anchor" aria-hidden="true" href="#htmlnodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>HTMLNode</code>s</h3>
<p>A document contains a tree of HTML Nodes, which are represented as
children of the <code>HTMLNode</code> abstract type. The first of these is
<code>HTMLElement</code>.</p>
<h3><a id="user-content-htmlelement" class="anchor" aria-hidden="true" href="#htmlelement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>HTMLElement</code></h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> HTMLElement{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">HTMLNode</span>
    children<span class="pl-k">::</span><span class="pl-c1">Vector{HTMLNode}</span>
    parent<span class="pl-k">::</span><span class="pl-c1">HTMLNode</span>
    attributes<span class="pl-k">::</span><span class="pl-c1">Dict{String, String}</span>
<span class="pl-k">end</span></pre></div>
<p><code>HTMLElement</code> is probably the most interesting and frequently used
type. An <code>HTMLElement</code> is parameterized by a symbol representing its
tag. So an <code>HTMLElement{:a}</code> is a different type from an
<code>HTMLElement{:body}</code>, etc. An empty <code>HTMLElement</code> of a given tag can be
constructed as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HTMLElement</span>(<span class="pl-c1">:div</span>)
HTMLElement{<span class="pl-c1">:div</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>div<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>div<span class="pl-k">&gt;</span></pre></div>
<p><code>HTMLElement</code>s have a <code>parent</code> field, which refers to another
<code>HTMLNode</code>. <code>parent</code> will always be an <code>HTMLElement</code>, unless the
element has no parent (as is the case with the root of a document), in
which case it will be a <code>NullNode</code>, a special type of <code>HTMLNode</code> which
exists for just this purpose. Empty <code>HTMLElement</code>s constructed as in
the example above will also have a <code>NullNode</code> for a parent.</p>
<p><code>HTMLElement</code>s also have <code>children</code>, which is a vector of
<code>HTMLElement</code> containing the children of this element, and
<code>attributes</code>, which is a <code>Dict</code> mapping attribute names to values.</p>
<p><code>HTMLElement</code>s implement <code>getindex</code>, <code>setindex!</code>, and <code>push!</code>;
indexing into or pushing onto an <code>HTMLElement</code> operates on its
children array.</p>
<p>There are a number of convenience methods for working with <code>HTMLElement</code>s:</p>
<ul>
<li>
<p><code>tag(elem)</code>
get the tag of this element as a symbol</p>
</li>
<li>
<p><code>attrs(elem)</code>
return the attributes dict of this element</p>
</li>
<li>
<p><code>children(elem)</code>
return the children array of this element</p>
</li>
<li>
<p><code>getattr(elem, name)</code>
get the value of attribute <code>name</code> or raise a <code>KeyError</code>. Also
supports being called with a default value (<code>getattr(elem, name, default)</code>) or function (<code>getattr(f, elem, name)</code>).</p>
</li>
<li>
<p><code>setattr!(elem, name, value)</code>
set the value of attribute <code>name</code> to <code>value</code></p>
</li>
</ul>
<h3><a id="user-content-htmltext" class="anchor" aria-hidden="true" href="#htmltext"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>HTMLText</code></h3>
<div class="highlight highlight-source-julia"><pre>type HTMLText <span class="pl-k">&lt;:</span> <span class="pl-c1">HTMLNode</span>
    parent<span class="pl-k">::</span><span class="pl-c1">HTMLNode</span>
    text<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span></pre></div>
<p>Represents text appearing in an HTML document. For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> doc <span class="pl-k">=</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)
HTML Document<span class="pl-k">:</span>
<span class="pl-k">&lt;</span><span class="pl-k">!</span>DOCTYPE <span class="pl-k">&gt;</span>
HTMLElement{<span class="pl-c1">:HTML</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>HTML<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>head<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>head<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>body<span class="pl-k">&gt;</span>
    <span class="pl-k">&lt;</span>h1<span class="pl-k">&gt;</span>
       Hello, world!
    <span class="pl-k">&lt;</span><span class="pl-k">/</span>h1<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span><span class="pl-k">/</span>body<span class="pl-k">&gt;</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span>HTML<span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> doc<span class="pl-k">.</span>root[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]
HTML Text<span class="pl-k">:</span>  Hello, world!</pre></div>
<p>This type is quite simple, just a reference to its parent and the
actual text it represents (this is also accessible by a <code>text</code>
function). You can construct <code>HTMLText</code> instances as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HTMLText</span>(<span class="pl-s"><span class="pl-pds">"</span>Example text<span class="pl-pds">"</span></span>)
HTML Text<span class="pl-k">:</span> Example text</pre></div>
<p>Just as with <code>HTMLElement</code>s, the parent of an instance so constructed
will be a <code>NullNode</code>.</p>
<h2><a id="user-content-tree-traversal" class="anchor" aria-hidden="true" href="#tree-traversal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tree traversal</h2>
<p>Use the iterators defined in
<a href="https://github.com/Keno/AbstractTrees.jl/">AbstractTrees.jl</a>, e.g.:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AbstractTrees

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Gumbo

julia<span class="pl-k">&gt;</span> doc <span class="pl-k">=</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">                     &lt;html&gt;</span>
<span class="pl-s">                       &lt;body&gt;</span>
<span class="pl-s">                         &lt;div&gt;</span>
<span class="pl-s">                           &lt;p&gt;&lt;/p&gt; &lt;a&gt;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;</span>
<span class="pl-s">                         &lt;/div&gt;</span>
<span class="pl-s">                         &lt;div&gt;</span>
<span class="pl-s">                            &lt;span&gt;&lt;/span&gt;</span>
<span class="pl-s">                         &lt;/div&gt;</span>
<span class="pl-s">                        &lt;/body&gt;</span>
<span class="pl-s">                     &lt;/html&gt;</span>
<span class="pl-s">                     <span class="pl-pds">"""</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">PreOrderDFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
HTML
head
body
div
p
a
p
div
span

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">PostOrderDFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
head
p
a
p
div
span
div
body
HTML

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">StatelessBFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
HTML
head
body
div
div
p
a
p
span

julia<span class="pl-k">&gt;</span></pre></div>
<h2><a id="user-content-todos" class="anchor" aria-hidden="true" href="#todos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODOS</h2>
<ul>
<li>support CDATA</li>
<li>support comments</li>
</ul>
</article></div>