<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gumbojl" class="anchor" aria-hidden="true" href="#gumbojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gumbo.jl</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Gumbo/mllB2" rel="nofollow"><img src="https://camo.githubusercontent.com/faf4b0735fe4829e218446fbc3a259fac5d2043785446be964257618a36050cd/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f47756d626f2f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Gumbo/version.svg" style="max-width: 100%;"></a> <a href="https://travis-ci.org/JuliaWeb/Gumbo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c025f1362900be2501cddb3a740e8ecb89989b2ad5046e049ff94a81bd5a30c1/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f47756d626f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/Gumbo.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="http://codecov.io/github/JuliaWeb/Gumbo.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37a08964e68699754de5f51d0e1096f95103bdf703aec891ccb9b4cd97db55f7/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f47756d626f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/Gumbo.jl/coverage.svg?branch=master" style="max-width: 100%;"></a> <a href="https://juliahub.com/ui/Packages/Gumbo/mllB2" rel="nofollow"><img src="https://camo.githubusercontent.com/e1e9e945e4055201dd2182484a9025d88146976fe445d458de76bf2dd1a4f0ff/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f47756d626f2f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Gumbo/pkgeval.svg" style="max-width: 100%;"></a> <a href="https://juliahub.com/ui/Packages/Gumbo/mllB2?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/716a445f78f5dd871a32d14045fd4c907f227f07944817058c65a367844f67f9/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f47756d626f2f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Gumbo/deps.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Gumbo.jl is a Julia wrapper around
<a href="https://github.com/google/gumbo-parser">Google's gumbo library</a> for
parsing HTML.</p>
<p dir="auto">Getting started is very easy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Gumbo

julia&gt; parsehtml(&quot;&lt;h1&gt; Hello, world! &lt;/h1&gt;&quot;)
HTML Document:
&lt;!DOCTYPE &gt;
HTMLElement{:HTML}:
&lt;HTML&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;
       Hello, world!
    &lt;/h1&gt;
  &lt;/body&gt;
&lt;/HTML&gt;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Gumbo

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)
HTML Document<span class="pl-k">:</span>
<span class="pl-k">&lt;</span><span class="pl-k">!</span>DOCTYPE <span class="pl-k">&gt;</span>
HTMLElement{<span class="pl-c1">:HTML</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>HTML<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>head<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>head<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>body<span class="pl-k">&gt;</span>
    <span class="pl-k">&lt;</span>h1<span class="pl-k">&gt;</span>
       Hello, world!
    <span class="pl-k">&lt;</span><span class="pl-k">/</span>h1<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span><span class="pl-k">/</span>body<span class="pl-k">&gt;</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span>HTML<span class="pl-k">&gt;</span></pre></div>
<p dir="auto">Read on for further documentation.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Gumbo&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Gumbo<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or activate <code>Pkg</code> mode in the REPL by typing <code>]</code>, and then:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add Gumbo"><pre class="notranslate"><code>add Gumbo
</code></pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto">The workhorse is the <code>parsehtml</code> function, which takes a single
argument, a valid UTF8 string, which is interpreted as HTML data to be
parsed, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="parsehtml(&quot;&lt;h1&gt; Hello, world! &lt;/h1&gt;&quot;)"><pre><span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Parsing an HTML file named <code>filename</code>can be done using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; parsehtml(read(filename, String))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">parsehtml</span>(<span class="pl-c1">read</span>(filename, String))</pre></div>
<p dir="auto">The result of a call to <code>parsehtml</code> is an <code>HTMLDocument</code>, a type which
has two fields: <code>doctype</code>, which is the doctype of the parsed document
(this will be the empty string if no doctype is provided), and <code>root</code>,
which is a reference to the <code>HTMLElement</code> that is the root of the
document.</p>
<p dir="auto">Note that gumbo is a very permissive HTML parser, designed to
gracefully handle the insanity that passes for HTML out on the wild,
wild web. It will return a valid HTML document for <em>any</em> input, doing
all sorts of algorithmic gymnastics to twist what you give it into
valid HTML.</p>
<p dir="auto">If you want an HTML validator, this is probably not your library. That
said, <code>parsehtml</code> does take an optional <code>Bool</code> keyword argument,
<code>strict</code> which, if <code>true</code>, causes an <code>InvalidHTMLError</code> to be thrown
if the call to the gumbo C library produces any errors.</p>
<h2 dir="auto"><a id="user-content-html-types" class="anchor" aria-hidden="true" href="#html-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HTML types</h2>
<p dir="auto">This library defines a number of types for representing HTML.</p>
<h3 dir="auto"><a id="user-content-htmldocument" class="anchor" aria-hidden="true" href="#htmldocument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>HTMLDocument</code></h3>
<p dir="auto"><code>HTMlDocument</code> is what is returned from a call to <code>parsehtml</code> it has a
<code>doctype</code> field, which contains the doctype of the parsed document,
and a <code>root</code> field, which is a reference to the root of the document.</p>
<h3 dir="auto"><a id="user-content-htmlnodes" class="anchor" aria-hidden="true" href="#htmlnodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>HTMLNode</code>s</h3>
<p dir="auto">A document contains a tree of HTML Nodes, which are represented as
children of the <code>HTMLNode</code> abstract type. The first of these is
<code>HTMLElement</code>.</p>
<h3 dir="auto"><a id="user-content-htmlelement" class="anchor" aria-hidden="true" href="#htmlelement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>HTMLElement</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct HTMLElement{T} &lt;: HTMLNode
    children::Vector{HTMLNode}
    parent::HTMLNode
    attributes::Dict{String, String}
end"><pre><span class="pl-k">mutable struct</span> HTMLElement{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">HTMLNode</span>
    children<span class="pl-k">::</span><span class="pl-c1">Vector{HTMLNode}</span>
    parent<span class="pl-k">::</span><span class="pl-c1">HTMLNode</span>
    attributes<span class="pl-k">::</span><span class="pl-c1">Dict{String, String}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>HTMLElement</code> is probably the most interesting and frequently used
type. An <code>HTMLElement</code> is parameterized by a symbol representing its
tag. So an <code>HTMLElement{:a}</code> is a different type from an
<code>HTMLElement{:body}</code>, etc. An empty <code>HTMLElement</code> of a given tag can be
constructed as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; HTMLElement(:div)
HTMLElement{:div}:
&lt;div&gt;&lt;/div&gt;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HTMLElement</span>(<span class="pl-c1">:div</span>)
HTMLElement{<span class="pl-c1">:div</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>div<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>div<span class="pl-k">&gt;</span></pre></div>
<p dir="auto"><code>HTMLElement</code>s have a <code>parent</code> field, which refers to another
<code>HTMLNode</code>. <code>parent</code> will always be an <code>HTMLElement</code>, unless the
element has no parent (as is the case with the root of a document), in
which case it will be a <code>NullNode</code>, a special type of <code>HTMLNode</code> which
exists for just this purpose. Empty <code>HTMLElement</code>s constructed as in
the example above will also have a <code>NullNode</code> for a parent.</p>
<p dir="auto"><code>HTMLElement</code>s also have <code>children</code>, which is a vector of
<code>HTMLElement</code> containing the children of this element, and
<code>attributes</code>, which is a <code>Dict</code> mapping attribute names to values.</p>
<p dir="auto"><code>HTMLElement</code>s implement <code>getindex</code>, <code>setindex!</code>, and <code>push!</code>;
indexing into or pushing onto an <code>HTMLElement</code> operates on its
children array.</p>
<p dir="auto">There are a number of convenience methods for working with <code>HTMLElement</code>s:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>tag(elem)</code>
get the tag of this element as a symbol</p>
</li>
<li>
<p dir="auto"><code>attrs(elem)</code>
return the attributes dict of this element</p>
</li>
<li>
<p dir="auto"><code>children(elem)</code>
return the children array of this element</p>
</li>
<li>
<p dir="auto"><code>getattr(elem, name)</code>
get the value of attribute <code>name</code> or raise a <code>KeyError</code>. Also
supports being called with a default value (<code>getattr(elem, name, default)</code>) or function (<code>getattr(f, elem, name)</code>).</p>
</li>
<li>
<p dir="auto"><code>setattr!(elem, name, value)</code>
set the value of attribute <code>name</code> to <code>value</code></p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-htmltext" class="anchor" aria-hidden="true" href="#htmltext"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>HTMLText</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type HTMLText &lt;: HTMLNode
    parent::HTMLNode
    text::String
end"><pre>type HTMLText <span class="pl-k">&lt;:</span> <span class="pl-c1">HTMLNode</span>
    parent<span class="pl-k">::</span><span class="pl-c1">HTMLNode</span>
    text<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Represents text appearing in an HTML document. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; doc = parsehtml(&quot;&lt;h1&gt; Hello, world! &lt;/h1&gt;&quot;)
HTML Document:
&lt;!DOCTYPE &gt;
HTMLElement{:HTML}:
&lt;HTML&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;
       Hello, world!
    &lt;/h1&gt;
  &lt;/body&gt;
&lt;/HTML&gt;

julia&gt; doc.root[2][1][1]
HTML Text:  Hello, world!"><pre>julia<span class="pl-k">&gt;</span> doc <span class="pl-k">=</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt; Hello, world! &lt;/h1&gt;<span class="pl-pds">"</span></span>)
HTML Document<span class="pl-k">:</span>
<span class="pl-k">&lt;</span><span class="pl-k">!</span>DOCTYPE <span class="pl-k">&gt;</span>
HTMLElement{<span class="pl-c1">:HTML</span>}<span class="pl-k">:</span>
<span class="pl-k">&lt;</span>HTML<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>head<span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>head<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span>body<span class="pl-k">&gt;</span>
    <span class="pl-k">&lt;</span>h1<span class="pl-k">&gt;</span>
       Hello, world!
    <span class="pl-k">&lt;</span><span class="pl-k">/</span>h1<span class="pl-k">&gt;</span>
  <span class="pl-k">&lt;</span><span class="pl-k">/</span>body<span class="pl-k">&gt;</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span>HTML<span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> doc<span class="pl-k">.</span>root[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]
HTML Text<span class="pl-k">:</span>  Hello, world!</pre></div>
<p dir="auto">This type is quite simple, just a reference to its parent and the
actual text it represents (this is also accessible by a <code>text</code>
function). You can construct <code>HTMLText</code> instances as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; HTMLText(&quot;Example text&quot;)
HTML Text: Example text"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HTMLText</span>(<span class="pl-s"><span class="pl-pds">"</span>Example text<span class="pl-pds">"</span></span>)
HTML Text<span class="pl-k">:</span> Example text</pre></div>
<p dir="auto">Just as with <code>HTMLElement</code>s, the parent of an instance so constructed
will be a <code>NullNode</code>.</p>
<h2 dir="auto"><a id="user-content-tree-traversal" class="anchor" aria-hidden="true" href="#tree-traversal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tree traversal</h2>
<p dir="auto">Use the iterators defined in
<a href="https://github.com/Keno/AbstractTrees.jl/">AbstractTrees.jl</a>, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using AbstractTrees

julia&gt; using Gumbo

julia&gt; doc = parsehtml(&quot;&quot;&quot;
                     &lt;html&gt;
                       &lt;body&gt;
                         &lt;div&gt;
                           &lt;p&gt;&lt;/p&gt; &lt;a&gt;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;
                         &lt;/div&gt;
                         &lt;div&gt;
                            &lt;span&gt;&lt;/span&gt;
                         &lt;/div&gt;
                        &lt;/body&gt;
                     &lt;/html&gt;
                     &quot;&quot;&quot;);

julia&gt; for elem in PreOrderDFS(doc.root) println(tag(elem)) end
HTML
head
body
div
p
a
p
div
span

julia&gt; for elem in PostOrderDFS(doc.root) println(tag(elem)) end
head
p
a
p
div
span
div
body
HTML

julia&gt; for elem in StatelessBFS(doc.root) println(tag(elem)) end
HTML
head
body
div
div
p
a
p
span

julia&gt;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AbstractTrees

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Gumbo

julia<span class="pl-k">&gt;</span> doc <span class="pl-k">=</span> <span class="pl-c1">parsehtml</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">                     &lt;html&gt;</span>
<span class="pl-s">                       &lt;body&gt;</span>
<span class="pl-s">                         &lt;div&gt;</span>
<span class="pl-s">                           &lt;p&gt;&lt;/p&gt; &lt;a&gt;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;</span>
<span class="pl-s">                         &lt;/div&gt;</span>
<span class="pl-s">                         &lt;div&gt;</span>
<span class="pl-s">                            &lt;span&gt;&lt;/span&gt;</span>
<span class="pl-s">                         &lt;/div&gt;</span>
<span class="pl-s">                        &lt;/body&gt;</span>
<span class="pl-s">                     &lt;/html&gt;</span>
<span class="pl-s">                     <span class="pl-pds">"""</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">PreOrderDFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
HTML
head
body
div
p
a
p
div
span

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">PostOrderDFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
head
p
a
p
div
span
div
body
HTML

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> elem <span class="pl-k">in</span> <span class="pl-c1">StatelessBFS</span>(doc<span class="pl-k">.</span>root) <span class="pl-c1">println</span>(<span class="pl-c1">tag</span>(elem)) <span class="pl-k">end</span>
HTML
head
body
div
div
p
a
p
span

julia<span class="pl-k">&gt;</span></pre></div>
<h2 dir="auto"><a id="user-content-todos" class="anchor" aria-hidden="true" href="#todos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODOS</h2>
<ul dir="auto">
<li>support CDATA</li>
<li>support comments</li>
</ul>
</article></div>