<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-voronoidelaunayjl" class="anchor" aria-hidden="true" href="#voronoidelaunayjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VoronoiDelaunay.jl</h1>
<p dir="auto">Fast, robust construction of 2D Delaunay and Voronoi tessellations on generic point types.
Implementation follows algorithms described in the <a href="http://arxiv.org/abs/0901.4107" rel="nofollow">Arepo paper</a>
and used (for e.g.) in the <a href="http://www.illustris-project.org/" rel="nofollow">Illustris Simulation</a>. License: MIT. Bug reports welcome!</p>
<h2 dir="auto"><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How does it work?</h2>
<p dir="auto">Incrementally insert points to a valid Delaunay tessallation, while restoring Delaunayhood by flipping triangles.
Point location (i.e. which triangle should it divide into three) is accelerated by spatial sorting.
Spatial sorting allows to add points which are close in space thus walking the tesselation is fast.
Initial tessalletion includes two triangles built by 4 points which are outside of the allowed region for users.
These "external" triangles are skipped when iterating over Delaunay/Voronoy edges. Fast and robust predicates are
provided by the <a href="https://github.com/skariel/GeometricalPredicates.jl">GeometricalPredicates</a> package. Benchmarks suggest this package is a bit faster than CGAL, see <a href="https://gist.github.com/skariel/3d2018f9341a058e00fc">here</a> benchmark of an older version which is also a bit slower than current.</p>
<h2 dir="auto"><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current limitations</h2>
<ul dir="auto">
<li>Due to numerical restrictions the point coordinates must be within <code>min_coord &lt;= x &lt;= max_coord</code> where <code>min_coord=1.0+eps(Float64)</code> and <code>max_coord=2.0-2eps(Float64)</code>. Note this is a bit different than what is required by the  <code>GeometricalPredicates</code> package.</li>
<li>The following features are not implemented, but are in the TODO list; In order of priority: centroid tessellations (Lloy's method), Weighted generators (both power and sum), bounding, maybe restricting. Hierarchal tessellations for fast random locatings; Distributed tessellation construction. 3D. Order of priority may change of course :)</li>
</ul>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use?</h2>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add VoronoiDelaunay"><pre>]add VoronoiDelaunay</pre></div>
<h3 dir="auto"><a id="user-content-building-a-tessellation" class="anchor" aria-hidden="true" href="#building-a-tessellation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building a tessellation</h3>
<p dir="auto">Define and push individual points like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VoronoiDelaunay
tess = DelaunayTessellation()
push!(tess, Point(1.5, 1.5))"><pre><span class="pl-k">using</span> VoronoiDelaunay
tess <span class="pl-k">=</span> <span class="pl-c1">DelaunayTessellation</span>()
<span class="pl-c1">push!</span>(tess, <span class="pl-c1">Point</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>))</pre></div>
<p dir="auto">creation of points is explained in the <a href="https://github.com/skariel/GeometricalPredicates.jl">GeometricalPredicates</a> package documentation.</p>
<p dir="auto">Pushing arrays of points is more efficient:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="width = max_coord - min_coord
a = Point2D[Point(min_coord + rand() * width, min_coord + rand() * width) for i in 1:100]
push!(tess, a)"><pre>width <span class="pl-k">=</span> max_coord <span class="pl-k">-</span> min_coord
a <span class="pl-k">=</span> Point2D[<span class="pl-c1">Point</span>(min_coord <span class="pl-k">+</span> <span class="pl-c1">rand</span>() <span class="pl-k">*</span> width, min_coord <span class="pl-k">+</span> <span class="pl-c1">rand</span>() <span class="pl-k">*</span> width) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]
<span class="pl-c1">push!</span>(tess, a)</pre></div>
<p dir="auto">notice care taken for correct range of coordinates. <code>min_coord</code> and <code>max_coord</code> are defined in the package. We can further optimize by giving a <code>sizehint</code> at time of construction:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tess = DelaunayTessellation(100)"><pre>tess <span class="pl-k">=</span> <span class="pl-c1">DelaunayTessellation</span>(<span class="pl-c1">100</span>)</pre></div>
<p dir="auto">or at any later point:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sizehint(tess, 100)"><pre><span class="pl-c1">sizehint</span>(tess, <span class="pl-c1">100</span>)</pre></div>
<h3 dir="auto"><a id="user-content-iterating" class="anchor" aria-hidden="true" href="#iterating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iterating</h3>
<p dir="auto">Delaunay tesselations need at least 3 points to be well defined. Voronoi need 4. Remember this when iterating or plotting.
Iterating over Delaunay edges is done like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 0
for edge in delaunayedges(tess)
    i += 1
    # or, do something more useful :)
end"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">for</span> edge <span class="pl-k">in</span> <span class="pl-c1">delaunayedges</span>(tess)
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span> or, do something more useful :)</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">a <code>DelaunayEdge</code> contains two points a and b, they can be accessed with <code>geta(edge)</code> and <code>getb(edge)</code>.
Iterating over Voronoi edges is similar:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 0
for edge in voronoiedges(tess)
    i += 1
    # or, do something more useful :)
end"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">for</span> edge <span class="pl-k">in</span> <span class="pl-c1">voronoiedges</span>(tess)
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span> or, do something more useful :)</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">a <code>VoronoiEdge</code> is a bit different than a <code>DelaunayEdge</code>: here <code>a</code> and <code>b</code> are <code>Point2D</code> and not the generators, as they have different coordinates. To get the generators use <code>getgena(edge)</code> and <code>getgenb(edge)</code> these give the relevant <code>AbstractPoint2D</code> which were used to create the edge.</p>
<p dir="auto">If the generators are not needed when iterating over the Voronoi edges (e.g. when plotting) then a more efficient way to iterate is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 0
e = Nothing
for edge in voronoiedgeswithoutgenerators(tess)
    i += 1
    # do something more useful here :)
end"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
e <span class="pl-k">=</span> Nothing
<span class="pl-k">for</span> edge <span class="pl-k">in</span> <span class="pl-c1">voronoiedgeswithoutgenerators</span>(tess)
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span> do something more useful here :)</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">here <code>edge</code> is a <code>VoronoiEdgeWithoutGenerators</code>, the points <code>a</code> and <code>b</code> can be accessed as usual.</p>
<p dir="auto">Iterating over Delaunay triangles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 0
for delaunaytriangle in tess
    i += 1
    # or, do something more useful :)
end"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">for</span> delaunaytriangle <span class="pl-k">in</span> tess
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span> or, do something more useful :)</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>delaunaytriangle</code> here is of type <code>DelaunayTriangle</code> which is a subtype of <code>AbstractNegativelyOrientedTriangle</code>. To get the generators of this triangle use the <code>geta</code>, <code>getb</code>, and <code>getc</code> methods. You can do all other operations and predicate tests on this triangle as explained in <a href="https://github.com/skariel/GeometricalPredicates.jl">GeometricalPredicates</a></p>
<h3 dir="auto"><a id="user-content-navigating" class="anchor" aria-hidden="true" href="#navigating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Navigating</h3>
<p dir="auto">Locating a point, i.e. finding the triangle it is inside:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t = locate(tess, Point(1.2, 1.3))"><pre>t <span class="pl-k">=</span> <span class="pl-c1">locate</span>(tess, <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">1.3</span>))</pre></div>
<p dir="auto">if the point is outside of the tessellation then <code>isexternal(t) == true</code> holds. This is good for type stability, at least better than returning a <code>Nothing</code>. It is assumed that the point we want to locate is actually in the allowed points region. Performance is best when locating points close to each other (this is also why spatial sorting is used). Future versions may implement a hierarchal approach for fast random locations.</p>
<p dir="auto">Navigating from a triangle to its neighbours is done like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t = movea(tess, t)  # move to the direction infront of generator a
t = moveb(tess, t)  # move to the direction infront of generator b
t = movec(tess, t)  # move to the direction infront of generator c"><pre>t <span class="pl-k">=</span> <span class="pl-c1">movea</span>(tess, t)  <span class="pl-c"><span class="pl-c">#</span> move to the direction infront of generator a</span>
t <span class="pl-k">=</span> <span class="pl-c1">moveb</span>(tess, t)  <span class="pl-c"><span class="pl-c">#</span> move to the direction infront of generator b</span>
t <span class="pl-k">=</span> <span class="pl-c1">movec</span>(tess, t)  <span class="pl-c"><span class="pl-c">#</span> move to the direction infront of generator c</span></pre></div>
<h3 dir="auto"><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h3>
<p dir="auto">The following retrieves a couple of vectors ready to plot Voronoi edges:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x, y = getplotxy(voronoiedges(tess))"><pre>x, y <span class="pl-k">=</span> <span class="pl-c1">getplotxy</span>(<span class="pl-c1">voronoiedges</span>(tess))</pre></div>
<p dir="auto">and for Delaunay edges:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x, y = getplotxy(delaunayedges(tess))"><pre>x, y <span class="pl-k">=</span> <span class="pl-c1">getplotxy</span>(<span class="pl-c1">delaunayedges</span>(tess))</pre></div>
<p dir="auto">Now plotting can be done with your favorite plotting package, for e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Gadfly
plot(x=x, y=y, Geom.path)"><pre><span class="pl-k">using</span> Gadfly
<span class="pl-c1">plot</span>(x<span class="pl-k">=</span>x, y<span class="pl-k">=</span>y, Geom<span class="pl-k">.</span>path)</pre></div>
<p dir="auto">To make a nice looking plot remember to limit the axes and aspect ratio. For e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_default_plot_size(15cm, 15cm)
plot(x=x, y=y, Geom.path, Scale.x_continuous(minvalue=1.0, maxvalue=2.0), Scale.y_continuous(minvalue=1.0, maxvalue=2.0))"><pre><span class="pl-c1">set_default_plot_size</span>(<span class="pl-c1">15</span>cm, <span class="pl-c1">15</span>cm)
<span class="pl-c1">plot</span>(x<span class="pl-k">=</span>x, y<span class="pl-k">=</span>y, Geom<span class="pl-k">.</span>path, Scale<span class="pl-k">.</span><span class="pl-c1">x_continuous</span>(minvalue<span class="pl-k">=</span><span class="pl-c1">1.0</span>, maxvalue<span class="pl-k">=</span><span class="pl-c1">2.0</span>), Scale<span class="pl-k">.</span><span class="pl-c1">y_continuous</span>(minvalue<span class="pl-k">=</span><span class="pl-c1">1.0</span>, maxvalue<span class="pl-k">=</span><span class="pl-c1">2.0</span>))</pre></div>
<h3 dir="auto"><a id="user-content-from-an-image" class="anchor" aria-hidden="true" href="#from-an-image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>From an image</h3>
<p dir="auto">You can create a tesselation from an image, just like the tesselation of the
julia logo at the top of this README. This was created from a png with <code>from_file</code>
(see <code>examples/img_to_vorono.jl</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Images: imread
img = imread(&quot;julia.png&quot;)
tess = from_image(img, 25000)"><pre><span class="pl-k">import</span> Images<span class="pl-k">:</span> imread
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(<span class="pl-s"><span class="pl-pds">"</span>julia.png<span class="pl-pds">"</span></span>)
tess <span class="pl-k">=</span> <span class="pl-c1">from_image</span>(img, <span class="pl-c1">25000</span>)</pre></div>
</article></div>