<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-equate" class="anchor" aria-hidden="true" href="#equate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Equate</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/takuizum/Equate.jl/workflows/CI/badge.svg"><img src="https://github.com/takuizum/Equate.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/takuizum/Equate.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/737f03405442273af16d2b06763143aa49019cd928d6193b6430123c6216d62f/68747470733a2f2f636f6465636f762e696f2f67682f74616b75697a756d2f4571756174652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/takuizum/Equate.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/takuizum/Equate.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b966475f30a368f7b2c3793cc67f7c856902b408da78e4d8530af9de68ff63ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74616b75697a756d2f4571756174652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/takuizum/Equate.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Equate test scores under the equivalent or non-equivalent group with anchor test design.</p>
<h2 dir="auto"><a id="user-content-supported-methods" class="anchor" aria-hidden="true" href="#supported-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported methods</h2>
<ul dir="auto">
<li>
<p dir="auto">SG (Single Group design)</p>
<ul dir="auto">
<li>Linear</li>
<li>Mean</li>
<li>Equipercentile</li>
</ul>
</li>
<li>
<p dir="auto">NEAT (Non-Equivalent group design with Anchor Test design)</p>
<ul dir="auto">
<li>Tucker (Linear equating under some assumptions)</li>
<li>Braun &amp; Holland (Linear equating using synthetic population)</li>
<li>Chained Linear (also Mean)</li>
<li>Chained Equipercentile</li>
<li>Frequency Estimation (Equipercentile equating using synthetic population)</li>
</ul>
</li>
<li>
<p dir="auto">Presmoothing</p>
<ul dir="auto">
<li>Log linear smoothing with an arbitrary degree.</li>
</ul>
</li>
<li>
<p dir="auto">Kernel smoothong</p>
<ul dir="auto">
<li>Gaussian kernel is only supported now.</li>
<li>The optimal bandwidth can be estimated.</li>
</ul>
</li>
</ul>
<h1 dir="auto"><a id="user-content-example1-sg-design" class="anchor" aria-hidden="true" href="#example1-sg-design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example1: SG design.</h1>
<ol dir="auto">
<li>Prepare data set. Integer or Float vector.</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Distributions, Random
Random.seed!(1234)
X = rand(BetaBinomial(100, 4, 10), 500);
Y = rand(BetaBinomial(100, 6, 10), 500);"><pre class="notranslate"><code>using Distributions, Random
Random.seed!(1234)
X = rand(BetaBinomial(100, 4, 10), 500);
Y = rand(BetaBinomial(100, 6, 10), 500);
</code></pre></div>
<ol start="2" dir="auto">
<li>Convert the data vector to <code>FreqTab</code></li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# `data` must be Real vector
julia&gt; ftX = freqtab(X; scale = 0:1:100)
Frequency table stats.
         N :      500 
   Missing :        0 
       min :        1 
      maxs :       71 
         μ : 28.39000 
         σ : 12.68921 
  kurtosis : 0.00127 
  skewness : 0.52615 


julia&gt; ftY = freqtab(Y; scale = 0:1:100)
Frequency table stats.
         N :      500 
   Missing :        0 
       min :        6 
      maxs :       77 
         μ : 37.04000 
         σ : 13.11115 
  kurtosis : -0.44152 
  skewness : 0.22442 "><pre class="notranslate"><code># `data` must be Real vector
julia&gt; ftX = freqtab(X; scale = 0:1:100)
Frequency table stats.
         N :      500 
   Missing :        0 
       min :        1 
      maxs :       71 
         μ : 28.39000 
         σ : 12.68921 
  kurtosis : 0.00127 
  skewness : 0.52615 


julia&gt; ftY = freqtab(Y; scale = 0:1:100)
Frequency table stats.
         N :      500 
   Missing :        0 
       min :        6 
      maxs :       77 
         μ : 37.04000 
         σ : 13.11115 
  kurtosis : -0.44152 
  skewness : 0.22442 
</code></pre></div>
<ol start="3" dir="auto">
<li>Presmoothing by using <code>presmoothing</code></li>
<li>(Optional) Continuization by using <code>KernelSmoothing</code></li>
<li>Equate score X to scale Y by the arbitrary method.</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Linear Equating
julia&gt; eq_lin = Linear(ftX, ftY)
Equating design: EG
Equated method: Linear.
To show the table, extract `table` element.

# Equipercentile equating
julia&gt; eq_eqp = Equipercentile(ftX, ftY)
Equating design: EG
Equated method: Equipercentile(lower).
To show the table, extract `table` element."><pre class="notranslate"><code># Linear Equating
julia&gt; eq_lin = Linear(ftX, ftY)
Equating design: EG
Equated method: Linear.
To show the table, extract `table` element.

# Equipercentile equating
julia&gt; eq_eqp = Equipercentile(ftX, ftY)
Equating design: EG
Equated method: Equipercentile(lower).
To show the table, extract `table` element.
</code></pre></div>
<ol start="6" dir="auto">
<li>Evaluate SEE (Standard Error of Equating). Now, Only <code>BasicSampling(n)</code> is supported.</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Bootstrap, Random
julia&gt; Random.seed!(1234)

julia&gt; @time bootse_lin = bootstrap(x -&gt; coef(Linear(x...)), eq_lin.data, BasicSampling(1000))
  1.727280 seconds (10.12 M allocations: 458.347 MiB, 5.56% gc time, 63.60% compilation time)
Bootstrap Sampling
  Estimates:
     Var │ Estimate  Bias         StdError
         │ Float64   Float64      Float64
    ─────┼─────────────────────────────────
       1 │  1.03325  0.000560431  0.043795
       2 │  7.70597  0.00756638   1.2771
  Sampling: BasicSampling
  Samples:  1000
  Data:     NamedTuple{(:X, :Y), Tuple{Equate.FreqTab, Equate.FreqTab}}: { X 500 × Y 500 }"><pre class="notranslate"><code>julia&gt; using Bootstrap, Random
julia&gt; Random.seed!(1234)

julia&gt; @time bootse_lin = bootstrap(x -&gt; coef(Linear(x...)), eq_lin.data, BasicSampling(1000))
  1.727280 seconds (10.12 M allocations: 458.347 MiB, 5.56% gc time, 63.60% compilation time)
Bootstrap Sampling
  Estimates:
     Var │ Estimate  Bias         StdError
         │ Float64   Float64      Float64
    ─────┼─────────────────────────────────
       1 │  1.03325  0.000560431  0.043795
       2 │  7.70597  0.00756638   1.2771
  Sampling: BasicSampling
  Samples:  1000
  Data:     NamedTuple{(:X, :Y), Tuple{Equate.FreqTab, Equate.FreqTab}}: { X 500 × Y 500 }
</code></pre></div>
</article></div>