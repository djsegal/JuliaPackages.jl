<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/logo.png"><img src="./docs/src/assets/logo.png" alt="Dendriform.jl" style="max-width: 100%;"></a>
</p>
<h1 dir="auto"><a id="user-content-dendriformjl" class="anchor" aria-hidden="true" href="#dendriformjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dendriform.jl</h1>
<p dir="auto"><em>Dendriform dialgebra algorithms to compute using Loday's arithmetic on groves of planar binary trees</em></p>
<p dir="auto"><a href="https://travis-ci.org/chakravala/Dendriform.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af2357f28d76f66f77757d521234884214a5f7fdc369cbb882560350b2a57d39/68747470733a2f2f7472617669732d63692e6f72672f6368616b726176616c612f44656e647269666f726d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chakravala/Dendriform.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/chakravala/grovealg-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/87cdbd0c3eed3d751eee57d4fea2353204406b4934ea5b9a3ac6f3049ff94a03/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6a3774336f6331646f656f74366937323f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/j7t3oc1doeot6i72?svg=true" style="max-width: 100%;"></a> <a href="https://coveralls.io/github/chakravala/Dendriform.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b653c5adcccb68b458b7227c27d0e2483538bd086e2ef3f7060cce0f36a96e90/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6368616b726176616c612f44656e647269666f726d2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/chakravala/Dendriform.jl/badge.svg?branch=master" style="max-width: 100%;"></a> <a href="http://codecov.io/github/chakravala/Dendriform.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/98f579a5e6bb8e16bccadbbac92c15871802d21bcb84460938f7ad2f83fb7da3/687474703a2f2f636f6465636f762e696f2f6769746875622f6368616b726176616c612f44656e647269666f726d2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/chakravala/Dendriform.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://chakravala.github.io/Dendriform.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://chakravala.github.io/Dendriform.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">Installation of latest release version using Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;Dendriform&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Dendriform<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Provides the types <code>PBTree</code> for planar binary trees, <code>Grove</code> for tree collections of constant degree, and <code>GroveBin</code> to compress grove data. This package defines various essential operations on planar binary trees and groves like <code>∪</code> for <code>union</code>; <code>∨</code> for <code>graft</code>; <code>left</code> and <code>right</code> for branching; <code>⋖</code>, <code>⋗</code>, <code>&lt;</code>, <code>&gt;</code>, <code>≤</code>, <code>≥</code> for Tamari's partial ordering; <code>⊴</code> for <code>between</code>; <code>/</code> and <code>\</code> (i.e. <code>over</code> and <code>under</code>); and the <code>dashv</code> and <code>vdash</code> operations <code>⊣</code>, <code>⊢</code>, <code>+</code>, <code>*</code> for dendriform algebra.</p>
<p dir="auto">View the documentation <a href="https://chakravala.github.io/Dendriform.jl/stable" rel="nofollow">stable</a> / <a href="https://chakravala.github.io/Dendriform.jl/latest" rel="nofollow">latest</a> for more features and examples.</p>
<h2 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background</h2>
<p dir="auto">We call <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c4f05dd4a2f0671bc00c7feecb3e0384068d89fc402f80c9c0555cc095eef0fe/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f2535436f6d65676128253543746175292673706163653b3a3d2673706163653b2535422535436f6d656761282535437461752535456c292c6e2c2673706163653b2535436f6d6567612825354374617525354572292535442673706163653b3d2673706163653b253542645f312c645f322c253543646f74732c645f6e253544"><img src="https://camo.githubusercontent.com/c4f05dd4a2f0671bc00c7feecb3e0384068d89fc402f80c9c0555cc095eef0fe/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f2535436f6d65676128253543746175292673706163653b3a3d2673706163653b2535422535436f6d656761282535437461752535456c292c6e2c2673706163653b2535436f6d6567612825354374617525354572292535442673706163653b3d2673706163653b253542645f312c645f322c253543646f74732c645f6e253544" alt="tree-symb" data-canonical-src="https://latex.codecogs.com/svg.latex?%5Comega(%5Ctau)&amp;space;:=&amp;space;%5B%5Comega(%5Ctau%5El),n,&amp;space;%5Comega(%5Ctau%5Er)%5D&amp;space;=&amp;space;%5Bd_1,d_2,%5Cdots,d_n%5D" style="max-width: 100%;"></a> the <em>name</em> of a tree to represent it as a vector, where the sequence is made up of <em>n</em> integers.
Collections of planar binary trees are encoded into an equivalence class of matrices:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8c68f9a58eabc69e4be93d667114eb29cf131286a0e6f02f775a394555c8b2d5/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f2535436d6174686262253742592537445f6e2535456d2673706163653b253543636f6e672673706163653b2535434c616d6264615f6e2535456d2673706163653b3d2673706163653b2535436c656674253543253742412673706163653b253543696e2673706163653b253543746578742537424d61742537445f2537426d25354374696d65732673706163653b6e253744282535436d61746862622537425a2537442535452b292673706163653b3a2673706163653b253543666f72616c6c2673706163653b692825354365786973747321253543746175253543696e2535436d6174686262253742592537445f6e25354531292673706163653b28415f253742692c2a2537442673706163653b3d2673706163653b2535436f6d6567612825354374617529292c2673706163653b253543666f72616c6c2673706163653b692c6a28415f253742692c2a2537442673706163653b2535436e65712673706163653b415f2537426a2c2a253744292673706163653b25354372696768742535432537442673706163653b2f2673706163653b25354373696d"><img src="https://camo.githubusercontent.com/8c68f9a58eabc69e4be93d667114eb29cf131286a0e6f02f775a394555c8b2d5/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f2535436d6174686262253742592537445f6e2535456d2673706163653b253543636f6e672673706163653b2535434c616d6264615f6e2535456d2673706163653b3d2673706163653b2535436c656674253543253742412673706163653b253543696e2673706163653b253543746578742537424d61742537445f2537426d25354374696d65732673706163653b6e253744282535436d61746862622537425a2537442535452b292673706163653b3a2673706163653b253543666f72616c6c2673706163653b692825354365786973747321253543746175253543696e2535436d6174686262253742592537445f6e25354531292673706163653b28415f253742692c2a2537442673706163653b3d2673706163653b2535436f6d6567612825354374617529292c2673706163653b253543666f72616c6c2673706163653b692c6a28415f253742692c2a2537442673706163653b2535436e65712673706163653b415f2537426a2c2a253744292673706163653b25354372696768742535432537442673706163653b2f2673706163653b25354373696d" alt="matrix-equivalence-class" data-canonical-src="https://latex.codecogs.com/svg.latex?%5Cmathbb%7BY%7D_n%5Em&amp;space;%5Ccong&amp;space;%5CLambda_n%5Em&amp;space;=&amp;space;%5Cleft%5C%7BA&amp;space;%5Cin&amp;space;%5Ctext%7BMat%7D_%7Bm%5Ctimes&amp;space;n%7D(%5Cmathbb%7BZ%7D%5E+)&amp;space;:&amp;space;%5Cforall&amp;space;i(%5Cexists!%5Ctau%5Cin%5Cmathbb%7BY%7D_n%5E1)&amp;space;(A_%7Bi,*%7D&amp;space;=&amp;space;%5Comega(%5Ctau)),&amp;space;%5Cforall&amp;space;i,j(A_%7Bi,*%7D&amp;space;%5Cneq&amp;space;A_%7Bj,*%7D)&amp;space;%5Cright%5C%7D&amp;space;/&amp;space;%5Csim" style="max-width: 100%;"></a></p>
<p dir="auto">where <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/693303e6f99c7b644efb6d538f01c860c5b4fa9d5a41c9ea137e15ca432d7549/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f412673706163653b25354373696d2673706163653b42"><img src="https://camo.githubusercontent.com/693303e6f99c7b644efb6d538f01c860c5b4fa9d5a41c9ea137e15ca432d7549/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f412673706163653b25354373696d2673706163653b42" alt="A~B" data-canonical-src="https://latex.codecogs.com/svg.latex?A&amp;space;%5Csim&amp;space;B" style="max-width: 100%;"></a> if there exists a permutation <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/095a396cb141b5e48ba4e306318046430086855b71548c1a47e0554cab2410ff/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f66253543696e2673706163653b535f6b"><img src="https://camo.githubusercontent.com/095a396cb141b5e48ba4e306318046430086855b71548c1a47e0554cab2410ff/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f66253543696e2673706163653b535f6b" alt="f  in Sk" data-canonical-src="https://latex.codecogs.com/svg.latex?f%5Cin&amp;space;S_k" style="max-width: 100%;"></a> so that <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7a8fc8fb0a04dcca5ec25232162f7224281dc8e1de6d0bdb18104cdb6d2d16a3/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543666f72616c6c2673706163653b69282673706163653b415f253742692c2a2537442673706163653b3d2673706163653b425f253742662869292c2a25374429"><img src="https://camo.githubusercontent.com/7a8fc8fb0a04dcca5ec25232162f7224281dc8e1de6d0bdb18104cdb6d2d16a3/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543666f72616c6c2673706163653b69282673706163653b415f253742692c2a2537442673706163653b3d2673706163653b425f253742662869292c2a25374429" alt="condition" data-canonical-src="https://latex.codecogs.com/svg.latex?%5Cforall&amp;space;i(&amp;space;A_%7Bi,*%7D&amp;space;=&amp;space;B_%7Bf(i),*%7D)" style="max-width: 100%;"></a>.
The binary tree grafting operation is computed</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/99c16223ad7c5568083e2b6f644e114f1209a40679db4aebaf5e7c30f7ca4687/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6f6d656761285c616c7068615c7665652673706163653b5c62657461292673706163653b3d2673706163653b5c6f6d656761285c616c706861295c7665655c6f6d656761285c62657461292673706163653b3a3d2673706163653b5b5c6f6d656761285c616c706861292c612b312b622c5c6f6d656761285c62657461295d5c696e2673706163653b5c4c616d6264615f7b612b622b317d5e31"><img src="https://camo.githubusercontent.com/99c16223ad7c5568083e2b6f644e114f1209a40679db4aebaf5e7c30f7ca4687/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6f6d656761285c616c7068615c7665652673706163653b5c62657461292673706163653b3d2673706163653b5c6f6d656761285c616c706861295c7665655c6f6d656761285c62657461292673706163653b3a3d2673706163653b5b5c6f6d656761285c616c706861292c612b312b622c5c6f6d656761285c62657461295d5c696e2673706163653b5c4c616d6264615f7b612b622b317d5e31" data-canonical-src="https://latex.codecogs.com/svg.latex?\omega(\alpha\vee&amp;space;\beta)&amp;space;=&amp;space;\omega(\alpha)\vee\omega(\beta)&amp;space;:=&amp;space;[\omega(\alpha),a+1+b,\omega(\beta)]\in&amp;space;\Lambda_{a+b+1}^1" style="max-width: 100%;"></a></p>
<p dir="auto">The left and right addition are computed on the following recursive principle:</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/643ebca26c123a608528c71c362378c4b57a3d8b6f9a55cf80287b96d16133f9/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c78695c64617368762673706163653b5c6574612673706163653b263d2673706163653b5c6269676375705f7b697d2673706163653b5c6269676375705f7b5c7461752673706163653b5c696e2673706163653b5c78695f695e722673706163653b2b2673706163653b5c6574617d2673706163653b5c78695f695e6c2673706163653b5c7665652673706163653b5c7461752673706163653b5c71717561642673706163653b265c746578747b616e647d2673706163653b5c71717561642673706163653b5c71717561642673706163653b5c78695c76646173682673706163653b5c6574612673706163653b263d2673706163653b5c6269676375705f7b6a7d2673706163653b5c6269676375705f7b5c7461752673706163653b5c696e2673706163653b5c78692b5c6574615f6a5e6c7d2673706163653b5c7461755c7665652673706163653b5c6574615f6a5e722e"><img src="https://camo.githubusercontent.com/643ebca26c123a608528c71c362378c4b57a3d8b6f9a55cf80287b96d16133f9/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c78695c64617368762673706163653b5c6574612673706163653b263d2673706163653b5c6269676375705f7b697d2673706163653b5c6269676375705f7b5c7461752673706163653b5c696e2673706163653b5c78695f695e722673706163653b2b2673706163653b5c6574617d2673706163653b5c78695f695e6c2673706163653b5c7665652673706163653b5c7461752673706163653b5c71717561642673706163653b265c746578747b616e647d2673706163653b5c71717561642673706163653b5c71717561642673706163653b5c78695c76646173682673706163653b5c6574612673706163653b263d2673706163653b5c6269676375705f7b6a7d2673706163653b5c6269676375705f7b5c7461752673706163653b5c696e2673706163653b5c78692b5c6574615f6a5e6c7d2673706163653b5c7461755c7665652673706163653b5c6574615f6a5e722e" data-canonical-src="https://latex.codecogs.com/svg.latex?\xi\dashv&amp;space;\eta&amp;space;&amp;=&amp;space;\bigcup_{i}&amp;space;\bigcup_{\tau&amp;space;\in&amp;space;\xi_i^r&amp;space;+&amp;space;\eta}&amp;space;\xi_i^l&amp;space;\vee&amp;space;\tau&amp;space;\qquad&amp;space;&amp;\text{and}&amp;space;\qquad&amp;space;\qquad&amp;space;\xi\vdash&amp;space;\eta&amp;space;&amp;=&amp;space;\bigcup_{j}&amp;space;\bigcup_{\tau&amp;space;\in&amp;space;\xi+\eta_j^l}&amp;space;\tau\vee&amp;space;\eta_j^r." style="max-width: 100%;"></a></p>
<p dir="auto">Together these non-commutative binary operations satisfy the properties of an associative dendriform dialgebra. The structures induced by Loday's definition of the sum have the partial ordering of the associahedron known as Tamari lattice.</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/wiki/chakravala/Fatou.jl/dendriform/grove-sum-1.png"><img src="https://raw.githubusercontent.com/wiki/chakravala/Fatou.jl/dendriform/grove-sum-1.png" alt="tamari-grove-commutativity.png" style="max-width: 100%;"></a>
</p>
<ul dir="auto">
<li><strong>Figure</strong>: <em>Tamari associahedron, colored to visualize noncommutative sums of [1,2] and [2,1], code: <a href="https://gist.github.com/chakravala/fbc1b1a34adaeb7fdac93b3d488c57a4">gist</a></em></li>
</ul>
<p dir="auto">However, in this computational package, a stricter total ordering is constructed using a function that transforms the set-vector isomorphism obtained from the descending greatest integer index position search method:</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/249945a01ba649aad55fafce2d1a7141cec9f5f581d0b8de5a2e084890d083e2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c5468657461285c6d75292673706163653b263d2673706163653b5c73756d5f7b6a3d6e7d5e312673706163653b5c73756d5f7b6b3d317d5e7b5c26686173683b655f6a7d2673706163653b28655f6a295f6b2673706163653b5c63646f742673706163653b31305e7b5c64656c7461286a2c6b297d2c2673706163653b5c71717561642673706163653b265c746578747b77686572657d2673706163653b5c71717561642673706163653b5c64656c7461286a2c6b292673706163653b263d2673706163653b6e2673706163653b2d2673706163653b5c73756d5f7b723d317d5e7b6a2d317d2673706163653b5c73756d5f7b733d317d5e7b5c26686173683b655f727d2673706163653b312673706163653b2d2673706163653b5c73756d5f7b733d317d5e7b6b7d2673706163653b31"><img src="https://camo.githubusercontent.com/249945a01ba649aad55fafce2d1a7141cec9f5f581d0b8de5a2e084890d083e2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c5468657461285c6d75292673706163653b263d2673706163653b5c73756d5f7b6a3d6e7d5e312673706163653b5c73756d5f7b6b3d317d5e7b5c26686173683b655f6a7d2673706163653b28655f6a295f6b2673706163653b5c63646f742673706163653b31305e7b5c64656c7461286a2c6b297d2c2673706163653b5c71717561642673706163653b265c746578747b77686572657d2673706163653b5c71717561642673706163653b5c64656c7461286a2c6b292673706163653b263d2673706163653b6e2673706163653b2d2673706163653b5c73756d5f7b723d317d5e7b6a2d317d2673706163653b5c73756d5f7b733d317d5e7b5c26686173683b655f727d2673706163653b312673706163653b2d2673706163653b5c73756d5f7b733d317d5e7b6b7d2673706163653b31" data-canonical-src="https://latex.codecogs.com/svg.latex?\Theta(\mu)&amp;space;&amp;=&amp;space;\sum_{j=n}^1&amp;space;\sum_{k=1}^{\&amp;hash;e_j}&amp;space;(e_j)_k&amp;space;\cdot&amp;space;10^{\delta(j,k)},&amp;space;\qquad&amp;space;&amp;\text{where}&amp;space;\qquad&amp;space;\delta(j,k)&amp;space;&amp;=&amp;space;n&amp;space;-&amp;space;\sum_{r=1}^{j-1}&amp;space;\sum_{s=1}^{\&amp;hash;e_r}&amp;space;1&amp;space;-&amp;space;\sum_{s=1}^{k}&amp;space;1" style="max-width: 100%;"></a></p>
<p dir="auto">The structure obtained from this total ordering is used to construct a reliable binary <code>groveindex</code> representation that encodes the essential data of any grove, using the formula</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ee4880f73e3e9df911afc0130bade60e638e50958f21f0787b2d3d9cc82f4c7d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c7a6574615f5c67616d6d612673706163653b3a3d2673706163653b5c73756d5f7b5c7461752673706163653b5c696e2673706163653b5c67616d6d617d2673706163653b325e7b5c74686574615f5c7461752673706163653b2d2673706163653b317d"><img src="https://camo.githubusercontent.com/ee4880f73e3e9df911afc0130bade60e638e50958f21f0787b2d3d9cc82f4c7d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c7a6574615f5c67616d6d612673706163653b3a3d2673706163653b5c73756d5f7b5c7461752673706163653b5c696e2673706163653b5c67616d6d617d2673706163653b325e7b5c74686574615f5c7461752673706163653b2d2673706163653b317d" data-canonical-src="https://latex.codecogs.com/svg.latex?\zeta_\gamma&amp;space;:=&amp;space;\sum_{\tau&amp;space;\in&amp;space;\gamma}&amp;space;2^{\theta_\tau&amp;space;-&amp;space;1}" style="max-width: 100%;"></a></p>
<p dir="auto">These algorithms are used in order to facilitate computations that provide insight into the Loday arithmetic.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Basic usage examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Dendriform

julia&gt; Grove(3,7) ⊣ [1,2]∪[2,1]
[1,2,5,1,2]
[1,2,5,2,1]
[2,1,5,1,2]
[2,1,5,2,1]
[1,5,3,1,2]
[1,5,2,1,3]
[1,5,1,2,3]
[1,5,3,2,1]
[1,5,1,3,1]
Y5 #9/42

julia&gt; Grove(2,3) * ([1,2,3]∪[3,2,1]) |&gt; GroveBin
2981131286847743360614880957207748817969 Y6 #30/132 [54.75%]

julia&gt; [2,1,7,4,1,3,1] &lt; [2,1,7,4,3,2,1]
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dendriform

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Grove</span>(<span class="pl-c1">3</span>,<span class="pl-c1">7</span>) ⊣ [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]<span class="pl-k">∪</span>[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>]
Y5 <span class="pl-c"><span class="pl-c">#</span>9/42</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Grove</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>) <span class="pl-k">*</span> ([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]<span class="pl-k">∪</span>[<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]) <span class="pl-k">|&gt;</span> GroveBin
<span class="pl-c1">2981131286847743360614880957207748817969</span> Y6 <span class="pl-c"><span class="pl-c">#</span>30/132 [54.75%]</span>

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>] <span class="pl-k">&lt;</span> [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>Dan Yasaki with Adriano Bruno, <a href="http://libres.uncg.edu/ir/uncg/f/D_Yasaki_Arithmetic_2011.pdf" rel="nofollow">The arithmetic of planar binary trees</a>, Involve 4 (2011), no. 1, 1-11. (<a href="https://www.uncg.edu/mat/faculty/d_yasaki/publications/trees_for_print.pdf" rel="nofollow">PDF</a>)</li>
<li>Jean-Louis Loday, <a href="http://irma.math.unistra.fr/~loday/PAPERS/2002Loday(arithmetree).pdf" rel="nofollow">Arithmetree</a>, J. of Algebra (2002), no. 258, 275-309.</li>
</ul>
</article></div>