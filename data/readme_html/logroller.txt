<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-logrollerjl" class="anchor" aria-hidden="true" href="#logrollerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LogRoller.jl</h1>
<p><a href="https://travis-ci.org/tanmaykm/LogRoller.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/87004bd53541b9757b70eec6b813455f8478608888210edd5c5a4f74d6ba624e/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f4c6f67526f6c6c65722e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/LogRoller.jl.png" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tanmaykm/logroller-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/1d6ab482320da91cc5626cc0599697add02758ff43d5fbbc9050c0b305aa1716/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f74616e6d61796b6d2f4c6f67526f6c6c65722e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/tanmaykm/LogRoller.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tanmaykm/LogRoller.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/823a4b2a15e0ab5d3600cc0481a6fd32f8d444f4e3808216b78b6339fb85aeb5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74616e6d61796b6d2f4c6f67526f6c6c65722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/tanmaykm/LogRoller.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Provides:</p>
<ul>
<li><code>RollingFileWriter</code> - <code>IO</code> implementation to a file writer that rotates files based on file size.</li>
<li><code>RollingLogger</code> - <code>AbstractLogger</code> implementation that uses a <code>RollingFileWriter</code> for output.</li>
<li><code>postrotate</code> - Registers a callback function to be invoked with the rotated file name just after the current log file is rotated. The file name of the rotated file is passed as an argument. The function is blocking and so any lengthy operation that needs to be done should be done asynchronously.</li>
</ul>
<h2><a id="user-content-rollingfilewriter" class="anchor" aria-hidden="true" href="#rollingfilewriter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>RollingFileWriter</code></h2>
<p>A file writer that implements the <code>IO</code> interface, but only provides <code>write</code> methods. It also implements a transparent wrapper which allows it to be used to stream <code>stdin</code> and <code>stdout</code> of spawned processes into it.</p>
<p>Constructor parameters:</p>
<ul>
<li><code>filename</code>: name (including path) of file to log into</li>
<li><code>sizelimit</code>: size of file (in bytes) after which the file should be rotated</li>
<li><code>nfiles</code>: number of rotated files to maintain</li>
</ul>
<p>Rotates files as below:</p>
<ul>
<li><code>&lt;filename&gt;</code> : active file</li>
<li><code>&lt;filename&gt;_1.gz</code> : last rotated file</li>
<li><code>&lt;filename&gt;_2.gz</code> : previous _1.gz rotated to _2.gz</li>
<li><code>&lt;filename&gt;_3.gz</code> : previous _2.gz rotated to _3.gz</li>
<li>...</li>
<li><code>&lt;filename&gt;_n.gz</code> : last rotated file is discarded when rotated</li>
</ul>
<h2><a id="user-content-rollingfilewritertee" class="anchor" aria-hidden="true" href="#rollingfilewritertee"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>RollingFileWriterTee</code></h2>
<p>Tees raw log entries made a RollingFileWriter on to a Julia <code>AbstractLogger</code>.</p>
<p>Each line of text is taken as a single log message.</p>
<p>All log entries are made with the same log level, which can be provided during construction. It leaves
further examination/parsing of log messages (to extract parameters, or detect exact log levels) to the
downstream logger.</p>
<p>Constructor parameters in addition to those for <code>RollingFileWriter</code>:</p>
<ul>
<li><code>logger</code>: instance of AbstractLogger to tee log entries to</li>
<li><code>assumed_level</code>: level of the log messages to assume (default Info)</li>
</ul>
<h2><a id="user-content-rollinglogger" class="anchor" aria-hidden="true" href="#rollinglogger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>RollingLogger</code></h2>
<p>A logger that implements <code>AbstractLogger</code> interface and uses a <code>RollingFileWriter</code> to provide log rotation.</p>
<p>Construction parameters:</p>
<ul>
<li><code>filename</code>: name (including path) of file to log into</li>
<li><code>sizelimit</code>: size of file (in bytes) after which the file should be rotated</li>
<li><code>nfiles</code>: number of rotated files to maintain</li>
<li><code>level</code>: log level (default: <code>Logging.Info</code>)</li>
</ul>
<p>Constructor keyword parameters (described below):</p>
<ul>
<li><code>timestamp_identifier</code></li>
<li><code>format</code></li>
<li><code>entry_size_limit</code></li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Using <code>RollingFileWriter</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LogRoller

julia&gt; io = RollingFileWriter(&quot;/tmp/mylog.log&quot;, 1000, 3);

julia&gt; println(io, &quot;hello roller&quot;)

julia&gt; write(io, b&quot;hello world\n&quot;)

shell&gt; cat /tmp/mylog.log
hello roller
hello world
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogRoller

julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">RollingFileWriter</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(io, <span class="pl-s"><span class="pl-pds">"</span>hello roller<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(io, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>hello world<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>mylog<span class="pl-k">.</span>log
hello roller
hello world</pre></div>
<p>Using <code>RollingFileWriter</code> with <code>stdout</code> and <code>stderr</code> streams</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LogRoller

julia&gt; io = RollingFileWriter(&quot;/tmp/mylog.log&quot;, 1000, 3);

julia&gt; run(pipeline(`myshellscript.sh`; stdout=io, stderr=io));
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogRoller

julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">RollingFileWriter</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">run</span>(<span class="pl-c1">pipeline</span>(<span class="pl-s"><span class="pl-pds">`</span>myshellscript.sh<span class="pl-pds">`</span></span>; <span class="pl-c1">stdout</span><span class="pl-k">=</span>io, <span class="pl-c1">stderr</span><span class="pl-k">=</span>io));</pre></div>
<p>Using <code>RollingFileWriterTee</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LogRoller, Logging

julia&gt; io = RollingFileWriterTee(&quot;/tmp/mylog.log&quot;, 1000, 3, ConsoleLogger(stderr));

julia&gt; run(pipeline(`myshellscript.sh`; stdout=io, stderr=io));
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogRoller, Logging

julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">RollingFileWriterTee</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>, <span class="pl-c1">ConsoleLogger</span>(<span class="pl-c1">stderr</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">run</span>(<span class="pl-c1">pipeline</span>(<span class="pl-s"><span class="pl-pds">`</span>myshellscript.sh<span class="pl-pds">`</span></span>; <span class="pl-c1">stdout</span><span class="pl-k">=</span>io, <span class="pl-c1">stderr</span><span class="pl-k">=</span>io));</pre></div>
<p>Using <code>RollingLogger</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Logging, LogRoller

julia&gt; logger = RollingLogger(&quot;/tmp/mylog.log&quot;, 1000, 3, Logging.Debug);

julia&gt; postrotate(logger) do rotatedfile
           # e.g. code to upload file to permanent store
           # ...
       end

julia&gt; with_logger(logger) do
       @info(&quot;Hello RollingLogger&quot;)
       end

shell&gt; cat /tmp/mylog.log
hello roller
hello world
┌ Info: 2019-12-03T09:26:33.694: Hello RollingLogger
└ @ Main REPL[11]:2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Logging, LogRoller

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">RollingLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>, Logging<span class="pl-k">.</span>Debug);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">postrotate</span>(logger) <span class="pl-k">do</span> rotatedfile
           <span class="pl-c"><span class="pl-c">#</span> e.g. code to upload file to permanent store</span>
           <span class="pl-c"><span class="pl-c">#</span> ...</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
       <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello RollingLogger<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>mylog<span class="pl-k">.</span>log
hello roller
hello world
┌ Info<span class="pl-k">:</span> <span class="pl-c1">2019</span><span class="pl-k">-</span><span class="pl-c1">12</span><span class="pl-k">-</span><span class="pl-c1">03</span>T09<span class="pl-k">:</span><span class="pl-c1">26</span><span class="pl-k">:</span><span class="pl-c1">33.694</span><span class="pl-k">:</span> Hello RollingLogger
└ @ Main REPL[<span class="pl-c1">11</span>]<span class="pl-k">:</span><span class="pl-c1">2</span></pre></div>
<p>RollingLogger automatically adds the current timestamp to the log line. A timestamp can also be optionally provided in the log message keywords. By default, RollingLogger considers a keyword arg with a name <code>time</code> to indicate the timestamp of the log message. It uses the value specified in that as the timestamp if it is found to be either a <code>DateTime</code> or <code>Float64</code> (UNIX time). If a timestamp is detected in the keywords, it is used as the timestamp for the message and removed from the keywords.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Logging, LogRoller, Dates

julia&gt; logger = RollingLogger(&quot;/tmp/mylog.log&quot;, 1000, 3, Logging.Debug);

julia&gt; with_logger(logger) do
       @info(&quot;log with timestamp&quot;, time=DateTime(2010, 1, 1, 1, 1, 1))
       end

shell&gt; cat /tmp/mylog.log
┌ Info: 2010-01-01T01:01:01: log with timestamp
└ @ Main REPL[8]:2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Logging, LogRoller, Dates

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">RollingLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>, Logging<span class="pl-k">.</span>Debug);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
       <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>log with timestamp<span class="pl-pds">"</span></span>, time<span class="pl-k">=</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2010</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
       <span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>mylog<span class="pl-k">.</span>log
┌ Info<span class="pl-k">:</span> <span class="pl-c1">2010</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T01<span class="pl-k">:</span><span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">01</span><span class="pl-k">:</span> log with timestamp
└ @ Main REPL[<span class="pl-c1">8</span>]<span class="pl-k">:</span><span class="pl-c1">2</span></pre></div>
<p>The name of keyword argument to use as timestamp can be set while initializing a RollingLogger.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Logging, LogRoller, Dates

julia&gt; logger = RollingLogger(&quot;/tmp/mylog.log&quot;, 1000, 3, Logging.Debug, timestamp_identifier=:clock);

julia&gt; with_logger(logger) do
       @info(&quot;log with timestamp&quot;, clock=DateTime(2010, 1, 1, 1, 1, 1))
       end

shell&gt; cat /tmp/mylog.log
┌ Info: 2010-01-01T01:01:01: log with timestamp
└ @ Main REPL[3]:2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Logging, LogRoller, Dates

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">RollingLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/mylog.log<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">3</span>, Logging<span class="pl-k">.</span>Debug, timestamp_identifier<span class="pl-k">=</span><span class="pl-c1">:clock</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
       <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>log with timestamp<span class="pl-pds">"</span></span>, clock<span class="pl-k">=</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2010</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
       <span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>mylog<span class="pl-k">.</span>log
┌ Info<span class="pl-k">:</span> <span class="pl-c1">2010</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T01<span class="pl-k">:</span><span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">01</span><span class="pl-k">:</span> log with timestamp
└ @ Main REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">2</span></pre></div>
<p>Logs can be formatted as JSON by setting the constructor keyword argument <code>format</code> to <code>:json</code>. A JSON formatted log entry is a JSON object having the below mentioned keys (unless they are empty):</p>
<ul>
<li><code>metadata</code>: event metadata e.g. timestamp, line, filename, ...</li>
<li><code>message</code>: the log message string</li>
<li><code>keywords</code>: any keywords provided</li>
</ul>
<p>Size of each log entry can be limited by specifying the constructor keyword argument <code>entry_size_limit</code>. It is set to 256KB by default.</p>
</article></div>