<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-headerrepls" class="anchor" aria-hidden="true" href="#headerrepls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HeaderREPLs</h1>
<p><a href="https://travis-ci.org/timholy/HeaderREPLs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc5c43e69a46c2c3d3c70ae5866c8286078de1e8/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f4865616465725245504c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/HeaderREPLs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/timholy/revise-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8571e788675742364b79aec9439ff26b78e69488/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6531786e736a346535713933303879362f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/e1xnsj4e5q9308y6/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/timholy/HeaderREPLs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f8ef522cd410cd5d57b4c39de4f8994fea0271a9/687474703a2f2f636f6465636f762e696f2f6769746875622f74696d686f6c792f4865616465725245504c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/timholy/HeaderREPLs.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>HeaderREPLs.jl</code> is a Julia package that allows you to extend Julia's amazing REPL
to support "mini-applications" that need to communicate more information to the user.
They allow you to define a custom "header" type that you can use to print extra
information above the prompt.</p>
<p>To demonstrate, here we build a <code>CountingHeader</code> type and show how the header is printed:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> CountingHeader <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractHeader</span>    <span class="pl-c"><span class="pl-c">#</span> note must be mutable and contain nlines field</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>            <span class="pl-c"><span class="pl-c">#</span> internal data needed by the header</span>
    nlines<span class="pl-k">::</span><span class="pl-c1">Int</span>       <span class="pl-c"><span class="pl-c">#</span> the number of lines needed for display---update this in print_header</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> HeaderREPLs<span class="pl-k">.</span><span class="pl-en">print_header</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, header<span class="pl-k">::</span><span class="pl-c1">CountingHeader</span>)
    <span class="pl-k">if</span> header<span class="pl-k">.</span>nlines <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">if</span> header<span class="pl-k">.</span>n <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
            <span class="pl-c1">printstyled</span>(io, <span class="pl-s"><span class="pl-pds">"</span>Header:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>; color<span class="pl-k">=</span><span class="pl-c1">:light_magenta</span>)
            <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>header<span class="pl-k">.</span>n
                <span class="pl-c1">printstyled</span>(io, <span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-pds">"</span></span>, i, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>; color<span class="pl-k">=</span><span class="pl-c1">:light_blue</span>)
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
        header<span class="pl-k">.</span>nlines <span class="pl-k">=</span> <span class="pl-c1">nlines</span>(header<span class="pl-k">.</span>n)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<p>In <code>test/runtests.jl</code> there is a complete example showing how you initialize this
mode and specify the user interaction: briefly, a pipe character ('|') switches into
"count" mode, and once in "count" mode '+' and '-' increment and decrement <code>n</code>.</p>
<p>Here, let's check out the outcome with a series of images.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/screenshot1.png"><img src="images/screenshot1.png" alt="entry" style="max-width:100%;"></a></p>
<p>This is what you see when you first press '|'.
<code>n</code> starts at 0, and our <code>print_header</code> method above displays nothing in that case.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/screenshot2.png"><img src="images/screenshot2.png" alt="plusses" style="max-width:100%;"></a></p>
<p>This is what you get after pressing '+' three times.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/screenshot3.png"><img src="images/screenshot3.png" alt="minus" style="max-width:100%;"></a></p>
<p>Now after pressing '-'. Note the line moved up to stay aligned.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/screenshot4.png"><img src="images/screenshot4.png" alt="enter" style="max-width:100%;"></a></p>
<p>Note we can enter Julia commands as usual.
In this demo, "count" mode is non-sticky, so it reverts back to the <code>julia&gt;</code> prompt.</p>
<p>In theory at least, "count" mode works as you'd expect when you traverse the
history: when you get to a "count" line it shows the (current) header.</p>
<h2><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Utilities</h2>
<p>The package exports a few utilities that may make it easier to define custom REPL modes.
Aside from key-binding initialization utilities (see the source for details),
perhaps the two most useful are <code>find_prompt</code> and <code>count_display_lines</code>.
Use <code>?</code> for more information.</p>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h2>
<p>Currently this package overwrites a few methods in Julia's "REPL" standard library.
This generates some warnings.
Hopefully we can eliminate them in a future version of this package.</p>
</article></div>