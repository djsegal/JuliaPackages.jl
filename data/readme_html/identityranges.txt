<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-identityranges" class="anchor" aria-hidden="true" href="#identityranges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IdentityRanges</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaArrays/IdentityRanges.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73c853386230065261e6ae77b59337a262dd1efbbcc3c2c8ee957751374a3e62/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f4964656e7469747952616e6765732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/IdentityRanges.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/JuliaArrays/IdentityRanges.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/71c2c4b4a6bd7a9b590853f77d77cb58442fe70580afede514f5e691643baa59/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f4964656e7469747952616e6765732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/IdentityRanges.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">IdentityRanges are Julia-language a helper type for creating "views"
of arrays. They are a custom type of <code>AbstractUnitRange</code> that makes it
easy to preserve the indices of array views. The key property of an
<code>IdentityRange</code> <code>r</code> is that <code>r[i] == i</code> (hence the name of the
type/package), and that they support arbitrary start/stop indices
(i.e., not just starting at 1).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = reshape(1:24, 4, 6)
4×6 reshape(::UnitRange{Int64}, 4, 6) with eltype Int64:
 1  5   9  13  17  21
 2  6  10  14  18  22
 3  7  11  15  19  23
 4  8  12  16  20  24

julia&gt; V = view(A, 2:3, 3:5)
2×3 view(reshape(::UnitRange{Int64}, 4, 6), 2:3, 3:5) with eltype Int64:
 10  14  18
 11  15  19

julia&gt; axes(V)
(Base.OneTo(2),Base.OneTo(3))

julia&gt; V[1,1]
10

julia&gt; using IdentityRanges

julia&gt; Vp = view(A, IdentityRange(2:3), IdentityRange(3:5))
view(reshape(::UnitRange{Int64}, 4, 6), IdentityRange(2:3), IdentityRange(3:5)) with eltype Int64 with indices 2:3×3:5:
 10  14  18
 11  15  19

julia&gt; axes(Vp)
(2:3,3:5)

julia&gt; Vp[1,1]
ERROR: BoundsError: attempt to access view(reshape(::UnitRange{Int64}, 4, 6), IdentityRange(2:3), IdentityRange(3:5)) with eltype Int64 with indices 2:3×3:5 at index [1, 1]
Stacktrace:
 [1] throw_boundserror(::SubArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{IdentityRange{Int64},IdentityRange{Int64}},false}, ::Tuple{Int64,Int64}) at ./abstractarray.jl:484
 [2] checkbounds at ./abstractarray.jl:449 [inlined]
 [3] getindex(::SubArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{IdentityRange{Int64},IdentityRange{Int64}},false}, ::Int64, ::Int64) at ./subarray.jl:206
 [4] top-level scope at none:0

julia&gt; Vp[2,3]
10

julia&gt; A[2,3]
10"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">24</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">6</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">5</span>   <span class="pl-c1">9</span>  <span class="pl-c1">13</span>  <span class="pl-c1">17</span>  <span class="pl-c1">21</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-c1">18</span>  <span class="pl-c1">22</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">7</span>  <span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-c1">19</span>  <span class="pl-c1">23</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">8</span>  <span class="pl-c1">12</span>  <span class="pl-c1">16</span>  <span class="pl-c1">20</span>  <span class="pl-c1">24</span>

julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> <span class="pl-c1">view</span>(A, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>), <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-c1">18</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-c1">19</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(V)
(Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">2</span>),Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> V[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IdentityRanges

julia<span class="pl-k">&gt;</span> Vp <span class="pl-k">=</span> <span class="pl-c1">view</span>(A, <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>), <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>))
<span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>), <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>), <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)) with eltype Int64 with indices <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-c1">18</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-c1">19</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(Vp)
(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> Vp[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>), <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>), <span class="pl-c1">IdentityRange</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)) with eltype Int64 with indices <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span> at index [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">throw_boundserror</span>(<span class="pl-k">::</span><span class="pl-c1">SubArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{IdentityRange{Int64},IdentityRange{Int64}},false}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Int64,Int64}</span>) at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">484</span>
 [<span class="pl-c1">2</span>] checkbounds at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">449</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">SubArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{IdentityRange{Int64},IdentityRange{Int64}},false}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>subarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">206</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> Vp[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c1">10</span></pre></div>
</article></div>