<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-maskedarrays" class="anchor" aria-hidden="true" href="#maskedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MaskedArrays</h1>
<p dir="auto"><a href="https://github.com/darsnack/MaskedArrays.jl/actions"><img src="https://github.com/darsnack/MaskedArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">MaskedArrays.jl allows you to associated a bitmask with an array non-destructively. Any elements with a masked value of <code>false</code> are zero, while other elements are passed through. The original array is not modified. It provides two types: <code>MaskedArray</code> and <code>MaskedSliceArray</code>. Nothing is exported.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = rand(4, 5)
4×5 Matrix{Float64}:
 0.45442   0.323381  0.245189   0.9963    0.901239
 0.867445  0.358103  0.428182   0.888031  0.800996
 0.116383  0.499893  0.0768902  0.614683  0.23086
 0.840305  0.564109  0.477627   0.104402  0.0891596

julia&gt; m = x .&lt; 0.5
4×5 BitMatrix:
 1  1  1  0  0
 0  1  1  0  0
 1  1  1  0  1
 0  0  1  1  1

julia&gt; mask(x, m)
4×5 MaskedArray{Float64, 2, Matrix{Float64}}:
 0.45442   0.323381  0.245189   0.0       0.0
 0.0       0.358103  0.428182   0.0       0.0
 0.116383  0.499893  0.0768902  0.0       0.23086
 0.0       0.0       0.477627   0.104402  0.0891596"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.45442</span>   <span class="pl-c1">0.323381</span>  <span class="pl-c1">0.245189</span>   <span class="pl-c1">0.9963</span>    <span class="pl-c1">0.901239</span>
 <span class="pl-c1">0.867445</span>  <span class="pl-c1">0.358103</span>  <span class="pl-c1">0.428182</span>   <span class="pl-c1">0.888031</span>  <span class="pl-c1">0.800996</span>
 <span class="pl-c1">0.116383</span>  <span class="pl-c1">0.499893</span>  <span class="pl-c1">0.0768902</span>  <span class="pl-c1">0.614683</span>  <span class="pl-c1">0.23086</span>
 <span class="pl-c1">0.840305</span>  <span class="pl-c1">0.564109</span>  <span class="pl-c1">0.477627</span>   <span class="pl-c1">0.104402</span>  <span class="pl-c1">0.0891596</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> x <span class="pl-k">.&lt;</span> <span class="pl-c1">0.5</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> BitMatrix<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mask</span>(x, m)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> MaskedArray{Float64, <span class="pl-c1">2</span>, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">0.45442</span>   <span class="pl-c1">0.323381</span>  <span class="pl-c1">0.245189</span>   <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.358103</span>  <span class="pl-c1">0.428182</span>   <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.116383</span>  <span class="pl-c1">0.499893</span>  <span class="pl-c1">0.0768902</span>  <span class="pl-c1">0.0</span>       <span class="pl-c1">0.23086</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">0.477627</span>   <span class="pl-c1">0.104402</span>  <span class="pl-c1">0.0891596</span></pre></div>
<p dir="auto">You can also pass a <code>Vector</code> of indices to mask elements.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = ones(3, 2)
3×2 Matrix{Float64}:
 1.0  1.0
 1.0  1.0
 1.0  1.0

julia&gt; mask(x, [1, 5])
3×2 MaskedArray{Float64, 2, Matrix{Float64}}:
 1.0  0.0
 0.0  1.0
 0.0  0.0"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mask</span>(x, [<span class="pl-c1">1</span>, <span class="pl-c1">5</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> MaskedArray{Float64, <span class="pl-c1">2</span>, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Even complete slices of dimensions can be masked.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; mask(x, 1:2, :, :)
3×2×2 MaskedSliceArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}}:
[:, :, 1] =
 0.69798   0.353225
 0.646014  0.20619
 0.0       0.0

[:, :, 2] =
 0.318028  0.276218
 0.508333  0.274718
 0.0       0.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">mask</span>(x, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, :, :)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> MaskedSliceArray{Float64, <span class="pl-c1">3</span>, Array{Float64, <span class="pl-c1">3</span>}, Tuple{UnitRange{Int64}, Base<span class="pl-k">.</span>Slice{Base<span class="pl-k">.</span>OneTo{Int64}}, Base<span class="pl-k">.</span>Slice{Base<span class="pl-k">.</span>OneTo{Int64}}}}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.69798</span>   <span class="pl-c1">0.353225</span>
 <span class="pl-c1">0.646014</span>  <span class="pl-c1">0.20619</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.318028</span>  <span class="pl-c1">0.276218</span>
 <span class="pl-c1">0.508333</span>  <span class="pl-c1">0.274718</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">The original array can be obtained with <code>unmask</code>, and the masking can be made permanent with <code>freeze</code>.</p>
</article></div>