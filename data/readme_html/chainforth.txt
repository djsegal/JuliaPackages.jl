<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chainforthjl" class="anchor" aria-hidden="true" href="#chainforthjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChainForth.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a></p>

<p dir="auto">ChainForth.jl is an embedded virtual machine that helps you provide a highly secure but programmable, Turing-complete API layer at the edge of your Julia projects.</p>
<p dir="auto">It is a simple Forth-like environment interpreted (in the future hopefully also JIT-ed) in Julia,
which you can easily extend in native Julia to provide an API to the scripts,
and which you can easily extend by specifying your DSL in ChainForth itself.</p>
<p dir="auto">The following  example shows the use of an ad-hoc query language created with ChainForth.
The example defines the new word (function) <code>Last7Days</code>, that queries some historical data
specifying aggregation and selection:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def Last7Days
    HISTORY 5 mins
        STARTAT now 7 days -
        ENDAT now
        FIELDS TimeStamp High
;"><pre>def Last7Days
    HISTORY <span class="pl-c1">5</span> mins
        STARTAT now <span class="pl-c1">7</span> days <span class="pl-k">-</span>
        ENDAT now
        FIELDS TimeStamp High
;</pre></div>
<p dir="auto">The syntax used in this DSL was defined in the language itself.</p>
<p dir="auto">There is a super-minimal repl:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using ChainForth

julia&gt; ChainForth.repl()
ChainForth.jl v&quot;0 dev&quot;:
: double 2 * ;
 ok
: quadruple double double ;
 ok
3 quadruple .
12 ok"><pre class="notranslate"><code>julia&gt; using ChainForth

julia&gt; ChainForth.repl()
ChainForth.jl v"0 dev":
: double 2 * ;
 ok
: quadruple double double ;
 ok
3 quadruple .
12 ok
</code></pre></div>
<p dir="auto"><a href="https://github.com/tisztamo/ProgrammableAPI.jl">ProgrammableAPI.jl</a> is a way to integrate this into your project.</p>
<p dir="auto">Please read the source and the tests for more info.</p>
</article></div>