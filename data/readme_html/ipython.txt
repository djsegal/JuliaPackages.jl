<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-launch-ipython-in-julia" class="anchor" aria-hidden="true" href="#launch-ipython-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Launch IPython in Julia</h1>
<p><a href="https://github.com/tkf/IPython.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/tkf/IPython.jl/workflows/Run%20tests/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tkf/IPython.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1ae7b4f0f605ac796a5b4b08e3b7bdf9e6f03bb456b9507bf75cb3b7f9750856/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f746b662f49507974686f6e2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/tkf/IPython.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tkf/IPython.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8b886c2bcc365a0d471aa7cc056a5a33dcfb967b18b8916105d806d34d90feb4/687474703a2f2f636f6465636f762e696f2f6769746875622f746b662f49507974686f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkf/IPython.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="Example REPL session" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Run <code>using IPython</code> and then type <code>.</code> in empty <code>julia&gt;</code> prompt or run
<code>IPython.start_ipython()</code>.  You can switch back to Julia REPL by
<code>backspace</code> or <code>ctrl-h</code> key (like other REPL modes).  Re-entering
IPython keeps the previous state.  Use pre-defined <code>Main</code> object to
access Julia namespace from IPython.  Use <code>py"..."</code> string macro to
access Python namespace from Julia.</p>
<p><strong>Note:</strong>
First launch of IPython may be slow.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<h3><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia</h3>
<ul>
<li>PyCall</li>
</ul>
<h3><a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Python</h3>
<ul>
<li>Python 3.7 or above</li>
<li>IPython 7.0 or above</li>
</ul>
<h2><a id="user-content-accessing-julia-from-python" class="anchor" aria-hidden="true" href="#accessing-julia-from-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Julia from Python</h2>
<p>If simple <code>Main.eval("...")</code> and <code>Main.&lt;name&gt;</code> accessor is not enough,
<a href="https://github.com/JuliaPy/pyjulia">PyJulia</a> is a nice way to access Julia objects from Python.  For
example, you can import any Julia package from Python:</p>
<div class="highlight highlight-text-python-console position-relative" data-snippet-clipboard-copy-content="&gt;&gt;&gt; from julia import Base
&gt;&gt;&gt; Base.banner()
"><pre>&gt;&gt;&gt; <span class="pl-k">from</span> julia <span class="pl-k">import</span> Base
&gt;&gt;&gt; Base.banner()</pre></div>
<p>For more advanced/experimental Julia-(I)Python integration, see
<a href="http://ipyjulia-hacks.readthedocs.io/en/latest" rel="nofollow"><code>ipyjulia_hacks</code></a>.</p>
<h2><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configuration</h2>
<h3><a id="user-content-julia-mode-like-prompt" class="anchor" aria-hidden="true" href="#julia-mode-like-prompt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia-mode like prompt</h3>
<p>If you want IPython prompt to look like a part of Julia prompt, then add
the following snippet in <code>~/.ipython/profile_default/ipython_config.py</code>:</p>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="try:
    from ipython_jl.tools import JuliaModePrompt
except ImportError:
    pass
else:
    c.TerminalInteractiveShell.prompts_class = JuliaModePrompt
"><pre><span class="pl-k">try</span>:
    <span class="pl-k">from</span> <span class="pl-s1">ipython_jl</span>.<span class="pl-s1">tools</span> <span class="pl-k">import</span> <span class="pl-v">JuliaModePrompt</span>
<span class="pl-k">except</span> <span class="pl-v">ImportError</span>:
    <span class="pl-k">pass</span>
<span class="pl-k">else</span>:
    <span class="pl-s1">c</span>.<span class="pl-v">TerminalInteractiveShell</span>.<span class="pl-s1">prompts_class</span> <span class="pl-c1">=</span> <span class="pl-v">JuliaModePrompt</span></pre></div>
<p>Then the prompt would then look like <code>ipy 1&gt;</code> instead of <code>In [1]:</code>.
It also removes <code>Out[1]</code>.  Note that above setting does not change
your normal IPython prompts.</p>
</article></div>