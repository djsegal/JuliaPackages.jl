<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quasinewtonmethods" class="anchor" aria-hidden="true" href="#quasinewtonmethods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuasiNewtonMethods</h1>
<p><a href="https://chriselrod.github.io/QuasiNewtonMethods.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://chriselrod.github.io/QuasiNewtonMethods.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/chriselrod/QuasiNewtonMethods.jl/workflows/CI/badge.svg"><img src="https://github.com/chriselrod/QuasiNewtonMethods.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/chriselrod/QuasiNewtonMethods.jl/workflows/CI%20(Julia%20nightly)/badge.svg"><img src="https://github.com/chriselrod/QuasiNewtonMethods.jl/workflows/CI%20(Julia%20nightly)/badge.svg" alt="CI (Julia nightly)" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chriselrod/QuasiNewtonMethods.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1ef213bd8773292db72d984d7fb590dc96af3a0351b4ce6118eca8b8f9648787/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f51756173694e6577746f6e4d6574686f64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/chriselrod/QuasiNewtonMethods.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<hr>
<p>This library aims to be fast. It's intended use is for optimizing in statistical logdensity functions, in particular in conjunction with ProbabilityModels.jl and InplaceDHMC.jl (both libraries are still undergoing major development and are not yet usable). The API thus requires using <code>logdensity</code> functions, which <code>ProbabilityModels</code> will automatically define for a given model:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using QuasiNewtonMethods, StrideArrays
using Test

struct Rosenbrock end
function QuasiNewtonMethods.logdensity(::Rosenbrock, θ)
    s = zero(eltype(θ))
    N = length(θ) &gt;&gt; 1
    @inbounds @simd for i ∈ 1:N
        s -= 100(θ[i+N] - θ[i]^2)^2 + (1 - θ[i])^2
    end
    if isodd(length(θ))
        @inbounds δ = 1 - θ[end]
        -muladd(δ, δ, -s)
    else
        s
    end
end

function QuasiNewtonMethods.∂logdensity!(∇, ::Rosenbrock, θ) 
    s = zero(eltype(θ))
    N = length(θ) &gt;&gt; 1
    @inbounds @simd for i ∈ 1:N
        s -= 100(θ[i+N] - θ[i]^2)^2 + (1 - θ[i])^2
        ∇[i] = 400(θ[i+N] - θ[i]^2)*θ[i] + 2(1 - θ[i])
        ∇[i+N] = 200(θ[i]^2 - θ[i+N])
    end
    if isodd(length(θ))
        @inbounds δ = 1 - θ[end]
        s = -muladd(δ, δ, -s)
        @inbounds ∇[end] = 2δ
    end
    s
end
"><pre><span class="pl-k">using</span> QuasiNewtonMethods, StrideArrays
<span class="pl-k">using</span> Test

<span class="pl-k">struct</span> Rosenbrock <span class="pl-k">end</span>
<span class="pl-k">function</span> QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-en">logdensity</span>(<span class="pl-k">::</span><span class="pl-c1">Rosenbrock</span>, θ)
    s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(θ))
    N <span class="pl-k">=</span> <span class="pl-c1">length</span>(θ) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@simd</span> <span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
        s <span class="pl-k">-=</span> <span class="pl-c1">100</span>(θ[i<span class="pl-k">+</span>N] <span class="pl-k">-</span> θ[i]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> θ[i])<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> <span class="pl-c1">isodd</span>(<span class="pl-c1">length</span>(θ))
        <span class="pl-c1">@inbounds</span> δ <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> θ[<span class="pl-c1">end</span>]
        <span class="pl-k">-</span><span class="pl-c1">muladd</span>(δ, δ, <span class="pl-k">-</span>s)
    <span class="pl-k">else</span>
        s
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-en">∂logdensity!</span>(∇, <span class="pl-k">::</span><span class="pl-c1">Rosenbrock</span>, θ) 
    s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(θ))
    N <span class="pl-k">=</span> <span class="pl-c1">length</span>(θ) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@inbounds</span> <span class="pl-c1">@simd</span> <span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
        s <span class="pl-k">-=</span> <span class="pl-c1">100</span>(θ[i<span class="pl-k">+</span>N] <span class="pl-k">-</span> θ[i]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> θ[i])<span class="pl-k">^</span><span class="pl-c1">2</span>
        ∇[i] <span class="pl-k">=</span> <span class="pl-c1">400</span>(θ[i<span class="pl-k">+</span>N] <span class="pl-k">-</span> θ[i]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>θ[i] <span class="pl-k">+</span> <span class="pl-c1">2</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> θ[i])
        ∇[i<span class="pl-k">+</span>N] <span class="pl-k">=</span> <span class="pl-c1">200</span>(θ[i]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> θ[i<span class="pl-k">+</span>N])
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> <span class="pl-c1">isodd</span>(<span class="pl-c1">length</span>(θ))
        <span class="pl-c1">@inbounds</span> δ <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> θ[<span class="pl-c1">end</span>]
        s <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">muladd</span>(δ, δ, <span class="pl-k">-</span>s)
        <span class="pl-c1">@inbounds</span> ∇[<span class="pl-c1">end</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>δ
    <span class="pl-k">end</span>
    s
<span class="pl-k">end</span></pre></div>
<p>Example usage, and benchmark vs the equivalent method from <code>Optim.jl</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; n = 60 # set size
60

julia&gt; state = QuasiNewtonMethods.BFGSState{n}(undef);

julia&gt; x = @StrideArray randn(StaticInt(n));

julia&gt; @test abs(optimize!(state, Rosenbrock(), x)) &lt; eps()
Test Passed

julia&gt; @show QuasiNewtonMethods.optimum(state) .- 1;
QuasiNewtonMethods.optimum(state) .- 1 = [2.751932015598868e-11, 1.3031797863050087e-12, -1.5009105069907491e-12, 2.6655788687435233e-11, -2.244759933489604e-12, -1.579680830587904e-11, -1.1838985347623066e-10, 1.3630208073323047e-11, 1.982880526441022e-11, 5.3439475067307285e-11, -3.896738487441098e-11, 2.4940494114389367e-11, 2.1896706670077037e-11, -2.1127433136314266e-11, 1.4427570249608834e-11, 2.329803017175891e-11, -3.941846848931618e-12, 3.2440716779547074e-13, -5.52979884105298e-12, 1.6714185591126807e-11, -3.831268635678953e-12, 3.045141916402372e-11, 1.3429257705865894e-12, 1.957722872703016e-11, 9.442890913646806e-12, -4.360312111373332e-11, 2.250799546743565e-11, 1.6193268947972683e-11, -1.954936212911207e-11, -7.409961533255682e-12, 5.451172846449026e-11, 2.3572255258841324e-12, -5.270783809407931e-12, 5.5249804731261065e-11, -4.586775403936372e-12, -3.0561220221159147e-11, -2.37073916053987e-10, 2.8603786006442533e-11, 3.746403187676606e-11, 1.092077539510683e-10, -7.855049943827908e-11, 4.777400697264511e-11, 4.427724853428572e-11, -4.329003822078903e-11, 3.108424628806006e-11, 4.3983705566574827e-11, -6.195599588920686e-12, 3.228528555609955e-13, -8.1592510525752e-12, 3.213473931396038e-11, -7.304934435126142e-12, 5.92046411895808e-11, 3.838485085339016e-12, 4.019495847273902e-11, 1.7372103755519674e-11, -8.670275608579914e-11, 4.6741499559743716e-11, 3.335220988276433e-11, -3.7821412668392895e-11, -1.6192935881065296e-11]

julia&gt; @test all(x -&gt; x ≈ 1, QuasiNewtonMethods.optimum(state))
Test Passed

julia&gt; @test maximum(abs, QuasiNewtonMethods.gradient(state)) &lt; 1e-8
Test Passed

julia&gt; @benchmark optimize!($state, Rosenbrock(), $x)
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     450.655 μs (0.00% GC)
  median time:      452.243 μs (0.00% GC)
  mean time:        452.309 μs (0.00% GC)
  maximum time:     506.655 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1

julia&gt; using Optim, LineSearches

julia&gt; xa = Vector(x);

julia&gt; @benchmark Optim.maximize(x -&gt; QuasiNewtonMethods.logdensity(Rosenbrock(), x), (∇, x) -&gt; QuasiNewtonMethods.∂logdensity!(∇, Rosenbrock(), x), $xa, $(BFGS(linesearch=BackTracking(order=2))))
BenchmarkTools.Trial:
  memory estimate:  291.27 KiB
  allocs estimate:  2483
  --------------
  minimum time:     2.640 ms (0.00% GC)
  median time:      2.657 ms (0.00% GC)
  mean time:        2.673 ms (0.31% GC)
  maximum time:     4.242 ms (34.59% GC)
  --------------
  samples:          1871
  evals/sample:     1
"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">60</span> <span class="pl-c"><span class="pl-c">#</span> set size</span>
<span class="pl-c1">60</span>

julia<span class="pl-k">&gt;</span> state <span class="pl-k">=</span> QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-c1">BFGSState</span><span class="pl-c1">{n}</span>(undef);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">@StrideArray</span> <span class="pl-c1">randn</span>(<span class="pl-c1">StaticInt</span>(n));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">abs</span>(<span class="pl-c1">optimize!</span>(state, <span class="pl-c1">Rosenbrock</span>(), x)) <span class="pl-k">&lt;</span> <span class="pl-c1">eps</span>()
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-c1">optimum</span>(state) <span class="pl-k">.-</span> <span class="pl-c1">1</span>;
QuasiNewtonMethods.optimum(state) .- 1 = [2.751932015598868e-11, 1.3031797863050087e-12, -1.5009105069907491e-12, 2.6655788687435233e-11, -2.244759933489604e-12, -1.579680830587904e-11, -1.1838985347623066e-10, 1.3630208073323047e-11, 1.982880526441022e-11, 5.3439475067307285e-11, -3.896738487441098e-11, 2.4940494114389367e-11, 2.1896706670077037e-11, -2.1127433136314266e-11, 1.4427570249608834e-11, 2.329803017175891e-11, -3.941846848931618e-12, 3.2440716779547074e-13, -5.52979884105298e-12, 1.6714185591126807e-11, -3.831268635678953e-12, 3.045141916402372e-11, 1.3429257705865894e-12, 1.957722872703016e-11, 9.442890913646806e-12, -4.360312111373332e-11, 2.250799546743565e-11, 1.6193268947972683e-11, -1.954936212911207e-11, -7.409961533255682e-12, 5.451172846449026e-11, 2.3572255258841324e-12, -5.270783809407931e-12, 5.5249804731261065e-11, -4.586775403936372e-12, -3.0561220221159147e-11, -2.37073916053987e-10, 2.8603786006442533e-11, 3.746403187676606e-11, 1.092077539510683e-10, -7.855049943827908e-11, 4.777400697264511e-11, 4.427724853428572e-11, -4.329003822078903e-11, 3.108424628806006e-11, 4.3983705566574827e-11, -6.195599588920686e-12, 3.228528555609955e-13, -8.1592510525752e-12, 3.213473931396038e-11, -7.304934435126142e-12, 5.92046411895808e-11, 3.838485085339016e-12, 4.019495847273902e-11, 1.7372103755519674e-11, -8.670275608579914e-11, 4.6741499559743716e-11, 3.335220988276433e-11, -3.7821412668392895e-11, -1.6192935881065296e-11]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">≈</span> <span class="pl-c1">1</span>, QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-c1">optimum</span>(state))
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">maximum</span>(abs, QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-c1">gradient</span>(state)) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-8</span>
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">optimize!</span>(<span class="pl-k">$</span>state, <span class="pl-c1">Rosenbrock</span>(), <span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">450.655</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">452.243</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">452.309</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">506.655</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Optim, LineSearches

julia<span class="pl-k">&gt;</span> xa <span class="pl-k">=</span> <span class="pl-c1">Vector</span>(x);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> Optim<span class="pl-k">.</span><span class="pl-c1">maximize</span>(x <span class="pl-k">-&gt;</span> QuasiNewtonMethods<span class="pl-k">.</span><span class="pl-c1">logdensity</span>(<span class="pl-c1">Rosenbrock</span>(), x), (∇, x) <span class="pl-k">-&gt;</span> QuasiNewtonMethods.<span class="pl-c1">∂logdensity!</span>(∇, <span class="pl-c1">Rosenbrock</span>(), x), <span class="pl-k">$</span>xa, <span class="pl-k">$</span>(<span class="pl-c1">BFGS</span>(linesearch<span class="pl-k">=</span><span class="pl-c1">BackTracking</span>(order<span class="pl-k">=</span><span class="pl-c1">2</span>))))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">291.27</span> KiB
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">2483</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">2.640</span> ms (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">2.657</span> ms (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">2.673</span> ms (<span class="pl-c1">0.31</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">4.242</span> ms (<span class="pl-c1">34.59</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">1871</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span></pre></div>
<p>Note that in most problems, evaluating the <code>logdensity</code> function will be the bottleneck, not the speed of the optimization library itself.
Thus don't expect a performance improvement like this for real problems.
Additionally, QuasiNewtonMethods.jl only provides a backtracking linesearch at the moment. If a different optimization algorithm provides better
results, yielding convergence in fewer function evaluations, then again <code>Optim.jl</code> is likely to be faster.</p>
</article></div>