<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-printtypestersely" class="anchor" aria-hidden="true" href="#printtypestersely"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrintTypesTersely</h1>
<p dir="auto"><a href="https://github.com/CTUAvastLab/PrintTypesTersely.jl/actions?query=workflow%3ACI"><img src="https://github.com/CTUAvastLab/PrintTypesTersely.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/CTUAvastLab/PrintTypesTersely.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9989e34e2f3691dcf0cba6c9ace54cc67fa3e5ee0165dd61c31a1769622f58f6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f43545541766173744c61622f5072696e74547970657354657273656c792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/CTUAvastLab/PrintTypesTersely.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/CTUAvastLab/PrintTypesTersely.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/db98bc1fb4243ccc07fb0ba8090c50d6bddaa84ec725571b9befc27b5048bfcd/687474703a2f2f636f6465636f762e696f2f6769746875622f43545541766173744c61622f5072696e74547970657354657273656c792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/CTUAvastLab/PrintTypesTersely.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">When working with recursive structures containing parametric types, printing types (e.g. in error) gets very verbose.</p>
<p dir="auto"><strong>PrintTypesTersely</strong> modifies printing types so only the first type is printed.</p>
<p dir="auto">By default the functionality is turned off, but you can turn it on by:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PrintTypesTersely
PrintTypesTersely.on()"><pre><span class="pl-k">using</span> PrintTypesTersely
PrintTypesTersely<span class="pl-k">.</span><span class="pl-c1">on</span>()</pre></div>
<p dir="auto">now it starts to shorten types print.
So instead of e.g. <code>A{Union{Int, Missing}}</code>, you'll see only <code>A{…}</code>.
You can disable this behavior by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="PrintTypesTersely.on()"><pre>PrintTypesTersely<span class="pl-k">.</span><span class="pl-c1">on</span>()</pre></div>
<p dir="auto">or you can enable the behavior only for some block of code using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="PrintTypesTersely.with_state(true) do
    @test repr(A{Vector{Int}}) == &quot;A{…}&quot;
    @test repr(A{Union{Int, Missing}}) == &quot;A{…}&quot;
    @test repr(B{Int, Float32}) == &quot;B{…}&quot;
    @test repr(B{Int}) == &quot;B{…}&quot;
end"><pre>PrintTypesTersely<span class="pl-k">.</span><span class="pl-c1">with_state</span>(<span class="pl-c1">true</span>) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">repr</span>(A{Vector{Int}}) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>A{…}<span class="pl-pds">"</span></span>
    <span class="pl-c1">@test</span> <span class="pl-c1">repr</span>(A{Union{Int, Missing}}) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>A{…}<span class="pl-pds">"</span></span>
    <span class="pl-c1">@test</span> <span class="pl-c1">repr</span>(B{Int, Float32}) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>B{…}<span class="pl-pds">"</span></span>
    <span class="pl-c1">@test</span> <span class="pl-c1">repr</span>(B{Int}) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>B{…}<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">That's all, basically.</p>
<p dir="auto">The default value is <code>false</code> by default, because when turned on, it breaks compilation of some packages.</p>
</article></div>