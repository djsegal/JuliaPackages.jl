<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-symbolictensors" class="anchor" aria-hidden="true" href="#symbolictensors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SymbolicTensors</h1>
<p><a href="https://travis-ci.com/rjrosati/SymbolicTensors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c37201ca82db056970718e6855d0e922b07a81a7ecb045cb1cfeec7d42ce2394/68747470733a2f2f7472617669732d63692e636f6d2f726a726f736174692f53796d626f6c696354656e736f72732e6a6c2e7376673f746f6b656e3d7a4d445833476d435a6264426366394a574d6470266272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/rjrosati/SymbolicTensors.jl.svg?token=zMDX3GmCZbdBcf9JWMdp&amp;branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rjrosati/SymbolicTensors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a93e8aaa4bb831122811ba0d80d4251965496e35c1d2f3e4f6ab5524aae0a06/68747470733a2f2f636f6465636f762e696f2f67682f726a726f736174692f53796d626f6c696354656e736f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4a4b67696274534a7a63" alt="codecov" data-canonical-src="https://codecov.io/gh/rjrosati/SymbolicTensors.jl/branch/master/graph/badge.svg?token=JKgibtSJzc" style="max-width:100%;"></a></p>
<p>Many numerical tensor manipulation packages exist (e.g. <code>Einsum.jl</code>), but treating tensors at a purely numeric level throws away a lot of potential optimizations.
Often, it's possible to exploit the symmetries of a problem to dramatically reduce the calculation steps necessary, or perform some tensor contractions symbolically rather than numerically.</p>
<p><code>SymbolicTensors.jl</code> is designed to exploit these simplifications to perform symbolic calculations and generate more efficient input into numeric tensor packages than you would write by hand. It based on <code>SymPy.jl</code>, <code>sympy.tensor.tensor</code>, <code>xTensor</code>, and <code>ITensors.jl</code>.</p>
<p>See the talk about this package given at JuliaCon 2020: <a href="https://www.youtube.com/watch?v=_b4JIv044GY" rel="nofollow">https://www.youtube.com/watch?v=_b4JIv044GY</a></p>
<h2><a id="user-content-example-calculations" class="anchor" aria-hidden="true" href="#example-calculations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example calculations</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SymbolicTensors
using SymPy

spacetime = TensorIndexType(&quot;spacetime&quot;,&quot;f&quot;)
@indices spacetime μ ν σ ρ η
x = TensorHead(&quot;x&quot;,[spacetime])
δ = spacetime.delta
# one way to write the metric on a sphere
g = 4*δ(-μ,-ν)/(1+x(μ)*x(ν)*δ(-μ,-ν))^2

# compute the christoffel symbols
Γ = (diff(g(-μ,-ν),x(σ)) - diff(g(-ν,-σ),x(μ)) + diff(g(-σ,-μ),x(ν)))/2
Γ = factor(contract_metric(canon_bp(Γ),spacetime.metric))
"><pre><span class="pl-k">using</span> SymbolicTensors
<span class="pl-k">using</span> SymPy

spacetime <span class="pl-k">=</span> <span class="pl-c1">TensorIndexType</span>(<span class="pl-s"><span class="pl-pds">"</span>spacetime<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>)
<span class="pl-c1">@indices</span> spacetime μ ν σ ρ η
x <span class="pl-k">=</span> <span class="pl-c1">TensorHead</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>,[spacetime])
δ <span class="pl-k">=</span> spacetime<span class="pl-k">.</span>delta
<span class="pl-c"><span class="pl-c">#</span> one way to write the metric on a sphere</span>
g <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">δ</span>(<span class="pl-k">-</span>μ,<span class="pl-k">-</span>ν)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">x</span>(μ)<span class="pl-k">*</span><span class="pl-c1">x</span>(ν)<span class="pl-k">*</span><span class="pl-c1">δ</span>(<span class="pl-k">-</span>μ,<span class="pl-k">-</span>ν))<span class="pl-k">^</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> compute the christoffel symbols</span>
Γ <span class="pl-k">=</span> (<span class="pl-c1">diff</span>(<span class="pl-c1">g</span>(<span class="pl-k">-</span>μ,<span class="pl-k">-</span>ν),<span class="pl-c1">x</span>(σ)) <span class="pl-k">-</span> <span class="pl-c1">diff</span>(<span class="pl-c1">g</span>(<span class="pl-k">-</span>ν,<span class="pl-k">-</span>σ),<span class="pl-c1">x</span>(μ)) <span class="pl-k">+</span> <span class="pl-c1">diff</span>(<span class="pl-c1">g</span>(<span class="pl-k">-</span>σ,<span class="pl-k">-</span>μ),<span class="pl-c1">x</span>(ν)))<span class="pl-k">/</span><span class="pl-c1">2</span>
Γ <span class="pl-k">=</span> <span class="pl-c1">factor</span>(<span class="pl-c1">contract_metric</span>(<span class="pl-c1">canon_bp</span>(Γ),spacetime<span class="pl-k">.</span>metric))</pre></div>
<p>At this point <code>Γ</code> is a symbolic tensor expression, written in Einstein notation.
It could represent 2 dimensional or 10,000 dimensional tensors in the same form -- this is one of the great advantages of working at the symbolic tensor level.</p>
<p>We could manipulate <code>Γ</code> further, or convert it into an array.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# convert Γ to Array{Sym}
xarr = symbols(&quot;x y&quot;,real=true)
garr = replace_with_arrays(g,Dict(x(ρ) =&gt; xarr, spacetime.delta(-ρ,-η) =&gt; [1 0; 0 1]))
Γarr = replace_with_arrays(Γ,Dict(x(ρ) =&gt; xarr, spacetime.delta(-ρ,-η) =&gt; [1 0; 0 1], spacetime =&gt; garr))
"><pre><span class="pl-c"><span class="pl-c">#</span> convert Γ to Array{Sym}</span>
xarr <span class="pl-k">=</span> <span class="pl-c1">symbols</span>(<span class="pl-s"><span class="pl-pds">"</span>x y<span class="pl-pds">"</span></span>,real<span class="pl-k">=</span><span class="pl-c1">true</span>)
garr <span class="pl-k">=</span> <span class="pl-c1">replace_with_arrays</span>(g,<span class="pl-c1">Dict</span>(<span class="pl-c1">x</span>(ρ) <span class="pl-k">=&gt;</span> xarr, spacetime<span class="pl-k">.</span><span class="pl-c1">delta</span>(<span class="pl-k">-</span>ρ,<span class="pl-k">-</span>η) <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]))
Γarr <span class="pl-k">=</span> <span class="pl-c1">replace_with_arrays</span>(Γ,<span class="pl-c1">Dict</span>(<span class="pl-c1">x</span>(ρ) <span class="pl-k">=&gt;</span> xarr, spacetime<span class="pl-k">.</span><span class="pl-c1">delta</span>(<span class="pl-k">-</span>ρ,<span class="pl-k">-</span>η) <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>], spacetime <span class="pl-k">=&gt;</span> garr))</pre></div>
<p>Now that we have an array in <code>Γarr</code>, <code>Quote</code> allows us to convert it into a native Julia function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Then Quote it and eval to a Julia function
quot = Quote(&quot;Christoffel&quot;,Γarr,[ x for x in xarr])
Christ = eval(quot)
Christ(0,1)
"><pre><span class="pl-c"><span class="pl-c">#</span> Then Quote it and eval to a Julia function</span>
quot <span class="pl-k">=</span> <span class="pl-c1">Quote</span>(<span class="pl-s"><span class="pl-pds">"</span>Christoffel<span class="pl-pds">"</span></span>,Γarr,[ x <span class="pl-k">for</span> x <span class="pl-k">in</span> xarr])
Christ <span class="pl-k">=</span> <span class="pl-c1">eval</span>(quot)
<span class="pl-c1">Christ</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-rough-todo" class="anchor" aria-hidden="true" href="#rough-todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rough TODO</h2>
<ul>
<li>Nicer errors</li>
<li>testing coverage</li>
<li>add conversion to ITensors or equivalent</li>
<li>documentation</li>
<li>symbolic derivatives?</li>
</ul>
<h2><a id="user-content-known-bugs" class="anchor" aria-hidden="true" href="#known-bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>known bugs</h2>
<ul>
<li>check issues</li>
</ul>
</article></div>