<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-wintypesjl" class="anchor" aria-hidden="true" href="#wintypesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WinTypes.jl</h1>
<p>This package defines aliases in Julia to <a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types" rel="nofollow">Windows Data types</a>.</p>
<p><a href="https://musm.github.io/WinTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/538c5843ffec23dd500a7fc00497bc1947d9d2ad4c3b62f61dcb0968ac3eb947/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-blue.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add WinTypes
"><pre>pkg<span class="pl-k">&gt;</span> add WinTypes</pre></div>
<h2><a id="user-content-motivation--examples" class="anchor" aria-hidden="true" href="#motivation--examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation &amp; Examples</h2>
<p>The point of this package is to make it easier and more convenient to wrap Windows API function calls in Julia.
As a consequence, this package also improves readability with respect to the original Windows API function definitions.</p>
<p>Here's an example comparing wraping Windows API functions with and without <code>WinTypes</code>:</p>
<p><strong>Using <code>WinTypes</code> a Windows API call would look something like:</strong></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WinTypes: HANDLE, DWORD, BOOL

function get_console_mode()
    STD_OUTPUT_HANDLE = -11
    hOutput = ccall(:GetStdHandle, stdcall, HANDLE, (DWORD,), STD_OUTPUT_HANDLE % DWORD)
    dwMode = Ref{DWORD}()
    ccall(:GetConsoleMode, stdcall, BOOL, (HANDLE, Ref{DWORD}), hOutput, dwMode)
    return dwMode[]
end
"><pre><span class="pl-k">using</span> WinTypes<span class="pl-k">:</span> HANDLE, DWORD, BOOL

<span class="pl-k">function</span> <span class="pl-en">get_console_mode</span>()
    STD_OUTPUT_HANDLE <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">11</span>
    hOutput <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(<span class="pl-c1">:GetStdHandle</span>, stdcall, HANDLE, (DWORD,), STD_OUTPUT_HANDLE <span class="pl-k">%</span> DWORD)
    dwMode <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{DWORD}</span>()
    <span class="pl-c1">ccall</span>(<span class="pl-c1">:GetConsoleMode</span>, stdcall, BOOL, (HANDLE, Ref{DWORD}), hOutput, dwMode)
    <span class="pl-k">return</span> dwMode[]
<span class="pl-k">end</span></pre></div>
<p>Compare this to the call without this package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
function get_console_mode()
    STD_OUTPUT_HANDLE = -11
    hOutput = ccall(:GetStdHandle, stdcall, Ptr{Cvoid}, (UInt32,), STD_OUTPUT_HANDLE % UInt32)
    dwMode = Ref{UInt32}()
    ccall(:GetConsoleMode, stdcall, Int32, (Ref{Cvoid}, Ref{UInt32}), hOutput, dwMode)
    return dwMode[]
end
"><pre><span class="pl-k">function</span> <span class="pl-en">get_console_mode</span>()
    STD_OUTPUT_HANDLE <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">11</span>
    hOutput <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(<span class="pl-c1">:GetStdHandle</span>, stdcall, Ptr{Cvoid}, (UInt32,), STD_OUTPUT_HANDLE <span class="pl-k">%</span> UInt32)
    dwMode <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{UInt32}</span>()
    <span class="pl-c1">ccall</span>(<span class="pl-c1">:GetConsoleMode</span>, stdcall, Int32, (Ref{Cvoid}, Ref{UInt32}), hOutput, dwMode)
    <span class="pl-k">return</span> dwMode[]
<span class="pl-k">end</span></pre></div>
<p>Finally, here are the corresponding Windows API function syntax definitions in <code>C</code>:</p>
<div class="highlight highlight-source-c position-relative" data-snippet-clipboard-copy-content="HANDLE WINAPI GetStdHandle(
  _In_ DWORD nStdHandle
);
"><pre>HANDLE WINAPI <span class="pl-en">GetStdHandle</span>(
  _In_ DWORD nStdHandle
);</pre></div>
<div class="highlight highlight-source-c position-relative" data-snippet-clipboard-copy-content="BOOL WINAPI GetConsoleMode(
  _In_  HANDLE  hConsoleHandle,
  _Out_ LPDWORD lpMode
);
"><pre>BOOL WINAPI <span class="pl-en">GetConsoleMode</span>(
  _In_  HANDLE  hConsoleHandle,
  _Out_ LPDWORD lpMode
);</pre></div>
<p>Using <code>WinTypes</code> to wrap these APIs is both simpler and more readible, making it easier without having to manually look up the corresponding Windows data types.</p>
<h2><a id="user-content-alias-list" class="anchor" aria-hidden="true" href="#alias-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alias List</h2>
<p>Refer to
<a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types" rel="nofollow">https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types</a>
for detailed documentation on each constant.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="FALSE     = Cint(0)
TRUE      = Cint(1)

BYTE      = Cuchar
WORD      = Cushort
DWORD     = Culong
DWORDLONG = UInt64
DWORD32   = UInt32
DWORD64   = UInt64

BOOL      = Cint
BOOLEAN   = BYTE

CHAR      = Cchar
CCHAR     = Cchar

FLOAT     = Cfloat

LONG      = Culong
ULONG     = Culong
LONG32    = Cint
LONG64    = Int64
LONG_PTR  = Int

SHORT     = Cshort
USHORT    = Cushort

ATOM      = WORD
LANGID    = WORD

COLORREF  = DWORD
LGRPID    = DWORD
LCTYPE    = DWORD

LCID      = DWORD

INT       = Int32
INT8      = Int8
INT16     = Int16
INT32     = Int32
INT64     = Int64
INT_PTR   = Int
UINT_PTR  = UInt

WPARAM    = UINT_PTR
LPARAM    = LONG_PTR

HANDLE = Ptr{Cvoid}

HACCEL       = HANDLE
HBITMAP      = HANDLE
HBRUSH       = HANDLE
HCOLORSPACE  = HANDLE
HCONV        = HANDLE
HCONVLIST    = HANDLE
HDC          = HANDLE
HDDEDATA     = HANDLE
HDESK        = HANDLE
HDROP        = HANDLE
HDWP         = HANDLE
HENHMETAFILE = HANDLE
HFILE        = Cint
HFONT        = HANDLE
HGDIOBJ      = HANDLE
HGLOBAL      = HANDLE
HHOOK        = HANDLE
HICON        = HANDLE
HCURSOR      = HICON
HINSTANCE    = HANDLE
HKEY         = HANDLE
HKL          = HANDLE
HLOCAL       = HANDLE
HMENU        = HANDLE
HMETAFILE    = HANDLE
HMODULE      = HANDLE
HMONITOR     = HANDLE
HPALETTE     = HANDLE
HPEN         = HANDLE
HRESULT      = Clong
HRGN         = HANDLE
HRSRC        = HANDLE
HSZ          = HANDLE
HWINSTA      = HANDLE
HWND         = HANDLE

PHANDLE = Ptr{HANDLE}

UCHAR   = Cuchar
WCHAR   = Cwchar_t
PWCHAR  = Ptr{WCHAR}

PWORD   = Ptr{WORD}
LPWORD  = Ptr{WORD}
PDWORD  = Ptr{DWORD}
LPDWORD = Ptr{DWORD}

VOID    = Cvoid
PVOID   = Ptr{Cvoid}
LPVOID  = Ptr{Cvoid}
LPCVOID = Ptr{Cvoid}

LPINT   = Ptr{Cint}
PINT    = Ptr{Cint}

PSTR    = Ptr{CHAR}
PCSTR   = Ptr{CHAR}
LPSTR   = Ptr{CHAR}
LPCSTR  = Ptr{CHAR}

PWSTR   = Ptr{WCHAR}
PCWSTR  = Ptr{WCHAR}
LPWSTR  = Ptr{WCHAR}
LPCWSTR = Ptr{WCHAR}
"><pre>FALSE     <span class="pl-k">=</span> <span class="pl-c1">Cint</span>(<span class="pl-c1">0</span>)
TRUE      <span class="pl-k">=</span> <span class="pl-c1">Cint</span>(<span class="pl-c1">1</span>)

BYTE      <span class="pl-k">=</span> Cuchar
WORD      <span class="pl-k">=</span> Cushort
DWORD     <span class="pl-k">=</span> Culong
DWORDLONG <span class="pl-k">=</span> UInt64
DWORD32   <span class="pl-k">=</span> UInt32
DWORD64   <span class="pl-k">=</span> UInt64

BOOL      <span class="pl-k">=</span> Cint
BOOLEAN   <span class="pl-k">=</span> BYTE

CHAR      <span class="pl-k">=</span> Cchar
CCHAR     <span class="pl-k">=</span> Cchar

FLOAT     <span class="pl-k">=</span> Cfloat

LONG      <span class="pl-k">=</span> Culong
ULONG     <span class="pl-k">=</span> Culong
LONG32    <span class="pl-k">=</span> Cint
LONG64    <span class="pl-k">=</span> Int64
LONG_PTR  <span class="pl-k">=</span> Int

SHORT     <span class="pl-k">=</span> Cshort
USHORT    <span class="pl-k">=</span> Cushort

ATOM      <span class="pl-k">=</span> WORD
LANGID    <span class="pl-k">=</span> WORD

COLORREF  <span class="pl-k">=</span> DWORD
LGRPID    <span class="pl-k">=</span> DWORD
LCTYPE    <span class="pl-k">=</span> DWORD

LCID      <span class="pl-k">=</span> DWORD

INT       <span class="pl-k">=</span> Int32
INT8      <span class="pl-k">=</span> Int8
INT16     <span class="pl-k">=</span> Int16
INT32     <span class="pl-k">=</span> Int32
INT64     <span class="pl-k">=</span> Int64
INT_PTR   <span class="pl-k">=</span> Int
UINT_PTR  <span class="pl-k">=</span> UInt

WPARAM    <span class="pl-k">=</span> UINT_PTR
LPARAM    <span class="pl-k">=</span> LONG_PTR

HANDLE <span class="pl-k">=</span> Ptr{Cvoid}

HACCEL       <span class="pl-k">=</span> HANDLE
HBITMAP      <span class="pl-k">=</span> HANDLE
HBRUSH       <span class="pl-k">=</span> HANDLE
HCOLORSPACE  <span class="pl-k">=</span> HANDLE
HCONV        <span class="pl-k">=</span> HANDLE
HCONVLIST    <span class="pl-k">=</span> HANDLE
HDC          <span class="pl-k">=</span> HANDLE
HDDEDATA     <span class="pl-k">=</span> HANDLE
HDESK        <span class="pl-k">=</span> HANDLE
HDROP        <span class="pl-k">=</span> HANDLE
HDWP         <span class="pl-k">=</span> HANDLE
HENHMETAFILE <span class="pl-k">=</span> HANDLE
HFILE        <span class="pl-k">=</span> Cint
HFONT        <span class="pl-k">=</span> HANDLE
HGDIOBJ      <span class="pl-k">=</span> HANDLE
HGLOBAL      <span class="pl-k">=</span> HANDLE
HHOOK        <span class="pl-k">=</span> HANDLE
HICON        <span class="pl-k">=</span> HANDLE
HCURSOR      <span class="pl-k">=</span> HICON
HINSTANCE    <span class="pl-k">=</span> HANDLE
HKEY         <span class="pl-k">=</span> HANDLE
HKL          <span class="pl-k">=</span> HANDLE
HLOCAL       <span class="pl-k">=</span> HANDLE
HMENU        <span class="pl-k">=</span> HANDLE
HMETAFILE    <span class="pl-k">=</span> HANDLE
HMODULE      <span class="pl-k">=</span> HANDLE
HMONITOR     <span class="pl-k">=</span> HANDLE
HPALETTE     <span class="pl-k">=</span> HANDLE
HPEN         <span class="pl-k">=</span> HANDLE
HRESULT      <span class="pl-k">=</span> Clong
HRGN         <span class="pl-k">=</span> HANDLE
HRSRC        <span class="pl-k">=</span> HANDLE
HSZ          <span class="pl-k">=</span> HANDLE
HWINSTA      <span class="pl-k">=</span> HANDLE
HWND         <span class="pl-k">=</span> HANDLE

PHANDLE <span class="pl-k">=</span> Ptr{HANDLE}

UCHAR   <span class="pl-k">=</span> Cuchar
WCHAR   <span class="pl-k">=</span> Cwchar_t
PWCHAR  <span class="pl-k">=</span> Ptr{WCHAR}

PWORD   <span class="pl-k">=</span> Ptr{WORD}
LPWORD  <span class="pl-k">=</span> Ptr{WORD}
PDWORD  <span class="pl-k">=</span> Ptr{DWORD}
LPDWORD <span class="pl-k">=</span> Ptr{DWORD}

VOID    <span class="pl-k">=</span> Cvoid
PVOID   <span class="pl-k">=</span> Ptr{Cvoid}
LPVOID  <span class="pl-k">=</span> Ptr{Cvoid}
LPCVOID <span class="pl-k">=</span> Ptr{Cvoid}

LPINT   <span class="pl-k">=</span> Ptr{Cint}
PINT    <span class="pl-k">=</span> Ptr{Cint}

PSTR    <span class="pl-k">=</span> Ptr{CHAR}
PCSTR   <span class="pl-k">=</span> Ptr{CHAR}
LPSTR   <span class="pl-k">=</span> Ptr{CHAR}
LPCSTR  <span class="pl-k">=</span> Ptr{CHAR}

PWSTR   <span class="pl-k">=</span> Ptr{WCHAR}
PCWSTR  <span class="pl-k">=</span> Ptr{WCHAR}
LPWSTR  <span class="pl-k">=</span> Ptr{WCHAR}
LPCWSTR <span class="pl-k">=</span> Ptr{WCHAR}</pre></div>
</article></div>