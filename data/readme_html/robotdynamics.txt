<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/RoboticExplorationLab/RobotDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1ca579128d0b963640613d3755f728cf9aa9c04a/68747470733a2f2f7472617669732d63692e636f6d2f526f626f7469634578706c6f726174696f6e4c61622f526f626f7444796e616d6963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/RoboticExplorationLab/RobotDynamics.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-robotdynamicsjl" class="anchor" aria-hidden="true" href="#robotdynamicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RobotDynamics.jl</h1>
<p>This purpose of this package is to provide a common interface for calling systems with
forced dynamics, i.e. dynamics of the form <code>xdot = f(x,u,t)</code> where <code>x</code> is an n-dimensional
state vector and <code>u</code> is an m-dimensional control vector.</p>
<p>A model is defined by creating a custom type that inherits from <code>AbstractModel</code> and then
defining a custom <code>Dynamics.dynamics</code> function on your model, along with <code>Base.size</code> that
gives n and m. With this information, <code>Dynamics.jl</code> provides methods for computing discrete
dynamics as well as continuous and discrete time dynamics Jacobians.</p>
<p>This package also supports dynamics of rigid bodies, whose state is defined by a position,
orientation, and linear and angular velocities. This package provides methods that correctly
compute the dynamics Jacobians for the 3D attitude representions implemented in
<code>DifferentialRotations.jl</code>.</p>
<p>Internally, this package makes use of the <code>Knotpoint</code> type that is a custom type that simply
stores the state and control vectors along with the current time and time step length all
together in a single type.</p>
</article></div>