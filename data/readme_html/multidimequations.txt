<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multidimequations" class="anchor" aria-hidden="true" href="#multidimequations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MultiDimEquations</h1>
<p>Allows to write multi-dimensional equations in Julia using an easy and compact syntax:</p>
<pre><code>@meq nTrees!(r in reg, sp in species, dc in diameterClass[2-end], y in years) = nTrees_(r, sp, dc, y)*(1-mortRate_(r, sp, dc, y-1) - promotionRate_(r, sp, dc, y-1))) +  promotionRate_(r, sp, dc-1, y-1)
</code></pre>
<p>It is somehow similar to Algebraic modeling language (AML) like GAMS or Julia/JuMP, but outside the domain of optimisation.</p>
<p><a href="https://travis-ci.org/sylvaticus/MultiDimEquations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc3c8c2b661c42c7dd4273830f12a78b0892f4fd/68747470733a2f2f7472617669732d63692e6f72672f73796c766174696375732f4d756c746944696d4571756174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sylvaticus/MultiDimEquations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/sylvaticus/MultiDimEquations.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ebd4f3ae712751a65ed0f101eced9174aa57e140/687474703a2f2f636f6465636f762e696f2f6769746875622f73796c766174696375732f4d756c746944696d4571756174696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/sylvaticus/MultiDimEquations.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=MultiDimEquations&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/dd5ded3206b77996f8459a6bb14833065d8808b2/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d756c746944696d4571756174696f6e735f302e362e737667" alt="MultiDimEquations" data-canonical-src="http://pkg.julialang.org/badges/MultiDimEquations_0.6.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=MultiDimEquations&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/dd5ded3206b77996f8459a6bb14833065d8808b2/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d756c746944696d4571756174696f6e735f302e362e737667" alt="MultiDimEquations" data-canonical-src="http://pkg.julialang.org/badges/MultiDimEquations_0.6.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<ul>
<li><code>Pkg.add("MultiDimEquations")</code></li>
</ul>
<h2><a id="user-content-making-available-the-package" class="anchor" aria-hidden="true" href="#making-available-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Making available the package</h2>
<p>Due to the fact that the functions to access the data are dynamically created at run time, and would not be available to you with a normal <code>import &lt;package&gt;</code>, you have instead to include the file in your program:</p>
<pre><code>include("$(Pkg.dir())/MultiDimEquations/src/MultiDimEquations.jl")
</code></pre>
<h2><a id="user-content-definition-of-the-variables" class="anchor" aria-hidden="true" href="#definition-of-the-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Definition of the variables:</h2>
<p>Define each group of variables with their associated data source. At the moment MultiDimEquations support only DataFrame in long format, i.e. in the format parameter|dim1|dim2|...|value</p>
<pre><code>df = wsv"""
reg	prod	var	value
us	banana	production	10
us	banana	transfCoef	0.6
us	banana	trValues	2
us	apples	production	7
us	apples	transfCoef	0.7
us	apples	trValues	5
us	juice	production	NA
us	juice	transfCoef	NA
us	juice	trValues	NA
eu	banana	production	5
eu	banana	transfCoef	0.7
eu	banana	trValues	1
eu	apples	production	8
eu	apples	transfCoef	0.8
eu	apples	trValues	4
eu	juice	production	NA
eu	juice	transfCoef	NA
eu	juice	trValues    NA
"""

variables =  vcat(unique(dropna(df[:var])),["consumption"])
defVars(variables,df;dfName="df",varNameCol="var", valueCol="value")
</code></pre>
<p>Each time you run <code>defVars()</code>, access functions are automatically created for each variable in the form of <code>variable_(dim1,dim2,...)</code> to access the data and <code>variable!(value,dim1,dim2,..)</code> to store the value.
For more info type <code>?defVars</code> once you installed and loaded the package.</p>
<h1><a id="user-content-defining-the-set-dimensions-of-your-data" class="anchor" aria-hidden="true" href="#defining-the-set-dimensions-of-your-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining the "set" (dimensions) of your data</h1>
<p>These are simple Julia Arrays..</p>
<pre><code>products = ["banana","apples","juice"]
primPr   = products[1:2]
secPr    = [products[3]]
reg      = ["us","eu"]
</code></pre>
<h2><a id="user-content-write-your-model-using-the-meq-macro" class="anchor" aria-hidden="true" href="#write-your-model-using-the-meq-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Write your model using the @meq macro</h2>
<p>The @meq macro adds a bit of convenience transforming at parse time (so, without adding run-time overheads) your equation from <code>par1!(d1 in DIM1, d2 in DIM2, dfix3) = par2_(d1,d2)+par3_(d1,d2)</code> to <code>[par1!(par2_(d1,d2)+par3_(d1,d2), d1,d2,dfix3) for d1 in dim1, d2 in dim2]</code>.</p>
<pre><code># equivalent to [production!(sum(trValues_(r,pp) * transfCoef_(r,pp)  for pp in primPr), r, sp) for r in reg, sp in secPr]
@meq production!(r in reg, sp in secPr)   = sum(trValues_(r,pp) * transfCoef_(r,pp)  for pp in primPr)
@meq consumption!(r in reg, pp in primPr) = production_(r,pp) - trValues_(r,pp)
@meq consumption!(r in reg, sp in secPr)  = production_(r, sp)
</code></pre>
<p>Using <code>defVars()</code> with the <code>@meq</code> macro your data is kept in a single <code>IndexedTable</code> where one column is used to keep the variable names.
An alternative (and faster) approach is to define your variables as each one being a separate <code>IndexedTable</code> (the package <a href="https://github.com/sylvaticus/LAJuliaUtils.jl">LAJuliaUtils</a> has some useful functions for such approach).
You can still use @meq to provide some convenience:</p>
<p>@meq <code>par1[d1 in DIM1, d2 in DIM2, dfix3] = par2[d1,d2]+par3[d1,d2]</code> ==&gt; <code>[par1[d1,d2,dfix3] = par2[d1,d2]+par3[d1,d2] for d1 in dim1, d2 in dim2]</code>.</p>
<p>For more info on the @meq macro type <code>?@meq</code></p>
<h2><a id="user-content-known-limitation" class="anchor" aria-hidden="true" href="#known-limitation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known limitation</h2>
<ul>
<li>This is a young package still under active development.</li>
<li>While convenient, named access is definitely slower than positional access to data (i.e. it is a functional rather than performance oriented approach). Neverthless, using <code>IndexedTables</code> as backend, this package provides a reasonable fast implementation.</li>
<li>Also, at this time, only <code>var = ...</code> assignments are supported.</li>
</ul>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>The development of this package was supported by the French National Research Agency through the <a href="http://mycor.nancy.inra.fr/ARBRE/" rel="nofollow">Laboratory of Excellence ARBRE</a>, a part of the “Investissements d'Avenir” Program (ANR 11 – LABX-0002-01).</p>
</article></div>