<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-petsc" class="anchor" aria-hidden="true" href="#petsc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PETSc</h1>
<p>This package provides thin wrappers for PETSc, as well as a few convenience functions that take advantage of multiple dispatch.</p>
<p>This package requires the MPI.jl package be installed.  Once it is installed you should be able to run both Julia and Petsc in parallel using MPI for all communication.  The testing verifies that PETSc can be used both serially and in parallel.</p>
<p>To run PETSC in parallel, do:</p>
<pre><code>mpirun -np 4 julia ./name_of_file
</code></pre>
<p>for a 4 processor run.
Note that this launches 4 independent Julia processes.  They are not aware of each other using Julia's built-in parallelism, and MPI is used for all communications.</p>
<p>To run in serial, do:</p>
<pre><code>julia ./name_of_file
</code></pre>
<p>Even when running serially, the MPI.jl package must be installed.</p>
<h2><a id="user-content-notes-on-wrapping-functions" class="anchor" aria-hidden="true" href="#notes-on-wrapping-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes on wrapping functions</h2>
<p>Wrappers generated by Clang.jl are in the src/auto directory.  Although not quite usable, the functions can be made useable with a few simple modifications:</p>
<ul>
<li>Pass <code>comm.val</code> instead of <code>comm</code> itself for MPI communicators, and change the type to <code>comm_type</code>, which is typealiased to the the type used by the MPI.jl package</li>
<li>Pass obj.pobj instead of obj for Petsc objects as Ptr{Void}</li>
<li>For each Petsc object, you must create a type that holds a void pointer called pobj and use that in place of the (incorrect) type generated by Clang.jl</li>
<li>For every function you add, create a test</li>
</ul>
<h2><a id="user-content-directory-structure" class="anchor" aria-hidden="true" href="#directory-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Directory Structure</h2>
<p><code>/src</code> : source files.  PETSc.jl is the main file containing initialization, with the functions for each type of Petsc object in its own file.  All constants are declared in <code>petsc_constants.jl</code>.</p>
<p><code>/src/auto</code>: auto generated wrappers from Clang.jl.  Not directly useful, but easy to modify to make useful</p>
<p><code>/test</code> : contains <code>runtest.jl</code>, which does some setup and runs all tests on the current PETSc installation.  Tests for each type of Petsc object (mirroring the files in <code>/src</code>) are contained in separate files.  The file <code>runtests.sh</code> builds PETSc and runs the tests on combinations of integer size, floating point precision, and type of scalar (real or complex).</p>
<p><code>/deps</code> : builds Petsc if needed.  See description below
<code>/docs</code>: documentation (using Documenter.jl)</p>
<h1><a id="user-content-versions" class="anchor" aria-hidden="true" href="#versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Versions</h1>
<ul>
<li>v0.1: tag before upgrading from Julia 0.4 to Julia 0.6</li>
<li>v0.2: tag after upgrading from Julia 0.4 to Julia 0.6</li>
<li>v0.3: update docs</li>
<li>v0.4: update build system to use environment variables too</li>
<li>v0.5: update to Petsc 3.9.4 (for Travis CI)</li>
</ul>
<p><a href="https://travis-ci.org/OptimalDesignLab/PETSc2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00c73cd5d54f519046f1a661e31ecaf09ac0e929/68747470733a2f2f7472617669732d63692e6f72672f4f7074696d616c44657369676e4c61622f5045545363322e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/OptimalDesignLab/PETSc2.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://OptimalDesignLab.github.io/PETSc2.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
</article></div>