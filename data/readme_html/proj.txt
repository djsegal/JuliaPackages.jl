<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-projjl" class="anchor" aria-hidden="true" href="#projjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proj.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaGeo/Proj.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGeo/Proj.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">A simple <a href="https://julialang.org/" rel="nofollow">Julia</a> wrapper around the <a href="https://proj.org/" rel="nofollow">PROJ</a>
cartographic projections library. This package has been renamed from <a href="https://github.com/JuliaGeo/Proj.jl/tree/v0.7.6">Proj4.jl</a> to Proj.jl.</p>
<p dir="auto">Quickstart, based on the <a href="https://proj.org/development/quickstart.html" rel="nofollow">PROJ docs</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Proj

# Proj.jl implements the CoordinateTransformations.jl API.
# A Proj.Transformation needs the source and target coordinate reference systems (CRS),
# or a single pipeline.
trans = Proj.Transformation(&quot;EPSG:4326&quot;, &quot;+proj=utm +zone=32 +datum=WGS84&quot;)
# The CRS can be a string or the CRS type, which also interfaces with GeoFormatTypes.jl.

# Once created, you can call this object to transform points.
# The result will be a tuple of Float64s, of length 2, 3 or 4 depending on the input length.
# The 3rd coordinate is elevation (default 0), and the 4th is time (default Inf).
# Here the (latitude, longitude) of Copenhagen is entered
trans(55, 12)
# -&gt; (691875.632137542, 6.098907825129169e6)
# Passing coordinates as a single tuple or vector also works.

# Note that above the latitude is passed first, because that is the axis order that the
# EPSG mandates. If you want to pass in (longitude, latitude) / (x, y), you can set the
# `always_xy` keyword to true. For more info see https://proj.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent
trans = Proj.Transformation(&quot;EPSG:4326&quot;, &quot;+proj=utm +zone=32 +datum=WGS84&quot;, always_xy=true)

# now we input (longitude, latitude), and get the same result as above
trans(12, 55)
# -&gt; (691875.632137542, 6.098907825129169e6)

# using `inv` we can reverse the direction, `compose` can combine two transformations in one
inv(trans)(691875.632137542, 6.098907825129169e6) == (12, 55)"><pre><span class="pl-k">using</span> Proj

<span class="pl-c"><span class="pl-c">#</span> Proj.jl implements the CoordinateTransformations.jl API.</span>
<span class="pl-c"><span class="pl-c">#</span> A Proj.Transformation needs the source and target coordinate reference systems (CRS),</span>
<span class="pl-c"><span class="pl-c">#</span> or a single pipeline.</span>
trans <span class="pl-k">=</span> Proj<span class="pl-k">.</span><span class="pl-c1">Transformation</span>(<span class="pl-s"><span class="pl-pds">"</span>EPSG:4326<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>+proj=utm +zone=32 +datum=WGS84<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> The CRS can be a string or the CRS type, which also interfaces with GeoFormatTypes.jl.</span>

<span class="pl-c"><span class="pl-c">#</span> Once created, you can call this object to transform points.</span>
<span class="pl-c"><span class="pl-c">#</span> The result will be a tuple of Float64s, of length 2, 3 or 4 depending on the input length.</span>
<span class="pl-c"><span class="pl-c">#</span> The 3rd coordinate is elevation (default 0), and the 4th is time (default Inf).</span>
<span class="pl-c"><span class="pl-c">#</span> Here the (latitude, longitude) of Copenhagen is entered</span>
<span class="pl-c1">trans</span>(<span class="pl-c1">55</span>, <span class="pl-c1">12</span>)
<span class="pl-c"><span class="pl-c">#</span> -&gt; (691875.632137542, 6.098907825129169e6)</span>
<span class="pl-c"><span class="pl-c">#</span> Passing coordinates as a single tuple or vector also works.</span>

<span class="pl-c"><span class="pl-c">#</span> Note that above the latitude is passed first, because that is the axis order that the</span>
<span class="pl-c"><span class="pl-c">#</span> EPSG mandates. If you want to pass in (longitude, latitude) / (x, y), you can set the</span>
<span class="pl-c"><span class="pl-c">#</span> `always_xy` keyword to true. For more info see https://proj.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent</span>
trans <span class="pl-k">=</span> Proj<span class="pl-k">.</span><span class="pl-c1">Transformation</span>(<span class="pl-s"><span class="pl-pds">"</span>EPSG:4326<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>+proj=utm +zone=32 +datum=WGS84<span class="pl-pds">"</span></span>, always_xy<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> now we input (longitude, latitude), and get the same result as above</span>
<span class="pl-c1">trans</span>(<span class="pl-c1">12</span>, <span class="pl-c1">55</span>)
<span class="pl-c"><span class="pl-c">#</span> -&gt; (691875.632137542, 6.098907825129169e6)</span>

<span class="pl-c"><span class="pl-c">#</span> using `inv` we can reverse the direction, `compose` can combine two transformations in one</span>
<span class="pl-c1">inv</span>(trans)(<span class="pl-c1">691875.632137542</span>, <span class="pl-c1">6.098907825129169e6</span>) <span class="pl-k">==</span> (<span class="pl-c1">12</span>, <span class="pl-c1">55</span>)</pre></div>
<p dir="auto">Note that, as described in <a href="https://proj.org/resource_files.html" rel="nofollow">https://proj.org/resource_files.html</a>, PROJ has the capability
to use remote grids for transformations that need them. Unless you have manually set
the environment variable <code>PROJNETWORK=ON</code> or changed <code>proj.ini</code>, networking is
disabled by default. To enable from Julia, run <code>Proj.enable_network!()</code>.
<code>Proj.network_enabled()</code> can be used to check the setting. Note that it needs to be set
before creating a transformation, otherwise it will have no effect.</p>
<p dir="auto">API documentation for the underlying C API may be found here:
<a href="https://proj.org/development/reference/index.html" rel="nofollow">https://proj.org/development/reference/index.html</a></p>
</article></div>