<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-domainsetsjl" class="anchor" aria-hidden="true" href="#domainsetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DomainSets.jl</h1>
<p><a href="https://travis-ci.org/JuliaApproximation/DomainSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ae12a9c6ebbd5b192a22687c183e55e393d426f/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f446f6d61696e536574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaApproximation/DomainSets.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dlfivefifty/domainsets-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc3ecf9aab6a85c5ac77b2ca2392dc9b132a5bab/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6763373579313367306b6572786c6c383f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/gc75y13g0kerxll8?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/DomainSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cda89b496449fce635bf5c20a65f2783d94fc630/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f446f6d61696e536574732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/JuliaApproximation/DomainSets.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DomainSets.jl is a package designed to represent simple infinite sets, that
can be used to encode domains of functions. For example, the domain of the
function <code>log(x::Float64)</code> is the infinite open interval, which is represented
by the type <code>HalfLine{Float64}()</code>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-intervals" class="anchor" aria-hidden="true" href="#intervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intervals</h3>
<p>DomainSets.jl uses <a href="https://github.com/JuliaMath/IntervalSets.jl">IntervalSets.jl</a> for closed and open intervals.</p>
<h3><a id="user-content-rectangles" class="anchor" aria-hidden="true" href="#rectangles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rectangles</h3>
<p>Rectangles can be constructed as a product of intervals, where the elements of the domain
are <code>SVector{2}</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DomainSets, StaticArrays; <span class="pl-k">using</span> DomainSets<span class="pl-k">:</span> <span class="pl-k">×</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>) <span class="pl-k">in</span> (<span class="pl-k">-</span><span class="pl-c1">1..1</span>) <span class="pl-k">×</span> (<span class="pl-c1">0..3</span>)
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-circles-and-spheres" class="anchor" aria-hidden="true" href="#circles-and-spheres"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Circles and Spheres</h3>
<p>A <code>EuclideanUnitSphere{N,T}</code>  contains <code>x::SVector{N,T}</code> if <code>norm(x) == one(T)</code>. <code>UnitCircle</code> and <code>UnitSphere</code> are two important cases:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitCircle</span>()
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitSphere</span>()
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-disks-and-balls" class="anchor" aria-hidden="true" href="#disks-and-balls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disks and Balls</h3>
<p>A <code>EuclideanUnitBall{N,T}</code>  contains <code>x::SVector{N,T}</code> if <code>norm(x) ≤ one(T)</code>. <code>UnitDisk</code> and <code>UnitBall</code> are two important cases:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitDisk</span>()
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.3</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitBall</span>()
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-domains-with-variable-length-vector-elements" class="anchor" aria-hidden="true" href="#domains-with-variable-length-vector-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Domains with variable length Vector elements</h3>
<p>Domains with <code>Vector</code> elements may have an arbitrary dimension. Several of the
examples above have analogues for <code>Vector</code> elements:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.1</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.1</span>] <span class="pl-k">in</span> <span class="pl-c1">VectorUnitBall</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> [<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>] <span class="pl-k">in</span> <span class="pl-c1">VectorUnitSphere</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">true</span></pre></div>
<p>Product domains with elements of type <code>Vector</code>, rather than <code>SVector{N}</code>, may
be created by invoking <code>ProductDomain</code> with a vector of domains:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span> <span class="pl-k">in</span> <span class="pl-c1">ProductDomain</span>([<span class="pl-c1">0.</span><span class="pl-k">.</span>i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-union-intersection-and-setdiff-of-domains" class="anchor" aria-hidden="true" href="#union-intersection-and-setdiff-of-domains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Union, intersection, and setdiff of domains</h3>
<p>Domains can be unioned and intersected together:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">UnitCircle</span>() <span class="pl-k">∪</span> <span class="pl-c1">2</span><span class="pl-c1">UnitCircle</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">in</span>.([<span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">SVector</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">1.5</span>,<span class="pl-c1">1.5</span>)], <span class="pl-c1">Ref</span>(d))
<span class="pl-c1">3</span><span class="pl-k">-</span>element BitArray{<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">UnitCircle</span>() <span class="pl-k">∩</span> (<span class="pl-c1">2</span><span class="pl-c1">UnitCircle</span>() <span class="pl-k">.+</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>))
the intersection of <span class="pl-c1">2</span> domains<span class="pl-k">:</span>
	<span class="pl-c1">1.</span>	: the unit circle
	<span class="pl-c1">2.</span>	: A mapped domain based on the unit circle

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> d
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> d
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-the-domain-interface" class="anchor" aria-hidden="true" href="#the-domain-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The domain interface</h3>
<p>A domain is any type that implements the functions <code>eltype</code> and <code>in</code>. If
<code>d</code> is an instance of a type that implements the domain interface, then
the domain consists of all <code>x</code> that is an <code>eltype(d)</code> such that <code>x in d</code>
returns true.</p>
<p>Domains often represent continuous mathematical domains, for example, a domain
<code>d</code>  representing the interval <code>[0,1]</code> would have <code>eltype(d) == Int</code> but still
have <code>0.2 in d</code> return true.</p>
<h3><a id="user-content-the-domain-type" class="anchor" aria-hidden="true" href="#the-domain-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>Domain</code> type</h3>
<p>DomainSets.jl contains an abstract type <code>Domain{T}</code>. All subtypes of <code>Domain{T}</code>
must implement the domain interface, and in addition support <code>convert(Domain{T}, d)</code>.</p>
</article></div>