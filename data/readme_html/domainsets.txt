<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-domainsetsjl" class="anchor" aria-hidden="true" href="#domainsetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DomainSets.jl</h1>
<p dir="auto"><a href="https://JuliaApproximation.github.io/DomainSets.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaApproximation/DomainSets.jl/actions"><img src="https://github.com/JuliaApproximation/DomainSets.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/DomainSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e57be04c0ebb7bc2595d051c31869a800ba028382d55aaec7d16ecbbb50e83e5/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f446f6d61696e536574732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/JuliaApproximation/DomainSets.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">DomainSets.jl is a package designed to represent simple infinite sets. The package makes it easy to represent sets, verify membership of the set, compare sets and construct new sets from existing ones. Domains are considered equivalent if they describe the same set, regardless of their type.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-intervals" class="anchor" aria-hidden="true" href="#intervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Intervals</h3>
<p dir="auto">DomainSets.jl uses <a href="https://github.com/JuliaMath/IntervalSets.jl">IntervalSets.jl</a> for closed and open intervals. In addition, it defines a few standard intervals.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DomainSets

julia&gt; UnitInterval()
0.0..1.0 (Unit)

julia&gt; ChebyshevInterval()
-1.0..1.0 (Chebyshev)

julia&gt; HalfLine()
0.0..Inf (closed–open) (HalfLine)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DomainSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UnitInterval</span>()
<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span> (Unit)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ChebyshevInterval</span>()
<span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span> (Chebyshev)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">HalfLine</span>()
<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">Inf</span> (closed–open) (HalfLine)</pre></div>
<h3 dir="auto"><a id="user-content-rectangles" class="anchor" aria-hidden="true" href="#rectangles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rectangles</h3>
<p dir="auto">Rectangles can be constructed as a product of intervals, where the elements of the domain
are <code>SVector{2}</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DomainSets: ×

julia&gt; (-1..1) × (0..3) × (4.0..5.0)
(-1.0..1.0) × (0.0..3.0) × (4.0..5.0)

julia&gt; [1,2] in (-1..1) × (0..3)
true

julia&gt; UnitInterval()^3
UnitCube()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DomainSets<span class="pl-k">:</span> <span class="pl-k">×</span>

julia<span class="pl-k">&gt;</span> (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">1</span>) <span class="pl-k">×</span> (<span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">3</span>) <span class="pl-k">×</span> (<span class="pl-c1">4.0</span><span class="pl-k">..</span><span class="pl-c1">5.0</span>)
(<span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>) <span class="pl-k">×</span> (<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">3.0</span>) <span class="pl-k">×</span> (<span class="pl-c1">4.0</span><span class="pl-k">..</span><span class="pl-c1">5.0</span>)

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">in</span> (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">1</span>) <span class="pl-k">×</span> (<span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">3</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UnitInterval</span>()<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">UnitCube</span>()</pre></div>
<h3 dir="auto"><a id="user-content-circles-and-spheres" class="anchor" aria-hidden="true" href="#circles-and-spheres"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Circles and Spheres</h3>
<p dir="auto">A <code>UnitSphere</code>  contains <code>x</code> if <code>norm(x) == 1</code>. The unit sphere is N-dimensional,
and its dimension is specified with the constructor. The element types are
<code>SVector{N,T}</code> when the dimension is specified as <code>Val(3)</code>, and they
are <code>Vector{T}</code> when the dimension is specified by an integer value instead:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticArrays

julia&gt; SA[0,0,1.0] in UnitSphere(Val(3))
true

julia&gt; [0.0,1.0,0.0,0.0] in UnitSphere(4)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> SA[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1.0</span>] <span class="pl-k">in</span> <span class="pl-c1">UnitSphere</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>] <span class="pl-k">in</span> <span class="pl-c1">UnitSphere</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto"><code>UnitSphere</code> itself is an abstract type, hence the examples above return
concrete types <code>&lt;:UnitSphere</code>. The intended element type can also be explicitly
specified with the <code>UnitSphere{T}</code> constructor:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; typeof(UnitSphere{SVector{3,BigFloat}}())
EuclideanUnitSphere{3, BigFloat} (alias for StaticUnitSphere{SArray{Tuple{3}, BigFloat, 1, 3}})

julia&gt; typeof(UnitSphere{Vector{Float32}}(6))
VectorUnitSphere{Float32} (alias for DynamicUnitSphere{Array{Float32, 1}})"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">UnitSphere</span><span class="pl-c1">{SVector{3,BigFloat}}</span>())
EuclideanUnitSphere{<span class="pl-c1">3</span>, BigFloat} (alias <span class="pl-k">for</span> StaticUnitSphere{SArray{Tuple{<span class="pl-c1">3</span>}, BigFloat, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>}})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">UnitSphere</span><span class="pl-c1">{Vector{Float32}}</span>(<span class="pl-c1">6</span>))
VectorUnitSphere{Float32} (alias <span class="pl-k">for</span> DynamicUnitSphere{Array{Float32, <span class="pl-c1">1</span>}})</pre></div>
<p dir="auto">Without arguments, <code>UnitSphere()</code> defaults to a 3D domain with <code>SVector{3,Float64}</code>
elements. Similarly, there is a special case <code>UnitCircle</code> in 2D:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SVector(1,0) in UnitCircle()
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitCircle</span>()
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-disks-and-balls" class="anchor" aria-hidden="true" href="#disks-and-balls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Disks and Balls</h3>
<p dir="auto">A <code>UnitBall</code>  contains <code>x</code> if <code>norm(x) ≤ 1</code>. As with <code>UnitSphere</code>, the dimension
is specified via the constructor by type or by value:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SVector(0.1,0.2,0.3) in UnitBall(Val(3))
true

julia&gt; [0.1,0.2,0.3,-0.1] in UnitBall(4)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.3</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitBall</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.3</span>,<span class="pl-k">-</span><span class="pl-c1">0.1</span>] <span class="pl-k">in</span> <span class="pl-c1">UnitBall</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">By default <code>N=3</code>, but <code>UnitDisk</code> is a special case in 2D, and so are <code>ComplexUnitDisk</code> and <code>ComplexUnitCircle</code> in the complex plane:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SVector(0.1,0.2) in UnitDisk()
true

julia&gt; 0.5+0.2im ∈ ComplexUnitDisk()
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>) <span class="pl-k">in</span> <span class="pl-c1">UnitDisk</span>()
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span><span class="pl-k">+</span><span class="pl-c1">0.2im</span> <span class="pl-k">∈</span> <span class="pl-c1">ComplexUnitDisk</span>()
<span class="pl-c1">true</span></pre></div>
<p dir="auto"><code>UnitBall</code> itself is an abstract type, hence the examples above return
concrete types <code>&lt;:UnitBall</code>. The types are similar to those associated with
<code>UnitSphere</code>. Like intervals, balls can also be open or closed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; EuclideanUnitBall{3,Float64,:open}()
the 3-dimensional open unit ball"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">EuclideanUnitBall</span><span class="pl-c1">{3,Float64,:open}</span>()
the <span class="pl-c1">3</span><span class="pl-k">-</span>dimensional open unit ball</pre></div>
<h3 dir="auto"><a id="user-content-product-domains" class="anchor" aria-hidden="true" href="#product-domains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Product domains</h3>
<p dir="auto">The cartesian product of domains is constructed with the <code>ProductDomain</code> or
<code>ProductDomain{T}</code> constructor. This abstract constructor returns concrete types
best adapted to the arguments given.</p>
<p dir="auto">If <code>T</code> is not given, <code>ProductDomain</code> makes a suitable choice based on the
arguments. If all arguments are Euclidean, i.e., their element types are numbers
or static vectors, then the product is a Euclidean domain as well:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ProductDomain(0..2, UnitCircle())
0.0..2.0 x the unit circle

julia&gt; eltype(ans)
SVector{3, Float64} (alias for SArray{Tuple{3}, Float64, 1, 3})"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ProductDomain</span>(<span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">2</span>, <span class="pl-c1">UnitCircle</span>())
<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">2.0</span> x the unit circle

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eltype</span>(ans)
SVector{<span class="pl-c1">3</span>, Float64} (alias <span class="pl-k">for</span> SArray{Tuple{<span class="pl-c1">3</span>}, Float64, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>})</pre></div>
<p dir="auto">The elements of the interval and the unit circle are flattened into a single
vector, much like the <code>vcat</code> function. The result is a <code>VcatDomain</code>.</p>
<p dir="auto">If a <code>Vector</code> of domains is given, the element type is a <code>Vector</code> as well:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; 1:5 in ProductDomain([0..i for i in 1:5])
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span> <span class="pl-k">in</span> <span class="pl-c1">ProductDomain</span>([<span class="pl-c1">0</span><span class="pl-k">..</span>i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-c1">true</span></pre></div>
<p dir="auto">In other cases, the points are concatenated into a tuple and membership is
evaluated element-wise:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (&quot;a&quot;, 0.4) ∈ ProductDomain([&quot;a&quot;,&quot;b&quot;], 0..1)
true"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-c1">0.4</span>) <span class="pl-k">∈</span> <span class="pl-c1">ProductDomain</span>([<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], <span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">1</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Some arguments are recognized and return a more specialized product domain.
Examples are the unit box and more general hyperrectangles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ProductDomain(UnitInterval(), UnitInterval())
0.0..1.0 (Unit) x 0.0..1.0 (Unit)

julia&gt; ProductDomain(0..2, 4..5, 6..7.0)
0.0..2.0 x 4.0..5.0 x 6.0..7.0

julia&gt; typeof(ans)
Rectangle{SVector{3, Float64}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ProductDomain</span>(<span class="pl-c1">UnitInterval</span>(), <span class="pl-c1">UnitInterval</span>())
<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span> (Unit) x <span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span> (Unit)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ProductDomain</span>(<span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">2</span>, <span class="pl-c1">4</span><span class="pl-k">..</span><span class="pl-c1">5</span>, <span class="pl-c1">6</span><span class="pl-k">..</span><span class="pl-c1">7.0</span>)
<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">2.0</span> x <span class="pl-c1">4.0</span><span class="pl-k">..</span><span class="pl-c1">5.0</span> x <span class="pl-c1">6.0</span><span class="pl-k">..</span><span class="pl-c1">7.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Rectangle{SVector{<span class="pl-c1">3</span>, Float64}}</pre></div>
<h3 dir="auto"><a id="user-content-union-intersection-and-setdiff-of-domains" class="anchor" aria-hidden="true" href="#union-intersection-and-setdiff-of-domains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Union, intersection, and setdiff of domains</h3>
<p dir="auto">Domains can be unioned and intersected together:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = UnitCircle() ∪ 2UnitCircle();

julia&gt; in.([SVector(1,0),SVector(0,2), SVector(1.5,1.5)], d)
3-element BitArray{1}:
 1
 1
 0

julia&gt; d = UnitCircle() ∩ (2UnitCircle() .+ SVector(1.0,0.0))
the intersection of 2 domains:
	1.	: the unit circle
	2.	: A mapped domain based on the unit circle

julia&gt; SVector(1,0) in d
false

julia&gt; SVector(-1,0) in d
true"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">UnitCircle</span>() <span class="pl-k">∪</span> <span class="pl-c1">2</span><span class="pl-c1">UnitCircle</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">in</span>.([<span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">SVector</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">1.5</span>,<span class="pl-c1">1.5</span>)], d)
<span class="pl-c1">3</span><span class="pl-k">-</span>element BitArray{<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">UnitCircle</span>() <span class="pl-k">∩</span> (<span class="pl-c1">2</span><span class="pl-c1">UnitCircle</span>() <span class="pl-k">.+</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>))
the intersection of <span class="pl-c1">2</span> domains<span class="pl-k">:</span>
	<span class="pl-c1">1.</span>	<span class="pl-k">:</span> the unit circle
	<span class="pl-c1">2.</span>	<span class="pl-k">:</span> A mapped domain based on the unit circle

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> d
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-k">in</span> d
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-level-sets" class="anchor" aria-hidden="true" href="#level-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Level sets</h3>
<p dir="auto">A domain can be defined by the level sets of a function. The domains of all
points <code>[x,y]</code> for which <code>x*y = 1</code> or <code>x*y &gt;= 1</code> are represented as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = LevelSet{SVector{2,Float64}}(prod, 1.0)
level set f(x) = 1.0 with f = prod

julia&gt; [0.5,2] ∈ d
true

julia&gt; SuperlevelSet{SVector{2,Float64}}(prod, 1.0)
superlevel set f(x) &gt;= 1.0 with f = prod"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">LevelSet</span><span class="pl-c1">{SVector{2,Float64}}</span>(prod, <span class="pl-c1">1.0</span>)
level set <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">1.0</span> with f <span class="pl-k">=</span> prod

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.5</span>,<span class="pl-c1">2</span>] <span class="pl-k">∈</span> d
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SuperlevelSet</span><span class="pl-c1">{SVector{2,Float64}}</span>(prod, <span class="pl-c1">1.0</span>)
superlevel set <span class="pl-c1">f</span>(x) <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span> with f <span class="pl-k">=</span> prod</pre></div>
<p dir="auto">There is also <code>SublevelSet</code>, and there are the special cases <code>ZeroSet</code>,
<code>SubzeroSet</code> and <code>SuperzeroSet</code>.</p>
<h3 dir="auto"><a id="user-content-indicator-functions" class="anchor" aria-hidden="true" href="#indicator-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Indicator functions</h3>
<p dir="auto">A domain can be defined by an indicator function or a characteristic function.
This is a function <code>f(x)</code> which evaluates to true or false, depending on whether or
not the point <code>x</code> belongs to the domain.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = IndicatorFunction{Float64}( t -&gt;  cos(t) &gt; 0)
indicator domain defined by function f = #5

julia&gt; 0.5 ∈ d, 3.1 ∈ d
(true, false)"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">IndicatorFunction</span><span class="pl-c1">{Float64}</span>( t <span class="pl-k">-&gt;</span>  <span class="pl-c1">cos</span>(t) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>)
indicator domain defined by <span class="pl-k">function</span> f <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span> <span class="pl-k">∈</span> d, <span class="pl-c1">3.1</span> <span class="pl-k">∈</span> d
(<span class="pl-c1">true</span>, <span class="pl-c1">false</span>)</pre></div>
<p dir="auto">This enables generator syntax to define domains:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = Domain(x&gt;0 for x in -1..1)
indicator function bounded by: -1..1

julia&gt; 0.5 ∈ d, -0.5 ∈ d
(true, false)

julia&gt; d = Domain( x*y &gt; 0 for (x,y) in UnitDisk())
indicator function bounded by: the 2-dimensional closed unit ball

julia&gt; [0.2, 0.3] ∈ d, [0.2, -0.3] ∈ d
(true, false)

julia&gt; d = Domain( x+y+z &gt; 0 for (x,y,z) in ProductDomain(UnitDisk(), 0..1))
indicator function bounded by: the 2-dimensional closed unit ball x 0..1

julia&gt; [0.3,0.2,0.5] ∈ d
true"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Domain</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">0</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">1</span>)
indicator <span class="pl-k">function</span> bounded by<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span> <span class="pl-k">∈</span> d, <span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">∈</span> d
(<span class="pl-c1">true</span>, <span class="pl-c1">false</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Domain</span>( x<span class="pl-k">*</span>y <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">for</span> (x,y) <span class="pl-k">in</span> <span class="pl-c1">UnitDisk</span>())
indicator <span class="pl-k">function</span> bounded by<span class="pl-k">:</span> the <span class="pl-c1">2</span><span class="pl-k">-</span>dimensional closed unit ball

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>] <span class="pl-k">∈</span> d, [<span class="pl-c1">0.2</span>, <span class="pl-k">-</span><span class="pl-c1">0.3</span>] <span class="pl-k">∈</span> d
(<span class="pl-c1">true</span>, <span class="pl-c1">false</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Domain</span>( x<span class="pl-k">+</span>y<span class="pl-k">+</span>z <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">for</span> (x,y,z) <span class="pl-k">in</span> <span class="pl-c1">ProductDomain</span>(<span class="pl-c1">UnitDisk</span>(), <span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">1</span>))
indicator <span class="pl-k">function</span> bounded by<span class="pl-k">:</span> the <span class="pl-c1">2</span><span class="pl-k">-</span>dimensional closed unit ball x <span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">0.3</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.5</span>] <span class="pl-k">∈</span> d
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-the-domain-interface" class="anchor" aria-hidden="true" href="#the-domain-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The domain interface</h3>
<p dir="auto">A domain is any type that implements the functions <code>eltype</code> and <code>in</code>. If
<code>d</code> is an instance of a type that implements the domain interface, then
the domain consists of all <code>x</code> that is an <code>eltype(d)</code> such that <code>x in d</code>
returns true.</p>
<p dir="auto">Domains often represent continuous mathematical domains, for example, a domain
<code>d</code>  representing the interval <code>[0,1]</code> would have <code>eltype(d) == Int</code> but still
have <code>0.2 in d</code> return true.</p>
<h3 dir="auto"><a id="user-content-the-domain-type" class="anchor" aria-hidden="true" href="#the-domain-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>Domain</code> type</h3>
<p dir="auto">DomainSets.jl contains an abstract type <code>Domain{T}</code>. All subtypes of <code>Domain{T}</code>
must implement the domain interface, and in addition support <code>convert(Domain{T}, d)</code>.</p>
</article></div>