<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplepdhgjl" class="anchor" aria-hidden="true" href="#simplepdhgjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimplePDHG.jl</h1>
<p dir="auto">I wrote this simple educational Julia package (less than 350 lines of code) for the MIT Course 15.084/6.7220 Nonlinear Optimization. The purpose of this package is to demonstrate to the students how simple it is to implement an optimization algorithm in  <a href="https://julialang.org/" rel="nofollow">Julia</a> and connect it to the optimization modeling language <a href="https://jump.dev/" rel="nofollow"><code>JuMP</code></a> so that anyone can use your algorithm.</p>
<p dir="auto">Big thanks to <a href="https://odow.github.io/" rel="nofollow">Oscar Dowson</a> for providing <a href="https://jump.dev/MathOptInterface.jl/stable/" rel="nofollow"><code>MathOptInterface.jl </code></a> code to connect this simple solver to <code>JuMP</code>! (<a href="https://discourse.julialang.org/t/connecting-a-simple-first-order-solver-to-solve-standard-form-linear-program-to-jump/95694" rel="nofollow">discourse link</a>)</p>
<h2 dir="auto"><a id="user-content-what-does-simplepdhgjl-do" class="anchor" aria-hidden="true" href="#what-does-simplepdhgjl-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What does <code>SimplePDHG.jl</code> do?</h2>
<p dir="auto">This is an educational package used to demonstrate the ease of implementing an algorithm in <code>Julia</code> and incorporating it with one of Julia's main optimization modeling language <code>JuMP</code>. The package is  designed to solve linear programming problems of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="minimize    c'x
subject to  A x = b
            G x ≤ h
            x ∈ ℝ^n"><pre>minimize    c<span class="pl-k">'</span>x
subject to  A x <span class="pl-k">=</span> b
            G x <span class="pl-k">≤</span> h
            x <span class="pl-k">∈</span> ℝ<span class="pl-k">^</span>n</pre></div>
<p dir="auto">where <code>x</code> is the decision variable. Under the hood the <code>SimplePDHG.jl</code> implements the vanilla PDHG algorithm (see Section 3.3 of <a href="https://large-scale-book.mathopt.com/LSCOMO.pdf" rel="nofollow">this book</a>) to solve standard form linear optimization problem of the form <code>min{c'x ∣ Ax=b, x ≥ 0, x ∈ ℝ^n}</code>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Type the following in Julia REPL to the stable version:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add SimplePDHG"><pre class="notranslate"><code>] add SimplePDHG
</code></pre></div>
<p dir="auto">To get the latest branch, type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/Shuvomoy/SimplePDHG.jl.git"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>Shuvomoy<span class="pl-k">/</span>SimplePDHG<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h2 dir="auto"><a id="user-content-usage-through-jump" class="anchor" aria-hidden="true" href="#usage-through-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage through <code>JuMP</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, SimplePDHG
model =  Model(SimplePDHG.Optimizer)
@variable(model, x &gt;= 0)
@variable(model, 0 &lt;= y &lt;= 3)
@objective(model, Min, 12x + 20y)
@constraint(model, c1, 6x + 8y &gt;= 100)
@constraint(model, c2, 7x + 12y &gt;= 120)
optimize!(model)
println(&quot;Objective value: &quot;, objective_value(model))
println(&quot;x = &quot;, value(x))
println(&quot;y = &quot;, value(y))"><pre><span class="pl-k">using</span> JuMP, SimplePDHG
model <span class="pl-k">=</span>  <span class="pl-c1">Model</span>(SimplePDHG<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">@objective</span>(model, Min, <span class="pl-c1">12</span>x <span class="pl-k">+</span> <span class="pl-c1">20</span>y)
<span class="pl-c1">@constraint</span>(model, c1, <span class="pl-c1">6</span>x <span class="pl-k">+</span> <span class="pl-c1">8</span>y <span class="pl-k">&gt;=</span> <span class="pl-c1">100</span>)
<span class="pl-c1">@constraint</span>(model, c2, <span class="pl-c1">7</span>x <span class="pl-k">+</span> <span class="pl-c1">12</span>y <span class="pl-k">&gt;=</span> <span class="pl-c1">120</span>)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Objective value: <span class="pl-pds">"</span></span>, <span class="pl-c1">objective_value</span>(model))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(x))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>y = <span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(y))</pre></div>
<p dir="auto">Output should be:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Objective value: 205.000090068938
x = 14.999887019427522
y = 1.2500722917903861"><pre>Objective value<span class="pl-k">:</span> <span class="pl-c1">205.000090068938</span>
x <span class="pl-k">=</span> <span class="pl-c1">14.999887019427522</span>
y <span class="pl-k">=</span> <span class="pl-c1">1.2500722917903861</span></pre></div>
<h2 dir="auto"><a id="user-content-vector-syntax-in-jump" class="anchor" aria-hidden="true" href="#vector-syntax-in-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vector syntax in JuMP</h2>
<p dir="auto">Thanks to <code>JuMP</code> and <code>MathOptInterface.jl </code>, we can use vectorized syntax to solve our optimization problem as well.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# data 
A = [1 1 9 5; 3 5 0 8; 2 0 6 13]
b = [7, 3, 5]
c = [1, 3, 5, 2]
m, n = size(A)
G = [0.5012005468024234 -1.5806753104910911 1.1908183108070869 1.6527613262371468; -1.7596263752677483 -0.5235246034519885 0.4618550523688477 0.4871842582808355; -0.6305269735894394 0.023788955821653315 -0.5208935392017503 -1.667410808905106; 1.02249016425841 0.6890017766482583 1.2904648745012357 1.398062622113161; -0.9763001854265912 0.866180139889124 -0.18426778358700338 1.1436405988912726; 0.4004591856282607 -0.6315453522080423 -0.32707956849441 -1.192277331736516];
h = 2*ones(2*m)

# JuMP code
using JuMP, SimplePDHG
model =  Model(SimplePDHG.Optimizer)
@variable(model, x[1:n] &gt;= 0)
@objective(model, Min, c'*x)
@constraint(model, A*x .== b)
@constraint(model, G*x .&lt;= h)
optimize!(model)
println(&quot;Objective value: &quot;, objective_value(model))
println(&quot;x = &quot;, value.(x))
x_star = value.(x)"><pre><span class="pl-c"><span class="pl-c">#</span> data </span>
A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">9</span> <span class="pl-c1">5</span>; <span class="pl-c1">3</span> <span class="pl-c1">5</span> <span class="pl-c1">0</span> <span class="pl-c1">8</span>; <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">6</span> <span class="pl-c1">13</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>]
c <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>]
m, n <span class="pl-k">=</span> <span class="pl-c1">size</span>(A)
G <span class="pl-k">=</span> [<span class="pl-c1">0.5012005468024234</span> <span class="pl-k">-</span><span class="pl-c1">1.5806753104910911</span> <span class="pl-c1">1.1908183108070869</span> <span class="pl-c1">1.6527613262371468</span>; <span class="pl-k">-</span><span class="pl-c1">1.7596263752677483</span> <span class="pl-k">-</span><span class="pl-c1">0.5235246034519885</span> <span class="pl-c1">0.4618550523688477</span> <span class="pl-c1">0.4871842582808355</span>; <span class="pl-k">-</span><span class="pl-c1">0.6305269735894394</span> <span class="pl-c1">0.023788955821653315</span> <span class="pl-k">-</span><span class="pl-c1">0.5208935392017503</span> <span class="pl-k">-</span><span class="pl-c1">1.667410808905106</span>; <span class="pl-c1">1.02249016425841</span> <span class="pl-c1">0.6890017766482583</span> <span class="pl-c1">1.2904648745012357</span> <span class="pl-c1">1.398062622113161</span>; <span class="pl-k">-</span><span class="pl-c1">0.9763001854265912</span> <span class="pl-c1">0.866180139889124</span> <span class="pl-k">-</span><span class="pl-c1">0.18426778358700338</span> <span class="pl-c1">1.1436405988912726</span>; <span class="pl-c1">0.4004591856282607</span> <span class="pl-k">-</span><span class="pl-c1">0.6315453522080423</span> <span class="pl-k">-</span><span class="pl-c1">0.32707956849441</span> <span class="pl-k">-</span><span class="pl-c1">1.192277331736516</span>];
h <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>m)

<span class="pl-c"><span class="pl-c">#</span> JuMP code</span>
<span class="pl-k">using</span> JuMP, SimplePDHG
model <span class="pl-k">=</span>  <span class="pl-c1">Model</span>(SimplePDHG<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x[<span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@objective</span>(model, Min, c<span class="pl-k">'</span><span class="pl-k">*</span>x)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>x <span class="pl-k">.==</span> b)
<span class="pl-c1">@constraint</span>(model, G<span class="pl-k">*</span>x <span class="pl-k">.&lt;=</span> h)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Objective value: <span class="pl-pds">"</span></span>, <span class="pl-c1">objective_value</span>(model))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>.(x))
x_star <span class="pl-k">=</span> <span class="pl-c1">value</span>.(x)</pre></div>
<p dir="auto">The output should be:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Objective value: 4.922528390226832

x = [0.42344643304517904, 0.34592985413549193, 0.6922584789550353, 0.0]"><pre>Objective value<span class="pl-k">:</span> <span class="pl-c1">4.922528390226832</span>

x <span class="pl-k">=</span> [<span class="pl-c1">0.42344643304517904</span>, <span class="pl-c1">0.34592985413549193</span>, <span class="pl-c1">0.6922584789550353</span>, <span class="pl-c1">0.0</span>]</pre></div>
</article></div>