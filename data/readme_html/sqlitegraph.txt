<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/joshday/SQLiteGraph.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/joshday/SQLiteGraph.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/joshday/SQLiteGraph.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1d41246f0590fcd396008e8cdfefa73d2822ff1da03637794bf83974e9611b04/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73686461792f53514c69746547726170682e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/joshday/SQLiteGraph.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 align="center" dir="auto"><a id="user-content-sqlitegraph" class="anchor" aria-hidden="true" href="#sqlitegraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SQLiteGraph</h1>
<p dir="auto">A Graph Database for Julia, built on top of <a href="https://github.com/JuliaDatabases/SQLite.jl">SQLite.jl</a>.</p>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-definitions" class="anchor" aria-hidden="true" href="#definitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Definitions</h2>
<p dir="auto">SQLiteGraph.jl uses the <a href="https://s3.amazonaws.com/artifacts.opencypher.org/openCypher9.pdf" rel="nofollow">Property Graph Model of the Cypher Query Language (PDF)</a>.</p>
<ul dir="auto">
<li>A <strong><em>Node</em></strong> describes a discrete object in a domain.</li>
<li>Nodes can have 0+ <strong><em>labels</em></strong> that classify what kind of node they are.</li>
<li>An <strong><em>Edge</em></strong> describes a directional relationship between nodes.</li>
<li>An edge must have a <strong><em>type</em></strong> that classifies the relationship.</li>
<li>Both edges and nodes can have additional key-value <strong><em>properties</em></strong> that provide further information.</li>
</ul>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-edges-and-nodes" class="anchor" aria-hidden="true" href="#edges-and-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Edges and Nodes</h2>
<ul dir="auto">
<li>Nodes and Edges have a simple representation:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Node
    id::Int
    labels::Vector{String}
    props::EasyConfig.Config
end

struct Edge
    source::Int
    target::Int
    type::String
    props::EasyConfig.Config
end"><pre><span class="pl-k">struct</span> Node
    id<span class="pl-k">::</span><span class="pl-c1">Int</span>
    labels<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>
    props<span class="pl-k">::</span><span class="pl-c1">EasyConfig.Config</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Edge
    source<span class="pl-k">::</span><span class="pl-c1">Int</span>
    target<span class="pl-k">::</span><span class="pl-c1">Int</span>
    type<span class="pl-k">::</span><span class="pl-c1">String</span>
    props<span class="pl-k">::</span><span class="pl-c1">EasyConfig.Config</span>
<span class="pl-k">end</span></pre></div>
<ul dir="auto">
<li>With simple constructors:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Node(id, labels...; props...)

Edge(source_id, target_id, type; props...)"><pre><span class="pl-c1">Node</span>(id, labels<span class="pl-k">...</span>; props<span class="pl-k">...</span>)

<span class="pl-c1">Edge</span>(source_id, target_id, type; props<span class="pl-k">...</span>)</pre></div>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-adding-elements-to-the-graph" class="anchor" aria-hidden="true" href="#adding-elements-to-the-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding Elements to the Graph</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SQLiteGraph

db = DB()

insert!(db, Node(1, &quot;Person&quot;, &quot;Actor&quot;; name=&quot;Tom Hanks&quot;))

insert!(db, Node(2, &quot;Movie&quot;; title=&quot;Forest Gump&quot;))

insert!(db, Edge(1, 2, &quot;Acts In&quot;; awards=[&quot;Best Actor in a Leading Role&quot;]))"><pre><span class="pl-k">using</span> SQLiteGraph

db <span class="pl-k">=</span> <span class="pl-c1">DB</span>()

<span class="pl-c1">insert!</span>(db, <span class="pl-c1">Node</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Person<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Actor<span class="pl-pds">"</span></span>; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Tom Hanks<span class="pl-pds">"</span></span>))

<span class="pl-c1">insert!</span>(db, <span class="pl-c1">Node</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>Movie<span class="pl-pds">"</span></span>; title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Forest Gump<span class="pl-pds">"</span></span>))

<span class="pl-c1">insert!</span>(db, <span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>Acts In<span class="pl-pds">"</span></span>; awards<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Best Actor in a Leading Role<span class="pl-pds">"</span></span>]))</pre></div>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-editing-elements" class="anchor" aria-hidden="true" href="#editing-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Editing Elements</h2>
<p dir="auto"><code>insert!</code> will not replace an existing node or edge.  Instead, use <code>replace!</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="replace!(db, Node(2, &quot;Movie&quot;; title=&quot;Forest Gump&quot;, genre=&quot;Drama&quot;))"><pre><span class="pl-c1">replace!</span>(db, <span class="pl-c1">Node</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>Movie<span class="pl-pds">"</span></span>; title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Forest Gump<span class="pl-pds">"</span></span>, genre<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Drama<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-simple-queries" class="anchor" aria-hidden="true" href="#simple-queries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Queries</h2>
<ul dir="auto">
<li>Use <code>getindex</code> to access elements.</li>
<li>If <code>:</code> is used as an index, an iterator is returned.</li>
<li>If <code>s::String</code> is used as an index, an iterator of nodes where <code>s</code> is <em>one</em> of the labels is returned.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="db[1]  # Node(1, &quot;Person&quot;, &quot;Actor&quot;; name=&quot;Tom Hanks&quot;)

for node in db[:]
    println(node)
end

only(db[&quot;Movie&quot;])  # Node(2, &quot;Movie&quot;; title=&quot;Forest Gump&quot;, genre=&quot;Drama&quot;)

# (Pretend the graph is populated with many more items.  The following return iterators.)

db[1, :, &quot;Acts In&quot;]  # All movies that Tom Hanks acts in

db[:, 2, &quot;Acts In&quot;]  # All actors in &quot;Forest Gump&quot;

db[1, 2, :]  # All relationships between &quot;Tom Hanks&quot; and &quot;Forest Gump&quot;

db[:, :, :]  # All edges"><pre>db[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> Node(1, "Person", "Actor"; name="Tom Hanks")</span>

<span class="pl-k">for</span> node <span class="pl-k">in</span> db[:]
    <span class="pl-c1">println</span>(node)
<span class="pl-k">end</span>

<span class="pl-c1">only</span>(db[<span class="pl-s"><span class="pl-pds">"</span>Movie<span class="pl-pds">"</span></span>])  <span class="pl-c"><span class="pl-c">#</span> Node(2, "Movie"; title="Forest Gump", genre="Drama")</span>

<span class="pl-c"><span class="pl-c">#</span> (Pretend the graph is populated with many more items.  The following return iterators.)</span>

db[<span class="pl-c1">1</span>, :, <span class="pl-s"><span class="pl-pds">"</span>Acts In<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span> All movies that Tom Hanks acts in</span>

db[:, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>Acts In<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span> All actors in "Forest Gump"</span>

db[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, :]  <span class="pl-c"><span class="pl-c">#</span> All relationships between "Tom Hanks" and "Forest Gump"</span>

db[:, :, :]  <span class="pl-c"><span class="pl-c">#</span> All edges</span></pre></div>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content--attribution-" class="anchor" aria-hidden="true" href="#-attribution-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji> Attribution <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji></h2>
<p dir="auto">SQLiteGraph is <strong>STRONGLY</strong> influenced by <a href="https://github.com/dpapathanasiou/simple-graph">https://github.com/dpapathanasiou/simple-graph</a>.</p>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-under-the-hood-details" class="anchor" aria-hidden="true" href="#under-the-hood-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the Hood Details</h2>
<ul dir="auto">
<li>Nodes and edges are saved in the <code>nodes</code> and <code>edges</code> tables, respectively.</li>
<li><code>nodes</code>
<ul dir="auto">
<li><code>id</code> (<code>INTEGER</code>): unique identifier of a node</li>
<li><code>labels</code> (<code>TEXT</code>): stored as <code>;</code>-delimited (thus <code>;</code> cannot be used in a label)</li>
<li><code>props</code> (<code>TEXT</code>): stored as <code>JSON3.write(props)</code></li>
</ul>
</li>
<li><code>edges</code>
<ul dir="auto">
<li><code>source</code> (<code>INTEGER</code>): id of "from" node (<code>nodes(id)</code> is a foreign key)</li>
<li><code>target</code> (<code>INTEGER</code>): id of "to" node (<code>nodes(id)</code> is a foreign key)</li>
<li><code>type</code> (<code>TEXT</code>): the "class" of the edge/relationship</li>
<li><code>props</code> (<code>TEXT</code>)</li>
</ul>
</li>
</ul>
</article></div>