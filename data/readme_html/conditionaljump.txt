<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-conditionaljump" class="anchor" aria-hidden="true" href="#conditionaljump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConditionalJuMP</h1>
<p><a href="https://travis-ci.org/rdeits/ConditionalJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cfaadfc5cf37523377d38d74f957dc1ae645c1d02620d15b2d0499c5bc2bbfe2/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f436f6e646974696f6e616c4a754d502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/ConditionalJuMP.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/rdeits/ConditionalJuMP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a8a4f2728755ecc4bb39d4a9e238ba0a9e962f82cff56b4320181c0cbdb5edd6/687474703a2f2f636f6465636f762e696f2f6769746875622f7264656974732f436f6e646974696f6e616c4a754d502e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rdeits/ConditionalJuMP.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package is built on top of <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a><code>*</code> and provides basic automatic generation of indicator variables, which allow (limited) statements of the form <code>condition</code> <em>implies</em> <code>constraint</code> in convex optimizations. It does so by automatically introducing binary indicator variables as necessary, and by using interval arithmetic to choose an appropriate big-M formulation.</p>
<p><code>*</code> Please note that this package is not developed or maintained by the JuMP developers.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<h2><a id="user-content-basic-implications" class="anchor" aria-hidden="true" href="#basic-implications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Implications</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Cbc, ConditionalJuMP

m = Model(solver=CbcSolver())
@variable(m, -1 &lt;= x &lt;= 1)  # having bounds on all variables is currently a requirement
@variable(m, -1 &lt;= y &lt;= 1)
# Require that y == 0.5 whenever x &lt;= 0
@implies(m, (x &lt;= 0) =&gt; (y == 0.5))
@objective(m, Min, 4x + y)
solve(m)
@assert getvalue(x) ≈ -1
@assert getvalue(y) ≈ 0.5
"><pre><span class="pl-k">using</span> JuMP, Cbc, ConditionalJuMP

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> having bounds on all variables is currently a requirement</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Require that y == 0.5 whenever x &lt;= 0</span>
<span class="pl-c1">@implies</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> (y <span class="pl-k">==</span> <span class="pl-c1">0.5</span>))
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-c1">4</span>x <span class="pl-k">+</span> y)
<span class="pl-c1">solve</span>(m)
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(x) <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(y) <span class="pl-k">≈</span> <span class="pl-c1">0.5</span></pre></div>
<h2><a id="user-content-warm-starting-the-solver" class="anchor" aria-hidden="true" href="#warm-starting-the-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warm-starting the solver</h2>
<p>Mixed-integer models can perform much better when given a feasible initial solution. If you've assigned initial values to your variables using JuMP's <code>setvalue()</code> function, then <code>ConditionalJuMP</code> can use those values to also add starting values for the binary indicator variables. The <code>warmstart()</code> function does this for you:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Cbc, ConditionalJuMP

m = Model(solver=CbcSolver())
@variable(m, -1 &lt;= x &lt;= 1)  # having bounds on all variables is currently a requirement
@variable(m, -1 &lt;= y &lt;= 1)
# Require that y == 0.5 whenever x &lt;= 0
@implies(m, (x &lt;= 0) =&gt; (y == 0.5))
@objective(m, Min, 4x + y)
# Guess a solution with x == -0.5, y == 1
setvalue(x, -0.5)
setvalue(y, 1)
warmstart!(m)
solve(m)
@assert getvalue(x) ≈ -1
@assert getvalue(y) ≈ 0.5
"><pre><span class="pl-k">using</span> JuMP, Cbc, ConditionalJuMP

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> having bounds on all variables is currently a requirement</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Require that y == 0.5 whenever x &lt;= 0</span>
<span class="pl-c1">@implies</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> (y <span class="pl-k">==</span> <span class="pl-c1">0.5</span>))
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-c1">4</span>x <span class="pl-k">+</span> y)
<span class="pl-c"><span class="pl-c">#</span> Guess a solution with x == -0.5, y == 1</span>
<span class="pl-c1">setvalue</span>(x, <span class="pl-k">-</span><span class="pl-c1">0.5</span>)
<span class="pl-c1">setvalue</span>(y, <span class="pl-c1">1</span>)
<span class="pl-c1">warmstart!</span>(m)
<span class="pl-c1">solve</span>(m)
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(x) <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(y) <span class="pl-k">≈</span> <span class="pl-c1">0.5</span></pre></div>
<h2><a id="user-content-fixing-the-binary-values" class="anchor" aria-hidden="true" href="#fixing-the-binary-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fixing the binary values</h2>
<p>It can sometimes be useful to write a model with implication constraints, but then choose to solve that model with the implications fixed. For example, we might wish to try solving the above model both for the case that x &lt;= 0 and for the case that x &gt;= 0. To do that, we just call <code>warmstart!(model, true)</code>, which will use the values previously set with <code>setvalue()</code> to determine exactly which sets of constraints should be applied. More concretely:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model(solver=CbcSolver())
@variable(m, -1 &lt;= x &lt;= 1)  # having bounds on all variables is currently a requirement
@variable(m, -1 &lt;= y &lt;= 1)
# Require that y == 0.5 whenever x &lt;= 0
@implies(m, (x &lt;= 0) =&gt; (y == 0.5))
@objective(m, Min, 4x + y)

# Set up the indicator variables for the case that x == 1. Note that this does *not*
# fix x to 1 in the optimization. It simply requires that any implications which depend
# on x will be fixed to the set containing x == 1. In this case, that means that x will
# be fixed to be greater than or equal to 0. 
setvalue(x, 1)
warmstart!(m, true)
solve(m)

@assert getvalue(x) ≈ 0
@assert getvalue(y) ≈ -1
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> having bounds on all variables is currently a requirement</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Require that y == 0.5 whenever x &lt;= 0</span>
<span class="pl-c1">@implies</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> (y <span class="pl-k">==</span> <span class="pl-c1">0.5</span>))
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-c1">4</span>x <span class="pl-k">+</span> y)

<span class="pl-c"><span class="pl-c">#</span> Set up the indicator variables for the case that x == 1. Note that this does *not*</span>
<span class="pl-c"><span class="pl-c">#</span> fix x to 1 in the optimization. It simply requires that any implications which depend</span>
<span class="pl-c"><span class="pl-c">#</span> on x will be fixed to the set containing x == 1. In this case, that means that x will</span>
<span class="pl-c"><span class="pl-c">#</span> be fixed to be greater than or equal to 0. </span>
<span class="pl-c1">setvalue</span>(x, <span class="pl-c1">1</span>)
<span class="pl-c1">warmstart!</span>(m, <span class="pl-c1">true</span>)
<span class="pl-c1">solve</span>(m)

<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(x) <span class="pl-k">≈</span> <span class="pl-c1">0</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(y) <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model(solver=CbcSolver())
@variable(m, -1 &lt;= x &lt;= 1)  # having bounds on all variables is currently a requirement
@variable(m, -1 &lt;= y &lt;= 1)
# Require that y == 0.5 whenever x &lt;= 0
@implies(m, (x &lt;= 0) =&gt; (y == 0.5))
@objective(m, Min, 4x + y)

# Set up the indicator variables for the case that x == -1. Note that this does *not*
# fix x to -1 in the optimization. It simply requires that any implications which depend
# on x will be fixed to the set containing x == -1. In this case, that means that x will
# be fixed to be less than or equal to 0 AND (by the implication above) y will be fixed 
# to be equal to 0.5
setvalue(x, -1)
warmstart!(m, true)
solve(m)

@assert getvalue(x) ≈ -1
@assert getvalue(y) ≈ 0.5
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> having bounds on all variables is currently a requirement</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Require that y == 0.5 whenever x &lt;= 0</span>
<span class="pl-c1">@implies</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> (y <span class="pl-k">==</span> <span class="pl-c1">0.5</span>))
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-c1">4</span>x <span class="pl-k">+</span> y)

<span class="pl-c"><span class="pl-c">#</span> Set up the indicator variables for the case that x == -1. Note that this does *not*</span>
<span class="pl-c"><span class="pl-c">#</span> fix x to -1 in the optimization. It simply requires that any implications which depend</span>
<span class="pl-c"><span class="pl-c">#</span> on x will be fixed to the set containing x == -1. In this case, that means that x will</span>
<span class="pl-c"><span class="pl-c">#</span> be fixed to be less than or equal to 0 AND (by the implication above) y will be fixed </span>
<span class="pl-c"><span class="pl-c">#</span> to be equal to 0.5</span>
<span class="pl-c1">setvalue</span>(x, <span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">warmstart!</span>(m, <span class="pl-c1">true</span>)
<span class="pl-c1">solve</span>(m)

<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(x) <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>(y) <span class="pl-k">≈</span> <span class="pl-c1">0.5</span></pre></div>
<h2><a id="user-content-disjunctions" class="anchor" aria-hidden="true" href="#disjunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disjunctions</h2>
<p>This package also provides the <code>@ifelse</code> macro to create simple <code>if</code> statements which work both on numbers and on optimization variables. For example, let's write a simple update function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function update(x)
    if x &lt;= 0
        1
    else
        -1
    end
end
"><pre><span class="pl-k">function</span> <span class="pl-en">update</span>(x)
    <span class="pl-k">if</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>
        <span class="pl-c1">1</span>
    <span class="pl-k">else</span>
        <span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This works on numbers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; update(0.5)
-1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">update</span>(<span class="pl-c1">0.5</span>)
<span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<p>but not on variables:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; m = Model();

julia&gt; @variable m x;

julia&gt; y = update(x)
ERROR: MethodError: no method matching isless(::Int64, ::JuMP.Variable)
Closest candidates are:
  isless(::Real, ::AbstractFloat) at operators.jl:97
  isless(::Real, ::ForwardDiff.Dual) at /home/rdeits/.julia/v0.6/ForwardDiff/src/dual.jl:161
  isless(::Real, ::Real) at operators.jl:266
Stacktrace:
 [1] update(::JuMP.Variable) at ./REPL[3]:2
"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">Model</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@variable</span> m x;

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">update</span>(x)
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">isless</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">JuMP.Variable</span>)
Closest candidates are<span class="pl-k">:</span>
  <span class="pl-c1">isless</span>(<span class="pl-k">::</span><span class="pl-c1">Real</span>, <span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>) at operators<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">97</span>
  <span class="pl-c1">isless</span>(<span class="pl-k">::</span><span class="pl-c1">Real</span>, <span class="pl-k">::</span><span class="pl-c1">ForwardDiff.Dual</span>) at <span class="pl-k">/</span>home<span class="pl-k">/</span>rdeits<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">6</span><span class="pl-k">/</span>ForwardDiff<span class="pl-k">/</span>src<span class="pl-k">/</span>dual<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">161</span>
  <span class="pl-c1">isless</span>(<span class="pl-k">::</span><span class="pl-c1">Real</span>, <span class="pl-k">::</span><span class="pl-c1">Real</span>) at operators<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">266</span>
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">update</span>(<span class="pl-k">::</span><span class="pl-c1">JuMP.Variable</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">2</span></pre></div>
<p>But if we replace the <code>if</code> statement with <code>@ifelse</code>, then the function will magically just work in both cases:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function update(x)
    @ifelse(x &lt;= 0, 
      1,
      -1
      )
end
"><pre><span class="pl-k">function</span> <span class="pl-en">update</span>(x)
    <span class="pl-c1">@ifelse</span>(x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>, 
      <span class="pl-c1">1</span>,
      <span class="pl-k">-</span><span class="pl-c1">1</span>
      )
<span class="pl-k">end</span></pre></div>
<p>The <code>@?</code> macro is necessary because JuMP does not define <code>&lt;=</code> for its <code>Variable</code> type, and we don't want to commit type piracy by defining it ourselves.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; update(0.5)
-1

julia&gt; m = Model();

julia&gt; @variable m -5 &lt;= x &lt;= 5;

julia&gt; y = update(x)
y
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">update</span>(<span class="pl-c1">0.5</span>)
<span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">Model</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@variable</span> m <span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>;

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">update</span>(x)
y</pre></div>
<p>Using this, we can easily write optimizations over repeated applications of the <code>update()</code> function, which is something we might want to do in a model-predictive control application:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model(solver=CbcSolver())
@variable m -0.5 &lt;= x &lt;= 0.5

ys = [x]
for i in 1:3
    push!(ys, update(ys[end]))
end

@objective m Max sum(ys)
solve(m)
@assert getvalue.(ys) ≈ [0, 1, -1, 1]
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span> m <span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">0.5</span>

ys <span class="pl-k">=</span> [x]
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
    <span class="pl-c1">push!</span>(ys, <span class="pl-c1">update</span>(ys[<span class="pl-c1">end</span>]))
<span class="pl-k">end</span>

<span class="pl-c1">@objective</span> m Max <span class="pl-c1">sum</span>(ys)
<span class="pl-c1">solve</span>(m)
<span class="pl-c1">@assert</span> <span class="pl-c1">getvalue</span>.(ys) <span class="pl-k">≈</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>]</pre></div>
<p>The optimal solution is <code>[0, 1, -1, 1]</code> because our objective is to maximize the sum of the variables in <code>ys</code>. If x were <code>&gt;=</code> 0, then our update rule would require the solution to look like <code>[x, -1, 1, -1]</code>, which, due to the limits on <code>0.5 &lt;= x &lt;= 0.5</code> would have a sub-optimal objective value. So the indicator constraints have indeed given us the optimal solution.</p>
<h2><a id="user-content-more-complicated-disjunctions" class="anchor" aria-hidden="true" href="#more-complicated-disjunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Complicated Disjunctions</h2>
<p>If your conditional statement can't be expressed as something in the form <code>if x then y else z</code>, then you can use the <code>@switch</code> macro to explicitly state each case:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y = @switch(
    (x &lt;= 0) =&gt; 5,
    ((x &gt;= 0) &amp; (x &lt;= 1)) =&gt; 6,
    (x &gt;= 1) =&gt; 7
)
"><pre>y <span class="pl-k">=</span> <span class="pl-c1">@switch</span>(
    (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>,
    ((x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">&amp;</span> (x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)) <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>,
    (x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">7</span>
)</pre></div>
<p>Note that by using <code>@switch</code>, you are <em>promising</em> that the set of cases you are providing completely cover the feasible set. That is, if you write:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y = @switch(
    (x &lt;= -1) =&gt; 5,
    (x &gt;= 1) =&gt; 6
)
"><pre>y <span class="pl-k">=</span> <span class="pl-c1">@switch</span>(
    (x <span class="pl-k">&lt;=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>,
    (x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
)</pre></div>
<p>then <code>x</code> must either be &lt;= -1 or &gt;= 1.</p>
<h2><a id="user-content-complementarity-and-disjunctions" class="anchor" aria-hidden="true" href="#complementarity-and-disjunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complementarity and Disjunctions</h2>
<p>A final type of conditional you might want to express is a disjunction, which simply says "exactly one of these conditions holds". The <code>@disjunction</code> macro handles this case:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model()
@variable m -1 &lt;= x &lt;= 1
@disjunction(m, (x &lt;= -1), (x &gt;= 1)) 
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span> m <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>
<span class="pl-c1">@disjunction</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>), (x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)) </pre></div>
<p>This can also be used to create complementarity constraints, which require that the product of two expressions be equal to zero. If we want to require that y * x == 0, we can instead require that y == 0 or x == 0:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model()
@variable m -1 &lt;= x &lt;= 1
@variable m -1 &lt;= y &lt;= 1
@disjunction(m, x == 0, y == 0)
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span> m <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>
<span class="pl-c1">@variable</span> m <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>
<span class="pl-c1">@disjunction</span>(m, x <span class="pl-k">==</span> <span class="pl-c1">0</span>, y <span class="pl-k">==</span> <span class="pl-c1">0</span>)</pre></div>
<h1><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation Notes</h1>
<p>Indicator constraints are currently enforced using a Big-M formulation. This formulation works by transforming the constraint: <code>z == 1 implies x &lt;= 0</code> into the constraint:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x &lt;= 0 + M * (1 - z)
"><pre><code>x &lt;= 0 + M * (1 - z)
</code></pre></div>
<p>where <code>z</code> is restricted to be either 0 or 1.</p>
<p>If <code>M</code> is sufficiently large, then when <code>z == 0</code>, <code>x</code> is essentially unbounded. But when <code>z == 1</code>, the constraint reduces to <code>x &lt;= 0</code> as desired. The key to successfully applying this formulation is choosing the right value of <code>M</code>. Too small an <code>M</code> will restrict <code>x</code> even when <code>z == 0</code>. Too large a value will create numerical difficulties in the solver.</p>
<p>ConditionalJuMP.jl uses <a href="https://github.com/JuliaIntervals/IntervalArithmetic.jl">IntervalArithmetic.jl</a> to solve for an appropriate value of <code>M</code> automatically. The idea is that if we know the bounds on <code>x</code> (from the upper and lower bounds in the JuMP model), we can compute exactly how large M needs to be. Even more complicated expressions like <code>z == 1 implies (2x + 3y + z - 2 &lt;= 5x)</code> can be handled automatically because IntervalArithmetic.jl already knows how to propagate intervals through various functions.</p>
<p>As an example, let's look back at the first model:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model(solver=CbcSolver())
@variable(m, -1 &lt;= x &lt;= 1)  # having bounds on all variables is currently a requirement
@variable(m, -1 &lt;= y &lt;= 1)
# Require that y == 0.5 whenever x &lt;= 0
@implies(m, (x &lt;= 0) =&gt; (y == 0.5))
@objective(m, Min, 4x + y)
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CbcSolver</span>())
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> having bounds on all variables is currently a requirement</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Require that y == 0.5 whenever x &lt;= 0</span>
<span class="pl-c1">@implies</span>(m, (x <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">=&gt;</span> (y <span class="pl-k">==</span> <span class="pl-c1">0.5</span>))
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-c1">4</span>x <span class="pl-k">+</span> y)</pre></div>
<p>The constraints which are generated for the indicator variable <code>z</code> are:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x + z &lt;= 1
y + 0.5z &lt;= 1
y - 1.5z &gt;= -1
-x - z &lt;= 0
"><pre><code>x + z &lt;= 1
y + 0.5z &lt;= 1
y - 1.5z &gt;= -1
-x - z &lt;= 0
</code></pre></div>
<p>so the sufficiently-big values of M are all in the range [0.5, 1.5], which is certainly small enough not to create numerical problems.</p>
</article></div>