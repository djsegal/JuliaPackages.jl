<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functional-ball-dropping" class="anchor" aria-hidden="true" href="#functional-ball-dropping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functional Ball Dropping</h1>
<h2 dir="auto"><a id="user-content-fast-hypergraph-generation" class="anchor" aria-hidden="true" href="#fast-hypergraph-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>fast hypergraph generation</h2>
<p dir="auto"><a href="https://github.com/LilithHafner/FunctionalBallDropping.jl/actions"><img src="https://github.com/LilithHafner/FunctionalBallDropping.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/LilithHafner/FunctionalBallDropping.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d837ef1b347544d35b4aa7589f89f37945ce053bb9af63e4e970e71a1361f36/68747470733a2f2f636f6465636f762e696f2f67682f4c696c6974684861666e65722f46756e6374696f6e616c42616c6c44726f7070696e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/LilithHafner/FunctionalBallDropping.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Uses the functional ball dropping technique to provide efficient generators for a variety of hypergraph (henceforth graph) models inlcuding</p>
<ul dir="auto">
<li>Hyper preferential attachment (Do, Yoon, Hooi, &amp; Shin)</li>
<li>Degree corrected hyper stochastic block (Chodrow, Veldt, &amp; Benson)</li>
<li>Hyper Kronecker product (Eikmeier, Ramani, &amp; Gleich)</li>
<li>Hyper typing model (Chang &amp; Chen)</li>
<li>Uniform homogonous (Erdős &amp; Rényi)</li>
</ul>
<p dir="auto">In all cases, maximum edge size (also known as hyperdegree) can vary from 1–30. In many cases it can range all the way up to 10<sup>5</sup> or even 10<sup>10</sup> depending on the model and host machine. This package is capable of producing ordinary graphs by setting maximum hpyerdegree to 2.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunctionalBallDropping
graph = example(Kronecker_sampler, 30)"><pre><span class="pl-k">using</span> FunctionalBallDropping
graph <span class="pl-k">=</span> <span class="pl-c1">example</span>(Kronecker_sampler, <span class="pl-c1">30</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="10-element Vector{Tuple{Int64, Int64, Int64}}:
 (6, 0, 2)
 (3, 0, 0)
 (0, 5, 5)
 (1, 2, 2)
 (4, 2, 1)
 (0, 4, 0)
 (2, 6, 4)
 (1, 4, 5)
 (5, 7, 6)
 (0, 2, 0)"><pre><span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">6</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">4</span>, <span class="pl-c1">0</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">6</span>, <span class="pl-c1">4</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">5</span>, <span class="pl-c1">7</span>, <span class="pl-c1">6</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">See <a href="src/examples.jl"><code>src/examples.jl</code></a> for examples!</p>
<h3 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h3>
<p dir="auto">Medium and large graphs are produced at a rate of 3 million to 150 million edges in the bipartite projection per second for all models on a single threaded 1.6 Ghz machine. The number of clock cycles per bipartite edge for each model at a variety of scales is approximately as follows:</p>
<table>
<thead>
<tr>
<th>Model \ Size</th>
<th>10</th>
<th>10<sup>2</sup></th>
<th>10<sup>3</sup></th>
<th>10<sup>4</sup></th>
<th>10<sup>5</sup></th>
<th>10<sup>6</sup></th>
<th>10<sup>7</sup></th>
</tr>
</thead>
<tbody>
<tr>
<td>Preferential Attachment</td>
<td>203</td>
<td>208</td>
<td>103</td>
<td>77</td>
<td>88</td>
<td>141</td>
<td>223</td>
</tr>
<tr>
<td>Degree Corrected Stochastic Block</td>
<td>25750</td>
<td>2137</td>
<td>281</td>
<td>85</td>
<td>52</td>
<td>39</td>
<td>29</td>
</tr>
<tr>
<td>Kronecker</td>
<td>196</td>
<td>54</td>
<td>58</td>
<td>85</td>
<td>71</td>
<td>54</td>
<td>45</td>
</tr>
<tr>
<td>Typing</td>
<td>305</td>
<td>187</td>
<td>188</td>
<td>187</td>
<td>187</td>
<td>252</td>
<td>448</td>
</tr>
<tr>
<td>Uniform</td>
<td>28</td>
<td>9</td>
<td>9</td>
<td>14</td>
<td>14</td>
<td>15</td>
<td>11</td>
</tr>
</tbody>
</table>
<p dir="auto">A forthcoming paper utilizing results from <a href="https://github.com/LilithHafner/FBDCompare.jl">FBDCompare.jl</a> compares the performance of this package to the previous state of the art.</p>
</article></div>