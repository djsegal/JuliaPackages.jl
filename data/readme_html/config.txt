<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-configjl" class="anchor" aria-hidden="true" href="#configjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Config.jl</h1>
<p>A configuration manager for Julia.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<h3><a id="user-content-initialize-a-configmanager" class="anchor" aria-hidden="true" href="#initialize-a-configmanager"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initialize a ConfigManager</h3>
<p>Suppose you have a configuration file called "tdlambda.json", specifying
a set of parameter settings for an experiment</p>
<div class="highlight highlight-source-json"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>save_path<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>RandomWalk19/tdlambda<span class="pl-pds">"</span></span>,

    <span class="pl-s"><span class="pl-pds">"</span>experiment<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>class<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>MarkovRewardProcess<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>episodes<span class="pl-pds">"</span></span>: <span class="pl-c1">10</span>
    },

    <span class="pl-s"><span class="pl-pds">"</span>environment<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>class<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>RandomWalk<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>nstates<span class="pl-pds">"</span></span>: <span class="pl-c1">19</span>
    },

    <span class="pl-s"><span class="pl-pds">"</span>agent<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>class<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>TDLambda<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>: <span class="pl-c1">1.0</span>,
        <span class="pl-s"><span class="pl-pds">"</span>metastep<span class="pl-pds">"</span></span>: [<span class="pl-c1">0.025</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.075</span>, <span class="pl-c1">0.1</span>],
        <span class="pl-s"><span class="pl-pds">"</span>lambda<span class="pl-pds">"</span></span>: [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">0.9</span>]
    }
}</pre></div>
<p>Note: any config file <em>must</em> have the "save_path" parameter. This
specifies the directory in <code>data/output</code> which the data will be saved to. In this
example, data will be saved to <code>data/output/RandomWalk19/tdlambda</code></p>
<p>Initialize a manager to manage all the details of this config file</p>
<div class="highlight highlight-source-julia"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">ConfigManager</span>(<span class="pl-s"><span class="pl-pds">"</span>tdlambda.json<span class="pl-pds">"</span></span>, <span class="pl-c1">@__DIR__</span>)</pre></div>
<p>The second argument specifies where the data directory should be
setup. In this case, a directory <code>data/</code> will be setup in the same directory
as the experiment which <code>ConfigManager</code> was instantiated in.</p>
<h3><a id="user-content-parsing-a-config" class="anchor" aria-hidden="true" href="#parsing-a-config"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parsing a config</h3>
<p>Any lists of parameters in the lowest-level of the config can be swept over
(in this case, <code>cfg["agent"]["metastep"]</code> and <code>cfg["agent"]["lambda"]</code>).
The different parameter settings are linearized. In order to sweep all the
parameters of this config, we can first check how many different parameters
there are:</p>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">total_combinations</span>(cfg)</pre></div>
<p>Then, we need to parse each of the individual settings into a concrete
parameterization:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> idx<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N
    <span class="pl-c1">parse!</span>(cfg, idx)
    
    <span class="pl-c1">run_some_experiment</span>(cfg)
<span class="pl-k">end</span></pre></div>
<p>parse sets up the settings of a particular parameterization. After parsing the
config, individual parameters can be accessed by indexing. For example, to this
parameterization's "metastep" parameter, we can call <code>cfg["agent"]["metastep"]</code>.
If you will be referencing certain nested parameters quite often, you can
get the subconfiguration instead: <code>subcfg = get_subconfig(cfg, "agent")</code>.
Then access parameters of the subconfig in the same way: <code>subcfg["metastep"]</code>.</p>
<p>Note that <code>parse!</code> has a third argument -- the run number -- which defaults to 1.
To do multiple runs of an experiment, you can therefore do:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> run<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-k">for</span> idx<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N
        <span class="pl-c1">parse!</span>(cfg, idx, run)
        
        <span class="pl-c1">run_some_experiment</span>(cfg)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-saving-data" class="anchor" aria-hidden="true" href="#saving-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Saving data</h3>
<p>The <code>ConfigManager</code> also takes care of saving data to the right place.
Just collect whatever data you want during your experiment in a <code>Dict()</code>
and pass it to the ConfigManager.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">experiment</span>(cfg<span class="pl-k">::</span><span class="pl-c1">ConfigManager</span>)
    data <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    data[<span class="pl-s"><span class="pl-pds">"</span>ValueError<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> Float64[]
    <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>
       <span class="pl-c1">push!</span>(data[<span class="pl-s"><span class="pl-pds">"</span>ValueError<span class="pl-pds">"</span></span>], <span class="pl-c1">rand</span>()) 
    <span class="pl-k">end</span>
    
    <span class="pl-c1">save</span>(cfg, data)
<span class="pl-k">end</span></pre></div>
<p>Then load the data later using <code>load(cfg)</code> (where cfg is a parse!'d config).</p>
</article></div>