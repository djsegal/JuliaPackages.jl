<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-capstan" class="anchor" aria-hidden="true" href="#capstan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Capstan</h1>
<p>Cassette-based automatic differentiation for the Julia language.</p>
<p><strong>The code/examples in this package's git history were simply proof-of-concepts that were built on an earlier prototype of Cassette. Nothing here (besides this README) should be assumed to be representative of Capstan's planned direction/implementation.</strong></p>
<p>Now that an initial version of Cassette has been released, work on a more serious implementation of Capstan has begun. Since Cassette's contextual tagging system (on which Capstan relies) depends on as-of-yet unimplemented compiler optimizations/bug fixes to obtain reasonable performance, Capstan will likely not see an initial release until several minor version bumps into the Julia 1.x release cycle.</p>
<p>It's likely that not all of these features will make it into an initial release, but planned features include:</p>
<ul>
<li>forward-, reverse-, and <a href="https://arxiv.org/abs/1810.08297" rel="nofollow">mixed-mode</a> operation</li>
<li>no cumbersome custom array/number types</li>
<li>works even with concrete dispatch/structural type constraints</li>
<li>official support for complex differentiation</li>
<li>safe nested/higher-order differentiation</li>
<li>API for custom perturbation/sensitivity seeding</li>
<li>user-extensible scalar and tensor derivative definitions</li>
<li>configurable dynamic and static execution modes</li>
<li>support for both GPU and CPU</li>
<li>higher-order sparsity exploitation (edge-pushing)</li>
<li>per-region dynamism for subgraphs</li>
</ul>
</article></div>