<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tracedsamplejl" class="anchor" aria-hidden="true" href="#tracedsamplejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TracedSample.jl</h1>
<p dir="auto">Allows for the optional specification of traced addresses (i.e. variable names)
in calls to <code>sample</code> and related functions in
<a href="https://github.com/JuliaStats/StatsBase.jl"><code>StatsBase.jl</code></a>. Providing this
information allows ordinary Julia code to be "probabilistic-programming-ready".
See also <a href="https://github.com/probcomp/TracedRandom.jl"><code>TracedRandom.jl</code></a>, which
provides similar support for random primitives in <code>Random</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sample(:id, 1:5)
3

julia&gt; sample(:fruit, [:apple, :banana, :cherry], weights([0.2, 0.3, 0.5]))
:banana"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sample</span>(<span class="pl-c1">:id</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sample</span>(<span class="pl-c1">:fruit</span>, [<span class="pl-c1">:apple</span>, <span class="pl-c1">:banana</span>, <span class="pl-c1">:cherry</span>], <span class="pl-c1">weights</span>([<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.5</span>]))
<span class="pl-c1">:banana</span></pre></div>
<p dir="auto">By default, the addresses (<code>:id</code> and <code>:fruit</code> in the examples above)
are ignored, but they can be intercepted via meta-programming
(see <a href="https://github.com/probcomp/Genify.jl"><code>Genify.jl</code></a>) to support inference
in probabilistic programming systems such as <a href="https://www.gen.dev/" rel="nofollow"><code>Gen</code></a>.
Addresses can be specified as <code>Symbol</code>s, or as pairs from symbols
to other types (<code>Pair{Symbol,&lt;:Any}</code>).</p>
</article></div>