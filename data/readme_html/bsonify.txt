<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bsonifyjl" class="anchor" aria-hidden="true" href="#bsonifyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BSONify.jl</h1>
<p dir="auto"><a href="LICENSE"><img src="https://camo.githubusercontent.com/9f6b5dca9fd95975898fb95c2cc5b995351004a6c4443ccb13e1916a97bb122a/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/OliverColeman/BSONify.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4877407f61c89b4d9df6d9cc6b134fa8932a0e1e1be341343fa3158e044c4577/68747470733a2f2f7472617669732d63692e636f6d2f4f6c69766572436f6c656d616e2f42534f4e6966792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/OliverColeman/BSONify.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/OliverColeman/BSONify.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f96a8a88b9787ef4c922b273b5ffb86bc4e60bf7b126097ff05f985751266a1b/687474703a2f2f636f6465636f762e696f2f6769746875622f4f6c69766572436f6c656d616e2f42534f4e6966792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/OliverColeman/BSONify.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><em>BSONify.jl</em> is a Julia package for painlessly converting Julia data structures to and from <a href="http://bsonspec.org/" rel="nofollow">BSON</a> (Binary JSON). BSON is a JSON-like data storage format that is designed to be efficient and fast and also store binary data. It is supported by many languages and is native to the MongoDB database system.</p>
<p dir="auto"><em>BSONify.jl</em> stores only the data in the BSON document, in a minimal and clear way. No metadata is stored, making it efficient and convenient for communication with other systems.</p>
<p dir="auto">The resulting BSON document can be stored in a MongoDB database or to files via <a href="https://github.com/felipenoris/Mongoc.jl">Mongoc.jl</a>.</p>
<p dir="auto"><em>BSONify.jl</em> can handle just about any data structure, including primitive types, arbitrary composite types defined by other modules or your own data structures, nested and recursive data structures, complicated parametrised types, and even type unions.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BSONify, Dates
import Mongoc

# Define a custom parametric struct.
struct MyStruct{T, S}
    myDateTime::DateTime
    myArray::Array{S}
    myParametric::T
    myDict::Dict{T, S}
    myNamedTuple::NamedTuple{(:a, :b), Tuple{Int16, Float32}}
    myChild::Union{MyStruct{T, S}, S, Nothing} # Support for recursive structures and type unions.
end

# Define a custom type from the custom struct.
MyType = MyStruct{UInt8, String}

# Create some data.
myData = MyType(
    now(),
    [&quot;The&quot;, &quot;answer&quot;, &quot;is&quot;],
    42,
    Dict(4 =&gt; &quot;is&quot;, 2 =&gt; &quot;answer?!&quot;),
    (a=1, b=2.3),
    MyType(
        now(),
        split(&quot;It's not a question, but an answer learned in time&quot;),
        0,
        Dict(),
        (a=1, b=2),
        &quot;sweet child o' mine&quot;
    )
)

println(&quot;myData:\n&quot;, myData)

# Convert our data to BSON.
bson = Mongoc.BSON(myData)

println(&quot;\nbson:\n&quot;, bson)

# Convert BSON back to our custom type.
myReconstitutedData = as_type(MyType, bson)

println(&quot;\nmyReconstitutedData:\n&quot;, myReconstitutedData)"><pre><span class="pl-k">using</span> BSONify, Dates
<span class="pl-k">import</span> Mongoc

<span class="pl-c"><span class="pl-c">#</span> Define a custom parametric struct.</span>
<span class="pl-k">struct</span> MyStruct{T, S}
    myDateTime<span class="pl-k">::</span><span class="pl-c1">DateTime</span>
    myArray<span class="pl-k">::</span><span class="pl-c1">Array{S}</span>
    myParametric<span class="pl-k">::</span><span class="pl-c1">T</span>
    myDict<span class="pl-k">::</span><span class="pl-c1">Dict{T, S}</span>
    myNamedTuple<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b), Tuple{Int16, Float32}}</span>
    myChild<span class="pl-k">::</span><span class="pl-c1">Union{MyStruct{T, S}, S, Nothing}</span> <span class="pl-c"><span class="pl-c">#</span> Support for recursive structures and type unions.</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define a custom type from the custom struct.</span>
MyType <span class="pl-k">=</span> MyStruct{UInt8, String}

<span class="pl-c"><span class="pl-c">#</span> Create some data.</span>
myData <span class="pl-k">=</span> <span class="pl-c1">MyType</span>(
    <span class="pl-c1">now</span>(),
    [<span class="pl-s"><span class="pl-pds">"</span>The<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>answer<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>is<span class="pl-pds">"</span></span>],
    <span class="pl-c1">42</span>,
    <span class="pl-c1">Dict</span>(<span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>is<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>answer?!<span class="pl-pds">"</span></span>),
    (a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2.3</span>),
    <span class="pl-c1">MyType</span>(
        <span class="pl-c1">now</span>(),
        <span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">"</span>It's not a question, but an answer learned in time<span class="pl-pds">"</span></span>),
        <span class="pl-c1">0</span>,
        <span class="pl-c1">Dict</span>(),
        (a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>),
        <span class="pl-s"><span class="pl-pds">"</span>sweet child o' mine<span class="pl-pds">"</span></span>
    )
)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>myData:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, myData)

<span class="pl-c"><span class="pl-c">#</span> Convert our data to BSON.</span>
bson <span class="pl-k">=</span> Mongoc<span class="pl-k">.</span><span class="pl-c1">BSON</span>(myData)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>bson:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, bson)

<span class="pl-c"><span class="pl-c">#</span> Convert BSON back to our custom type.</span>
myReconstitutedData <span class="pl-k">=</span> <span class="pl-c1">as_type</span>(MyType, bson)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>myReconstitutedData:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, myReconstitutedData)</pre></div>
<h3 dir="auto"><a id="user-content-result" class="anchor" aria-hidden="true" href="#result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Result:</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="myData:
MyStruct{UInt8, String}(DateTime(&quot;2021-05-28T13:12:37.742&quot;), [&quot;The&quot;, &quot;answer&quot;, &quot;is&quot;], 0x2a, Dict{UInt8, String}(0x04 =&gt; &quot;is&quot;, 0x02 =&gt; &quot;answer?!&quot;), (a = 1, b = 2.3f0), MyStruct{UInt8, String}(DateTime(&quot;2021-05-28T13:12:37.753&quot;), [&quot;It's&quot;, &quot;not&quot;, &quot;a&quot;, &quot;question,&quot;, &quot;but&quot;, &quot;an&quot;, &quot;answer&quot;, &quot;learned&quot;, &quot;in&quot;, &quot;time&quot;], 0x00, Dict{UInt8, String}(), (a = 1, b = 2.0f0), &quot;sweet child o' mine&quot;))

bson:
BSON(&quot;{ &quot;myDateTime&quot; : { &quot;$date&quot; : &quot;2021-05-28T13:12:37.742Z&quot; }, &quot;myArray&quot; : [ &quot;The&quot;, &quot;answer&quot;, &quot;is&quot; ], &quot;myParametric&quot; : 42, &quot;myDict&quot; : { &quot;4&quot; : &quot;is&quot;, &quot;2&quot; : &quot;answer?!&quot; }, &quot;myNamedTuple&quot; : { &quot;a&quot; : 1, &quot;b&quot; : 2.2999999523162841797 }, &quot;myChild&quot; : { &quot;myDateTime&quot; : { &quot;$date&quot; : &quot;2021-05-28T13:12:37.753Z&quot; }, &quot;myArray&quot; : [ &quot;It's&quot;, &quot;not&quot;, &quot;a&quot;, &quot;question,&quot;, &quot;but&quot;, &quot;an&quot;, &quot;answer&quot;, &quot;learned&quot;, &quot;in&quot;, &quot;time&quot; ], &quot;myParametric&quot; : 0, &quot;myDict&quot; : {  }, &quot;myNamedTuple&quot; : { &quot;a&quot; : 1, &quot;b&quot; : 2.0 }, &quot;myChild&quot; : &quot;sweet child o' mine&quot; } }&quot;)

myReconstitutedData:
MyStruct{UInt8, String}(DateTime(&quot;2021-05-28T13:12:37.742&quot;), [&quot;The&quot;, &quot;answer&quot;, &quot;is&quot;], 0x2a, Dict{UInt8, String}(0x04 =&gt; &quot;is&quot;, 0x02 =&gt; &quot;answer?!&quot;), (a = 1, b = 2.3f0), MyStruct{UInt8, String}(DateTime(&quot;2021-05-28T13:12:37.753&quot;), [&quot;It's&quot;, &quot;not&quot;, &quot;a&quot;, &quot;question,&quot;, &quot;but&quot;, &quot;an&quot;, &quot;answer&quot;, &quot;learned&quot;, &quot;in&quot;, &quot;time&quot;], 0x00, Dict{UInt8, String}(), (a = 1, b = 2.0f0), &quot;sweet child o' mine&quot;))"><pre class="notranslate"><code>myData:
MyStruct{UInt8, String}(DateTime("2021-05-28T13:12:37.742"), ["The", "answer", "is"], 0x2a, Dict{UInt8, String}(0x04 =&gt; "is", 0x02 =&gt; "answer?!"), (a = 1, b = 2.3f0), MyStruct{UInt8, String}(DateTime("2021-05-28T13:12:37.753"), ["It's", "not", "a", "question,", "but", "an", "answer", "learned", "in", "time"], 0x00, Dict{UInt8, String}(), (a = 1, b = 2.0f0), "sweet child o' mine"))

bson:
BSON("{ "myDateTime" : { "$date" : "2021-05-28T13:12:37.742Z" }, "myArray" : [ "The", "answer", "is" ], "myParametric" : 42, "myDict" : { "4" : "is", "2" : "answer?!" }, "myNamedTuple" : { "a" : 1, "b" : 2.2999999523162841797 }, "myChild" : { "myDateTime" : { "$date" : "2021-05-28T13:12:37.753Z" }, "myArray" : [ "It's", "not", "a", "question,", "but", "an", "answer", "learned", "in", "time" ], "myParametric" : 0, "myDict" : {  }, "myNamedTuple" : { "a" : 1, "b" : 2.0 }, "myChild" : "sweet child o' mine" } }")

myReconstitutedData:
MyStruct{UInt8, String}(DateTime("2021-05-28T13:12:37.742"), ["The", "answer", "is"], 0x2a, Dict{UInt8, String}(0x04 =&gt; "is", 0x02 =&gt; "answer?!"), (a = 1, b = 2.3f0), MyStruct{UInt8, String}(DateTime("2021-05-28T13:12:37.753"), ["It's", "not", "a", "question,", "but", "an", "answer", "learned", "in", "time"], 0x00, Dict{UInt8, String}(), (a = 1, b = 2.0f0), "sweet child o' mine"))
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-exporting-to-bson" class="anchor" aria-hidden="true" href="#exporting-to-bson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exporting to BSON</h3>
<p dir="auto"><em>BSONify.jl</em> extends the <em>Mongoc.jl</em> API to handle arbitrary types when creating BSON documents.</p>
<p dir="auto">To convert some data to a BSON document pass it to the <code>Mongoc.BSON()</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myBSON = Mongoc.BSON(myData)"><pre>myBSON <span class="pl-k">=</span> Mongoc<span class="pl-k">.</span><span class="pl-c1">BSON</span>(myData)</pre></div>
<p dir="auto"><strong>Note:</strong> the root of a BSON document is always a dictionary-like structure: <strong>the value passed to <code>Mongoc.BSON()</code> must be a key-value mapping</strong>. Acceptable key-value mappings are things like <code>Dict</code>s, composite type (<code>struct</code>) instances, and anything that extends <code>AbstractDict</code>. More specifically, it can be any mapping for which the keys or fields are accessible via the <code>keys()</code> or <code>fieldnames()</code> functions. If you need to save data that is not at root a key-value mapping, then you can do something like this to create a BSON document with a single key, <code>"myArray"</code> in this case, that is mapped to the data you want to store:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Store an array in a BSON document.
myArray = [1, 2, 3]
myBSON = Mongoc.BSON(&quot;myArray&quot; =&gt; myArray)"><pre><span class="pl-c"><span class="pl-c">#</span> Store an array in a BSON document.</span>
myArray <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
myBSON <span class="pl-k">=</span> Mongoc<span class="pl-k">.</span><span class="pl-c1">BSON</span>(<span class="pl-s"><span class="pl-pds">"</span>myArray<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> myArray)</pre></div>
<h3 dir="auto"><a id="user-content-importing-from-bson" class="anchor" aria-hidden="true" href="#importing-from-bson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Importing from BSON</h3>
<p dir="auto">To convert data stored in a BSON document into a Julia data structure you use the <code>as_type(type, data)</code> function. <code>as_type</code> accepts two arguments: the <code>type</code> to convert the BSON document into, and <code>data</code>, the BSON document itself. It will create an instance of whatever type is passed with the values specified in the BSON document, recursively if necessary. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myData = as_type(MyType, myBSON)"><pre>myData <span class="pl-k">=</span> <span class="pl-c1">as_type</span>(MyType, myBSON)</pre></div>
<p dir="auto">Or to retrieve the array stored in the <em>Exporting to BSON</em> section:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myArray = as_type(Array{Int64}, myBSON[&quot;myArray&quot;])"><pre>myArray <span class="pl-k">=</span> <span class="pl-c1">as_type</span>(Array{Int64}, myBSON[<span class="pl-s"><span class="pl-pds">"</span>myArray<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto">Note here that we stored the array under the <code>"myArray"</code> key, so we retrieve the array using that key on the BSON document before passing it to <code>as_type</code>.</p>
<h3 dir="auto"><a id="user-content-storing-bson-documents-as-files-or-in-a-mongodb" class="anchor" aria-hidden="true" href="#storing-bson-documents-as-files-or-in-a-mongodb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Storing BSON documents as files or in a MongoDB</h3>
<p dir="auto">To read and write data (BSON) from and to files or a MongoDB, see this <a href="https://felipenoris.github.io/Mongoc.jl/stable/tutorial/#Read/Write-BSON-documents-from/to-IO-Stream-1" rel="nofollow">documentation for <em>Mongoc.jl</em></a>.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">The source code for the package <code>BSONify.jl</code> is licensed under the <a href="https://github.com/OliverColeman/BSONify.jl/blob/master/LICENSE">MIT License</a>.</p>
<h2 dir="auto"><a id="user-content-alternative-and-related-libraries" class="anchor" aria-hidden="true" href="#alternative-and-related-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternative and related libraries</h2>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/felipenoris/Mongoc.jl">Mongoc.jl</a> -
allows converting simple data structures such as Dicts and Arrays to and from BSON. <em>BSONify.jl</em> is partly built on top of <em>Mongoc.jl</em>.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaIO/BSON.jl">BSON.jl</a> - allows converting complex data structures to and from BSON. Stores type metadata in the BSON, producing larger and (IMHO ;)) harder to interpret BSON documents. Requires specifying the module namespace under which to restore complex/custom types (rather than the type itself like <em>BSONify.jl</em>).</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a> - similar API but for JSON rather than BSON.</p>
</li>
</ul>
</article></div>