<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
  <br>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/ipyjl/logo.png"><img width="300" src="https://github.com/ChifiSource/image_dump/raw/main/ipyjl/logo.png" style="max-width: 100%;"></a>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ" rel="nofollow"><img src="https://camo.githubusercontent.com/b91c7b2ad1947c62e739da268a92e631a1b0f29faf016948d2b055aa299c6a0e/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Lathe/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/075171947593715ad002b0a4dd6e2431140df2617529588325e6e94a9a72862b/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Lathe/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ" rel="nofollow"><img src="https://camo.githubusercontent.com/55cdf4a8b018823162a426f54bce2ff9ec6c9ed7319082ced6d96e9f48c21817/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Lathe/pkgeval.svg" style="max-width: 100%;"></a>
<br>
<br></p>
  <h1 dir="auto"><a id="user-content-ipycells" class="anchor" aria-hidden="true" href="#ipycells"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IPyCells</h1>
  </div>
<p dir="auto"><code>IPyCells</code> provides parametric cell-based functionality, as well as readers and writers for different cell formats (Ipynb, JL), as well as offering the option to extend the cells via parametric typing. This module provides</p>
<h6 dir="auto"><a id="user-content-cells" class="anchor" aria-hidden="true" href="#cells"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>cells</h6>
<ul dir="auto">
<li><code>AbstractCell</code></li>
<li><code>Cell(n::Int64, type::String, content::String, outputs::Any = ""; id::String = "")</code></li>
<li><code>string(Cell{&lt;:Any})</code></li>
<li><code>string(cell::Cell{:md})</code></li>
<li><code>string(cell::Cell{:doc})</code></li>
<li><code>getindex(v::Vector{Cell{&lt;:Any}}, s::String)</code></li>
</ul>
<h6 dir="auto"><a id="user-content-readwrite" class="anchor" aria-hidden="true" href="#readwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>read/write</h6>
<ul dir="auto">
<li><code>read_plto(uri::String)</code></li>
<li><code>read_jlcells(uri::String)</code></li>
<li><code>read_jl(uri::String)</code></li>
<li><code>save(cells::Vector{&lt;:AbstractCell}, path::String)</code></li>
<li><code>save_ipynb(cells::Vector{&lt;:AbstractCell}, path::String)</code> (this <strong>does not</strong> work just right yet) cells are readable by Olive, not jupyter post-save.</li>
<li><code>read_ipynb(f::String)</code></li>
<li><code>ipyjl(ipynb_path::String, output_path::String)</code></li>
</ul>
<h6 dir="auto"><a id="user-content-internal" class="anchor" aria-hidden="true" href="#internal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>(internal)</h6>
<ul dir="auto">
<li><code>plto_cell_lines(uri::String)</code></li>
<li><code>sep(content::Any)</code></li>
</ul>
<h3 dir="auto"><a id="user-content-adding" class="anchor" aria-hidden="true" href="#adding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add IPyCells"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add IPyCells</pre></div>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">There are many ways to use <code>IPyCells</code> -- This package could be used to convert Pluto notebooks into Olive notebooks, IPython notebooks into Julia notebooks. Currently, the ipynb save method will break your <code>.ipynb</code> files where IJulia cannot read them, <a href="https://github.com/ChifiSource/Olive.jl">Olive</a> eventually this is planned to be fixed. Anyway, this package could be used to read any package and save it into (currently) ipynb or julia.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ipynbjl(&quot;ipynbtestbook.ipynb&quot;, &quot;example.jl&quot;)"><pre><span class="pl-c1">ipynbjl</span>(<span class="pl-s"><span class="pl-pds">"</span>ipynbtestbook.ipynb<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>example.jl<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cells = read_ipynb
save_jl(cells)"><pre>cells <span class="pl-k">=</span> read_ipynb
<span class="pl-c1">save_jl</span>(cells)</pre></div>
<p dir="auto">This preserves both the output and markdown. Alternatively, you could write functions around cells enabling for different cell types to be read by this reader.</p>
</article></div>