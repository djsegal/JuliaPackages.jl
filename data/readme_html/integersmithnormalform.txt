<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-integersmithnormalform" class="anchor" aria-hidden="true" href="#integersmithnormalform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IntegerSmithNormalForm</h1>
<p dir="auto"><a href="https://github.com/dmerkert/IntegerSmithNormalForm.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/dmerkert/IntegerSmithNormalForm.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/dmerkert/IntegerSmithNormalForm.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f26050ae2f0f1ece529cbf7e5c94d188cfaed6b3f405d0c974a54eb76135694/68747470733a2f2f636f6465636f762e696f2f67682f646d65726b6572742f496e7465676572536d6974684e6f726d616c466f726d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/dmerkert/IntegerSmithNormalForm.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package computes the Smith Normal Form on integer matrices and provides the respective transformation matrices.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">A simple example is the matrix</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; A = [4 2; 0 8]
2×2 Matrix{Int64}:
 4  2
 0  8"><pre lang="julia-REPL" class="notranslate"><code>julia&gt; A = [4 2; 0 8]
2×2 Matrix{Int64}:
 4  2
 0  8
</code></pre></div>
<p dir="auto">where</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using IntegerSmithNormalForm

julia&gt; S, B, T = snf(A)
([1 0; 4 -1], [2 0; 0 16], [0 1; 1 -2])"><pre lang="julia-REPL" class="notranslate"><code>julia&gt; using IntegerSmithNormalForm

julia&gt; S, B, T = snf(A)
([1 0; 4 -1], [2 0; 0 16], [0 1; 1 -2])
</code></pre></div>
<p dir="auto">and we have</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; S*A*T
2×2 Matrix{Int64}:
 2   0
 0  16

julia&gt; elementary_divisors(A)
2-element Vector{Int64}:
  2
 16"><pre lang="julia-REPL" class="notranslate"><code>julia&gt; S*A*T
2×2 Matrix{Int64}:
 2   0
 0  16

julia&gt; elementary_divisors(A)
2-element Vector{Int64}:
  2
 16
</code></pre></div>
</article></div>