<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pchipinterpolationjl" class="anchor" aria-hidden="true" href="#pchipinterpolationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PCHIPInterpolation.jl</h1>
<p dir="auto"><a href="https://github.com/gerlero/PCHIPInterpolation.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/gerlero/PCHIPInterpolation.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gerlero/PCHIPInterpolation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0225279e798e62982c6fa328da640bdf340e374ec4cc640251ab72ff293ed576/68747470733a2f2f636f6465636f762e696f2f67682f6765726c65726f2f5043484950496e746572706f6c6174696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/gerlero/PCHIPInterpolation.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">PCHIP (Piecewise Cubic Hermite Interpolating Polynomial) spline interpolation of arbitrarily spaced one-dimensional data in Julia. This package is a fork of <a href="https://github.com/slabanja/SimplePCHIP">SimplePCHIP</a> with some extra features.</p>
<p dir="auto">PCHIP interpolation preserves monotonicity (i.e., it will not over- or undershoot monotonic data points). See <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PchipInterpolator.html" rel="nofollow">this SciPy documentation page</a> for more details.</p>
<h2 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h2>
<h3 dir="auto"><a id="user-content-load-the-package" class="anchor" aria-hidden="true" href="#load-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load the package</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PCHIPInterpolation"><pre><span class="pl-k">using</span> PCHIPInterpolation</pre></div>
<p dir="auto">You will be prompted to install the package if you do not already have it.</p>
<h3 dir="auto"><a id="user-content-create-a-pchip-interpolator" class="anchor" aria-hidden="true" href="#create-a-pchip-interpolator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create a PCHIP interpolator</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xs = [0.0,  1.2,  2.0,  5.0, 10.0, 11.0]
ys = [2.0,  2.1,  1.0,  0.0,  0.0,  3.0]

itp = Interpolator(xs, ys)"><pre>xs <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>,  <span class="pl-c1">1.2</span>,  <span class="pl-c1">2.0</span>,  <span class="pl-c1">5.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">11.0</span>]
ys <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>,  <span class="pl-c1">2.1</span>,  <span class="pl-c1">1.0</span>,  <span class="pl-c1">0.0</span>,  <span class="pl-c1">0.0</span>,  <span class="pl-c1">3.0</span>]

itp <span class="pl-k">=</span> <span class="pl-c1">Interpolator</span>(xs, ys)</pre></div>
<p dir="auto">The <code>xs</code> and <code>ys</code> inputs to the <code>Interpolator</code> can be of any subtype of <a href="https://docs.julialang.org/en/v1/base/arrays/#Base.AbstractVector" rel="nofollow"><code>AbstractVector</code></a>, including the default Julia <a href="https://docs.julialang.org/en/v1/base/arrays/#Base.Vector" rel="nofollow"><code>Vector</code></a> (as in the example), custom vector types from other packages, and <a href="https://docs.julialang.org/en/v1/base/collections/#Base.AbstractRange" rel="nofollow">ranges</a> (e.g., <code>1:2:5</code>).</p>
<h3 dir="auto"><a id="user-content-evaluate" class="anchor" aria-hidden="true" href="#evaluate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Evaluate</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y = itp(1.5) # At a single point
ys = itp.(xs) # At multiple points"><pre>y <span class="pl-k">=</span> <span class="pl-c1">itp</span>(<span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> At a single point</span>
ys <span class="pl-k">=</span> <span class="pl-c1">itp</span>.(xs) <span class="pl-c"><span class="pl-c">#</span> At multiple points</span></pre></div>
<p dir="auto">Attempts to evaluate outside the interpolation range will throw a <a href="https://docs.julialang.org/en/v1/base/base/#Core.DomainError" rel="nofollow"><code>DomainError</code></a> (i.e., the interpolator will not perform extrapolation).</p>
<h3 dir="auto"><a id="user-content-plot-with-plots" class="anchor" aria-hidden="true" href="#plot-with-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plot (with <a href="https://github.com/JuliaPlots/Plots.jl">Plots</a>)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots

plot(itp, markers=true, label=&quot;PCHIP&quot;)"><pre><span class="pl-k">using</span> Plots

<span class="pl-c1">plot</span>(itp, markers<span class="pl-k">=</span><span class="pl-c1">true</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>PCHIP<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="Plot" style="max-width: 100%;"></a></p>
<p dir="auto">The monotonicity-preserving property of PCHIP interpolation can be clearly seen in the plot.</p>
<h3 dir="auto"><a id="user-content-compute-a-definite-integral" class="anchor" aria-hidden="true" href="#compute-a-definite-integral"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compute a definite integral</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="integral = integrate(itp, 1, 3) # Integral between 1 and 3"><pre>integral <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(itp, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> Integral between 1 and 3</span></pre></div>
<h3 dir="auto"><a id="user-content-compute-a-derivative-with-forwarddiff" class="anchor" aria-hidden="true" href="#compute-a-derivative-with-forwarddiff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compute a derivative (with <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a>)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ForwardDiff

dydx = ForwardDiff.derivative(itp, 1.5)"><pre><span class="pl-k">using</span> ForwardDiff

dydx <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">derivative</span>(itp, <span class="pl-c1">1.5</span>)</pre></div>
<h3 dir="auto"><a id="user-content-general-cubic-hermite-spline" class="anchor" aria-hidden="true" href="#general-cubic-hermite-spline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General cubic Hermite spline</h3>
<p dir="auto">A different <code>Interpolator</code> constructor also exists that takes the derivative values at the interpolation points as a third argument. This method will create a generic <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicHermiteSpline.html" rel="nofollow">cubic Hermite spline</a>, which will not preserve monotonicity in general.</p>
</article></div>