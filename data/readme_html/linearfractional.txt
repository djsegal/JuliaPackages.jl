<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-linearfractional" class="anchor" aria-hidden="true" href="#linearfractional"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LinearFractional</h1>

<p><a href="https://travis-ci.org/focusenergy/LinearFractional.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e966f9d0e3109f62c8ec7d41e7032a8a1a1f0850/68747470733a2f2f7472617669732d63692e6f72672f666f637573656e657267792f4c696e6561724672616374696f6e616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/focusenergy/LinearFractional.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></p>
<p>LinearFractional is an extension for <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> to optimize linear programs with fractional objectives.  LinearFractional implements the <a href="https://en.wikipedia.org/wiki/Linear-fractional_programming" rel="nofollow">Charnes-Cooper transformation</a> behind-the-scenes so that the user only needs to specify the problem as any ordinary JuMP problem, but specifying a numerator and denominator instead of a single objective function.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the latest tagged version, run the following command from pkg-mode:</p>
<div class="highlight highlight-source-julia"><pre>] add LinearFractional</pre></div>
<p>Then you can run the built-in unit tests with</p>
<div class="highlight highlight-source-julia"><pre>] test LinearFractional</pre></div>
<p>to verify that everything is functioning properly on your machine.</p>
<h2><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Example</h2>
<p>This toy example refers to the reference problem in <a href="http://www.ams.jhu.edu/~castello/625.414/Handouts/FractionalProg.pdf" rel="nofollow">http://www.ams.jhu.edu/~castello/625.414/Handouts/FractionalProg.pdf</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearFractional
<span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> Clp

lfp <span class="pl-k">=</span> <span class="pl-c1">LinearFractionalModel</span>(<span class="pl-c1">with_optimizer</span>(Clp<span class="pl-k">.</span>Optimizer))
x1 <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(lfp, base_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span>, lower_bound<span class="pl-k">=</span><span class="pl-c1">0</span>)
x2 <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(lfp, base_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x2<span class="pl-pds">"</span></span>, lower_bound<span class="pl-k">=</span><span class="pl-c1">0</span>, upper_bound<span class="pl-k">=</span><span class="pl-c1">6</span>)
<span class="pl-c1">@constraint</span>(lfp, <span class="pl-k">-</span>x1 <span class="pl-k">+</span> x2 <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>)
<span class="pl-c1">@constraint</span>(lfp, <span class="pl-c1">2</span>x1 <span class="pl-k">+</span> x2 <span class="pl-k">&lt;=</span> <span class="pl-c1">14</span>)
<span class="pl-c1">@constraint</span>(lfp, x2 <span class="pl-k">&lt;=</span> <span class="pl-c1">6</span>)
numer <span class="pl-k">=</span> <span class="pl-c1">@expression</span>(lfp,  <span class="pl-k">-</span><span class="pl-c1">2</span>x1 <span class="pl-k">+</span> x2 <span class="pl-k">+</span> <span class="pl-c1">2</span>)
denom <span class="pl-k">=</span> <span class="pl-c1">@expression</span>(lfp,  x1 <span class="pl-k">+</span> <span class="pl-c1">3</span>x2 <span class="pl-k">+</span> <span class="pl-c1">4</span>)
<span class="pl-c1">set_objective</span>(lfp, JuMP<span class="pl-k">.</span>MOI<span class="pl-k">.</span>MIN_SENSE, numer, denom)
<span class="pl-c1">optimize!</span>(lfp)
<span class="pl-c1">termination_status</span>(lfp)
<span class="pl-c1">objective_value</span>(lfp)
<span class="pl-c1">value</span>(x1)
<span class="pl-c1">value</span>(x2)</pre></div>
</article></div>