<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazystackjl" class="anchor" aria-hidden="true" href="#lazystackjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyStack.jl</h1>
<p dir="auto"><a href="https://github.com/mcabbott/LazyStack.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/mcabbott/LazyStack.jl/workflows/CI/badge.svg" alt="Github CI" style="max-width: 100%;"></a></p>
<p dir="auto">This package exports a function <code>lazystack</code> for turning a list of arrays
into one <code>AbstractArray</code>. Given several arrays with the same <code>eltype</code>,
or an array of such arrays, it returns a lazy <code>Stacked{T,N}</code> view of these:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; lazystack([1:2, 3:4, 5:6])
2×3 lazystack(::Vector{UnitRange{Int64}}) with eltype Int64:
 1  3  5
 2  4  6

julia&gt; lazystack([pi^ℯ], [ℯ^pi])
1×2 lazystack(::Tuple{Vector{Float64}, Vector{Float64}}) with eltype Float64:
 22.4592  23.1407"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lazystack</span>([<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">6</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">lazystack</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{UnitRange{Int64}}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lazystack</span>([<span class="pl-c1">pi</span><span class="pl-k">^</span>ℯ], [ℯ<span class="pl-k">^</span><span class="pl-c1">pi</span>])
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">lazystack</span>(<span class="pl-k">::</span><span class="pl-c1">Tuple{Vector{Float64}, Vector{Float64}}</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">22.4592</span>  <span class="pl-c1">23.1407</span></pre></div>
<p dir="auto">Before v0.1 this function used to be called <code>stack</code>, but that name is now exported by Base (from Julia 1.9).
Like this package, <code>Base.stack</code> makes an array with <code>size(result) = (size(inner)..., size(outer)...)</code>.
However, it always returns a new dense array, not a lazy container.
And instead of two vectors (in the above example) it would want a tuple <code>stack(([pi^ℯ], [ℯ^pi]))</code>.</p>
<p dir="auto">Generators such as <code>lazystack([i,2i] for i in 1:5)</code> and arrays of mixed eltype like <code>lazystack([1,2], [3.0, 4.0], [5im, 6im])</code> used to be be handled here, making a dense array, but are now simply passed through to <code>Base.stack</code>.</p>
<p dir="auto">When the individual slices aren't backed by an <code>Array</code>, as for instance with <code>CuArray</code>s on a GPU, then again <code>Base.stack</code> is called.
This should make one big <code>CuArray</code>, since scalar indexing of individual slices won't work well.</p>
<h3 dir="auto"><a id="user-content-ragged-stack" class="anchor" aria-hidden="true" href="#ragged-stack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ragged stack</h3>
<p dir="auto">There is also a version which does not demand that slices have equal <code>size</code> (or equal <code>ndims</code>).
For now this is not lazy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; raggedstack([10:10+n for n in 1:3])
4×3 Matrix{Int64}:
 10  10  10
 11  11  11
  0  12  12
  0   0  13

julia&gt; using OffsetArrays

julia&gt; raggedstack(OffsetArray(fill(1.0n, 3), rand(-1:1)) for n in 1:10; fill=NaN)
5×10 OffsetArray(::Matrix{Float64}, 0:4, 1:10) with eltype Float64 with indices 0:4×1:10:
 NaN      2.0  NaN      4.0  NaN      6.0    7.0  NaN      9.0  NaN
   1.0    2.0    3.0    4.0    5.0    6.0    7.0  NaN      9.0   10.0
   1.0    2.0    3.0    4.0    5.0    6.0    7.0    8.0    9.0   10.0
   1.0  NaN      3.0  NaN      5.0  NaN    NaN      8.0  NaN     10.0
 NaN    NaN    NaN    NaN    NaN    NaN    NaN      8.0  NaN    NaN"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">raggedstack</span>([<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">+</span>n <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>])
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">10</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">11</span>  <span class="pl-c1">11</span>  <span class="pl-c1">11</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">12</span>  <span class="pl-c1">12</span>
  <span class="pl-c1">0</span>   <span class="pl-c1">0</span>  <span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">raggedstack</span>(<span class="pl-c1">OffsetArray</span>(<span class="pl-c1">fill</span>(<span class="pl-c1">1.0</span>n, <span class="pl-c1">3</span>), <span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)) <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>; fill<span class="pl-k">=</span><span class="pl-c1">NaN</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">10</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span>
 <span class="pl-c1">NaN</span>      <span class="pl-c1">2.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">4.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">6.0</span>    <span class="pl-c1">7.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">9.0</span>  <span class="pl-c1">NaN</span>
   <span class="pl-c1">1.0</span>    <span class="pl-c1">2.0</span>    <span class="pl-c1">3.0</span>    <span class="pl-c1">4.0</span>    <span class="pl-c1">5.0</span>    <span class="pl-c1">6.0</span>    <span class="pl-c1">7.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">9.0</span>   <span class="pl-c1">10.0</span>
   <span class="pl-c1">1.0</span>    <span class="pl-c1">2.0</span>    <span class="pl-c1">3.0</span>    <span class="pl-c1">4.0</span>    <span class="pl-c1">5.0</span>    <span class="pl-c1">6.0</span>    <span class="pl-c1">7.0</span>    <span class="pl-c1">8.0</span>    <span class="pl-c1">9.0</span>   <span class="pl-c1">10.0</span>
   <span class="pl-c1">1.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">3.0</span>  <span class="pl-c1">NaN</span>      <span class="pl-c1">5.0</span>  <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>      <span class="pl-c1">8.0</span>  <span class="pl-c1">NaN</span>     <span class="pl-c1">10.0</span>
 <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span>      <span class="pl-c1">8.0</span>  <span class="pl-c1">NaN</span>    <span class="pl-c1">NaN</span></pre></div>
<h3 dir="auto"><a id="user-content-other-stack-like-packages" class="anchor" aria-hidden="true" href="#other-stack-like-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other <code>stack</code>-like packages</h3>
<p dir="auto">This one plays well with <a href="https://github.com/JuliaArrays/OffsetArrays.jl">OffsetArrays.jl</a>, and <a href="https://github.com/JuliaDiff/ChainRules.jl">ChainRules.jl</a>-compatible AD such as <a href="https://github.com/FluxML/Zygote.jl">Zygote.jl</a>. It's also used internally by <a href="https://github.com/mcabbott/TensorCast.jl">TensorCast.jl</a>.</p>
<p dir="auto">Besides which, there are several other ways to achieve similar things:</p>
<ul dir="auto">
<li>For an array of arrays, you can also use <a href="https://bramtayl.github.io/JuliennedArrays.jl/latest/#JuliennedArrays.Align" rel="nofollow"><code>JuliennedArrays.Align</code></a>. This requires (or enables) you to specify which dimensions of the output belong to the sub-arrays, instead of writing <code>PermutedDimsArray(stack(...), ...)</code>.</li>
<li>There is also <a href="https://github.com/JuliaDiffEq/RecursiveArrayTools.jl#vectorofarray"><code>RecursiveArrayTools.VectorOfArray</code></a> which as its name hints only allows a one-dimensional container. (And unlike the package name, nothing is recursive.) Linear indexing retreives a slice, not an element, which is sometimes surprising.</li>
<li>For a tuple of arrays, <a href="https://github.com/JuliaArrays/LazyArrays.jl#concatenation"><code>LazyArrays.Hcat</code></a> is at present faster to index than <code>lazystack</code>, but doesn't allow arbitrary dimensions.</li>
</ul>
<p dir="auto">And a few more:</p>
<ul dir="auto">
<li>When writing this I missed <a href="https://github.com/JuliaData/SplitApplyCombine.jl#combinedimsviewarray"><code>SplitApplyCombine.combinedimsview</code></a>, which is very similar to <code>stack</code>, but doesn't handle tuples.</li>
<li>Newer than this package is <a href="https://github.com/JuliaArrays/StackViews.jl">StackViews.jl</a> handles both, with <code>StackView(A,B,dims=4) == StackView([A,B],4)</code> creating a 4th dimension; the container is always one-dimensional.</li>
<li><a href="https://fluxml.ai/Flux.jl/stable/utilities/#Flux.stack" rel="nofollow"><code>Flux.stack</code></a> similarly takes a dimension, but eagerly creates an <code>Array</code>.</li>
</ul>
<p dir="auto">The lazy inverse:</p>
<ul dir="auto">
<li>
<p dir="auto">The package <a href="https://github.com/JuliaArrays/ArraysOfArrays.jl">ArraysOfArrays.jl</a> solves the opposite problem, of accessing one large array as if it were many slices.</p>
</li>
<li>
<p dir="auto">As does <a href="https://bramtayl.github.io/JuliennedArrays.jl/latest/#JuliennedArrays.Slices-Union%7BTuple%7BNumberOfDimensions%7D,%20Tuple%7BItem%7D,%20Tuple%7BAbstractArray%7BItem,NumberOfDimensions%7D,Vararg%7BInt64,N%7D%20where%20N%7D%7D%20where%20NumberOfDimensions%20where%20Item" rel="nofollow"><code>JuliennedArrays.Slices</code></a>.</p>
</li>
<li>
<p dir="auto">As does <a href="https://github.com/synchronoustechnologies/PackedVectorsOfVectors.jl"><code>PackedVectorsOfVectors</code></a>, although only 1+1 dimensions. Also has an eager <code>pack</code> method which turns a vector of vectors into view of a single larger matrix.</p>
</li>
<li>
<p dir="auto"><a href="https://docs.julialang.org/en/v1/base/arrays/#Base.eachslice" rel="nofollow"><code>Base.eachslice</code></a> also views one large array as many slices. This was a generator, but <a href="https://github.com/JuliaLang/julia/pull/32310" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/32310/hovercard">JuliaLang#32310</a> upgrades it to a multi-dimensional indexable container, in Julia 1.9.</p>
</li>
</ul>
<p dir="auto">Eager:</p>
<ul dir="auto">
<li>
<p dir="auto">After writing this I learned of <a href="https://github.com/JuliaLang/julia/pull/31644" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/31644/hovercard">JuliaLang#31644</a> which extends <code>reduce(hcat,...)</code> to work on generators. (Not merged yet.)</p>
</li>
<li>
<p dir="auto">Later, <a href="https://github.com/JuliaLang/julia/pull/43334" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/43334/hovercard">JuliaLang#43334</a> has added a better version of this package's <code>stack_iter</code> method to Base. (Available in Julia 1.9, or in <a href="https://github.com/JuliaLang/Compat.jl">Compat.jl</a>.)</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-other-flatten-like-packages" class="anchor" aria-hidden="true" href="#other-flatten-like-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other <code>flatten</code>-like packages:</h3>
<ul dir="auto">
<li><a href="https://gitlab.com/aplavin/FlexiMaps.jl#flatmapflatten" rel="nofollow">FlexiMaps.flatten</a> is another eager implementation.</li>
<li><a href="https://github.com/ahwillia/CatViews.jl">CatViews.jl</a> offers a lazy <code>vcat</code>. But the package is old and I think not so fast.</li>
</ul>
</article></div>