<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-astinterpreter" class="anchor" aria-hidden="true" href="#astinterpreter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ASTInterpreter</h1>
<p dir="auto"><a href="https://travis-ci.org/Keno/ASTInterpreter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a97cc0cb716d2f5c580e3eee17cc30f2ba08f997dedceccf160b5ae04c8f077c/68747470733a2f2f7472617669732d63692e6f72672f4b656e6f2f415354496e7465727072657465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Keno/ASTInterpreter.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The AST Interpreter component of Gallium (i.e. does not include any breakpoint,
stuff, etc.). This is a development prototype and comes with it's own debug
prompt for that purpose.</p>
<p dir="auto">Usage:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using ASTInterpreter

function foo(n)
    x = n+1
    ((BigInt[1 1; 1 0])^x)[2,1]
end

interp = enter(foo, Environment(Dict(:n =&gt; 20),Dict{Symbol,Any}()))
ASTInterpreter.RunDebugREPL(interp)"><pre class="notranslate"><code>using ASTInterpreter

function foo(n)
    x = n+1
    ((BigInt[1 1; 1 0])^x)[2,1]
end

interp = enter(foo, Environment(Dict(:n =&gt; 20),Dict{Symbol,Any}()))
ASTInterpreter.RunDebugREPL(interp)
</code></pre></div>
<p dir="auto">Basic Commands:</p>
<ul dir="auto">
<li><code>n</code> steps to the next line</li>
<li><code>s</code> steps into the next call</li>
<li><code>finish</code> runs to the end of the function</li>
<li><code>bt</code> shows a simple backtrace</li>
<li><code>`stuff</code> runs <code>stuff</code> in the current frame's context</li>
<li><code>fr v</code> will show all variables in the current frame</li>
<li><code>f n</code> where <code>n</code> is an integer, will go to the <code>n</code>-th frame.</li>
</ul>
<p dir="auto">Advanced commands:</p>
<ul dir="auto">
<li><code>nc</code> steps to the next call</li>
<li><code>ns</code> steps to the next statement</li>
<li><code>se</code> does one expression step</li>
<li><code>si</code> does the same but steps into a call if a call is the next expression</li>
<li><code>sg</code> steps into a generated function</li>
<li><code>shadow</code> shows the internal representation of the expression tree (for debugger debugging only)</li>
<li><code>loc</code> shows the column data for the current top frame, in the same format
as JuliaParsers's testshell.</li>
</ul>
<p dir="auto">This is a prototype, do not expect it to be correct or usable.</p>
<h1 dir="auto"><a id="user-content-experimental-mode" class="anchor" aria-hidden="true" href="#experimental-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Experimental mode</h1>
<p dir="auto">There is an experimental UI mode accessible by setting <code>ASTInterpreter.fancy_mode = true</code>, which attempts to provide a better interface but is not currently not capable of handling all julia code. Use at your own peril.</p>
<h4 dir="auto"><a id="user-content-current-dependencies" class="anchor" aria-hidden="true" href="#current-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Dependencies</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/JuliaLang/Reactive.jl.git&quot;)
Pkg.clone(&quot;https://github.com/JuliaLang/JuliaParser.jl.git&quot;)
Pkg.clone(&quot;https://github.com/Keno/TerminalUI.jl.git&quot;)
Pkg.clone(&quot;https://github.com/Keno/VT100.jl.git&quot;)
Pkg.clone(&quot;https://github.com/Keno/AbstractTrees.jl.git&quot;)
Pkg.clone(&quot;https://github.com/Keno/LineNumbers.jl.git&quot;)
Pkg.clone(&quot;https://github.com/Keno/ASTInterpreter.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaLang/Reactive.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaLang/JuliaParser.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Keno/TerminalUI.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Keno/VT100.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Keno/AbstractTrees.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Keno/LineNumbers.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Keno/ASTInterpreter.jl.git<span class="pl-pds">"</span></span>)</pre></div>
</article></div>