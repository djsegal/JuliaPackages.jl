<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-suironjl---an-inference-engine-written-in-julia" class="anchor" aria-hidden="true" href="#suironjl---an-inference-engine-written-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Suiron.jl - An Inference Engine written in Julia.</h1>
<p dir="auto">Suiron is an inference engine written in Julia. The rule declaration syntax is similar to Prolog, but there are differences.</p>
<p dir="auto">This brief README does not present a detailed explanation of how inference engines work, so a basic understanding of Prolog is a prerequisite. Documentation will be expanded in time.</p>
<h2 dir="auto"><a id="user-content-briefly" class="anchor" aria-hidden="true" href="#briefly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Briefly</h2>
<p dir="auto">An inference engine responds to queries about facts recorded in a knowledgebase. By using logic
rules, it can infer information which is not explicitly recorded.</p>
<p dir="auto">For example, if the knowledgebase records that Frank is the father of Marcus, and that George is the father of Frank, the inference engine can infer that George is the grandfather of Marcus, even though the knowledgebase has no grandfather-facts. (The knowledgebase does need a rule which defines grandfather as a father's father or a mother's father.)</p>
<h2 dir="auto"><a id="user-content-interpreter" class="anchor" aria-hidden="true" href="#interpreter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interpreter</h2>
<p dir="auto">Suiron reads facts and rules from a text-format source file, parses them, and
writes them into the knowledgebase.</p>
<p dir="auto">Below is an example of a fact, which means "June is the mother of Theodore":</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mother(June, Theodore)."><pre class="notranslate"><code>mother(June, Theodore).
</code></pre></div>
<p dir="auto">Here we see the main difference between Suiron and Prolog. In Prolog, lower case words are 'atoms' (that is, string constants) and upper case words are variables. In Suiron, atoms can be lower case or upper case. Thus 'mother', 'June' and 'Theodore' are all atoms. Suiron's atoms can even contain spaces.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mother(June, The Beaver)."><pre class="notranslate"><code>mother(June, The Beaver).
</code></pre></div>
<p dir="auto">Suiron's variables are defined by putting a dollar sign in front of the variable name, for example, $Child. A query to determine June's children would be written:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mother(June, $Child)."><pre class="notranslate"><code>mother(June, $Child).
</code></pre></div>
<p dir="auto">Please refer to <a href="src/LogicVar.jl">LogicVar.jl</a>.</p>
<p dir="auto">In Prolog, the anonymous variable (which matches anything) is an underscore: _ .
In Suiron, it must begin with a dollar sign: $_ .</p>
<p dir="auto">Below is an example of a rule which contains anonymous variables. If a knowledgebase
contains facts about employees, for example, employee(Julia, cashier, 2000),
then a rule to list high wage employees would be:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="high_wage($Emp) :- $Emp = employee($_, $_, $Salary), $Salary &gt;= 5000."><pre class="notranslate"><code>high_wage($Emp) :- $Emp = employee($_, $_, $Salary), $Salary &gt;= 5000.
</code></pre></div>
<hr>
<p dir="auto">Facts and rules can also be created immediately within a Julia program, without
loading them from a file. The fact mother(June, Theodore) could be created by calling
the function parse_complex().</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="fact = parse_complex(&quot;mother(June, Theodore).&quot;)"><pre class="notranslate"><code>fact = parse_complex("mother(June, Theodore).")
</code></pre></div>
<p dir="auto">'Complex term' means the same as 'compound term'.</p>
<p dir="auto">Please refer to comments in <a href="src/SComplex.jl">SComplex.jl</a> for more information.</p>
<p dir="auto">Note: Some of Suiron's types have an 'S' appended to the name, to distinguish
them from Julia types with the same name.</p>
<p dir="auto">The query mother(June, $Child) could be created in Julia as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mother = Atom(&quot;mother&quot;)
June   = Atom(&quot;June&quot;)
child  = LogicVar(&quot;Child&quot;)
query  = make_query(mother, June, child)"><pre class="notranslate"><code>mother = Atom("mother")
June   = Atom("June")
child  = LogicVar("Child")
query  = make_query(mother, June, child)
</code></pre></div>
<p dir="auto">Please refer to <a href="src/LogicVar.jl">LogicVar.jl</a> and <a href="src/Goal.jl">Goal.jl</a> for more details.</p>
<p dir="auto">Note: In the example above, the logic variable is defined as "Child", not "$Child".
The reason for this is because Julia interprets $Child as a string interpolation, when it
is between quotation marks. Therefore, when defining a logic variable with LogicVar(),
it is necessary to leave the dollar sign out. When the variable is printed, the dollar
sign will be shown.</p>
<p dir="auto">In parse-functions, such as parse_rule(), parse_unification(), etc., the dollar sign
cannot simply be left out. A variable name without a dollar sign would be interpreted
as an atom.</p>
<p dir="auto">Dollar signs must be escaped with a backslash. The following is wrong.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rule, err = parse_rule(&quot;test3($X) :- $X = add(7.922, 3).&quot;)"><pre class="notranslate"><code>rule, err = parse_rule("test3($X) :- $X = add(7.922, 3).")
</code></pre></div>
<p dir="auto">This is correct:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rule, err = parse_rule(&quot;test3(\$X) :- \$X = add(7.922, 3).&quot;)"><pre class="notranslate"><code>rule, err = parse_rule("test3(\$X) :- \$X = add(7.922, 3).")
</code></pre></div>
<p dir="auto">Alternatively, a percent sign can be used:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rule, err = parse_rule(&quot;test3(%X) :- %X = add(7.922, 3).&quot;)"><pre class="notranslate"><code>rule, err = parse_rule("test3(%X) :- %X = add(7.922, 3).")
</code></pre></div>
<p dir="auto">Of course, double quotes within double quotes must also be escaped, with a backslash.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="c, _ = parse_complex(&quot;quote_mark(\&quot;, \&quot;)&quot;)"><pre class="notranslate"><code>c, _ = parse_complex("quote_mark(\", \")")
</code></pre></div>
<h2 dir="auto"><a id="user-content-numbers" class="anchor" aria-hidden="true" href="#numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Numbers</h2>
<p dir="auto">Suiron supports integers and floating point numbers. A number such as '4' will
be parsed as an integer, and '4.0' will be parsed as a floating point number.</p>
<p dir="auto">Internally, Suiron lets Julia handle number conversions. When floats and ints
are mixed in arithmetic functions or comparisons, Julia will make the necessary
conversions.</p>
<p dir="auto">Please refer to <a href="src/SNumber.jl">SNumber.jl</a>.</p>
<h2 dir="auto"><a id="user-content-lists" class="anchor" aria-hidden="true" href="#lists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lists</h2>
<p dir="auto">Of course, Suiron supports linked lists, which work the same way as Prolog lists.
A linked list can be defined in a text file:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="..., [a, b, c, d] = [$Head | $Tail], ..."><pre class="notranslate"><code>..., [a, b, c, d] = [$Head | $Tail], ...
</code></pre></div>
<p dir="auto">or created within Julia:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="X = parse_linked_list(&quot;[a, b, c, d]&quot;)
Y = make_linked_list(true, $Head, $Tail)"><pre class="notranslate"><code>X = parse_linked_list("[a, b, c, d]")
Y = make_linked_list(true, $Head, $Tail)
</code></pre></div>
<p dir="auto">Please refer to <a href="src/SLinkedList.jl">SLinkedList.jl</a>.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<p dir="auto">Suiron was developed and tested with Julia version 1.7.3.</p>
<p dir="auto"><a href="https://julialang.org/" rel="nofollow">https://julialang.org/</a></p>
<h2 dir="auto"><a id="user-content-cloning" class="anchor" aria-hidden="true" href="#cloning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cloning</h2>
<p dir="auto">To clone the repository, run the following command in a terminal window:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="git clone git@github.com:Indrikoterio/Suiron.jl.git"><pre class="notranslate"><code>git clone git@github.com:Indrikoterio/Suiron.jl.git
</code></pre></div>
<p dir="auto">The repository has three folders:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Suiron/src
Suiron/test
Suiron/demo"><pre class="notranslate"><code>Suiron/src
Suiron/test
Suiron/demo
</code></pre></div>
<p dir="auto">The code for the inference engine itself is in the subfolder /src.</p>
<p dir="auto">The subfolder /test contains Julia programs which test the basic functionality of Suiron.</p>
<p dir="auto">The subfolder /demo contains a simple demo program which parses English sentences.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">In the top folder is a program called <a href="Query.jl">Query.jl</a>, which loads facts and rules from a file, and allows the user to query the knowledgebase. Query can be run in a terminal window as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia Query.jl test/kings.txt"><pre class="notranslate"><code>julia Query.jl test/kings.txt
</code></pre></div>
<p dir="auto">The user will be prompted for a query with this prompt: ?-</p>
<p dir="auto">The query below will print out all father/child relationships.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="?- father($F, $C)."><pre class="notranslate"><code>?- father($F, $C).
</code></pre></div>
<p dir="auto">After typing enter, the program will print out solutions, one after each press of Enter, until there are no more solutions, as indicated by 'No'.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia Query.jl test/kings.txt
?- father($F, $C).
$F = Godwin, $C = Harold II
$F = Godwin, $C = Tostig
$F = Godwin, $C = Edith
$F = Tostig, $C = Skule
$F = Harold II, $C = Harold
No
?-"><pre class="notranslate"><code>julia Query.jl test/kings.txt
?- father($F, $C).
$F = Godwin, $C = Harold II
$F = Godwin, $C = Tostig
$F = Godwin, $C = Edith
$F = Tostig, $C = Skule
$F = Harold II, $C = Harold
No
?-
</code></pre></div>
<p dir="auto">To use Suiron in your own project, add the following line:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Suiron"><pre class="notranslate"><code>using Suiron
</code></pre></div>
<p dir="auto">... at the top of your file.</p>
<p dir="auto">It is useful to define the module name 'Suiron' to something shorter, such as 'sr'.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="const sr = Suiron

pron = sr.Atom(&quot;pronoun&quot;)
verb = sr.Atom(&quot;verb&quot;)"><pre class="notranslate"><code>const sr = Suiron

pron = sr.Atom("pronoun")
verb = sr.Atom("verb")
</code></pre></div>
<p dir="auto">The program <a href="demo/ParseDemo.jl">ParseDemo.jl</a> demonstrates how to set up a knowledgebase and make queries. If you intend to incorporate Suiron into your own project, this is a good reference. There are detailed comments in the header.</p>
<p dir="auto">To run ParseDemo, move to the demo folder and execute the batch file 'run'.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd demo
./run"><pre class="notranslate"><code>cd demo
./run
</code></pre></div>
<p dir="auto">Suiron doesn't have a lot of built-in predicates, but it does have: <a href="src/Append.jl">Append.jl</a>, <a href="src/Functor.jl">Functor.jl</a>, <a href="src/Print.jl">Print.jl</a>, <a href="src/NewLine.jl">NewLine.jl</a>, <a href="src/Include.jl">Include.jl</a>, <a href="src/Exclude.jl">Exclude.jl</a>, <a href="src/GreaterThan.jl">GreaterThan.jl</a> (etc.)</p>
<p dir="auto">...and some arithmetic functions: <a href="src/Add.jl">Add.jl</a>, <a href="src/Subtract.jl">Subtract.jl</a>, <a href="src/Multiply.jl">Multiply.jl</a>, <a href="src/Divide.jl">Divide.jl</a>, <a href="src/Equal.jl">Equal.jl</a></p>
<p dir="auto">Please refer to the test programs for examples of how to use these.</p>
<p dir="auto">To run the tests, open a terminal window, go to the test folder, and execute 'run'.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd test
./run"><pre class="notranslate"><code>cd test
./run
</code></pre></div>
<p dir="auto">Suiron allows you to write your own built-in predicates and functions. The files <a href="src/BIPTemplate.jl">BIPTemplate.jl</a> and <a href="src/BIFTemplate.jl">BIFTemplate.jl</a> can be used as templates. Please read the comments in the headers of these files.</p>
<p dir="auto">The files <a href="test/Hyphenate.jl">Hyphenate.jl</a> and <a href="test/Capitalize.jl">Capitalize.jl</a> in the test directory can also be used for reference.</p>
<h2 dir="auto"><a id="user-content-developer" class="anchor" aria-hidden="true" href="#developer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Developer</h2>
<p dir="auto">Suiron was developed by Cleve (Klivo) Lendon.</p>
<h2 dir="auto"><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contact</h2>
<p dir="auto">To contact the developer, send email to <a href="mailto:indriko@yahoo.com">indriko@yahoo.com</a> . Comments, suggestions and criticism are welcomed.</p>
<h2 dir="auto"><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>History</h2>
<p dir="auto">First release, September 2022.</p>
<h2 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference</h2>
<p dir="auto">The code structure of this inference engine is inspired by the Predicate Calculus Problem Solver presented in chapters 23 and 24 of 'AI Algorithms...' by Luger and Stubblefield. I highly recommend this book.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="AI Algorithms, Data Structures, and Idioms in Prolog, Lisp, and Java
George F. Luger, William A. Stubblefield, ©2009 | Pearson Education, Inc. 
ISBN-13: 978-0-13-607047-4
ISBN-10: 0-13-607047-7"><pre class="notranslate"><code>AI Algorithms, Data Structures, and Idioms in Prolog, Lisp, and Java
George F. Luger, William A. Stubblefield, ©2009 | Pearson Education, Inc. 
ISBN-13: 978-0-13-607047-4
ISBN-10: 0-13-607047-7
</code></pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">The source code for Suiron is licensed under the MIT license, which you can find in <a href="LICENSE">LICENSE</a>.</p>
</article></div>