<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-waterwaves1djl" class="anchor" aria-hidden="true" href="#waterwaves1djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WaterWaves1D.jl</h1>
<p dir="auto"><a href="https://github.com/WaterWavesModels/WaterWaves1D.jl/actions"><img src="https://github.com/WaterWavesModels/WaterWaves1D.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/WaterWavesModels/WaterWaves1D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f0c17b27436fa13e94ec189162eada5b356e796b5f416e844f43423404d2779f/68747470733a2f2f636f6465636f762e696f2f67682f576174657257617665734d6f64656c732f5761746572576176657331442e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/WaterWavesModels/WaterWaves1D.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/154723425" rel="nofollow"><img src="https://camo.githubusercontent.com/736744302fecadf41eb05016be1f067c61a3d8f9da760e8186310b0dc5a5e6d3/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3135343732333432352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/154723425.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.8) pkg&gt; add WaterWaves1D
using WaterWaves1D"><pre>(v1.<span class="pl-c1">8</span>) pkg<span class="pl-k">&gt;</span> add WaterWaves1D
<span class="pl-k">using</span> WaterWaves1D</pre></div>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto"><code>WaterWaves1D.jl</code> is a <a href="https://julialang.org/" rel="nofollow">Julia</a> package providing a framework to study and compare several models for the propagation of unidimensional surface gravity waves (a.k.a. <a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/dev/background/#Water-waves" rel="nofollow">"water waves"</a>).</p>
<p dir="auto">Several models are already implemented, including (<a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/dev/background/#Models" rel="nofollow">but not limited to</a>) the so-called water waves system, its truncated spectral expansion, the Green-Naghdi system, the Matsuno system, and so on. You may easily add your favorite one to the gang: see the <a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/dev/how-to/#build-your-model" rel="nofollow">how-to guide</a>.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">See <a href="https://waterwavesmodels.github.io/WaterWaves1D.jl/dev/" rel="nofollow">here</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">A simple example of a typical use of the package can be found below. More advanced examples are available at the <a href="examples/">examples</a> and <a href="notebooks/">notebooks</a> folders.</p>
<p dir="auto">Gather parameters of the problem.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="param = (
    # Physical parameters. Variables are non-dimensionalized as in Lannes, The water waves problem, isbn:978-0-8218-9470-5
    μ  = 1,     # shallow-water dimensionless parameter
    ϵ  = 1/4,   # nonlinearity dimensionless parameter
    # Numerical parameters
    N  = 2^11,  # number of collocation points
    L  = 10,    # half-length of the numerical tank (-L,L)
    T  = 5,     # final time of computation
    dt = 0.01,  # timestep
                );"><pre>param <span class="pl-k">=</span> (
    <span class="pl-c"><span class="pl-c">#</span> Physical parameters. Variables are non-dimensionalized as in Lannes, The water waves problem, isbn:978-0-8218-9470-5</span>
    μ  <span class="pl-k">=</span> <span class="pl-c1">1</span>,     <span class="pl-c"><span class="pl-c">#</span> shallow-water dimensionless parameter</span>
    ϵ  <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">4</span>,   <span class="pl-c"><span class="pl-c">#</span> nonlinearity dimensionless parameter</span>
    <span class="pl-c"><span class="pl-c">#</span> Numerical parameters</span>
    N  <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">11</span>,  <span class="pl-c"><span class="pl-c">#</span> number of collocation points</span>
    L  <span class="pl-k">=</span> <span class="pl-c1">10</span>,    <span class="pl-c"><span class="pl-c">#</span> half-length of the numerical tank (-L,L)</span>
    T  <span class="pl-k">=</span> <span class="pl-c1">5</span>,     <span class="pl-c"><span class="pl-c">#</span> final time of computation</span>
    dt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>,  <span class="pl-c"><span class="pl-c">#</span> timestep</span>
                );</pre></div>
<p dir="auto">Define initial data (here, a "heap of water").</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z(x) = exp.(-abs.(x).^4); # surface deformation
v(x) = 0*exp.(-x.^2);     # zero initial velocity
init = Init(z,v);         # generate the initial data with correct type"><pre><span class="pl-en">z</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>.(<span class="pl-k">-</span><span class="pl-c1">abs</span>.(x)<span class="pl-k">.^</span><span class="pl-c1">4</span>); <span class="pl-c"><span class="pl-c">#</span> surface deformation</span>
<span class="pl-en">v</span>(x) <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">exp</span>.(<span class="pl-k">-</span>x<span class="pl-k">.^</span><span class="pl-c1">2</span>);     <span class="pl-c"><span class="pl-c">#</span> zero initial velocity</span>
init <span class="pl-k">=</span> <span class="pl-c1">Init</span>(z,v);         <span class="pl-c"><span class="pl-c">#</span> generate the initial data with correct type</span></pre></div>
<p dir="auto">Set up initial-value problems for different models to compare.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Build models
model_WW=WaterWaves(param,verbose=false) # The water waves system
model_WW2=WWn(param;n=2,dealias=1,δ=1/10) # The quadratic model (WW2)
# Build problems
problem_WW=Problem(model_WW, init, param) ;
problem_WW2=Problem(model_WW2, init, param) ;"><pre><span class="pl-c"><span class="pl-c">#</span> Build models</span>
model_WW<span class="pl-k">=</span><span class="pl-c1">WaterWaves</span>(param,verbose<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> The water waves system</span>
model_WW2<span class="pl-k">=</span><span class="pl-c1">WWn</span>(param;n<span class="pl-k">=</span><span class="pl-c1">2</span>,dealias<span class="pl-k">=</span><span class="pl-c1">1</span>,δ<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> The quadratic model (WW2)</span>
<span class="pl-c"><span class="pl-c">#</span> Build problems</span>
problem_WW<span class="pl-k">=</span><span class="pl-c1">Problem</span>(model_WW, init, param) ;
problem_WW2<span class="pl-k">=</span><span class="pl-c1">Problem</span>(model_WW2, init, param) ;</pre></div>
<p dir="auto">Integrate in time the initial-value problems.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solve!([problem_WW problem_WW2]);"><pre><span class="pl-c1">solve!</span>([problem_WW problem_WW2]);</pre></div>
<p dir="auto">Plot solutions at final time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
plot([problem_WW, problem_WW2])"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>([problem_WW, problem_WW2])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./notebooks/Example.png"><img src="./notebooks/Example.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Generate an animation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="anim = @animate for t = LinRange(0,5,101)
    plot([problem_WW, problem_WW2];T=t,ylims=(-0.5,1))
end
gif(anim, &quot;Example.gif&quot;, fps=15)"><pre>anim <span class="pl-k">=</span> <span class="pl-c1">@animate</span> <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">101</span>)
    <span class="pl-c1">plot</span>([problem_WW, problem_WW2];T<span class="pl-k">=</span>t,ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span>,<span class="pl-c1">1</span>))
<span class="pl-k">end</span>
<span class="pl-c1">gif</span>(anim, <span class="pl-s"><span class="pl-pds">"</span>Example.gif<span class="pl-pds">"</span></span>, fps<span class="pl-k">=</span><span class="pl-c1">15</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./notebooks/Example.gif"><img src="./notebooks/Example.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-developers" class="anchor" aria-hidden="true" href="#developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Developers</h2>
<p dir="auto"><code>WaterWaves1D.jl</code> is being developed by <a href="https://perso.univ-rennes1.fr/vincent.duchene/" rel="nofollow">Vincent Duchêne</a> and <a href="https://github.com/pnavaro">Pierre Navaro</a>.</p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">The code is citable via <a href="https://zenodo.org" rel="nofollow">zenodo</a>. Please cite as:</p>
<blockquote>
<p dir="auto">V. Duchêne, P. Navaro. WaterWaves1D.jl (Version v0.1.0). Zenodo.  <a href="https://doi.org/10.5281/zenodo.7142921" rel="nofollow">https://doi.org/10.5281/zenodo.7142921</a></p>
</blockquote>
</article></div>