<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stringviews" class="anchor" aria-hidden="true" href="#stringviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StringViews</h1>
<p><a href="https://github.com/JuliaStrings/StringViews.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaStrings/StringViews.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a></p>
<p>This Julia package implements a new type of <code>AbstractString</code>, a <code>StringView</code>,
that provides a string representation of any underlying array of bytes
(any <code>AbstractVector{UInt8}</code>), interpreted as UTF-8 encoded Unicode data.</p>
<p>Unlike Julia's built-in <code>String</code> type (which also wraps UTF-8 data), the
<code>StringView</code> type is a copy-free wrap of <em>any</em> <code>AbstractVector{UInt8}</code>
instance, and does not take "ownership" of or modify the array.   Otherwise,
a <code>StringView</code> is intended to be usable in any context where you might
have otherwise used <code>String</code>.</p>
<p>(In particular, as much as possible we try to implement efficient copy-free
<code>String</code>-like operations on <code>StringView</code>, such as iteration and regular-expression
searching, as long as the underlying <code>UInt8</code> array is a contiguous dense array.)</p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; b = [0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72];

julia&gt; s = StringView(b) # does not make a copy
&quot;foobar&quot;

julia&gt; collect(eachmatch(r&quot;[aeiou]+&quot;, s))
2-element Array{RegexMatch,1}:
 RegexMatch(&quot;oo&quot;)
 RegexMatch(&quot;a&quot;)

julia&gt; StringView(@view b[1:3]) # also works for subarrays, with no copy
&quot;foo&quot;

julia&gt; abc = StringView(0x61:0x63) # and for other array types
&quot;abc&quot;
"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> [<span class="pl-c1">0x66</span>, <span class="pl-c1">0x6f</span>, <span class="pl-c1">0x6f</span>, <span class="pl-c1">0x62</span>, <span class="pl-c1">0x61</span>, <span class="pl-c1">0x72</span>];

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">StringView</span>(b) <span class="pl-c"><span class="pl-c">#</span> does not make a copy</span>
<span class="pl-s"><span class="pl-pds">"</span>foobar<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">eachmatch</span>(<span class="pl-sr"><span class="pl-pds">r"</span>[aeiou]+<span class="pl-pds">"</span></span>, s))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{RegexMatch,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">RegexMatch</span>(<span class="pl-s"><span class="pl-pds">"</span>oo<span class="pl-pds">"</span></span>)
 <span class="pl-c1">RegexMatch</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StringView</span>(<span class="pl-c1">@view</span> b[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> also works for subarrays, with no copy</span>
<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> abc <span class="pl-k">=</span> <span class="pl-c1">StringView</span>(<span class="pl-c1">0x61</span><span class="pl-k">:</span><span class="pl-c1">0x63</span>) <span class="pl-c"><span class="pl-c">#</span> and for other array types</span>
<span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span></pre></div>
<p>Other optimized (copy-free) operations include I/O, hashing, iteration/indexing,
comparisons, parsing, searching, and validation.  Working with a <code>SubString</code> of
a <code>StringView</code> is similarly efficient.</p>
</article></div>