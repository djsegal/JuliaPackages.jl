<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qdldljl---a-free-ldl-factorisation-routine" class="anchor" aria-hidden="true" href="#qdldljl---a-free-ldl-factorisation-routine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QDLDL.jl - A free LDL factorisation routine</h1>
<p><a href="https://travis-ci.com/oxfordcontrol/QDLDL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6c183a20c51289dc811b9a17acd630b17e5d909710ce7a57728a6c54816b4514/68747470733a2f2f7472617669732d63692e636f6d2f6f78666f7264636f6e74726f6c2f51444c444c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxfordcontrol/QDLDL.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/oxfordcontrol/QDLDL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/143c2398c8a146bc5d676d69d737ae155f452d1986ff05411dc701b4f7b679a9/68747470733a2f2f636f6465636f762e696f2f67682f6f78666f7264636f6e74726f6c2f51444c444c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/oxfordcontrol/QDLDL.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>QDLDL is a factorisation routine for quasi-definite linear systems <code>Ax=b</code>. This is a pure Julia implementation of the C language QDLDL solver (<a href="https://github.com/oxfordcontrol/qdldl">https://github.com/oxfordcontrol/qdldl</a>) with some additional functionality implemented to support refactorisations.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>QDLDL requirers Julia v1.0 and can be added via the Julia package manager (type <code>]</code>): <code>pkg&gt; add QDLDL</code>. Make the package available in you project with <code>using QDLDL</code>.</p>
<h2><a id="user-content-using-qdldl" class="anchor" aria-hidden="true" href="#using-qdldl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using QDLDL</h2>
<p>QDLDL can be used to solve linear systems <code>Ax = b</code>.
Given a quasidefinite matrix <code>A</code> and right-hand side vector <code>b</code>, compute the factorisation <code>F</code> with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="F = qdldl(A)
"><pre>F <span class="pl-k">=</span> <span class="pl-c1">qdldl</span>(A)</pre></div>
<p>Solve the linear system for <code>x</code> with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = solve(F, b)
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">solve</span>(F, b)</pre></div>
<p>This will allocate new memory for <code>x</code>. To solve in-place and overwrite <code>b</code> with <code>x</code> use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="solve!(F, b)
"><pre><span class="pl-c1">solve!</span>(F, b)</pre></div>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<ul>
<li><a href="http://users.ox.ac.uk/~engs1373/" rel="nofollow">Paul Goulart</a></li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This project is licensed under the Apache License - see the <a href="LICENSE">LICENSE.md</a> file for details.</p>
</article></div>