<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mlpreprocessing" class="anchor" aria-hidden="true" href="#mlpreprocessing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLPreprocessing</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Package Status</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=MLPreprocessing" rel="nofollow"><img src="https://camo.githubusercontent.com/0847d3561ea26ecd4932afb47582b75014a7bdd3/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d4c50726570726f63657373696e675f302e352e737667" alt="MLPreprocessing" data-canonical-src="http://pkg.julialang.org/badges/MLPreprocessing_0.5.svg" style="max-width:100%;"></a> <a href="http://pkg.julialang.org/?pkg=MLPreprocessing" rel="nofollow"><img src="https://camo.githubusercontent.com/713a81e22c21642c359c872b7a35b554b219a79a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d4c50726570726f63657373696e675f302e362e737667" alt="MLPreprocessing" data-canonical-src="http://pkg.julialang.org/badges/MLPreprocessing_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaML/MLPreprocessing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/83fe1383c361f2df96d9c00d2791ce078373ca19/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f4d4c50726570726f63657373696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/MLPreprocessing.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/Evizero/mlpreprocessing-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/474ea42701e5d9223d737d9ebc8e3dee96bdc111/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f38306e73347576353437336b676a36663f7376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/80ns4uv5473kgj6f?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaML/MLPreprocessing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9ca00ff644e39e5e263163a196ac5994b0f5e37b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d4c2f4d4c50726570726f63657373696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaML/MLPreprocessing.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>Utility package that provides end user friendly methods for feature scalings and polynomial
basis expansion. Feature scalings work on <code>Matrix</code>, <code>Vector</code> and <code>DataFrames</code>. It is possible to
have observations stored as columns or rows of a matrix. In order to distinguish between these cases
one can provide the parameter <code>obsdim</code>, where <code>obsdim=1</code> corresponds to "observations as rows" and
<code>obsdim=2</code> to "observations as columns". Transformations can be computed on a subset
of columns/rows by defining a vector <code>operate_on</code>.</p>
<h3><a id="user-content-standardscaler" class="anchor" aria-hidden="true" href="#standardscaler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StandardScaler</h3>
<p>Standardization of data sets result in variables with a mean of 0 and variance of 1.
A common use case would be to fit a <code>StandardScaler</code> to the training data and later
apply the same transformation to the test data. <code>StandardScaler</code> is used with the
functions <code>fit()</code>, <code>transform()</code> and <code>fit_transform()</code> as shown below.</p>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-c1">fit</span>(StandardScaler, X[, μ, σ; obsdim, operate_on])

    <span class="pl-c1">fit_transform</span>(StandardScaler, X[, μ, σ; obsdim, operate_on])</pre></div>
<p><code>X</code>         :  Data of type Matrix or <code>DataFrame</code>.</p>
<p><code>μ</code>         :  Vector or scalar describing the translation.
Defaults to mean(X; dims=obsdim)</p>
<p><code>σ</code>         :  Vector or scalar describing the scale.
Defaults to std(X; dims=obsdim)</p>
<p><code>obsdim</code>    :  Specify which axis corresponds to observations.
Defaults to obsdim=2 (observations are columns of matrix)
For DataFrames <code>obsdim</code> is obsolete and rescaling occurs
column wise.</p>
<p><code>operate_on</code>:  Specify the indices of columns or rows to be centered.
Defaults to all columns/rows.
For DataFrames this must be a vector of symbols, not indices.
E.g. <code>operate_on</code>=[1,3] will perform centering on columns
with index 1 and 3 only (if obsdim=1, else rows 1 and 3)</p>
<p>Note on DataFrames:
Columns containing <code>missing</code> values are skipped.
Columns containing non numeric elements are skipped.</p>
<p>Examples:</p>
<div class="highlight highlight-source-julia"><pre>    Xtrain <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">4</span>)
    Xtest  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
    Dtrain <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(A<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">10</span>), B<span class="pl-k">=</span><span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>), C<span class="pl-k">=</span>[<span class="pl-c1">string</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])
    Dtest <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(A<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">10</span>), B<span class="pl-k">=</span><span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>), C<span class="pl-k">=</span>[<span class="pl-c1">string</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])

    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(StandardScaler, Xtrain)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(StandardScaler, Xtrain, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(StandardScaler, Xtrain, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>])
    <span class="pl-c1">transform</span>(Xtest, scaler)
    <span class="pl-c1">transform!</span>(Xtest, scaler)
    <span class="pl-c1">transform</span>(x, scaler)
    <span class="pl-c1">transform!</span>(x, scaler)

    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(StandardScaler, Dtrain)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(StandardScaler, Dtrain, operate_on<span class="pl-k">=</span>[<span class="pl-c1">:A</span>,<span class="pl-c1">:B</span>])
    <span class="pl-c1">transform</span>(Dtest, scaler)
    <span class="pl-c1">transform!</span>(Dtest, scaler)

    Xscaled, scaler <span class="pl-k">=</span> <span class="pl-c1">fit_transform</span>(StandardScaler, X, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>])
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(StandardScaler, X, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>])</pre></div>
<p>Note that for <code>transform!</code> the data matrix <code>X</code> has to be of type &lt;: AbstractFloat
as the scaling occurs inplace. (E.g. cannot be of type Matrix{Int64}). This is not
the case for <code>transform</code> however.
For <code>DataFrames</code> <code>transform!</code> can be used on columns of type &lt;: Integer.</p>
<h3><a id="user-content-fixedrangescaler" class="anchor" aria-hidden="true" href="#fixedrangescaler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FixedRangeScaler</h3>
<p><code>FixedRangeScaler</code> is used with the functions <code>fit()</code>, <code>transform()</code> and <code>fit_transform()</code>
to scale data in a Matrix <code>X</code> or DataFrame to a fixed range [lower:upper].
After fitting a <code>FixedRangeScaler</code> to one data set, it can be used to perform the same
transformation to a new set of data. E.g. fit the <code>FixedRangeScaler</code> to your training
data and then apply the scaling to the test data at a later stage. (See examples below).</p>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-c1">fit</span>(FixedRangeScaler, X[, lower, upper; obsdim, operate_on])

    <span class="pl-c1">fit_transform</span>(FixedRangeScaler, X[, lower, upper; obsdim, operate_on])</pre></div>
<p><code>X</code>         :  Data of type Matrix or <code>DataFrame</code>.</p>
<p><code>lower</code>     :  (Scalar) Lower limit of new range.
Defaults to 0.</p>
<p><code>upper</code>     :  (Scalar) Upper limit of new range.
Defaults to 1.</p>
<p><code>obsdim</code>    :  Specify which axis corresponds to observations.
Defaults to obsdim=2 (observations are columns of matrix)
For DataFrames <code>obsdim</code> is obsolete and rescaling occurs
column wise.</p>
<p><code>operate_on</code>:  Specify the indices of columns or rows to be centered.
Defaults to all columns/rows.
For DataFrames this must be a vector of symbols, not indices.
E.g. <code>operate_on</code>=[1,3] will perform centering on columns
with index 1 and 3 only (if obsdim=1, else rows 1 and 3)</p>
<p>Note on DataFrames:
Columns containing <code>NA</code> values are skipped.
Columns containing non numeric elements are skipped.</p>
<p>Examples:</p>
<div class="highlight highlight-source-julia"><pre>    Xtrain <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">4</span>)
    Xtest  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
    D <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(A<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">10</span>), B<span class="pl-k">=</span><span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>), C<span class="pl-k">=</span>[<span class="pl-c1">string</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])

    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(FixedRangeScaler, Xtrain)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(FixedRangeScaler, Xtrain, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(FixedRangeScaler, Xtrain, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>)
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(FixedRangeScaler, Xtrain, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>])
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit</span>(FixedRangeScaler, D, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">:A</span>,<span class="pl-c1">:B</span>])

    Xscaled <span class="pl-k">=</span> <span class="pl-c1">transform</span>(Xtest, scaler)
    <span class="pl-c1">transform!</span>(Xtest, scaler)

    Xscaled, scaler <span class="pl-k">=</span> <span class="pl-c1">fit_transform</span>(FixedRangeScaler, X, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>])
    scaler <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(FixedRangeScaler, X, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>, operate_on<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>])</pre></div>
<h3><a id="user-content-lower-level-functions" class="anchor" aria-hidden="true" href="#lower-level-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lower Level Functions</h3>
<p>The lower level functions on which <code>StandardScaler</code> and <code>FixedRangeScaler</code> are built on can also
be used seperately.</p>
<h4><a id="user-content-center" class="anchor" aria-hidden="true" href="#center"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>center!()</h4>
<div class="highlight highlight-source-julia"><pre>    μ <span class="pl-k">=</span> <span class="pl-c1">center!</span>(X[, μ; obsdim, operate_on])</pre></div>
<p>Shift <code>X</code> along <code>obsdim</code> by <code>μ</code> according to X = X - μ
where <code>X</code> is of type Matrix or Vector and <code>D</code> of type DataFrame.</p>
<h4><a id="user-content-fixedrange" class="anchor" aria-hidden="true" href="#fixedrange"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>fixedrange!()</h4>
<div class="highlight highlight-source-julia"><pre>    lower, upper, xmin, xmax <span class="pl-k">=</span> <span class="pl-c1">fixedrange!</span>(X[, lower, upper, xmin, xmax; obsdim, operate_on])</pre></div>
<p>Normalize <code>X</code> or <code>D</code> along <code>obsdim</code> to the interval [lower:upper]
where <code>X</code> is of type Matrix or Vector and <code>D</code> of type DataFrame.
If <code>lower</code> and <code>upper</code>  are omitted the default range is [0:1].</p>
<h4><a id="user-content-standardize" class="anchor" aria-hidden="true" href="#standardize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>standardize!()</h4>
<div class="highlight highlight-source-julia"><pre>    μ, σ <span class="pl-k">=</span> <span class="pl-c1">standardize!</span>(X[, μ, σ; obsdim, operate_on])</pre></div>
<p>Standardize <code>X</code> along <code>obsdim</code> according to X = (X - μ) / σ.
If μ and σ are omitted they are computed such that variables have a mean of zero.</p>
<h3><a id="user-content-polynomial-basis-expansion" class="anchor" aria-hidden="true" href="#polynomial-basis-expansion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial Basis Expansion</h3>
<div class="highlight highlight-source-julia"><pre>    M <span class="pl-k">=</span> <span class="pl-c1">expand_poly</span>(x[, degree<span class="pl-k">=</span><span class="pl-c1">5</span>, obsdim]) </pre></div>
<p>Perform a polynomial basis expansion of the given <code>degree</code> for the vector <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">expand_poly</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, degree<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>   <span class="pl-c1">3.0</span>   <span class="pl-c1">4.0</span>    <span class="pl-c1">5.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">16.0</span>   <span class="pl-c1">25.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">27.0</span>  <span class="pl-c1">64.0</span>  <span class="pl-c1">125.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">expand_poly</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, degree<span class="pl-k">=</span><span class="pl-c1">3</span>, obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-c1">1.0</span>    <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>   <span class="pl-c1">4.0</span>    <span class="pl-c1">8.0</span>
 <span class="pl-c1">3.0</span>   <span class="pl-c1">9.0</span>   <span class="pl-c1">27.0</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">16.0</span>   <span class="pl-c1">64.0</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">25.0</span>  <span class="pl-c1">125.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">expand_poly</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">3</span>, ObsDim<span class="pl-k">.</span><span class="pl-c1">First</span>()); <span class="pl-c"><span class="pl-c">#</span> same but type-stable</span></pre></div>
</article></div>