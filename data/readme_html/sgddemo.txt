<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sgdjl" class="anchor" aria-hidden="true" href="#sgdjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SGD.jl</h1>
<p>Fit predictive models to large data sets using SGD in Julia.</p>
<p><em>WARNING: This package is a only working rough draft. Making the SGD work
on new problems is non-trivial and often requires rescaling features and
manually adjusting the learning rate schedule. This code will change
substantially over the coming months.</em></p>
<h1><a id="user-content-regression-examples" class="anchor" aria-hidden="true" href="#regression-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Regression Examples</h1>
<pre><code>using SGD

regression_data = Pkg.dir("SGD", "test", "data", "regression.csv")

ds = DataStream(regression_data)
fit = sgd(:(y ~ x1 + x2 + x3), OLS, ds)
cost(fit, ds)

ds = DataStream(regression_data, 1000)
fit = sgd(:(y ~ x1 + x2 + x3), OLS, ds)
cost(fit, ds)

ds = DataStream(regression_data, 1000)
fit = sgd(:(y ~ x1 + x2 + x3), OLS, ds,
          Options(:averaging, false,
                  :momentum, 0.0,
                  :logging, false,
                  :tracing, false,
                  :learning_rate, SGD.lr_power(0.01, 0.0, 0.0),
                  :total_epochs, 1))
cost(fit, ds)

ds = DataStream(regression_data, 10_000)
fit = sgd(:(y ~ x1 + x2 + x3), OLS, ds,
          Options(:averaging, false,
                  :momentum, 0.05,
                  :logging, true,
                  :tracing, true,
                  :learning_rate, SGD.lr_power(0.01, 0.0, 0.0),
                  :total_epochs, 25))
cost(fit, ds)
</code></pre>
<h1><a id="user-content-classification-examples" class="anchor" aria-hidden="true" href="#classification-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Classification Examples</h1>
<pre><code>classification_data = Pkg.dir("SGD", "test", "data", "classification.csv")

ds = DataStream(classification_data, 100)

fit = sgd(:(y ~ x1 + x2 + x3), Logistic, ds,
          Options(:total_epochs, 25,
                  :averaging, true))
cost(fit, ds)

df = read_table(classification_data)
df["p"] = predict(fit, df)
df["p"] = (sign(df["p"] - 0.5) + 1) / 2
by(df, ["y", "p"], nrow)
</code></pre>
<h1><a id="user-content-run-individual-epochs-by-hand" class="anchor" aria-hidden="true" href="#run-individual-epochs-by-hand"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Run Individual Epochs by Hand</h1>
<pre><code>cost(fit, ds)
update!(fit, ds)
cost(fit, ds)
</code></pre>
<h1><a id="user-content-cross-validation" class="anchor" aria-hidden="true" href="#cross-validation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cross-Validation</h1>
<pre><code>regression_data = Pkg.dir("SGD", "test", "data", "regression.csv")
regression_data2 = Pkg.dir("SGD", "test", "data", "regression2.csv")

train = DataStream(regression_data, 500)
test = DataStream(regression_data2, 500)

fit = sgd(:(y ~ x1 + x2 + x3), OLS, train,
          Options(:total_epochs, 0))

n_epochs = 50

results = DataFrame({Int, Float64, Float64},
                   ["Epoch", "Train", "Test"],
                   n_epochs)

for epoch in 1:n_epochs
  update!(fit, train)
  results[epoch, "Epoch"] = epoch
  results[epoch, "Train"] = cost(fit, train)
  results[epoch, "Test"] = cost(fit, test)
end

head(results)
tail(results)
</code></pre>
</article></div>