<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spinnersjl" class="anchor" aria-hidden="true" href="#spinnersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spinners.jl</h1>
<p dir="auto">Command line spinners in Julia with Unicode support</p>
<p dir="auto"><a href="https://github.com/AshlinHarris/Spinners.jl/actions/workflows/ci.yml"><img src="https://github.com/AshlinHarris/Spinners.jl/actions/workflows/ci.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/AshlinHarris/Spinners.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/27f029ae37dbbd39721a07b78ac876c363c348c17dc08a1ed9e1e8b24807483c/68747470733a2f2f636f6465636f762e696f2f67682f6173686c696e6861727269732f5370696e6e6572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ashlinharris/Spinners.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/90787010/189241813-9ff87134-7b57-4e53-829b-32c6bc660851.gif"><img src="https://user-images.githubusercontent.com/90787010/189241813-9ff87134-7b57-4e53-829b-32c6bc660851.gif" alt="spinners" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto"><code>Spinners.jl</code> provides a single macro (<code>@spinner</code>), which generates a command line spinner for a command.
The spinner should draw continuously until the command elapses, and the macro should not affect the scope of the command.
All user input is captured while the spinner is running, but the spinner can be stopped prematurely with <code>Ctrl-C</code>, <code>Ctrl-D</code>, or <code>Esc</code> (the user command will keep going).</p>
<p dir="auto">Command line spinners serve as a visual indicator to the user that a process is ongoing and shouldn't be interrupted (e.g., files are being downloaded or written to disk).</p>
<p dir="auto">The API for <code>Spinners.jl</code> should be considered unstable until v1.0.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples:</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Spinners

# The @spinner macro shouldn't affect the scope:
do_some_calculations(x) = sum(map(i -&gt; BigInt(999)^10_000_000 % i, 1:x))
@spinner x = do_some_calculations(10);
println(x)

# You can provide a character set, but many are already built in:
@spinner &quot;◧◨&quot; 0.5 sleep(5)
@spinner [&quot;　　　🐈&quot;, &quot;　　🐈🐾&quot;, &quot;　🐈🐾🐾&quot;, &quot;🐈🐾🐾🐾&quot;] 0.5 sleep(5)
@spinner :aesthetic
@spinner :shutter
@spinner :pong
@spinner :cards

#There is also a random mode:
@spinner :dots :rand
@spinner :clock :rand sleep(4)"><pre class="notranslate"><code>using Spinners

# The @spinner macro shouldn't affect the scope:
do_some_calculations(x) = sum(map(i -&gt; BigInt(999)^10_000_000 % i, 1:x))
@spinner x = do_some_calculations(10);
println(x)

# You can provide a character set, but many are already built in:
@spinner "◧◨" 0.5 sleep(5)
@spinner ["　　　🐈", "　　🐈🐾", "　🐈🐾🐾", "🐈🐾🐾🐾"] 0.5 sleep(5)
@spinner :aesthetic
@spinner :shutter
@spinner :pong
@spinner :cards

#There is also a random mode:
@spinner :dots :rand
@spinner :clock :rand sleep(4)
</code></pre></div>
<h2 dir="auto"><a id="user-content-related-works" class="anchor" aria-hidden="true" href="#related-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Works</h2>
<p dir="auto">I highly recommend <a href="https://github.com/timholy/ProgressMeter.jl">ProgressMeter.jl</a>, which includes spinners as a flavor of progress meter.
That is, they're useful tools for measuring the progress of a function, and they must be updated at points within the function.
In contrast, <code>Spinners.jl</code> is a useless novelty for drawing command line spinners.
The spinner is controlled by an external process and doesn't measure progress, which treats the user function as a black box.
The process receives a signal when the user's function is complete, so the user doesn't need to add breaks to their function.</p>
<p dir="auto">In Julia:</p>
<ul dir="auto">
<li><a href="https://github.com/timholy/ProgressMeter.jl">timholy/ProgressMeter.jl</a></li>
<li><a href="https://github.com/FedeClaudi/Term.jl">FedeClaudi/Term.jl</a>
<ul dir="auto">
<li><a href="https://fedeclaudi.github.io/Term.jl/stable/adv/progressbars/" rel="nofollow">https://fedeclaudi.github.io/Term.jl/stable/adv/progressbars/</a></li>
</ul>
</li>
<li>JuliaLang/Pkg.jl spinners:
<ul dir="auto">
<li><a href="https://github.com/JuliaLang/Pkg.jl/blob/master/src/MiniProgressBars.jl">MiniProgressBars.jl</a></li>
<li><a href="https://github.com/JuliaLang/Pkg.jl/blob/master/src/API.jl">API.jl</a></li>
</ul>
</li>
<li><a href="https://github.com/cloud-oak/ProgressBars.jl">cloud-oak/ProgressBars.jl</a></li>
<li><a href="https://github.com/KristofferC/TerminalSpinners.jl">KristofferC/TerminalSpinners.jl</a></li>
<li><a href="https://github.com/rahulkp220/Spinner.jl">rahulkp220/Spinner.jl (defunct)</a></li>
</ul>
<p dir="auto">In other languages:</p>
<ul dir="auto">
<li><a href="https://github.com/sindresorhus/cli-spinners">sindresorhus/cli-spinners (JavaScript)</a>
<ul dir="auto">
<li>Some assets in Spinners.jl come from here.</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-related-discussions" class="anchor" aria-hidden="true" href="#related-discussions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related discussions:</h2>
<ul dir="auto">
<li><a href="https://discourse.julialang.org/t/update-stdout-while-a-function-is-running/86285" rel="nofollow">https://discourse.julialang.org/t/update-stdout-while-a-function-is-running/86285</a></li>
<li><a href="https://discourse.julialang.org/t/how-to-print-rotating-tick-as-progress-bar-in-terminal/62099" rel="nofollow">https://discourse.julialang.org/t/how-to-print-rotating-tick-as-progress-bar-in-terminal/62099</a></li>
</ul>
</article></div>