<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-polymerjl------" class="anchor" aria-hidden="true" href="#polymerjl------"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polymer.jl <a href="https://liuyxpp.github.io/Polymer.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://liuyxpp.github.io/Polymer.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a> <a href="https://github.com/liuyxpp/Polymer.jl/actions"><img src="https://github.com/liuyxpp/Polymer.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://travis-ci.com/liuyxpp/Polymer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eca5db963f70e4ae0be7c8b80c6f4ce87ccbfebfe629c729ea1b3287103b0601/68747470733a2f2f7472617669732d63692e636f6d2f6c6975797870702f506f6c796d65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/liuyxpp/Polymer.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/liuyxpp/Polymer-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b46e85eddd5fcf353aff88283d9181121e2257c9b1177a337111e07a9261122/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6c6975797870702f506f6c796d65722e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/liuyxpp/Polymer.jl?svg=true" style="max-width:100%;"></a> <a href="https://codecov.io/gh/liuyxpp/Polymer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dabb831e7e8acd957fb4305eb1b555217dffa1448c39a4630939e65ce8e7e37f/68747470733a2f2f636f6465636f762e696f2f67682f6c6975797870702f506f6c796d65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/liuyxpp/Polymer.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></h1>
<p><strong>Polymer.jl</strong> defines a common interface to describe a polymer system.</p>
<p><em>Warning: Be aware that this package is currently under active development. The interface is highly unstable and subjects to change frequently.</em></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Polymer

# Create A and B monomers.
julia&gt; sA = KuhnSegment(:A)
julia&gt; sB = KuhnSegment(:B)

# Create free end and branch point (joint)
julia&gt; eA = FreeEnd(:A1)
julia&gt; eAB = BranchPoint(:AB)
julia&gt; eB = FreeEnd(:B1)

# Create A and B blocks
julia&gt; A = PolymerBlock(:A, sA, 0.5, eA, eAB)
julia&gt; B = PolymerBlock(:B, sB, 0.5, eB, eAB)

# Create a AB diblock copolymer chain
julia&gt; chainAB = BlockCopolymer(:AB, [A,B])

# Create a homopolymer chain
julia&gt; hA = PolymerBlock(:hA, sA, 1.0, FreeEnd(), FreeEnd())
julia&gt; chainA = BlockCopolymer(:hA, [hA])

# Create components
julia&gt; polymerAB = Component(chainAB; ϕ=0.5)
julia&gt; polymerA = Component(chainA; ϕ=0.5)

# Create AB/A polymer blend system.
julia&gt; AB_A = PolymerSystem([polymerAB, polymerA]; χN_map=Dict(Set([:A, :B])=&gt;20.0))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polymer

<span class="pl-c"><span class="pl-c">#</span> Create A and B monomers.</span>
julia<span class="pl-k">&gt;</span> sA <span class="pl-k">=</span> <span class="pl-c1">KuhnSegment</span>(<span class="pl-c1">:A</span>)
julia<span class="pl-k">&gt;</span> sB <span class="pl-k">=</span> <span class="pl-c1">KuhnSegment</span>(<span class="pl-c1">:B</span>)

<span class="pl-c"><span class="pl-c">#</span> Create free end and branch point (joint)</span>
julia<span class="pl-k">&gt;</span> eA <span class="pl-k">=</span> <span class="pl-c1">FreeEnd</span>(<span class="pl-c1">:A1</span>)
julia<span class="pl-k">&gt;</span> eAB <span class="pl-k">=</span> <span class="pl-c1">BranchPoint</span>(<span class="pl-c1">:AB</span>)
julia<span class="pl-k">&gt;</span> eB <span class="pl-k">=</span> <span class="pl-c1">FreeEnd</span>(<span class="pl-c1">:B1</span>)

<span class="pl-c"><span class="pl-c">#</span> Create A and B blocks</span>
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:A</span>, sA, <span class="pl-c1">0.5</span>, eA, eAB)
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:B</span>, sB, <span class="pl-c1">0.5</span>, eB, eAB)

<span class="pl-c"><span class="pl-c">#</span> Create a AB diblock copolymer chain</span>
julia<span class="pl-k">&gt;</span> chainAB <span class="pl-k">=</span> <span class="pl-c1">BlockCopolymer</span>(<span class="pl-c1">:AB</span>, [A,B])

<span class="pl-c"><span class="pl-c">#</span> Create a homopolymer chain</span>
julia<span class="pl-k">&gt;</span> hA <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:hA</span>, sA, <span class="pl-c1">1.0</span>, <span class="pl-c1">FreeEnd</span>(), <span class="pl-c1">FreeEnd</span>())
julia<span class="pl-k">&gt;</span> chainA <span class="pl-k">=</span> <span class="pl-c1">BlockCopolymer</span>(<span class="pl-c1">:hA</span>, [hA])

<span class="pl-c"><span class="pl-c">#</span> Create components</span>
julia<span class="pl-k">&gt;</span> polymerAB <span class="pl-k">=</span> <span class="pl-c1">Component</span>(chainAB; ϕ<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
julia<span class="pl-k">&gt;</span> polymerA <span class="pl-k">=</span> <span class="pl-c1">Component</span>(chainA; ϕ<span class="pl-k">=</span><span class="pl-c1">0.5</span>)

<span class="pl-c"><span class="pl-c">#</span> Create AB/A polymer blend system.</span>
julia<span class="pl-k">&gt;</span> AB_A <span class="pl-k">=</span> <span class="pl-c1">PolymerSystem</span>([polymerAB, polymerA]; χN_map<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">Set</span>([<span class="pl-c1">:A</span>, <span class="pl-c1">:B</span>])<span class="pl-k">=&gt;</span><span class="pl-c1">20.0</span>))</pre></div>
<p>Convenient functions are also provided to create common polymer chains and systems. For example, above AB chain, A chain, AB/A polymer blend system can be simply created by a single line of code.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; diblock_chain() # AB chain
julia&gt; homopolymer_chain() # A chain
julia&gt; AB_A_system() # AB/A polymer blend
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">diblock_chain</span>() <span class="pl-c"><span class="pl-c">#</span> AB chain</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">homopolymer_chain</span>() <span class="pl-c"><span class="pl-c">#</span> A chain</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">AB_A_system</span>() <span class="pl-c"><span class="pl-c">#</span> AB/A polymer blend</span></pre></div>
<p>One can also create a polymer system using a nested Dict, which can be written in the format of a YAML file.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; config = load_config(&quot;test/ABS.yml&quot;)
julia&gt; ABS = make(config)
"><pre>julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">load_config</span>(<span class="pl-s"><span class="pl-pds">"</span>test/ABS.yml<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> ABS <span class="pl-k">=</span> <span class="pl-c1">make</span>(config)</pre></div>
<p>At present, there is no documentation. Consult the testing codes reside in <code>test</code> folder to learn more.</p>
<h2><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribute</h2>
<ul>
<li>Star the package on <a href="https://github.com/liuyxpp/Polymer.jl">github.com</a>.</li>
<li>File an issue or make a pull request on <a href="https://github.com/liuyxpp/Polymer.jl">github.com</a>.</li>
<li>Contact the author via email <a href="mailto:lyx@fudan.edu.cn">lyx@fudan.edu.cn</a>.</li>
</ul>
<h2><a id="user-content-links" class="anchor" aria-hidden="true" href="#links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Links</h2>
<ul>
<li><a href="https://github.com/liuyxpp/Polymer.jl">Source code</a></li>
</ul>
</article></div>