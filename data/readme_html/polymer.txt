<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polymerjl" class="anchor" aria-hidden="true" href="#polymerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polymer.jl</h1>
<p dir="auto"><strong>Polymer.jl</strong> defines a common interface to describe a polymer system.</p>
<p dir="auto"><em>Warning: Be aware that this package is currently under active development. The interface is highly unstable and subjects to change frequently.</em></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-construct-a-polymersystem-object-form-scratch" class="anchor" aria-hidden="true" href="#construct-a-polymersystem-object-form-scratch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construct a <code>PolymerSystem</code> object form scratch</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Polymer

# Create A and B monomers.
julia&gt; sA = KuhnSegment(:A)
julia&gt; sB = KuhnSegment(:B)

# Create free end and branch point (joint)
julia&gt; eA = FreeEnd(:A1)
julia&gt; eAB = BranchPoint(:AB)
julia&gt; eB = FreeEnd(:B1)

# Create A and B blocks
julia&gt; A = PolymerBlock(:A, sA, 0.5, eA, eAB)
julia&gt; B = PolymerBlock(:B, sB, 0.5, eB, eAB)

# Create a AB diblock copolymer chain
julia&gt; chainAB = BlockCopolymer(:AB, [A,B])

# Create a homopolymer chain
julia&gt; hA = PolymerBlock(:hA, sA, 1.0, FreeEnd(), FreeEnd())
julia&gt; chainA = BlockCopolymer(:hA, [hA])

# Create components
julia&gt; polymerAB = Component(chainAB; ϕ=0.5)
julia&gt; polymerA = Component(chainA; ϕ=0.5)

# Create AB/A polymer blend system.
julia&gt; AB_A = PolymerSystem([polymerAB, polymerA]; χN_map=Dict([:A, :B]=&gt;20.0))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polymer

<span class="pl-c"><span class="pl-c">#</span> Create A and B monomers.</span>
julia<span class="pl-k">&gt;</span> sA <span class="pl-k">=</span> <span class="pl-c1">KuhnSegment</span>(<span class="pl-c1">:A</span>)
julia<span class="pl-k">&gt;</span> sB <span class="pl-k">=</span> <span class="pl-c1">KuhnSegment</span>(<span class="pl-c1">:B</span>)

<span class="pl-c"><span class="pl-c">#</span> Create free end and branch point (joint)</span>
julia<span class="pl-k">&gt;</span> eA <span class="pl-k">=</span> <span class="pl-c1">FreeEnd</span>(<span class="pl-c1">:A1</span>)
julia<span class="pl-k">&gt;</span> eAB <span class="pl-k">=</span> <span class="pl-c1">BranchPoint</span>(<span class="pl-c1">:AB</span>)
julia<span class="pl-k">&gt;</span> eB <span class="pl-k">=</span> <span class="pl-c1">FreeEnd</span>(<span class="pl-c1">:B1</span>)

<span class="pl-c"><span class="pl-c">#</span> Create A and B blocks</span>
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:A</span>, sA, <span class="pl-c1">0.5</span>, eA, eAB)
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:B</span>, sB, <span class="pl-c1">0.5</span>, eB, eAB)

<span class="pl-c"><span class="pl-c">#</span> Create a AB diblock copolymer chain</span>
julia<span class="pl-k">&gt;</span> chainAB <span class="pl-k">=</span> <span class="pl-c1">BlockCopolymer</span>(<span class="pl-c1">:AB</span>, [A,B])

<span class="pl-c"><span class="pl-c">#</span> Create a homopolymer chain</span>
julia<span class="pl-k">&gt;</span> hA <span class="pl-k">=</span> <span class="pl-c1">PolymerBlock</span>(<span class="pl-c1">:hA</span>, sA, <span class="pl-c1">1.0</span>, <span class="pl-c1">FreeEnd</span>(), <span class="pl-c1">FreeEnd</span>())
julia<span class="pl-k">&gt;</span> chainA <span class="pl-k">=</span> <span class="pl-c1">BlockCopolymer</span>(<span class="pl-c1">:hA</span>, [hA])

<span class="pl-c"><span class="pl-c">#</span> Create components</span>
julia<span class="pl-k">&gt;</span> polymerAB <span class="pl-k">=</span> <span class="pl-c1">Component</span>(chainAB; ϕ<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
julia<span class="pl-k">&gt;</span> polymerA <span class="pl-k">=</span> <span class="pl-c1">Component</span>(chainA; ϕ<span class="pl-k">=</span><span class="pl-c1">0.5</span>)

<span class="pl-c"><span class="pl-c">#</span> Create AB/A polymer blend system.</span>
julia<span class="pl-k">&gt;</span> AB_A <span class="pl-k">=</span> <span class="pl-c1">PolymerSystem</span>([polymerAB, polymerA]; χN_map<span class="pl-k">=</span><span class="pl-c1">Dict</span>([<span class="pl-c1">:A</span>, <span class="pl-c1">:B</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">20.0</span>))</pre></div>
<p dir="auto">Convenient functions are also provided to create common polymer chains and systems. For example, above AB chain, A chain, AB/A polymer blend system can be simply created by a single line of code, respectively.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; diblock_chain() # AB chain
julia&gt; homopolymer_chain() # A chain
julia&gt; AB_A_system() # AB/A polymer blend"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">diblock_chain</span>() <span class="pl-c"><span class="pl-c">#</span> AB chain</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">homopolymer_chain</span>() <span class="pl-c"><span class="pl-c">#</span> A chain</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">AB_A_system</span>() <span class="pl-c"><span class="pl-c">#</span> AB/A polymer blend</span></pre></div>
<h3 dir="auto"><a id="user-content-serialization-and-configurations" class="anchor" aria-hidden="true" href="#serialization-and-configurations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Serialization and configurations</h3>
<p dir="auto">Based on Configurations.jl, we can serialize a <code>PolymerSystem</code> object to a <code>PolymerSystemConfig</code> object. Then the <code>PolymerSystemConfig</code> object can be saved to a YAML file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; config = to_config(AB_A_system())
julia&gt; save_config(&quot;./AB_A.yml&quot;, config)"><pre>julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">to_config</span>(<span class="pl-c1">AB_A_system</span>())
julia<span class="pl-k">&gt;</span> <span class="pl-c1">save_config</span>(<span class="pl-s"><span class="pl-pds">"</span>./AB_A.yml<span class="pl-pds">"</span></span>, config)</pre></div>
<p dir="auto">We can load the <code>PolymerSystemConfig</code> object back from the YAML file. Then we can re-construct the <code>PolymerSystem</code> object from the <code>PolymerSystemConfig</code> object.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; config = load_config(&quot;./AB_A.yml&quot;, PolymerSystemConfig)
julia&gt; AB_A = Polymer.make(config)
# or
julia&gt; AB_A = PolymerSystem(config)"><pre>julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">load_config</span>(<span class="pl-s"><span class="pl-pds">"</span>./AB_A.yml<span class="pl-pds">"</span></span>, PolymerSystemConfig)
julia<span class="pl-k">&gt;</span> AB_A <span class="pl-k">=</span> Polymer<span class="pl-k">.</span><span class="pl-c1">make</span>(config)
<span class="pl-c"><span class="pl-c">#</span> or</span>
julia<span class="pl-k">&gt;</span> AB_A <span class="pl-k">=</span> <span class="pl-c1">PolymerSystem</span>(config)</pre></div>
<h3 dir="auto"><a id="user-content-updatemodify-a-polymersystem-object" class="anchor" aria-hidden="true" href="#updatemodify-a-polymersystem-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Update/Modify a <code>PolymerSystem</code> object</h3>
<p dir="auto">Parameters in a parameters can be achieved or updated easily via <code>update!</code> or <code>setparam!</code> function. There are two kinds of parameter defined by <code>AbstractParameter</code> and <code>AbstractControlParameter</code>, respectively. The first kind makes lower level setting of parameters possible. However, it is more complicated and the signature of <code>update!</code> is less unified. The second kind provides a convenient and unified way to read and write a PolymerSystem instance. However, it only supports update a single value of any parameter. One can use <code>AbstractControlParameter</code> to define a parameter which is considered to be an independent variable in a set of simulations or for construction of a phase diagram. Currently, there are 5 concrete types of <code>AbstractControlParameter</code>:</p>
<ul dir="auto">
<li><code>ϕControlParameter</code></li>
<li><code>αControlParameter</code></li>
<li><code>χNControlParameter</code></li>
<li><code>fControlParameter</code></li>
<li><code>bControlParameter</code></li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; system = AB_A_system()
# ϕAB = 0.5, ϕA = 0.5
julia&gt; ϕA = ϕControlParameter(:hA, system)  # ϕA is the control parameter
julia&gt; update!(system, 0.6, ϕA)  # ϕAB will be updated accordingly due to the conservation of mass.
# ϕAB = 0.4, ϕA = 0.6"><pre>julia<span class="pl-k">&gt;</span> system <span class="pl-k">=</span> <span class="pl-c1">AB_A_system</span>()
<span class="pl-c"><span class="pl-c">#</span> ϕAB = 0.5, ϕA = 0.5</span>
julia<span class="pl-k">&gt;</span> ϕA <span class="pl-k">=</span> <span class="pl-c1">ϕControlParameter</span>(<span class="pl-c1">:hA</span>, system)  <span class="pl-c"><span class="pl-c">#</span> ϕA is the control parameter</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">update!</span>(system, <span class="pl-c1">0.6</span>, ϕA)  <span class="pl-c"><span class="pl-c">#</span> ϕAB will be updated accordingly due to the conservation of mass.</span>
<span class="pl-c"><span class="pl-c">#</span> ϕAB = 0.4, ϕA = 0.6</span></pre></div>
<p dir="auto">For more details, consult the testing codes reside in <code>test</code> folder.</p>
<h2 dir="auto"><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contribute</h2>
<ul dir="auto">
<li>Star the package on <a href="https://github.com/liuyxpp/Polymer.jl">github.com</a>.</li>
<li>File an issue or make a pull request on <a href="https://github.com/liuyxpp/Polymer.jl">github.com</a>.</li>
<li>Contact the author via email <a href="mailto:lyx@fudan.edu.cn">lyx@fudan.edu.cn</a>.</li>
</ul>
<h2 dir="auto"><a id="user-content-links" class="anchor" aria-hidden="true" href="#links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Links</h2>
<ul dir="auto">
<li><a href="https://github.com/liuyxpp/Polymer.jl">Source code</a></li>
</ul>
</article></div>