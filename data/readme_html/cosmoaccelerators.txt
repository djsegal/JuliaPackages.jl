<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cosmoacceleratorsjl" class="anchor" aria-hidden="true" href="#cosmoacceleratorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>COSMOAccelerators.jl</h1>
<p><a href="https://github.com/oxfordcontrol/COSMOAccelerators.jl/actions"><img src="https://github.com/oxfordcontrol/COSMOAccelerators.jl/workflows/ci/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>COSMOAccelerators</code> defines an abstract type <code>AbstractAccelerator</code>. The type can be used as an interface to write accelerator methods for algorithms based on non-expansive operators, e.g. fixed-point iterations.
The acceleration methods in this package were originally developed for the convex conic solver <a href="https://github.com/oxfordcontrol/COSMO.jl">COSMO.jl</a>, but can also be used with other fixed-point methods, e.g. algorithms based on the <a href="https://github.com/kul-forbes/ProximalOperators.jl">ProximalOperators.jl</a> package (see example).</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><code>COSMOAccelerators</code> can be added via the Julia package manager (type <code>]</code>): <code>pkg&gt; add COSMOAccelerators</code></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The <code>AbstractAccelerator</code> interface assumes that the solver method <code>T</code> iteratively updates a vector <code>g = T(x)</code>. The interface for an abstract accelerator <code>aa</code> requires implementation of the following methods:</p>
<table>
<thead>
<tr>
<th>Methods to implement</th>
<th align="left">Brief description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>update!(aa, g, x, iter)</code></td>
<td align="left">Use iteration pairs <code>(x,g)</code> to update the accelerator history at iteration <code>iter</code></td>
</tr>
<tr>
<td><code>accelerate!(g, x, aa, iter)</code></td>
<td align="left">Recombine past iterates and overwrite <code>g</code> with the accelerated point</td>
</tr>
<tr>
<td><code>was_successful!(aa)</code></td>
<td align="left">Tell the solver algorithms whether the last acceleration attempt was successful, e.g. no numerical issues</td>
</tr>
<tr>
<td><code>restart!(aa)</code></td>
<td align="left">Restart the accelerator, i.e. forget any state or history</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Optional methods</th>
<th align="left">Default definition</th>
<th align="left">Brief description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>log!(aa, args...; kwargs...)</code></td>
<td align="left">do nothing</td>
<td align="left">Algorithm tells accelerator to log something</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-accelerators" class="anchor" aria-hidden="true" href="#accelerators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accelerators</h2>
<p>The following accelerator types are currently exported:</p>
<ul>
<li><code>EmptyAccelerator</code>: An accelerator that does nothing</li>
<li><code>AndersonAccelerator{T, BT, MT, RE}(dim; mem)</code>: implements a variant of a limited-memory size(<code>mem</code>) Anderson Acceleration method for <code>x, g in R^dim</code>:
<ul>
<li><code>T &lt;: AbstractFloat</code></li>
<li><code>BT &lt;: AbstractBroydenType</code>:
<ul>
<li><code>Type1</code> for Anderson-Acceleration with a Broyden type1-update</li>
<li><code>Type2{NormalEquations}</code> for Anderson-Acceleration with a Broyden type2-update and where the least squares subproblem is solved with normal equations</li>
<li><code>Type2{QRDecomp}</code> for Anderson-Acceleration with a Broyden type2-update and where the least squares subproblem is solved with a updated QR decomposition</li>
</ul>
</li>
<li><code>MT &lt;: AbstractMemory</code>:
<ul>
<li><code>RollingMemory</code>: Once the memory limit of the history is reached, new iterates overwrite the oldest iterates</li>
<li><code>RestartedMemory</code>: Once the memory limit of the history is reached, the history is cleared and the method starts from scratch</li>
</ul>
</li>
<li><code>RE &lt;: AbstractRegularizer</code>:
<ul>
<li><code>TikonovRegularizer</code>: Tikonov regularisation of the least-squares subproblem to improve conditioning</li>
<li><code>FrobeniusNormRegularizer</code>: Regularise the least-squares subproblem based on frobenius norms of iterate history</li>
<li><code>NoRegularizer</code>: No regularisation of the least-squares subproblem</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>This is a modifed LASSO example from <a href="https://github.com/kul-forbes/ProximalAlgorithms.jl/blob/master/test/problems/test_lasso_small.jl">ProximalAlgorithms.jl</a>.
The first function defines the Douglas-Rachford algorithm based on proximal operators.
The second function adds an Anderson Acceleration step into the algorithm loop by passing the iterates to <code>update!</code> and <code>accelerate!</code>. The number of iterations for convergence decreases from 36 to 12.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using COSMOAccelerators 
using ProximalOperators, ProximalAlgorithms
using LinearAlgebra, Test

# problem taken from 
# https://github.com/kul-forbes/ProximalAlgorithms.jl/blob/master/test/problems/test_lasso_small.jl
T = Float64
A = T[
    1.0 -2.0 3.0 -4.0 5.0
    2.0 -1.0 0.0 -1.0 3.0
    -1.0 0.0 4.0 -3.0 2.0
    -1.0 -1.0 -1.0 1.0 3.0
]

b = T[1.0, 2.0, 3.0, 4.0]
m, n = size(A)
R = real(T)
lam = R(0.1) * norm(A' * b, Inf)

# define functions for proximal operators
f = LeastSquares(A, b)
g = NormL1(lam)

# optimal solution 
x_star = T[-3.877278911564627e-01, 0, 0, 2.174149659863943e-02, 6.168435374149660e-01]

# Define Douglas-Rachford splitting
function solve(iter::ProximalAlgorithms.DRS_iterable, maxiter, gamma, tol)
    tol_stop(state::ProximalAlgorithms.DRS_state) = norm(state.res, Inf) / gamma &lt;= tol

    iter = ProximalAlgorithms.halt(iter, tol_stop) # tolerance check
    iter = Base.Iterators.take(iter, maxiter) # max iter
    iter = enumerate(iter) # state = (k, state)
    
    state_final = nothing
    for state in iter
        state_final = state
    end
    return state_final[2].y, state_final[2].z, state_final[1]
end

# Define Douglas-Rachford splitting and Anderson Acceleration
function solve_and_accelerate(iter::ProximalAlgorithms.DRS_iterable, aa::AndersonAccelerator, maxiter, gamma, tol)
    tol_stop(state::ProximalAlgorithms.DRS_state) = norm(state.res, Inf) / gamma &lt;= tol
    x_prev = copy(iter.x)

    iter = ProximalAlgorithms.halt(iter, tol_stop)
    iter = Base.Iterators.take(iter, maxiter) 
    
    state_final = nothing
    k_final = nothing
    for (k, state) in enumerate(iter)
        state_final = state
        k_final = k
    
        # accelerate
        update!(aa, state.x, x_prev, k)
        accelerate!(state.x, x_prev, aa, k)
        @. x_prev = state.x

    end
    return state_final.y, state_final.z, k_final
end



# test
@testset &quot;Accelerator and Douglas-Rachford (ProximalOperators.jl)&quot; begin
    tol = 1e-6
    maxiter = 200
    x0 = zeros(5)
    gamma = R(10.0) / opnorm(A)^2

    # vanilla Douglas-Rachford
    iter = ProximalAlgorithms.DRS_iterable(f, g, x0, gamma)
    y, z, it = solve(iter, maxiter, gamma, tol)
    @test norm(y - x_star, Inf) &lt;= tol


    # Douglas-Rachford + Anderson Acceleration
    iter = ProximalAlgorithms.DRS_iterable(f, g, x0, gamma)
    aa = AndersonAccelerator(length(x0))
    y_aa, z_aa, it_aa = solve_and_accelerate(iter, aa, maxiter, gamma, tol)
    @test norm(y_aa - x_star, Inf) &lt;= tol
    @test it_aa &lt; it 

end


    
"><pre><span class="pl-k">using</span> COSMOAccelerators 
<span class="pl-k">using</span> ProximalOperators, ProximalAlgorithms
<span class="pl-k">using</span> LinearAlgebra, Test

<span class="pl-c"><span class="pl-c">#</span> problem taken from </span>
<span class="pl-c"><span class="pl-c">#</span> https://github.com/kul-forbes/ProximalAlgorithms.jl/blob/master/test/problems/test_lasso_small.jl</span>
T <span class="pl-k">=</span> Float64
A <span class="pl-k">=</span> T[
    <span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-c1">5.0</span>
    <span class="pl-c1">2.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">3.0</span>
    <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">4.0</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-c1">2.0</span>
    <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">3.0</span>
]

b <span class="pl-k">=</span> T[<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]
m, n <span class="pl-k">=</span> <span class="pl-c1">size</span>(A)
R <span class="pl-k">=</span> <span class="pl-c1">real</span>(T)
lam <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">0.1</span>) <span class="pl-k">*</span> <span class="pl-c1">norm</span>(A<span class="pl-k">'</span> <span class="pl-k">*</span> b, <span class="pl-c1">Inf</span>)

<span class="pl-c"><span class="pl-c">#</span> define functions for proximal operators</span>
f <span class="pl-k">=</span> <span class="pl-c1">LeastSquares</span>(A, b)
g <span class="pl-k">=</span> <span class="pl-c1">NormL1</span>(lam)

<span class="pl-c"><span class="pl-c">#</span> optimal solution </span>
x_star <span class="pl-k">=</span> T[<span class="pl-k">-</span><span class="pl-c1">3.877278911564627e-01</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2.174149659863943e-02</span>, <span class="pl-c1">6.168435374149660e-01</span>]

<span class="pl-c"><span class="pl-c">#</span> Define Douglas-Rachford splitting</span>
<span class="pl-k">function</span> <span class="pl-en">solve</span>(iter<span class="pl-k">::</span><span class="pl-c1">ProximalAlgorithms.DRS_iterable</span>, maxiter, gamma, tol)
    <span class="pl-en">tol_stop</span>(state<span class="pl-k">::</span><span class="pl-c1">ProximalAlgorithms.DRS_state</span>) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(state<span class="pl-k">.</span>res, <span class="pl-c1">Inf</span>) <span class="pl-k">/</span> gamma <span class="pl-k">&lt;=</span> tol

    iter <span class="pl-k">=</span> ProximalAlgorithms<span class="pl-k">.</span><span class="pl-c1">halt</span>(iter, tol_stop) <span class="pl-c"><span class="pl-c">#</span> tolerance check</span>
    iter <span class="pl-k">=</span> Base<span class="pl-k">.</span>Iterators<span class="pl-k">.</span><span class="pl-c1">take</span>(iter, maxiter) <span class="pl-c"><span class="pl-c">#</span> max iter</span>
    iter <span class="pl-k">=</span> <span class="pl-c1">enumerate</span>(iter) <span class="pl-c"><span class="pl-c">#</span> state = (k, state)</span>
    
    state_final <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    <span class="pl-k">for</span> state <span class="pl-k">in</span> iter
        state_final <span class="pl-k">=</span> state
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> state_final[<span class="pl-c1">2</span>]<span class="pl-k">.</span>y, state_final[<span class="pl-c1">2</span>]<span class="pl-k">.</span>z, state_final[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define Douglas-Rachford splitting and Anderson Acceleration</span>
<span class="pl-k">function</span> <span class="pl-en">solve_and_accelerate</span>(iter<span class="pl-k">::</span><span class="pl-c1">ProximalAlgorithms.DRS_iterable</span>, aa<span class="pl-k">::</span><span class="pl-c1">AndersonAccelerator</span>, maxiter, gamma, tol)
    <span class="pl-en">tol_stop</span>(state<span class="pl-k">::</span><span class="pl-c1">ProximalAlgorithms.DRS_state</span>) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(state<span class="pl-k">.</span>res, <span class="pl-c1">Inf</span>) <span class="pl-k">/</span> gamma <span class="pl-k">&lt;=</span> tol
    x_prev <span class="pl-k">=</span> <span class="pl-c1">copy</span>(iter<span class="pl-k">.</span>x)

    iter <span class="pl-k">=</span> ProximalAlgorithms<span class="pl-k">.</span><span class="pl-c1">halt</span>(iter, tol_stop)
    iter <span class="pl-k">=</span> Base<span class="pl-k">.</span>Iterators<span class="pl-k">.</span><span class="pl-c1">take</span>(iter, maxiter) 
    
    state_final <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    k_final <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    <span class="pl-k">for</span> (k, state) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(iter)
        state_final <span class="pl-k">=</span> state
        k_final <span class="pl-k">=</span> k
    
        <span class="pl-c"><span class="pl-c">#</span> accelerate</span>
        <span class="pl-c1">update!</span>(aa, state<span class="pl-k">.</span>x, x_prev, k)
        <span class="pl-c1">accelerate!</span>(state<span class="pl-k">.</span>x, x_prev, aa, k)
        <span class="pl-c1">@.</span> x_prev <span class="pl-k">=</span> state<span class="pl-k">.</span>x

    <span class="pl-k">end</span>
    <span class="pl-k">return</span> state_final<span class="pl-k">.</span>y, state_final<span class="pl-k">.</span>z, k_final
<span class="pl-k">end</span>



<span class="pl-c"><span class="pl-c">#</span> test</span>
<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Accelerator and Douglas-Rachford (ProximalOperators.jl)<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>
    maxiter <span class="pl-k">=</span> <span class="pl-c1">200</span>
    x0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">5</span>)
    gamma <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">10.0</span>) <span class="pl-k">/</span> <span class="pl-c1">opnorm</span>(A)<span class="pl-k">^</span><span class="pl-c1">2</span>

    <span class="pl-c"><span class="pl-c">#</span> vanilla Douglas-Rachford</span>
    iter <span class="pl-k">=</span> ProximalAlgorithms<span class="pl-k">.</span><span class="pl-c1">DRS_iterable</span>(f, g, x0, gamma)
    y, z, it <span class="pl-k">=</span> <span class="pl-c1">solve</span>(iter, maxiter, gamma, tol)
    <span class="pl-c1">@test</span> <span class="pl-c1">norm</span>(y <span class="pl-k">-</span> x_star, <span class="pl-c1">Inf</span>) <span class="pl-k">&lt;=</span> tol


    <span class="pl-c"><span class="pl-c">#</span> Douglas-Rachford + Anderson Acceleration</span>
    iter <span class="pl-k">=</span> ProximalAlgorithms<span class="pl-k">.</span><span class="pl-c1">DRS_iterable</span>(f, g, x0, gamma)
    aa <span class="pl-k">=</span> <span class="pl-c1">AndersonAccelerator</span>(<span class="pl-c1">length</span>(x0))
    y_aa, z_aa, it_aa <span class="pl-k">=</span> <span class="pl-c1">solve_and_accelerate</span>(iter, aa, maxiter, gamma, tol)
    <span class="pl-c1">@test</span> <span class="pl-c1">norm</span>(y_aa <span class="pl-k">-</span> x_star, <span class="pl-c1">Inf</span>) <span class="pl-k">&lt;=</span> tol
    <span class="pl-c1">@test</span> it_aa <span class="pl-k">&lt;</span> it 

<span class="pl-k">end</span>


    </pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related packages</h2>
<ul>
<li><a href="https://github.com/oxfordcontrol/COSMO.jl">COSMO.jl</a> - an ADMM based solver for convex conic optimisation problems.</li>
<li><a href="https://github.com/kul-forbes/ProximalOperators.jl">ProximalOperators.jl</a> - a set of operator building blocks for proximal algorithms</li>
</ul>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h2>
<p><code>COSMOAccelerators.jl</code> is developed by <a href="https://migarstka.github.io/" rel="nofollow">Michael Garstka</a> at the University of Oxford.</p>
</article></div>