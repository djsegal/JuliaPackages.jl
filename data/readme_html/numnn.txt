<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th>GitHub main.yml Status</th>
<th>Travis CI building Status</th>
<th>Stable Documentation</th>
<th>Dev Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/MohHizzani/NumNN.jl/workflows/.github/workflows/main.yml/badge.svg"><img src="https://github.com/MohHizzani/NumNN.jl/workflows/.github/workflows/main.yml/badge.svg" alt=".github/workflows/main.yml" style="max-width:100%;"></a></td>
<td><a href="https://travis-ci.com/MohHizzani/NumNN.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f09a9ff8cdc0897992491a2aa8d360ad3fddc68a/68747470733a2f2f7472617669732d63692e636f6d2f4d6f6848697a7a616e692f4e756d4e4e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MohHizzani/NumNN.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td><a href="https://mohhizzani.github.io/NumNN.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td><a href="https://mohhizzani.github.io/NumNN.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-numnnjl" class="anchor" aria-hidden="true" href="#numnnjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NumNN.jl</h1>
<p>This package provides high-level Neural Network APIs deals with different number representations like <a href="superfri.org/superfri/article/view/137" title="Beating Floating Point at its Own Game: Posit Arithmetic">Posit</a>, Logarithmic Data Representations, Residual Number System (RNS), and -for sure- the conventional IEEE formats.</p>
<p>Since, the implementation and development process for testing novel number systems on different Deep Learning applications using the current available DP frameworks in easily feasible. An urgent need for an unconventional library that provides both the easiness and complexity of simulating and testing and evaluate new number systems before the hardware design complex processâ€” was resurfaced.</p>
<h2><a id="user-content-why-julia" class="anchor" aria-hidden="true" href="#why-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why Julia?</h2>
<p><a href="julialang.org" title="Julia Language">Julia</a> provides in an unconventional way the ability to simulate new number systems and deploy this simulation to be used as high-level primitive type. <strong><a href="https://docs.julialang.org/en/v1/manual/methods/" title="Julia Multiple Dispatch" rel="nofollow">Multiple Dispatch</a></strong> provides a unique ability to write a general code then specify the implementation based on the type.</p>
<h3><a id="user-content-examples-of-multiple-dispatch" class="anchor" aria-hidden="true" href="#examples-of-multiple-dispatch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples of Multiple Dispatch</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> aInt <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span>with Integer type</span>

julia<span class="pl-k">&gt;</span> bInt <span class="pl-k">=</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">#</span>with Integer type</span>

julia<span class="pl-k">&gt;</span> cInt <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">#</span>which is a shortcut for cInt = +(1,2)</span>

julia<span class="pl-k">&gt;</span> aFloat <span class="pl-k">=</span> <span class="pl-c1">1.0</span>; <span class="pl-c"><span class="pl-c">#</span>with Float64 type</span>

julia<span class="pl-k">&gt;</span> bFloat <span class="pl-k">=</span> <span class="pl-c1">2.0</span>; <span class="pl-c"><span class="pl-c">#</span>with Flot64 type</span>

julia<span class="pl-k">&gt;</span> aInt <span class="pl-k">+</span> bFloat <span class="pl-c"><span class="pl-c">#</span>will use the method +(::Int64, ::Float64)</span>
<span class="pl-c1">3.0</span></pre></div>
<p>Now let's do something more interesting with <strong>Posit</strong> (continue on the previous example)</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SoftPosit

julia<span class="pl-k">&gt;</span> aP <span class="pl-k">=</span> <span class="pl-c1">Posit16</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">0x4000</span>)

julia<span class="pl-k">&gt;</span> bP <span class="pl-k">=</span> <span class="pl-c1">Posit16</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">0x5000</span>)

julia<span class="pl-k">&gt;</span> aInt <span class="pl-k">+</span> aP <span class="pl-c"><span class="pl-c">#</span>Note how the result is in Posit16 type</span>
<span class="pl-c1">Posit16</span>(<span class="pl-c1">0x5000</span>)</pre></div>
<p>The output was of type <code>Posit16</code> because in <strong>Julia</strong> you can define a <a href="https://docs.julialang.org/en/v1/manual/conversion-and-promotion/#Promotion-1" title="Juila Promotion" rel="nofollow">Promote Rule</a> which mean when the output can be in either type(s) of the input, <strong>promote</strong> the output to be of the specified type. Which can be defined as follows:</p>
<div class="highlight highlight-source-julia"><pre>Base<span class="pl-k">.</span><span class="pl-en">promote_rule</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Int64}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{Posit16}</span>) <span class="pl-k">=</span> Posit16</pre></div>
<p>This means that the output of an operation on both <code>Int64</code> and <code>Posit16</code> should be converted to <code>Posit16</code>.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<p>To install in Julia</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] add NumNN</pre></div>
<h2><a id="user-content-to-use" class="anchor" aria-hidden="true" href="#to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Use</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NumNN</pre></div>
</article></div>