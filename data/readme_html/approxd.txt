<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-approxd" class="anchor" aria-hidden="true" href="#approxd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ApproXD</h1>
<p dir="auto"><a href="https://travis-ci.org/floswald/ApproXD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a065369c09f30985d27b924f66f1a3c7f4b17d81b2698eb9a17341d898d3018/68747470733a2f2f7472617669732d63692e6f72672f666c6f7377616c642f417070726f58442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/floswald/ApproXD.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/floswald/ApproXD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/91c55c786e89e92f117f69ab9df8a265f20c7987d8acdffa0ec6a94bb8f8d99a/68747470733a2f2f636f6465636f762e696f2f67682f666c6f7377616c642f417070726f58442e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/floswald/ApproXD.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<ul dir="auto">
<li>This package implements bspline and linear interpolation in julia</li>
<li>For most purposes, <a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a> will be preferrable to this package.</li>
<li>However, there are some features which are available here, and not there.
<ul dir="auto">
<li>the method <code>getTensorCoef</code> is a very efficient algorithm to compute approximating coefficients from a tensor product of basis matrices. it is efficient because it never forms the tensor product.</li>
<li>the package allows low-level access to objects such as spline knot vectors. Suppose you want to have a knot vector with a <a href="https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bspline-mod-knot.html" rel="nofollow">knot multiplicity</a> in the interior knot span to approximate a kink. For example,</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="knots = vcat(lb,-0.5,0,0,0.5,ub)"><pre>knots <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(lb,<span class="pl-k">-</span><span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,ub)</pre></div>
is a valid knot vector.</li>
<li>Documentation is non-existent. Please look at the tests. Sorry.</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ApproXD
f(x) = abs.(x).^0.5
lb,ub = (-1.0,1.0)
nknots = 13
deg = 3

# standard case: equally spaced knots
params1 = BSpline(nknots,deg,lb,ub)   
nevals = 5 * params1.numKnots # get nBasis &lt; nEvalpoints

# myknots with knot multiplicity at 0
myknots = vcat(range(-1,stop = -0.1,length = 5),0,0,0,  range(0.1,stop = 1,length =5))
params2 = BSpline(myknots,deg)  # 0: no derivative

# get coefficients for each case
eval_points = collect(range(lb,stop = ub,length = nevals))  
c1 = getBasis(eval_points,params1) \ f(eval_points)
c2 = getBasis(eval_points,params2) \ f(eval_points)

# look at errors over entire interval
test_points = collect(range(lb,stop = ub,length = 1000));
truth = f(test_points);
p1 = getBasis(test_points,params1) * c1;
p2 = getBasis(test_points,params2) * c2;
e1 = p1 - truth;
e2 = p2 - truth;"><pre><span class="pl-k">using</span> ApproXD
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">abs</span>.(x)<span class="pl-k">.^</span><span class="pl-c1">0.5</span>
lb,ub <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>)
nknots <span class="pl-k">=</span> <span class="pl-c1">13</span>
deg <span class="pl-k">=</span> <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> standard case: equally spaced knots</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">BSpline</span>(nknots,deg,lb,ub)   
nevals <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-k">*</span> params1<span class="pl-k">.</span>numKnots <span class="pl-c"><span class="pl-c">#</span> get nBasis &lt; nEvalpoints</span>

<span class="pl-c"><span class="pl-c">#</span> myknots with knot multiplicity at 0</span>
myknots <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,stop <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.1</span>,length <span class="pl-k">=</span> <span class="pl-c1">5</span>),<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,  <span class="pl-c1">range</span>(<span class="pl-c1">0.1</span>,stop <span class="pl-k">=</span> <span class="pl-c1">1</span>,length <span class="pl-k">=</span><span class="pl-c1">5</span>))
params2 <span class="pl-k">=</span> <span class="pl-c1">BSpline</span>(myknots,deg)  <span class="pl-c"><span class="pl-c">#</span> 0: no derivative</span>

<span class="pl-c"><span class="pl-c">#</span> get coefficients for each case</span>
eval_points <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(lb,stop <span class="pl-k">=</span> ub,length <span class="pl-k">=</span> nevals))  
c1 <span class="pl-k">=</span> <span class="pl-c1">getBasis</span>(eval_points,params1) <span class="pl-k">\</span> <span class="pl-c1">f</span>(eval_points)
c2 <span class="pl-k">=</span> <span class="pl-c1">getBasis</span>(eval_points,params2) <span class="pl-k">\</span> <span class="pl-c1">f</span>(eval_points)

<span class="pl-c"><span class="pl-c">#</span> look at errors over entire interval</span>
test_points <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(lb,stop <span class="pl-k">=</span> ub,length <span class="pl-k">=</span> <span class="pl-c1">1000</span>));
truth <span class="pl-k">=</span> <span class="pl-c1">f</span>(test_points);
p1 <span class="pl-k">=</span> <span class="pl-c1">getBasis</span>(test_points,params1) <span class="pl-k">*</span> c1;
p2 <span class="pl-k">=</span> <span class="pl-c1">getBasis</span>(test_points,params2) <span class="pl-k">*</span> c2;
e1 <span class="pl-k">=</span> p1 <span class="pl-k">-</span> truth;
e2 <span class="pl-k">=</span> p2 <span class="pl-k">-</span> truth;</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="question_5.png"><img src="question_5.png" alt="" style="max-width: 100%;"></a></p>
</article></div>