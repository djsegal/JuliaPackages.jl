<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-electron" class="anchor" aria-hidden="true" href="#electron"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Electron</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/davidanthoff/Electron.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad953ad96d05e51c0e4179a52647f7d4576100b6/68747470733a2f2f7472617669732d63692e6f72672f6461766964616e74686f66662f456c656374726f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/davidanthoff/Electron.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/davidanthoff/electron-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/3cd83597af90dac26c787a5e2b6137a26258dc0e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f697369643868713768713176776d666e2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/isid8hq7hq1vwmfn/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/davidanthoff/Electron.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2abeef433a3b0a786de8d052b5a607184b446fa8/68747470733a2f2f636f6465636f762e696f2f67682f6461766964616e74686f66662f456c656374726f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/davidanthoff/Electron.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> wraps the cross-platform desktop application framework <a href="https://electronjs.org/" rel="nofollow">Electron</a>. You can use it to build GUI applications in julia.</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternatives</h2>
<p><a href="https://github.com/JunoLab/Blink.jl">Blink.jl</a> provides similar functionality (and was a major inspiration for this package!). The main difference between the two packages is that <a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> opts for a more minimalistic feature set than <a href="https://github.com/JunoLab/Blink.jl">Blink.jl</a>. Here are some key differences between the two packages:</p>
<ul>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> does not have any web server functionality.</li>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> has no functionality to translate julia code to JavaScript.</li>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> uses named pipes for the communication between julia and the electron process (no more firewall warnings!).</li>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> doesn't integrate with the Juno stack of packages, <a href="https://github.com/JunoLab/Blink.jl">Blink.jl</a> does in some way (that I don't understand).</li>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> has a high test coverage.</li>
<li><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> always installs a private copy of Electron during the build phase.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You can install the package with:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Electron<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting started</h2>
<p><a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> introduces two fundamental types: <code>Application</code> represents a running electron application, <code>Window</code> is a visible UI window. A julia process can have arbitrarily many applications running at the same time, each represented by its own <code>Application</code> instance. If you don't want to deal with <code>Application</code>s you can also just ignore them, in that case <a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> will create a default application for you automatically.</p>
<p>To create a new application, simply call the corresponding constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron

app <span class="pl-k">=</span> <span class="pl-c1">Application</span>()</pre></div>
<p>This will start a new Electron process that is ready to open windows or run JavaScript code.</p>
<p>To create a new window in an existing application, use the <code>Window</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron, URIParser

app <span class="pl-k">=</span> <span class="pl-c1">Application</span>()

win <span class="pl-k">=</span> <span class="pl-c1">Window</span>(app, <span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>file://main.html<span class="pl-pds">"</span></span>))</pre></div>
<p>Note that you need to pass a URI that points to an HTML file to the <code>Window</code> constructor. This HTML file will be displayed in the new window.</p>
<p>You can update pre-existing <code>Window</code> using function <code>load</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">load</span>(win, <span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>http://julialang.org<span class="pl-pds">"</span></span>))
<span class="pl-c1">load</span>(win, <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;img src="https://raw.githubusercontent.com/JuliaGraphics/julia-logo-graphics/master/images/julia-logo-325-by-225.png"&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)</pre></div>
<p>You can also call the <code>Window</code> constructor without passing an <code>Application</code>, in that case <a href="https://github.com/davidanthoff/Electron.jl">Electron.jl</a> creates a default application for you:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron, URIParser

win <span class="pl-k">=</span> <span class="pl-c1">Window</span>(<span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>file://main.html<span class="pl-pds">"</span></span>))</pre></div>
<p>You can run JavaScript code both in the main or the render thread of a specific window. To run some JavaScript in the main thread, call the <code>run</code> function and pass an <code>Application</code> instance as the first argument:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron, URIParser

app <span class="pl-k">=</span> <span class="pl-c1">Application</span>()

result <span class="pl-k">=</span> <span class="pl-c1">run</span>(app, <span class="pl-s"><span class="pl-pds">"</span>Math.log(10)<span class="pl-pds">"</span></span>)</pre></div>
<p>The second argument of the <code>run</code> function is JavaScript code that will simply be executed as is in Electron.</p>
<p>You can also run JavaScript in the render thread of any open window by passing the corresponding <code>Window</code> instance as the first argument to <code>run</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron, URIParser

win <span class="pl-k">=</span> <span class="pl-c1">Window</span>(<span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>file://main.html<span class="pl-pds">"</span></span>))

result <span class="pl-k">=</span> <span class="pl-c1">run</span>(win, <span class="pl-s"><span class="pl-pds">"</span>Math.log(10)<span class="pl-pds">"</span></span>)</pre></div>
<p>You can send messages from a render thread back to julia by calling the javascript function <code>sendMessageToJulia</code>. On the julia side, every window has a <code>Channel</code> for these messages. You can access the channel for a given window with the <code>msgchannel</code> function, and then use the standard julia API to take messages out of this channel:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Electron

win <span class="pl-k">=</span> <span class="pl-c1">Window</span>()

result <span class="pl-k">=</span> <span class="pl-c1">run</span>(win, <span class="pl-s"><span class="pl-pds">"</span>sendMessageToJulia('foo')<span class="pl-pds">"</span></span>)

ch <span class="pl-k">=</span> <span class="pl-c1">msgchannel</span>(win)

msg <span class="pl-k">=</span> <span class="pl-c1">take!</span>(ch)

<span class="pl-c1">println</span>(msg)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>The following packages currently use Electron.jl:</p>
<ul>
<li><a href="https://github.com/davidanthoff/DataVoyager.jl">https://github.com/davidanthoff/DataVoyager.jl</a></li>
<li><a href="https://github.com/davidanthoff/ElectronDisplay.jl">https://github.com/davidanthoff/ElectronDisplay.jl</a></li>
</ul>
<p>Please add any other packages that depend on Electron.jl to this list via
a pull request!</p>
</article></div>