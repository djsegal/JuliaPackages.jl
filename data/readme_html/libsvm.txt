<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libsvmjl" class="anchor" aria-hidden="true" href="#libsvmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LIBSVM.jl</h1>
<p><a href="https://travis-ci.org/mpastell/LIBSVM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ebef5f35a1f34ad0ed02634c9ee224feb480aff8/68747470733a2f2f7472617669732d63692e6f72672f6d70617374656c6c2f4c494253564d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mpastell/LIBSVM.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mpastell/libsvm-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/19c0e513d7c6c9ef8478346b97a5ab4b2ff81065/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3176386a70626979316f376d706936712f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/1v8jpbiy1o7mpi6q/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/mpastell/LIBSVM.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1f6adad23df28a7e3fc09b105d1e0e2324e58b1b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d70617374656c6c2f4c494253564d2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/mpastell/LIBSVM.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a Julia interface for <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" rel="nofollow">LIBSVM</a>.</p>
<p><strong>Features:</strong></p>
<ul>
<li>Supports all LIBSVM models: classification C-SVC, nu-SVC, regression: epsilon-SVR, nu-SVR
and distribution estimation: one-class SVM</li>
<li>Model objects are represented by Julia type SVM which gives you easy
access to model features and can be saved e.g. as JLD file</li>
<li>Supports ScikitLearn.jl API</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-libsvm-api" class="anchor" aria-hidden="true" href="#libsvm-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LIBSVM API</h3>
<p>This provides a lower level API similar to LIBSVM C-interface. See <code>?svmtrain</code>
for options.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RDatasets, LIBSVM

<span class="pl-c"><span class="pl-c">#</span> Load Fisher's classic iris data</span>
iris <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> LIBSVM handles multi-class data automatically using a one-against-one strategy</span>
labels <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Vector, iris[<span class="pl-c1">:Species</span>])

<span class="pl-c"><span class="pl-c">#</span> First dimension of input data is features; second is instances</span>
instances <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array, iris[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>])<span class="pl-k">'</span>

<span class="pl-c"><span class="pl-c">#</span> Train SVM on half of the data using default parameters. See documentation</span>
<span class="pl-c"><span class="pl-c">#</span> of svmtrain for options</span>
model <span class="pl-k">=</span> <span class="pl-c1">svmtrain</span>(instances[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>], labels[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]);

<span class="pl-c"><span class="pl-c">#</span> Test model on the other half of the data.</span>
(predicted_labels, decision_values) <span class="pl-k">=</span> <span class="pl-c1">svmpredict</span>(model, instances[:, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]);

<span class="pl-c"><span class="pl-c">#</span> Compute accuracy</span>
<span class="pl-c1">@printf</span> <span class="pl-s"><span class="pl-pds">"</span>Accuracy: %.2f%%<span class="pl-cce">\n</span><span class="pl-pds">"</span></span> <span class="pl-c1">mean</span>((predicted_labels <span class="pl-k">.==</span> labels[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]))<span class="pl-k">*</span><span class="pl-c1">100</span></pre></div>
<h3><a id="user-content-scikitlearn-api" class="anchor" aria-hidden="true" href="#scikitlearn-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ScikitLearn API</h3>
<p>You can alternatively use <code>ScikitLearn.jl</code> API with same options as <code>svmtrain</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LIBSVM
<span class="pl-k">using</span> RDatasets<span class="pl-k">:</span> dataset

<span class="pl-c"><span class="pl-c">#</span>Classification C-SVM</span>
iris <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)
labels <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Vector, iris[:, <span class="pl-c1">:Species</span>])
instances <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array, iris[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>])
model <span class="pl-k">=</span> <span class="pl-c1">fit!</span>(<span class="pl-c1">SVC</span>(), instances[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>, :], labels[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])
yp <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, instances[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>, :])

<span class="pl-c"><span class="pl-c">#</span>epsilon-regression</span>
whiteside <span class="pl-k">=</span> RDatasets<span class="pl-k">.</span><span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>MASS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>whiteside<span class="pl-pds">"</span></span>)
X <span class="pl-k">=</span> <span class="pl-c1">Array</span>(whiteside[<span class="pl-c1">:Gas</span>])
<span class="pl-k">if</span> <span class="pl-c1">typeof</span>(X) <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector</span>
    X <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(X, (<span class="pl-c1">length</span>(X),<span class="pl-c1">1</span>))
<span class="pl-k">end</span>
y <span class="pl-k">=</span> <span class="pl-c1">Array</span>(whiteside[<span class="pl-c1">:Temp</span>])
svrmod <span class="pl-k">=</span> <span class="pl-c1">fit!</span>(<span class="pl-c1">EpsilonSVR</span>(cost <span class="pl-k">=</span> <span class="pl-c1">10.</span>, gamma <span class="pl-k">=</span> <span class="pl-c1">1.</span>), X, y)
yp <span class="pl-k">=</span> <span class="pl-c1">predict</span>(svrmod, X)</pre></div>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h2>
<p>The library is currently developed and maintained by Matti Pastell. It was originally
developed by Simon Kornblith.</p>
<p><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" rel="nofollow">LIBSVM</a> by Chih-Chung Chang and Chih-Jen Lin</p>
</article></div>