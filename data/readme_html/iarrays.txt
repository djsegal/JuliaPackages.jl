<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-iarrays" class="anchor" aria-hidden="true" href="#iarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IArrays</h1>
<p>This is a prototype/proposal for more structured mutable array semantics in Julia,
which is more easily compatible with AD and other program transformations.</p>
<p><code>IArray</code>s can largely be used as normal arrays, except that they are immutable.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; xs = IArray(rand(3, 3))
3×3 IArray{Float64,2}:
 0.59274   0.76084   0.605007
 0.353013  0.773034  0.325377
 0.642339  0.237374  0.421283

julia&gt; xs*xs
3×3 Array{Float64,2}:
 1.00855   1.18275   0.86105
 0.691138  0.943404  0.602178
 0.735142  0.772217  0.643335
"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">IArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> IArray{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.59274</span>   <span class="pl-c1">0.76084</span>   <span class="pl-c1">0.605007</span>
 <span class="pl-c1">0.353013</span>  <span class="pl-c1">0.773034</span>  <span class="pl-c1">0.325377</span>
 <span class="pl-c1">0.642339</span>  <span class="pl-c1">0.237374</span>  <span class="pl-c1">0.421283</span>

julia<span class="pl-k">&gt;</span> xs<span class="pl-k">*</span>xs
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.00855</span>   <span class="pl-c1">1.18275</span>   <span class="pl-c1">0.86105</span>
 <span class="pl-c1">0.691138</span>  <span class="pl-c1">0.943404</span>  <span class="pl-c1">0.602178</span>
 <span class="pl-c1">0.735142</span>  <span class="pl-c1">0.772217</span>  <span class="pl-c1">0.643335</span></pre></div>
<p>Limitations:</p>
<ul>
<li>Likely needs some (reasonably simple) compiler support to be remotely efficient.
<ul>
<li>i.e. immutable heap-allocated buffers + escape analysis</li>
</ul>
</li>
<li>No GPU support yet
<ul>
<li>i.e. immutable heap-allocated GPU buffers</li>
</ul>
</li>
</ul>
</article></div>