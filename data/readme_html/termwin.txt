<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-termwinjl" class="anchor" aria-hidden="true" href="#termwinjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TermWin.jl</h1>
<p><a href="http://pkg.julialang.org/?pkg=TermWin&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/846d502b401604e53550716474e2f3a0adcbaa12eff0eb4a8f754d0b908a4057/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5465726d57696e5f72656c656173652e737667" alt="TermWin" data-canonical-src="http://pkg.julialang.org/badges/TermWin_release.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/tonyhffong/TermWin.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50c29d3af8939b8d0e0f6dc21c25109933b8eea888ae2975283340ed16edbba8/68747470733a2f2f7472617669732d63692e6f72672f746f6e796866666f6e672f5465726d57696e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tonyhffong/TermWin.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>TermWin.jl is a tool to help navigate tree-like data structure such as <code>Expr</code>, <code>Dict</code>, <code>Array</code>, <code>Module</code>, and
<code>DataFrame</code>
It uses a ncurses-based user interface.
It also contains a backend framework for composing ncurses user interfaces.</p>
<p>It requires color support, <code>xterm-256color</code> strongly encouraged.</p>
<p>Most viewers have help text via the <code>F1</code> key.</p>
<p>The advantages of using TermWin compared to other established GUI framework are that</p>
<ul>
<li>Minimal binary dependency. It just depends on ncurses binary, which is widely available. You may be
connecting to a machine via ssh and you can still gain productivity using TermWin.</li>
<li>light-weight. We leave more resources for other intensive tasks. Useful if we need to examine large data.</li>
<li>efficiency. We try to emphasize keyboard shortcuts so users can be highly productive after
investing a bit of time. Also, as an open source julia module, it is quite easy to get close to
the data and to be cleverer about using the information only when we need them (such as dataframe aggregations).</li>
<li>Aesthetically flexible. Everything on screen is a utf8 code point, so it is easy to get something
working, and then improve by using fancier code points. With
unicode-capable &amp; color terminals being quite common these days, the visual can be excellent.</li>
<li>old-school-cool</li>
</ul>
<p>For most users, the main function is <code>tshow</code>, which accepts almost anything, and should give you
a fairly usable interactive representation.</p>
<h3><a id="user-content-expr" class="anchor" aria-hidden="true" href="#expr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expr</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TermWin
ex = :( f(x) = x*x + 2x + 1 )
tshow(ex)
"><pre><span class="pl-k">using</span> TermWin
ex <span class="pl-k">=</span> :( <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">1</span> )
<span class="pl-c1">tshow</span>(ex)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/7191122/5458271/62ae80c0-8583-11e4-8ebb-a996d0d63f5e.png"><img src="https://cloud.githubusercontent.com/assets/7191122/5458271/62ae80c0-8583-11e4-8ebb-a996d0d63f5e.png" alt="expression" style="max-width:100%;"></a></p>
<h3><a id="user-content-module" class="anchor" aria-hidden="true" href="#module"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Module</h3>
<p>An excellent example of looking at modules is to see the <code>TermWin</code> module itself:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TermWin
tshow( TermWin ) # to see what functionalities it implements
"><pre><span class="pl-k">using</span> TermWin
<span class="pl-c1">tshow</span>( TermWin ) <span class="pl-c"><span class="pl-c">#</span> to see what functionalities it implements</span></pre></div>
<h3><a id="user-content-functions-and-methods" class="anchor" aria-hidden="true" href="#functions-and-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions and Methods</h3>
<p>To show <code>Function</code> and <code>MethodTable</code>,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TermWin
tshow( deleteat! ) # searchable, pivotable methods table
tshow( methods( deleteat! ) ) # ditto
tshow( methodswith( Set ) )
"><pre><span class="pl-k">using</span> TermWin
<span class="pl-c1">tshow</span>( deleteat! ) <span class="pl-c"><span class="pl-c">#</span> searchable, pivotable methods table</span>
<span class="pl-c1">tshow</span>( <span class="pl-c1">methods</span>( deleteat! ) ) <span class="pl-c"><span class="pl-c">#</span> ditto</span>
<span class="pl-c1">tshow</span>( <span class="pl-c1">methodswith</span>( Set ) )</pre></div>
<h3><a id="user-content-dataframes" class="anchor" aria-hidden="true" href="#dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DataFrames</h3>
<p>To show a dataframe, this is the minimum:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TermWin
df = DataFrame( a = [1,2], b = [&quot;c&quot;, &quot;d&quot;] )
tshow( df )
"><pre><span class="pl-k">using</span> TermWin
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>( a <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], b <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] )
<span class="pl-c1">tshow</span>( df )</pre></div>
<p>TermWin supports a wide range of configurations in showing dataframes. Here is a rather elaborate example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TermWin
using RDatasets
using Compat

df = dataset( &quot;Ecdat&quot;, &quot;Caschool&quot; )
tshow( df;
    colorder = [ :EnrlTot, :Teachers, :Computer, :TestScr, :CompStu, &quot;*&quot; ],
    pivots = [ :County, :top5districts, :District ],
    initdepth = 2,
    aggrHints = @compat(Dict{Any,Any}(
        :TestScr =&gt; :( mean( :_, weights(:EnrlTot) ) ),
        :ExpnStu =&gt; :( mean( :_, weights(:EnrlTot) ) ),
        :CompStu =&gt; :( mean( :_, weights(:EnrlTot) ) ),
        :Str     =&gt; :( mean( :_, weights(:EnrlTot) ) )
        ) ),
    calcpivots = @compat( Dict{Symbol,Any}(
        :CountyStrBuckets     =&gt; CalcPivot( :(discretize( :Str, [ 14,16,18,20,22,24 ], rank = true, compact = true )), :County ),
        :CountyTestScrBuckets =&gt; CalcPivot( :(discretize( :TestScr, [ 600, 620, 640, 660, 680, 700],
                                    label = &quot;score&quot;, rank = true, compact = false, reverse = true ) ), :County ),
        :top5districts        =&gt; CalcPivot( :(topnames( :District, :TestScr, 5 ) ) )
        ) ),
    views = [
        @compat(Dict{Symbol,Any}( :name =&gt; &quot;ByStr&quot;,       :pivots =&gt; [ :CountyStrBuckets, :County, :District] ) ),
        @compat(Dict{Symbol,Any}( :name =&gt; &quot;ByTestScr&quot;,   :pivots =&gt; [ :CountyTestScrBuckets, :County, :District] ) ),
        @compat(Dict{Symbol,Any}( :name =&gt; &quot;Top5Schools&quot;, :pivots =&gt; [ :top5districts, :County ] ) )
    ],
    )
"><pre><span class="pl-k">using</span> TermWin
<span class="pl-k">using</span> RDatasets
<span class="pl-k">using</span> Compat

df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>( <span class="pl-s"><span class="pl-pds">"</span>Ecdat<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Caschool<span class="pl-pds">"</span></span> )
<span class="pl-c1">tshow</span>( df;
    colorder <span class="pl-k">=</span> [ <span class="pl-c1">:EnrlTot</span>, <span class="pl-c1">:Teachers</span>, <span class="pl-c1">:Computer</span>, <span class="pl-c1">:TestScr</span>, <span class="pl-c1">:CompStu</span>, <span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span> ],
    pivots <span class="pl-k">=</span> [ <span class="pl-c1">:County</span>, <span class="pl-c1">:top5districts</span>, <span class="pl-c1">:District</span> ],
    initdepth <span class="pl-k">=</span> <span class="pl-c1">2</span>,
    aggrHints <span class="pl-k">=</span> <span class="pl-c1">@compat</span>(<span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(
        <span class="pl-c1">:TestScr</span> <span class="pl-k">=&gt;</span> :( <span class="pl-c1">mean</span>( <span class="pl-c1">:_</span>, <span class="pl-c1">weights</span>(<span class="pl-c1">:EnrlTot</span>) ) ),
        <span class="pl-c1">:ExpnStu</span> <span class="pl-k">=&gt;</span> :( <span class="pl-c1">mean</span>( <span class="pl-c1">:_</span>, <span class="pl-c1">weights</span>(<span class="pl-c1">:EnrlTot</span>) ) ),
        <span class="pl-c1">:CompStu</span> <span class="pl-k">=&gt;</span> :( <span class="pl-c1">mean</span>( <span class="pl-c1">:_</span>, <span class="pl-c1">weights</span>(<span class="pl-c1">:EnrlTot</span>) ) ),
        <span class="pl-c1">:Str</span>     <span class="pl-k">=&gt;</span> :( <span class="pl-c1">mean</span>( <span class="pl-c1">:_</span>, <span class="pl-c1">weights</span>(<span class="pl-c1">:EnrlTot</span>) ) )
        ) ),
    calcpivots <span class="pl-k">=</span> <span class="pl-c1">@compat</span>( <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>(
        <span class="pl-c1">:CountyStrBuckets</span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">CalcPivot</span>( :(<span class="pl-c1">discretize</span>( <span class="pl-c1">:Str</span>, [ <span class="pl-c1">14</span>,<span class="pl-c1">16</span>,<span class="pl-c1">18</span>,<span class="pl-c1">20</span>,<span class="pl-c1">22</span>,<span class="pl-c1">24</span> ], rank <span class="pl-k">=</span> <span class="pl-c1">true</span>, compact <span class="pl-k">=</span> <span class="pl-c1">true</span> )), <span class="pl-c1">:County</span> ),
        <span class="pl-c1">:CountyTestScrBuckets</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">CalcPivot</span>( :(<span class="pl-c1">discretize</span>( <span class="pl-c1">:TestScr</span>, [ <span class="pl-c1">600</span>, <span class="pl-c1">620</span>, <span class="pl-c1">640</span>, <span class="pl-c1">660</span>, <span class="pl-c1">680</span>, <span class="pl-c1">700</span>],
                                    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>score<span class="pl-pds">"</span></span>, rank <span class="pl-k">=</span> <span class="pl-c1">true</span>, compact <span class="pl-k">=</span> <span class="pl-c1">false</span>, reverse <span class="pl-k">=</span> <span class="pl-c1">true</span> ) ), <span class="pl-c1">:County</span> ),
        <span class="pl-c1">:top5districts</span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">CalcPivot</span>( :(<span class="pl-c1">topnames</span>( <span class="pl-c1">:District</span>, <span class="pl-c1">:TestScr</span>, <span class="pl-c1">5</span> ) ) )
        ) ),
    views <span class="pl-k">=</span> [
        <span class="pl-c1">@compat</span>(<span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>( <span class="pl-c1">:name</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>ByStr<span class="pl-pds">"</span></span>,       <span class="pl-c1">:pivots</span> <span class="pl-k">=&gt;</span> [ <span class="pl-c1">:CountyStrBuckets</span>, <span class="pl-c1">:County</span>, <span class="pl-c1">:District</span>] ) ),
        <span class="pl-c1">@compat</span>(<span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>( <span class="pl-c1">:name</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>ByTestScr<span class="pl-pds">"</span></span>,   <span class="pl-c1">:pivots</span> <span class="pl-k">=&gt;</span> [ <span class="pl-c1">:CountyTestScrBuckets</span>, <span class="pl-c1">:County</span>, <span class="pl-c1">:District</span>] ) ),
        <span class="pl-c1">@compat</span>(<span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>( <span class="pl-c1">:name</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Top5Schools<span class="pl-pds">"</span></span>, <span class="pl-c1">:pivots</span> <span class="pl-k">=&gt;</span> [ <span class="pl-c1">:top5districts</span>, <span class="pl-c1">:County</span> ] ) )
    ],
    )</pre></div>
<p>which will generate this output:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/7191122/5457618/8f136f72-857e-11e4-8a27-5c4666f0386b.png"><img src="https://cloud.githubusercontent.com/assets/7191122/5457618/8f136f72-857e-11e4-8a27-5c4666f0386b.png" alt="caschool" style="max-width:100%;"></a></p>
<p>Here the "top5district" pivot (after County) is a "calculated pivot". It is not static.
It is generated based on the path of the tree nodes, so
as the user moves this pivot further up or down the pivot chain, the
ranking would be adjusted to the context/subdataframe
correctly. Another example of calculated pivot is discretization on aggregated values "CountyTestScrBuckets",
which can be found on the view selector ('v' keyboard shortcut) in the same example.
You can also change the pivot ordering without restarting the view using the 'p' shortcut.</p>
<p>Also, note that aggregation <code>aggrHints</code> is done via an expression that will be lifted into a compiled function. The
argument column <code>:_</code> is always replaced with the column name at compilation.
Other required columns for the aggregation function (such as weights in this case) must be explicitly
named. The convention of using colons to denote columns follows
<a href="https://github.com/JuliaStats/DataFramesMeta.jl">DataFramesMeta.jl</a></p>
<p>The dataframe viewer supports a large range of options:</p>
<ul>
<li><code>pivots</code>. Array of <code>Symbol</code>. They can be a <strong>calcpivot</strong>. (see below)</li>
<li><code>initdepth</code>. Default 1. How many levels of pivots are open at initialization.</li>
<li><code>colorder</code>. Array of <code>Symbol</code>, <code>Regex</code> and <code>"*"</code> (string). Symbols are treated as actual column name.
It is an error to provide a symbol that doesn't exist as a column in the data frame. Regex would
be used to to match multiple columns. <code>"*"</code> is the rest of the columns not covered yet. It is
permissible to put <code>"*"</code> in the middle of the array, but it is NOT ok to include two or more <code>"*"</code>.</li>
<li><code>hidecols</code>. Array of <code>Symbol</code> and <code>Regex</code>. Columns that match these will be hidden. This overrules
<code>colorder</code>.</li>
<li><code>sortorder</code>. Array of <code>(Symbol, Symbol)</code>, the first is the column name, the second is either <code>:asc</code> or <code>:desc</code>.
If only a <code>Symbol[]</code> is provided, all are assumed in <code>:asc</code> order</li>
<li><code>title</code>.</li>
<li><code>formatHints</code>. <code>Dict{Any,FormatHints}</code>. Keys of <code>Symbol</code> type are treated as column names. Keys of <code>DataType</code>
are backup formats when actual format hints for a name are not provided.</li>
<li><code>widthHints</code>. <code>Dict{Symbol,Int}</code>. If present, the width will override default in formatHints.</li>
<li><code>aggrHints</code>. <code>Dict{Any,Any}</code>. Keys of <code>Symbol</code> type are treated as column names. Keys of <code>DataType</code>
are backup aggregation hints when actual aggregation hints for a name are not provided. The values
can be strings like <code>"mean"</code>, or <code>"mean(:_, :wtcol)"</code>, equivalent symbols or expressions
e.g. <code>:( mean(:_, weights( :wtcol ) ) )</code>, etc. Quoted symbols are interpreted as columns, similar to how
<code>DataFramesMeta</code> package.</li>
<li><code>calcpivots</code>. Dynamic pivotable quantity. This generates a computed column that can be included
in the <code>pivots</code> above.</li>
<li><code>headerHints</code>. Alternative name for the header.</li>
<li><code>views</code>. Array of Dictionaries that provide alternative views of the same data. Overrideable keys are
<ul>
<li><code>pivots</code>, <code>colorder</code>, <code>hidecols</code>, <code>sortorder</code>, <code>initdepth</code> with the same meaning as above.</li>
<li><code>name</code>. String. name of the view. If not provided the views would just be <code>v#1</code>, <code>v#2</code>, and so on...</li>
</ul>
</li>
</ul>
<p>TermWin provides a few commonly used aggregation functions for table data presentation:</p>
<ul>
<li><code>uniqvalue</code>. If all non-NA values are the same, use that value, otherwise NA. For strings, empty strings
are treated as NA (i.e. ignored) as well. This is the default aggregation for string typed columns.</li>
<li><code>unionall</code>. If the column's element-type is an array, union them all. This is the default aggregation for
array typed columns.</li>
</ul>
<p>On <strong>CalcPivot</strong>, TermWin provides</p>
<ul>
<li><code>discretize</code>. It needs <code>:measure</code> column and a break vector. Similar to <code>cut</code>, with the following options
<ul>
<li>leftequal. Default true, meaning the boundary values are interpreted as <code>t1 ≤ x &lt; t2</code></li>
<li>boundedness. Symbol. Default <code>:unbounded</code>.
<ul>
<li><code>:unbounded</code>. We group all numbers below the first break and above the last break into their
respective categories.</li>
<li><code>:bounded</code>. All numbers less than the first break and more than the last break will become <code>NA</code></li>
<li><code>:boundedbelow</code>. All numbers less than the first break will become <code>NA</code></li>
<li><code>:boundedabove</code>. All numbers more than the last break will become <code>NA</code></li>
</ul>
</li>
<li>absolute. Default false. If true, bucketing test would becomes <code>t1 ≤ |x| &lt; t2</code></li>
<li>rank. Default true. Output bucket strings are prefixed with consecutive numbers to make them easier to sort.</li>
<li>ranksep. Default ". ". The string between the rank number and the range description</li>
<li>label. Default is an empty string. If set, it is expected we want to show the long-form range description
e.g. <code>t1 ≤ x &lt; t2</code></li>
<li>compact. Default is true. Compact range looks terser, like <code>[1,5)</code>. Integers range with interval size 1
is further compacted to just that number.</li>
<li>reverse. Default is false. If set to true, the higher ranges come first.</li>
<li>prefix, suffix, scale, precision, commas, stripzeros, parens, mixedfraction, autoscale, conversion. These are options from <code>Formatting.jl</code></li>
<li>ngroups. <strong>Default to 4 when breaks are not provided</strong>. Generate breaks based on number of groups.</li>
</ul>
</li>
<li><code>topnames</code>. It requires a <code>:name</code> column, a <code>:measure</code> column and an integer (typically small). Keyward arguments
include:
<ul>
<li>absolute. Default false. If true, large negatives will be included in the top names too. Please note that
the sort order will always put negative values below positive ones. See <code>test/dftests.jl</code> for more details.</li>
<li>ranksep. Default ". ".</li>
<li>dense = true. Whether it skip numbers when encountering ties.</li>
<li>tol. Tolerance. Default zero. If set positive and absolute is true, measures that are below this
tolerance threshold will not be included, no matter what.</li>
<li>others. Default "Others". How data not in the top N will look like.</li>
<li>parens. Default false. If the measure is negative and this is set, parentheses will be added around
the name.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-other-usage-tips" class="anchor" aria-hidden="true" href="#other-usage-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other usage tips</h2>
<p><code>tshow</code> for most types accepts at a minimum the following keyword arguments:</p>
<ul>
<li>title</li>
<li>height. When floating point, it must be within [0.0, 1.0] i.e. relative screen size. When integer, they mean character height.</li>
<li>width. ditto</li>
<li>posx. When integer, it is the x (horizontal) location. 0 is the left edge. It also supports symbols such as
<ul>
<li><code>:staggered</code></li>
<li><code>:center</code></li>
<li><code>:left</code></li>
<li><code>:right</code></li>
<li><code>:random</code></li>
</ul>
</li>
<li>posy. When integer, it is the y (vertical) location. 0 is the top edge.
<ul>
<li><code>:staggered</code></li>
<li><code>:center</code></li>
<li><code>:top</code></li>
<li><code>:bottom</code></li>
<li><code>:random</code></li>
</ul>
</li>
</ul>
<p><code>tshow</code> returns the widget which can be re-shown. This is especially useful with the dataframe and other
container viewers, which remember the pivot states, the column order, etc.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>As stated on the tin, TermWin requires ncurses. It is being developed on MacOS/iTerm.
It also requires Lint.jl for a superficial code cleanliness test. (Not sure how
to unit-test a GUI than actually using it manually.)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add( &quot;TermWin&quot; )
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>( <span class="pl-s"><span class="pl-pds">"</span>TermWin<span class="pl-pds">"</span></span> )</pre></div>
<p>If you are using iTerm2 on MacOS, it is known that its <code>modern parser</code> for CSI codes are not
compatible to this package. You should disable it.</p>
<h2><a id="user-content-using-termwin-to-compose-dialogs-and-ncurses-applications" class="anchor" aria-hidden="true" href="#using-termwin-to-compose-dialogs-and-ncurses-applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using TermWin to compose dialogs and ncurses applications</h2>
<h3><a id="user-content-input-widgets" class="anchor" aria-hidden="true" href="#input-widgets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input Widgets</h3>
<p>Numeric, text, date input field (See <code>test/twentry.jl</code>). Designed to maximize
entry efficiency and accuracy (See F1 help screen).
UTF-8 input and output are supported with correct cursor movement.
Most European typesets,
Han characters, Thai (with compound vowel issues),
currency symbols, e.g. €, £, are fine..</p>
<p>It supports date type</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples:</h3>
<p>Getting a value or a string from a user:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=""><pre></pre></div>
<p>One out of many selection:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=""><pre></pre></div>
<p>Getting a multi-value selection:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=""><pre></pre></div>
<h3><a id="user-content-general-comments-on-code-organization" class="anchor" aria-hidden="true" href="#general-comments-on-code-organization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General comments on code organization</h3>
<p>The key type is <code>TwObj</code>. It is the type that renders something.
TwScreen is just a typealias for TwObj, but it holds special role in</p>
<ul>
<li>directing key stroke traffic</li>
<li>hold references to the content widgets and update them in the correct order</li>
</ul>
<p>Many widgets can be used in both blocking and non-blocking manner, though
some are more useful in blocking than non-blocking and others vice versa.</p>
<p>To use a widget for blocking use, instantiate that widget (if a container,
put them inside too) and call</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="return_value = activateTwObj( widget )
"><pre>return_value <span class="pl-k">=</span> <span class="pl-c1">activateTwObj</span>( widget )</pre></div>
<p>To use a widget for non-blocking use, you need a container widget that is
actually blocking and put it inside the container. See the function viewer for
an example of mixing in a data entry field.</p>
<h3><a id="user-content-focus-and-keystroke-traffic-logic" class="anchor" aria-hidden="true" href="#focus-and-keystroke-traffic-logic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Focus and keystroke traffic logic</h3>
<p>When a widget has the focus, it has first dip in interpreting any user
keystroke. Only when the widget gives up (by returning <code>:pass</code>), the container
(usually <code>TwScreen</code>) looks for other widgets also in play (when they have
grabUnusedKeys set to true, e.g. Menu). After all widgets pass, then the
container would try to interpret it itself. If a widget return :exit_ok, it’s
instructing the container that it has got what it wanted. The container
may still choose to switch focus, or exit -- the inject function would need
to be overriden to tell TermWin what to do.</p>
</article></div>