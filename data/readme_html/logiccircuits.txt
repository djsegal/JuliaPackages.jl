<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://avatars.githubusercontent.com/u/58918144?s=200&amp;v=4"><img align="right" width="180px" src="https://avatars.githubusercontent.com/u/58918144?s=200&amp;v=4" style="max-width: 100%;"></a></p>

<h1 dir="auto"><a id="user-content-logiccircuitsjl" class="anchor" aria-hidden="true" href="#logiccircuitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LogicCircuits.jl</h1>
<p dir="auto"><a href="https://github.com/Juice-jl/LogicCircuits.jl/actions?query=workflow%3A%22Unit+Tests%22+branch%3Amaster"><img src="https://github.com/Juice-jl/LogicCircuits.jl/workflows/Unit%20Tests/badge.svg" alt="Unit Tests" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/Juice-jl/LogicCircuits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/010cf552630ea4c9b51415368574e80579dc80e9e8fe5922bd0a18b61516ed1d/68747470733a2f2f636f6465636f762e696f2f67682f4a756963652d6a6c2f4c6f67696343697263756974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Juice-jl/LogicCircuits.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://juice-jl.github.io/LogicCircuits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width: 100%;"></a> <a href="https://juice-jl.github.io/LogicCircuits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides basic functionality for doing logical reasoning using logical circuits. It has the stand-alone functionality illustrated below, and it serves as the logical foundations for other <a href="https://github.com/Juice-jl">Juice packages</a> (Julia Circuit Empanada).</p>
<h2 dir="auto"><a id="user-content-quick-tutorial-" class="anchor" aria-hidden="true" href="#quick-tutorial-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Tutorial <a href="https://nbviewer.jupyter.org/github/Juice-jl/LogicCircuits.jl/blob/gh-pages/dev/generated/usage.ipynb" rel="nofollow"><img src="https://raw.githubusercontent.com/jupyter/design/master/logos/Badges/nbviewer_badge.svg" alt="Open Notebook" style="max-width: 100%;"></a></h2>
<p dir="auto">Assuming that the LogicCircuits Julia package has been installed with <code>julia -e 'using Pkg; Pkg.add("LogicCircuits")'</code>, we can start using it as follows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LogicCircuits"><pre><span class="pl-k">using</span> LogicCircuits</pre></div>
<h3 dir="auto"><a id="user-content-reasoning-with-manually-constructed-circuits" class="anchor" aria-hidden="true" href="#reasoning-with-manually-constructed-circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reasoning with manually constructed circuits</h3>
<p dir="auto">We begin by creating three positive literals (logical variables) and manually constructing a simple circuit using logical connectives &amp; (and), | (or), and - (not).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sun, rain, rainbow = pos_literals(LogicCircuit, 3)
circuit = (rainbow &amp; sun &amp; rain) | (-rainbow); # rainbow implies sun and rain"><pre>sun, rain, rainbow <span class="pl-k">=</span> <span class="pl-c1">pos_literals</span>(LogicCircuit, <span class="pl-c1">3</span>)
circuit <span class="pl-k">=</span> (rainbow <span class="pl-k">&amp;</span> sun <span class="pl-k">&amp;</span> rain) <span class="pl-k">|</span> (<span class="pl-k">-</span>rainbow); <span class="pl-c"><span class="pl-c">#</span> rainbow implies sun and rain</span></pre></div>
<p dir="auto">Just like any logical circuit or Boolean function, we can evaluate ours on various inputs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="circuit(false, true, true) # sun is false, rain is true, rainbow is true"><pre><span class="pl-c1">circuit</span>(<span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> sun is false, rain is true, rainbow is true</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="false"><pre class="notranslate"><code>false
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="circuit(true, true, true) # sun is true, rain is true, rainbow is true"><pre><span class="pl-c1">circuit</span>(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> sun is true, rain is true, rainbow is true</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">The purpose of this package, however, is to enable more interesting inference scenarios. This is possible by ensuring that the circuit has certain <a href="https://juice-jl.github.io/LogicCircuits.jl/dev/manual/properties/" rel="nofollow">properties</a>, such as <em>decomposability</em>, <em>determinism</em>, and more.
Our current circuit happens to already be decomposable and deterministic by construction:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="isdecomposable(circuit) &amp;&amp; isdeterministic(circuit)"><pre><span class="pl-c1">isdecomposable</span>(circuit) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">isdeterministic</span>(circuit)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">The decomposability property ensures that we can ask whether the circuit is satisfiable (the classical SAT problem) and, surprisingly, still get our answer efficiently. Of course, from the input <code>true, true, true</code> tried above, we know the answer to be true.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="issatisfiable(circuit) # does there exist an input that outputs true?"><pre><span class="pl-c1">issatisfiable</span>(circuit) <span class="pl-c"><span class="pl-c">#</span> does there exist an input that outputs true?</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">In addition, the determinism property allows us to efficiently decide whether the circuit is a tautology (always true), or compute its model count, that is, the number of satisfying assignments.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="istautology(circuit) # do all inputs give the circuit output true?"><pre><span class="pl-c1">istautology</span>(circuit) <span class="pl-c"><span class="pl-c">#</span> do all inputs give the circuit output true?</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="false"><pre class="notranslate"><code>false
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model_count(circuit) # how many possible inputs give the output true?"><pre><span class="pl-c1">model_count</span>(circuit) <span class="pl-c"><span class="pl-c">#</span> how many possible inputs give the output true?</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="5"><pre class="notranslate"><code>5
</code></pre></div>
<h3 dir="auto"><a id="user-content-reasoning-with-compiled-circuits" class="anchor" aria-hidden="true" href="#reasoning-with-compiled-circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reasoning with compiled circuits</h3>
<p dir="auto">As logical sentences become more complicated, it becomes infeasible to manually write down circuits that have the requisite properties that guarantee tractable inference.</p>
<p dir="auto">A process called <em>compilation</em> can solve this problem. Concretely, <code>LogicCircuits</code> supports compilation into a particular type of circuit called SDD. We construct an SDD manager with four additional variables, and then ask to compile our running example circuit into an SDD:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="manager = SddMgr(7, :balanced)
circuit = compile(manager, circuit);"><pre>manager <span class="pl-k">=</span> <span class="pl-c1">SddMgr</span>(<span class="pl-c1">7</span>, <span class="pl-c1">:balanced</span>)
circuit <span class="pl-k">=</span> <span class="pl-c1">compile</span>(manager, circuit);</pre></div>
<p dir="auto">Now we are able to incorporate many more logical sentences into the same circuit.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sun, rain, rainbow, cloud, snow, los_angeles, belgium = pos_literals(Sdd, manager, 7)
circuit &amp;= (-los_angeles | -belgium) # cannot be in LA and Belgium at the same time
circuit &amp;= (los_angeles ⇒ sun) ∧ (belgium ⇒ cloud) # unicode logical syntax
circuit &amp;= (¬(rain ∨ snow) ⇐ ¬cloud); # no rain or snow without clouds"><pre>sun, rain, rainbow, cloud, snow, los_angeles, belgium <span class="pl-k">=</span> <span class="pl-c1">pos_literals</span>(Sdd, manager, <span class="pl-c1">7</span>)
circuit <span class="pl-k">&amp;=</span> (<span class="pl-k">-</span>los_angeles <span class="pl-k">|</span> <span class="pl-k">-</span>belgium) <span class="pl-c"><span class="pl-c">#</span> cannot be in LA and Belgium at the same time</span>
circuit <span class="pl-k">&amp;=</span> (los_angeles ⇒ sun) ∧ (belgium ⇒ cloud) <span class="pl-c"><span class="pl-c">#</span> unicode logical syntax</span>
circuit <span class="pl-k">&amp;=</span> (¬(rain ∨ snow) ⇐ ¬cloud); <span class="pl-c"><span class="pl-c">#</span> no rain or snow without clouds</span></pre></div>
<p dir="auto">Incorporating these constraints has increased the size of our circuit.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(circuit; simplify=true)"><pre><span class="pl-c1">plot</span>(circuit; simplify<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d6386d98cb2154cefca4f02de128ece755ecb0c06bfbb7bebde14cc4e8bc9d86/68747470733a2f2f6a756963652d6a6c2e6769746875622e696f2f4c6f67696343697263756974732e6a6c2f6465762f67656e6572617465642f6578616d706c652d636972637569742e737667"><img src="https://camo.githubusercontent.com/d6386d98cb2154cefca4f02de128ece755ecb0c06bfbb7bebde14cc4e8bc9d86/68747470733a2f2f6a756963652d6a6c2e6769746875622e696f2f4c6f67696343697263756974732e6a6c2f6465762f67656e6572617465642f6578616d706c652d636972637569742e737667" alt="Example Logic Circuit" data-canonical-src="https://juice-jl.github.io/LogicCircuits.jl/dev/generated/example-circuit.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Crucially, the circuit is still decomposable and deterministic.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="isdecomposable(circuit) &amp;&amp; isdeterministic(circuit)"><pre><span class="pl-c1">isdecomposable</span>(circuit) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">isdeterministic</span>(circuit)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">This means that we can still decide satisfiability, count models, and solve various inference tasks efficiently. For example, we can compute the fraction of inputs that gives the output true:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sat_prob(circuit)"><pre><span class="pl-c1">sat_prob</span>(circuit)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="29//128"><pre class="notranslate"><code>29//128
</code></pre></div>
<p dir="auto">Moreover, compiled SDD circuits allow for efficiently checking whether one circuit logically entails another circuit, and whether two circuits are logically equivalent.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="entails(circuit, (rainbow ⇒ cloud))"><pre><span class="pl-c1">entails</span>(circuit, (rainbow ⇒ cloud))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="entails(circuit, (rainbow ⇒ belgium))"><pre><span class="pl-c1">entails</span>(circuit, (rainbow ⇒ belgium))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="false"><pre class="notranslate"><code>false
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="equivalent((rainbow ⇒ belgium), (¬belgium ⇒ ¬rainbow))"><pre><span class="pl-c1">equivalent</span>((rainbow ⇒ belgium), (¬belgium ⇒ ¬rainbow))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">Logical constraints are often written in conjunctive normal form (CNF). These can be loaded from file and compiled into circuits, using an SDD manager whose decomposition structure is specified by a <em>vtree</em> file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="manager = SddMgr(zoo_vtree(&quot;iscas89/s208.1.scan.min.vtree&quot;))
circuit = compile(manager, zoo_cnf(&quot;iscas89/s208.1.scan.cnf&quot;)) # CNF has 285 clauses
&quot;This CNF has $(model_count(circuit)) satisfying assignments. Its circuit has $(num_nodes(circuit)) nodes and $(num_edges(circuit)) edges.&quot;"><pre>manager <span class="pl-k">=</span> <span class="pl-c1">SddMgr</span>(<span class="pl-c1">zoo_vtree</span>(<span class="pl-s"><span class="pl-pds">"</span>iscas89/s208.1.scan.min.vtree<span class="pl-pds">"</span></span>))
circuit <span class="pl-k">=</span> <span class="pl-c1">compile</span>(manager, <span class="pl-c1">zoo_cnf</span>(<span class="pl-s"><span class="pl-pds">"</span>iscas89/s208.1.scan.cnf<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> CNF has 285 clauses</span>
<span class="pl-s"><span class="pl-pds">"</span>This CNF has <span class="pl-v">$(<span class="pl-c1">model_count</span>(circuit))</span> satisfying assignments. Its circuit has <span class="pl-v">$(<span class="pl-c1">num_nodes</span>(circuit))</span> nodes and <span class="pl-v">$(<span class="pl-c1">num_edges</span>(circuit))</span> edges.<span class="pl-pds">"</span></span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&quot;This CNF has 262144 satisfying assignments. Its circuit has 3115 nodes and 5826 edges.&quot;"><pre class="notranslate"><code>"This CNF has 262144 satisfying assignments. Its circuit has 3115 nodes and 5826 edges."
</code></pre></div>
<h3 dir="auto"><a id="user-content-advanced-functionality" class="anchor" aria-hidden="true" href="#advanced-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced functionality</h3>
<p dir="auto"><code>LogicCircuits</code> further provides</p>
<ul dir="auto">
<li>CPU (SIMD) and GPU (CUDA) kernels to efficiently compute satisfiability, model counts, etc., for large numbers of inputs, parallelizing over both circuit nodes and data inputs.</li>
<li>Algorithms that transform circuits in non-trivial ways (split, clone, smooth, condition, etc.), verify and enforce structural properties.</li>
<li>Functionality to load and save circuits in various file formats</li>
</ul>
<p dir="auto">Please see <a href="https://juice-jl.github.io/LogicCircuits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width: 100%;"></a> or <a href="https://juice-jl.github.io/LogicCircuits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> for further details.</p>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto">If you are interested in modifying the package please see the <a href="https://juice-jl.github.io/LogicCircuits.jl/dev/development/" rel="nofollow">development readme</a>.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">To acknowledge this package, please cite:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@inproceedings{DangAAAI21,
    title   = {Juice: A Julia Package for Logic and Probabilistic Circuits},
    author = {Dang, Meihua and Khosravi, Pasha and Liang, Yitao and Vergari, Antonio and Van den Broeck, Guy},
    booktitle = {Proceedings of the 35th AAAI Conference on Artificial Intelligence (Demo Track)},
    year    = {2021}
}"><pre class="notranslate"><code>@inproceedings{DangAAAI21,
    title   = {Juice: A Julia Package for Logic and Probabilistic Circuits},
    author = {Dang, Meihua and Khosravi, Pasha and Liang, Yitao and Vergari, Antonio and Van den Broeck, Guy},
    booktitle = {Proceedings of the 35th AAAI Conference on Artificial Intelligence (Demo Track)},
    year    = {2021}
}
</code></pre></div>
</article></div>