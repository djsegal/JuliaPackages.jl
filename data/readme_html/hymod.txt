<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hymodjl" class="anchor" aria-hidden="true" href="#hymodjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hymod.jl</h1>
<p dir="auto">Hymod model implementation in Julia</p>
<p dir="auto">Simple package with functionality to calibrate/simulate river discharge with the Hymod model.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The Hymod package is available through the Julia package system and can be installed using the following commands:.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Hymod&quot;)"><pre class="notranslate"><code>julia&gt; using Pkg
julia&gt; Pkg.add("Hymod")
</code></pre></div>
<h2 dir="auto"><a id="user-content-example-use" class="anchor" aria-hidden="true" href="#example-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example use</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP, CSV, DataFrames, Hymod

# define url to test data
testDataUrl = &quot;https://raw.githubusercontent.com/JuliaHydro/Hymod.jl/master/test/data/test_forcings.csv&quot;
# get response
response = HTTP.get(testDataUrl)

# read response as a DataFrame
df = CSV.File(response.body) |&gt; DataFrame

# create a column in the data frame for potential evapotranspiration
df[!,:pet] = hargreaves(df,tmincol=:tmin,tmaxcol=:tmax,dtcol=:date)

# get a random set of parameters
pars = randomparams()

# run a simulation
q = simulate(df,precipcol=:precip, petcol=:pet; pars...)"><pre><span class="pl-k">using</span> HTTP, CSV, DataFrames, Hymod

<span class="pl-c"><span class="pl-c">#</span> define url to test data</span>
testDataUrl <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://raw.githubusercontent.com/JuliaHydro/Hymod.jl/master/test/data/test_forcings.csv<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> get response</span>
response <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">get</span>(testDataUrl)

<span class="pl-c"><span class="pl-c">#</span> read response as a DataFrame</span>
df <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(response<span class="pl-k">.</span>body) <span class="pl-k">|&gt;</span> DataFrame

<span class="pl-c"><span class="pl-c">#</span> create a column in the data frame for potential evapotranspiration</span>
df[<span class="pl-k">!</span>,<span class="pl-c1">:pet</span>] <span class="pl-k">=</span> <span class="pl-c1">hargreaves</span>(df,tmincol<span class="pl-k">=</span><span class="pl-c1">:tmin</span>,tmaxcol<span class="pl-k">=</span><span class="pl-c1">:tmax</span>,dtcol<span class="pl-k">=</span><span class="pl-c1">:date</span>)

<span class="pl-c"><span class="pl-c">#</span> get a random set of parameters</span>
pars <span class="pl-k">=</span> <span class="pl-c1">randomparams</span>()

<span class="pl-c"><span class="pl-c">#</span> run a simulation</span>
q <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(df,precipcol<span class="pl-k">=</span><span class="pl-c1">:precip</span>, petcol<span class="pl-k">=</span><span class="pl-c1">:pet</span>; pars<span class="pl-k">...</span>)</pre></div>
<h3 dir="auto"><a id="user-content-calibrating-a-model" class="anchor" aria-hidden="true" href="#calibrating-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Calibrating a model</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates

# define dates to calibrate
calstart = Date(1986,1,1)
calend = Date(2001,12,31)

# filter dataframe between start and end calibration times
caldf = filter(row -&gt; row[:date] &gt;= calstart &amp;&amp; row[:date] &lt;= calend, df)

# get a dictionary of parameter ranges
paramspace = Dict(
    :cmax =&gt; Dict(:lower =&gt; 1.0, :upper =&gt; 100),
    :bexp =&gt; Dict(:lower =&gt; 0.0, :upper =&gt; 2.0),
    :alpha =&gt; Dict(:lower =&gt; 0.2, :upper =&gt; 0.99),
    :ks =&gt; Dict(:lower =&gt; 0.01, :upper =&gt; 0.5),
    :kq =&gt; Dict(:lower =&gt; 0.5, :upper =&gt; 1.2)
)

# set number of iterations to run calibration
niterations = 5000

# run calibration
calq, calpars, calloss = calibrate(caldf,paramspace,niterations)

# get the remainder of dataframe to test calibrated parameters
testdf = filter(row -&gt; row[:date] &gt; calend, df)
# run simulation with calibrated parameters
testdf[!,:q] = simulate(testdf,precipcol=:precip, petcol=:pet; calpars...)
"><pre><span class="pl-k">using</span> Dates

<span class="pl-c"><span class="pl-c">#</span> define dates to calibrate</span>
calstart <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">1986</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
calend <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">12</span>,<span class="pl-c1">31</span>)

<span class="pl-c"><span class="pl-c">#</span> filter dataframe between start and end calibration times</span>
caldf <span class="pl-k">=</span> <span class="pl-c1">filter</span>(row <span class="pl-k">-&gt;</span> row[<span class="pl-c1">:date</span>] <span class="pl-k">&gt;=</span> calstart <span class="pl-k">&amp;&amp;</span> row[<span class="pl-c1">:date</span>] <span class="pl-k">&lt;=</span> calend, df)

<span class="pl-c"><span class="pl-c">#</span> get a dictionary of parameter ranges</span>
paramspace <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:cmax</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:lower</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>, <span class="pl-c1">:upper</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>),
    <span class="pl-c1">:bexp</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:lower</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">:upper</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>),
    <span class="pl-c1">:alpha</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:lower</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.2</span>, <span class="pl-c1">:upper</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.99</span>),
    <span class="pl-c1">:ks</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:lower</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.01</span>, <span class="pl-c1">:upper</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>),
    <span class="pl-c1">:kq</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:lower</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>, <span class="pl-c1">:upper</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.2</span>)
)

<span class="pl-c"><span class="pl-c">#</span> set number of iterations to run calibration</span>
niterations <span class="pl-k">=</span> <span class="pl-c1">5000</span>

<span class="pl-c"><span class="pl-c">#</span> run calibration</span>
calq, calpars, calloss <span class="pl-k">=</span> <span class="pl-c1">calibrate</span>(caldf,paramspace,niterations)

<span class="pl-c"><span class="pl-c">#</span> get the remainder of dataframe to test calibrated parameters</span>
testdf <span class="pl-k">=</span> <span class="pl-c1">filter</span>(row <span class="pl-k">-&gt;</span> row[<span class="pl-c1">:date</span>] <span class="pl-k">&gt;</span> calend, df)
<span class="pl-c"><span class="pl-c">#</span> run simulation with calibrated parameters</span>
testdf[<span class="pl-k">!</span>,<span class="pl-c1">:q</span>] <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(testdf,precipcol<span class="pl-k">=</span><span class="pl-c1">:precip</span>, petcol<span class="pl-k">=</span><span class="pl-c1">:pet</span>; calpars<span class="pl-k">...</span>)
</pre></div>
<p dir="auto">When you plot the simulated results compared to observed values, you should get a plot similar to one below.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/example.png"><img src="docs/src/assets/example.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-interactive-examples" class="anchor" aria-hidden="true" href="#interactive-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interactive Examples</h2>
<p dir="auto">A Docker image is provided for users that want to run a contained installation of the Hymod model interactively in the browser using <a href="https://github.com/fonsp/Pluto.jl">Pluto notebooks</a>. To start the Pluto server with Hymod, run the following command in your terminal:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ docker run --rm -v julia -e 'import Pluto; Pluto.run()' -p 1234:1234 kmarkert/julia-hymod:latest"><pre class="notranslate"><code>$ docker run --rm -v julia -e 'import Pluto; Pluto.run()' -p 1234:1234 kmarkert/julia-hymod:latest
</code></pre></div>
<p dir="auto">Next, paste the following URL into the "Open from file" prompt: <a href="https://github.com/KMarkert/Hymod.jl/blob/master/examples/hymod_interactive_parameters.jl">https://github.com/KMarkert/Hymod.jl/blob/master/examples/hymod_interactive_parameters.jl</a></p>
</article></div>