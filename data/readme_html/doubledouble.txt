<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-doubledoublejl" class="anchor" aria-hidden="true" href="#doubledoublejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DoubleDouble.jl</h1>
<p><strong>Note: This package is no longer maintained. I suggest using <a href="https://github.com/JuliaMath/DoubleFloats.jl">DoubleFloats.jl</a> instead.</strong></p>
<p><code>DoubleDouble.jl</code> is a Julia package for performing extended-precision arithmetic using pairs of floating-point numbers. This is commonly known as "double-double" arithmetic, as the most common format is a pair of C-doubles (<code>Float64</code> in Julia), although <code>DoubleDouble.jl</code> will actually work for any floating-point type. Its aim is to provide accurate results without the overhead of <code>BigFloat</code> types.</p>
<p>The core routines are based on the ideas and algorithms of <a href="http://link.springer.com/article/10.1007%2FBF01397083" title="T.J. Dekker (1971) 'A floating-point technique for extending the available precision', Numerische Mathematik, Volume 18, Issue 3, pp 224-242" rel="nofollow">Dekker (1971)</a>.</p>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interface</h2>
<p>The main type is <code>Double</code>, with two floating-point fields: <code>hi</code>, storing the leading bits, and <code>lo</code> storing the remainder. <code>hi</code> is stored to full precision and rounded to nearest; hence, for any <code>Double</code> <code>x</code>, we have <code>abs(x.lo) &lt;= 0.5 * eps(x.hi)</code>. Although these types can be created directly, the usual interface is the <code>Double</code> function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DoubleDouble

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Double</span>(pi)
<span class="pl-c1">Double</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">3.141592653589793</span>,<span class="pl-c1">1.2246467991473532e-16</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eps</span>(x<span class="pl-k">.</span>hi)
<span class="pl-c1">4.440892098500626e-16</span></pre></div>
<p>The other type defined is <code>Single</code>, which is simply a wrapper for a
floating-point type, but whose results will be promoted to <code>Double</code>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<h3><a id="user-content-exact-products-and-remainders" class="anchor" aria-hidden="true" href="#exact-products-and-remainders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exact products and remainders</h3>
<p>By exploiting this property, we can compute exact products of floating point numbers.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u, v <span class="pl-k">=</span> <span class="pl-c1">64</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>(), <span class="pl-c1">64</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>()
(<span class="pl-c1">15.59263373822506</span>,<span class="pl-c1">39.07676672446341</span>)

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">Single</span>(u) <span class="pl-k">*</span> <span class="pl-c1">Single</span>(v)
<span class="pl-c1">Double</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">609.3097112086186</span>, <span class="pl-k">-</span><span class="pl-c1">5.3107663829696295e-14</span>)</pre></div>
<p>Note that the product of two <code>Single</code>s is a <code>Double</code>: the <code>hi</code> element of this
double is equal to the usual rounded product, and the <code>lo</code> element contains the exact
difference between the exact value and the rounded.</p>
<p>This can be used to get an accurate remainder</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> r <span class="pl-k">=</span> <span class="pl-c1">rem</span>(w, <span class="pl-c1">1.0</span>)
<span class="pl-c1">Double</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.309711208618584</span>, <span class="pl-c1">1.6507898617445858e-17</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(r)
<span class="pl-c1">0.309711208618584</span></pre></div>
<p>This is much more accurate than taking ordinary products, and gives the same answer as using <code>BigFloat</code>s:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rem</span>(u<span class="pl-k">*</span>v, <span class="pl-c1">1.0</span>)
<span class="pl-c1">0.3097112086186371</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">rem</span>(<span class="pl-c1">big</span>(u) <span class="pl-k">*</span> <span class="pl-c1">big</span>(v), <span class="pl-c1">1.0</span>))
<span class="pl-c1">0.309711208618584</span></pre></div>
<p>However, since the <code>DoubleDouble</code> version is carried out using ordinary floating-point operations, it is of the order of 1000x faster than the <code>BigFloat</code> version.</p>
<h3><a id="user-content-correct-rounding-with-non-exact-floats" class="anchor" aria-hidden="true" href="#correct-rounding-with-non-exact-floats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Correct rounding with non-exact floats</h3>
<p>If a number cannot be exactly represented by a floating-point number, it may be rounded incorrectly when used later, e.g.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> pi <span class="pl-k">*</span> <span class="pl-c1">0.1</span>
<span class="pl-c1">0.3141592653589793</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">big</span>(pi) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>)
<span class="pl-c1">0.31415926535897937</span></pre></div>
<p>We can also do this computation using <code>Double</code>s (note that the promotion rules mean that only one needs to be specified):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">Double</span>(pi) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>)
<span class="pl-c1">0.31415926535897937</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(pi <span class="pl-k">*</span> <span class="pl-c1">Single</span>(<span class="pl-c1">0.1</span>))
<span class="pl-c1">0.31415926535897937</span></pre></div>
<h3><a id="user-content-emulated-fma" class="anchor" aria-hidden="true" href="#emulated-fma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Emulated FMA</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation" rel="nofollow">fused multiply-add (FMA)</a> operation is an intrinsic floating-point
operation that allows the evaluation of <code>a * b + c</code>, with rounding occurring only
at the last step. This operation is unavailable on 32-bit x86 architecture, and available
only on the most recent x86_64 chips, but can be emulated via double-double arithmetic:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">0.1</span> <span class="pl-k">+</span> <span class="pl-c1">0.1</span>
<span class="pl-c1">0.11000000000000001</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">big</span>(<span class="pl-c1">0.1</span>) <span class="pl-k">*</span> <span class="pl-c1">0.1</span> <span class="pl-k">+</span> <span class="pl-c1">0.1</span>)
<span class="pl-c1">0.11</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">fma</span>(a<span class="pl-k">::</span><span class="pl-c1">Float64</span>,b<span class="pl-k">::</span><span class="pl-c1">Float64</span>,c<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">Single</span>(a) <span class="pl-k">*</span> <span class="pl-c1">Single</span>(b) <span class="pl-k">+</span> <span class="pl-c1">Single</span>(c))
fma (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fma</span>(<span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>)
<span class="pl-c1">0.11</span></pre></div>
</article></div>