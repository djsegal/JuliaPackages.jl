<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-networklayoutjl" class="anchor" aria-hidden="true" href="#networklayoutjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NetworkLayout.jl</h1>
<p dir="auto">Layout algorithms for graphs and trees in pure Julia.</p>
<p dir="auto"><a href="https://juliagraphs.org/NetworkLayout.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliagraphs.org/NetworkLayout.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGraphs/NetworkLayout.jl/actions"><img src="https://github.com/JuliaGraphs/NetworkLayout.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGraphs/NetworkLayout.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/335bea330769ded2e19b9a3985f61a91dd4aef0e51350717ab5a2deee84c2087/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614772617068732f4e6574776f726b4c61796f75742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaGraphs/NetworkLayout.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add NetworkLayout"><pre>pkg<span class="pl-k">&gt;</span> add NetworkLayout</pre></div>
<h2 dir="auto"><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithms</h2>
<p dir="auto">The available algorithms and their parameters can be found in the
<a href="https://juliagraphs.org/NetworkLayout.jl/stable" rel="nofollow">docs</a>.</p>
<p dir="auto">All of the algorithms represent mappings <code>adjacency matrix â†¦ vector of positions</code> where the positions are represented by the <code>Point</code> datatype from
<a href="https://github.com/JuliaGeometry/GeometryBasics.jl">`GeometryBasics.jl</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NetworkLayout
using Graphs

adj_matrix = adjacency_matrix(wheel_graph(10))

pos = spring(adj_matrix; iterations=20)
pos = algorithm(adj_matrix)"><pre><span class="pl-k">using</span> NetworkLayout
<span class="pl-k">using</span> Graphs

adj_matrix <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(<span class="pl-c1">wheel_graph</span>(<span class="pl-c1">10</span>))

pos <span class="pl-k">=</span> <span class="pl-c1">spring</span>(adj_matrix; iterations<span class="pl-k">=</span><span class="pl-c1">20</span>)
pos <span class="pl-k">=</span> <span class="pl-c1">algorithm</span>(adj_matrix)</pre></div>
<p dir="auto">There is also a "delayed" functor version of each algorithm:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="layout = Spring(; iterations=20)
pos = layout(adj_matrix)"><pre>layout <span class="pl-k">=</span> <span class="pl-c1">Spring</span>(; iterations<span class="pl-k">=</span><span class="pl-c1">20</span>)
pos <span class="pl-k">=</span> <span class="pl-c1">layout</span>(adj_matrix)</pre></div>
<p dir="auto">Instead of passing a adjacency matrix on can also pass <code>Graphs.jl</code> graphs directly.</p>
</article></div>