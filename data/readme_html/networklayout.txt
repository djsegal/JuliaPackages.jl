<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-networklayoutjl" class="anchor" aria-hidden="true" href="#networklayoutjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NetworkLayout.jl</h1>
<p>Layout algorithms for graphs and trees in pure Julia.</p>
<p><a href="https://coveralls.io/github/JuliaGraphs/NetworkLayout.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/58fda2d5f981e36d595c8b90453db3242698817f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614772617068732f4e6574776f726b4c61796f75742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphs/NetworkLayout.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Linux, OSX : <a href="https://travis-ci.org/JuliaGraphs/NetworkLayout.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fc4f281c26d7db0b0a641366db09a9992b193a11/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f4e6574776f726b4c61796f75742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/NetworkLayout.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Windows : <a href="https://ci.appveyor.com/project/abhijithanilkumar/networklayout-jl-b6gcd/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/da1dd9a61f41ec803a7820a06fc5794ef106ff39/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f333238706830637433743866633931752f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/328ph0ct3t8fc91u/branch/master?svg=true" style="max-width:100%;"></a></p>
<h2><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Algorithms</h2>
<h3><a id="user-content-scalable-force-directed-placement" class="anchor" aria-hidden="true" href="#scalable-force-directed-placement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scalable Force Directed Placement</h3>
<p>Spring-Electric Force Directed Placement algorithm as explained in <a href="http://yifanhu.net/PUB/graph_draw_small.pdf" rel="nofollow">Efficient and High Quality Force-Directed Graph Drawing</a> by Yifan Hu.</p>
<p>Module Name : <code>SFDP</code></p>
<h4><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_matrix,dimension;startpostitions,tol,C,K,iterations)</pre></div>
<h5><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_matrix</code> - sparse/full adjacency matrix that represents the graph</li>
<li><code>dimension</code> - dimension in which the layouting code has to be generated. <code>dimension</code> can be an integer specifying
the dimension or a <code>Point</code> type, eg. <code>Point3f0</code> which denotes 3D.</li>
<li><code>startpositions</code> - co-ordinates of the layout to start with. By default, a random layout is used (kwarg)</li>
<li><code>tol</code> - permitted distance between current and calculated co-ordinate. Lower the tolerance, more the number of iterations (kwarg)</li>
<li><code>C, K</code> - used to scale the layout (kwarg)</li>
<li><code>iterations</code> - Number of iterations we apply the forces (kwarg)</li>
</ul>
<h5><a id="user-content-returns" class="anchor" aria-hidden="true" href="#returns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h5><a id="user-content-iterator" class="anchor" aria-hidden="true" href="#iterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>iterator</h5>
<p>A user can move between iterations using a <code>Layout</code> object.</p>
<h4><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>SFDP
g <span class="pl-k">=</span> <span class="pl-c1">WheelGraph</span>(<span class="pl-c1">10</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a,Point2f0,tol<span class="pl-k">=</span><span class="pl-c1">0.1</span>,C<span class="pl-k">=</span><span class="pl-c1">1</span>,K<span class="pl-k">=</span><span class="pl-c1">1</span>,iterations<span class="pl-k">=</span><span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> generate 2D layout</span></pre></div>
<p>Using Iterator :</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">WheelGraph</span>(<span class="pl-c1">10</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g)
tol <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
C <span class="pl-k">=</span> <span class="pl-c1">0.2</span>
K <span class="pl-k">=</span> <span class="pl-c1">1</span>
iterations <span class="pl-k">=</span> <span class="pl-c1">100</span>
network <span class="pl-k">=</span> <span class="pl-c1">Layout</span>(a,locs,tol,C,K,iterations)
state <span class="pl-k">=</span> <span class="pl-c1">start</span>(network)
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">done</span>(network,state)
  network, state <span class="pl-k">=</span> <span class="pl-c1">next</span>(network,state)
<span class="pl-k">end</span>
<span class="pl-k">return</span> network<span class="pl-k">.</span>positions</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638280/a9671850-6106-11e6-912f-be94477f5ecd.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638280/a9671850-6106-11e6-912f-be94477f5ecd.png" alt="sfdp" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.WheelGraph(10)</code> object layout generated by SFDP Algorithm.</p>
<h3><a id="user-content-buchheim-tree-drawing" class="anchor" aria-hidden="true" href="#buchheim-tree-drawing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Buchheim Tree Drawing</h3>
<p>Buchheim Tree Drawing as explained in <a href="http://dirk.jivas.de/papers/buchheim02improving.pdf" rel="nofollow">Improving Walker's Algorithm to Run in Linear Time</a> by Christoph Buchheim, Michael Junger and Sebastian Leipert.</p>
<p>Module Name : <code>Buchheim</code></p>
<h4><a id="user-content-usage-1" class="anchor" aria-hidden="true" href="#usage-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_list; nodesize)</pre></div>
<h5><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_list</code> - adjacency list that represents the tree</li>
<li><code>nodesize</code> - sizes of nodes (used to position the nodes) (kwarg)</li>
</ul>
<h5><a id="user-content-returns-1" class="anchor" aria-hidden="true" href="#returns-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<ul>
<li><code>positions</code> - co-ordinates of the layout</li>
</ul>
<h4><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Buchheim
adj_list <span class="pl-k">=</span> Vector{Int}[   <span class="pl-c"><span class="pl-c">#</span> adjacency list</span>
        [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>],
        [<span class="pl-c1">5</span>,<span class="pl-c1">6</span>],
        [<span class="pl-c1">7</span>],
        [],
        [],
        [],
        []
      ]
 nodesize <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2.3</span>,<span class="pl-c1">1.2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1.4</span>,<span class="pl-c1">0.8</span>]
 locs <span class="pl-k">=</span> <span class="pl-c1">layout</span>(adj_list,nodesize<span class="pl-k">=</span>nodesize) <span class="pl-c"><span class="pl-c">#</span> generating the layout for the tree</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638844/afd280a4-610a-11e6-8fea-5c99808bd740.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638844/afd280a4-610a-11e6-8fea-5c99808bd740.png" alt="tree" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.BinaryTree(4)</code> object layout by Buchheim Algorithm.</p>
<h3><a id="user-content-springrepulsion-model" class="anchor" aria-hidden="true" href="#springrepulsion-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spring/Repulsion Model</h3>
<p>Spring/Repulsion model of Fruchterman and Reingold (1991). Original code taken from <a href="https://github.com/IainNZ/GraphLayout.jl">GraphLayout.jl</a></p>
<p>Module Name : <code>Spring</code></p>
<h4><a id="user-content-usage-2" class="anchor" aria-hidden="true" href="#usage-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_matrix,dimension;startpositions,C,iterations,initialtemp)</pre></div>
<h5><a id="user-content-arguments-2" class="anchor" aria-hidden="true" href="#arguments-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_matrix</code> - sparse/full adjacency matrix that represents the graph</li>
<li><code>dimension</code> - dimension in which the layouting code has to be generated. <code>dimension</code> can be an integer specifying
the dimension or a <code>Point</code> type, eg. <code>Point3f0</code> which denotes 3D.</li>
<li><code>startpositions</code> - co-ordinates of the layout to start with. By default, a random layout is used (kwarg)</li>
<li><code>iterations</code> - Number of iterations we apply the forces (kwarg)</li>
<li><code>C</code> - Constant to fiddle with density of resulting layout (kwarg)</li>
<li><code>initialtemp</code> - Initial "temperature", controls movement per iteration (kwarg)</li>
</ul>
<h5><a id="user-content-returns-2" class="anchor" aria-hidden="true" href="#returns-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h5><a id="user-content-iterator-1" class="anchor" aria-hidden="true" href="#iterator-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>iterator</h5>
<p>A user can move between iterations using a <code>Layout</code> object.</p>
<h4><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Spring
g <span class="pl-k">=</span> <span class="pl-c1">WheelGraph</span>(<span class="pl-c1">30</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a,Point2f0,C<span class="pl-k">=</span><span class="pl-c1">2.0</span>,iterations<span class="pl-k">=</span><span class="pl-c1">100</span>,K<span class="pl-k">=</span><span class="pl-c1">2.0</span>) <span class="pl-c"><span class="pl-c">#</span> generate 2D layout</span></pre></div>
<p>Using Iterator :</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">WheelGraph</span>(<span class="pl-c1">30</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g)
iterations <span class="pl-k">=</span> <span class="pl-c1">200</span>
C <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
initialtemp <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
network <span class="pl-k">=</span> <span class="pl-c1">Layout</span>(a,locs,C,iterations,initialtemp)
state <span class="pl-k">=</span> <span class="pl-c1">start</span>(network)
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">done</span>(network,state)
 network, state <span class="pl-k">=</span> <span class="pl-c1">next</span>(network,state)
<span class="pl-k">end</span>
<span class="pl-k">return</span> network<span class="pl-k">.</span>positions</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638354/1c20cc56-6107-11e6-82ed-8873431d8d33.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638354/1c20cc56-6107-11e6-82ed-8873431d8d33.png" alt="spring" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.WheelGraph(10)</code> object layout generated by Spring Algorithm.</p>
<h3><a id="user-content-stress-majorization" class="anchor" aria-hidden="true" href="#stress-majorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stress Majorization</h3>
<p>Based on the algorithm explained in "Graph Drawing by Stress Majorization" by Emden R Gansner, Yehuda Koren and Stephen North. Original code taken from <a href="https://github.com/IainNZ/GraphLayout.jl">GraphLayout.jl</a></p>
<p>Module Name : <code>Stress</code></p>
<h4><a id="user-content-usage-3" class="anchor" aria-hidden="true" href="#usage-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(δ,dimension;startpositions,weights,iterations,abstols,reltols,abstolx)</pre></div>
<h5><a id="user-content-arguments-3" class="anchor" aria-hidden="true" href="#arguments-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>δ</code> - Matrix of pairwise distances (Adjacency Matrix can be used)</li>
<li><code>dimension</code> - dimension in which the layouting code has to be generated. <code>dimension</code> can be an integer specifying
the dimension or a <code>Point</code> type, eg. <code>Point3f0</code> which denotes 3D.</li>
<li><code>weights</code> - Matrix of weights (kwarg)</li>
<li><code>startpositions</code> - co-ordinates of the layout to start with. By default, a random layout is used (kwarg)</li>
<li><code>iterations</code> - Number of iterations we apply the forces (kwarg)</li>
<li><code>abstols</code> - Absolute tolerance for convergence of stress (kwarg)</li>
<li><code>reltols</code> - Relative tolerance for convergence of stress (kwarg)</li>
<li><code>abstolx</code> - Absolute tolerance for convergence of layout (kwarg)</li>
</ul>
<h5><a id="user-content-returns-3" class="anchor" aria-hidden="true" href="#returns-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h5><a id="user-content-iterator-2" class="anchor" aria-hidden="true" href="#iterator-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>iterator</h5>
<p>A user can move between iterations using a <code>Layout</code> object.</p>
<h4><a id="user-content-example-3" class="anchor" aria-hidden="true" href="#example-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Stress
g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">10</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> generate 2D layout</span></pre></div>
<p>Using Iterator :</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">10</span>)
δ <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g)
startpositions<span class="pl-k">=</span><span class="pl-c1">rand</span>(Point{<span class="pl-c1">3</span>, Float64}, <span class="pl-c1">size</span>(δ,<span class="pl-c1">1</span>))
iter <span class="pl-k">=</span> <span class="pl-c1">Layout</span>(δ, Point{<span class="pl-c1">3</span>,Float64}; startpositions<span class="pl-k">=</span>startpositions)
state <span class="pl-k">=</span> <span class="pl-c1">start</span>(iter)
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">done</span>(iter, state)
    iter, state <span class="pl-k">=</span> <span class="pl-c1">next</span>(iter, state)
<span class="pl-k">end</span>
iter<span class="pl-k">.</span>positions</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638554/5e65e26c-6108-11e6-9522-30e6fa044d26.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638554/5e65e26c-6108-11e6-9522-30e6fa044d26.png" alt="stress" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.CompleteGraph(10)</code> object layout using Stress Algorithm.</p>
<h3><a id="user-content-spectral-layout-algorithm" class="anchor" aria-hidden="true" href="#spectral-layout-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spectral Layout Algorithm</h3>
<p>Uses the technique of Spectral Graph Drawing, which is an under-appreciated method of graph layouts; easier, simpler, and faster than the more common spring-based methods. Original code taken from <a href="https://github.com/JuliaPlots/PlotRecipes.jl">PlotRecipes.jl</a></p>
<p>Module Name : <code>Spectral</code></p>
<h4><a id="user-content-usage-4" class="anchor" aria-hidden="true" href="#usage-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_matrix; node_weights, kw<span class="pl-k">...</span>)</pre></div>
<h5><a id="user-content-arguments-4" class="anchor" aria-hidden="true" href="#arguments-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_matrix</code> - Adjacency Matrix in dense/sparse format</li>
<li><code>node_weights</code> - weights for different nodes (kwarg)</li>
</ul>
<h5><a id="user-content-returns-4" class="anchor" aria-hidden="true" href="#returns-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h4><a id="user-content-example-4" class="anchor" aria-hidden="true" href="#example-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Spectral
g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">10</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a) <span class="pl-c"><span class="pl-c">#</span> generate 3D layout</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638718/a0b451ca-6109-11e6-9a66-fd22332b8541.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638718/a0b451ca-6109-11e6-9a66-fd22332b8541.png" alt="spectral" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.CompleteGraph(10)</code> object layout by Spectral Algorithm.</p>
<h3><a id="user-content-circular-layout-algorithm" class="anchor" aria-hidden="true" href="#circular-layout-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Circular Layout Algorithm</h3>
<p>Position nodes on a circle. Original code taken from <a href="https://github.com/afternone/GraphPlot.jl">GraphPlot.jl</a></p>
<p>Module Name : <code>Circular</code></p>
<h4><a id="user-content-usage-5" class="anchor" aria-hidden="true" href="#usage-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_matrix)</pre></div>
<h5><a id="user-content-arguments-5" class="anchor" aria-hidden="true" href="#arguments-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_matrix</code> - Adjacency Matrix in dense/sparse format</li>
</ul>
<h5><a id="user-content-returns-5" class="anchor" aria-hidden="true" href="#returns-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h4><a id="user-content-example-5" class="anchor" aria-hidden="true" href="#example-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Circular
g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">30</span>)
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a) <span class="pl-c"><span class="pl-c">#</span> generate 2D layout</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638609/d8eb4428-6108-11e6-934b-f326f07cf044.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638609/d8eb4428-6108-11e6-934b-f326f07cf044.png" alt="circular" style="max-width:100%;"></a></p>
<p>The image shows a <code>LightGraphs.CompleteGraph(10)</code> object layout using Circular Algorithm.</p>
<h3><a id="user-content-shell-layout-algorithm" class="anchor" aria-hidden="true" href="#shell-layout-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shell Layout Algorithm</h3>
<p>Position nodes in concentric circles. Original code taken from <a href="https://github.com/afternone/GraphPlot.jl">GraphPlot.jl</a></p>
<p>Module Name : <code>Shell</code></p>
<h4><a id="user-content-usage-6" class="anchor" aria-hidden="true" href="#usage-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">layout</span>(adjacency_matrix;nlist)</pre></div>
<h5><a id="user-content-arguments-6" class="anchor" aria-hidden="true" href="#arguments-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>arguments</h5>
<ul>
<li><code>adjacency_matrix</code> - Adjacency Matrix in dense/sparse format</li>
<li><code>nlist</code> - Shell-wise separation of nodes (kwarg)</li>
</ul>
<h5><a id="user-content-returns-6" class="anchor" aria-hidden="true" href="#returns-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>returns</h5>
<p><code>positions</code> - co-ordinates of nodes in the layout</p>
<h4><a id="user-content-example-6" class="anchor" aria-hidden="true" href="#example-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> NetworkLayout<span class="pl-k">:</span>Shell
g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">30</span>)
n <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Vector{Int},<span class="pl-c1">2</span>)
n[<span class="pl-c1">1</span>] <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>]
n[<span class="pl-c1">2</span>] <span class="pl-k">=</span> [<span class="pl-c1">16</span><span class="pl-k">:</span><span class="pl-c1">30</span>]
a <span class="pl-k">=</span> <span class="pl-c1">adjacency_matrix</span>(g) <span class="pl-c"><span class="pl-c">#</span> generates a sparse adjacency matrix</span>
network <span class="pl-k">=</span> <span class="pl-c1">layout</span>(a,nlist<span class="pl-k">=</span>n) <span class="pl-c"><span class="pl-c">#</span> generate 2D layout</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17638171/efac921e-6105-11e6-9e48-33471bf3b27e.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17638171/efac921e-6105-11e6-9e48-33471bf3b27e.png" alt="shell" style="max-width:100%;"></a></p>
<p>This figure shows a <code>LightGraphs.CompleteGraph(30)</code> object in 2 shells.</p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmarks</h2>
<p>The iterative algorithms have been benchmarked using 3 different graphs: <code>LightGraphs.WheelGraph(10)</code>, <code>LightGraphs.WheelGraph(100)</code> and <code>jagmesh1</code>. The number of iterations is fixed on 100. The following graph is obtained which shows SFDP to be the fastest in a general scenario, but Stress Algorithm is faster when the number of edges per graph is comparatively less, as in <code>jagmesh1</code>.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/8404278/17642254/fd6f1718-615b-11e6-9a30-8c1a362aead7.png"><img src="https://cloud.githubusercontent.com/assets/8404278/17642254/fd6f1718-615b-11e6-9a30-8c1a362aead7.png" alt="bench" style="max-width:100%;"></a></p>
<p><em>NOTE</em> : All screenshots are generated using <a href="https://github.com/abhijithanilkumar/NetworkViz.jl">NetworkViz.jl</a>, <a href="https://github.com/rohitvarkey/ThreeJS.jl">ThreeJS.jl</a> and <a href="https://github.com/shashi/Escher.jlhttps://github.com/rohitvarkey/ThreeJS.jl">Escher.jl</a>. The plot used is generated using <a href="https://github.com/dcjones/Gadfly.jl">Gadfly.jl</a></p>
</article></div>