<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cubic-splines" class="anchor" aria-hidden="true" href="#cubic-splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cubic Splines</h1>
<p>A simple package for interpolating 1D data with Akima cubic splines, based on "A New Method of Interpolation and Smooth Curve Fitting Based on Local Parameters", Akima, 1970.</p>
<p>Works for both uniformly and non-uniformly spaced data points.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyPlot
using CubicSplines

xdata = range(0,stop=4pi,length=20) .+ 0.5rand(20)
ydata = sin.(xdata)
plot(xdata, ydata, &quot;o&quot;)

spline = CubicSpline(xdata, ydata)

xs = range(xdata[1], stop=xdata[end], length=1000)
ys = spline[xs]
plot(xs, ys)
xlabel(&quot;x&quot;)
ylabel(&quot;y&quot;)
"><pre><span class="pl-k">using</span> PyPlot
<span class="pl-k">using</span> CubicSplines

xdata <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,stop<span class="pl-k">=</span><span class="pl-c1">4</span>pi,length<span class="pl-k">=</span><span class="pl-c1">20</span>) <span class="pl-k">.+</span> <span class="pl-c1">0.5</span><span class="pl-c1">rand</span>(<span class="pl-c1">20</span>)
ydata <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(xdata)
<span class="pl-c1">plot</span>(xdata, ydata, <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>)

spline <span class="pl-k">=</span> <span class="pl-c1">CubicSpline</span>(xdata, ydata)

xs <span class="pl-k">=</span> <span class="pl-c1">range</span>(xdata[<span class="pl-c1">1</span>], stop<span class="pl-k">=</span>xdata[<span class="pl-c1">end</span>], length<span class="pl-k">=</span><span class="pl-c1">1000</span>)
ys <span class="pl-k">=</span> spline[xs]
<span class="pl-c1">plot</span>(xs, ys)
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
<span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example_sinusoid.png"><img src="img/example_sinusoid.png" alt="Example sinusoid" style="max-width:100%;"></a></p>
</article></div>