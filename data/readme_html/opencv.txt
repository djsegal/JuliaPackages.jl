<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>##OpenCV.jl</p>
<p>The OpenCV (C++) interface for Julia.</p>
<br>
OpenCV.jl aims to provide an interface for [OpenCV](<a href="http://opencv.org" rel="nofollow">http://opencv.org</a>) computer vision applications (C++) directly in [Julia] (<a href="http://julia.readthedocs.org/en/latest/manual/" rel="nofollow">http://julia.readthedocs.org/en/latest/manual/</a>).  It relies primarily on [Cxx.jl](<a href="https://github.com/Keno/Cxx.jl">https://github.com/Keno/Cxx.jl</a>), the Julia C++ foreign function interface (FFI). OpenCV.jl comes bundled with the [Qt framework](<a href="http://qt-project.org/" rel="nofollow">http://qt-project.org/</a>) - though not essential, it supports many convenient GUI functions. The package also contains thin wrappers for common C++ classes (e.g., std::vector, std::string) to make the C++/Julia interface smoother.
<p>The OpenCV API is described <a href="http://docs.opencv.org/2.4/modules/refman.html" rel="nofollow">here</a>. OpenCV.jl is organized along the following modules:</p>
<ul>
<li><strong>core:</strong> <span> <span> Basic array structures (e.g., Mat), common functions (e.g, convertTo)</span></span></li>
<li><strong>imgproc:</strong> <span> Image processing (e.g.,image filtering, transformations, color space conversion)</span></li>
<li><strong>videoio:</strong> <span>Video capturing and video codecs.</span></li>
<li><strong>highgui:</strong> <span> GUI capabilities</span></li>
<li><strong>video:</strong> <span>Video analysis (e.g., motion estimation, background subtraction, and object tracking)</span></li>
<li>calib3d: <span>Camera calibration, object pose estimation, stereo correspondence, 3D reconstruction.</span></li>
<li>features2d: <span>Salient feature detectors, descriptors, and descriptor matchers.</span></li>
<li>objdetect: <span> detection of objects (e.g., faces)</span></li>
<li>gpu: <span> GPU-accelerated algorithms</span></li>
</ul>
<p>Currently, OpenCV.jl has julia wrappers for the <code>core</code>, <code>imgproc</code>, <code>videoio</code>, <code>highgui</code> and <code>video</code> modules. Work is ongoing to wrap the rest of the modules including advanced object detection and tracking algorithms. (Most OpenCV C++ functions are already supported in OpenCV.jl by using <code>@cxx</code> calls directly to C++, with some caveats).</p>
<p>OpenCV.jl has OpenCL support for GPU image processing.  This has been made easier recently by a smooth and transparent interface (T-API). GPU-supported code can display improvements in processing speed up to 30 fold. This is invaluable for supporting real-time applications in Julia. See section below on how to implement GPU-enabled code in OpenCV.jl.</p>
<p>The OpenCV API is extensively documented - rather than repeating the entire documentation here, the primary focus is on implementation of image processing and computer vision algorithms to suport Julia applications.</p>
<p>##Installation</p>
<p>Install <code>julia 0.6.0</code> and <code>Cxx.jl</code> according to the following <a href="https://github.com/Keno/Cxx.jl/blob/master/README.md">instructions</a>. For Mac OSX, you can use the pre-compiled shared libraries (.dylib) and headers (.hpp) included in OpenCV.jl. However, you can also compile OpenCV from source with the instructions below.</p>
<p>Note that successfully building <code>julia 0.6.0</code> may require upstream updates/fixes. Currently, on MacOS Sierra 10.12.3, I had to do the following:</p>
<ul>
<li>Created a <code>Make.user</code> file before building with the following content:</li>
</ul>
<pre><code>override LLVM_VER=3.9.0
override BUILD_LLVM_CLANG=1
override USE_LLVM_SHLIB=1
# Optional, but recommended
override LLVM_ASSERTIONS=1
</code></pre>
<ul>
<li>Merged commit <code>5373cdf821cf876332d7f8f1a3a2625598a33879</code> [5373cdf] into the master branch:
<a href="https://github.com/JuliaLang/julia/pull/18920/commits">https://github.com/JuliaLang/julia/pull/18920/commits</a>
<a href="https://github.com/Keno/Cxx.jl/issues/300">https://github.com/Keno/Cxx.jl/issues/300</a></li>
</ul>
<pre><code>$ git fetch origin pull/18920/head:origin
# merge into local master branch
</code></pre>
<h4><a id="user-content-osx" class="anchor" aria-hidden="true" href="#osx"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>OSX</h4>
<p>To compile OpenCV 3.2.0 (beta) on a 64-bit OSX system</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> Clone OpenCV from GitHub master branch  #v0.3-beta</span>
$ git clone https://github.com/Itseez/opencv.git opencv
$ git remote -v

<span class="pl-c"><span class="pl-c">#</span> Create a build directory</span>
$ mkdir build
$ <span class="pl-c1">cd</span> build

<span class="pl-c"><span class="pl-c">#</span> Install OpenCV &gt;3.0 (master) *without CUDA*</span>
BASIC INSTALLATION
$ cmake <span class="pl-s"><span class="pl-pds">"</span>Unix Makefile<span class="pl-pds">"</span></span> -D CMAKE_PREFIX_PATH=<span class="pl-s"><span class="pl-pds">"</span>/Users/Max/Qt/5.7/clang_64<span class="pl-pds">"</span></span> -D WITH_OPENGL=ON -D CMAKE_OSX_ARCHITECTURES=x86_64 -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D WITH_CUDA=OFF -D CMAKE_CXX_FLAGS=<span class="pl-s"><span class="pl-pds">"</span>-std=c++11 -stdlib=libc++<span class="pl-pds">"</span></span> -D CMAKE_EXE_LINKER_FLAGS=<span class="pl-s"><span class="pl-pds">"</span>-std=c++11 -stdlib=libc++<span class="pl-pds">"</span></span> -D TBB_INCLUDE_DIR=<span class="pl-s"><span class="pl-pds">"</span>/usr/local/Cellar/tbb/4.3-20141023/include/tbb<span class="pl-pds">"</span></span> -D TBB_LIB_DIR=<span class="pl-s"><span class="pl-pds">"</span>/usr/local/Cellar/tbb/4.3-20141023/lib<span class="pl-pds">"</span></span> -D WITH_TBB=ON -D WITH_EIGEN=ON -D WITH_QT=OFF -D WITH_OPENEXR=OFF ..

$ make -j4
$ sudo make install

<span class="pl-c"><span class="pl-c">#</span> Confirm installation of OpenCV shared libraries</span>
$ pkg-config --libs opencv

<span class="pl-c"><span class="pl-c">#</span> Confirm directory of OpenCV header files (.hpp)</span>
$ <span class="pl-c1">cd</span> /usr/local/include
$ ls opencv2
</pre></div>
<h4><a id="user-content-linux-ubuntu" class="anchor" aria-hidden="true" href="#linux-ubuntu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linux (Ubuntu)</h4>
<ul>
<li>See links <a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html" rel="nofollow">1</a> and <a href="https://github.com/jayrambhia/Install-OpenCV">2</a> on how to install OpenCV <code>3.2.0</code>.</li>
<li>Comment out the #include statements for <code>flann</code> in <code>opencv2/opencv.hpp</code>.</li>
</ul>
<p>####Download and run OpenCV.jl</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>git://github.com/maxruby/OpenCV.jl.git<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> OpenCV</pre></div>
<p>##Basic interface
OpenCV contains hundreds of algorithms and functions. Most frequently used functions for image processing are already accessible in the current version of OpenCV.jl. For simplicity, here I focus on using  functions wrapped in OpenCV.jl.</p>
<h4><a id="user-content--basic-structures" class="anchor" aria-hidden="true" href="#-basic-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span> Basic structures</span></h4>
<p><strong>Points (Int, Float)</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cvPoint</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>)           <span class="pl-c"><span class="pl-c">#</span> x, y</span>
<span class="pl-c1">cvPoint2f</span>(<span class="pl-c1">20.15</span>, <span class="pl-c1">30.55</span>)
<span class="pl-c1">cvPoint2d</span>(<span class="pl-c1">40.564</span>, <span class="pl-c1">12.444</span>)</pre></div>
<p><strong>Size and Scalar vectors (Int, Float)</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cvSize</span>(<span class="pl-c1">300</span>, <span class="pl-c1">300</span>)          <span class="pl-c"><span class="pl-c">#</span> e.g., image width, height</span>
<span class="pl-c1">cvSize2f</span>(<span class="pl-c1">100.5</span>, <span class="pl-c1">110.6</span>)
<span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)         <span class="pl-c"><span class="pl-c">#</span> e.g., [B, G, R] color vector</span></pre></div>
<p><strong>Ranges</strong></p>
<div class="highlight highlight-source-julia"><pre>range <span class="pl-k">=</span> <span class="pl-c1">cvRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">100</span>)   <span class="pl-c"><span class="pl-c">#</span> e.g., row 1 to 100</span></pre></div>
<p><strong>Rectangle and rotated rectangle</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cvRect</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">300</span>,<span class="pl-c1">300</span>)      <span class="pl-c"><span class="pl-c">#</span> x, y, width, height</span>
<span class="pl-c"><span class="pl-c">#</span> 300x300 rect, centered at (10.5, 10.5) rotated by 0.5 rad</span>
<span class="pl-c1">cvRotatedRect</span>(<span class="pl-c1">cvPoint2f</span>(<span class="pl-c1">10.5</span>, <span class="pl-c1">10.5</span>), <span class="pl-c1">cvSize2f</span>(<span class="pl-c1">300</span>,<span class="pl-c1">300</span>), <span class="pl-c1">0.5</span>)</pre></div>
<h4><a id="user-content-creating-copying-and-converting-images" class="anchor" aria-hidden="true" href="#creating-copying-and-converting-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Creating, copying and converting images</span></h4>
<p><strong>Mat array/image constructors: rows (height), columns (width)</strong></p>
<div class="highlight highlight-source-julia"><pre>img0 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()                             <span class="pl-c"><span class="pl-c">#</span> empty</span>
img1 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">600</span>, <span class="pl-c1">600</span>, CV_8UC1)            <span class="pl-c"><span class="pl-c">#</span> 600x600 Uint8 gray</span>

imgSize <span class="pl-k">=</span> <span class="pl-c1">cvSize</span>(<span class="pl-c1">500</span>, <span class="pl-c1">250</span>)    
img2 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(imgSize, CV_8UC1)             <span class="pl-c"><span class="pl-c">#</span> 500x250 Uint8 gray</span>

imgColor <span class="pl-k">=</span> <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)   
img3 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">600</span>, <span class="pl-c1">600</span>, CV_8UC3, imgColor)  <span class="pl-c"><span class="pl-c">#</span> 600x600 Uint8 RGB (blue)</span></pre></div>
<p><strong>Create a region of interest (ROI)</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> roi <span class="pl-k">=</span> <span class="pl-c1">cvRect</span>(<span class="pl-c1">25</span>, <span class="pl-c1">25</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>);     <span class="pl-c"><span class="pl-c">#</span> create a ROI</span>
img4 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(img3, roi)</pre></div>
<p><strong>Initialize arrays with zeros or ones</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">zerosM</span>(<span class="pl-c1">300</span>,<span class="pl-c1">300</span>, CV_8UC3)      <span class="pl-c"><span class="pl-c">#</span> RGB filled with zeros</span>
<span class="pl-c1">zerosM</span>(imgSize, CV_8UC1)      <span class="pl-c"><span class="pl-c">#</span> Gray filled with zeros  </span>
<span class="pl-c1">ones</span>(<span class="pl-c1">300</span>,<span class="pl-c1">300</span>, CV_8UC3)        <span class="pl-c"><span class="pl-c">#</span> RGB filled with ones    </span>
<span class="pl-k">const</span> sz <span class="pl-k">=</span> <span class="pl-c1">pointer</span>([<span class="pl-c1">cint</span>(<span class="pl-c1">5</span>)]); <span class="pl-c"><span class="pl-c">#</span> pointer to size of each dimension</span>
<span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, sz, CV_8UC3)          <span class="pl-c"><span class="pl-c">#</span> 2 x sz        </span></pre></div>
<p><strong>Create an identity matrix</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">eye</span>(<span class="pl-c1">300</span>,<span class="pl-c1">300</span>, CV_8UC3)         <span class="pl-c"><span class="pl-c">#</span> 300x300 Uint8 (RGB)</span></pre></div>
<p><strong>Clone, copy, convert, basic resizing</strong></p>
<div class="highlight highlight-source-julia"><pre>img2 <span class="pl-k">=</span> <span class="pl-c1">clone</span>(img1);
<span class="pl-c1">copy</span>(img1, img2);
alpha<span class="pl-k">=</span><span class="pl-c1">1</span>; beta<span class="pl-k">=</span><span class="pl-c1">0</span>;  <span class="pl-c"><span class="pl-c">#</span> scale and delta factors</span>
<span class="pl-c1">convert</span>(img1, img2, CV_8UC3, alpha, beta)
<span class="pl-c1">resizeMat</span>(img1, <span class="pl-c1">100</span>, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>,<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)) <span class="pl-c"><span class="pl-c">#</span> 100 rows, 100 x 100</span></pre></div>
<h4><a id="user-content-operations-on-image-arrays" class="anchor" aria-hidden="true" href="#operations-on-image-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Operations on image arrays</span></h4>
<p><strong>Addition and substraction</strong></p>
<div class="highlight highlight-source-julia"><pre>img1 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">300</span>, <span class="pl-c1">300</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>));
img2 <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">300</span>, <span class="pl-c1">300</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">255</span>));
img3 <span class="pl-k">=</span> <span class="pl-c1">imadd</span>(img1, img2)
img4 <span class="pl-k">=</span> <span class="pl-c1">imsubstract</span>(img1, img2)</pre></div>
<p><strong>Matrix multiplication</strong></p>
<div class="highlight highlight-source-julia"><pre>alpha <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> weight of the matrix</span>
beta <span class="pl-k">=</span> <span class="pl-c1">0</span>;  <span class="pl-c"><span class="pl-c">#</span> weight of delta matrix (optional)</span>
flag <span class="pl-k">=</span> <span class="pl-c1">0</span>;  <span class="pl-c"><span class="pl-c">#</span> GEMM_1_T  (transpose m1, m2 or m3)</span>
m1 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, CV_32F);    <span class="pl-c"><span class="pl-c">#</span>Float32 image</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, CV_32F);
m3 <span class="pl-k">=</span> <span class="pl-c1">zerosM</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, CV_32F);
<span class="pl-c1">gemm</span>(m1, m2, alpha, <span class="pl-c1">Mat</span>(), beta, m3, flag)</pre></div>
<p><strong>Accessing pixels and indexing Mat arrays</strong><br>
Image pixels in Mat containers are arranged in a row-major order.<br>
For a grayscale image, e.g., pixels are addressed by row, col</p>
<p>|col 0| col 1| col 2|col 3| col m|
|:----- |:--:| :--:| :--:| :--:|  :--:|
| row 0 | 0,0|  0,1|  0,2|  0,3|   0,m|
| row 1 | 1,0|  1,1|  1,2|  1,3|   1,m|
| row 2 | 2,0|  2,1|  2,2|  2,3|   2,m|
| row n | n,0|  n,1|  n,2|  n,3|   n,m|</p>
<p>For RGB color images, each column has 3 values (actually BGR in Mat)</p>
<p>|col 0| col 1| col 2| col m |
|:----- |:--:| :--:| :--:| :--:|
| row 0 |<span>0,0,  <span>0,0 <span>0,0|  <span>0,1 <span>0,1 <span>0,1| <span>0,2 <span>0,2 <span>0,2| <span>0,m <span>0,m <span>0,m
| row 1 |  <span>1,0 <span>1,0 <span>1,0|  <span>1,1 <span>1,1 <span>1,1| <span>1,2 <span>1,2 <span>1,2| <span>1,m <span>1,m <span>1,m
| row 2 | <span>2,0 <span>2,0 <span>2,0|  <span>2,1 <span>2,1 <span>2,1| <span>2,2 <span>2,2 <span>2,2|<span>2,m <span>2,m <span>2,m
| row n| <span>n,0 <span>n,0 <span>n,0|  <span>n,1 <span>n,1 <span>n,1| <span>n,2 <span>n,2 <span>n,2| <span>n,m <span>n,m <span>n,m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><strong>Getting and setting selected pixel values</strong> <br>
<strong>Method 1</strong>: Access pixel values using <code>pixget</code> and <code>pixset</code> functions. Here we use the<code>Mat::at</code>class method - slow but safe, intended only for checking and setting small numbers of pixels (not for scanning through the entire image). To illustrate we draw random red pixels on a blue image (i.e., turn them yellow).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Creat a blue image</span>
img <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">300</span>, <span class="pl-c1">300</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>));  
<span class="pl-c"><span class="pl-c">#</span> get value for (row1,col1)</span>
<span class="pl-c1">pixget</span>(img, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)  
<span class="pl-c"><span class="pl-c">#</span> create a C++ std::vector (BGR: Red) from a Julia vector</span>
red <span class="pl-k">=</span> <span class="pl-c1">tostdvec</span>([<span class="pl-c1">float</span>(<span class="pl-c1">0</span>), <span class="pl-c1">float</span>(<span class="pl-c1">0</span>), <span class="pl-c1">255.0</span>])
<span class="pl-c"><span class="pl-c">#</span> turn random pixels yellow</span>
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>
    <span class="pl-c1">pixset</span>(img, <span class="pl-c1">Int</span>(<span class="pl-c1">round</span>(<span class="pl-c1">rand</span>()<span class="pl-k">*</span><span class="pl-c1">rows</span>(img))), <span class="pl-c1">Int</span>(<span class="pl-c1">round</span>(<span class="pl-c1">rand</span>()<span class="pl-k">*</span><span class="pl-c1">cols</span>(img))), red)  
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Display (see description for these functions below)</span>
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Random art<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> close by pressing ESC</span></pre></div>
<p><strong>Method 2</strong>:  Efficient pixel scanning and manipulation using pointers in C++. Functions <code>setgray</code> and <code>setcolor</code> can be used to scan an entire image and replace pixel values. For example, scanning &amp; exchanging the BGR values for all pixels in a 1000x1000 image took approx. 16 ms. Such functions should be modified and optimized for each operation/algorithm.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Creat a green image</span>
img <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">0</span>));
color <span class="pl-k">=</span> <span class="pl-c1">tostdvec</span>([<span class="pl-c1">cint</span>(<span class="pl-c1">255</span>), <span class="pl-c1">cint</span>(<span class="pl-c1">55</span>), <span class="pl-c1">cint</span>(<span class="pl-c1">0</span>)]) <span class="pl-c"><span class="pl-c">#</span> fuchsia</span>
<span class="pl-c1">setcolor</span>(img, color)  
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>coloring the fast way<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-opening-and-saving-images" class="anchor" aria-hidden="true" href="#opening-and-saving-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Opening and saving images</span></h4>
<p><strong>Read and write with full path/name</strong></p>
<div class="highlight highlight-source-julia"><pre>filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>);
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename)
<span class="pl-c1">imwrite</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">homedir</span>(), <span class="pl-s"><span class="pl-pds">"</span>lena_copy.png<span class="pl-pds">"</span></span>), img)</pre></div>
<p><strong>Alternatively, open and save files with <code>Qt dialog</code> interface</strong></p>
<div class="highlight highlight-source-julia"><pre>img <span class="pl-k">=</span> <span class="pl-c1">imread</span>()
<span class="pl-c1">imwrite</span>(img)</pre></div>
<p><strong>Open image with<code>Images.jl</code> and convert to <code>OpenCV</code> Mat</strong><br>
Here we convert a binary image loaded with Images to a Mat image array</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Color, FixedPointNumbers
<span class="pl-k">import</span> Images, ImageView
<span class="pl-k">using</span> OpenCV

filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.jpeg<span class="pl-pds">"</span></span>)
image <span class="pl-k">=</span> Images<span class="pl-k">.</span><span class="pl-c1">imread</span>(filename)  <span class="pl-c"><span class="pl-c">#</span> load with Images.jl</span>
converted <span class="pl-k">=</span> <span class="pl-c1">convertToMat</span>(image);
ImageView<span class="pl-k">.</span><span class="pl-c1">view</span>(image)
<span class="pl-c1">imdisplay</span>(converted, <span class="pl-s"><span class="pl-pds">"</span>converted to OpenCV Mat<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-access-image-properties" class="anchor" aria-hidden="true" href="#access-image-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Access image properties</span></h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">printMat</span>(img)           <span class="pl-c"><span class="pl-c">#</span> crude printout of the entire Mat (uchar only)</span>
<span class="pl-c1">total</span>(img)              <span class="pl-c"><span class="pl-c">#</span> number of array elements</span>
<span class="pl-c1">dims</span>(img)               <span class="pl-c"><span class="pl-c">#</span> dimensions</span>
<span class="pl-c1">size</span>(img)               <span class="pl-c"><span class="pl-c">#</span> cvSize(columns, rows)</span>
<span class="pl-c1">rows</span>(img)               <span class="pl-c"><span class="pl-c">#</span> rows</span>
<span class="pl-c1">cols</span>(img)               <span class="pl-c"><span class="pl-c">#</span> columns</span>
<span class="pl-c1">isContinuous</span>(img)       <span class="pl-c"><span class="pl-c">#</span> is stored continuously (no gaps)?</span>
<span class="pl-c1">elemSize</span>(img)           <span class="pl-c"><span class="pl-c">#</span> element size in bytes (size_t)</span>
<span class="pl-c1">cvtypeval</span>(img)          <span class="pl-c"><span class="pl-c">#</span> Mat type identifier (number)</span>
<span class="pl-c1">cvtypelabel</span>(img)        <span class="pl-c"><span class="pl-c">#</span> Mat type label (e.g., CV_8UC1)</span>
<span class="pl-c1">depth</span>(img)              <span class="pl-c"><span class="pl-c">#</span> element depth</span>
<span class="pl-c1">channels</span>(img)           <span class="pl-c"><span class="pl-c">#</span> number of matrix channels</span>
<span class="pl-c1">empty</span>(img)              <span class="pl-c"><span class="pl-c">#</span> is array is empty? (true/false)</span>
<span class="pl-c1">ptr</span>(img, <span class="pl-c1">10</span>)            <span class="pl-c"><span class="pl-c">#</span> uchar* or typed pointer for matrix row</span></pre></div>
<h4><a id="user-content-basic-image-display-guis" class="anchor" aria-hidden="true" href="#basic-image-display-guis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Basic image display (GUIs)</span></h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> original highgui functions</span>
<span class="pl-c1">namedWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>, WINDOW_AUTOSIZE)
<span class="pl-c1">imshow</span>(<span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>, img)
<span class="pl-c1">moveWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>, <span class="pl-c1">200</span>, <span class="pl-c1">200</span>)
<span class="pl-c1">resizeWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>, <span class="pl-c1">250</span>, <span class="pl-c1">250</span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> waits until ESC key(27) press to close "Lena"</span>

<span class="pl-c"><span class="pl-c">#</span> custom display functions</span>
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> optional: window resizing, key press, time</span>
<span class="pl-c1">im2tile</span>(imArray, <span class="pl-s"><span class="pl-pds">"</span>Tiled images<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> =&gt; closeWindows</span></pre></div>
<h4><a id="user-content-image-processing-" class="anchor" aria-hidden="true" href="#image-processing-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Image processing <span></span></span></h4>
<p><strong>Resize images</strong></p>
<div class="highlight highlight-source-julia"><pre>dst <span class="pl-k">=</span> <span class="pl-c1">clone</span>(img)
<span class="pl-c1">resize</span>(img, dst, <span class="pl-c1">cvSize</span>(<span class="pl-c1">250</span>,<span class="pl-c1">250</span>), <span class="pl-c1">float</span>(<span class="pl-c1">0</span>), <span class="pl-c1">float</span>(<span class="pl-c1">0</span>), INTER_LINEAR)
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Lena<span class="pl-pds">"</span></span>)
<span class="pl-c1">imdisplay</span>(dst, <span class="pl-s"><span class="pl-pds">"</span>Resized Lena<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> waits for ESC to close all windows</span>

interpolation options<span class="pl-k">:</span>
<span class="pl-c"><span class="pl-c">#</span> INTER_NEAREST - a nearest-neighbor interpolation</span>
<span class="pl-c"><span class="pl-c">#</span> INTER_LINEAR - a bilinear interpolation (used by default)</span>
<span class="pl-c"><span class="pl-c">#</span> INTER_AREA - resampling using pixel area relation</span>
<span class="pl-c"><span class="pl-c">#</span> INTER_CUBIC - a bicubic interpolation over 4x4 pixel neighborhood</span>
<span class="pl-c"><span class="pl-c">#</span> NTER_LANCZOS4 - a Lanczos interpolation over 8x8 pixel neighborhood</span></pre></div>
<p><strong>Select ROI and copy to another image</strong><br></p>
<div class="highlight highlight-source-julia"><pre>filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>)
src <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename)
dst <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">cint</span>(<span class="pl-c1">rows</span>(src)) <span class="pl-k">+</span> <span class="pl-c1">100</span>, <span class="pl-c1">cint</span>(<span class="pl-c1">cols</span>(src)) <span class="pl-k">+</span> <span class="pl-c1">100</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">255</span>))
roi <span class="pl-k">=</span> <span class="pl-c1">cvRect</span>(<span class="pl-c1">Int64</span>(<span class="pl-c1">10</span>),<span class="pl-c1">Int64</span>(<span class="pl-c1">10</span>), <span class="pl-c1">Int64</span>(<span class="pl-c1">cols</span>(src)), <span class="pl-c1">Int64</span>(<span class="pl-c1">rows</span>(src)))
final <span class="pl-k">=</span> <span class="pl-c1">imreplace</span>(src, dst, roi)  
<span class="pl-c1">namedWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>original<span class="pl-pds">"</span></span>, <span class="pl-c1">256</span>)
<span class="pl-c1">namedWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>replace<span class="pl-pds">"</span></span>, <span class="pl-c1">256</span>)
<span class="pl-c1">imshow</span>(<span class="pl-s"><span class="pl-pds">"</span>original<span class="pl-pds">"</span></span>, src)
<span class="pl-c1">imshow</span>(<span class="pl-s"><span class="pl-pds">"</span>replace<span class="pl-pds">"</span></span>, final)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Change color format</strong></p>
<div class="highlight highlight-source-julia"><pre>dst <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
<span class="pl-c1">cvtColor</span>(img, dst, COLOR_BGR2GRAY)</pre></div>
<p><strong>Blur with a normalized box filter</strong></p>
<div class="highlight highlight-source-julia"><pre>blurred <span class="pl-k">=</span> <span class="pl-c1">clone</span>(img)
<span class="pl-c1">blur</span>(img, blurred, <span class="pl-c1">cvSize</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">imdisplay</span>(blurred, <span class="pl-s"><span class="pl-pds">"</span>Box filter<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Blur with a Gaussian filter, 5x5 kernel</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">gaussianBlur</span>(img, dst, <span class="pl-c1">cvSize</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">im2tile</span>([img, dst], <span class="pl-s"><span class="pl-pds">"</span>Gaussian 5x5<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Binary thresholding</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cvtColor</span>(img, dst, COLOR_BGR2GRAY)
src <span class="pl-k">=</span> <span class="pl-c1">clone</span>(dst)
<span class="pl-c1">threshold</span>(src, dst, <span class="pl-c1">120</span>, <span class="pl-c1">255</span>, THRESH_BINARY)  <span class="pl-c"><span class="pl-c">#</span> thresh = 0, max = 255</span>
<span class="pl-c"><span class="pl-c">#</span> other methods can be invoked with e.g., #THRESH_OTSU, THRESH_BINARY_INV flags</span>
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Original<span class="pl-pds">"</span></span>)
<span class="pl-c1">imdisplay</span>(dst, <span class="pl-s"><span class="pl-pds">"</span>Thresholded<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Convolution</strong></p>
<div class="highlight highlight-source-julia"><pre>kernel <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,CV_32F)
normkernel <span class="pl-k">=</span> <span class="pl-c1">normalizeKernel</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">7</span>,<span class="pl-c1">7</span>,CV_32F), <span class="pl-c1">getKernelSum</span>(kernel))
<span class="pl-c1">filter2D</span>(img, dst, <span class="pl-k">-</span><span class="pl-c1">1</span>, normkernel)
<span class="pl-c1">im2tile</span>([img, dst], <span class="pl-s"><span class="pl-pds">"</span>Convolution 7x7<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Laplacian filter</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">laplacian</span>(img, dst, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">5</span>)          <span class="pl-c"><span class="pl-c">#</span> second-derivative aperture = 5</span>
<span class="pl-c1">im2tile</span>([img, dst], <span class="pl-s"><span class="pl-pds">"</span>laplacian<span class="pl-pds">"</span></span>)  
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)  </pre></div>
<p><strong>Sobel operator (edge detection)</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">sobel</span>(img, dst, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)        <span class="pl-c"><span class="pl-c">#</span> dx = 1, dy = 1, kernel = 3x3</span>
<span class="pl-c1">im2tile</span>([img, dst], <span class="pl-s"><span class="pl-pds">"</span>sobel<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Canny edge detection</strong></p>
<div class="highlight highlight-source-julia"><pre>filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename)
edges <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
threshold1 <span class="pl-k">=</span> <span class="pl-c1">125.0</span>; threshold2 <span class="pl-k">=</span> <span class="pl-c1">350.0</span>
apertureSize <span class="pl-k">=</span> <span class="pl-c1">3</span>; L2gradient <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-c1">Canny</span>(img, edges, threshold1, threshold2, apertureSize, L2gradient)
<span class="pl-c1">imdisplay</span>(edges, <span class="pl-s"><span class="pl-pds">"</span>canny<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Image overlay (linear blending)</strong></p>
<div class="highlight highlight-source-julia"><pre>filename2 <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/mandrill.jpg<span class="pl-pds">"</span></span>)
img2 <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename2)
dst <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
alpha <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; beta <span class="pl-k">=</span> <span class="pl-c1">0.2</span>; gamma <span class="pl-k">=</span> <span class="pl-c1">0.6</span>
<span class="pl-c1">addWeighted</span>(img, alpha, img2, beta, gamma, dst)
<span class="pl-c1">imdisplay</span>(dst, <span class="pl-s"><span class="pl-pds">"</span>overlay<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Image sharpening</strong></p>
<div class="highlight highlight-source-julia"><pre>filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename)
dst <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
sharpened <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
<span class="pl-c1">gaussianBlur</span>(img, dst, <span class="pl-c1">cvSize</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>), <span class="pl-c1">0.2</span>)
<span class="pl-c1">addWeighted</span>(img, <span class="pl-c1">1.5</span>, dst, <span class="pl-k">-</span><span class="pl-c1">0.3</span>, <span class="pl-c1">float</span>(<span class="pl-c1">0</span>), sharpened)
<span class="pl-c1">im2tile</span>([img, dst], <span class="pl-s"><span class="pl-pds">"</span>sharpened<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-video-acquistion-streaming-and-writing" class="anchor" aria-hidden="true" href="#video-acquistion-streaming-and-writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Video acquistion, streaming and writing</span></h4>
<p>Basic video stream display from default camera. All GUI classes/functions (e.g., videoCapture) can be easily called from OpenCV.jl to build new custom video acquisition functions.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">videocam</span>()     <span class="pl-c"><span class="pl-c">#</span> press ESC to stop  </span></pre></div>
<p>The following identifiers can be used (depending on backend) to get/set video properties:</p>
<pre><code>append "CAP_PROP_" to id below
POS_MSEC       Current position of the video file (msec or timestamp)  
POS_FRAMES     0-based index of the frame to be decoded/captured next
POS_AVI_RATIO  Relative position of the video file: 0 - start of the film, 1 - end of the film
FRAME_WIDTH    Width of the frames in the video stream
FRAME_HEIGHT   Height of the frames in the video stream
FPS            frame rate
FOURCC         4-character code of codec
FRAME_COUNT    Number of frames in the video file
FORMAT         Format of the Mat objects returned by retrieve()
MODE           Backend-specific value indicating the current capture mode
BRIGHTNESS     Brightness of the image (only for cameras)
CONTRAST       Contrast of the image (only for cameras)
SATURATION     Saturation of the image (only for cameras)
HUE            Hue of the image (only for cameras)
GAIN           Gain of the image (only for cameras)
EXPOSURE       Exposure (only for cameras)
CONVERT_RGB    Boolean flags indicating whether images should be converted to RGB
WHITE_BALANCE  Currently not supported
RECTIFICATION  Rectification flag for stereo cameras (note: only supported by DC1394 v 2.x backend currently)
</code></pre>
<p><strong>To get video properties, use <code>getVideoId</code></strong></p>
<div class="highlight highlight-source-julia"><pre>cam <span class="pl-k">=</span> <span class="pl-c1">videoCapture</span>(CAP_ANY)   <span class="pl-c"><span class="pl-c">#</span> cv::VideoCapture</span>
<span class="pl-c1">getVideoId</span>(cam, CAP_PROP_FOURCC)   <span class="pl-c"><span class="pl-c">#</span> or set to -1 (uncompressed AVI)</span></pre></div>
<p><strong>To set video properties, use <code>setVideoId</code></strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setVideoId</span>(cam, CAP_PROP_FPS, <span class="pl-c1">10.0</span>)</pre></div>
<p><strong>Close the camera input</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">release</span>(cam)</pre></div>
<p><strong>Stream videos from the web (requires http link to source file)</strong></p>
<div class="highlight highlight-source-julia"><pre>vid <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8<span class="pl-pds">"</span></span>
<span class="pl-c1">webstream</span>(vid)</pre></div>
<p><strong>Write the video stream to disk</strong></p>
<div class="highlight highlight-source-julia"><pre>cam <span class="pl-k">=</span> <span class="pl-c1">videoCapture</span>(vid)
filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">homedir</span>(), <span class="pl-s"><span class="pl-pds">"</span>myvid.avi<span class="pl-pds">"</span></span>)
fps <span class="pl-k">=</span> <span class="pl-c1">25.0</span>
nframes <span class="pl-k">=</span> <span class="pl-c1">250</span>            <span class="pl-c"><span class="pl-c">#</span> default -&gt; nframes = 0, to stop press ESC</span>
frameSize<span class="pl-k">=</span><span class="pl-c1">cvSize</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)    <span class="pl-c"><span class="pl-c">#</span> input = output frame size</span>
codec <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>               <span class="pl-c"><span class="pl-c">#</span> fourcc(CV_FOURCC_IYUV)</span>
isColor <span class="pl-k">=</span> <span class="pl-c1">true</span>           <span class="pl-c"><span class="pl-c">#</span> color</span>
device <span class="pl-k">=</span> CAP_ANY         <span class="pl-c"><span class="pl-c">#</span> default device</span>
videoWrite (cam, filename, fps, nframes, frameSize, codec, <span class="pl-c1">true</span>)</pre></div>
<h4><a id="user-content-interactive-image-processing" class="anchor" aria-hidden="true" href="#interactive-image-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Interactive image processing<br></span></h4>
<p><strong>Videoprocessor</strong> is a basic example of a custom C++ class I wrote to support interactive image processing and display with OpenCV In Julia. It may be useful for testing custom C++ image processing algorithms. It accepts single image or video files and video streams. The basic concept is to create a class for each image processing operation in <code>Videoprocessor</code> (e.g., Thresholding).  Currently it supports, brightness, contrast and simple thresholding filters.  You can retrieve the final values for each of the filter operations as shown below. For more details, see <code>src/Videoprocessor.jl</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> single image file</span>
filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>)
processes <span class="pl-k">=</span> <span class="pl-c1">stdvec</span>(<span class="pl-c1">cint</span>(<span class="pl-c1">0</span>),<span class="pl-c1">cint</span>(<span class="pl-c1">0</span>))
<span class="pl-c1">stdpush!</span>(processes, BRIGHTNESS)<span class="pl-c"><span class="pl-c">#</span> or CONTRAST/THRESHOLD</span>
params <span class="pl-k">=</span> <span class="pl-c1">videoprocessor</span>(processes, <span class="pl-s"><span class="pl-pds">"</span>Demo<span class="pl-pds">"</span></span>, filename,<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">30</span>, <span class="pl-c1">30</span>, <span class="pl-c1">120</span>, <span class="pl-c1">255</span>, THRESH_BINARY, <span class="pl-c1">false</span>)
<span class="pl-c1">at</span>(params,<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> BRIGHTNESS</span>

<span class="pl-c"><span class="pl-c">#</span> video stream</span>
processes <span class="pl-k">=</span> <span class="pl-c1">stdvec</span>(<span class="pl-c1">cint</span>(<span class="pl-c1">0</span>),<span class="pl-c1">cint</span>(<span class="pl-c1">0</span>))
<span class="pl-c1">stdpush!</span>(processes, BRIGHTNESS)
<span class="pl-c1">stdpush!</span>(processes, THRESHOLD)
params <span class="pl-k">=</span> <span class="pl-c1">videoprocessor</span>(processes, <span class="pl-s"><span class="pl-pds">"</span>Videoprocessor<span class="pl-pds">"</span></span>)
<span class="pl-c1">at</span>(params,<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> BRIGHTNESS</span>
<span class="pl-c1">at</span>(params,<span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> THRESHOLD</span></pre></div>
<h4><a id="user-content-text-and-drawing-functions" class="anchor" aria-hidden="true" href="#text-and-drawing-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span>Text and drawing functions<br></span></h4>
<p>Put text on image</p>
<div class="highlight highlight-source-julia"><pre>filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCV<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>./test/images/lena.png<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(filename)
<span class="pl-c1">putText</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Hello Lena!<span class="pl-pds">"</span></span>, <span class="pl-c1">cvPoint</span>(<span class="pl-c1">40</span>,<span class="pl-c1">40</span>), FONT_HERSHEY_COMPLEX_SMALL, <span class="pl-c1">1.0</span>, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), <span class="pl-c1">1</span>, LINE_AA, <span class="pl-c1">false</span>)
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Text<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p>Draw geometric shapes (circles, rectangles, etc)</p>
<div class="highlight highlight-source-julia"><pre>center <span class="pl-k">=</span> <span class="pl-c1">cvPoint</span>(<span class="pl-c1">260</span>,<span class="pl-c1">275</span>)
radius <span class="pl-k">=</span> <span class="pl-c1">30</span>
color <span class="pl-k">=</span> <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">255</span>)  <span class="pl-c"><span class="pl-c">#</span>red</span>
thickness<span class="pl-k">=</span><span class="pl-c1">4</span>
lineType<span class="pl-k">=</span>LINE_AA
shift <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">circle</span>(img, center, radius, color, thickness,lineType, shift)
<span class="pl-c1">rectangle</span>(img, <span class="pl-c1">cvPoint</span>(<span class="pl-c1">30</span>,<span class="pl-c1">30</span>), <span class="pl-c1">cvPoint</span>(<span class="pl-c1">150</span>,<span class="pl-c1">150</span>), <span class="pl-c1">cvScalar</span>(<span class="pl-c1">255</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), thickness, lineType, shift)
<span class="pl-c1">imdisplay</span>(img, <span class="pl-s"><span class="pl-pds">"</span>Drawing<span class="pl-pds">"</span></span>)
<span class="pl-c1">closeWindows</span>(<span class="pl-c1">0</span>,<span class="pl-c1">27</span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-advanced-interfaces" class="anchor" aria-hidden="true" href="#advanced-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced interfaces</h2>
<h4><a id="user-content--gpu-processing-with-opencl" class="anchor" aria-hidden="true" href="#-gpu-processing-with-opencl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><span> GPU processing with OpenCL</span></h4>
<p>OpenCV.jl can be accelerated several fold by processing on the GPU with the OpenCL transparent API (T-API). The only requirement is to declare the image/array as <code>cv::UMat</code> (universal Mat) instead of <code>cv::Mat</code>. For example, a simple RGB to gray image conversion can run 10 times faster with GPU compared to CPU (here I used an NVIDIA GTX-Force 330M 512MB, CC 1.2) in OpenCV.jl:</p>
<div class="highlight highlight-source-julia"><pre>Declare the Mat and UMat (<span class="pl-c1">1000</span>x1000 RGB) source and initialize target images
julia<span class="pl-k">&gt;</span> srcMat <span class="pl-k">=</span> <span class="pl-c1">Mat</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">0</span>));
julia<span class="pl-k">&gt;</span> srcUMat <span class="pl-k">=</span> <span class="pl-c1">UMat</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, CV_8UC3, <span class="pl-c1">cvScalar</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">0</span>));
julia<span class="pl-k">&gt;</span> dstMat <span class="pl-k">=</span> <span class="pl-c1">Mat</span>()
julia<span class="pl-k">&gt;</span> dstUMat <span class="pl-k">=</span> <span class="pl-c1">UMat</span>()

CPU
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span>(<span class="pl-c1">cvtColor</span>(srcMat, dstMat, COLOR_BGR2GRAY))
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.00164426</span> seconds (<span class="pl-c1">80</span> bytes allocated)

GPU
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span>(<span class="pl-c1">cvtColor</span>(srcUMat, dstUMat, COLOR_BGR2GRAY))
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.000149589</span> seconds (<span class="pl-c1">80</span> bytes allocated)</pre></div>
<h2><a id="user-content-demos" class="anchor" aria-hidden="true" href="#demos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demos</h2>
<p>The scripts in <code>test/jl/tests.jl</code> illustrate how to use basic OpenCV functions directly in Julia. Demos in <code>test/cxx/demos.jl</code> contain both basic and advanced C++ scripts wrapped with Cxx. You can execute <code>run_tests()</code> to check these examples, including basic image creation, conversion, thresholding, live video, trackbars, histograms, drawing, and object tracking.</p>
<h2><a id="user-content-applications-in-computer-vision" class="anchor" aria-hidden="true" href="#applications-in-computer-vision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Applications in computer vision</h2>
<p>There is a rich collection of advanced algorithms/modules for computer vision implemented in OpenCV that are likely to be added in the future. A number of them are found in <a href="github.com/Itseez/opencv_contrib/tree/master/module">opencv-contrib</a> e.g.,</p>
<ul>
<li>opencv_face: Face detection</li>
<li>opencv_optflow: Optical flow</li>
<li>opencv_reg: Image registration</li>
<li>opencv_text: Scene Text Detection and Recognition</li>
<li>opencv_tracking: Long-term optical tracking API</li>
<li>opencv_xfeatures2d: Extra 2D Features Framework</li>
<li>opencv_ximgproc: Extended Image Processing</li>
<li>opencv_xobjdetect: Integral Channel Features Detector Framework</li>
<li>opencv_xphoto: Color balance/Denoising/Inpainting</li>
</ul>
<h2><a id="user-content-extended-documentation" class="anchor" aria-hidden="true" href="#extended-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extended documentation</h2>
<p>Feel free to send questions, comments or file issues here.  Extending the documentation is planned in the context of more specialized applications.</p>
<h2><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Known issues</h2>
<ul>
<li>Import errors
<ul>
<li>flann.hpp (included in opencv2/opencv.hpp) throws an error in the Julia REPL due to <code>typeid</code> declarations which are not compatible with the <code>rtti</code> flag</li>
</ul>
</li>
</ul>
</article></div>