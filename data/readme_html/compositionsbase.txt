<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-compositionsbasejl-exports---compose-and-opcompose" class="anchor" aria-hidden="true" href="#compositionsbasejl-exports---compose-and-opcompose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CompositionsBase.jl: exports <code>∘</code>, <code>⨟</code>, <code>compose</code>, and <code>opcompose</code></h1>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="f ∘ g
g ⨟ f
compose(f, g)
opcompose(g, f)
"><pre><code>f ∘ g
g ⨟ f
compose(f, g)
opcompose(g, f)
</code></pre></div>
<p>Composition of morphisms.  <code>∘</code> is the operator defined in <code>Base</code>.
CompositionsBase.jl defines the opposite composition operator <code>⨟</code> as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="⨟(fs...) = ∘(reverse(fs)...)
"><pre><code>⨟(fs...) = ∘(reverse(fs)...)
</code></pre></div>
<p>and also the ASCII aliases <code>compose</code> and <code>opcompose</code>.</p>
<p>As <code>⨟</code>, <code>compose</code>, and <code>opcompose</code> are all defined in terms of <code>∘</code>,
single-argument call is the identity function.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using CompositionsBase

julia&gt; tuple ∘ inv === compose(tuple, inv) === inv ⨟ tuple === opcompose(inv, tuple)
true

julia&gt; ∘(tuple) === compose(tuple) === ⨟(tuple) === opcompose(tuple) === tuple
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CompositionsBase

julia<span class="pl-k">&gt;</span> tuple <span class="pl-k">∘</span> inv <span class="pl-k">===</span> <span class="pl-c1">compose</span>(tuple, inv) <span class="pl-k">===</span> inv ⨟ tuple <span class="pl-k">===</span> <span class="pl-c1">opcompose</span>(inv, tuple)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">∘</span>(tuple) <span class="pl-k">===</span> <span class="pl-c1">compose</span>(tuple) <span class="pl-k">===</span> ⨟(tuple) <span class="pl-k">===</span> <span class="pl-c1">opcompose</span>(tuple) <span class="pl-k">===</span> tuple
<span class="pl-c1">true</span></pre></div>
</article></div>