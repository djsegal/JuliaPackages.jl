<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-compositionsbasejl-exports---compose-and-opcompose" class="anchor" aria-hidden="true" href="#compositionsbasejl-exports---compose-and-opcompose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CompositionsBase.jl: exports <code>∘</code>, <code>⨟</code>, <code>compose</code>, and <code>opcompose</code></h1>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="f ∘ g
g ⨟ f
compose(f, g)
opcompose(g, f)"><pre class="notranslate"><code>f ∘ g
g ⨟ f
compose(f, g)
opcompose(g, f)
</code></pre></div>
<p dir="auto">Composition of morphisms.  <code>∘</code> is the operator defined in <code>Base</code>.
CompositionsBase.jl defines the opposite composition operator <code>⨟</code> as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="⨟(fs...) = ∘(reverse(fs)...)"><pre class="notranslate"><code>⨟(fs...) = ∘(reverse(fs)...)
</code></pre></div>
<p dir="auto">and also the ASCII aliases <code>compose</code> and <code>opcompose</code>.</p>
<p dir="auto">As <code>⨟</code>, <code>compose</code>, and <code>opcompose</code> are all defined in terms of <code>∘</code>,
single-argument call is the identity function.</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CompositionsBase

julia&gt; tuple ∘ inv === compose(tuple, inv) === inv ⨟ tuple === opcompose(inv, tuple)
true

julia&gt; ∘(tuple) === compose(tuple) === ⨟(tuple) === opcompose(tuple) === tuple
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CompositionsBase

julia<span class="pl-k">&gt;</span> tuple <span class="pl-k">∘</span> inv <span class="pl-k">===</span> <span class="pl-c1">compose</span>(tuple, inv) <span class="pl-k">===</span> inv ⨟ tuple <span class="pl-k">===</span> <span class="pl-c1">opcompose</span>(inv, tuple)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">∘</span>(tuple) <span class="pl-k">===</span> <span class="pl-c1">compose</span>(tuple) <span class="pl-k">===</span> ⨟(tuple) <span class="pl-k">===</span> <span class="pl-c1">opcompose</span>(tuple) <span class="pl-k">===</span> tuple
<span class="pl-c1">true</span></pre></div>
</article></div>