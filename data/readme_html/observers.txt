<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/GTorlai/Observers.jl/actions?query=workflow%3ATests"><img src="https://github.com/GTorlai/Observers.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/Apache-2.0" rel="nofollow"><img src="https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-Apache%202.0-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-observersjl" class="anchor" aria-hidden="true" href="#observersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Observers.jl</h1>
<p dir="auto">The Observers.jl package provides functionalities to record and track metrics of interest
during the iterative evaluation of a given function. It may be used to monitor convergence
of optimization algorithms, measure revelant observables in numerical simulations,
print useful information from an iterative method, etc.</p>
<h2 dir="auto"><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>News</h2>
<p dir="auto">Observers.jl v0.2 has been released, which preserves the same basic <code>update!</code>
interface but a new design of the observer object, which is now
now just a <code>DataFrame</code> from
<a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrames.jl</a>. The basic constructor
syntax is the same, though <code>Observer</code> has been deprecated in favor of <code>observer</code>.
See the rest of this <a href="https://github.com/GTorlai/Observers.jl#readme">README</a>, the
<a href="https://github.com/GTorlai/Observers.jl/tree/main/examples">examples/</a>
and <a href="https://github.com/GTorlai/Observers.jl/tree/main/test">test/</a> directories, and
the <a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrames.jl documentation</a>
to learn about how to use the new observer type.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install this package through the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add Observers"><pre>julia<span class="pl-k">&gt;</span> ] add Observers</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Observers

# Series for π/4
f(k) = (-1)^(k + 1) / (2k - 1)

function my_iterative_function(niter; observer!, observe_step)
  π_approx = 0.0
  for n in 1:niter
    π_approx += f(n)
    if iszero(n % observe_step)
      update!(observer!; iteration=n, π_approx=4π_approx)
    end
  end
  return 4π_approx
end

# Record the iteration
iteration(; iteration) = iteration

# Measure the relative error from π at each iteration
error(; π_approx) = abs(π - π_approx) / π

obs = observer(iteration, error)

niter = 10000"><pre><span class="pl-k">using</span> Observers

<span class="pl-c"><span class="pl-c">#</span> Series for π/4</span>
<span class="pl-en">f</span>(k) <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span>(k <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">/</span> (<span class="pl-c1">2</span>k <span class="pl-k">-</span> <span class="pl-c1">1</span>)

<span class="pl-k">function</span> <span class="pl-en">my_iterative_function</span>(niter; observer!, observe_step)
  π_approx <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
  <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>niter
    π_approx <span class="pl-k">+=</span> <span class="pl-c1">f</span>(n)
    <span class="pl-k">if</span> <span class="pl-c1">iszero</span>(n <span class="pl-k">%</span> observe_step)
      <span class="pl-c1">update!</span>(observer!; iteration<span class="pl-k">=</span>n, π_approx<span class="pl-k">=</span><span class="pl-c1">4π</span>_approx)
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> <span class="pl-c1">4π</span>_approx
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Record the iteration</span>
<span class="pl-en">iteration</span>(; iteration) <span class="pl-k">=</span> iteration

<span class="pl-c"><span class="pl-c">#</span> Measure the relative error from π at each iteration</span>
<span class="pl-en">error</span>(; π_approx) <span class="pl-k">=</span> <span class="pl-c1">abs</span>(π <span class="pl-k">-</span> π_approx) <span class="pl-k">/</span> π

obs <span class="pl-k">=</span> <span class="pl-c1">observer</span>(iteration, error)

niter <span class="pl-k">=</span> <span class="pl-c1">10000</span></pre></div>
<p dir="auto">Now we run the function and analyze the results:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; π_approx = my_iterative_function(niter; (observer!)=obs, observe_step=1000)
3.1414926535900345"><pre>julia<span class="pl-k">&gt;</span> π_approx <span class="pl-k">=</span> <span class="pl-en">my_iterative_function</span>(niter; (observer!)<span class="pl-k">=</span>obs, observe_step<span class="pl-k">=</span><span class="pl-c1">1000</span>)
<span class="pl-c1">3.1414926535900345</span></pre></div>
<p dir="auto">Results will be saved in the observer, which is just a <code>DataFrame</code> from the Julia
package <a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrames.jl</a> but with
functions associated with each column that get called to generate new rows
of the data frame. You can view the results as a table of data by printing it:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs
10×2 DataFrame
 Row │ iteration  error
     │ Int64      Float64
─────┼────────────────────────
   1 │      1000  0.00031831
   2 │      2000  0.000159155
   3 │      3000  0.000106103
   4 │      4000  7.95775e-5
   5 │      5000  6.3662e-5
   6 │      6000  5.30516e-5
   7 │      7000  4.54728e-5
   8 │      8000  3.97887e-5
   9 │      9000  3.53678e-5
  10 │     10000  3.1831e-5"><pre>julia<span class="pl-k">&gt;</span> obs
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ iteration  error
     │ Int64      Float64
─────┼────────────────────────
   <span class="pl-c1">1</span> │      <span class="pl-c1">1000</span>  <span class="pl-c1">0.00031831</span>
   <span class="pl-c1">2</span> │      <span class="pl-c1">2000</span>  <span class="pl-c1">0.000159155</span>
   <span class="pl-c1">3</span> │      <span class="pl-c1">3000</span>  <span class="pl-c1">0.000106103</span>
   <span class="pl-c1">4</span> │      <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>
   <span class="pl-c1">5</span> │      <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>
   <span class="pl-c1">6</span> │      <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span>
   <span class="pl-c1">7</span> │      <span class="pl-c1">7000</span>  <span class="pl-c1">4.54728e-5</span>
   <span class="pl-c1">8</span> │      <span class="pl-c1">8000</span>  <span class="pl-c1">3.97887e-5</span>
   <span class="pl-c1">9</span> │      <span class="pl-c1">9000</span>  <span class="pl-c1">3.53678e-5</span>
  <span class="pl-c1">10</span> │     <span class="pl-c1">10000</span>  <span class="pl-c1">3.1831e-5</span></pre></div>
<p dir="auto">Columns store the results from each function that was passed, which can be accessed
with the standard <code>DataFrame</code> interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs.error
10-element Vector{Float64}:
 0.0003183098066059948
 0.0001591549331452938
 0.00010610329244741256
 7.957747030096378e-5
 6.366197660078155e-5
 5.305164733068067e-5
 4.54728406537879e-5
 3.978873562176942e-5
 3.536776502730045e-5
 3.18309885415475e-5

julia&gt; obs[!, &quot;error&quot;] == obs.error # DataFrames view access syntax
true

julia&gt; obs[!, :error] == obs.error # Can use Symbols
true

julia&gt; obs[:, &quot;error&quot;] == obs.error # Copy the column
true

julia&gt; obs[:, :error] == obs.error # Can use Symbols
true

julia&gt; obs[!, string(error)] == obs.error # Access using function
true

julia&gt; obs[!, Symbol(error)] == obs.error # Access using function
true"><pre>julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>error
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0003183098066059948</span>
 <span class="pl-c1">0.0001591549331452938</span>
 <span class="pl-c1">0.00010610329244741256</span>
 <span class="pl-c1">7.957747030096378e-5</span>
 <span class="pl-c1">6.366197660078155e-5</span>
 <span class="pl-c1">5.305164733068067e-5</span>
 <span class="pl-c1">4.54728406537879e-5</span>
 <span class="pl-c1">3.978873562176942e-5</span>
 <span class="pl-c1">3.536776502730045e-5</span>
 <span class="pl-c1">3.18309885415475e-5</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> DataFrames view access syntax</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">:error</span>] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> Can use Symbols</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs[:, <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> Copy the column</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs[:, <span class="pl-c1">:error</span>] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> Can use Symbols</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">string</span>(error)] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> Access using function</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">Symbol</span>(error)] <span class="pl-k">==</span> obs<span class="pl-k">.</span>error <span class="pl-c"><span class="pl-c">#</span> Access using function</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">You can perform various operations like slicing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs[4:6, :]
3×2 DataFrame
 Row │ iteration  error
     │ Int64      Float64
─────┼───────────────────────
   1 │      4000  7.95775e-5
   2 │      5000  6.3662e-5
   3 │      6000  5.30516e-5"><pre>julia<span class="pl-k">&gt;</span> obs[<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">6</span>, :]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ iteration  error
     │ Int64      Float64
─────┼───────────────────────
   <span class="pl-c1">1</span> │      <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>
   <span class="pl-c1">2</span> │      <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>
   <span class="pl-c1">3</span> │      <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span></pre></div>
<p dir="auto">See the <a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrames.jl documentation</a>
documentation for more information on operations you can perform,
along with the <a href="https://github.com/GTorlai/Observers.jl/tree/main/examples">examples/</a> and
<a href="https://github.com/GTorlai/Observers.jl/tree/main/test">test/</a> directory.
You will have to load DataFrames.jl with <code>using DataFrames</code> to access DataFrame
functions.</p>
<h2 dir="auto"><a id="user-content-custom-column-names" class="anchor" aria-hidden="true" href="#custom-column-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom column names</h2>
<p dir="auto">Alternatively, you can pass string names with the functions which will become
the names of the columns of the observer:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs = observer(&quot;Iteration&quot; =&gt; iteration, &quot;Error&quot; =&gt; error)
0×2 DataFrame
 Row │ Iteration  Error
     │ Union{}    Union{}
─────┴────────────────────"><pre>julia<span class="pl-k">&gt;</span> obs <span class="pl-k">=</span> <span class="pl-c1">observer</span>(<span class="pl-s"><span class="pl-pds">"</span>Iteration<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> iteration, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> error)
<span class="pl-c1">0</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ Iteration  Error
     │ Union{}    Union{}
─────┴────────────────────</pre></div>
<p dir="auto">in which case the results can be accessed from the given specified name:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs.Error
Union{}[]

julia&gt; obs.Iteration
Union{}[]"><pre>julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Error
Union{}[]

julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Iteration
Union{}[]</pre></div>
<p dir="auto">This is particularly useful if you pass anonymous functions into the observer,
in which case the automatically generated name of the column would be randomly generated.
For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs = observer((; iteration) -&gt; iteration, (; π_approx) -&gt; abs(π - π_approx) / π)
0×2 DataFrame
 Row │ #4       #6
     │ Union{}  Union{}
─────┴──────────────────

julia&gt; π_approx = my_iterative_function(niter; (observer!)=obs, observe_step=1000)
3.1414926535900345

julia&gt; obs
10×2 DataFrame
 Row │ #4     #6
     │ Int64  Float64
─────┼────────────────────
   1 │  1000  0.00031831
   2 │  2000  0.000159155
   3 │  3000  0.000106103
   4 │  4000  7.95775e-5
   5 │  5000  6.3662e-5
   6 │  6000  5.30516e-5
   7 │  7000  4.54728e-5
   8 │  8000  3.97887e-5
   9 │  9000  3.53678e-5
  10 │ 10000  3.1831e-5"><pre>julia<span class="pl-k">&gt;</span> obs <span class="pl-k">=</span> <span class="pl-c1">observer</span>((; iteration) <span class="pl-k">-&gt;</span> iteration, (; π_approx) <span class="pl-k">-&gt;</span> <span class="pl-c1">abs</span>(π <span class="pl-k">-</span> π_approx) <span class="pl-k">/</span> π)
<span class="pl-c1">0</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ <span class="pl-c"><span class="pl-c">#</span>4       #6</span>
     │ Union{}  Union{}
─────┴──────────────────

julia<span class="pl-k">&gt;</span> π_approx <span class="pl-k">=</span> <span class="pl-en">my_iterative_function</span>(niter; (observer!)<span class="pl-k">=</span>obs, observe_step<span class="pl-k">=</span><span class="pl-c1">1000</span>)
<span class="pl-c1">3.1414926535900345</span>

julia<span class="pl-k">&gt;</span> obs
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ <span class="pl-c"><span class="pl-c">#</span>4     #6</span>
     │ Int64  Float64
─────┼────────────────────
   <span class="pl-c1">1</span> │  <span class="pl-c1">1000</span>  <span class="pl-c1">0.00031831</span>
   <span class="pl-c1">2</span> │  <span class="pl-c1">2000</span>  <span class="pl-c1">0.000159155</span>
   <span class="pl-c1">3</span> │  <span class="pl-c1">3000</span>  <span class="pl-c1">0.000106103</span>
   <span class="pl-c1">4</span> │  <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>
   <span class="pl-c1">5</span> │  <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>
   <span class="pl-c1">6</span> │  <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span>
   <span class="pl-c1">7</span> │  <span class="pl-c1">7000</span>  <span class="pl-c1">4.54728e-5</span>
   <span class="pl-c1">8</span> │  <span class="pl-c1">8000</span>  <span class="pl-c1">3.97887e-5</span>
   <span class="pl-c1">9</span> │  <span class="pl-c1">9000</span>  <span class="pl-c1">3.53678e-5</span>
  <span class="pl-c1">10</span> │ <span class="pl-c1">10000</span>  <span class="pl-c1">3.1831e-5</span></pre></div>
<p dir="auto">You can see that the names of the functions are automatically generated by Julia, since they are
<a href="https://docs.julialang.org/en/v1/manual/functions/#man-anonymous-functions" rel="nofollow">anonymous functions</a>.</p>
<p dir="auto">This will make the results harder to access by name, but you can still use
positional information since the columns are ordered based on how
the observer was defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs[!, 1]
10-element Vector{Int64}:
  1000
  2000
  3000
  4000
  5000
  6000
  7000
  8000
  9000
 10000

julia&gt; obs[!, 2]
10-element Vector{Float64}:
 0.0003183098066059948
 0.0001591549331452938
 0.00010610329244741256
 7.957747030096378e-5
 6.366197660078155e-5
 5.305164733068067e-5
 4.54728406537879e-5
 3.978873562176942e-5
 3.536776502730045e-5
 3.18309885415475e-5"><pre>julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">1</span>]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1000</span>
  <span class="pl-c1">2000</span>
  <span class="pl-c1">3000</span>
  <span class="pl-c1">4000</span>
  <span class="pl-c1">5000</span>
  <span class="pl-c1">6000</span>
  <span class="pl-c1">7000</span>
  <span class="pl-c1">8000</span>
  <span class="pl-c1">9000</span>
 <span class="pl-c1">10000</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0003183098066059948</span>
 <span class="pl-c1">0.0001591549331452938</span>
 <span class="pl-c1">0.00010610329244741256</span>
 <span class="pl-c1">7.957747030096378e-5</span>
 <span class="pl-c1">6.366197660078155e-5</span>
 <span class="pl-c1">5.305164733068067e-5</span>
 <span class="pl-c1">4.54728406537879e-5</span>
 <span class="pl-c1">3.978873562176942e-5</span>
 <span class="pl-c1">3.536776502730045e-5</span>
 <span class="pl-c1">3.18309885415475e-5</span></pre></div>
<p dir="auto">You could also save the anonymous functions in variables and use
them to access the results:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; iter = (; iteration) -&gt; iteration
#10 (generic function with 1 method)

julia&gt; err = (; π_approx) -&gt; abs(π - π_approx) / π
#13 (generic function with 1 method)

julia&gt; obs = observer(iter, err)
0×2 DataFrame
 Row │ #10      #13
     │ Union{}  Union{}
─────┴──────────────────

julia&gt; π_approx = my_iterative_function(niter; (observer!)=obs, observe_step=1000)
3.1414926535900345

julia&gt; obs
10×2 DataFrame
 Row │ #10    #13
     │ Int64  Float64
─────┼────────────────────
   1 │  1000  0.00031831
   2 │  2000  0.000159155
   3 │  3000  0.000106103
   4 │  4000  7.95775e-5
   5 │  5000  6.3662e-5
   6 │  6000  5.30516e-5
   7 │  7000  4.54728e-5
   8 │  8000  3.97887e-5
   9 │  9000  3.53678e-5
  10 │ 10000  3.1831e-5"><pre>julia<span class="pl-k">&gt;</span> iter <span class="pl-k">=</span> (; iteration) <span class="pl-k">-&gt;</span> iteration
<span class="pl-c"><span class="pl-c">#</span>10 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> err <span class="pl-k">=</span> (; π_approx) <span class="pl-k">-&gt;</span> <span class="pl-c1">abs</span>(π <span class="pl-k">-</span> π_approx) <span class="pl-k">/</span> π
<span class="pl-c"><span class="pl-c">#</span>13 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> obs <span class="pl-k">=</span> <span class="pl-c1">observer</span>(iter, err)
<span class="pl-c1">0</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ <span class="pl-c"><span class="pl-c">#</span>10      #13</span>
     │ Union{}  Union{}
─────┴──────────────────

julia<span class="pl-k">&gt;</span> π_approx <span class="pl-k">=</span> <span class="pl-en">my_iterative_function</span>(niter; (observer!)<span class="pl-k">=</span>obs, observe_step<span class="pl-k">=</span><span class="pl-c1">1000</span>)
<span class="pl-c1">3.1414926535900345</span>

julia<span class="pl-k">&gt;</span> obs
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ <span class="pl-c"><span class="pl-c">#</span>10    #13</span>
     │ Int64  Float64
─────┼────────────────────
   <span class="pl-c1">1</span> │  <span class="pl-c1">1000</span>  <span class="pl-c1">0.00031831</span>
   <span class="pl-c1">2</span> │  <span class="pl-c1">2000</span>  <span class="pl-c1">0.000159155</span>
   <span class="pl-c1">3</span> │  <span class="pl-c1">3000</span>  <span class="pl-c1">0.000106103</span>
   <span class="pl-c1">4</span> │  <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>
   <span class="pl-c1">5</span> │  <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>
   <span class="pl-c1">6</span> │  <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span>
   <span class="pl-c1">7</span> │  <span class="pl-c1">7000</span>  <span class="pl-c1">4.54728e-5</span>
   <span class="pl-c1">8</span> │  <span class="pl-c1">8000</span>  <span class="pl-c1">3.97887e-5</span>
   <span class="pl-c1">9</span> │  <span class="pl-c1">9000</span>  <span class="pl-c1">3.53678e-5</span>
  <span class="pl-c1">10</span> │ <span class="pl-c1">10000</span>  <span class="pl-c1">3.1831e-5</span></pre></div>
<p dir="auto">You can use the functions themselves to access results, as long as you convert
them to strings or symbols:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs[!, string(iter)]
10-element Vector{Int64}:
  1000
  2000
  3000
  4000
  5000
  6000
  7000
  8000
  9000
 10000

julia&gt; obs[!, Symbol(err)]
10-element Vector{Float64}:
 0.0003183098066059948
 0.0001591549331452938
 0.00010610329244741256
 7.957747030096378e-5
 6.366197660078155e-5
 5.305164733068067e-5
 4.54728406537879e-5
 3.978873562176942e-5
 3.536776502730045e-5
 3.18309885415475e-5"><pre>julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">string</span>(iter)]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1000</span>
  <span class="pl-c1">2000</span>
  <span class="pl-c1">3000</span>
  <span class="pl-c1">4000</span>
  <span class="pl-c1">5000</span>
  <span class="pl-c1">6000</span>
  <span class="pl-c1">7000</span>
  <span class="pl-c1">8000</span>
  <span class="pl-c1">9000</span>
 <span class="pl-c1">10000</span>

julia<span class="pl-k">&gt;</span> obs[<span class="pl-k">!</span>, <span class="pl-c1">Symbol</span>(err)]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0003183098066059948</span>
 <span class="pl-c1">0.0001591549331452938</span>
 <span class="pl-c1">0.00010610329244741256</span>
 <span class="pl-c1">7.957747030096378e-5</span>
 <span class="pl-c1">6.366197660078155e-5</span>
 <span class="pl-c1">5.305164733068067e-5</span>
 <span class="pl-c1">4.54728406537879e-5</span>
 <span class="pl-c1">3.978873562176942e-5</span>
 <span class="pl-c1">3.536776502730045e-5</span>
 <span class="pl-c1">3.18309885415475e-5</span></pre></div>
<p dir="auto">You can also rename the columns to more desirable names using the <code>rename!</code>
function from <code>DataFrames</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames

julia&gt; rename!(obs, [&quot;Iteration&quot;, &quot;Error&quot;])
10×2 DataFrame
 Row │ Iteration  Error
     │ Int64      Float64
─────┼────────────────────────
   1 │      1000  0.00031831
   2 │      2000  0.000159155
   3 │      3000  0.000106103
   4 │      4000  7.95775e-5
   5 │      5000  6.3662e-5
   6 │      6000  5.30516e-5
   7 │      7000  4.54728e-5
   8 │      8000  3.97887e-5
   9 │      9000  3.53678e-5
  10 │     10000  3.1831e-5

julia&gt; obs.Iteration
10-element Vector{Int64}:
  1000
  2000
  3000
  4000
  5000
  6000
  7000
  8000
  9000
 10000

julia&gt; obs.Error
10-element Vector{Float64}:
 0.0003183098066059948
 0.0001591549331452938
 0.00010610329244741256
 7.957747030096378e-5
 6.366197660078155e-5
 5.305164733068067e-5
 4.54728406537879e-5
 3.978873562176942e-5
 3.536776502730045e-5
 3.18309885415475e-5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rename!</span>(obs, [<span class="pl-s"><span class="pl-pds">"</span>Iteration<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>])
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ Iteration  Error
     │ Int64      Float64
─────┼────────────────────────
   <span class="pl-c1">1</span> │      <span class="pl-c1">1000</span>  <span class="pl-c1">0.00031831</span>
   <span class="pl-c1">2</span> │      <span class="pl-c1">2000</span>  <span class="pl-c1">0.000159155</span>
   <span class="pl-c1">3</span> │      <span class="pl-c1">3000</span>  <span class="pl-c1">0.000106103</span>
   <span class="pl-c1">4</span> │      <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>
   <span class="pl-c1">5</span> │      <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>
   <span class="pl-c1">6</span> │      <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span>
   <span class="pl-c1">7</span> │      <span class="pl-c1">7000</span>  <span class="pl-c1">4.54728e-5</span>
   <span class="pl-c1">8</span> │      <span class="pl-c1">8000</span>  <span class="pl-c1">3.97887e-5</span>
   <span class="pl-c1">9</span> │      <span class="pl-c1">9000</span>  <span class="pl-c1">3.53678e-5</span>
  <span class="pl-c1">10</span> │     <span class="pl-c1">10000</span>  <span class="pl-c1">3.1831e-5</span>

julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Iteration
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1000</span>
  <span class="pl-c1">2000</span>
  <span class="pl-c1">3000</span>
  <span class="pl-c1">4000</span>
  <span class="pl-c1">5000</span>
  <span class="pl-c1">6000</span>
  <span class="pl-c1">7000</span>
  <span class="pl-c1">8000</span>
  <span class="pl-c1">9000</span>
 <span class="pl-c1">10000</span>

julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Error
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0003183098066059948</span>
 <span class="pl-c1">0.0001591549331452938</span>
 <span class="pl-c1">0.00010610329244741256</span>
 <span class="pl-c1">7.957747030096378e-5</span>
 <span class="pl-c1">6.366197660078155e-5</span>
 <span class="pl-c1">5.305164733068067e-5</span>
 <span class="pl-c1">4.54728406537879e-5</span>
 <span class="pl-c1">3.978873562176942e-5</span>
 <span class="pl-c1">3.536776502730045e-5</span>
 <span class="pl-c1">3.18309885415475e-5</span></pre></div>
<p dir="auto">Column functions will be preserved even if the columns are renamed (and in
any other operation in which DataFrames.jl preserves so-called <code>:note</code>-style
metadata, see the
<a href="https://dataframes.juliadata.org/stable/lib/metadata/" rel="nofollow">DataFrames.jl documentation on metadata</a>
for more details.</p>
<h2 dir="auto"><a id="user-content-accessing-and-modifying-functions" class="anchor" aria-hidden="true" href="#accessing-and-modifying-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accessing and modifying functions</h2>
<p dir="auto">You can access and modify functions of an observer with <code>get_function</code>, <code>set_function!</code>, and <code>insert_function!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; get_function(obs, &quot;Iteration&quot;) == iter
true

julia&gt; get_function(obs, &quot;Error&quot;) == err
true

julia&gt; set_function!(obs, &quot;Error&quot; =&gt; sin);

julia&gt; get_function(obs, &quot;Error&quot;) == sin
true

julia&gt; insert_function!(obs, &quot;New column&quot; =&gt; cos);

julia&gt; get_function(obs, &quot;New column&quot;) == cos
true

julia&gt; obs
10×3 DataFrame
 Row │ Iteration  Error        New column
     │ Int64      Float64      Missing
─────┼────────────────────────────────────
   1 │      1000  0.00031831      missing
   2 │      2000  0.000159155     missing
   3 │      3000  0.000106103     missing
   4 │      4000  7.95775e-5      missing
   5 │      5000  6.3662e-5       missing
   6 │      6000  5.30516e-5      missing
   7 │      7000  4.54728e-5      missing
   8 │      8000  3.97887e-5      missing
   9 │      9000  3.53678e-5      missing
  10 │     10000  3.1831e-5       missing"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_function</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>Iteration<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> iter
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_function</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> err
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_function!</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> sin);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_function</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> sin
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">insert_function!</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>New column<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> cos);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_function</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>New column<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> cos
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ Iteration  Error        New column
     │ Int64      Float64      Missing
─────┼────────────────────────────────────
   <span class="pl-c1">1</span> │      <span class="pl-c1">1000</span>  <span class="pl-c1">0.00031831</span>      <span class="pl-c1">missing</span>
   <span class="pl-c1">2</span> │      <span class="pl-c1">2000</span>  <span class="pl-c1">0.000159155</span>     <span class="pl-c1">missing</span>
   <span class="pl-c1">3</span> │      <span class="pl-c1">3000</span>  <span class="pl-c1">0.000106103</span>     <span class="pl-c1">missing</span>
   <span class="pl-c1">4</span> │      <span class="pl-c1">4000</span>  <span class="pl-c1">7.95775e-5</span>      <span class="pl-c1">missing</span>
   <span class="pl-c1">5</span> │      <span class="pl-c1">5000</span>  <span class="pl-c1">6.3662e-5</span>       <span class="pl-c1">missing</span>
   <span class="pl-c1">6</span> │      <span class="pl-c1">6000</span>  <span class="pl-c1">5.30516e-5</span>      <span class="pl-c1">missing</span>
   <span class="pl-c1">7</span> │      <span class="pl-c1">7000</span>  <span class="pl-c1">4.54728e-5</span>      <span class="pl-c1">missing</span>
   <span class="pl-c1">8</span> │      <span class="pl-c1">8000</span>  <span class="pl-c1">3.97887e-5</span>      <span class="pl-c1">missing</span>
   <span class="pl-c1">9</span> │      <span class="pl-c1">9000</span>  <span class="pl-c1">3.53678e-5</span>      <span class="pl-c1">missing</span>
  <span class="pl-c1">10</span> │     <span class="pl-c1">10000</span>  <span class="pl-c1">3.1831e-5</span>       <span class="pl-c1">missing</span></pre></div>
<p dir="auto"><code>set_function!</code> just updates the function of an existing column but doesn't create new columns,
while <code>insert_function!</code> creates a new column and sets the function of that new column
but won't update an existing column.
For example, these will both throw errors:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_function!(obs, &quot;New column 2&quot;, cos)
insert_function!(obs, &quot;Error&quot;, cos)"><pre><span class="pl-c1">set_function!</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>New column 2<span class="pl-pds">"</span></span>, cos)
<span class="pl-c1">insert_function!</span>(obs, <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>, cos)</pre></div>
<p dir="auto">Alternatively, if you define the observer with column names to begin with,
then you can get the results using the function names:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs = observer(
         &quot;Iteration&quot; =&gt; (; iteration) -&gt; iteration,
         &quot;Error&quot; =&gt; (; π_approx) -&gt; abs(π - π_approx) / π,
       )
0×2 DataFrame
 Row │ Iteration  Error
     │ Union{}    Union{}
─────┴────────────────────

julia&gt; π_approx = my_iterative_function(niter; (observer!)=obs, observe_step=1000)
3.1414926535900345

julia&gt; obs.Iteration
10-element Vector{Int64}:
  1000
  2000
  3000
  4000
  5000
  6000
  7000
  8000
  9000
 10000

julia&gt; obs.Error
10-element Vector{Float64}:
 0.0003183098066059948
 0.0001591549331452938
 0.00010610329244741256
 7.957747030096378e-5
 6.366197660078155e-5
 5.305164733068067e-5
 4.54728406537879e-5
 3.978873562176942e-5
 3.536776502730045e-5
 3.18309885415475e-5"><pre>julia<span class="pl-k">&gt;</span> obs <span class="pl-k">=</span> <span class="pl-c1">observer</span>(
         <span class="pl-s"><span class="pl-pds">"</span>Iteration<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (; iteration) <span class="pl-k">-&gt;</span> iteration,
         <span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (; π_approx) <span class="pl-k">-&gt;</span> <span class="pl-c1">abs</span>(π <span class="pl-k">-</span> π_approx) <span class="pl-k">/</span> π,
       )
<span class="pl-c1">0</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ Iteration  Error
     │ Union{}    Union{}
─────┴────────────────────

julia<span class="pl-k">&gt;</span> π_approx <span class="pl-k">=</span> <span class="pl-en">my_iterative_function</span>(niter; (observer!)<span class="pl-k">=</span>obs, observe_step<span class="pl-k">=</span><span class="pl-c1">1000</span>)
<span class="pl-c1">3.1414926535900345</span>

julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Iteration
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1000</span>
  <span class="pl-c1">2000</span>
  <span class="pl-c1">3000</span>
  <span class="pl-c1">4000</span>
  <span class="pl-c1">5000</span>
  <span class="pl-c1">6000</span>
  <span class="pl-c1">7000</span>
  <span class="pl-c1">8000</span>
  <span class="pl-c1">9000</span>
 <span class="pl-c1">10000</span>

julia<span class="pl-k">&gt;</span> obs<span class="pl-k">.</span>Error
<span class="pl-c1">10</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0003183098066059948</span>
 <span class="pl-c1">0.0001591549331452938</span>
 <span class="pl-c1">0.00010610329244741256</span>
 <span class="pl-c1">7.957747030096378e-5</span>
 <span class="pl-c1">6.366197660078155e-5</span>
 <span class="pl-c1">5.305164733068067e-5</span>
 <span class="pl-c1">4.54728406537879e-5</span>
 <span class="pl-c1">3.978873562176942e-5</span>
 <span class="pl-c1">3.536776502730045e-5</span>
 <span class="pl-c1">3.18309885415475e-5</span></pre></div>
<h2 dir="auto"><a id="user-content-reading-and-writing-to-disk" class="anchor" aria-hidden="true" href="#reading-and-writing-to-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading and Writing to Disk</h2>
<p dir="auto">You can save and load observers with packages like <a href="https://github.com/JuliaIO/JLD2.jl">JLD2.jl</a>,
or any other packages you like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JLD2
jldsave(&quot;results.jld2&quot;; obs)
obs_loaded = load(&quot;results.jld2&quot;, &quot;obs&quot;)"><pre><span class="pl-k">using</span> JLD2
<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>results.jld2<span class="pl-pds">"</span></span>; obs)
obs_loaded <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>results.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>obs<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs_loaded == obs
true

julia&gt; obs_loaded.Error == obs.Error
true"><pre>julia<span class="pl-k">&gt;</span> obs_loaded <span class="pl-k">==</span> obs
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs_loaded<span class="pl-k">.</span>Error <span class="pl-k">==</span> obs<span class="pl-k">.</span>Error
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Another option is saving and loading as a
<a href="https://dataframes.juliadata.org/stable/man/importing_and_exporting/#CSV-Files" rel="nofollow">CSV file</a>,
though this will drop information about the functions associated with each column:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CSV
CSV.write(&quot;results.csv&quot;, obs)
obs_loaded = DataFrame(CSV.File(&quot;results.csv&quot;))"><pre><span class="pl-k">using</span> CSV
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>results.csv<span class="pl-pds">"</span></span>, obs)
obs_loaded <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>results.csv<span class="pl-pds">"</span></span>))</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs_loaded == obs
true

julia&gt; obs_loaded.Error == obs.Error
true"><pre>julia<span class="pl-k">&gt;</span> obs_loaded <span class="pl-k">==</span> obs
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> obs_loaded<span class="pl-k">.</span>Error <span class="pl-k">==</span> obs<span class="pl-k">.</span>Error
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-generating-this-readme" class="anchor" aria-hidden="true" href="#generating-this-readme"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating this README</h2>
<p dir="auto">This <a href="https://github.com/GTorlai/Observers.jl#readme">README</a> file was generated with
<a href="https://github.com/JunoLab/Weave.jl">Weave.jl</a> with the following commands:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Observers, Weave
weave(
  joinpath(pkgdir(Observers), &quot;examples&quot;, &quot;README.jl&quot;);
  doctype=&quot;github&quot;,
  out_path=pkgdir(Observers),
)"><pre><span class="pl-k">using</span> Observers, Weave
<span class="pl-c1">weave</span>(
  <span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(Observers), <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>README.jl<span class="pl-pds">"</span></span>);
  doctype<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>github<span class="pl-pds">"</span></span>,
  out_path<span class="pl-k">=</span><span class="pl-c1">pkgdir</span>(Observers),
)</pre></div>
</article></div>