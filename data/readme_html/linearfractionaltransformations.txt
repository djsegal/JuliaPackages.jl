<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-linear-fractional-transformations" class="anchor" aria-hidden="true" href="#linear-fractional-transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linear Fractional Transformations</h1>
<p><a href="https://travis-ci.org/scheinerman/LinearFractionalTransformations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d6d0bd1397100169599f0d4502ac61e4a819b6e8/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f4c696e6561724672616374696f6e616c5472616e73666f726d6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/LinearFractionalTransformations.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/LinearFractionalTransformations.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d3da080c772b41df01ff66ffd6d95198cb233261/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f4c696e6561724672616374696f6e616c5472616e73666f726d6174696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/LinearFractionalTransformations.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>This module defines a <code>LFT</code> data type to represent a complex <em>linear
fractional transformation</em>. This is a function on the extended
complex numbers (include complex infinity) defined by</p>
<pre><code>f(z) = (a*z + b) / (c*z + d)
</code></pre>
<p>where <code>a,b,c,d</code> are (finite) complex numbers and <code>a*d-b*c != 0</code>.</p>
<p>These are also known as <em>MÃ¶bius transformations</em>.</p>
<h2><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructors</h2>
<p>The basic constructor takes four values:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearFractionalTransformations

julia<span class="pl-k">&gt;</span> julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p>Notice that the <code>LFT</code> is represented by a 2-by-2 complex matrix.
A <code>LFT</code> can also be defined by specifying a matrix.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>];

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(A)
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p>The identity <code>LFT</code> is constructed by <code>LFT()</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LFT</span>()
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p>Given (complex) numbers <code>a,b,c</code> (including <code>Inf</code>) we can construct
a <code>LFT</code> that maps <code>a</code> to 0, <code>b</code> to 1, and <code>c</code> to infinity.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">6.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">12.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">2</span>]
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">5</span>]
<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im</pre></div>
<p>Finally, we provide a constructor for mapping a given triple of values
<code>(a,b,c)</code> to another triple <code>(aa,bb,cc)</code>. The syntax is
<code>LFT(a,aa,b,bb,c,cc)</code>. Here's an example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span><span class="pl-k">+</span>im, <span class="pl-c1">3</span>,<span class="pl-c1">Inf</span>, <span class="pl-c1">4</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>im)
<span class="pl-c1">LFT</span>( <span class="pl-c1">5.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span> , <span class="pl-k">-</span><span class="pl-c1">17.0</span> <span class="pl-k">-</span> <span class="pl-c1">7.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">9.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">1</span>]
<span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">3</span>]
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">4</span>]
<span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span></pre></div>
<h4><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Under the hood</h4>
<p>The matrix representing a <code>LFT</code> object is held in a field named <code>:M</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f<span class="pl-k">.</span>M
<span class="pl-c1">2</span>x2 Array{Complex{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>   <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span></pre></div>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations</h2>
<h3><a id="user-content-function-application" class="anchor" aria-hidden="true" href="#function-application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function application</h3>
<p>Since a <code>LFT</code> is a function, the most basic operation we may wish to
perform is applying that function of a complex number. That's done
with <code>f[x]</code> notation (or with <code>f(x)</code>):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">1</span>]
<span class="pl-c1">2.5</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">0</span>]
<span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">Inf</span>]
<span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>]
<span class="pl-c1">2.75</span> <span class="pl-k">+</span> <span class="pl-c1">0.25im</span></pre></div>
<p><strong>Note</strong>: Staring in Julia 0.4, I plan to replace <code>f[x]</code> with <code>f(x)</code>
by defining <code>call</code>.</p>
<h3><a id="user-content-composition-and-inverse" class="anchor" aria-hidden="true" href="#composition-and-inverse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composition and inverse</h3>
<p>The <code>*</code> operation is used for function composition.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> f<span class="pl-k">*</span>g
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">7.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p>The inverse of a <code>LFT</code> is computed with <code>inv</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">inv</span>(f)
<span class="pl-c1">LFT</span>( <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f<span class="pl-k">*</span>g
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p>Notice that the matrix representing <code>f*g</code> is a scaled version of the
identity matrix.</p>
<h2><a id="user-content-equality-checking" class="anchor" aria-hidden="true" href="#equality-checking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Equality checking</h2>
<p>We can use <code>==</code> or <code>isequal</code> to check if two <code>LFT</code> objects are
equal. Note that there is no unique matrix representation for a <code>LFT</code>
object and we might have that <code>f</code> and <code>g</code> are equal, but <code>f.M</code> and
<code>g.M</code> are different.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-k">-</span><span class="pl-c1">6</span>,<span class="pl-k">-</span><span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> f<span class="pl-k">==</span>g
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f<span class="pl-k">.</span>M <span class="pl-k">==</span> g<span class="pl-k">.</span>M
<span class="pl-c1">false</span></pre></div>
</article></div>