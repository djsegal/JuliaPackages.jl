<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linearfractionaltransformations" class="anchor" aria-hidden="true" href="#linearfractionaltransformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinearFractionalTransformations</h1>
<p dir="auto">This module defines a <code>LFT</code> data type to represent a complex <em>linear
fractional transformation</em>. This is a function on the extended
complex numbers (include complex infinity) defined by</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="f(z) = (a*z + b) / (c*z + d)"><pre class="notranslate"><code>f(z) = (a*z + b) / (c*z + d)
</code></pre></div>
<p dir="auto">where <code>a,b,c,d</code> are (finite) complex numbers and <code>a*d-b*c != 0</code>.</p>
<p dir="auto">These are also known as <em>MÃ¶bius transformations</em>.</p>
<h2 dir="auto"><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructors</h2>
<p dir="auto">The basic constructor takes four values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LinearFractionalTransformations

julia&gt; julia&gt; f = LFT(1,2,3,4)
LFT( 1.0 + 0.0im , 2.0 + 0.0im , 3.0 + 0.0im , 4.0 + 0.0im )"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearFractionalTransformations

julia<span class="pl-k">&gt;</span> julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p dir="auto">Notice that the <code>LFT</code> is represented by a 2-by-2 complex matrix.
A <code>LFT</code> can also be defined by specifying a matrix.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = [1 2; 3 4];

julia&gt; g = LFT(A)
LFT( 1.0 + 0.0im , 2.0 + 0.0im , 3.0 + 0.0im , 4.0 + 0.0im )"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>];

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(A)
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p dir="auto">The identity <code>LFT</code> is constructed by <code>LFT()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LFT()
LFT( 1.0 + 0.0im , 0.0 + 0.0im , 0.0 + 0.0im , 1.0 + 0.0im )"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LFT</span>()
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p dir="auto">Given (complex) numbers <code>a,b,c</code> (including <code>Inf</code>) we can construct
a <code>LFT</code> that maps <code>a</code> to 0, <code>b</code> to 1, and <code>c</code> to infinity.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(2,5,-1)
LFT( 6.0 + 0.0im , -12.0 + 0.0im , 3.0 + 0.0im , 3.0 + 0.0im )

julia&gt; f[2]
0.0 + 0.0im

julia&gt; f[5]
1.0 + 0.0im

julia&gt; f[-1]
Inf + Inf*im"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">6.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">12.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">2</span>]
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">5</span>]
<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im</pre></div>
<p dir="auto">Finally, we provide a constructor for mapping a given triple of values
<code>(a,b,c)</code> to another triple <code>(aa,bb,cc)</code>. The syntax is
<code>LFT(a,aa,b,bb,c,cc)</code>. Here's an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(1,2+im, 3,Inf, 4,1-im)
LFT( 5.0 + 1.0im , -17.0 - 7.0im , 3.0 + 0.0im , -9.0 + 0.0im )

julia&gt; f[1]
2.0 + 1.0im

julia&gt; f[3]
Inf + Inf*im

julia&gt; f[4]
1.0 - 1.0im"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span><span class="pl-k">+</span>im, <span class="pl-c1">3</span>,<span class="pl-c1">Inf</span>, <span class="pl-c1">4</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>im)
<span class="pl-c1">LFT</span>( <span class="pl-c1">5.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span> , <span class="pl-k">-</span><span class="pl-c1">17.0</span> <span class="pl-k">-</span> <span class="pl-c1">7.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">9.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">1</span>]
<span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">3</span>]
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">4</span>]
<span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span></pre></div>
<h4 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the hood</h4>
<p dir="auto">The matrix representing a <code>LFT</code> object is held in a field named <code>:M</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(1,2,3)
LFT( -1.0 + 0.0im , 1.0 + 0.0im , 1.0 + 0.0im , -3.0 + 0.0im )

julia&gt; f.M
2x2 Array{Complex{Float64},2}:
 -1.0+0.0im   1.0+0.0im
  1.0+0.0im  -3.0+0.0im"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f<span class="pl-k">.</span>M
<span class="pl-c1">2</span>x2 Array{Complex{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>   <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span></pre></div>
<h2 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h2>
<h3 dir="auto"><a id="user-content-function-application" class="anchor" aria-hidden="true" href="#function-application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function application</h3>
<p dir="auto">Since a <code>LFT</code> is a function, the most basic operation we may wish to
perform is applying that function of a complex number. That's done
with  <code>f(x)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(3,2,1,1)
LFT( 3.0 + 0.0im , 2.0 + 0.0im , 1.0 + 0.0im , 1.0 + 0.0im )

julia&gt; f(1)
2.5 + 0.0im

julia&gt; f(0)
2.0 + 0.0im

julia&gt; f(-1)
Inf + Inf*im

julia&gt; f(Inf)
3.0 + 0.0im

julia&gt; f(1+2im)
2.75 + 0.25im"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">LFT</span>( <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2.5</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">Inf</span>)
<span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)
<span class="pl-c1">2.75</span> <span class="pl-k">+</span> <span class="pl-c1">0.25im</span></pre></div>
<h3 dir="auto"><a id="user-content-composition-and-inverse" class="anchor" aria-hidden="true" href="#composition-and-inverse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Composition and inverse</h3>
<p dir="auto">The <code>*</code> operation is used for function composition.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(3,2,1,1);

julia&gt; g = LFT(0,1,-1,2);

julia&gt; f*g
LFT( -2.0 + 0.0im , 7.0 + 0.0im , -1.0 + 0.0im , 3.0 + 0.0im )

julia&gt; g*f
LFT( 1.0 + 0.0im , 1.0 + 0.0im , -1.0 + 0.0im , 0.0 + 0.0im )"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> f<span class="pl-k">*</span>g
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">7.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
<span class="pl-c1">LFT</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p dir="auto">The inverse of a <code>LFT</code> is computed with <code>inv</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(1,2,3,4);

julia&gt; g = inv(f)
LFT( 4.0 + 0.0im , -2.0 - 0.0im , -3.0 - 0.0im , 1.0 + 0.0im )

julia&gt; f*g
LFT( -2.0 + 0.0im , 0.0 + 0.0im , 0.0 + 0.0im , -2.0 + 0.0im )"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">inv</span>(f)
<span class="pl-c1">LFT</span>( <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )

julia<span class="pl-k">&gt;</span> f<span class="pl-k">*</span>g
<span class="pl-c1">LFT</span>( <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> , <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> )</pre></div>
<p dir="auto">Notice that the matrix representing <code>f*g</code> is a scaled version of the
identity matrix.</p>
<h2 dir="auto"><a id="user-content-equality-checking" class="anchor" aria-hidden="true" href="#equality-checking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Equality checking</h2>
<p dir="auto">We can use <code>==</code> or <code>isequal</code> to check if two <code>LFT</code> objects are
equal. Note that there is no unique matrix representation for a <code>LFT</code>
object and we might have that <code>f</code> and <code>g</code> are equal, but <code>f.M</code> and
<code>g.M</code> are different.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = LFT(1,2,3,4);

julia&gt; g = LFT(-2,-4,-6,-8);

julia&gt; f==g
true

julia&gt; f.M == g.M
false"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">LFT</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-k">-</span><span class="pl-c1">6</span>,<span class="pl-k">-</span><span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> f<span class="pl-k">==</span>g
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f<span class="pl-k">.</span>M <span class="pl-k">==</span> g<span class="pl-k">.</span>M
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-stereographic-projection-and-linear-fractional-transformations" class="anchor" aria-hidden="true" href="#stereographic-projection-and-linear-fractional-transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stereographic Projection and Linear Fractional Transformations</h2>
<h3 dir="auto"><a id="user-content-the-stereo-function" class="anchor" aria-hidden="true" href="#the-stereo-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>stereo</code> function</h3>
<p dir="auto">The function <code>stereo</code> maps points in the complex plane to points on a unit three-dimensional sphere centered at <code>[0,0,0]</code> via <a href="https://en.wikipedia.org/wiki/Stereographic_projection" rel="nofollow">sterographic projection</a>.</p>
<p dir="auto">The north pole, <code>[0,0,1]</code>, corresponds to complex infinity and the
south pole, <code>[0,0,-1]</code>, corresponds to <code>0+0im</code>.</p>
<p dir="auto">For a complex number <code>z</code>, <code>stereo(z)</code> maps <code>z</code> to the sphere. This may also be invoked as
<code>stereo(x,y)</code>.</p>
<p dir="auto">For a (unit) three-dimensional vector <code>v</code>, <code>stereo(v)</code> returns the complex number by projecting
<code>v</code> to the complex plane. This may also be invoked as <code>stereo(x,y,z)</code>. Note that the function does not check if <code>v</code> is a unit vector.</p>
<p dir="auto">Note that <code>stereo</code> is its own inverse.
That is, for a complex number <code>v</code>, we have <code>stereo(stereo(v))</code> should equal <code>v</code> were it not for
possible roundoff errors. Likewise for a unit three-dimensional real vector.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; z = 3-4im
3 - 4im

julia&gt; stereo(stereo(z))
3.000000000000002 - 4.000000000000003im

julia&gt; u = [1,2,2]/3       # this is a unit vector
3-element Vector{Float64}:
 0.3333333333333333
 0.6666666666666666
 0.6666666666666666

julia&gt; stereo(stereo(u))
3-element Vector{Float64}:
 0.3333333333333333
 0.6666666666666666
 0.6666666666666666"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">4im</span>
<span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">4im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stereo</span>(<span class="pl-c1">stereo</span>(z))
<span class="pl-c1">3.000000000000002</span> <span class="pl-k">-</span> <span class="pl-c1">4.000000000000003im</span>

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>]<span class="pl-k">/</span><span class="pl-c1">3</span>       <span class="pl-c"><span class="pl-c">#</span> this is a unit vector</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.3333333333333333</span>
 <span class="pl-c1">0.6666666666666666</span>
 <span class="pl-c1">0.6666666666666666</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stereo</span>(<span class="pl-c1">stereo</span>(u))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.3333333333333333</span>
 <span class="pl-c1">0.6666666666666666</span>
 <span class="pl-c1">0.6666666666666666</span></pre></div>
<h3 dir="auto"><a id="user-content-creating-a-lft-from-a-unitary-matrix-lftq" class="anchor" aria-hidden="true" href="#creating-a-lft-from-a-unitary-matrix-lftq"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a <code>LFT</code> from a unitary matrix: <code>LFTQ</code></h3>
<p dir="auto">Linear fractional transformations may be considered a mapping of a complex point to the unit sphere, followed by a rotation of the sphere, followed by a projection back to the complex plane.</p>
<p dir="auto">Specifically, if <code>Q</code> is a real, orthogonal 3-by-3 matrix [so <code>Q*Q'</code> is the identity and <code>det(Q)</code> equals 1, i.e., <code>Q</code> is in <a href="https://en.wikipedia.org/wiki/Stereographic_projection" rel="nofollow">SO(3)</a>], the function <code>LFTQ(Q)</code> returns a linear fractional transformation <code>F</code> with the property that for complex <code>z</code>, we have <code>F(z)</code> equal to <code>stereo(Q*(stereo(v)))</code>. Roundoff errors may occur.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra, LinearFractionalTransformations

julia&gt; Q,R = qr(randn(3,3));  # create a randon orthogonal matrix

julia&gt; det(Q)
1.0

julia&gt; Q' == inv(Q)   # verify that Q is in SO(3)
true

julia&gt; v = 5-im
5 - 1im

julia&gt; F = LFTQ(Q);

julia&gt; F(v)
1.0556981607448988 + 1.5029664004078547im

julia&gt; stereo(Q*stereo(v))
1.055698160744897 + 1.5029664004078531im   #  slightly different from F(v)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, LinearFractionalTransformations

julia<span class="pl-k">&gt;</span> Q,R <span class="pl-k">=</span> <span class="pl-c1">qr</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>));  <span class="pl-c"><span class="pl-c">#</span> create a randon orthogonal matrix</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">det</span>(Q)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> Q<span class="pl-k">'</span> <span class="pl-k">==</span> <span class="pl-c1">inv</span>(Q)   <span class="pl-c"><span class="pl-c">#</span> verify that Q is in SO(3)</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">5</span><span class="pl-k">-</span>im
<span class="pl-c1">5</span> <span class="pl-k">-</span> <span class="pl-c1">1im</span>

julia<span class="pl-k">&gt;</span> F <span class="pl-k">=</span> <span class="pl-c1">LFTQ</span>(Q);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(v)
<span class="pl-c1">1.0556981607448988</span> <span class="pl-k">+</span> <span class="pl-c1">1.5029664004078547im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stereo</span>(Q<span class="pl-k">*</span><span class="pl-c1">stereo</span>(v))
<span class="pl-c1">1.055698160744897</span> <span class="pl-k">+</span> <span class="pl-c1">1.5029664004078531im</span>   <span class="pl-c"><span class="pl-c">#</span>  slightly different from F(v)</span></pre></div>
</article></div>