<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dbinterfacejl" class="anchor" aria-hidden="true" href="#dbinterfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DBInterface.jl</h1>
<h3><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Purpose</h3>
<p>DBInterface.jl provides interface definitions to allow common database operations to be implemented consistently
across various database packages.</p>
<h3><a id="user-content-for-users" class="anchor" aria-hidden="true" href="#for-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>For Users</h3>
<p>To use DBInterface.jl, select an implementing database package, then utilize the consistent DBInterface.jl interface methods:</p>
<div class="highlight highlight-source-julia"><pre>conn <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">connect</span>(T, args<span class="pl-k">...</span>; kw<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> create a connection to a specific database T; required parameters are database-specific</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, sql) <span class="pl-c"><span class="pl-c">#</span> prepare a sql statement against the connection; returns a statement object</span>

results <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt) <span class="pl-c"><span class="pl-c">#</span> execute a prepared statement; returns an iterator of rows (property-accessible &amp; indexable)</span>

rowid <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">lastrowid</span>(results) <span class="pl-c"><span class="pl-c">#</span> get the last row id of an INSERT statement, as supported by the database</span>

<span class="pl-c"><span class="pl-c">#</span> example of using a query resultset</span>
<span class="pl-k">for</span> row <span class="pl-k">in</span> results
    <span class="pl-c1">@show</span> <span class="pl-c1">propertynames</span>(row) <span class="pl-c"><span class="pl-c">#</span> see possible column names of row results</span>
    row<span class="pl-k">.</span>col1 <span class="pl-c"><span class="pl-c">#</span> access the value of a column named `col1`</span>
    row[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> access the first column in the row results</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> results also implicitly satisfy the Tables.jl `Tables.rows` inteface, so any compatible sink can ingest results</span>
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(results)
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>results.csv<span class="pl-pds">"</span></span>, results)

results <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(conn, sql) <span class="pl-c"><span class="pl-c">#</span> convenience method if statement preparation/re-use isn't needed</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, <span class="pl-s"><span class="pl-pds">"</span>INSERT INTO test_table VALUES(?, ?)<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> prepare a statement with positional parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt, [<span class="pl-c1">1</span>, <span class="pl-c1">3.14</span>]) <span class="pl-c"><span class="pl-c">#</span> execute the prepared INSERT statement, passing 1 and 3.14 as positional parameters</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, <span class="pl-s"><span class="pl-pds">"</span>INSERT INTO test_table VALUES(:col1, :col2)<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> prepare a statement with named parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt, (col1<span class="pl-k">=</span><span class="pl-c1">1</span>, col2<span class="pl-k">=</span><span class="pl-c1">3.14</span>)) <span class="pl-c"><span class="pl-c">#</span> execute the prepared INSERT statement, with 1 and 3.14 as named parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">executemany</span>(stmt, (col1<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>], col2<span class="pl-k">=</span>[<span class="pl-c1">3.14</span>, <span class="pl-c1">1.23</span>, <span class="pl-c1">2.34</span> <span class="pl-c1">3.45</span>, <span class="pl-c1">4.56</span>])) <span class="pl-c"><span class="pl-c">#</span> execute the prepared statement multiple times for each set of named parameters; each named parameter must be an indexable collection</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">close!</span>(stmt) <span class="pl-c"><span class="pl-c">#</span> close the prepared statement</span></pre></div>
<h3><a id="user-content-for-database-package-developers" class="anchor" aria-hidden="true" href="#for-database-package-developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>For Database Package Developers</h3>
<p>See the documentation for the following to understand required types and inheritance, as well as functions to overload:</p>
<div class="highlight highlight-source-julia"><pre>DBInterface<span class="pl-k">.</span>Connection
DBInterface<span class="pl-k">.</span>connect
DBInterface<span class="pl-k">.</span>close!
DBInterface<span class="pl-k">.</span>Statement
DBInterface<span class="pl-k">.</span>prepare
DBInterface<span class="pl-k">.</span>execute
DBInterface<span class="pl-k">.</span>lastrowid</pre></div>
</article></div>