<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dbinterfacejl" class="anchor" aria-hidden="true" href="#dbinterfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DBInterface.jl</h1>
<p><a href="https://juliahub.com/ui/Packages/DBInterface/bSj9k?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/600346fa90eb591475f875ead52cb867f2ee68eef45185975676f196234c3db7/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4442496e746572666163652f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/DBInterface/deps.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/DBInterface/bSj9k" rel="nofollow"><img src="https://camo.githubusercontent.com/1c6ffec93f031067370d40632025e986d3694798a4ad8bb5f5be569f938738b5/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4442496e746572666163652f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/DBInterface/version.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/DBInterface/bSj9k" rel="nofollow"><img src="https://camo.githubusercontent.com/173834224fbac565271f362e1e78ffe7bbca9d9326d33afd104e356bb39a5877/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4442496e746572666163652f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/DBInterface/pkgeval.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Purpose</h3>
<p>DBInterface.jl provides interface definitions to allow common database operations to be implemented consistently
across various database packages.</p>
<h3><a id="user-content-for-users" class="anchor" aria-hidden="true" href="#for-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>For Users</h3>
<p>To use DBInterface.jl, select an implementing database package, then utilize the consistent DBInterface.jl interface methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="conn = DBInterface.connect(T, args...; kw...) # create a connection to a specific database T; required parameters are database-specific

stmt = DBInterface.prepare(conn, sql) # prepare a sql statement against the connection; returns a statement object

results = DBInterface.execute(stmt) # execute a prepared statement; returns an iterator of rows (property-accessible &amp; indexable)

rowid = DBInterface.lastrowid(results) # get the last row id of an INSERT statement, as supported by the database

# example of using a query resultset
for row in results
    @show propertynames(row) # see possible column names of row results
    row.col1 # access the value of a column named `col1`
    row[1] # access the first column in the row results
end

# results also implicitly satisfy the Tables.jl `Tables.rows` inteface, so any compatible sink can ingest results
df = DataFrame(results)
CSV.write(&quot;results.csv&quot;, results)

results = DBInterface.execute(conn, sql) # convenience method if statement preparation/re-use isn't needed

stmt = DBInterface.prepare(conn, &quot;INSERT INTO test_table VALUES(?, ?)&quot;) # prepare a statement with positional parameters

DBInterface.execute(stmt, [1, 3.14]) # execute the prepared INSERT statement, passing 1 and 3.14 as positional parameters

stmt = DBInterface.prepare(conn, &quot;INSERT INTO test_table VALUES(:col1, :col2)&quot;) # prepare a statement with named parameters

DBInterface.execute(stmt, (col1=1, col2=3.14)) # execute the prepared INSERT statement, with 1 and 3.14 as named parameters

DBInterface.executemany(stmt, (col1=[1,2,3,4,5], col2=[3.14, 1.23, 2.34 3.45, 4.56])) # execute the prepared statement multiple times for each set of named parameters; each named parameter must be an indexable collection

results = DBInterface.executemultiple(conn, sql) # where sql is a query that returns multiple resultsets

# first iterate through resultsets
for result in results
    # for each resultset, we can iterate through resultset rows
    for row in result
        @show propertynames(row)
        row.col1
        row[1]
    end
end

DBInterface.close!(stmt) # close the prepared statement
DBInterface.close!(conn) # close connection
"><pre>conn <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">connect</span>(T, args<span class="pl-k">...</span>; kw<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> create a connection to a specific database T; required parameters are database-specific</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, sql) <span class="pl-c"><span class="pl-c">#</span> prepare a sql statement against the connection; returns a statement object</span>

results <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt) <span class="pl-c"><span class="pl-c">#</span> execute a prepared statement; returns an iterator of rows (property-accessible &amp; indexable)</span>

rowid <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">lastrowid</span>(results) <span class="pl-c"><span class="pl-c">#</span> get the last row id of an INSERT statement, as supported by the database</span>

<span class="pl-c"><span class="pl-c">#</span> example of using a query resultset</span>
<span class="pl-k">for</span> row <span class="pl-k">in</span> results
    <span class="pl-c1">@show</span> <span class="pl-c1">propertynames</span>(row) <span class="pl-c"><span class="pl-c">#</span> see possible column names of row results</span>
    row<span class="pl-k">.</span>col1 <span class="pl-c"><span class="pl-c">#</span> access the value of a column named `col1`</span>
    row[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> access the first column in the row results</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> results also implicitly satisfy the Tables.jl `Tables.rows` inteface, so any compatible sink can ingest results</span>
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(results)
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>results.csv<span class="pl-pds">"</span></span>, results)

results <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(conn, sql) <span class="pl-c"><span class="pl-c">#</span> convenience method if statement preparation/re-use isn't needed</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, <span class="pl-s"><span class="pl-pds">"</span>INSERT INTO test_table VALUES(?, ?)<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> prepare a statement with positional parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt, [<span class="pl-c1">1</span>, <span class="pl-c1">3.14</span>]) <span class="pl-c"><span class="pl-c">#</span> execute the prepared INSERT statement, passing 1 and 3.14 as positional parameters</span>

stmt <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">prepare</span>(conn, <span class="pl-s"><span class="pl-pds">"</span>INSERT INTO test_table VALUES(:col1, :col2)<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> prepare a statement with named parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(stmt, (col1<span class="pl-k">=</span><span class="pl-c1">1</span>, col2<span class="pl-k">=</span><span class="pl-c1">3.14</span>)) <span class="pl-c"><span class="pl-c">#</span> execute the prepared INSERT statement, with 1 and 3.14 as named parameters</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">executemany</span>(stmt, (col1<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>], col2<span class="pl-k">=</span>[<span class="pl-c1">3.14</span>, <span class="pl-c1">1.23</span>, <span class="pl-c1">2.34</span> <span class="pl-c1">3.45</span>, <span class="pl-c1">4.56</span>])) <span class="pl-c"><span class="pl-c">#</span> execute the prepared statement multiple times for each set of named parameters; each named parameter must be an indexable collection</span>

results <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">executemultiple</span>(conn, sql) <span class="pl-c"><span class="pl-c">#</span> where sql is a query that returns multiple resultsets</span>

<span class="pl-c"><span class="pl-c">#</span> first iterate through resultsets</span>
<span class="pl-k">for</span> result <span class="pl-k">in</span> results
    <span class="pl-c"><span class="pl-c">#</span> for each resultset, we can iterate through resultset rows</span>
    <span class="pl-k">for</span> row <span class="pl-k">in</span> result
        <span class="pl-c1">@show</span> <span class="pl-c1">propertynames</span>(row)
        row<span class="pl-k">.</span>col1
        row[<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

DBInterface<span class="pl-k">.</span><span class="pl-c1">close!</span>(stmt) <span class="pl-c"><span class="pl-c">#</span> close the prepared statement</span>
DBInterface<span class="pl-k">.</span><span class="pl-c1">close!</span>(conn) <span class="pl-c"><span class="pl-c">#</span> close connection</span></pre></div>
<h3><a id="user-content-for-database-package-developers" class="anchor" aria-hidden="true" href="#for-database-package-developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>For Database Package Developers</h3>
<p>See the <a href="https://juliadatabases.org/DBInterface.jl/dev" rel="nofollow">documentation</a> for expanded details on required interface methods.</p>
</article></div>