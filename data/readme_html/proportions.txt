<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-proportions" class="anchor" aria-hidden="true" href="#proportions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proportions</h1>
<p dir="auto"><a href="https://travis-ci.com/hillelawaskar/Proportions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/832b875ef884843f9d4289bd8a760f03b3ce623b03915f5c163e99164e71f264/68747470733a2f2f7472617669732d63692e636f6d2f68696c6c656c617761736b61722f50726f706f7274696f6e732e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/hillelawaskar/Proportions.jl.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/hillelawaskar/Proportions-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50e35dba7ff84c37eb4ba29ae4c28a4d8af608022d468e8e6c1de3c769d5da6d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f68696c6c656c617761736b61722f50726f706f7274696f6e732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/hillelawaskar/Proportions.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/hillelawaskar/Proportions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d3aac09ebb98df13afa4371d812d20bd53f599c27c1384d732a8d60619b8d458/68747470733a2f2f636f6465636f762e696f2f67682f68696c6c656c617761736b61722f50726f706f7274696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/hillelawaskar/Proportions.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/hillelawaskar/Proportions.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/de7f57f0b6555916b0d9ebd9c8859120a84bfe814f75bfdfae713e499c126ead/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f68696c6c656c617761736b61722f50726f706f7274696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/hillelawaskar/Proportions.jl/badge.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><a id="user-content-documenter-settings-button" href="#" title="Settings"></a><a id="user-content-documenter-sidebar-button" href="#"></a></p><h1 id="user-content-proportions" dir="auto"><a id="user-content-proportions-1" class="anchor" aria-hidden="true" href="#proportions-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="#Proportions">Proportions</a><a id="user-content-Proportions-1"></a><a href="#Proportions" title="Permalink"></a></h1><p dir="auto"><em>The best Proportions package.</em></p><h2 id="user-content-package-features" dir="auto"><a id="user-content-package-features" class="anchor" aria-hidden="true" href="#package-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="#Package-Features">Package Features</a><a id="user-content-Package-Features-1"></a><a href="#Package-Features" title="Permalink"></a></h2><ul dir="auto"><li>Provides functions to provide proportionality for vector/matrix data</li><li>It can be used in various applications to split any values in a particular proportion</li><li>Examples:</li><li>1 Split a Number in proportions of a factor in vector/matrix</li><li>2 Split an payment schedule in various proportions</li><li>3 Split an payment based on the deliver of goods received</li></ul><h1 id="user-content-documentation" dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="#Documentation">Documentation</a><a id="user-content-Documentation-1"></a><a href="#Documentation" title="Permalink"></a></h1><a id="user-content-proportions.get_proportion-tuple{abstractvector{float64}}" href="#Proportions.get_proportion-Tuple{AbstractVector{Float64}}"><code>Proportions.get_proportion</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion(for_prop_arr::AbstractVector{Float64})::AbstractVector{Float64}"><pre class="notranslate"><code>get_proportion(for_prop_arr::AbstractVector{Float64})::AbstractVector{Float64}</code></pre></div><p dir="auto">Compute the proportional values for each element in the 1D array. returns a AbstractVector{Float64}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion([1.0,2.0,3.0,4.0,5.0,34.0000034,2423,5656.98988])
[0.00012301651427098885, 0.0002460330285419777, 0.00036904954281296654, 0.0004920660570839554, 0.0006150825713549442, 0.004182561903469769, 0.298069014078606, 0.6959031763038594]"><pre class="notranslate"><code>julia&gt; get_proportion([1.0,2.0,3.0,4.0,5.0,34.0000034,2423,5656.98988])
[0.00012301651427098885, 0.0002460330285419777, 0.00036904954281296654, 0.0004920660570839554, 0.0006150825713549442, 0.004182561903469769, 0.298069014078606, 0.6959031763038594]</code></pre></div></div></section><a id="user-content-proportions.get_proportion_2d-tuple{abstractmatrix{float64}}" href="#Proportions.get_proportion_2d-Tuple{AbstractMatrix{Float64}}"><code>Proportions.get_proportion_2d</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion_2d(for_prop_arr::AbstractArray{Float64, 2})::AbstractArray{Float64, 2}"><pre class="notranslate"><code>get_proportion_2d(for_prop_arr::AbstractArray{Float64, 2})::AbstractArray{Float64, 2}</code></pre></div><p dir="auto">Compute the proportional values for each element in the 2d array. returns a AbstractArray{Float64, 2}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion_2d([1.0 2.0 ; 4.0 5.0])
=[0.08333333333333333 0.16666666666666666; 0.3333333333333333 0.4166666666666667]"><pre class="notranslate"><code>julia&gt; get_proportion_2d([1.0 2.0 ; 4.0 5.0])
=[0.08333333333333333 0.16666666666666666; 0.3333333333333333 0.4166666666666667]</code></pre></div></div></section><a id="user-content-proportions.get_proportion_round-tuple{abstractvector{float64}}" href="#Proportions.get_proportion_round-Tuple{AbstractVector{Float64}}"><code>Proportions.get_proportion_round</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion_round(for_prop_arr::AbstractVector{Float64};round_digits::Int64)::AbstractVector{Float64}"><pre class="notranslate"><code>get_proportion_round(for_prop_arr::AbstractVector{Float64};round_digits::Int64)::AbstractVector{Float64}</code></pre></div><p dir="auto">Compute the proportional values for each element in the array and round to a specified decimal digits. If the sum of all the elements is not 1 , then the adjustment is done in the 1st largest element returns a AbstractVector{Float64}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion_round([1.33,1.33,1.23,1.1111],round_digits = 2)
=[0.26, 0.27, 0.25, 0.22]"><pre class="notranslate"><code>julia&gt; get_proportion_round([1.33,1.33,1.23,1.1111],round_digits = 2)
=[0.26, 0.27, 0.25, 0.22]</code></pre></div></div></section><a id="user-content-proportions.get_proportion_round_2d-tuple{abstractmatrix{float64}}" href="#Proportions.get_proportion_round_2d-Tuple{AbstractMatrix{Float64}}"><code>Proportions.get_proportion_round_2d</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion_round_2d(for_prop_arr::AbstractArray{Float64, 2};round_digits::Int64)::AbstractArray{Float64, 2}"><pre class="notranslate"><code>get_proportion_round_2d(for_prop_arr::AbstractArray{Float64, 2};round_digits::Int64)::AbstractArray{Float64, 2}</code></pre></div><p dir="auto">Compute the proportional values for each element in the 2d array and round to a specified decimal digits. If the sum of all the elements is not 1 , then the adjustment is done in the 1st largest element returns a AbstractArray{Float64, 1}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion_round_2d([1.1101 2.243 ; 4.9898 5.87],round_digits=5)
=[0.07811 0.15781; 0.35108 0.413]"><pre class="notranslate"><code>julia&gt; get_proportion_round_2d([1.1101 2.243 ; 4.9898 5.87],round_digits=5)
=[0.07811 0.15781; 0.35108 0.413]</code></pre></div></div></section><a id="user-content-proportions.get_proportion_round_add1251-tuple{abstractvector{float64}}" href="#Proportions.get_proportion_round_add1251-Tuple{AbstractVector{Float64}}"><code>Proportions.get_proportion_round_add1251</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion_round_add1251(for_prop_arr::AbstractVector{Float64};round_digits::Int64)::AbstractVector{Float64}"><pre class="notranslate"><code>get_proportion_round_add1251(for_prop_arr::AbstractVector{Float64};round_digits::Int64)::AbstractVector{Float64}</code></pre></div><p dir="auto">Compute the proportional values for each element in the array and round to a specified decimal digits. If the sum of all the elements is not 1 , then add 1251 to the array and try looking for proportional correctness after 2 itterations , the adjustment is done in the 1st largest element returns a AbstractVector{Float64}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion_round_add1251([1.33,1.33,1.23,1.1111],round_digits = 2)
=[0.26, 0.27, 0.25, 0.22]"><pre class="notranslate"><code>julia&gt; get_proportion_round_add1251([1.33,1.33,1.23,1.1111],round_digits = 2)
=[0.26, 0.27, 0.25, 0.22]</code></pre></div></div></section><a id="user-content-proportions.get_proportion_round_add1251_2d-tuple{abstractmatrix{float64}}" href="#Proportions.get_proportion_round_add1251_2d-Tuple{AbstractMatrix{Float64}}"><code>Proportions.get_proportion_round_add1251_2d</code></a> — <span>Method</span><section><div dir="auto"><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_proportion_round_add1251(for_prop_arr::AbstractArray{Float64, 2};round_digits::Int64)::AbstractArray{Float64, 2}"><pre class="notranslate"><code>get_proportion_round_add1251(for_prop_arr::AbstractArray{Float64, 2};round_digits::Int64)::AbstractArray{Float64, 2}</code></pre></div><p dir="auto">Compute the proportional values for each element in the 2d array and round to a specified decimal digits. If the sum of all the elements is not 1 , then add 1251 to the array and try looking for proportional correctness after 2 itterations , the adjustment is done in the 1st largest element returns a AbstractArray{Float64, 2}</p><p dir="auto"><strong>Example</strong></p><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_proportion_round_add1251_2d([1.1101 2.243 ; 4.9898 5.87 ; 34.333 6.78],round_digits=8)
=[0.16559399 0.16574381; 0.16610708 0.16622349; 0.16998779 0.16634384]"><pre class="notranslate"><code>julia&gt; get_proportion_round_add1251_2d([1.1101 2.243 ; 4.9898 5.87 ; 34.333 6.78],round_digits=8)
=[0.16559399 0.16574381; 0.16610708 0.16622349; 0.16998779 0.16634384]</code></pre></div></div></section><p dir="auto"></p>
</article></div>