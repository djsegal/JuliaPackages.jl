<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-narrativetestjl" class="anchor" aria-hidden="true" href="#narrativetestjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NarrativeTest.jl</h1>
<p dir="auto"><em>NarrativeTest is a Julia library for functional testing, which lets you write
the test suite in the narrative form.  It permits you to describe the behavior
of software components in the Markdown format, and then extract, execute, and
validate any embedded test code.</em></p>
<p dir="auto"><a href="https://github.com/MechanicalRabbit/NarrativeTest.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/MechanicalRabbit/NarrativeTest.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/MechanicalRabbit/NarrativeTest.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4082b225c92308be80a8bd3072f9bf47e619bd1343d1e359416cbb4e8de86fcd/68747470733a2f2f636f6465636f762e696f2f67682f4d656368616e6963616c5261626269742f4e6172726174697665546573742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Code Coverage Status" data-canonical-src="https://codecov.io/gh/MechanicalRabbit/NarrativeTest.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/MechanicalRabbit/NarrativeTest.jl/issues"><img src="https://camo.githubusercontent.com/37b393ff42995bdccbc490ae179531dcdb1054e288c0d88cf90e8b2434e290c9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4d656368616e6963616c5261626269742f4e6172726174697665546573742e6a6c2e737667" alt="Open Issues" data-canonical-src="https://img.shields.io/github/issues/MechanicalRabbit/NarrativeTest.jl.svg" style="max-width: 100%;"></a>
<a href="https://mechanicalrabbit.github.io/NarrativeTest.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/e2883e1ea813afddfe5d244b274426ea75d5a19db99791c80d912a7d410048ea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f632d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/doc-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://raw.githubusercontent.com/MechanicalRabbit/NarrativeTest.jl/master/LICENSE.md" rel="nofollow"><img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">Install the package using the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;NarrativeTest&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NarrativeTest<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Add NarrativeTest to your package as <a href="https://julialang.github.io/Pkg.jl/v1/creating-packages/#Adding-tests-to-the-package-1" rel="nofollow">a test-specific
dependency</a>.
Then create the following <code>test/runtests.jl</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NarrativeTest
NarrativeTest.runtests()"><pre><span class="pl-k">using</span> NarrativeTest
NarrativeTest<span class="pl-k">.</span><span class="pl-c1">runtests</span>()</pre></div>
<p dir="auto">If you are already relying on the standard <code>Test</code> library, you can add
NarrativeTest as a nested test set:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test, NarrativeTest

@testset &quot;MyPackage&quot; begin
    …
    NarrativeTest.testset()
    …
end"><pre><span class="pl-k">using</span> Test, NarrativeTest

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>MyPackage<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    …
    NarrativeTest<span class="pl-k">.</span><span class="pl-c1">testset</span>()
    …
<span class="pl-k">end</span></pre></div>
<p dir="auto">Write the test suite in Markdown and save it in the <code>test</code> directory.  Place
the test code in Markdown code blocks, and use comments <code>#-&gt; …</code> and <code>#=&gt; … =#</code>
to indicate the expected output.  For example:</p>
<div class="highlight highlight-source-gfm notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Sample test suite

Verify that the expression evaluates to the expected value:

    6(3+4)          #-&gt; 42

Check if the code produces the expected output:

    print(&quot;Hello &quot;)
    print(&quot;World!&quot;)
    #-&gt; Hello World!

Abbreviate the output with ellipsis:

    collect('a':'z')
    #-&gt; ['a', 'b', …, 'z']

    display(collect('a':'z'))
    #=&gt;
    26-element Array{Char,1}:
     'a'
     'b'
     ⋮
     'z'
    =#"><pre><span class="pl-mh"><span class="pl-mh">#</span><span class="pl-mh"> </span>Sample test suite</span>

Verify that the expression evaluates to the expected value:

    6(3+4)          #-&gt; 42

Check if the code produces the expected output:

    print("Hello ")
    print("World!")
    #-&gt; Hello World!

Abbreviate the output with ellipsis:

    collect('a':'z')
    #-&gt; ['a', 'b', …, 'z']

    display(collect('a':'z'))
    #=&gt;
    26-element Array{Char,1}:
     'a'
     'b'
     ⋮
     'z'
    =#</pre></div>
<p dir="auto">To test your package, run:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia ./test/runtests.jl"><pre>$ <span class="pl-s1">julia ./test/runtests.jl</span></pre></div>
<p dir="auto">For more information, see the <a href="https://mechanicalrabbit.github.io/NarrativeTest.jl/dev/" rel="nofollow"><strong>Documentation</strong></a>.</p>
</article></div>