<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-valsplitjl" class="anchor" aria-hidden="true" href="#valsplitjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ValSplit.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/94142ede13344744836d89b08a43936aca4680ec60def391be0c4042961863aa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f7a74616e67656e742f56616c53706c69742e6a6c2f4349"><img src="https://camo.githubusercontent.com/94142ede13344744836d89b08a43936aca4680ec60def391be0c4042961863aa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f7a74616e67656e742f56616c53706c69742e6a6c2f4349" alt="GitHub Workflow Status" data-canonical-src="https://img.shields.io/github/workflow/status/ztangent/ValSplit.jl/CI" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a4e51803ad42d0a890fabe2ea5c5f8ee04689a9b0900a30c108cb9432c434052/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f7a74616e67656e742f56616c53706c69742e6a6c"><img src="https://camo.githubusercontent.com/a4e51803ad42d0a890fabe2ea5c5f8ee04689a9b0900a30c108cb9432c434052/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f7a74616e67656e742f56616c53706c69742e6a6c" alt="GitHub release (latest SemVer)" data-canonical-src="https://img.shields.io/github/v/release/ztangent/ValSplit.jl" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0e20d69f49c2788959dd78ef88db5d9bc93d4489a9acdd69ce49a7c30b5921ee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7a74616e67656e742f56616c53706c69742e6a6c3f636f6c6f723d6c6967687467726579"><img src="https://camo.githubusercontent.com/0e20d69f49c2788959dd78ef88db5d9bc93d4489a9acdd69ce49a7c30b5921ee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7a74616e67656e742f56616c53706c69742e6a6c3f636f6c6f723d6c6967687467726579" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/ztangent/ValSplit.jl?color=lightgrey" style="max-width: 100%;"></a></p>
<p dir="auto">Compile away dynamic dispatch over methods with <code>Val</code>-typed arguments by "<code>Val</code>-splitting" (similar to <a href="https://julialang.org/blog/2018/08/union-splitting/" rel="nofollow">union splitting</a>) using the <code>@valsplit</code> macro. By annotating a function definition with <code>@valsplit</code> and choosing arguments to split upon, the resulting function will be a switch statement over all <code>Val</code> parameters associated with the chosen arguments. Requires Julia 1.3 and above.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">ValSplit.jl is a registered package. To install, press <code>]</code> at the Julia REPL to enter <code>Pkg</code> mode, then run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add ValSplit"><pre class="notranslate"><code>add ValSplit
</code></pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Suppose we have a function <code>soundof</code> that takes in a <code>Val</code>-typed argument,  and returns how an animal sounds:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="soundof(animal::Val{:dog}) = &quot;woof&quot;
soundof(animal::Val{:cat}) = &quot;nyan&quot;"><pre><span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{:dog}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>woof<span class="pl-pds">"</span></span>
<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{:cat}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>nyan<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">We might want a version of <code>soundof</code> that takes in <code>Symbol</code> values directly, and hence define:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="soundof(animal::Symbol) = soundof(Val(animal))"><pre><span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> <span class="pl-c1">soundof</span>(<span class="pl-c1">Val</span>(animal))</pre></div>
<p dir="auto">However, when using <code>soundof(animal::Symbol)</code> in another function, dynamic dispatch might occur if Julia cannot infer the value of the argument <code>animal</code> at compile time, resulting in <a href="https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-value-type" rel="nofollow">considerable slowdowns</a>.</p>
<p dir="auto">Using <code>@valsplit</code>, we can avoid this issue by <em>compiling away the dispatch logic as a switch statement</em>. We do this simply by annotating our method definition with <code>@valsplit</code>, and annotating each argument <code>x::T</code> we want to switch upon as <code>Val(x::T)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@valsplit function soundof(Val(animal::Symbol))
    error(&quot;Sound not defined for animal: \$animal&quot;)
end"><pre><span class="pl-c1">@valsplit</span> <span class="pl-k">function</span> <span class="pl-en">soundof</span>(<span class="pl-c1">Val</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>))
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Sound not defined for animal: <span class="pl-cce">\$</span>animal<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The resulting function effectively compiles to the following switch statement,  where the original method body is used as the default branch:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function soundof(animal::Symbol)
    if animal == :dog
        return &quot;woof&quot;
    elseif animal == :cat
        return &quot;nyan&quot;
    else
        error(&quot;Sound not defined for animal: \$animal&quot;)
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)
    <span class="pl-k">if</span> animal <span class="pl-k">==</span> <span class="pl-c1">:dog</span>
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>woof<span class="pl-pds">"</span></span>
    <span class="pl-k">elseif</span> animal <span class="pl-k">==</span> <span class="pl-c1">:cat</span>
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>nyan<span class="pl-pds">"</span></span>
    <span class="pl-k">else</span>
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Sound not defined for animal: <span class="pl-cce">\$</span>animal<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">However, unlike a manually-written switch statement, <code>@valsplit</code>-defined functions will automatically recompile when new methods are added. For example, if we add the method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="soundof(animal::Val{:human}) = &quot;meh&quot;"><pre><span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{:human}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>meh<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Then <code>soundof(animal::Symbol)</code> will recompile to a switch statement with an additional branch:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function soundof(animal::Symbol)
    if animal == :dog
        return &quot;woof&quot;
    elseif animal == :cat
        return &quot;nyan&quot;
    elseif animal == :human
        return &quot;meh&quot;
    else
        error(&quot;Sound not defined for animal: \$animal&quot;)
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)
    <span class="pl-k">if</span> animal <span class="pl-k">==</span> <span class="pl-c1">:dog</span>
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>woof<span class="pl-pds">"</span></span>
    <span class="pl-k">elseif</span> animal <span class="pl-k">==</span> <span class="pl-c1">:cat</span>
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>nyan<span class="pl-pds">"</span></span>
    <span class="pl-k">elseif</span> animal <span class="pl-k">==</span> <span class="pl-c1">:human</span>
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>meh<span class="pl-pds">"</span></span>
    <span class="pl-k">else</span>
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Sound not defined for animal: <span class="pl-cce">\$</span>animal<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">As such, <code>@valsplit</code>-annotated functions preserve extensibility, while achieving the run-time performance of switch statements (or better, if constant propagation results in compile-time pruning of branches).</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">The <code>@valsplit</code> macro is intended to address the following two issues:</p>
<ul dir="auto">
<li>Dynamic dispatch over <code>Val</code>-typed arguments is slow</li>
<li>Alternative solutions such as manually-written switch statements and global dictionaries are often insufficient for the purposes of extensibility.</li>
</ul>
<p dir="auto">Note that dynamic dispatch does not always occur: When there are a small number of values to split on (less than 4, as of Julia 1.6), the Julia compiler automatically generates a switch statement:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="soundof(animal::Val{:dog}) = &quot;woof&quot;
soundof(animal::Val{:cat}) = &quot;nyan&quot;
soundof(animal::Symbol) = soundof(Val(animal))

julia&gt; @code_typed soundof(:cat)
CodeInfo(
1 ─ %1  = invoke Main.Val(_2::Symbol)::Val{_A} where _A
│   %2  = (isa)(%1, Val{:cat})::Bool
└──       goto #3 if not %2
2 ─       goto #6
3 ─ %5  = (isa)(%1, Val{:dog})::Bool
└──       goto #5 if not %5
4 ─       goto #6
5 ─ %8  = Main.soundof(%1)::String
└──       goto #6
6 ┄ %10 = φ (#2 =&gt; &quot;nyan&quot;, #4 =&gt; &quot;woof&quot;, #5 =&gt; %8)::String
└──       return %10
) =&gt; String"><pre><span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{:dog}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>woof<span class="pl-pds">"</span></span>
<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{:cat}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>nyan<span class="pl-pds">"</span></span>
<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> <span class="pl-c1">soundof</span>(<span class="pl-c1">Val</span>(animal))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">soundof</span>(<span class="pl-c1">:cat</span>)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span>  <span class="pl-k">=</span> invoke Main<span class="pl-k">.</span><span class="pl-c1">Val</span>(_2<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)<span class="pl-k">::</span><span class="pl-c1">Val{_A}</span> <span class="pl-k">where</span> _A
│   <span class="pl-k">%</span><span class="pl-c1">2</span>  <span class="pl-k">=</span> (isa)(<span class="pl-k">%</span><span class="pl-c1">1</span>, Val{<span class="pl-c1">:cat</span>})<span class="pl-k">::</span><span class="pl-c1">Bool</span>
└──       goto <span class="pl-c"><span class="pl-c">#</span>3 if not %2</span>
<span class="pl-c1">2</span> ─       goto <span class="pl-c"><span class="pl-c">#</span>6</span>
<span class="pl-c1">3</span> ─ <span class="pl-k">%</span><span class="pl-c1">5</span>  <span class="pl-k">=</span> (isa)(<span class="pl-k">%</span><span class="pl-c1">1</span>, Val{<span class="pl-c1">:dog</span>})<span class="pl-k">::</span><span class="pl-c1">Bool</span>
└──       goto <span class="pl-c"><span class="pl-c">#</span>5 if not %5</span>
<span class="pl-c1">4</span> ─       goto <span class="pl-c"><span class="pl-c">#</span>6</span>
<span class="pl-c1">5</span> ─ <span class="pl-k">%</span><span class="pl-c1">8</span>  <span class="pl-k">=</span> Main<span class="pl-k">.</span><span class="pl-c1">soundof</span>(<span class="pl-k">%</span><span class="pl-c1">1</span>)<span class="pl-k">::</span><span class="pl-c1">String</span>
└──       goto <span class="pl-c"><span class="pl-c">#</span>6</span>
<span class="pl-c1">6</span> ┄ <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> φ (<span class="pl-c"><span class="pl-c">#</span>2 =&gt; "nyan", #4 =&gt; "woof", #5 =&gt; %8)::String</span>
└──       <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">10</span>
) <span class="pl-k">=&gt;</span> String</pre></div>
<p dir="auto">But once more methods are defined, the Julia compiler no longer performs this optimization:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for i in 1:4
    sound = &quot;sound $i&quot;
    eval(:(soundof(animal::Val{Symbol(:animal, $i)}) = $sound))
end
soundof(animal::Symbol) = soundof(Val(animal))

julia&gt; @code_typed soundof(:animal1)
CodeInfo(
1 ─ %1 = invoke Main.Val(_2::Symbol)::Val{_A} where _A
│   %2 = Main.soundof(%1)::Any
└──      return %2
) =&gt; Any"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
    sound <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sound <span class="pl-v">$i</span><span class="pl-pds">"</span></span>
    <span class="pl-en">eval</span>(:(<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Val{Symbol(:animal, $i)}</span>) <span class="pl-k">=</span> <span class="pl-k">$</span>sound))
<span class="pl-k">end</span>
<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> <span class="pl-c1">soundof</span>(<span class="pl-c1">Val</span>(animal))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">soundof</span>(<span class="pl-c1">:animal1</span>)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">=</span> invoke Main<span class="pl-k">.</span><span class="pl-c1">Val</span>(_2<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)<span class="pl-k">::</span><span class="pl-c1">Val{_A}</span> <span class="pl-k">where</span> _A
│   <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> Main<span class="pl-k">.</span><span class="pl-c1">soundof</span>(<span class="pl-k">%</span><span class="pl-c1">1</span>)<span class="pl-k">::</span><span class="pl-c1">Any</span>
└──      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">2</span>
) <span class="pl-k">=&gt;</span> Any</pre></div>
<p dir="auto">To avoid dynamic dispatch, manually switching on a set of values is the fastest in terms of both compile-time and run-time, but the set of values to switch upon cannot be extended. Global dictionaries can partially address this problem by associating values with code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const SOUND_OF = Dict{Symbol,Function}()

woof() = &quot;woof&quot;
SOUND_OF[:dog] = woof

nyan() = &quot;nyan&quot;
SOUND_OF[:cat] = nyan

soundof(animal::Symbol) = SOUND_OF[animal]()"><pre><span class="pl-k">const</span> SOUND_OF <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Function}</span>()

<span class="pl-en">woof</span>() <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>woof<span class="pl-pds">"</span></span>
SOUND_OF[<span class="pl-c1">:dog</span>] <span class="pl-k">=</span> woof

<span class="pl-en">nyan</span>() <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>nyan<span class="pl-pds">"</span></span>
SOUND_OF[<span class="pl-c1">:cat</span>] <span class="pl-k">=</span> nyan

<span class="pl-en">soundof</span>(animal<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> SOUND_OF[animal]()</pre></div>
<p dir="auto">However, dictionary lookup times <a href="https://groups.google.com/g/julia-users/c/jUMu9A3QKQQ/m/qjgVWr7vAwAJ" rel="nofollow">are usually slower</a> compared to (small) switch statements. In addition, this approach <a href="https://docs.julialang.org/en/v1/manual/modules/#Module-initialization-and-precompilation" rel="nofollow">runs into issues with precompilation</a>, preventing a downstream module from adding new entries to a global dictionary defined in another module (except at run-time using the <code>__init__</code> function). In other words, global dictionaries are not extensible across module boundaries.</p>
<p dir="auto">The <code>@valsplit</code> macro addresses this problem because new methods can always be introduced by downstream modules, resulting in recompilation of the <code>@valsplit</code> annotated function. It effectively uses Julia's method table as a global dictionary, but avoids the overhead of dynamic dispatch using the same <code>@generated</code> function tricks used to implement <code>static_hasmethod</code> in <a href="https://github.com/oxinabox/Tricks.jl"><code>Tricks.jl</code></a>.</p>
<p dir="auto">A small benchmark is <a href="benchmarks/benchmarks.jl">provided here</a>. With 10 values to branch on, running Julia 1.6.1 on a Windows machine, the results of the benchmark are as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Manual switch statement:
  3.275 μs (0 allocations: 0 bytes)
Global Dict{Symbol,String}:
  78.800 μs (0 allocations: 0 bytes)
Global LittleDict{Symbol,String}:
  111.600 μs (0 allocations: 0 bytes)
Dynamic dispatch:
  2.300 ms (0 allocations: 0 bytes)
Val-splitting with @valsplit:
  3.275 μs (0 allocations: 0 bytes"><pre>Manual switch statement<span class="pl-k">:</span>
  <span class="pl-c1">3.275</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
Global Dict{Symbol,String}<span class="pl-k">:</span>
  <span class="pl-c1">78.800</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
Global LittleDict{Symbol,String}<span class="pl-k">:</span>
  <span class="pl-c1">111.600</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
Dynamic dispatch<span class="pl-k">:</span>
  <span class="pl-c1">2.300</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
Val<span class="pl-k">-</span>splitting with <span class="pl-c1">@valsplit</span><span class="pl-k">:</span>
  <span class="pl-c1">3.275</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes</pre></div>
<h2 dir="auto"><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utilities</h2>
<p dir="auto">ValSplit.jl provides a few other utility functions for determining whether a method with particular <code>Val</code>-typed argument exists.</p>
<p dir="auto">To determine the set of all <code>Val</code> parameters associated with a particular argument of a particular function, use <code>valarg_params</code>:</p>
<blockquote>
<p dir="auto"><code>valarg_params(f, types::Type{&lt;:Tuple}, idx::Int, ptype::Type=Any)</code></p>
<p dir="auto">Given a method signature <code>(f, types)</code>, finds all matching methods with a concrete <code>Val</code>-typed argument in position <code>idx</code>, then returns all parameter values for the <code>Val</code>-typed argument as a tuple. Optionally, <code>ptype</code> can be specified to filter parameter values that are instances of <code>ptype</code>.</p>
<p dir="auto">This function is statically compiled, and will automatically be recompiled whenever a new method of <code>f</code> is defined.</p>
</blockquote>
<p dir="auto">To determine whether a particular argument of a particular function has a specific <code>Val</code> parameter, use <code>valarg_has_param</code>:</p>
<blockquote>
<p dir="auto"><code>valarg_has_param(f, types::Type{&lt;:Tuple}, param, idx::Int, ptype::Type=Any)</code></p>
<p dir="auto">Given a method signature <code>(f, types)</code>, returns <code>true</code> if there exists a matching method with a <code>Val</code>-typed argument in position <code>idx</code> with parameter <code>param</code> and parameter type <code>ptype</code>.</p>
</blockquote>
</article></div>