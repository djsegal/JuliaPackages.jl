<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sumtypesjl" class="anchor" aria-hidden="true" href="#sumtypesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SumTypes.jl</h1>
<p>A julian implementation of sum types. Sum types, sometimes called 'tagged unions' are the type system equivalent of the <a href="https://en.wikipedia.org/wiki/Disjoint_union" rel="nofollow">disjoint union</a> operation (which is <em>not</em> a union in the traditional sense). From a category theory perspective, sum types are interesting because they are <em>dual</em> to <code>Tuple</code>s (whatever that means).</p>
<p>At the end of the day, a sum type is really just a fancy word for a container that can store data of a few different, pre-declared types and is labelled by how it was instantiated.</p>
<p>Users of statically typed programming languages often prefer Sum types to unions because it makes type checking easier. In a dynamic language like julia, the benefit of these objects is less obvious, but perhaps someone can find a fun use case.</p>
<p>Let's explore a very fundamental sum type (fundamental in the sense that all other sum types may be derived from it):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SumTypes

julia&gt; @sum_type Either{A, B} begin
           Left{A, B}(::A)
           Right{A, B}(::B)
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SumTypes

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@sum_type</span> Either{A, B} <span class="pl-k">begin</span>
           <span class="pl-c1">Left</span><span class="pl-c1">{A, B}</span>(<span class="pl-k">::</span><span class="pl-c1">A</span>)
           <span class="pl-c1">Right</span><span class="pl-c1">{A, B}</span>(<span class="pl-k">::</span><span class="pl-c1">B</span>)
       <span class="pl-k">end</span></pre></div>
<p>This says that we have a sum type <code>Either{A, B}</code>, and it can hold a value that is either of type <code>A</code> or of type <code>B</code>. <code>Either</code> has two 'constructors' which we have called <code>Left{A,B}</code> and <code>Right{A,B}</code>. These exist essentially as a way to have instances of
<code>Either</code> carry a record of how they were constructed by being wrapped in dummy structs named <code>Left</code> or <code>Right</code>. Here we construct some instances of <code>Either</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Left{Int, Int}(1)
Either{Int64, Int64}: Left(1)

julia&gt; Right{Int, Float64}(1.0)
Either{Int64, Float64}: Right(1.0)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Left</span><span class="pl-c1">{Int, Int}</span>(<span class="pl-c1">1</span>)
Either{Int64, Int64}<span class="pl-k">:</span> <span class="pl-c1">Left</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Right</span><span class="pl-c1">{Int, Float64}</span>(<span class="pl-c1">1.0</span>)
Either{Int64, Float64}<span class="pl-k">:</span> <span class="pl-c1">Right</span>(<span class="pl-c1">1.0</span>)</pre></div>
<p>Note that unlike <code>Union{A, B}</code>, <code>A &lt;: Either{A,B}</code> is false, and
<code>Either{A, A}</code> is distinct from <code>A</code>.</p>
<p>Here's a recursive List sum type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @sum_type List{A, L} begin 
           Nil{A, L}()
           Cons{A, L}(::A, ::L) 
       end

julia&gt; Nil{Int, List}()
List{Int64, List}: Nil()

julia&gt; Cons{Int, List}(1, Cons{Int, List}(1, Nil{Int, List}()))
List{Int64, List}: Cons(1, List{Int64, List}: Cons(1, List{Int64, List}: Nil()))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@sum_type</span> List{A, L} <span class="pl-k">begin</span> 
           <span class="pl-c1">Nil</span><span class="pl-c1">{A, L}</span>()
           <span class="pl-c1">Cons</span><span class="pl-c1">{A, L}</span>(<span class="pl-k">::</span><span class="pl-c1">A</span>, <span class="pl-k">::</span><span class="pl-c1">L</span>) 
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Nil</span><span class="pl-c1">{Int, List}</span>()
List{Int64, List}<span class="pl-k">:</span> <span class="pl-c1">Nil</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Cons</span><span class="pl-c1">{Int, List}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">Cons</span><span class="pl-c1">{Int, List}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">Nil</span><span class="pl-c1">{Int, List}</span>()))
List{Int64, List}<span class="pl-k">:</span> <span class="pl-c1">Cons</span>(<span class="pl-c1">1</span>, List{Int64, List}<span class="pl-k">:</span> <span class="pl-c1">Cons</span>(<span class="pl-c1">1</span>, List{Int64, List}<span class="pl-k">:</span> <span class="pl-c1">Nil</span>()))</pre></div>
<p>On Julia 1.5+, there's an evil trick to have mutually recursive types without the 'reduntant' parameter. Here's a recursive list sum type using that trick (don't use this in serious code. At the very least, it has a problem in github actions, though it works fine for me locally)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @sum_type List{A} begin 
	       Nil{A}()
	       Cons{A}(::A, ::List{A}) 
       end recursive=true

julia&gt; Nil{Int}()
List{Int64}: Nil()

julia&gt; Cons{Int}(1, Cons{Int}(1, Nil{Int}()))
List{Int64}: Cons(1, List{Int64}: Cons(1, List{Int64}: Nil()))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@sum_type</span> List{A} <span class="pl-k">begin</span> 
	       <span class="pl-c1">Nil</span><span class="pl-c1">{A}</span>()
	       <span class="pl-c1">Cons</span><span class="pl-c1">{A}</span>(<span class="pl-k">::</span><span class="pl-c1">A</span>, <span class="pl-k">::</span><span class="pl-c1">List{A}</span>) 
       <span class="pl-k">end</span> recursive<span class="pl-k">=</span><span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Nil</span><span class="pl-c1">{Int}</span>()
List{Int64}<span class="pl-k">:</span> <span class="pl-c1">Nil</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Cons</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">Cons</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">Nil</span><span class="pl-c1">{Int}</span>()))
List{Int64}<span class="pl-k">:</span> <span class="pl-c1">Cons</span>(<span class="pl-c1">1</span>, List{Int64}<span class="pl-k">:</span> <span class="pl-c1">Cons</span>(<span class="pl-c1">1</span>, List{Int64}<span class="pl-k">:</span> <span class="pl-c1">Nil</span>()))</pre></div>
<p>You can also use sum types to define a type level enum:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @sum_type Fruit begin
           Apple()
           Banana()
           Orange()
       end

julia&gt; Apple()
Fruit: Apple()

julia&gt; Banana()
Fruit: Banana()

julia&gt; Orange()
Fruit: Orange()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@sum_type</span> Fruit <span class="pl-k">begin</span>
           <span class="pl-c1">Apple</span>()
           <span class="pl-c1">Banana</span>()
           <span class="pl-c1">Orange</span>()
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Apple</span>()
Fruit<span class="pl-k">:</span> <span class="pl-c1">Apple</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Banana</span>()
Fruit<span class="pl-k">:</span> <span class="pl-c1">Banana</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Orange</span>()
Fruit<span class="pl-k">:</span> <span class="pl-c1">Orange</span>()</pre></div>
<h2><a id="user-content-pattern-matching-on-sum-types" class="anchor" aria-hidden="true" href="#pattern-matching-on-sum-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pattern matching on Sum types</h2>
<p>Because of the structure of sum types, they lend themselves naturally to things like pattern matching. SumTypes.jl exposes a <code>@case</code> macro for defining pattern matching cases:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@case Either f((x,)::Left)  = x + 1
@case Either f((x,)::Right) = x - 1
 
l = Left{Int, Int}(1)
r = Right{Int, Int}(1)


julia&gt; f(l)
2

julia&gt; f(r)
0
"><pre><span class="pl-c1">@case</span> Either <span class="pl-en">f</span>((x,)<span class="pl-k">::</span><span class="pl-c1">Left</span>)  <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@case</span> Either <span class="pl-en">f</span>((x,)<span class="pl-k">::</span><span class="pl-c1">Right</span>) <span class="pl-k">=</span> x <span class="pl-k">-</span> <span class="pl-c1">1</span>
 
l <span class="pl-k">=</span> <span class="pl-c1">Left</span><span class="pl-c1">{Int, Int}</span>(<span class="pl-c1">1</span>)
r <span class="pl-k">=</span> <span class="pl-c1">Right</span><span class="pl-c1">{Int, Int}</span>(<span class="pl-c1">1</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(l)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(r)
<span class="pl-c1">0</span></pre></div>
<p>Calling <code>f</code> on an <code>Either</code> type will use manually unrolled dispatch, rather than julia's automatic dynamic
dispatch machinery. That is, the above code becomes a series of <code>if/else</code> statements rather than a real dynamic dispatch.</p>
<p>You can use <code>SumTypes.iscomplete</code> to check if all the cases of a sum type are covered:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@sum_type MyBool begin
    True()
    False()
end
@case MyBool g(::True) = &quot;All good!&quot;

julia&gt; SumTypes.iscomplete(g, MyBool)
false
"><pre><span class="pl-c1">@sum_type</span> MyBool <span class="pl-k">begin</span>
    <span class="pl-c1">True</span>()
    <span class="pl-c1">False</span>()
<span class="pl-k">end</span>
<span class="pl-c1">@case</span> MyBool <span class="pl-en">g</span>(<span class="pl-k">::</span><span class="pl-c1">True</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>All good!<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> SumTypes<span class="pl-k">.</span><span class="pl-c1">iscomplete</span>(g, MyBool)
<span class="pl-c1">false</span></pre></div>
<p>For more advanced mattern matching utilities, consider <a href="https://github.com/thautwarm/MLStyle.jl/">MLStyle.jl</a>.</p>
</article></div>