<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mbedtls" class="anchor" aria-hidden="true" href="#mbedtls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MbedTLS</h1>
<p dir="auto"><a href="https://github.com/JuliaLang/MbedTLS.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaLang/MbedTLS.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaWeb/MbedTLS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a87e1f2af37fa563a8d3cf31bd77849c83c22f8ae18348b66dc28dddc41f9aee/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614c616e672f4d626564544c532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaLang/MbedTLS.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/MbedTLS/bf9T0" rel="nofollow"><img src="https://camo.githubusercontent.com/6a875fb14b7e97c3de357fce48290289df4f4466f72a70acfd71caa551616bbc/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4d626564544c532f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/MbedTLS/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A wrapper around the <a href="https://tls.mbed.org/" rel="nofollow">mbed</a> TLS and cryptography C libary.</p>
<p dir="auto">Current supported mbedtls version: 2.16.0 (from <a href="https://github.com/JuliaBinaryWrappers/MbedTLS_jll.jl">MbedTLS_jll.jl</a>)</p>
<p dir="auto">Usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sockets
sock = connect(&quot;httpbin.org&quot;, 443)
entropy = MbedTLS.Entropy()
rng = MbedTLS.CtrDrbg()
MbedTLS.seed!(rng, entropy)

ctx = MbedTLS.SSLContext()
conf = MbedTLS.SSLConfig()

MbedTLS.config_defaults!(conf)
MbedTLS.authmode!(conf, MbedTLS.MBEDTLS_SSL_VERIFY_REQUIRED)
MbedTLS.rng!(conf, rng)

function show_debug(level, filename, number, msg)
    @show level, filename, number, msg
end

MbedTLS.dbg!(conf, show_debug)

MbedTLS.ca_chain!(conf)

MbedTLS.setup!(ctx, conf)
MbedTLS.set_bio!(ctx, sock)

MbedTLS.handshake(ctx)

write(ctx, &quot;GET / HTTP/1.1\r\nHost: httpbin.org\r\n\r\n&quot;)
buf = String(read(ctx, 100))
@test ismatch(r&quot;^HTTP/1.1 200 OK&quot;, buf)"><pre><span class="pl-k">using</span> Sockets
sock <span class="pl-k">=</span> <span class="pl-c1">connect</span>(<span class="pl-s"><span class="pl-pds">"</span>httpbin.org<span class="pl-pds">"</span></span>, <span class="pl-c1">443</span>)
entropy <span class="pl-k">=</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">Entropy</span>()
rng <span class="pl-k">=</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">CtrDrbg</span>()
MbedTLS<span class="pl-k">.</span><span class="pl-c1">seed!</span>(rng, entropy)

ctx <span class="pl-k">=</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">SSLContext</span>()
conf <span class="pl-k">=</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">SSLConfig</span>()

MbedTLS<span class="pl-k">.</span><span class="pl-c1">config_defaults!</span>(conf)
MbedTLS<span class="pl-k">.</span><span class="pl-c1">authmode!</span>(conf, MbedTLS<span class="pl-k">.</span>MBEDTLS_SSL_VERIFY_REQUIRED)
MbedTLS<span class="pl-k">.</span><span class="pl-c1">rng!</span>(conf, rng)

<span class="pl-k">function</span> <span class="pl-en">show_debug</span>(level, filename, number, msg)
    <span class="pl-c1">@show</span> level, filename, number, msg
<span class="pl-k">end</span>

MbedTLS<span class="pl-k">.</span><span class="pl-c1">dbg!</span>(conf, show_debug)

MbedTLS<span class="pl-k">.</span><span class="pl-c1">ca_chain!</span>(conf)

MbedTLS<span class="pl-k">.</span><span class="pl-c1">setup!</span>(ctx, conf)
MbedTLS<span class="pl-k">.</span><span class="pl-c1">set_bio!</span>(ctx, sock)

MbedTLS<span class="pl-k">.</span><span class="pl-c1">handshake</span>(ctx)

<span class="pl-c1">write</span>(ctx, <span class="pl-s"><span class="pl-pds">"</span>GET / HTTP/1.1<span class="pl-cce">\r\n</span>Host: httpbin.org<span class="pl-cce">\r\n\r\n</span><span class="pl-pds">"</span></span>)
buf <span class="pl-k">=</span> <span class="pl-c1">String</span>(<span class="pl-c1">read</span>(ctx, <span class="pl-c1">100</span>))
<span class="pl-c1">@test</span> <span class="pl-c1">ismatch</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^HTTP/1.1 200 OK<span class="pl-pds">"</span></span>, buf)</pre></div>
<p dir="auto">Debugging with Wireshark.</p>
<p dir="auto">MbedTLS.jl can optionally log TLS session keys in
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format" rel="nofollow">NSS Key Log Format</a>.</p>
<p dir="auto">e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP
using MbedTLS
c = MbedTLS.SSLConfig(true, log_secrets=&quot;/Users/sam/stuff/secret_key_log&quot;)
HTTP.get(&quot;https://httpbin.org/ip&quot;, sslconfig=c)"><pre><span class="pl-k">using</span> HTTP
<span class="pl-k">using</span> MbedTLS
c <span class="pl-k">=</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">SSLConfig</span>(<span class="pl-c1">true</span>, log_secrets<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>/Users/sam/stuff/secret_key_log<span class="pl-pds">"</span></span>)
HTTP<span class="pl-k">.</span><span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">"</span>https://httpbin.org/ip<span class="pl-pds">"</span></span>, sslconfig<span class="pl-k">=</span>c)</pre></div>
<p dir="auto">Wireshark can be configrued to decrypt SSL traffic by setting the location
of the key log file under:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Wireshark Preferences -&gt; Protocols -&gt; SSL; (Pre-)Master Secret log filename."><pre class="notranslate"><code>Wireshark Preferences -&gt; Protocols -&gt; SSL; (Pre-)Master Secret log filename.
</code></pre></div>
<p dir="auto">See: <a href="https://sharkfesteurope.wireshark.org/assets/presentations17eu/15.pdf" rel="nofollow">https://sharkfesteurope.wireshark.org/assets/presentations17eu/15.pdf</a></p>
</article></div>