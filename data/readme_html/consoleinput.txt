<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-consoleinputjl" class="anchor" aria-hidden="true" href="#consoleinputjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConsoleInput.jl</h1>
<p><a href="https://travis-ci.com/mildc055ee/ConsoleInput.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a8189de7e6daa05d0a59dd4d0d7b1dbe64056393a06badc148e1c158fdfae8d3/68747470733a2f2f7472617669732d63692e636f6d2f6d696c646330353565652f436f6e736f6c65496e7075742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mildc055ee/ConsoleInput.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mildc055ee/ConsoleInput.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3f6201b20317da8b4a378be9d4027b62a9c29a494467bfba621768e3521594c8/68747470733a2f2f636f6465636f762e696f2f67682f6d696c646330353565652f436f6e736f6c65496e7075742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mildc055ee/ConsoleInput.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>minimal stdin wrapper for julia.</p>
<h2><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>APIs</h2>
<p>This module uses original type <code>DlmType</code> defined as below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="DlmType = Union{
    AbscractChar,
    AbscractString,
    Regex
}
"><pre>DlmType <span class="pl-k">=</span> Union{
    AbscractChar,
    AbscractString,
    Regex
}</pre></div>
<p>Default delimiter is <code>" "</code>.You can indicate specific delimiter like <code>readXXX(delimiter=",")</code>.</p>
<p><strong>Note</strong> This packages function returns a single value when args is only one. else returns array.</p>
<h3><a id="user-content-readintioiostdin-delimiterdlmtype-" class="anchor" aria-hidden="true" href="#readintioiostdin-delimiterdlmtype-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>readInt(io::IO=stdin, delimiter::DlmType=" ")</code></h3>
<p>parse inputs to Int.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="readInt() #&lt;-- 1
#--&gt; 1

readInt() #&lt;-- 1 2 3 4 5
#--&gt; [1, 2, 3, 4, 5]

readInt(delimiter=',') #&lt;--6,7,8,9,10
#--&gt; [6, 7, 8, 9, 10]
"><pre><span class="pl-c1">readInt</span>() <span class="pl-c"><span class="pl-c">#</span>&lt;-- 1</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt; 1</span>

<span class="pl-c1">readInt</span>() <span class="pl-c"><span class="pl-c">#</span>&lt;-- 1 2 3 4 5</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt; [1, 2, 3, 4, 5]</span>

<span class="pl-c1">readInt</span>(delimiter<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>) <span class="pl-c"><span class="pl-c">#</span>&lt;--6,7,8,9,10</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt; [6, 7, 8, 9, 10]</span></pre></div>
<h3><a id="user-content-readstringioiostdin-delimiterdlmtype-" class="anchor" aria-hidden="true" href="#readstringioiostdin-delimiterdlmtype-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>readString(io::IO=stdin, delimiter::DlmType=" ")</code></h3>
<p>parse inputs to string.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="readString() #&lt;-- Lorem
#--&gt; &quot;Lorem&quot;

readString() #&lt;-- Lorem ipsum es
#--&gt;[&quot;Lorem&quot;, &quot;ipsum&quot;, &quot;es&quot;]
"><pre><span class="pl-c1">readString</span>() <span class="pl-c"><span class="pl-c">#</span>&lt;-- Lorem</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt; "Lorem"</span>

<span class="pl-c1">readString</span>() <span class="pl-c"><span class="pl-c">#</span>&lt;-- Lorem ipsum es</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt;["Lorem", "ipsum", "es"]</span></pre></div>
<h3><a id="user-content-readgeneraltype-ioiostdin-delimiterdlmtype-" class="anchor" aria-hidden="true" href="#readgeneraltype-ioiostdin-delimiterdlmtype-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>readGeneral(type, io::IO=stdin, delimiter::DlmType=" ")</code></h3>
<p>parse inputs to any types you want. First argument MUST be a type name.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="readGeneral(Complex{Fload64}) #&lt;--1.2e-3+4j -9+6.8i 0.0004 90.5im
#--&gt;[0.0012+4.0im, -9.0+6.8im, 0.0004+0.0im, 0.0+90.5im]
"><pre><span class="pl-c1">readGeneral</span>(Complex{Fload64}) <span class="pl-c"><span class="pl-c">#</span>&lt;--1.2e-3+4j -9+6.8i 0.0004 90.5im</span>
<span class="pl-c"><span class="pl-c">#</span>--&gt;[0.0012+4.0im, -9.0+6.8im, 0.0004+0.0im, 0.0+90.5im]</span></pre></div>
</article></div>