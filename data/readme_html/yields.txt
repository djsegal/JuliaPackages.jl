<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-yieldsjl" class="anchor" aria-hidden="true" href="#yieldsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Yields.jl</h1>
<p dir="auto"><a href="https://JuliaActuary.github.io/Yields.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaActuary.github.io/Yields.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaActuary/Yields.jl/actions"><img src="https://github.com/JuliaActuary/Yields.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaActuary/Yields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c3565ed5e0ae812a747f8b5c652443c43e501a8d2b52ad415370e78e3ce0c33/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961416374756172792f5969656c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaActuary/Yields.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Yields.jl</strong> provides a simple interface for constructing, manipulating, and using yield curves for modeling purposes.</p>
<p dir="auto">It's intended to provide common functionality around modeling interest rates, spreads, and miscellaneous yields across the JuliaActuary ecosystem (though not limited to use in JuliaActuary packages).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/711879/174458687-860c5d7f-e125-46a9-a706-7d113f1e243b.gif"><img src="https://user-images.githubusercontent.com/711879/174458687-860c5d7f-e125-46a9-a706-7d113f1e243b.gif" alt="anim_fps2" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuickStart</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Yields

riskfree_maturities = [0.5, 1.0, 1.5, 2.0]
riskfree    = [5.0, 5.8, 6.4, 6.8] ./ 100     #spot rates, annual effective if unspecified

spread_maturities = [0.5, 1.0, 1.5, 3.0]      # different maturities
spread    = [1.0, 1.8, 1.4, 1.8] ./ 100       # spot spreads

rf_curve = Yields.Zero(riskfree,riskfree_maturities)
spread_curve = Yields.Zero(spread,spread_maturities)


yield = rf_curve + spread_curve               # additive combination of the two curves

discount(yield,1.5)                           # 1 / (1 + 0.064 + 0.014) ^ 1.5"><pre><span class="pl-k">using</span> Yields

riskfree_maturities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>]
riskfree    <span class="pl-k">=</span> [<span class="pl-c1">5.0</span>, <span class="pl-c1">5.8</span>, <span class="pl-c1">6.4</span>, <span class="pl-c1">6.8</span>] <span class="pl-k">./</span> <span class="pl-c1">100</span>     <span class="pl-c"><span class="pl-c">#</span>spot rates, annual effective if unspecified</span>

spread_maturities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">3.0</span>]      <span class="pl-c"><span class="pl-c">#</span> different maturities</span>
spread    <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.8</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">1.8</span>] <span class="pl-k">./</span> <span class="pl-c1">100</span>       <span class="pl-c"><span class="pl-c">#</span> spot spreads</span>

rf_curve <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Zero</span>(riskfree,riskfree_maturities)
spread_curve <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Zero</span>(spread,spread_maturities)


yield <span class="pl-k">=</span> rf_curve <span class="pl-k">+</span> spread_curve               <span class="pl-c"><span class="pl-c">#</span> additive combination of the two curves</span>

<span class="pl-c1">discount</span>(yield,<span class="pl-c1">1.5</span>)                           <span class="pl-c"><span class="pl-c">#</span> 1 / (1 + 0.064 + 0.014) ^ 1.5</span></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-rates" class="anchor" aria-hidden="true" href="#rates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rates</h3>
<p dir="auto">Rates are types that wrap scalar values to provide information about how to determine <code>discount</code> and <code>accumulation</code> factors.</p>
<p dir="auto">There are two <code>CompoundingFrequency</code> types:</p>
<ul dir="auto">
<li><code>Yields.Periodic(m)</code> for rates that compound <code>m</code> times per period (e.g. <code>m</code> times per year if working with annual rates).</li>
<li><code>Yields.Continuous()</code> for continuously compounding rates.</li>
</ul>
<h4 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Continuous(0.05)       # 5% continuously compounded
Periodic(0.05,2)       # 5% compounded twice per period"><pre><span class="pl-c1">Continuous</span>(<span class="pl-c1">0.05</span>)       <span class="pl-c"><span class="pl-c">#</span> 5% continuously compounded</span>
<span class="pl-c1">Periodic</span>(<span class="pl-c1">0.05</span>,<span class="pl-c1">2</span>)       <span class="pl-c"><span class="pl-c">#</span> 5% compounded twice per period</span></pre></div>
<p dir="auto">These are both subtypes of the parent <code>Rate</code> type and are instantiated as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Rate(0.05,Continuous())       # 5% continuously compounded
Rate(0.05,Periodic(2))        # 5% compounded twice per period"><pre><span class="pl-c1">Rate</span>(<span class="pl-c1">0.05</span>,<span class="pl-c1">Continuous</span>())       <span class="pl-c"><span class="pl-c">#</span> 5% continuously compounded</span>
<span class="pl-c1">Rate</span>(<span class="pl-c1">0.05</span>,<span class="pl-c1">Periodic</span>(<span class="pl-c1">2</span>))        <span class="pl-c"><span class="pl-c">#</span> 5% compounded twice per period</span></pre></div>
<p dir="auto">Broadcast over a vector to create <code>Rates</code> with the given compounding:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Periodic.([0.02,0.03,0.04],2) 
Continuous.([0.02,0.03,0.04]) "><pre><span class="pl-c1">Periodic</span>.([<span class="pl-c1">0.02</span>,<span class="pl-c1">0.03</span>,<span class="pl-c1">0.04</span>],<span class="pl-c1">2</span>) 
<span class="pl-c1">Continuous</span>.([<span class="pl-c1">0.02</span>,<span class="pl-c1">0.03</span>,<span class="pl-c1">0.04</span>]) </pre></div>
<p dir="auto">Rates can also be constructed by specifying the <code>CompoundingFrequency</code> and then passing a scalar rate:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Periodic(1)(0.05)
Continuous()(0.05)"><pre><span class="pl-c1">Periodic</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">0.05</span>)
<span class="pl-c1">Continuous</span>()(<span class="pl-c1">0.05</span>)</pre></div>
<h4 dir="auto"><a id="user-content-conversion" class="anchor" aria-hidden="true" href="#conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conversion</h4>
<p dir="auto">Convert rates between different types with <code>convert</code>. E.g.:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="r = Rate(Yields.Periodic(12),0.01)             # rate that compounds 12 times per rate period (ie monthly)

convert(Yields.Periodic(1),r)                  # convert monthly rate to annual effective
convert(Yields.Continuous(),r)          # convert monthly rate to continuous"><pre lang="julia-repl" class="notranslate"><code>r = Rate(Yields.Periodic(12),0.01)             # rate that compounds 12 times per rate period (ie monthly)

convert(Yields.Periodic(1),r)                  # convert monthly rate to annual effective
convert(Yields.Continuous(),r)          # convert monthly rate to continuous
</code></pre></div>
<h4 dir="auto"><a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arithmetic</h4>
<p dir="auto">Adding, substracting, multiplying, dividing, and comparing rates is supported.</p>
<h3 dir="auto"><a id="user-content-curves" class="anchor" aria-hidden="true" href="#curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Curves</h3>
<p dir="auto">There are a several ways to construct a yield curve object. If <code>maturities</code> is omitted, the method will assume that the timepoints corresponding to each rate are the indices of the <code>rates</code> (e.g. generally one to the length of the array for standard, non-offset arrays).</p>
<h4 dir="auto"><a id="user-content-fitting-curves-to-rates" class="anchor" aria-hidden="true" href="#fitting-curves-to-rates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting Curves to Rates</h4>
<p dir="auto">There is a set of constructor methods which will return a yield curve calibrated to the given inputs.</p>
<ul dir="auto">
<li><code>Yields.Zero(rates,maturities)</code>  using a vector of zero rates (sometimes referred to as "spot" rates)</li>
<li><code>Yields.Forward(rates,maturities)</code> using a vector of forward rates</li>
<li><code>Yields.Par(rates,maturities)</code> takes a series of yields for securities priced at par. Assumes that maturities &lt;= 1 year do not pay coupons and that after one year, pays coupons with frequency equal to the CompoundingFrequency of the corresponding rate (2 by default).</li>
<li><code>Yields.CMT(rates,maturities)</code> takes the most commonly presented rate data (e.g. <a href="https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield" rel="nofollow">Treasury.gov</a>) and bootstraps the curve given the combination of bills and bonds.</li>
<li><code>Yields.OIS(rates,maturities)</code> takes the most commonly presented rate data for overnight swaps and bootstraps the curve. Rates assume a single settlement for &lt;1 year and quarterly settlements for 1 year and above.</li>
</ul>
<h5 dir="auto"><a id="user-content-fitting-techniques" class="anchor" aria-hidden="true" href="#fitting-techniques"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting techniques</h5>
<p dir="auto">There are multiple curve fitting methods available:</p>
<ul dir="auto">
<li><code>Boostrap(interpolation_method)</code> (the default method)
<ul dir="auto">
<li>where <code>interpolation</code> can be one of the built-in <code>QuadraticSpline()</code> (the default) or <code>LinearSpline()</code>, or a user-supplied function.</li>
</ul>
</li>
<li>Two methods from the Nelson-Siegel-Svensson family, where τ_initial is the starting τ point for the fitting optimization routine:
<ul dir="auto">
<li><code>NelsonSiegel(τ_initial=1.0)</code></li>
<li><code>NelsonSiegelSvensson(τ_initial=[1.0,1.0])</code></li>
</ul>
</li>
</ul>
<p dir="auto">To specify which fitting method to use, pass the object to as the first parameter to the above set of constructors, for example: <code>Yields.Par(NelsonSiegel(),rates,maturities)</code>.</p>
<h4 dir="auto"><a id="user-content-kernel-methods" class="anchor" aria-hidden="true" href="#kernel-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kernel Methods</h4>
<ul dir="auto">
<li><code>Yields.SmithWilson</code> curve (used for <a href="https://www.eiopa.europa.eu/sites/default/files/risk_free_interest_rate/12092019-technical_documentation.pdf" rel="nofollow">discounting in the EU Solvency II framework</a>) can be constructed either directly by specifying its inner representation or by calibrating to a set of cashflows with known prices.
<ul dir="auto">
<li>These cashflows can conveniently be constructed with a Vector of <code>Yields.ZeroCouponQuote</code>s, <code>Yields.SwapQuote</code>s, or <code>Yields.BulletBondQuote</code>s.</li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-other-curves" class="anchor" aria-hidden="true" href="#other-curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Curves</h4>
<ul dir="auto">
<li><code>Yields.Constant(rate)</code> takes a single constant rate for all times</li>
<li><code>Yields.Step(rates,maturities)</code> doesn't interpolate - the rate is flat up to the corresponding time in <code>times</code></li>
</ul>
<h3 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h3>
<p dir="auto">Most of the above yields have the following defined (goal is to have them all):</p>
<ul dir="auto">
<li><code>discount(curve,from,to)</code> or <code>discount(curve,to)</code> gives the discount factor</li>
<li><code>accumulation(curve,from,to)</code> or <code>accumulation(curve,to)</code> gives the accumulation factor</li>
<li><code>zero(curve,time)</code> or <code>zero(curve,time,CompoundingFrequency)</code> gives the zero-coupon spot rate for the given time.</li>
<li><code>forward(curve,from,to)</code> gives the zero rate between the two given times</li>
<li><code>par(curve,time)</code> gives the coupon-paying par equivalent rate for the given time.</li>
</ul>
<h3 dir="auto"><a id="user-content-combinations" class="anchor" aria-hidden="true" href="#combinations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Combinations</h3>
<p dir="auto">Different yield objects can be combined with addition or subtraction. See the <a href="#quickstart">Quickstart</a> for an example.</p>
<p dir="auto">When adding a <code>Yields.AbstractYield</code> with a scalar or vector, that scalar or vector will be promoted to a yield type via <a href="#yield"><code>Yield()</code></a>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y1 = Yields.Constant(0.05)
y2 = y1 + 0.01                # y2 is a yield of 0.06"><pre>y1 <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Constant</span>(<span class="pl-c1">0.05</span>)
y2 <span class="pl-k">=</span> y1 <span class="pl-k">+</span> <span class="pl-c1">0.01</span>                <span class="pl-c"><span class="pl-c">#</span> y2 is a yield of 0.06</span></pre></div>
<h3 dir="auto"><a id="user-content-forward-starting-curves" class="anchor" aria-hidden="true" href="#forward-starting-curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Forward Starting Curves</h3>
<p dir="auto">Constructed curves can be shifted so that a future timepoint becomes the effective time-zero for a said curve.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; zero = [5.0, 5.8, 6.4, 6.8] ./ 100
julia&gt; maturity = [0.5, 1.0, 1.5, 2.0]
julia&gt; curve = Yields.Zero(zero, maturity)
julia&gt; fwd = Yields.ForwardStarting(curve, 1.0)

julia&gt; discount(curve,1,2)
0.9275624570410582

julia&gt; discount(fwd,1) # `curve` has effectively been reindexed to `1.0`
0.9275624570410582"><pre lang="julia-repl" class="notranslate"><code>julia&gt; zero = [5.0, 5.8, 6.4, 6.8] ./ 100
julia&gt; maturity = [0.5, 1.0, 1.5, 2.0]
julia&gt; curve = Yields.Zero(zero, maturity)
julia&gt; fwd = Yields.ForwardStarting(curve, 1.0)

julia&gt; discount(curve,1,2)
0.9275624570410582

julia&gt; discount(fwd,1) # `curve` has effectively been reindexed to `1.0`
0.9275624570410582
</code></pre></div>
<h2 dir="auto"><a id="user-content-exported-vs-un-exported-functions" class="anchor" aria-hidden="true" href="#exported-vs-un-exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported vs Un-exported Functions</h2>
<p dir="auto">Generally, CamelCase methods which construct a datatype are exported as they are unlikely to conflict with other parts of code that may be written. For example, <code>rate</code> is un-exported (it must be called with <code>Yields.rate(...)</code>) because <code>rate</code> is likely a very commonly defined variable within actuarial and financial contexts and there is a high risk of conflicting with defined variables.</p>
<p dir="auto">Consider using <code>import Yields</code> which would require qualifying all methods, but alleviates any namespace conflicts and has the benefit of being explicit about the calls (internally we prefer this in the package design to keep dependencies and their usage clear).</p>
<h2 dir="auto"><a id="user-content-internals" class="anchor" aria-hidden="true" href="#internals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Internals</h2>
<p dir="auto">For time-variant yields (ie yield <em>curves</em>), the inputs are converted to spot rates and interpolated using quadratic B-splines by default (see documentation for alternatives, such as linear interpolations).</p>
<h3 dir="auto"><a id="user-content-combination-implementation" class="anchor" aria-hidden="true" href="#combination-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Combination Implementation</h3>
<p dir="auto"><a href="#combinations">Combinations</a> track two different curve objects and are not combined into a single underlying data structure. This means that you may achieve better performance if you combine the rates before constructing a <code>Yields</code> representation. The exception to this is <code>Constant</code> curves, which <em>do</em> get combined into a single structure that is as performant as pre-combined rate structure.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<ul dir="auto">
<li><a href="https://github.com/felipenoris/InterestRates.jl"><strong><code>InterestRates.jl</code></strong></a> specializes in fast rate calculations aimed at valuing fixed income contracts, with business-day-level accuracy.
<ul dir="auto">
<li>Comparative comments: <strong><code>Yields.jl</code></strong> does not try to provide as precise controls over the timing, structure, and interpolation of the curve. Instead, <strong><code>Yields.jl</code></strong> provides a minimal, but flexible and intuitive interface for common modeling needs.</li>
</ul>
</li>
</ul>
</article></div>