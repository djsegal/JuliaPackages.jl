<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-yields" class="anchor" aria-hidden="true" href="#yields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Yields</h1>
<p><a href="https://JuliaActuary.github.io/Yields.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaActuary.github.io/Yields.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaActuary/Yields.jl/actions"><img src="https://github.com/JuliaActuary/Yields.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaActuary/Yields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c3565ed5e0ae812a747f8b5c652443c43e501a8d2b52ad415370e78e3ce0c33/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961416374756172792f5969656c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaActuary/Yields.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://www.tidyverse.org/lifecycle/" rel="nofollow"><img src="https://camo.githubusercontent.com/1ff6b499f1f89c8b3b4864514a329f27f640c6abdc5bc0b2377a00deecc887c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6966654379636c652d446576656c6f70696e672d626c7565" alt="lifecycle" data-canonical-src="https://img.shields.io/badge/LifeCycle-Developing-blue" style="max-width:100%;"></a></p>
<p><strong>Yields</strong> provides a simple interface for constructing, manipulating, and using yield curves for modeling purposes.</p>
<p>It's intended to provide common functionality around modeling interest rates, spreads, and miscellaneous yields across the JuliaActuary ecosystem (though not limited to use in JuliaActuary packages).</p>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuickStart</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Yields

riskfree_maturities = [0.5, 1.0, 1.5, 2.0]
riskfree    = [5.0, 5.8, 6.4, 6.8] ./ 100     #spot rates, annual effective if unspecfied

spread_maturities = [0.5, 1.0, 1.5, 3.0]      # different maturities
spread    = [1.0, 1.8, 1.4, 1.8] ./ 100       # spot spreads

rf_curve = Yields.Zero(riskfree,riskfree_maturities)
spread_curve = Yields.Zero(spread,spread_maturities)


yield = rf_curve + spread_curve               # additive combination of the two curves

discount(yield,1.5) # 1 / (1 + 0.064 + 0.014) ^ 1.5
"><pre><span class="pl-k">using</span> Yields

riskfree_maturities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>]
riskfree    <span class="pl-k">=</span> [<span class="pl-c1">5.0</span>, <span class="pl-c1">5.8</span>, <span class="pl-c1">6.4</span>, <span class="pl-c1">6.8</span>] <span class="pl-k">./</span> <span class="pl-c1">100</span>     <span class="pl-c"><span class="pl-c">#</span>spot rates, annual effective if unspecfied</span>

spread_maturities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">3.0</span>]      <span class="pl-c"><span class="pl-c">#</span> different maturities</span>
spread    <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.8</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">1.8</span>] <span class="pl-k">./</span> <span class="pl-c1">100</span>       <span class="pl-c"><span class="pl-c">#</span> spot spreads</span>

rf_curve <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Zero</span>(riskfree,riskfree_maturities)
spread_curve <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Zero</span>(spread,spread_maturities)


yield <span class="pl-k">=</span> rf_curve <span class="pl-k">+</span> spread_curve               <span class="pl-c"><span class="pl-c">#</span> additive combination of the two curves</span>

<span class="pl-c1">discount</span>(yield,<span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> 1 / (1 + 0.064 + 0.014) ^ 1.5</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-rates" class="anchor" aria-hidden="true" href="#rates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rates</h3>
<p>Rates are types that wrap scalar values to provide information about how to determine <code>discount</code> and <code>accumulation</code> factors.</p>
<p>There are two <code>CompoundingFrequency</code> types:</p>
<ul>
<li><code>Periodic(m)</code> for rates that compound <code>m</code> times per period (e.g. <code>m</code> times per year if working with annual rates).</li>
<li><code>Continuous()</code> for continuously compounding rates.</li>
</ul>
<h4><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Rate(0.05,Continuous())       # 5% continuously compounded
Continuous(0.05)              # alternate constructor

Rate(0.05, Periodic(2))       # 5% compounded twice per period
Periodic(0.05, 2)             # alternate constructor

# construct a vector of rates with the given compounding
Rate.(0.02,0.03,0.04,Periodic(2)) 
"><pre><span class="pl-c1">Rate</span>(<span class="pl-c1">0.05</span>,<span class="pl-c1">Continuous</span>())       <span class="pl-c"><span class="pl-c">#</span> 5% continuously compounded</span>
<span class="pl-c1">Continuous</span>(<span class="pl-c1">0.05</span>)              <span class="pl-c"><span class="pl-c">#</span> alternate constructor</span>

<span class="pl-c1">Rate</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">Periodic</span>(<span class="pl-c1">2</span>))       <span class="pl-c"><span class="pl-c">#</span> 5% compounded twice per period</span>
<span class="pl-c1">Periodic</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">2</span>)             <span class="pl-c"><span class="pl-c">#</span> alternate constructor</span>

<span class="pl-c"><span class="pl-c">#</span> construct a vector of rates with the given compounding</span>
<span class="pl-c1">Rate</span>.(<span class="pl-c1">0.02</span>,<span class="pl-c1">0.03</span>,<span class="pl-c1">0.04</span>,<span class="pl-c1">Periodic</span>(<span class="pl-c1">2</span>)) </pre></div>
<h3><a id="user-content-yields-1" class="anchor" aria-hidden="true" href="#yields-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Yields</h3>
<p>There are a several ways to construct a yield curve object. <code>rates</code> can be a vector of <code>Rate</code>s described above, or will assume <code>Periodic(1)</code> if the functions are given <code>Real</code> number values</p>
<ul>
<li><code>Yields.Zero(rates,maturities)</code>  using a vector of zero, or spot, rates</li>
<li><code>Yields.Forward(rates,maturities)</code> using a vector of one-period (or <code>periods</code>-long) forward rates</li>
<li><code>Yields.Constant(rate)</code> takes a single constant rate for all times</li>
<li><code>Yields.Step(rates,maturities)</code> doesn't interpolate - the rate is flat up to the corresponding time in <code>times</code></li>
<li><code>Yields.Par(rates,maturities)</code> takes a series of yields for securities priced at par.Assumes that maturities &lt;= 1 year do not pay coupons and that after one year, pays coupons with frequency equal to the CompoundingFrequency of the corresponding rate.</li>
<li><code>Yields.CMT(rates,maturities)</code> takes the most commonly presented rate data (e.g. <a href="https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield" rel="nofollow">Treasury.gov</a>) and bootstraps the curve given the combination of bills and bonds.</li>
<li><code>Yields.CMT(rates,maturities)</code> takes the most commonly presented rate data (e.g. <a href="https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield" rel="nofollow">Treasury.gov</a>) and bootstraps the curve given the combination of bills and bonds.</li>
</ul>
<h3><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h3>
<p>Most of the above yields have the following defined (goal is to have them all):</p>
<ul>
<li><code>discount(curve,from,to)</code> or <code>discount(curve,to)</code> gives the discount factor</li>
<li><code>accumulation(curve,from,to)</code> or <code>accumulation(curve,to)</code> gives the accumulation factor</li>
<li><code>forward(curve,from,to)</code> gives the average rate between the two given times</li>
<li><code>zero(curve,time)</code> or <code>zero(curve,time,CompoundingFrequency)</code> gives the zero-coupon spot rate for the given time.</li>
</ul>
<h3><a id="user-content-combinations" class="anchor" aria-hidden="true" href="#combinations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Combinations</h3>
<p>Different yield objects can be combined with addition or subtraction. See the <a href="#quickstart">Quickstart</a> for an example.</p>
<p>When adding a <code>Yields.AbstractYield</code> with a scalar or vector, that scalar or vector will be promoted to a yield type via <a href="#yield"><code>Yield()</code></a>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y1 = Yields.Constant(0.05)
y2 = y1 + 0.01                # y2 is a yield of 0.06
"><pre>y1 <span class="pl-k">=</span> Yields<span class="pl-k">.</span><span class="pl-c1">Constant</span>(<span class="pl-c1">0.05</span>)
y2 <span class="pl-k">=</span> y1 <span class="pl-k">+</span> <span class="pl-c1">0.01</span>                <span class="pl-c"><span class="pl-c">#</span> y2 is a yield of 0.06</span></pre></div>
<h2><a id="user-content-internals" class="anchor" aria-hidden="true" href="#internals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Internals</h2>
<p>For time-variant yields (ie yield <em>curves</em>), the inputs are converted to spot rates and linearly interpolated (using <a href="https://github.com/JuliaMath/Interpolations.jl"><code>Interpolations.jl</code></a>).</p>
<p>If you want more precise curvature (e.g. cubic spline interpolation) you can pre-process your rates into a greater number of input points before creating the <code>Yields</code> representation. <code>Yields.jl</code> uses <code>Interpolations.jl</code> as it is a pure-Julia interpolations package and enables auto-differentiation (AD) in <code>Yields.jl</code> usage. For example, <a href="https://github.com/JuliaActuary/ActuaryUtilities.jl"><code>ActuaryUtilities.jl</code></a> uses AD for <code>duration</code> and <code>convexity</code>.</p>
<h3><a id="user-content-combination-implementation" class="anchor" aria-hidden="true" href="#combination-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Combination Implementation</h3>
<p><a href="#combinations">Combinations</a> track two different curve objects and are not combined into a single underlying data structure. This means that you may achieve better performance if you combine the rates before constructing a <code>Yields</code> representation. The exception to this is <code>Constant</code> curves, which <em>do</em> get combined into a single structure that is as performant as pre-combined rate structure.</p>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Packages</h2>
<ul>
<li><a href="https://github.com/felipenoris/InterestRates.jl"><strong><code>InterestRates.jl</code></strong></a> specializes in fast rate calculations aimed at valuing fixed income contracts, with business-day-level accuracy.
<ul>
<li>Comparative comments: <strong><code>Yields.jl</code></strong> does not try to provide as precise controls over the timing, structure, and interpolation of the curve. Instead, <strong><code>Yields.jl</code></strong> provides a minimal interface for common modeling needs.</li>
</ul>
</li>
</ul>
</article></div>