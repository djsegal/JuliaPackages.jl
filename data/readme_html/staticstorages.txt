<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-staticstorages" class="anchor" aria-hidden="true" href="#staticstorages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StaticStorages</h1>
<p dir="auto">StaticStorages.jl provides a general mechanism for providing static storages
allocated at code-definition (macro expansion) time.  These storages are
discoverable across packages.  It is useful for inserting performance counters
and event trackers in distinct packages.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Arbitrary objects can be stored via <code>put!</code> and retrieved via <code>get</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticStorages

julia&gt; key = StaticStorages.put!(@__MODULE__, [123]);

julia&gt; StaticStorages.get(key) == [123]
true

julia&gt; push!(StaticStorages.get(key), 456);

julia&gt; StaticStorages.get(key) == [123, 456]
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticStorages

julia<span class="pl-k">&gt;</span> key <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">put!</span>(<span class="pl-c1">@__MODULE__</span>, [<span class="pl-c1">123</span>]);

julia<span class="pl-k">&gt;</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">get</span>(key) <span class="pl-k">==</span> [<span class="pl-c1">123</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(StaticStorages<span class="pl-k">.</span><span class="pl-c1">get</span>(key), <span class="pl-c1">456</span>);

julia<span class="pl-k">&gt;</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">get</span>(key) <span class="pl-k">==</span> [<span class="pl-c1">123</span>, <span class="pl-c1">456</span>]
<span class="pl-c1">true</span></pre></div>
<p dir="auto">A unique bucket can be allocated with <code>StaticStorages.BucketKey()</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticStorages

julia&gt; bucketkey = StaticStorages.BucketKey();

julia&gt; key = StaticStorages.put!(@__MODULE__, bucketkey, []);

julia&gt; StaticStorages.get(bucketkey, key) == []
true

julia&gt; StaticStorages.getbucket(bucketkey)[key] == []
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticStorages

julia<span class="pl-k">&gt;</span> bucketkey <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">BucketKey</span>();

julia<span class="pl-k">&gt;</span> key <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">put!</span>(<span class="pl-c1">@__MODULE__</span>, bucketkey, []);

julia<span class="pl-k">&gt;</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">get</span>(bucketkey, key) <span class="pl-k">==</span> []
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">getbucket</span>(bucketkey)[key] <span class="pl-k">==</span> []
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-implementing-per-location-counter" class="anchor" aria-hidden="true" href="#implementing-per-location-counter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementing per-location counter</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module CounterDemo

using StaticStorages

const COUNTER_BUCKET = StaticStorages.BucketKey()

macro count()
    counter = Threads.Atomic{UInt}(0)  # allocate a &quot;static storage&quot; at macro expansion time
    key = StaticStorages.put!(__module__, COUNTER_BUCKET, counter)
    quote
        $(QuoteNode(counter))[] += 1
        $(QuoteNode(key))
    end
end

counters() = StaticStorages.getbucket(COUNTER_BUCKET)

end  # module CounterDemo


count_user_a() = CounterDemo.@count
count_user_b() = CounterDemo.@count

ka = count_user_a()
kb = count_user_b()
count_user_b()
count_user_a()
count_user_a()

println(&quot;count_user_a() called &quot;, CounterDemo.counters()[ka][], &quot; times&quot;)
println(&quot;count_user_b() called &quot;, CounterDemo.counters()[kb][], &quot; times&quot;)

# output

count_user_a() called 3 times
count_user_b() called 2 times"><pre><span class="pl-k">module</span> CounterDemo

<span class="pl-k">using</span> StaticStorages

<span class="pl-k">const</span> COUNTER_BUCKET <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">BucketKey</span>()

<span class="pl-k">macro</span> <span class="pl-en">count</span>()
    counter <span class="pl-k">=</span> Threads<span class="pl-k">.</span><span class="pl-c1">Atomic</span><span class="pl-c1">{UInt}</span>(<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> allocate a "static storage" at macro expansion time</span>
    key <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">put!</span>(__module__, COUNTER_BUCKET, counter)
    <span class="pl-k">quote</span>
        <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(counter))[] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(key))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-en">counters</span>() <span class="pl-k">=</span> StaticStorages<span class="pl-k">.</span><span class="pl-c1">getbucket</span>(COUNTER_BUCKET)

<span class="pl-k">end</span>  <span class="pl-c"><span class="pl-c">#</span> module CounterDemo</span>


<span class="pl-en">count_user_a</span>() <span class="pl-k">=</span> CounterDemo<span class="pl-k">.</span><span class="pl-c1">@count</span>
<span class="pl-en">count_user_b</span>() <span class="pl-k">=</span> CounterDemo<span class="pl-k">.</span><span class="pl-c1">@count</span>

ka <span class="pl-k">=</span> <span class="pl-c1">count_user_a</span>()
kb <span class="pl-k">=</span> <span class="pl-c1">count_user_b</span>()
<span class="pl-c1">count_user_b</span>()
<span class="pl-c1">count_user_a</span>()
<span class="pl-c1">count_user_a</span>()

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>count_user_a() called <span class="pl-pds">"</span></span>, CounterDemo<span class="pl-k">.</span><span class="pl-c1">counters</span>()[ka][], <span class="pl-s"><span class="pl-pds">"</span> times<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>count_user_b() called <span class="pl-pds">"</span></span>, CounterDemo<span class="pl-k">.</span><span class="pl-c1">counters</span>()[kb][], <span class="pl-s"><span class="pl-pds">"</span> times<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">count_user_a</span>() called <span class="pl-c1">3</span> times
<span class="pl-c1">count_user_b</span>() called <span class="pl-c1">2</span> times</pre></div>
<p dir="auto">In a more practical example, the object put via <code>StaticStorages.put!</code> can also
contain meta information such as the file and the line number (<code>__source__</code>).  A
global summary can then be generated by iterating over the entry in the
dictionary returned from <code>StaticStorages.getbucket</code>.</p>
<p dir="auto">Note that even though <code>__module__</code> is passed to <code>StaticStorages.put!</code>, the
bucket returned from <code>StaticStorages.getbucket</code> contains all values added by
<code>StaticStorages.put!</code> in all modules and packages.</p>
<h2 dir="auto"><a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation details</h2>
<p dir="auto">StaticStorages.jl stores the values in a global dictionary. The import hook is
used for merging the values generated during precompilation. However, it does
not interfere  with user-defined <code>__init__</code> function.</p>
</article></div>