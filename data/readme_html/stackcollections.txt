<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stackcollectionsjl" class="anchor" aria-hidden="true" href="#stackcollectionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StackCollections.jl</h1>
<p><a href="https://jakobnissen.github.io/StackCollections.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/jakobnissen/StackCollections.jl/workflows/CI/badge.svg"><img src="https://github.com/jakobnissen/StackCollections.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/StackCollections.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ad9df2d8cefcfe7df522e3f90592e6bcb0efe17908493a9c889f2f4916ef724/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f537461636b436f6c6c656374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/StackCollections.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><em>Fixed-bit collections in Julia</em></p>
<p>This package implements a few collection types that can be stored in one or a few machine integers:</p>
<ul>
<li><code>DigitSet</code>: A set of integers 0:63</li>
<li><code>StackSet</code>: A set of integers N:N+63</li>
<li><code>StackVector{L}</code>: A boolean vector with a length <code>L</code> of up to 64.</li>
<li><code>OneHotVector</code>: A boolean vector with exactly one value <code>true</code>, rest <code>false</code>.</li>
</ul>
<p>The main features of the types are:</p>
<ul>
<li>They are simple to use, implements the basic methods from <code>Base</code> you would expect such as <code>union</code> for sets and <code>reverse</code> for vectors:</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = StackVector{4}([true, true, false, true]); reverse(a)
4-element StackVector{4}:
 1
 0
 1
 1
"><pre><code>julia&gt; a = StackVector{4}([true, true, false, true]); reverse(a)
4-element StackVector{4}:
 1
 0
 1
 1
</code></pre></div>
<ul>
<li>They are safe by default, and throws informative error messages if you attempt illegal or undefined operations.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; push(DigitSet(), 100)
ERROR: ArgumentError: DigitSet can only contain 0:63
"><pre><code>julia&gt; push(DigitSet(), 100)
ERROR: ArgumentError: DigitSet can only contain 0:63
</code></pre></div>
<ul>
<li>All types are immutable and so easier to reason about. Base methods that usually end with an exclamation mark such as <code>push!</code> instead must use <code>push</code>.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; push!(DigitSet(), 100)
ERROR: MethodError: no method matching push!(::DigitSet, ::Int64)
"><pre><code>julia&gt; push!(DigitSet(), 100)
ERROR: MethodError: no method matching push!(::DigitSet, ::Int64)
</code></pre></div>
<ul>
<li>They are <em>highly</em> efficiently implemented, with most methods meticulously crafted for maximal performance.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; f(x, y) = length(setdiff(x, symdiff(x, y)));

julia&gt; code_native(f, (DigitSet, DigitSet), debuginfo=:none)
    .section    __TEXT,__text,regular,pure_instructions
    movq    (%rsi), %rax
    andq    (%rdi), %rax
    popcntq %rax, %rax
    retq
    nopl    (%rax)
"><pre><code>julia&gt; f(x, y) = length(setdiff(x, symdiff(x, y)));

julia&gt; code_native(f, (DigitSet, DigitSet), debuginfo=:none)
    .section    __TEXT,__text,regular,pure_instructions
    movq    (%rsi), %rax
    andq    (%rdi), %rax
    popcntq %rax, %rax
    retq
    nopl    (%rax)
</code></pre></div>
<p>This API follows SemVer 2.0.0. The API for this package is defined by the documentation.</p>
</article></div>