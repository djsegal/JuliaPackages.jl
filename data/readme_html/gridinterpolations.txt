<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gridinterpolations" class="anchor" aria-hidden="true" href="#gridinterpolations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GridInterpolations</h1>
<p dir="auto"><a href="https://travis-ci.org/sisl/GridInterpolations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c0e2acd9cda2694bad3ed44686b93ca2116338989b7a658e1cba1cd7494198d/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f47726964496e746572706f6c6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/GridInterpolations.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/sisl/GridInterpolations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ab722a0d736922536af214cc10d4ba5e7bebb3a0847dfdce97a70fb84e9a79f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7369736c2f47726964496e746572706f6c6174696f6e732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/sisl/GridInterpolations.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package performs multivariate interpolation on a rectilinear grid. At the moment, it provides implementations of multilinear and simplex interpolation. As of benchmarks in December 2016, multilinear interpolation performs fastest and with the most accuracy.</p>
<p dir="auto">The following image visualizes grid-based interpolation in two dimensions, with shape of interpolater for (−0.3,0.8) inscribed. The small dots reﬂect the interpolation's estimate for sin(x)+2cos(y)+sin(5xy), which is the underlying reward function approximated by the large dot lattice.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="sampleInterpolation.png"><img src="sampleInterpolation.png" alt="Illustration of performance of multilinear and simplex interpolation methods" style="max-width: 100%;"></a></p>
<p dir="auto">For a description of multilinear and simplex interpolation see: Scott Davies, <em>Multidimensional Triangulation and Interpolation for Reinforcement Learning</em>, Advances in Neural Information Processing Systems, Cambridge, MA: MIT Press, 1997. <a href="http://papers.nips.cc/paper/1229-multidimensional-triangulation-and-interpolation-for-reinforcement-learning.pdf" rel="nofollow">pdf</a></p>
<p dir="auto">There are some related packages, such as <a href="https://github.com/timholy/Grid.jl">Grid.jl</a> and <a href="https://github.com/tlycken/Interpolations.jl">Interpolations.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Start Julia and run the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;GridInterpolations&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GridInterpolations<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To use the GridInterpolations module, begin your code with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GridInterpolations"><pre><span class="pl-k">using</span> GridInterpolations</pre></div>
<h2 dir="auto"><a id="user-content-interpolation" class="anchor" aria-hidden="true" href="#interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interpolation</h2>
<p dir="auto">Create two-dimensional interpolation grids, a data array, and a point of interest:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="grid = RectangleGrid([0., 0.5, 1.],[0., 0.5, 1.])  	# rectangular grid
sGrid = SimplexGrid([0., 0.5, 1.],[0., 0.5, 1.])	# simplex grid
gridData = [8., 1., 6., 3., 5., 7., 4., 9., 2.]   	# vector of value data at each cut
x = [0.25, 0.75]  									# point at which to perform interpolation"><pre>grid <span class="pl-k">=</span> <span class="pl-c1">RectangleGrid</span>([<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>],[<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>])  	<span class="pl-c"><span class="pl-c">#</span> rectangular grid</span>
sGrid <span class="pl-k">=</span> <span class="pl-c1">SimplexGrid</span>([<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>],[<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>])	<span class="pl-c"><span class="pl-c">#</span> simplex grid</span>
gridData <span class="pl-k">=</span> [<span class="pl-c1">8.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">6.</span>, <span class="pl-c1">3.</span>, <span class="pl-c1">5.</span>, <span class="pl-c1">7.</span>, <span class="pl-c1">4.</span>, <span class="pl-c1">9.</span>, <span class="pl-c1">2.</span>]   	<span class="pl-c"><span class="pl-c">#</span> vector of value data at each cut</span>
x <span class="pl-k">=</span> [<span class="pl-c1">0.25</span>, <span class="pl-c1">0.75</span>]  									<span class="pl-c"><span class="pl-c">#</span> point at which to perform interpolation</span></pre></div>
<p dir="auto">Perform interpolation on the rectangular grid:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; interpolate(grid,gridData,x)
5.25"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(grid,gridData,x)
<span class="pl-c1">5.25</span></pre></div>
<p dir="auto">Or interpolate on the simplex grid:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; interpolate(sGrid,gridData,x)
6.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolate</span>(sGrid,gridData,x)
<span class="pl-c1">6.0</span></pre></div>
<p dir="auto">Compute interpolants for the grids:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sGrid = SimplexGrid([0., 0.5, 1.],[0., 0.5, 1.])
[[0.0,0.5,1.0],[0.0,0.5,1.0]]

julia&gt; interpolants(sGrid, x)
([4,5,8],[0.5,0.0,0.5])"><pre>julia<span class="pl-k">&gt;</span> sGrid <span class="pl-k">=</span> <span class="pl-c1">SimplexGrid</span>([<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>],[<span class="pl-c1">0.</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>])
[[<span class="pl-c1">0.0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">1.0</span>],[<span class="pl-c1">0.0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">1.0</span>]]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">interpolants</span>(sGrid, x)
([<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">8</span>],[<span class="pl-c1">0.5</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.5</span>])</pre></div>
<p dir="auto">Convert an index to a Grid coordinate:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ind2x(grid, 3)
2-element Array{Float64,1}:
 1.0
 0.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ind2x</span>(grid, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Number of vertices in the grid:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; length(grid)
9"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(grid)
<span class="pl-c1">9</span></pre></div>
<p dir="auto">Number of dimensions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dimensions(grid)
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">dimensions</span>(grid)
<span class="pl-c1">2</span></pre></div>
<p dir="auto">Multi-dimensional indexing using Cartesian coordinates:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; [grid[c] for c in CartesianIndices((3,3))]
3×3 Array{Array{Float64,1},2}:
 [0.0, 0.0]  [0.0, 0.5]  [0.0, 1.0]
 [0.5, 0.0]  [0.5, 0.5]  [0.5, 1.0]
 [1.0, 0.0]  [1.0, 0.5]  [1.0, 1.0]"><pre>julia<span class="pl-k">&gt;</span> [grid[c] <span class="pl-k">for</span> c <span class="pl-k">in</span> <span class="pl-c1">CartesianIndices</span>((<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Array{Float64,<span class="pl-c1">1</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]  [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>]  [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]
 [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>]  [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]  [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>]
 [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>]  [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.5</span>]  [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]</pre></div>
<p dir="auto">or multi-dimensional indices</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; grid[2,2]
2-element Array{Float64,1}:
 0.5
 0.5"><pre>julia<span class="pl-k">&gt;</span> grid[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.5</span></pre></div>
<p dir="auto">Sequential iteration over grid points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; for x in grid
           # do stuff
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> grid
           <span class="pl-c"><span class="pl-c">#</span> do stuff</span>
       <span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">Contributors to this package include Maxim Egorov, Eric Mueller, and Mykel Kochenderfer.</p>
</article></div>