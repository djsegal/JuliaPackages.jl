<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-partialsvdstoch" class="anchor" aria-hidden="true" href="#partialsvdstoch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PartialSvdStoch</h1>
<p>This package provides approximate partial SVD using stochastic methods.</p>
<p>It implements two SVD related algorithms, the real purpose of the package being in fact the Shamir algorithm described in the first item.</p>
<p>The algorithms are the following:</p>
<ol>
<li>The paper by <strong>Ohad Shamir: Fast Stochastic Algorithms for SVD and PCA : convergences Properties and Convexity(2015)</strong>.</li>
</ol>
<p>The algorithm combines a stochastic gradient approach and iterative techniques.<br>
It requires a correct initialization of the left singular vectors obtained here using the <strong>impressive LowRankApprox</strong> package
if the rank is imposed or the algorithm descrided below in the second item if we search the rank for a target precision.
It then provides in a few iterations a further 25%-50% diminution of the relative error in the Froebonius norm.
This can correspond to a reduction by up to a factor of 4 of the rank necessary to obtain the same accuracy by any of the 2 initializations possible.
(Cf by example the test <em>vrpca_epsil</em>)</p>
<p>The combination of the Shamir algorithm with the initializing algorithms mentionned above
provide accurate truncated SVD or range approximation for a good performance compromise and can thus save computation in further processing.</p>
<ol start="2">
<li>The chapter on fast incremental Monte-Carlo Svd from <strong>Spectral Algorithms. S. Vempala and R. Kannan(2009)</strong>
(chapter 7 P 85 and Th 7.2 7.3).</li>
</ol>
<p>The algorithm relies on an iterative decomposition of the range of the data matrix.
Each iteration does successive sampling of columns data vectors proportionally to their L2-norm, construct a range approximation, and substract the current range approximation before next iteration.<br>
Due to its incremental construction it is also possible to ask for an approximation at a given precision without asking for a given rank and let the computation give the rank as an output.</p>
<p>It is not as fast as the <em>LowRankApprox</em> package but can provide an alternative depending on the data structure.
Run times are about 4s for a (10000, 20000) matrix and a rank=100 approximation with 2 iterations
on a 2 core laptop and 8 threads (See test <em>ifsvd_lowRankApproxEpsil</em>).
On the same matrix, it runs in 14s if we search the rank giving a 0.05 approximation.</p>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<p>In the directory test are some tests providing examples of the different uses including timing and precision
comparisons with matrix sizes up to (10000, 20000).<br>
Tests can be run going in the test directory and just execute <em>include("runtest.jl")</em>
in the Julia REPL.<br>
The Html documentation is generated by executing <em>julia make.jl</em> in the doc directory
from a shell.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>Licensed under either of</p>
<ul>
<li>Apache License, Version 2.0, <a href="LICENSE-APACHE">LICENSE-APACHE</a> or <a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow">http://www.apache.org/licenses/LICENSE-2.0</a></li>
<li>MIT license <a href="LICENSE-MIT">LICENSE-MIT</a> or <a href="http://opensource.org/licenses/MIT" rel="nofollow">http://opensource.org/licenses/MIT</a></li>
</ul>
<p>at your option.</p>
<p>This software was written on my own while working at <a href="http://www.cea.fr/" rel="nofollow">CEA</a>, <a href="http://www-list.cea.fr/en/" rel="nofollow">CEA-LIST</a></p>
</article></div>