<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-dash-for-julia" class="anchor" aria-hidden="true" href="#dash-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dash for Julia</h2>
<h4><a id="user-content-create-beautiful-analytic-applications-in-julia" class="anchor" aria-hidden="true" href="#create-beautiful-analytic-applications-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create beautiful, analytic applications in Julia.</h4>
<p><g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png">ðŸš§</g-emoji> Dash.jl is a work-in-progress. Feel free to test the waters and submit issues.</p>
<p>Built on top of Plotly.js, React and HTTP.jl, <a href="https://plotly.com/dash/" rel="nofollow">Dash</a> ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical Julia code.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Please ensure that you are using a version of Julia &gt;= 1.2.</p>
<p>To install the most recently released version:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/plotly/Dash.jl.git<span class="pl-pds">"</span></span>))</pre></div>
<p>To install the latest (stable) development version instead:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/plotly/Dash.jl.git<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dev<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/plotly/dash-html-components.git<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/plotly/dash-core-components.git<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/plotly/dash-table.git<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>jl<span class="pl-pds">"</span></span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-basic-application" class="anchor" aria-hidden="true" href="#basic-application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic application</h3>
<pre lang="jldoctest"><code>julia&gt; using Dash
julia&gt; using DashHtmlComponents
julia&gt; using DashCoreComponents

julia&gt; app = dash(external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"])
 
julia&gt; app.layout = html_div() do
        html_h1("Hello Dash"),
        html_div("Dash.jl: Julia interface for Dash"),
        dcc_graph(
            id = "example-graph",
            figure = (
                data = [
                    (x = [1, 2, 3], y = [4, 1, 2], type = "bar", name = "SF"),
                    (x = [1, 2, 3], y = [2, 4, 5], type = "bar", name = "MontrÃ©al"),
                ],
                layout = (title = "Dash Data Visualization",)
            )
        )
    end

julia&gt; run_server(app, "0.0.0.0", 8080)
</code></pre>
<ul>
<li>The <code>DashApp</code> struct represents a dashboard application.</li>
<li>To make <code>DashApp</code> struct use <code>dash(layout_maker::Function, name::String;  external_stylesheets::Vector{String} = Vector{String}(), url_base_pathname="/", assets_folder::String = "assets")`` where </code>layout_maker` is a function with signature ()::Component</li>
<li>Unlike the Python version where each Dash component is represented as a separate class, all components in Dash.jl are represented by struct <code>Component</code>.</li>
<li>You can create <code>Component</code> specific for concrete Dash component by the set of functions in the form <code>lowercase(&lt;component package&gt;)_lowercase(&lt;component name&gt;)</code>. For example, in Python html <code>&lt;div&gt;</code> element is represented as <code>HTML.Div</code> in Dasboards it is created using function <code>html_div</code></li>
<li>The list of all supported components is available in docstring for Dasboards module.</li>
<li>All functions for a component creation have the signature <code>(;kwargs...)::Component</code>. List of key arguments specific for the concrete component is available in the docstring for each function.</li>
<li>Functions for creation components which have <code>children</code> property have two additional methods <code>(children::Any; kwargs...)::Component</code> and <code>(children_maker::Function; kwargs..)::Component</code>. <code>children</code> must by string or number or single component or collection of components.</li>
<li><code>make_handler(app::Dash; debug::Bool = false)</code> makes a handler function for using in HTTP package.</li>
</ul>
<p><strong>Once you have run the code to create the Dashboard, go to <code>http://127.0.0.1:8080</code> in your browser to view the Dashboard!</strong></p>
<h3><a id="user-content-basic-callback" class="anchor" aria-hidden="true" href="#basic-callback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Callback</h3>
<pre lang="jldoctest"><code>
julia&gt; using Dash
julia&gt; using DashHtmlComponents
julia&gt; using DashCoreComponents

julia&gt; app = dash(external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"])

julia&gt; app.layout = html_div() do
        dcc_input(id = "my-id", value="initial value", type = "text"),
        html_div(id = "my-div")        
    end

julia&gt; callback!(app, Output("my-div", "children"), Input("my-id", "value")) do input_value
    "You've entered $(input_value)"
end

julia&gt; run_server(app, "0.0.0.0", 8080)
</code></pre>
<ul>
<li>You can make your dashboard interactive by register callbacks for changes in frontend with function <code>callback!(func::Function, app::Dash, output, input, state)</code></li>
<li>Inputs and outputs (and states, see below) of callback can be <code>Input</code>, <code>Output</code>, <code>State</code> objects or vectors of this objects</li>
<li>Callback function must have the signature(inputs..., states...), and provide a return value comparable (in terms of number of elements) to the outputs being updated.</li>
</ul>
<h3><a id="user-content-states-and-multiple-outputs" class="anchor" aria-hidden="true" href="#states-and-multiple-outputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>States and Multiple Outputs</h3>
<pre lang="jldoctest"><code>julia&gt; using Dash
julia&gt; using DashHtmlComponents
julia&gt; using DashCoreComponents

julia&gt; app = dash(external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"])
 
julia&gt; app.layout = html_div() do
        dcc_input(id = "my-id", value="initial value", type = "text"),
        html_div(id = "my-div"),
        html_div(id = "my-div2")        
    end

julia&gt; callback!(app, [Output("my-div"."children"), Output("my-div2"."children")], Input("my-id", "value"), State("my-id", "type")) do input_value, state_value
    "You've entered $(input_value) in input with type $(state_value)",
    "You've entered $(input_value)"
end
julia&gt; run_server(app, "0.0.0.0", 8080)
</code></pre>
<h2><a id="user-content-comparation-with-original-python-syntax" class="anchor" aria-hidden="true" href="#comparation-with-original-python-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparation with original Python syntax</h2>
<h3><a id="user-content-component-naming" class="anchor" aria-hidden="true" href="#component-naming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>component naming:</h3>
<p><code>html.Div</code> =&gt; <code>html_div</code>, <code>dcc.Graph</code> =&gt; <code>dcc_graph</code> and etc</p>
<h3><a id="user-content-component-creation" class="anchor" aria-hidden="true" href="#component-creation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>component creation:</h3>
<p>Just as in Python, functions for declaring components have keyword arguments, which are the same as in Python. <code>html_div(id="my-id", children="Simple text")</code>.
For components which declare <code>children</code>, two additional signatures are available. <code>(children; kwargs..)</code> and <code>(children_maker::Function; kwargs...)</code> so one can write <code>html_div("Simple text", id="my-id")</code> for simple elements, or choose an abbreviated syntax with <code>do</code> syntax for complex elements:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">html_div</span>(id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>outer-div<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">html_h1</span>(<span class="pl-s"><span class="pl-pds">"</span>Welcome<span class="pl-pds">"</span></span>),
    <span class="pl-c1">html_div</span>(id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>inner-div<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-k">......</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-application-and-layout" class="anchor" aria-hidden="true" href="#application-and-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>application and layout:</h3>
<ul>
<li>python:</li>
</ul>
<div class="highlight highlight-source-python"><pre><span class="pl-s1">app</span> <span class="pl-c1">=</span> <span class="pl-s1">dash</span>.<span class="pl-v">Dash</span>(<span class="pl-s">"Test"</span>, <span class="pl-s1">external_stylesheets</span><span class="pl-c1">=</span><span class="pl-s1">external_stylesheets</span>)
<span class="pl-s1">app</span>.<span class="pl-s1">layout</span> <span class="pl-c1">=</span> <span class="pl-s1">html</span>.<span class="pl-v">Div</span>(<span class="pl-s1">children</span><span class="pl-c1">=</span>[....])</pre></div>
<ul>
<li>Dash.jl:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>app <span class="pl-k">=</span> <span class="pl-c1">dash</span>(<span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>, external_stylesheets<span class="pl-k">=</span>external_stylesheets) 

app<span class="pl-k">.</span>layout <span class="pl-k">=</span> <span class="pl-c1">html_div</span>() <span class="pl-k">do</span>
    <span class="pl-k">......</span>
   <span class="pl-k">end</span>
</pre></div>
<h3><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>callbacks:</h3>
<ul>
<li>Python:</li>
</ul>
<div class="highlight highlight-source-python"><pre><span class="pl-en">@<span class="pl-s1">app</span>.<span class="pl-s1">callback</span>(<span class="pl-v">Output</span>(<span class="pl-s">'output'</span>, <span class="pl-s">'children'</span>),</span>
<span class="pl-en">              [<span class="pl-v">Input</span>(<span class="pl-s">'submit-button'</span>, <span class="pl-s">'n_clicks'</span>)],</span>
<span class="pl-en">              [<span class="pl-v">State</span>(<span class="pl-s">'state-1'</span>, <span class="pl-s">'value'</span>),</span>
<span class="pl-en">               <span class="pl-v">State</span>(<span class="pl-s">'state-2'</span>, <span class="pl-s">'value'</span>)])</span>
<span class="pl-k">def</span> <span class="pl-en">update_output</span>(<span class="pl-s1">n_clicks</span>, <span class="pl-s1">state1</span>, <span class="pl-s1">state2</span>):
.....</pre></div>
<ul>
<li>Dash.jl:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">callback!</span>(app, <span class="pl-c1">Output</span>(<span class="pl-s"><span class="pl-pds">"</span>output<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>children<span class="pl-pds">"</span></span>),
              [<span class="pl-c1">Input</span>(<span class="pl-s"><span class="pl-pds">"</span>submit-button<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>n_clicks<span class="pl-pds">"</span></span>)],
              [<span class="pl-c1">State</span>(<span class="pl-s"><span class="pl-pds">"</span>state-1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>),
               <span class="pl-c1">State</span>(<span class="pl-s"><span class="pl-pds">"</span>state-2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>)]) <span class="pl-k">do</span>  n_clicks, state1, state2
<span class="pl-k">.....</span>
<span class="pl-k">end</span></pre></div>
<p>Be careful - in Dash.jl states come first in an arguments list.</p>
<h3><a id="user-content-json" class="anchor" aria-hidden="true" href="#json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JSON:</h3>
<p>I use JSON2.jl for JSON serialization/deserialization, so in callbacks all JSON objects are <code>NamedTuples</code> rather than dictionaries. Within component properties you can use both <code>Dict</code> and <code>NamedTuple</code> for JSON objects.</p>
<p>Note when declaring elements with a single properly that <code>layout = (title = "Test graph")</code> is not interpreted as a <code>NamedTuple</code> by Julia  - you'll need to add a comma when declaring the layout, e.g. <code>layout = (title = "Test graph",)</code></p>
</article></div>