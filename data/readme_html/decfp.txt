<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-decfp-ieee-decimal-floating-point-in-julia" class="anchor" aria-hidden="true" href="#decfp-ieee-decimal-floating-point-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DecFP: IEEE Decimal Floating-point in Julia</h1>
<p><a href="https://travis-ci.org/JuliaMath/DecFP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/afc586ee3574917c7200e06f210ee765c998066b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f44656346502e6a6c2e737667" alt="Travis Status" data-canonical-src="https://travis-ci.org/JuliaMath/DecFP.jl.svg" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/simonbyrne/decfp-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/addf36f2d674d56ed703d372798123995e1970e1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f363535377970626878737430347435772f6272616e63682f6d61737465723f7376673d74727565" alt="Appveyor status" data-canonical-src="https://ci.appveyor.com/api/projects/status/6557ypbhxst04t5w/branch/master?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaMath/DecFP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2ac380850125eda7bada45e21a0fd9e9c542158a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f44656346502e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/DecFP.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>The DecFP package is a Julia wrapper around the <a href="https://software.intel.com/en-us/articles/intel-decimal-floating-point-math-library" rel="nofollow">Intel Decimal
Floating-Point Math
Library</a>,
providing a software implementation of the IEEE 754-2008 Decimal
Floating-Point Arithmetic specification.</p>
<p>32-bit, 64-bit, and 128-bit decimal floating-point types <code>Dec32</code>,
<code>Dec64</code>, and <code>Dec128</code>, respectively, are provided.  This is very
different from packages such as
<a href="https://github.com/tinybike/Decimals.jl">Decimals.jl</a>, which provide
<em>arbitrary-precision</em> decimal types analogous to <code>BigFloat</code>: arbitrary
precision types are very flexible, but fixed-precision types such
as those in DecFP are much faster (though still about 100x slower than
the hardware binary floating-point types <code>Float32</code> and <code>Float64</code>) and
more memory-efficient (an array of <code>Dec64</code> values has exactly the
same memory footprint as an array of <code>Float64</code> values).</p>
<p>The latest version of the DecFP package requires Julia 1.3 or later.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>Dec64</code> and the other types mentioned above can be constructed from
other Julia numeric types (binary floating-point or integers) via
<code>Dec64(3.5)</code> or <code>Dec(3)</code>, from strings by <code>parse(Dec64, "3.2")</code> or
<code>d64"3.2"</code> (a Julia string macro); similarly for <code>Dec32</code> and <code>Dec128</code>.
The string macro <code>d"3.2"</code> constructs <code>Dec64</code>.</p>
<ul>
<li><strong>Note:</strong> A decimal floating-point constant like <code>1.1</code> in Julia refers to a <code>Float64</code> (binary floating-point) value.  So, for example, <code>Dec128(1.999999999999999999) == 2.0 â‰  d128"1.999999999999999999"</code>, since Julia first rounds <code>1.999999999999999999</code> to the closest <code>Float64</code> value (<code>2.0</code>) before converting to <code>Dec128</code>.  If you need to specify an exact decimal constant, therefore, use one of the string-based constructors.  If you use a string macro like <code>d128"1.999999999999999999"</code>, then the string parsing occurs <em>before</em> compilation and incurs no runtime cost.</li>
</ul>
<p>Once a decimal float is constructed, most Julia arithmetic and
special functions should work without modification.  For example,
<code>d"3.2" * d"4.5"</code> produces the (exact) <code>Dec64</code> result <code>14.4</code>
All basic arithmetic functions are supported, and many special functions
(<code>sqrt</code>, <code>log</code>, trigonometric functions, etc.).   Mixed operations
involving decimal and binary floating-point or integer types are supported
(the result is promoted to decimal floating-point).</p>
<p>In general, you should be able to use the <code>DecFP</code> types in any context
where you would have used binary floating-point types: arrays, complex
arithmetic, and linear algebra should all work, for the most part.</p>
</article></div>