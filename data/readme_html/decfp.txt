<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-decfp-ieee-decimal-floating-point-in-julia" class="anchor" aria-hidden="true" href="#decfp-ieee-decimal-floating-point-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DecFP: IEEE Decimal Floating-point in Julia</h1>
<p><a href="https://travis-ci.org/JuliaMath/DecFP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/afc586ee3574917c7200e06f210ee765c998066b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f44656346502e6a6c2e737667" alt="Travis Status" data-canonical-src="https://travis-ci.org/JuliaMath/DecFP.jl.svg" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/simonbyrne/decfp-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/addf36f2d674d56ed703d372798123995e1970e1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f363535377970626878737430347435772f6272616e63682f6d61737465723f7376673d74727565" alt="Appveyor status" data-canonical-src="https://ci.appveyor.com/api/projects/status/6557ypbhxst04t5w/branch/master?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaMath/DecFP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2ac380850125eda7bada45e21a0fd9e9c542158a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f44656346502e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/DecFP.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>The DecFP package is a Julia wrapper around the <a href="https://software.intel.com/en-us/articles/intel-decimal-floating-point-math-library" rel="nofollow">Intel Decimal
Floating-Point Math
Library</a>,
providing a software implementation of the IEEE 754-2008 Decimal
Floating-Point Arithmetic specification.</p>
<p>32-bit, 64-bit, and 128-bit decimal floating-point types <code>Dec32</code>,
<code>Dec64</code>, and <code>Dec128</code>, respectively, are provided.  This is very
different from packages such as
<a href="https://github.com/tinybike/Decimals.jl">Decimals.jl</a>, which provide
<em>arbitrary-precision</em> decimal types analogous to <code>BigFloat</code>: arbitrary
precision types are very flexible, but fixed-precision types such
as those in DecFP are much faster (though still about 100x slower than
the hardware binary floating-point types <code>Float32</code> and <code>Float64</code>).</p>
<p>The DecFP package currently requires the Julia 0.6 release or later.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p><code>Dec64</code> and the other types mentioned above can be constructed from
other Julia numeric types (binary floating-point or integers) via
<code>Dec64(3.5)</code> or <code>Dec(3)</code>, from strings by <code>parse(Dec64, "3.2")</code> or
<code>d64"3.2"</code> (a Julia string macro); similarly for <code>Dec32</code> and <code>Dec128</code>.
The string macro <code>d"3.2"</code> constructs <code>Dec64</code>.</p>
<p>Once a decimal float is constructed, most Julia arithmetic and
special functions should work without modification.  For example,
<code>d"3.2" * d"4.5"</code> produces the <code>Dec64</code> result <code>+1440E-2</code> (14.4).
Most basic arithmetic functions are supported, and many special functions
(<code>sqrt</code>, <code>log</code>, trigonometric functions, etc.).   Mixed operations
involving decimal and binary floating-point or integer types are supported
(the result is promoted to decimal floating-point).</p>
<p>In general, you should be able to use the <code>DecFP</code> types in any context
where you would have used binary floating-point types: arrays, complex
arithmetic, and linear algebra should all work, for the most part.</p>
</article></div>