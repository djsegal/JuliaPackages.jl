<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tidytablejl" class="anchor" aria-hidden="true" href="#tidytablejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TidyTable.jl</h1>
<p dir="auto"><a href="https://github.com/kdpsingh/TidyTable.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/kdpsingh/TidyTable.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Welcome to the TidyTable.jl project. This is a project that wraps the {tidytable} package in R, which provides {tidyverse} bindings to the lightning-fast {data.table} package. Unlike other DataFrames packages and meta-packages in Julia, this package allows you to provide syntax exactly as you would write it in tidyverse.</p>
<p dir="auto">More docs are coming soon.</p>
<h2 dir="auto"><a id="user-content-install-and-load-the-package-and-generate-a-test-dataframe" class="anchor" aria-hidden="true" href="#install-and-load-the-package-and-generate-a-test-dataframe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install and load the package and generate a test DataFrame</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url = &quot;https://github.com/kdpsingh/TidyTable.jl&quot;)

using TidyTable
using DataFrames
using Chain
using Statistics
using RDatasets
using BenchmarkTools

movies = dataset(&quot;ggplot2&quot;, &quot;movies&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/kdpsingh/TidyTable.jl<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> TidyTable
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> Chain
<span class="pl-k">using</span> Statistics
<span class="pl-k">using</span> RDatasets
<span class="pl-k">using</span> BenchmarkTools

movies <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>ggplot2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>movies<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-using-dataframesjl" class="anchor" aria-hidden="true" href="#using-dataframesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using DataFrames.jl</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f1(df)

  @chain df begin
    subset(:Year =&gt; (x -&gt; x .&gt;= 2000))
    groupby(:Year)
    combine(:Budget =&gt; (x -&gt; mean(skipmissing(x))) =&gt; :Budget)
    transform(:Budget =&gt; (x -&gt; x/1e6) =&gt; :Budget)
  end

end"><pre><span class="pl-k">function</span> <span class="pl-en">f1</span>(df)

  <span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
    <span class="pl-c1">subset</span>(<span class="pl-c1">:Year</span> <span class="pl-k">=&gt;</span> (x <span class="pl-k">-&gt;</span> x <span class="pl-k">.&gt;=</span> <span class="pl-c1">2000</span>))
    <span class="pl-c1">groupby</span>(<span class="pl-c1">:Year</span>)
    <span class="pl-c1">combine</span>(<span class="pl-c1">:Budget</span> <span class="pl-k">=&gt;</span> (x <span class="pl-k">-&gt;</span> <span class="pl-c1">mean</span>(<span class="pl-c1">skipmissing</span>(x))) <span class="pl-k">=&gt;</span> <span class="pl-c1">:Budget</span>)
    <span class="pl-c1">transform</span>(<span class="pl-c1">:Budget</span> <span class="pl-k">=&gt;</span> (x <span class="pl-k">-&gt;</span> x<span class="pl-k">/</span><span class="pl-c1">1e6</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">:Budget</span>)
  <span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="6×2 DataFrame
 Row │ Year   Budget  
     │ Int32  Float64 
─────┼────────────────
   1 │  2000  23.9477
   2 │  2001  19.2356
   3 │  2002  19.3971
   4 │  2003  15.8683
   5 │  2004  13.9057
   6 │  2005  16.4682"><pre class="notranslate"><code>6×2 DataFrame
 Row │ Year   Budget  
     │ Int32  Float64 
─────┼────────────────
   1 │  2000  23.9477
   2 │  2001  19.2356
   3 │  2002  19.3971
   4 │  2003  15.8683
   5 │  2004  13.9057
   6 │  2005  16.4682
</code></pre></div>
<h2 dir="auto"><a id="user-content-using-tidytablejl" class="anchor" aria-hidden="true" href="#using-tidytablejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using TidyTable.jl</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f2(df)

  @chain tidytable(df) begin
    @filter(Year &gt;= 2000)
    @group_by(Year)
    @summarize(Budget = mean(Budget, na.rm = TRUE))
    @mutate(Budget = Budget/1e6)
    collect()
  end

end"><pre><span class="pl-k">function</span> <span class="pl-en">f2</span>(df)

  <span class="pl-c1">@chain</span> <span class="pl-c1">tidytable</span>(df) <span class="pl-k">begin</span>
    <span class="pl-c1">@filter</span>(Year <span class="pl-k">&gt;=</span> <span class="pl-c1">2000</span>)
    <span class="pl-c1">@group_by</span>(Year)
    <span class="pl-c1">@summarize</span>(Budget <span class="pl-k">=</span> <span class="pl-c1">mean</span>(Budget, na<span class="pl-k">.</span>rm <span class="pl-k">=</span> TRUE))
    <span class="pl-c1">@mutate</span>(Budget <span class="pl-k">=</span> Budget<span class="pl-k">/</span><span class="pl-c1">1e6</span>)
    <span class="pl-c1">collect</span>()
  <span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="6×2 DataFrame
 Row │ Year   Budget  
     │ Int64  Float64 
─────┼────────────────
   1 │  2000  23.9477
   2 │  2001  19.2356
   3 │  2002  19.3971
   4 │  2003  15.8683
   5 │  2004  13.9057
   6 │  2005  16.4682"><pre class="notranslate"><code>6×2 DataFrame
 Row │ Year   Budget  
     │ Int64  Float64 
─────┼────────────────
   1 │  2000  23.9477
   2 │  2001  19.2356
   3 │  2002  19.3971
   4 │  2003  15.8683
   5 │  2004  13.9057
   6 │  2005  16.4682
</code></pre></div>
<h2 dir="auto"><a id="user-content-which-one-is-faster" class="anchor" aria-hidden="true" href="#which-one-is-faster"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Which one is faster?</h2>
<p dir="auto">Both were benchmarked with @time, with Julia running on 6 threads on a Windows virtual machine.</p>
<h3 dir="auto"><a id="user-content-dataframesjl" class="anchor" aria-hidden="true" href="#dataframesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DataFrames.jl</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@btime f1($movies) samples=1
@btime f1($movies) samples=1"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">f1</span>(<span class="pl-k">$</span>movies) samples<span class="pl-k">=</span><span class="pl-c1">1</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">f1</span>(<span class="pl-k">$</span>movies) samples<span class="pl-k">=</span><span class="pl-c1">1</span></pre></div>
<ul dir="auto">
<li>1st run: <code>3.589 ms (909 allocations: 1.78 MiB)</code></li>
<li>2nd run: <code>2.771 ms (908 allocations: 1.78 MiB)</code></li>
</ul>
<h3 dir="auto"><a id="user-content-tidytablejl-1" class="anchor" aria-hidden="true" href="#tidytablejl-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TidyTable.jl</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@btime f2($movies) samples=1
@btime f2($movies) samples=1"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">f2</span>(<span class="pl-k">$</span>movies) samples<span class="pl-k">=</span><span class="pl-c1">1</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">f2</span>(<span class="pl-k">$</span>movies) samples<span class="pl-k">=</span><span class="pl-c1">1</span></pre></div>
<ul dir="auto">
<li>1st run: <code>30.272 ms (118014 allocations: 5.40 MiB)</code></li>
<li>2nd run: <code>33.410 ms (118014 allocations: 5.40 MiB)</code></li>
</ul>
<h3 dir="auto"><a id="user-content-tidytable-in-r" class="anchor" aria-hidden="true" href="#tidytable-in-r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>tidytable in R</h3>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="library(tidytable)
library(ggplot2movies)
data(movies)

bench::mark({
  movies %&gt;% 
  filter(year &gt;= 2000) %&gt;% 
  group_by(year) %&gt;% 
  summarize(budget = mean(budget, na.rm = TRUE)) %&gt;% 
  mutate(budget = budget/1e6)
  }, iterations = 1)"><pre>library(<span class="pl-smi">tidytable</span>)
library(<span class="pl-smi">ggplot2movies</span>)
data(<span class="pl-smi">movies</span>)

<span class="pl-e">bench</span><span class="pl-k">::</span>mark({
  <span class="pl-smi">movies</span> %<span class="pl-k">&gt;</span>% 
  filter(<span class="pl-smi">year</span> <span class="pl-k">&gt;</span><span class="pl-k">=</span> <span class="pl-c1">2000</span>) %<span class="pl-k">&gt;</span>% 
  group_by(<span class="pl-smi">year</span>) %<span class="pl-k">&gt;</span>% 
  summarize(<span class="pl-v">budget</span> <span class="pl-k">=</span> mean(<span class="pl-smi">budget</span>, <span class="pl-v">na.rm</span> <span class="pl-k">=</span> <span class="pl-c1">TRUE</span>)) %<span class="pl-k">&gt;</span>% 
  mutate(<span class="pl-v">budget</span> <span class="pl-k">=</span> <span class="pl-smi">budget</span><span class="pl-k">/</span><span class="pl-c1">1e6</span>)
  }, <span class="pl-v">iterations</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<ul dir="auto">
<li>Time elapsed: <code>14.4 ms</code></li>
<li>Memory allocated: <code>2.5MB</code></li>
</ul>
</article></div>