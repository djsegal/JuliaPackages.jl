<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cannoles---constrained-and-nonlinear-optimizer-of-least-squares" class="anchor" aria-hidden="true" href="#cannoles---constrained-and-nonlinear-optimizer-of-least-squares"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CaNNOLeS - Constrained and NoNlinear Optimizer of Least Squares</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaSmoothOptimizers/CaNNOLeS.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/JuliaSmoothOptimizers/CaNNOLeS.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/CaNNOLeS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6c836fb50b6964b9f4f0ab75fed767c71cfe2accfe364c5bb08142fdcdb43c5/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f43614e4e4f4c65532e6a6c3f6c6f676f3d4369727275732532304349" alt="Cirrus CI - Base Branch Build Status" data-canonical-src="https://img.shields.io/cirrus/github/JuliaSmoothOptimizers/CaNNOLeS.jl?logo=Cirrus%20CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaSmoothOptimizers/CaNNOLeS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5e61a82accf9982c01bf23d6d6e70fafe1e8c2ae88040a67a1c6104b81ddacbe/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961536d6f6f74684f7074696d697a6572732f43614e4e4f4c65532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaSmoothOptimizers/CaNNOLeS.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaSmoothOptimizers/CaNNOLeS/releases"><img src="https://camo.githubusercontent.com/255443368465d0315e78fa28002ea4215dfcc29b7487648e2449ceb73fd28d9f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961536d6f6f74684f7074696d697a6572732f43614e4e4f4c65532e7376673f7374796c653d666c61742d737175617265" alt="GitHub" data-canonical-src="https://img.shields.io/github/release/JuliaSmoothOptimizers/CaNNOLeS.svg?style=flat-square" style="max-width:100%;"></a></p>
<p>CaNNOLeS is a solver for equality-constrained nonlinear least-squares problems, i.e.,
optimization problems of the form</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="min ¹/₂‖F(x)‖²      s. to     c(x) = 0.
"><pre><code>min ¹/₂‖F(x)‖²      s. to     c(x) = 0.
</code></pre></div>
<p>It uses other JuliaSmoothOptimizers packages for development.
In particular, <a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a> is used for defining the problem, and <a href="https://github.com/JuliaSmoothOptimizers/SolverCore.jl">SolverCore</a> for the output.
It also uses <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>'s <code>MA57</code> as main solver, but you can pass <code>linsolve=:ldlfactorizations</code> to use <a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl">LDLFactorizations.jl</a>.</p>
<p>Cite as</p>
<blockquote>
<p>Orban, D., &amp; Siqueira, A. S.
A Regularization Method for Constrained Nonlinear Least Squares.
Computational Optimization and Applications 76, 961–989 (2020).
<a href="https://doi.org/10.1007/s10589-020-00201-2" rel="nofollow">10.1007/s10589-020-00201-2</a></p>
</blockquote>
<p>Check <a href="CITATION.bib">CITATION.bib</a> for bibtex.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<ol>
<li>Follow <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>'s <code>MA57</code> installation if possible. Otherwise <a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl">LDLFactorizations.jl</a> will be used.</li>
<li><code>pkg&gt; add CaNNOLeS</code></li>
</ol>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CaNNOLeS, NLPModels

# Rosenbrock
nls = ADNLSModel(x -&gt; [x[1] - 1; 10 * (x[2] - x[1]^2)], [-1.2; 1.0], 2)
stats = cannoles(nls)

# Constrained
nls = ADNLSModel(x -&gt; [x[1] - 1; 10 * (x[2] - x[1]^2)], [-1.2; 1.0], 2
                 c=x-&gt;[x[1] * x[2] - 1], lcon=[0.0], ucon=[0.0])
stats = cannoles(nls)
"><pre><span class="pl-k">using</span> CaNNOLeS, NLPModels

<span class="pl-c"><span class="pl-c">#</span> Rosenbrock</span>
nls <span class="pl-k">=</span> <span class="pl-c1">ADNLSModel</span>(x <span class="pl-k">-&gt;</span> [x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-c1">10</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)], [<span class="pl-k">-</span><span class="pl-c1">1.2</span>; <span class="pl-c1">1.0</span>], <span class="pl-c1">2</span>)
stats <span class="pl-k">=</span> <span class="pl-c1">cannoles</span>(nls)

<span class="pl-c"><span class="pl-c">#</span> Constrained</span>
nls <span class="pl-k">=</span> <span class="pl-c1">ADNLSModel</span>(x <span class="pl-k">-&gt;</span> [x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-c1">10</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)], [<span class="pl-k">-</span><span class="pl-c1">1.2</span>; <span class="pl-c1">1.0</span>], <span class="pl-c1">2</span>
                 c<span class="pl-k">=</span>x<span class="pl-k">-&gt;</span>[x[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>], lcon<span class="pl-k">=</span>[<span class="pl-c1">0.0</span>], ucon<span class="pl-k">=</span>[<span class="pl-c1">0.0</span>])
stats <span class="pl-k">=</span> <span class="pl-c1">cannoles</span>(nls)</pre></div>
</article></div>