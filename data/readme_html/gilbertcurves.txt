<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gilbertcurvesjl" class="anchor" aria-hidden="true" href="#gilbertcurvesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GilbertCurves.jl</h1>
<p dir="auto"><a href="https://github.com/CliMA/GilbertCurves.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/CliMA/GilbertCurves.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This is a Julia implementation of the generalized Hilbert ("gilbert") space-filling curve algorithm, by Jakub Červený (<a href="https://github.com/jakubcerveny/gilbert">https://github.com/jakubcerveny/gilbert</a>).
It provides space-filling curves for rectangular domains of arbitrary (non-power-of-two) sizes. Currently only 2D domains are supported, but it could be extended to 3D.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">Currently it exports one function, <code>gilbertindices</code> which returns a vector of
<code>CartesianIndex{2}</code> objects corresponding to their order on the curve:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GilbertCurves

julia&gt; list = gilbertindices((5,5))
25-element Vector{CartesianIndex{2}}:
 CartesianIndex(1, 1)
 CartesianIndex(2, 1)
 CartesianIndex(2, 2)
 CartesianIndex(1, 2)
 CartesianIndex(1, 3)
 CartesianIndex(1, 4)
 CartesianIndex(1, 5)
 ⋮
 CartesianIndex(5, 3)
 CartesianIndex(5, 2)
 CartesianIndex(4, 2)
 CartesianIndex(3, 2)
 CartesianIndex(3, 1)
 CartesianIndex(4, 1)
 CartesianIndex(5, 1)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GilbertCurves

julia<span class="pl-k">&gt;</span> list <span class="pl-k">=</span> <span class="pl-c1">gilbertindices</span>((<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">25</span><span class="pl-k">-</span>element Vector{CartesianIndex{<span class="pl-c1">2</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)
 ⋮
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">5</span>, <span class="pl-c1">3</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">1</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Two non-exported functions are also provided. <code>GilbertCurves.linearindices</code> takes the output of
<code>gilbertindices</code>, returning an integer-valued matrix of the gilbert indices of each component.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; GilbertCurves.linearindices(list)
5×5 Matrix{Int64}:
  1   4   5   6   7
  2   3  10   9   8
 23  22  11  12  13
 24  21  18  17  14
 25  20  19  16  15"><pre>julia<span class="pl-k">&gt;</span> GilbertCurves<span class="pl-k">.</span><span class="pl-c1">linearindices</span>(list)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">5</span>   <span class="pl-c1">6</span>   <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">3</span>  <span class="pl-c1">10</span>   <span class="pl-c1">9</span>   <span class="pl-c1">8</span>
 <span class="pl-c1">23</span>  <span class="pl-c1">22</span>  <span class="pl-c1">11</span>  <span class="pl-c1">12</span>  <span class="pl-c1">13</span>
 <span class="pl-c1">24</span>  <span class="pl-c1">21</span>  <span class="pl-c1">18</span>  <span class="pl-c1">17</span>  <span class="pl-c1">14</span>
 <span class="pl-c1">25</span>  <span class="pl-c1">20</span>  <span class="pl-c1">19</span>  <span class="pl-c1">16</span>  <span class="pl-c1">15</span></pre></div>
<p dir="auto"><code>GilbertCurves.gilbertorder</code> constructs a vector containing the elements of a matrix in the
gilbert curve order.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; GilbertCurves.gilbertorder(reshape(1:9,3,3))
9-element Vector{Int64}:
 1
 4
 7
 8
 9
 6
 5
 2
 3"><pre>julia<span class="pl-k">&gt;</span> GilbertCurves<span class="pl-k">.</span><span class="pl-c1">gilbertorder</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">9</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">9</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; list = gilbertindices((67,29));

julia&gt; plot([c[1] for c in list], [c[2] for c in list], line_z=1:length(list), legend=false)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

julia<span class="pl-k">&gt;</span> list <span class="pl-k">=</span> <span class="pl-c1">gilbertindices</span>((<span class="pl-c1">67</span>,<span class="pl-c1">29</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>([c[<span class="pl-c1">1</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> list], [c[<span class="pl-c1">2</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> list], line_z<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(list), legend<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/CliMA/GilbertCurves.jl/master/img/67x29.png"><img src="https://raw.githubusercontent.com/CliMA/GilbertCurves.jl/master/img/67x29.png" alt="Gilbert curve on 67 x 29 elements" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h1>
<p dir="auto">The algorithm is not able to avoid non-diagonal moves in the case when the
larger dimension is odd and the smaller is even.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; list = gilbertindices((15,12));

julia&gt; plot([c[1] for c in list], [c[2] for c in list], line_z=1:length(list), legend=false)"><pre>julia<span class="pl-k">&gt;</span> list <span class="pl-k">=</span> <span class="pl-c1">gilbertindices</span>((<span class="pl-c1">15</span>,<span class="pl-c1">12</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>([c[<span class="pl-c1">1</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> list], [c[<span class="pl-c1">2</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> list], line_z<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(list), legend<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/CliMA/GilbertCurves.jl/master/img/15x12.png"><img src="https://raw.githubusercontent.com/CliMA/GilbertCurves.jl/master/img/15x12.png" alt="Gilbert curve on 15 x 12 elements" style="max-width: 100%;"></a></p>
</article></div>