<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ellzerotrendfiltering" class="anchor" aria-hidden="true" href="#ellzerotrendfiltering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EllZeroTrendFiltering</h1>
<p><a href="https://travis-ci.com/mfalt/EllZeroTrendFiltering.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/25e030167d04865d97c981e380616376fea77b77f7dd22ff889be242bf6df134/68747470733a2f2f7472617669732d63692e636f6d2f6d66616c742f456c6c5a65726f5472656e6446696c746572696e672e6a6c2e7376673f746f6b656e3d613148704c737831706d556e75737a3731584e38266272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mfalt/EllZeroTrendFiltering.jl.svg?token=a1HpLsx1pmUnusz71XN8&amp;branch=master" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/mfalt/EllZeroTrendFiltering.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f9120beb3b5836cf42af5a9c69d20528be1caaea2df72ec18d902c5bc4cef2a3/68747470733a2f2f636f6465636f762e696f2f67682f6d66616c742f456c6c5a65726f5472656e6446696c746572696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d6e74346a32674e42326c" alt="codecov" data-canonical-src="https://codecov.io/gh/mfalt/EllZeroTrendFiltering.jl/branch/master/graph/badge.svg?token=nt4j2gNB2l" style="max-width:100%;"></a></p>
<p>This package solves the problem of piecewise linear, <em>continuous</em>, approximation subject to either a hard limit or a regularization penalty on the number of break points. An exact solution is obtained using dynamic program over piecewise quadratic function, which avoids the combinatorial complexity of a naive approach.</p>
<h3><a id="user-content-mathematical-description" class="anchor" aria-hidden="true" href="#mathematical-description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mathematical Description</h3>
<p>We want to find a piecewise linear, continuous function <a target="_blank" rel="noopener noreferrer" href="figures/f_IY.svg"><img src="figures/f_IY.svg" alt="f_{I,Y}" style="max-width:100%;"></a> with few segments, where <code>I</code> is the set of breakpoints, and <code>Y</code> are the values of the function at those breakpoints. This problem can be formulated as a constrained problem</p>
<p><a target="_blank" rel="noopener noreferrer" href="figures/problemConstrained.svg"><img src="figures/problemConstrained.svg" alt="Problem Formulation Constrained" style="max-width:100%;"></a></p>
<p>where <code>M</code> is the number of segments, or as a regulartized problem</p>
<p><a target="_blank" rel="noopener noreferrer" href="figures/problemRegularized.svg"><img src="figures/problemRegularized.svg" alt="Problem Formulation Regularized" style="max-width:100%;"></a></p>
<p>These problems can be solved for a discrete set of points <code>g</code> using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="I, Y, v = fit_pwl_constrained(g, M)
I, Y, v = fit_pwl_regularized(g, ζ)
"><pre>I, Y, v <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_constrained</span>(g, M)
I, Y, v <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_regularized</span>(g, ζ)</pre></div>
<p>where the resulting function satisfies <code>f(I[k]) = Y[k]</code>,
or for a general function <code>g: ℝ ⟶ ℝ</code> with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="I, Y, v = fit_pwl_constrained(g, t, M)
I, Y, v = fit_pwl_regularized(g, t, ζ)
"><pre>I, Y, v <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_constrained</span>(g, t, M)
I, Y, v <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_regularized</span>(g, t, ζ)</pre></div>
<p>where <code>t</code> is the set of possible breakpoints and the resulting function satisfies <code>f(t[I[k]]) = Y[k]</code>.</p>
<h3><a id="user-content-example-constrained-approximation" class="anchor" aria-hidden="true" href="#example-constrained-approximation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Constrained approximation</h3>
<p>Find best continouous piecewise approximations with up to M segments</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EllZeroTrendFiltering, Plots
#Get sample data
N = 400
data = snp500_data()[1:N]

#Find solutions to the constrained problem, with up to M=10 segments
M = 10
Ivec, Yvec, fvec = fit_pwl_constrained(data, M)

#Plot original data
plot(data, l=:black, lab = &quot;SNP500&quot;)
#Plot solution with 5 segments
plot!(Ivec[5], Yvec[5], l=2, m=:circle, lab=&quot;m=5, cost = $(round(fvec[5],digits=3))&quot;)
#Plot solution with 10 segments
plot!(Ivec[M], Yvec[M], l=2, m=:circle, lab=&quot;m=$M, cost = $(round(fvec[M],digits=3))&quot;)

"><pre><span class="pl-k">using</span> EllZeroTrendFiltering, Plots
<span class="pl-c"><span class="pl-c">#</span>Get sample data</span>
N <span class="pl-k">=</span> <span class="pl-c1">400</span>
data <span class="pl-k">=</span> <span class="pl-c1">snp500_data</span>()[<span class="pl-c1">1</span><span class="pl-k">:</span>N]

<span class="pl-c"><span class="pl-c">#</span>Find solutions to the constrained problem, with up to M=10 segments</span>
M <span class="pl-k">=</span> <span class="pl-c1">10</span>
Ivec, Yvec, fvec <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_constrained</span>(data, M)

<span class="pl-c"><span class="pl-c">#</span>Plot original data</span>
<span class="pl-c1">plot</span>(data, l<span class="pl-k">=</span><span class="pl-c1">:black</span>, lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>SNP500<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>Plot solution with 5 segments</span>
<span class="pl-c1">plot!</span>(Ivec[<span class="pl-c1">5</span>], Yvec[<span class="pl-c1">5</span>], l<span class="pl-k">=</span><span class="pl-c1">2</span>, m<span class="pl-k">=</span><span class="pl-c1">:circle</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>m=5, cost = <span class="pl-v">$(<span class="pl-c1">round</span>(fvec[<span class="pl-c1">5</span>],digits<span class="pl-k">=</span><span class="pl-c1">3</span>))</span><span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>Plot solution with 10 segments</span>
<span class="pl-c1">plot!</span>(Ivec[M], Yvec[M], l<span class="pl-k">=</span><span class="pl-c1">2</span>, m<span class="pl-k">=</span><span class="pl-c1">:circle</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>m=<span class="pl-v">$M</span>, cost = <span class="pl-v">$(<span class="pl-c1">round</span>(fvec[M],digits<span class="pl-k">=</span><span class="pl-c1">3</span>))</span><span class="pl-pds">"</span></span>)
</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/snp500.svg"><img src="figures/snp500.svg" alt="Example figure" style="max-width:100%;"></a></p>
<h3><a id="user-content-example-regularization" class="anchor" aria-hidden="true" href="#example-regularization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Regularization</h3>
<p>Find best continouous piecewise approximations with cost ζ per breakpoint.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EllZeroTrendFiltering, Plots

g(x) = sin(x) + 0.5sin(3.5x) + 0.5sin(5.1x)
t = range(0, stop=2π, length=201)

plot(g, t, l=(2,:black), lab=&quot;sin(x) + 0.5sin(3.5x) + 0.5sin(5.1x)&quot;)
for ζ ∈ [0.1, 0.002]
    # Minimize ∫(f(x)-g(x))²dx + ζ⋅||d²f/dx²||₀
    # Will automatically integrate the function to compute the costs
    I, Y, cost = fit_pwl_regularized(g, t, ζ)

    plot!(t[I], Y, l=2, m=:circle, lab = &quot;l2-norm=$(round(cost,digits=3)), zeta=$ζ&quot;)
end
plot!() # Show plot
"><pre><span class="pl-k">using</span> EllZeroTrendFiltering, Plots

<span class="pl-en">g</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x) <span class="pl-k">+</span> <span class="pl-c1">0.5</span><span class="pl-c1">sin</span>(<span class="pl-c1">3.5</span>x) <span class="pl-k">+</span> <span class="pl-c1">0.5</span><span class="pl-c1">sin</span>(<span class="pl-c1">5.1</span>x)
t <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">2</span>π, length<span class="pl-k">=</span><span class="pl-c1">201</span>)

<span class="pl-c1">plot</span>(g, t, l<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">:black</span>), lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sin(x) + 0.5sin(3.5x) + 0.5sin(5.1x)<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> ζ <span class="pl-k">∈</span> [<span class="pl-c1">0.1</span>, <span class="pl-c1">0.002</span>]
    <span class="pl-c"><span class="pl-c">#</span> Minimize ∫(f(x)-g(x))²dx + ζ⋅||d²f/dx²||₀</span>
    <span class="pl-c"><span class="pl-c">#</span> Will automatically integrate the function to compute the costs</span>
    I, Y, cost <span class="pl-k">=</span> <span class="pl-c1">fit_pwl_regularized</span>(g, t, ζ)

    <span class="pl-c1">plot!</span>(t[I], Y, l<span class="pl-k">=</span><span class="pl-c1">2</span>, m<span class="pl-k">=</span><span class="pl-c1">:circle</span>, lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>l2-norm=<span class="pl-v">$(<span class="pl-c1">round</span>(cost,digits<span class="pl-k">=</span><span class="pl-c1">3</span>))</span>, zeta=<span class="pl-v">$ζ</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">plot!</span>() <span class="pl-c"><span class="pl-c">#</span> Show plot</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/sin.svg"><img src="figures/sin.svg" alt="Example figure" style="max-width:100%;"></a></p>
</article></div>