<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-metaarrays" class="anchor" aria-hidden="true" href="#metaarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MetaArrays</h1>
<p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://github.com/haberdashPI/MetaArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/haberdashPI/MetaArrays.jl/workflows/CI/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/haberdashPI/MetaArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e6bd62583b989bb1c16321ac67f410409dc9afaebb5ea64d760073b88fc2751/68747470733a2f2f636f6465636f762e696f2f67682f68616265726461736850492f4d6574614172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/haberdashPI/MetaArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A <code>MetaArray</code> stores extra data (usually) as a named tuple along with an
array. The data can be accessed as fields of the array object. It otherwise
behaves much as the stored array.</p>
<p>You create a meta-array by calling <code>meta</code> with the specified metadata as keyword
arguments; any operations over the array will preserve the metadata.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; y = meta(rand(10,10),val1=&quot;value1&quot;)
julia&gt; x = meta(rand(10,10),val2=&quot;value2&quot;)

julia&gt; z = x.*y
julia&gt; z.val1
&quot;value1&quot;
"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">meta</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>),val1<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value1<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">meta</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>),val2<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value2<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> x<span class="pl-k">.*</span>y
julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>val1
<span class="pl-s"><span class="pl-pds">"</span>value1<span class="pl-pds">"</span></span></pre></div>
<p>A <code>MetaArray</code> has the same array behavior, broadcasting behavior and strided
array behavior as the wrapped array, while maintaining the metadata. All meta
data is merged using <code>metamerge</code> (which defaults to the behavior of <code>merge</code>).
You can get the wrapped array using <code>parent</code> and the metadata tuple
using <code>getmeta</code>.</p>
<p>To implement further methods which support maintaining meta-data you can
specialize over <code>MetaArray{A}</code> where <code>A</code> is the wrapped array type.</p>
<p>For example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mymethod(x::MetaArray{&lt;:MyArrayType},y::MetaArray{&lt;:MyArrayType}) =
    meta(mymethod(parent(x),parent(y)),
        MetaArrays.combine(getmeta(x),getmeta(y)))
"><pre><span class="pl-en">mymethod</span>(x<span class="pl-k">::</span><span class="pl-c1">MetaArray{&lt;:MyArrayType}</span>,y<span class="pl-k">::</span><span class="pl-c1">MetaArray{&lt;:MyArrayType}</span>) <span class="pl-k">=</span>
    <span class="pl-c1">meta</span>(<span class="pl-c1">mymethod</span>(<span class="pl-c1">parent</span>(x),<span class="pl-c1">parent</span>(y)),
        MetaArrays<span class="pl-k">.</span><span class="pl-c1">combine</span>(<span class="pl-c1">getmeta</span>(x),<span class="pl-c1">getmeta</span>(y)))</pre></div>
<h2><a id="user-content-merging-metadata" class="anchor" aria-hidden="true" href="#merging-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Merging Metadata</h2>
<p>Metadata is merged when two arrays are combined. If you wish to leverage this
merging facility in your own methods of <code>MetaArray</code> values you can call
<code>MetaArrays.combine</code> which takes two metadata objects and combines them into
a single object using <code>metamerge</code>, while checking for any issues when
merging identically named fields.</p>
<h2><a id="user-content-axisarrays" class="anchor" aria-hidden="true" href="#axisarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AxisArrays</h2>
<p>MetaArrays is aware of
<a href="https://github.com/JuliaArrays/AxisArrays.jl"><code>AxisArrays</code></a> and the wrapped
meta arrays implement a number of the same set of methods as other
<code>AxisArray</code> objects.</p>
<h2><a id="user-content-custom-metadata-types" class="anchor" aria-hidden="true" href="#custom-metadata-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom metadata types</h2>
<p>Sometimes it is useful to dispatch on the type of the metadata rather than
the type of the wrapped array. To make this possible, you can provide a
custom type as metadata rather than fields of a generic, named tuple. This
can be done by passing your custom object <code>custom</code> to <code>MetaData(custom,data)</code>.
For metadata to appropriately merge you will need to define <code>metamerge</code> for
this type. Just as with named tuples, the fields of the custom type can be
accessed directly from the MetaArray.</p>
<p>Once your custom type is defined you can dispatch on the second type parameter
of the MetaArray, like so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyCustomMetadata
  val::String
end

foo(x::MetaArray{&lt;:Any,MyCustomMetadata}) = x.val
x = MetaArray(MyCustomMetadata(&quot;Hello, World&quot;),1:10)
println(foo(x))
"><pre><span class="pl-k">struct</span> MyCustomMetadata
  val<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-en">foo</span>(x<span class="pl-k">::</span><span class="pl-c1">MetaArray{&lt;:Any,MyCustomMetadata}</span>) <span class="pl-k">=</span> x<span class="pl-k">.</span>val
x <span class="pl-k">=</span> <span class="pl-c1">MetaArray</span>(<span class="pl-c1">MyCustomMetadata</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World<span class="pl-pds">"</span></span>),<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">println</span>(<span class="pl-c1">foo</span>(x))</pre></div>
</article></div>