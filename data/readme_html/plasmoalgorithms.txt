<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="doc/PlasmoAlgorithms_logo.png"><img src="doc/PlasmoAlgorithms_logo.png" alt="Logo" style="max-width: 100%;"></a>
PlasmoAlgorithms is a collection of decomposition algorithms to solve mathematical programming models taking <a href="https://github.com/jalving/Plasmo.jl">Plasmo</a> graphs as input. Plasmo graphs allow to create graphs of models, in which each node represents a model, and the arcs represent linking constraints. Several hierarchical problems can be expressed in this way, for example: supply chain planning and scheduling, optimization of power systems, and stochastic programming problems.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="doc/Plasmo.png"><img src="doc/Plasmo.png" alt="Plasmo Graph" style="max-width: 100%;"></a></p>
<p dir="auto">The algorithms implemented are:</p>
<ul dir="auto">
<li>Lagrange Decomposition</li>
<li>Multilevel Benders Decomposition</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.0) pkg&gt; add https://github.com/jalving/Plasmo.jl.git
(v1.0) pkg&gt; add https://github.com/bbrunaud/PlasmoAlgorithms.jl.git"><pre>(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>jalving<span class="pl-k">/</span>Plasmo<span class="pl-k">.</span>jl<span class="pl-k">.</span>git
(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>bbrunaud<span class="pl-k">/</span>PlasmoAlgorithms<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-generate-the-graph" class="anchor" aria-hidden="true" href="#generate-the-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generate the graph</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
using Gurobi
using Plasmo
using PlasmoAlgorithms

## Model on x
# Min 16x[1] + 10x[2]
# s.t. x[1] + x[2] &lt;= 1OutputFlag=0
#      x ∈ {0,1}
m1 = Model(solver=GurobiSolver(OutputFlag=0))
@variable(m1, xm[i in 1:2],Bin)
@constraint(m1, xm[1] + xm[2] &lt;= 1)
@objective(m1, Max, 16xm[1] + 10xm[2])

## Model on y`
# Max  4y[2]
# s.t. y[1] + y[2] &lt;= 1
#      8x[1] + 2x[2] + y[2] + 4y[2] &lt;= 10
#      x, y ∈ {0,1}
m2 = Model(solver=GurobiSolver(OutputFlag=0))
@variable(m2, xs[i in 1:2],Bin)
@variable(m2, y[i in 1:2], Bin)
@constraint(m2, y[1] + y[2] &lt;= 1)
@constraint(m2, 8xs[1] + 2xs[2] + y[2] + 4y[2] &lt;= 10)
@objective(m2, Max, 4y[2])

## Plasmo Graph
g = ModelGraph()
g.solver = GurobiSolver(OutputFlag=0)
n1 = add_node(g)
setmodel(n1,m1)
n2 = add_node(g)
setmodel(n2,m2)

## Linking
@linkconstraint(g, [i in 1:2], n1[:xm][i] == n2[:xs][i])"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> Gurobi
<span class="pl-k">using</span> Plasmo
<span class="pl-k">using</span> PlasmoAlgorithms

<span class="pl-c"><span class="pl-c">#</span># Model on x</span>
<span class="pl-c"><span class="pl-c">#</span> Min 16x[1] + 10x[2]</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. x[1] + x[2] &lt;= 1OutputFlag=0</span>
<span class="pl-c"><span class="pl-c">#</span>      x ∈ {0,1}</span>
m1 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">GurobiSolver</span>(OutputFlag<span class="pl-k">=</span><span class="pl-c1">0</span>))
<span class="pl-c1">@variable</span>(m1, xm[i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>],Bin)
<span class="pl-c1">@constraint</span>(m1, xm[<span class="pl-c1">1</span>] <span class="pl-k">+</span> xm[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@objective</span>(m1, Max, <span class="pl-c1">16</span>xm[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">10</span>xm[<span class="pl-c1">2</span>])

<span class="pl-c"><span class="pl-c">#</span># Model on y`</span>
<span class="pl-c"><span class="pl-c">#</span> Max  4y[2]</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. y[1] + y[2] &lt;= 1</span>
<span class="pl-c"><span class="pl-c">#</span>      8x[1] + 2x[2] + y[2] + 4y[2] &lt;= 10</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y ∈ {0,1}</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">GurobiSolver</span>(OutputFlag<span class="pl-k">=</span><span class="pl-c1">0</span>))
<span class="pl-c1">@variable</span>(m2, xs[i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>],Bin)
<span class="pl-c1">@variable</span>(m2, y[i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], Bin)
<span class="pl-c1">@constraint</span>(m2, y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@constraint</span>(m2, <span class="pl-c1">8</span>xs[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">2</span>xs[<span class="pl-c1">2</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> <span class="pl-c1">4</span>y[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)
<span class="pl-c1">@objective</span>(m2, Max, <span class="pl-c1">4</span>y[<span class="pl-c1">2</span>])

<span class="pl-c"><span class="pl-c">#</span># Plasmo Graph</span>
g <span class="pl-k">=</span> <span class="pl-c1">ModelGraph</span>()
g<span class="pl-k">.</span>solver <span class="pl-k">=</span> <span class="pl-c1">GurobiSolver</span>(OutputFlag<span class="pl-k">=</span><span class="pl-c1">0</span>)
n1 <span class="pl-k">=</span> <span class="pl-c1">add_node</span>(g)
<span class="pl-c1">setmodel</span>(n1,m1)
n2 <span class="pl-k">=</span> <span class="pl-c1">add_node</span>(g)
<span class="pl-c1">setmodel</span>(n2,m2)

<span class="pl-c"><span class="pl-c">#</span># Linking</span>
<span class="pl-c1">@linkconstraint</span>(g, [i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], n1[<span class="pl-c1">:xm</span>][i] <span class="pl-k">==</span> n2[<span class="pl-c1">:xs</span>][i])</pre></div>
<h3 dir="auto"><a id="user-content-to-solve-with-lagrange" class="anchor" aria-hidden="true" href="#to-solve-with-lagrange"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To solve with Lagrange</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solution = lagrangesolve(g,options...)"><pre>solution <span class="pl-k">=</span> <span class="pl-c1">lagrangesolve</span>(g,options<span class="pl-k">...</span>)</pre></div>
<h3 dir="auto"><a id="user-content-to-solve-with-benders" class="anchor" aria-hidden="true" href="#to-solve-with-benders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To solve with Benders</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solution = bendersolve(g,options...)"><pre>solution <span class="pl-k">=</span> <span class="pl-c1">bendersolve</span>(g,options<span class="pl-k">...</span>)</pre></div>
<p dir="auto">The algorithms will return a solution object with all relevant information about the solution process</p>
<h2 dir="auto"><a id="user-content-lagrange-decomposition" class="anchor" aria-hidden="true" href="#lagrange-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lagrange Decomposition</h2>
<p dir="auto">The Lagrangean decomposition algorithm will dualize all linking constraints for any arbitrary graph. It could be a tree, it could be a sequence of nodes connected (e.g. temporal decomposition), or it may even contain cycles.</p>
<h3 dir="auto"><a id="user-content-function-documentation" class="anchor" aria-hidden="true" href="#function-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function documentation</h3>
<p dir="auto"><code>lagrangesolve(g::PlasmoGraph;update_method,ϵ,timelimit,lagrangeheuristic,initialmultipliers,,α,δ,maxnoimprove,cpbound)</code>, solves the input graph using the lagrangean decomposition algorithm</p>
<h3 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h3>
<ul dir="auto">
<li><code>update_method</code> Multiplier update method
<ul dir="auto">
<li>allowed values: <code>:subgradient, :probingsubgradient, :marchingstep, :intersectionstep, :cuttingplanes</code></li>
<li>default: <code>:subgradient</code></li>
</ul>
</li>
<li><code>ϵ</code> Convergence tolerance
<ul dir="auto">
<li>default: 0.001</li>
</ul>
</li>
<li><code>timelimit</code> Algorithm time limit in seconds
<ul dir="auto">
<li>default: 3600 (1 hour)</li>
</ul>
</li>
<li><code>lagrangeheuristic</code> Function to solve the lagrangean heuristic. PlasmoAlgorithms provides 2 heuristic functions: <code>fixbinaries, fixintegers</code>
<ul dir="auto">
<li>default: <code>fixbinaries</code></li>
</ul>
</li>
<li><code>initialmultipliers</code> initialization method for lagrangean multipliers. When <code>:relaxation</code> is selected the algorithm will use the multipliers from the LP relaxation
<ul dir="auto">
<li>allowed values: <code>:zero,:relaxation</code></li>
<li>default: <code>zero</code></li>
</ul>
</li>
<li><code>α</code> Initial value for the step parameter in subgradient methods
<ul dir="auto">
<li>default: 2</li>
</ul>
</li>
<li><code>δ</code> Shrinking factor for <code>α</code>
<ul dir="auto">
<li>default: 0.5</li>
</ul>
</li>
<li><code>maxnoimprove</code> Number of iterations without improvement before shrinking <code>α</code>
<ul dir="auto">
<li>default: 3</li>
</ul>
</li>
</ul>
<h3 dir="auto"><a id="user-content-multiplier-updated-methods" class="anchor" aria-hidden="true" href="#multiplier-updated-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiplier updated methods</h3>
<p dir="auto">It supports the following methods for updating the lagrangean multipliers:</p>
<ul dir="auto">
<li>Subgradient</li>
<li>Probing Subgradient</li>
<li>Marching Step</li>
<li>Intersection Step (experimental)</li>
<li>Interactive</li>
<li>Cutting Planes</li>
<li>Cutting planes with trust region</li>
<li>Levels</li>
</ul>
</article></div>