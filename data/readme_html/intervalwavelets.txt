<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-intervalwavelets" class="anchor" aria-hidden="true" href="#intervalwavelets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IntervalWavelets</h1>
<p><a href="https://github.com/robertdj/IntervalWavelets.jl/actions"><img src="https://github.com/robertdj/IntervalWavelets.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/github/robertdj/IntervalWavelets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e022f5930ca5f62790a4b54187ab46ce3d89a3822b800074deaf1edeff650366/68747470733a2f2f636f6465636f762e696f2f6769746875622f726f62657274646a2f496e74657276616c576176656c6574732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/robertdj/IntervalWavelets.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>IntervalWavelets</em> is a Julia package for computing ordinary/interior Daubechies scaling functions and the moment preserving boundary scaling functions of Cohen, Daubechies and Vial.
See the <a href="doc/boundary_wavelets.pdf">enclosed document</a> for further description of these functions.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>Switch to <code>Pkg</code> mode in Julia with <code>]</code> and run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add IntervalWavelets
"><pre>add IntervalWavelets</pre></div>
<h1><a id="user-content-scaling-functions" class="anchor" aria-hidden="true" href="#scaling-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scaling functions</h1>
<p>Except for the explicitly defined <a href="https://en.wikipedia.org/wiki/Haar_wavelet" rel="nofollow">Haar wavelet</a>, Daubechies scaling functions can only be calculated at the <a href="https://en.wikipedia.org/wiki/Dyadic_rational" rel="nofollow">dyadic rationals</a>, i.e., rational numbers of the form k/2^R (where R &gt;= 0).
In <em>IntervalWavelets</em> we refer to R as the <em>resolution</em> of the dyadic rationals.</p>
<p>Let us first load <em>IntervalWavelets</em> as well as the <a href="https://github.com/JuliaPlots/Plots.jl">Plots package</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using IntervalWavelets
using Plots
"><pre><span class="pl-k">using</span> IntervalWavelets
<span class="pl-k">using</span> Plots</pre></div>
<p>The ordinary Daubechies scaling functions are called <em>interior</em> scaling functions in <em>IntervalWavelets</em>.
An interior scaling function is defined using a filter where we specify the number of vanishing moments (of the associated wavelet) and the phase.
A second argument for <code>interior_filter</code> specifies the phase to be either minimum or symmlet (the default).</p>
<p>Besides the filter we specify the resolution at which we wish to compute the scaling function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="h = interior_filter(2)
phi = interior_scaling_function(h, 8)
plot(phi)
"><pre>h <span class="pl-k">=</span> <span class="pl-c1">interior_filter</span>(<span class="pl-c1">2</span>)
phi <span class="pl-k">=</span> <span class="pl-c1">interior_scaling_function</span>(h, <span class="pl-c1">8</span>)
<span class="pl-c1">plot</span>(phi)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_interior_1.png"><img src="figures/README_interior_1.png" alt="" style="max-width:100%;"></a></p>
<p>The scaling function <code>phi</code> can be evaluated in all dyadic rationals (where it is computed).
As an example we evaluate <code>phi</code> in -0.5:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="phi(DyadicRational(-1, 1))
"><pre><span class="pl-c1">phi</span>(<span class="pl-c1">DyadicRational</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.9330127018921028
"><pre><code>0.9330127018921028
</code></pre></div>
<p>The boundary scaling functions are either modified near the left or right side of their support.
The side is specified with an enum with values <code>LEFT</code> and <code>RIGHT</code>.
There is no choice of filter for the boundary scaling functions so we just specify the number of vanishing moments and the resolution of the scaling functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="L = boundary_scaling_functions(LEFT, 2, 8)
plot(L)
"><pre>L <span class="pl-k">=</span> <span class="pl-c1">boundary_scaling_functions</span>(LEFT, <span class="pl-c1">2</span>, <span class="pl-c1">8</span>)
<span class="pl-c1">plot</span>(L)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_left_1.png"><img src="figures/README_left_1.png" alt="" style="max-width:100%;"></a></p>
<p>Similarly, we get the right boundary scaling functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="R = boundary_scaling_functions(RIGHT, 2, 8)
plot(R)
"><pre>R <span class="pl-k">=</span> <span class="pl-c1">boundary_scaling_functions</span>(RIGHT, <span class="pl-c1">2</span>, <span class="pl-c1">8</span>)
<span class="pl-c1">plot</span>(R)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_right_1.png"><img src="figures/README_right_1.png" alt="" style="max-width:100%;"></a></p>
<p>The boundary scaling functions are indexed from 0 through <code>p - 1</code>, where <code>p</code> is the number of vanishing moments.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="L[0]
"><pre>L[<span class="pl-c1">0</span>]</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Left scaling function number 0 with 2 vanishing moments at resolution 8
"><pre><code>Left scaling function number 0 with 2 vanishing moments at resolution 8
</code></pre></div>
<p>Just as the interior scaling functions the individual boundary scaling functions can be evaluated in all dyadic rationals.</p>
<h1><a id="user-content-reconstruction" class="anchor" aria-hidden="true" href="#reconstruction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reconstruction</h1>
<p>A basis of scaling functions is computed by specifying the number of vanishing moments (here 2), the scale of the functions (here 3) and their resolution (here 8):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="B = interval_scaling_function_basis(2, 3, 8)
plot(B)
"><pre>B <span class="pl-k">=</span> <span class="pl-c1">interval_scaling_function_basis</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">8</span>)
<span class="pl-c1">plot</span>(B)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_basis_1.png"><img src="figures/README_basis_1.png" alt="" style="max-width:100%;"></a></p>
<p>By default, the basis is on the interval [0, 1], but this can be specified with optional arguments.
The basis functions are indexed from 1 through <code>2^J</code> where <code>J</code> is the scale.
We do not return the <em>functions</em> as above, but the function <em>values</em> in the support.
This is to make reconstruction faster.</p>
<p>From a set of coefficients representing a function in a basis we can compute its reconstruction.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x, y = reconstruct(B, ones(8));
"><pre>x, y <span class="pl-k">=</span> <span class="pl-c1">reconstruct</span>(B, <span class="pl-c1">ones</span>(<span class="pl-c1">8</span>));</pre></div>
<p>If the coefficients are a matrix the reconstruction is also a matrix (representing an image).</p>
<h1><a id="user-content-weave" class="anchor" aria-hidden="true" href="#weave"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Weave</h1>
<p>This README is generated with the <a href="https://github.com/JunoLab/Weave.jl">Weave package</a> using the command</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="weave(&quot;README.jmd&quot;, doctype = &quot;github&quot;, fig_path = &quot;figures&quot;)
"><pre><span class="pl-c1">weave</span>(<span class="pl-s"><span class="pl-pds">"</span>README.jmd<span class="pl-pds">"</span></span>, doctype <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>github<span class="pl-pds">"</span></span>, fig_path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>figures<span class="pl-pds">"</span></span>)</pre></div>
</article></div>