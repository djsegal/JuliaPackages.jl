<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-runtimegeneratedfunctionsjl" class="anchor" aria-hidden="true" href="#runtimegeneratedfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RuntimeGeneratedFunctions.jl</h1>
<p><a href="https://github.com/SciML/RuntimeGeneratedFunctions.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/RuntimeGeneratedFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p><code>RuntimeGeneratedFunctions</code> are functions generated at runtime without world-age
issues and with the full performance of a standard Julia anonymous function. This
builds functions in a way that avoids <code>eval</code>.</p>
<p>Note that <code>RuntimeGeneratedFunction</code> does not handle closures. Please use the
<a href="https://github.com/JuliaStaging/GeneralizedGenerated.jl">GeneralizedGenerated.jl</a>
package for more fixable staged programming. While <code>GeneralizedGenerated.jl</code> is
more powerful, <code>RuntimeGeneratedFunctions.jl</code> handles large expressions better.</p>
<h2><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple Example</h2>
<p>Here's an example showing how to construct and immediately call a runtime
generated function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

function no_worldage()
    ex = :(function f(_du,_u,_p,_t)
        @inbounds _du[1] = _u[1]
        @inbounds _du[2] = _u[2]
        nothing
    end)
    f1 = @RuntimeGeneratedFunction(ex)
    du = rand(2)
    u = rand(2)
    p = nothing
    t = nothing
    f1(du,u,p,t)
end
no_worldage()
"><pre><span class="pl-k">using</span> RuntimeGeneratedFunctions
RuntimeGeneratedFunctions<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">@__MODULE__</span>)

<span class="pl-k">function</span> <span class="pl-en">no_worldage</span>()
    ex <span class="pl-k">=</span> :(<span class="pl-k">function</span> <span class="pl-en">f</span>(_du,_u,_p,_t)
        <span class="pl-c1">@inbounds</span> _du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> _u[<span class="pl-c1">1</span>]
        <span class="pl-c1">@inbounds</span> _du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> _u[<span class="pl-c1">2</span>]
        <span class="pl-c1">nothing</span>
    <span class="pl-k">end</span>)
    f1 <span class="pl-k">=</span> <span class="pl-c1">@RuntimeGeneratedFunction</span>(ex)
    du <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>)
    u <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>)
    p <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    t <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    <span class="pl-c1">f1</span>(du,u,p,t)
<span class="pl-k">end</span>
<span class="pl-c1">no_worldage</span>()</pre></div>
<h2><a id="user-content-changing-how-global-symbols-are-looked-up" class="anchor" aria-hidden="true" href="#changing-how-global-symbols-are-looked-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changing how global symbols are looked up</h2>
<p>If you want to use helper functions or global variables from a different
module within your function expression you'll need to pass a <code>context_module</code>
to the <code>@RuntimeGeneratedFunction</code> constructor. For example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="RuntimeGeneratedFunctions.init(@__MODULE__)

module A
    using RuntimeGeneratedFunctions
    RuntimeGeneratedFunctions.init(A)
    helper_function(x) = x + 1
end

function g()
    expression = :(f(x) = helper_function(x))
    # context module is `A` so that `helper_function` can be found.
    f = @RuntimeGeneratedFunction(A, expression)
    @show f(1)
end
"><pre>RuntimeGeneratedFunctions<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">@__MODULE__</span>)

<span class="pl-k">module</span> A
    <span class="pl-k">using</span> RuntimeGeneratedFunctions
    RuntimeGeneratedFunctions<span class="pl-k">.</span><span class="pl-c1">init</span>(A)
    <span class="pl-en">helper_function</span>(x) <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">g</span>()
    expression <span class="pl-k">=</span> :(<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">helper_function</span>(x))
    <span class="pl-c"><span class="pl-c">#</span> context module is `A` so that `helper_function` can be found.</span>
    f <span class="pl-k">=</span> <span class="pl-c1">@RuntimeGeneratedFunction</span>(A, expression)
    <span class="pl-c1">@show</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-precompilation-and-setting-the-function-expression-cache" class="anchor" aria-hidden="true" href="#precompilation-and-setting-the-function-expression-cache"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Precompilation and setting the function expression cache</h2>
<p>For technical reasons RuntimeGeneratedFunctions needs to cache the function
expression in a global variable within some module. This is normally
transparent to the user, but if the <code>RuntimeGeneratedFunction</code> is evaluated
during module precompilation, the cache module must be explicitly set to the
module currently being precompiled. This is relevant for helper functions in
some module which construct a RuntimeGeneratedFunction on behalf of the user.
For example, in the following code, any third party user of
<code>HelperModule.construct_rgf()</code> user needs to pass their own module as the
<code>cache_module</code> if they want the returned function to work after precompilation:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="RuntimeGeneratedFunctions.init(@__MODULE__)

# Imagine HelperModule is in a separate package and will be precompiled
# separately.
module HelperModule
    using RuntimeGeneratedFunctions
    RuntimeGeneratedFunctions.init(HelperModule)

    function construct_rgf(cache_module, context_module, ex)
        ex = :((x)-&gt;$ex^2 + x)
        RuntimeGeneratedFunction(cache_module, context_module, ex)
    end
end

function g()
    ex = :(x + 1)
    # Here cache_module is set to the module currently being compiled so that
    # the returned RGF works with Julia's module precompilation system.
    HelperModule.construct_rgf(@__MODULE__, @__MODULE__, ex)
end

f = g()
@show f(1)
"><pre>RuntimeGeneratedFunctions<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">@__MODULE__</span>)

<span class="pl-c"><span class="pl-c">#</span> Imagine HelperModule is in a separate package and will be precompiled</span>
<span class="pl-c"><span class="pl-c">#</span> separately.</span>
<span class="pl-k">module</span> HelperModule
    <span class="pl-k">using</span> RuntimeGeneratedFunctions
    RuntimeGeneratedFunctions<span class="pl-k">.</span><span class="pl-c1">init</span>(HelperModule)

    <span class="pl-k">function</span> <span class="pl-en">construct_rgf</span>(cache_module, context_module, ex)
        ex <span class="pl-k">=</span> :((x)<span class="pl-k">-&gt;</span><span class="pl-k">$</span>ex<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x)
        <span class="pl-c1">RuntimeGeneratedFunction</span>(cache_module, context_module, ex)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">g</span>()
    ex <span class="pl-k">=</span> :(x <span class="pl-k">+</span> <span class="pl-c1">1</span>)
    <span class="pl-c"><span class="pl-c">#</span> Here cache_module is set to the module currently being compiled so that</span>
    <span class="pl-c"><span class="pl-c">#</span> the returned RGF works with Julia's module precompilation system.</span>
    HelperModule<span class="pl-k">.</span><span class="pl-c1">construct_rgf</span>(<span class="pl-c1">@__MODULE__</span>, <span class="pl-c1">@__MODULE__</span>, ex)
<span class="pl-k">end</span>

f <span class="pl-k">=</span> <span class="pl-c1">g</span>()
<span class="pl-c1">@show</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)</pre></div>
</article></div>