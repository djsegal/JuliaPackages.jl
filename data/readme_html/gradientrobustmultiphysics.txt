<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/chmerdon/GradientRobustMultiPhysics.jl/actions"><img src="https://github.com/chmerdon/GradientRobustMultiPhysics.jl/workflows/linux-macos-windows/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://chmerdon.github.io/GradientRobustMultiPhysics.jl/stable/index.html" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://chmerdon.github.io/GradientRobustMultiPhysics.jl/dev/index.html" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/229078096" rel="nofollow"><img src="https://camo.githubusercontent.com/83f1cc4a9057528987b4413f47fdc47467e4f99013ba99473c329c92be5ee289/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3232393037383039362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/229078096.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-gradientrobustmultiphysicsjl" class="anchor" aria-hidden="true" href="#gradientrobustmultiphysicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GradientRobustMultiPhysics.jl</h1>
<p>finite element module for Julia focussing on gradient-robust finite element methods and multiphysics applications, part of the meta-package <a href="https://github.com/WIAS-BERLIN/PDELib.jl">PDELIB.jl</a></p>
<h3><a id="user-content-featureslimitations" class="anchor" aria-hidden="true" href="#featureslimitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features/Limitations:</h3>
<ul>
<li>solves 1D, 2D and 3D problems in Cartesian coordinates</li>
<li>uses type-treed FiniteElements (scalar or vector-valued)
<ul>
<li>H1 elements (so far P1, P2, P2B, P3, MINI, CR, BR)</li>
<li>Hdiv elements (so far RT0, BDM1, RT1)</li>
<li>Hcurl elements (so far N0)</li>
</ul>
</li>
<li>finite elements can be broken (e.g. piecewise Hdiv) or live on faces or edges (experimental feature)</li>
<li>grids by <a href="https://github.com/j-fu/ExtendableGrids.jl">ExtendableGrids.jl</a>, allows mixed element geometries in the grid (simplices and quads atm)</li>
<li>PDEDescription module for easy and close-to-physics problem description and discretisation setup</li>
<li>PDEDescription recognizes nonlinear operators and automatically devises fixed-point or Newton algorithms by automatic differentation (experimental feature)</li>
<li>time-dependent solvers by own backward Euler implementation or via external module <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a> (experimental)</li>
<li>reconstruction operators for gradient-robust Stokes discretisations (BR&gt;RT0/BDM1 in 2D/3D, or CR&gt;RT0 in 2D, more in progress)</li>
<li>plotting via <a href="https://github.com/j-fu/GridVisualize.jl">GridVisualize.jl</a></li>
<li>export into csv or vtk datafiles possible for external plotting</li>
</ul>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<p>The following example demonstrates how to setup a Poisson problem. More extensive examples can be found in the <a href="https://chmerdon.github.io/GradientRobustMultiPhysics.jl/stable/index.html" rel="nofollow">documentation</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GradientRobustMultiPhysics

# build/load any grid (here: a uniform-refined 2D unit square into triangles)
xgrid = uniform_refine(grid_unitsquare(Triangle2D),4)

# create empty PDE description
Problem = PDEDescription(&quot;Poisson problem&quot;)

# add unknown(s) (here: &quot;u&quot; that gets id 1 for later reference)
add_unknown!(Problem; unknown_name = &quot;u&quot;, equation_name = &quot;Poisson equation&quot;)

# add left-hand side PDEoperator(s) (here: only Laplacian)
add_operator!(Problem, [1,1], LaplaceOperator(diffusion; AT = ON_CELLS))

# add right-hand side data (here: f = [1] in region(s) [1])
add_rhsdata!(Problem, 1, RhsOperator(Identity, [1], DataFunction([1]; name = &quot;f&quot;); AT = ON_CELLS))

# add boundary data (here: zero data for boundary regions 1:4)
add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)

# discretise = choose FEVector with appropriate FESpaces
FEType = H1P2{1,2} # quadratic element with 1 component in 2D
Solution = FEVector{Float64}(&quot;u_h&quot;,FESpace{FEType}(xgrid))

# inspect problem and Solution vector structure
@show Problem Solution

# solve
solve!(Solution, Problem)
"><pre><span class="pl-k">using</span> GradientRobustMultiPhysics

<span class="pl-c"><span class="pl-c">#</span> build/load any grid (here: a uniform-refined 2D unit square into triangles)</span>
xgrid <span class="pl-k">=</span> <span class="pl-c1">uniform_refine</span>(<span class="pl-c1">grid_unitsquare</span>(Triangle2D),<span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> create empty PDE description</span>
Problem <span class="pl-k">=</span> <span class="pl-c1">PDEDescription</span>(<span class="pl-s"><span class="pl-pds">"</span>Poisson problem<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> add unknown(s) (here: "u" that gets id 1 for later reference)</span>
<span class="pl-c1">add_unknown!</span>(Problem; unknown_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>, equation_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Poisson equation<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> add left-hand side PDEoperator(s) (here: only Laplacian)</span>
<span class="pl-c1">add_operator!</span>(Problem, [<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], <span class="pl-c1">LaplaceOperator</span>(diffusion; AT <span class="pl-k">=</span> ON_CELLS))

<span class="pl-c"><span class="pl-c">#</span> add right-hand side data (here: f = [1] in region(s) [1])</span>
<span class="pl-c1">add_rhsdata!</span>(Problem, <span class="pl-c1">1</span>, <span class="pl-c1">RhsOperator</span>(Identity, [<span class="pl-c1">1</span>], <span class="pl-c1">DataFunction</span>([<span class="pl-c1">1</span>]; name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>); AT <span class="pl-k">=</span> ON_CELLS))

<span class="pl-c"><span class="pl-c">#</span> add boundary data (here: zero data for boundary regions 1:4)</span>
<span class="pl-c1">add_boundarydata!</span>(Problem, <span class="pl-c1">1</span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>], HomogeneousDirichletBoundary)

<span class="pl-c"><span class="pl-c">#</span> discretise = choose FEVector with appropriate FESpaces</span>
FEType <span class="pl-k">=</span> H1P2{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} <span class="pl-c"><span class="pl-c">#</span> quadratic element with 1 component in 2D</span>
Solution <span class="pl-k">=</span> <span class="pl-c1">FEVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-s"><span class="pl-pds">"</span>u_h<span class="pl-pds">"</span></span>,<span class="pl-c1">FESpace</span><span class="pl-c1">{FEType}</span>(xgrid))

<span class="pl-c"><span class="pl-c">#</span> inspect problem and Solution vector structure</span>
<span class="pl-c1">@show</span> Problem Solution

<span class="pl-c"><span class="pl-c">#</span> solve</span>
<span class="pl-c1">solve!</span>(Solution, Problem)</pre></div>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>via Julia package manager in Julia 1.5 or above:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# latest stable version
(@v1.5) pkg&gt; add GradientRobustMultiPhysics
# latest version
(@v1.5) pkg&gt; add GradientRobustMultiPhysics#master
"><pre lang="@example"><code># latest stable version
(@v1.5) pkg&gt; add GradientRobustMultiPhysics
# latest version
(@v1.5) pkg&gt; add GradientRobustMultiPhysics#master
</code></pre></div>
<h3><a id="user-content-dependencies-on-other-julia-packages" class="anchor" aria-hidden="true" href="#dependencies-on-other-julia-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dependencies on other Julia packages:</h3>
<p><a href="https://github.com/j-fu/ExtendableGrids.jl">ExtendableGrids.jl</a><br>
<a href="https://github.com/j-fu/GridVisualize.jl">GridVisualize.jl</a><br>
<a href="https://github.com/j-fu/ExtendableSparse.jl">ExtendableSparse.jl</a><br>
<a href="https://github.com/JuliaDocs/DocStringExtensions.jl">DocStringExtensions.jl</a><br>
<a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a><br>
<a href="https://github.com/JuliaDiff/DiffResults.jl">DiffResults.jl</a><br>
<a href="https://github.com/jipolanco/WriteVTK.jl">WriteVTK.jl</a><br>
<a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a></p>
</article></div>