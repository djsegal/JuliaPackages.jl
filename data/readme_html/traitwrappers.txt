<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-traitwrappersjl" class="anchor" aria-hidden="true" href="#traitwrappersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TraitWrappers.jl</h1>
<p dir="auto">A trait-system where the object is part of the trait type and accessible via the function <code>object</code>.</p>
<h2 dir="auto"><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why?</h2>
<p dir="auto">The most popular (and only?) trait system in Julia is the Holy Traits. Please see <a href="https://invenia.github.io/blog/2019/11/06/julialang-features-part-2/" rel="nofollow">The Emergent Features of JuliaLang: Part II - Traits</a> which discusses Holy Traits. Most of the examples and blogs on traits systems in Julia are based on using traits on one of the arguments. But in many use-cases, multiple arguments should receive the traits treatment. Holy Traits still works in those cases, but it can feel unsatisfying. Indeed, sometimes it can make code harder to read. TraitWrapper.jl was concieved to solve these issues. The "why"s of TraitWrappers.jl are explored and illustrated with examples in the sections below.</p>
<h2 dir="auto"><a id="user-content-the-abstracttraitwrapper-type" class="anchor" aria-hidden="true" href="#the-abstracttraitwrapper-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>AbstractTraitWrapper</code> type</h2>
<p dir="auto"><code>AbstractTraitWrapper</code> type only defines one method which is <code>object(t::AbstractTraitWrapper)</code> that should return the object with the trait.</p>
<h3 dir="auto"><a id="user-content-using-traitwrappersjl" class="anchor" aria-hidden="true" href="#using-traitwrappersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>TraitWrappers.jl</code></h3>
<p dir="auto">This is an example implementing an Iterable that has the trait <a href="https://docs.julialang.org/en/v1/manual/interfaces/" rel="nofollow"><code>HasEltype()</code></a>. The Holy Trait implementation looks like this</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Base: HasEltype

fn_holy(itr) = fn(IteratorEltype(itr), itr)

fn_holyn(::HasEltype, itr) = begin
	println(&quot;this itr has `eltype()` defined&quot;)
	println(itr)
end"><pre><span class="pl-k">using</span> Base<span class="pl-k">:</span> HasEltype

<span class="pl-en">fn_holy</span>(itr) <span class="pl-k">=</span> <span class="pl-c1">fn</span>(<span class="pl-c1">IteratorEltype</span>(itr), itr)

<span class="pl-en">fn_holyn</span>(<span class="pl-k">::</span><span class="pl-c1">HasEltype</span>, itr) <span class="pl-k">=</span> <span class="pl-k">begin</span>
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>this itr has `eltype()` defined<span class="pl-pds">"</span></span>)
	<span class="pl-c1">println</span>(itr)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The equivalent implementation using <code>TraitWrappers.jl</code> is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Firstly define a TraitWrapper type
struct EltypeTypeTraitWrapper{T, I &lt;: IteratorEltype} &lt;: AbstractTraitWrapper
	object::T
	EltypeTypeTraitWrapper(t::T) where T = new{T, typeof(IteratorEltype(t))}(t)
end

fn_tw(itr) = fn_tw(EltypeTypeTraitWrapper(itr))

fn_tw(itr::EltypeTypeTraitWrapper{T, HasEltype}) where T = begin
	println(&quot;this itr has `eltype()` defined&quot;)
	println(object(itr))
end"><pre><span class="pl-c"><span class="pl-c">#</span> Firstly define a TraitWrapper type</span>
<span class="pl-k">struct</span> EltypeTypeTraitWrapper{T, I <span class="pl-k">&lt;:</span> <span class="pl-c1">IteratorEltype</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractTraitWrapper</span>
	object<span class="pl-k">::</span><span class="pl-c1">T</span>
	<span class="pl-en">EltypeTypeTraitWrapper</span>(t<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{T, typeof(IteratorEltype(t))}</span>(t)
<span class="pl-k">end</span>

<span class="pl-en">fn_tw</span>(itr) <span class="pl-k">=</span> <span class="pl-c1">fn_tw</span>(<span class="pl-c1">EltypeTypeTraitWrapper</span>(itr))

<span class="pl-en">fn_tw</span>(itr<span class="pl-k">::</span><span class="pl-c1">EltypeTypeTraitWrapper{T, HasEltype}</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-k">begin</span>
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>this itr has `eltype()` defined<span class="pl-pds">"</span></span>)
	<span class="pl-c1">println</span>(<span class="pl-c1">object</span>(itr))
<span class="pl-k">end</span></pre></div>
<p dir="auto">For a function with one argument that needs traits, TraitWrapper isn't as attractive. However, imagine if you have many arguments that can receive the traits treatment then Holy Traits can become harder to read. E.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fn_holy(a, b, c) = f(TraitA(a), TraitB(b), TraitC(c), a, b, c)

fn_holy(::SomeTraitA, ::SomeTraitB, ::SomeTraitC, a, b, c) = begin
	# do something to a, b, c
end"><pre><span class="pl-en">fn_holy</span>(a, b, c) <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">TraitA</span>(a), <span class="pl-c1">TraitB</span>(b), <span class="pl-c1">TraitC</span>(c), a, b, c)

<span class="pl-en">fn_holy</span>(<span class="pl-k">::</span><span class="pl-c1">SomeTraitA</span>, <span class="pl-k">::</span><span class="pl-c1">SomeTraitB</span>, <span class="pl-k">::</span><span class="pl-c1">SomeTraitC</span>, a, b, c) <span class="pl-k">=</span> <span class="pl-k">begin</span>
	<span class="pl-c"><span class="pl-c">#</span> do something to a, b, c</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">versus using TraitWrappers.jl</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fn_tw(a, b, c) = f(TraitAWrapper(a), TraitBWrapper(b), TraitCWrapper(c))

fn_tw(a::TraitAWrapper1, b::TraitBWrapper1, c::TraitCWrappe1r) = begin
	# do something to object(a), object(b), object(c)
end"><pre><span class="pl-en">fn_tw</span>(a, b, c) <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">TraitAWrapper</span>(a), <span class="pl-c1">TraitBWrapper</span>(b), <span class="pl-c1">TraitCWrapper</span>(c))

<span class="pl-en">fn_tw</span>(a<span class="pl-k">::</span><span class="pl-c1">TraitAWrapper1</span>, b<span class="pl-k">::</span><span class="pl-c1">TraitBWrapper1</span>, c<span class="pl-k">::</span><span class="pl-c1">TraitCWrappe1r</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
	<span class="pl-c"><span class="pl-c">#</span> do something to object(a), object(b), object(c)</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">There are pros and cons to either approach but with TraitWrapper.jl, it's easier to see which argument relies on which trait and don't have to rely on positional conventions which can become unwieldy if some arguments rely on traits and some don't. TraitWrapper.jl enhances readability where there are many arguments that rely on traits.</p>
<p dir="auto">Technically, you don't really need this package to implement the TraitWrapper idea. But using this package indicates that you are using <code>TraitWrappers</code> and can point here for explanation of the concept.</p>
<h3 dir="auto"><a id="user-content-another-example" class="anchor" aria-hidden="true" href="#another-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Another Example</h3>
<p dir="auto">Another example of using TraitWrappers.jl lies in the <a href="https://github.com/xiaodaigh/JLBoost.jl">JLBoost.jl</a> package. JLBoost.jl's tree boosting algorithm use a <code>predict</code> function to score out an iterable of trees on a <code>DataFrame</code>-like object.</p>
<p dir="auto">Before the introduction of TraitWrappers.jl. the function signature looked like this</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function predict(jlts::AbstractVector{T}, df::AbstractDataFrame) where T &lt;:AbstractJLBoostTree
	mapreduce(x-&gt;predict(x, df), +, jlts)
end"><pre><span class="pl-k">function</span> <span class="pl-en">predict</span>(jlts<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>, df<span class="pl-k">::</span><span class="pl-c1">AbstractDataFrame</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span><span class="pl-c1">AbstractJLBoostTree</span>
	<span class="pl-c1">mapreduce</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">predict</span>(x, df), <span class="pl-k">+</span>, jlts)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The two arguments are <code>jlts</code> and <code>df</code> and as you can see it’s just using the <code>mapreduce</code> function. Actually, I don’t require <code>jlts</code> to be <code>AbstractVector{T&lt;:AbstractJLBoostTree}</code> nor <code>df</code> to be AbstractDataFrame at all.</p>
<p dir="auto">I just need <code>jlts</code> to be an iterable of with <code>eltype(jlts) == S&lt;:AbstractJLBoostTree</code> and <code>df</code> to be something that supports the <code>df[!, column]</code> syntax. So naturally, traits fit nicely here. But with Holy traits the functions will look like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function predict(jlts, df)
    predict(Iterable(jlts), ColumnAccessible(df), jlts, df)
end

function predict(::Iterable{T}, ::ColumnAccessible, jlts, df) where T &lt;:AbstractJLBoostTree
    mapreduce(x-&gt;predict(x, df), +, jlts)
end"><pre><span class="pl-k">function</span> <span class="pl-en">predict</span>(jlts, df)
    <span class="pl-c1">predict</span>(<span class="pl-c1">Iterable</span>(jlts), <span class="pl-c1">ColumnAccessible</span>(df), jlts, df)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">predict</span>(<span class="pl-k">::</span><span class="pl-c1">Iterable{T}</span>, <span class="pl-k">::</span><span class="pl-c1">ColumnAccessible</span>, jlts, df) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span><span class="pl-c1">AbstractJLBoostTree</span>
    <span class="pl-c1">mapreduce</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">predict</span>(x, df), <span class="pl-k">+</span>, jlts)
<span class="pl-k">end</span></pre></div>
<p dir="auto">this feels unsatisfying and the implementation using TraitWrappers.jl is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct IterableTraitWrapper{T} &lt;: AbstractTraitWrapper
   object::T
   IterableTraitWrapper(t::T) where T = begin
      if hasmethod(iterate, Tuple{T})
      	new{T}(t)
      else
         throw(&quot;This is not iterable&quot;)
      end
   end
end

struct ColumnAccessibleTraitWrapper{T} &lt;: TraitWrapper{T}
   object::T
   ColumnAccessibleTraitWrapper(t::T) where T = begin
      if hasmethod(getindex, Tuple{T, typeof(!), Symbol})
      	 new{T}(t)
      else
         throw(&quot;This is not ColumnAccessible&quot;)
      end
   end
end"><pre><span class="pl-k">struct</span> IterableTraitWrapper{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractTraitWrapper</span>
   object<span class="pl-k">::</span><span class="pl-c1">T</span>
   <span class="pl-en">IterableTraitWrapper</span>(t<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-k">begin</span>
      <span class="pl-k">if</span> <span class="pl-c1">hasmethod</span>(iterate, Tuple{T})
      	<span class="pl-c1">new</span><span class="pl-c1">{T}</span>(t)
      <span class="pl-k">else</span>
         <span class="pl-c1">throw</span>(<span class="pl-s"><span class="pl-pds">"</span>This is not iterable<span class="pl-pds">"</span></span>)
      <span class="pl-k">end</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> ColumnAccessibleTraitWrapper{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">TraitWrapper{T}</span>
   object<span class="pl-k">::</span><span class="pl-c1">T</span>
   <span class="pl-en">ColumnAccessibleTraitWrapper</span>(t<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-k">begin</span>
      <span class="pl-k">if</span> <span class="pl-c1">hasmethod</span>(getindex, Tuple{T, <span class="pl-c1">typeof</span>(<span class="pl-k">!</span>), Symbol})
      	 <span class="pl-c1">new</span><span class="pl-c1">{T}</span>(t)
      <span class="pl-k">else</span>
         <span class="pl-c1">throw</span>(<span class="pl-s"><span class="pl-pds">"</span>This is not ColumnAccessible<span class="pl-pds">"</span></span>)
      <span class="pl-k">end</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now the my traits signature becomes like the below; it is easy to associate the traits with the arguments. Please note, that the above is dynamic, as it relies on checking if a method exists. Dynamic type constructors cannot be compiled away and may lead to inefficient code. To address this, one may consider using <a href="https://github.com/oxinabox/Tricks.jl">Tricks.jl</a>'s <code>statis_hasmethod</code> function and note that Tricks.jl only works on Julia &gt;= 1.3.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function predict(jlts, df)
    predict(IterableTraitWrapper(jlts), ColumnAccessibleTraitWrapper(df))
end

function predict(jlts::IterableTraitWrapper, df::ColumnAccessible)
    mapreduce(x-&gt;predict(x, object(df)), +, object(jlts))
end"><pre><span class="pl-k">function</span> <span class="pl-en">predict</span>(jlts, df)
    <span class="pl-c1">predict</span>(<span class="pl-c1">IterableTraitWrapper</span>(jlts), <span class="pl-c1">ColumnAccessibleTraitWrapper</span>(df))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">predict</span>(jlts<span class="pl-k">::</span><span class="pl-c1">IterableTraitWrapper</span>, df<span class="pl-k">::</span><span class="pl-c1">ColumnAccessible</span>)
    <span class="pl-c1">mapreduce</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">predict</span>(x, <span class="pl-c1">object</span>(df)), <span class="pl-k">+</span>, <span class="pl-c1">object</span>(jlts))
<span class="pl-k">end</span></pre></div>
<p dir="auto">Finally, if  more traits are needed in a function signature, they can be added without having to double the number of arguments.</p>
<p dir="auto">In conclusion, I hope you find that <code>TraitWrapper</code> makes it clearer which trait corresponds to which argument better, and it is easier to clearly express which argument is expected to have a certain trait.</p>
</article></div>