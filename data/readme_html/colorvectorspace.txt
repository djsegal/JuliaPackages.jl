<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-colorvectorspace" class="anchor" aria-hidden="true" href="#colorvectorspace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ColorVectorSpace</h1>
<p dir="auto"><a href="https://github.com/JuliaGraphics/ColorVectorSpace.jl/actions"><img src="https://github.com/JuliaGraphics/ColorVectorSpace.jl/workflows/Unit%20test/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaGraphics/ColorVectorSpace.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/632333df4804d332f23a9e1de153f03495ae1ad73cdfb2fa6ed51486c253a243/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696147726170686963732f436f6c6f72566563746f7253706163652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphics/ColorVectorSpace.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package is an add-on to <a href="https://github.com/JuliaGraphics/ColorTypes.jl">ColorTypes</a>, and provides fast
mathematical operations for objects with types such as <code>RGB</code> and
<code>Gray</code>.
Specifically, with this package both grayscale and <code>RGB</code> colors are treated as if they are points
in a normed vector space.</p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">Colorspaces such as RGB, unlike XYZ, are technically non-linear;
perhaps the most "colorimetrically correct" approach when averaging two RGBs is to
first convert each to XYZ, average them, and then convert back to RGB.
Nor is there a clear definition of computing the sum of two colors.
As a consequence, Julia's base color package,
<a href="https://github.com/JuliaGraphics/ColorTypes.jl">ColorTypes</a>,
does not support mathematical operations on colors.</p>
<p dir="auto">However, particularly in image processing it is common to ignore this
concern, and for the sake of performance treat an RGB as if it were a
3-vector.  The role of this package is to extend ColorTypes to support such mathematical operations.
Specifically, it defines <code>+</code> and multiplication by a scalar (and by extension, <code>-</code> and division by a scalar) for grayscale and <code>AbstractRGB</code> colors.
These are the requirements of a <a href="https://en.wikipedia.org/wiki/Vector_space" rel="nofollow">vector space</a>.</p>
<p dir="auto">If you're curious about how much the "colorimetrically correct" and
"vector space" views differ, the following
diagram might help. The first 10 <code>distinguishable_colors</code> were
generated, and all pairs were averaged. Each box represents the
average of the pair of diagonal elements intersected by tracing
vertically and horizontally; within each box, the upper diagonal is
the "colorimetrically-correct" version, while the lower diagonal
represents the "RGB vector space" version.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/comparison.png"><img src="images/comparison.png" alt="ColorVectorSpace" title="Comparison" style="max-width: 100%;"></a></p>
<p dir="auto">This package also defines <code>norm(c)</code> for RGB and grayscale colors.
This makes these color spaces <a href="https://en.wikipedia.org/wiki/Normed_vector_space" rel="nofollow">normed vector spaces</a>.
Note that <code>norm</code> has been designed to satisfy <strong>equivalence</strong> of grayscale and RGB representations: if
<code>x</code> is a scalar, then <code>norm(x) == norm(Gray(x)) == norm(RGB(x, x, x))</code>.
Effectively, there's a division-by-3 in the <code>norm(::RGB)</code> case compared to the Euclidean interpretation of
the RGB vector space.
Equivalence is an important principle for the Colors ecosystem, and violations should be reported as likely bugs.
One violation is <code>abs2</code>; see the section below for more detail.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ColorTypes, ColorVectorSpace"><pre><span class="pl-k">using</span> ColorTypes, ColorVectorSpace</pre></div>
<p dir="auto">For the most part, that's it; just by loading <code>ColorVectorSpace</code>, most basic mathematical
operations will "just work" on <code>AbstractRGB</code>, <code>AbstractGray</code>
(<code>Color{T,1}</code>), <code>TransparentRGB</code>, and <code>TransparentGray</code> objects.
(See definitions for the latter inside of <code>ColorTypes</code>).</p>
<p dir="auto">However, there are some additional operations that you may need to distinguish carefully.</p>
<h3 dir="auto"><a id="user-content-multiplication" class="anchor" aria-hidden="true" href="#multiplication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiplication</h3>
<p dir="auto">Grayscale values are conceptually similar to scalars, and consequently it seems straightforward to define multiplication of two grayscale values.
RGB values present more options.
This package supports three different notions of multiplication: the inner product, the hadamard (elementwise) product, and the tensor product.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c1, c2 = RGB(0.2, 0.3, 0.4), RGB(0.5, 0.3, 0.2)
(RGB{Float64}(0.2,0.3,0.4), RGB{Float64}(0.5,0.3,0.2))

julia&gt; c1⋅c2     # \cdot&lt;TAB&gt; # or dot(c1, c2)
0.09000000000000001

# This is equivelant to `mapc(*, c1, c2)`
julia&gt; c1⊙c2     # \odot&lt;TAB&gt; # or hadamard(c1, c2)
RGB{Float64}(0.1,0.09,0.08000000000000002)

julia&gt; c1⊗c2    # \otimes&lt;TAB&gt; # or tensor(c1, c2)
RGBRGB{Float64}:
 0.1   0.06  0.04
 0.15  0.09  0.06
 0.2   0.12  0.08"><pre>julia<span class="pl-k">&gt;</span> c1, c2 <span class="pl-k">=</span> <span class="pl-c1">RGB</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>), <span class="pl-c1">RGB</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.2</span>)
(<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.2</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>), <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.2</span>))

julia<span class="pl-k">&gt;</span> c1<span class="pl-k">⋅</span>c2     <span class="pl-c"><span class="pl-c">#</span> \cdot&lt;TAB&gt; # or dot(c1, c2)</span>
<span class="pl-c1">0.09000000000000001</span>

<span class="pl-c"><span class="pl-c">#</span> This is equivelant to `mapc(*, c1, c2)`</span>
julia<span class="pl-k">&gt;</span> c1⊙c2     <span class="pl-c"><span class="pl-c">#</span> \odot&lt;TAB&gt; # or hadamard(c1, c2)</span>
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.09</span>,<span class="pl-c1">0.08000000000000002</span>)

julia<span class="pl-k">&gt;</span> c1⊗c2    <span class="pl-c"><span class="pl-c">#</span> \otimes&lt;TAB&gt; # or tensor(c1, c2)</span>
RGBRGB{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.1</span>   <span class="pl-c1">0.06</span>  <span class="pl-c1">0.04</span>
 <span class="pl-c1">0.15</span>  <span class="pl-c1">0.09</span>  <span class="pl-c1">0.06</span>
 <span class="pl-c1">0.2</span>   <span class="pl-c1">0.12</span>  <span class="pl-c1">0.08</span></pre></div>
<p dir="auto">Note that <code>c1⋅c2 = (c1.r*c2.r + c1.g*c2.g + c1.b*c2.b)/3</code>, where the division by 3 ensures the equivalence <code>norm(x) == norm(Gray(x)) == norm(RGB(x, x, x))</code>.</p>
<p dir="auto">Ordinary multiplication <code>*</code> is not supported because it is not obvious which one of these should be the default option.</p>
<p dir="auto">However, <code>*</code> is defined for grayscale since all these three multiplication operations (i.e., <code>⋅</code>, <code>⊙</code> and <code>⊗</code>) are equivalent in the 1D vector space.</p>
<h3 dir="auto"><a id="user-content-variance" class="anchor" aria-hidden="true" href="#variance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variance</h3>
<p dir="auto">The variance <code>v = E((c - μ)^2)</code> (or its bias-corrected version) involves a multiplication,
and to be consistent with the above you must specify which sense of multiplication you wish to use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cs = [c1, c2]
2-element Array{RGB{Float64},1} with eltype RGB{Float64}:
 RGB{Float64}(0.2,0.3,0.4)
 RGB{Float64}(0.5,0.3,0.2)

julia&gt; varmult(⋅, cs)
0.021666666666666667

julia&gt; varmult(⊙, cs)
RGB{Float64}(0.045,0.0,0.020000000000000004)

julia&gt; varmult(⊗, cs)
RGBRGB{Float64}:
  0.045  0.0  -0.03
  0.0    0.0   0.0
 -0.03   0.0   0.02"><pre>julia<span class="pl-k">&gt;</span> cs <span class="pl-k">=</span> [c1, c2]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{RGB{Float64},<span class="pl-c1">1</span>} with eltype RGB{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.2</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">varmult</span>(<span class="pl-k">⋅</span>, cs)
<span class="pl-c1">0.021666666666666667</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">varmult</span>(⊙, cs)
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.045</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.020000000000000004</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">varmult</span>(⊗, cs)
RGBRGB{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.045</span>  <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">0.03</span>
  <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.03</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.02</span></pre></div>
<p dir="auto">The corresponding <code>stdmult</code> computes standard deviation.</p>
<h3 dir="auto"><a id="user-content-abs-and-abs2" class="anchor" aria-hidden="true" href="#abs-and-abs2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>abs</code> and <code>abs2</code></h3>
<p dir="auto">To begin with, there is no general and straightforward definition of the
absolute value of a vector.
There are two reasonably intuitive definitions of <code>abs</code>/<code>abs2</code>: as a channel-wise
operator or as a function which returns a real number based on the norm.
For the latter, there are also variations in the definition of norm.</p>
<p dir="auto">In ColorVectorSpace v0.9 and later, <code>abs</code> is defined as a channel-wise operator.
<code>abs2</code> returns a real-valued scalar. In previous versions of ColorVectorSpace,
for <code>g = Gray(0.3)</code>, ColorVectorSpace returned different values for <code>abs2(g)</code> and
<code>abs2(RGB(g))</code>. This breaks the equivalence of <code>g</code> and <code>RGB(g)</code>.
This behavior is retained, with a deprecation warning, starting with
ColorVectorSpace 0.9.6.</p>
<p dir="auto"><strong>In the future</strong>, <code>abs2</code> will be defined as <code>abs2(c) == c⋅c ≈ norm(c)^2</code>.
This effectively divides the old result by 3; code that imposes thresholds
on <code>abs2(c)</code> may need to be updated.
You can obtain that behavior now--and circumvent the deprecation warning--
by using <code>ColorVectorSpace.Future.abs2(c)</code>.</p>
<p dir="auto">We anticipate the following transition schedule:</p>
<ul dir="auto">
<li>Sept 21, 2021: release ColorVectorSpace 0.9.7 with both <code>abs2</code> and <code>Future.abs2</code>.
<code>abs2</code> will have a "quiet" deprecation warning (visible with <code>--depwarn=yes</code>
or when running <code>Pkg.test</code>)</li>
<li>May 19, 2022: make the deprecation warning "noisy" (cannot be turned off).
This is designed to catch user-level scripts that may need to update thresholds
or other constants.</li>
<li>*July 1, 2022: transition <code>abs2</code> to the new definition
and make <code>Future.abs2</code> give a "noisy" depwarn to revert to regular <code>abs2</code>.</li>
<li>*Dec 1, 2022: remove <code>Future.abs2</code>.</li>
</ul>
<p dir="auto">The two marked with <code>*</code> denote breaking releases.</p>
</article></div>