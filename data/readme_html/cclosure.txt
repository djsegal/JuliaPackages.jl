<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cclosure" class="anchor" aria-hidden="true" href="#cclosure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CClosure</h1>
<p dir="auto"><a href="https://github.com/melonedo/CClosure.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/melonedo/CClosure.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><code>cclosure</code> is a wrapper of <code>@cfunction</code> that supports closures on all platforms and works on local variables.
Instead of relying on LLVM trampolines, <code>cclosure</code> creates classical C closure: a pair of function pointer and a context pointer, where context is explicitly passed to the function pointer by an external C libray.</p>
<h1 dir="auto"><a id="user-content-callback-with-qsort" class="anchor" aria-hidden="true" href="#callback-with-qsort"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Callback with <code>qsort</code></h1>
<p dir="auto">All systems that Julia supports have a version of <code>qsort</code> that supports the classical C closure, although they have different signature. On <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/qsort-s?view=msvc-170" rel="nofollow">Windows</a>, it is defined as:</p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typedef int (*callback)(void *context, const void *left, const void *right);
void qsort_s(void *base, size_t num, size_t width, callback compare, void *context);"><pre><span class="pl-k">typedef</span> <span class="pl-en">int</span> (*callback)(<span class="pl-k">void</span> *context, <span class="pl-k">const</span> <span class="pl-k">void</span> *left, <span class="pl-k">const</span> <span class="pl-k">void</span> *right);
<span class="pl-k">void</span> <span class="pl-en">qsort_s</span>(<span class="pl-k">void</span> *base, <span class="pl-c1">size_t</span> num, <span class="pl-c1">size_t</span> width, callback compare, <span class="pl-k">void</span> *context);</pre></div>
<p dir="auto">See <a href="#qsort-on-other-platforms"><code>qsort</code> on other platforms</a> if you are not on Windows.</p>
<p dir="auto">The signatures can be translated to Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CClosure
function qsort_c(a, func, ctx)
    @ccall qsort_s(a::Ptr{Cvoid}, length(a)::Csize_t, sizeof(eltype(a))::Csize_t, func::Ptr{Cvoid}, ctx::Ptr{Cvoid})::Cvoid
end
compare(a, b)::Cint = a &gt; b ? +1 : a &lt; b ? -1 : 0"><pre><span class="pl-k">using</span> CClosure
<span class="pl-k">function</span> <span class="pl-en">qsort_c</span>(a, func, ctx)
    <span class="pl-c1">@ccall</span> <span class="pl-c1">qsort_s</span>(a<span class="pl-k">::</span><span class="pl-c1">Ptr{Cvoid}</span>, <span class="pl-c1">length</span>(a)<span class="pl-k">::</span><span class="pl-c1">Csize_t</span>, <span class="pl-c1">sizeof</span>(<span class="pl-c1">eltype</span>(a))<span class="pl-k">::</span><span class="pl-c1">Csize_t</span>, func<span class="pl-k">::</span><span class="pl-c1">Ptr{Cvoid}</span>, ctx<span class="pl-k">::</span><span class="pl-c1">Ptr{Cvoid}</span>)<span class="pl-k">::</span><span class="pl-c1">Cvoid</span>
<span class="pl-k">end</span>
<span class="pl-en">compare</span>(a, b)<span class="pl-k">::</span><span class="pl-c1">Cint</span> <span class="pl-k">=</span> a <span class="pl-k">&gt;</span> b <span class="pl-k">?</span> <span class="pl-k">+</span><span class="pl-c1">1</span> <span class="pl-k">:</span> a <span class="pl-k">&lt;</span> b <span class="pl-k">?</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Now we can write a comparator that accepts arbitrary Julia functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function qsort_log_cclosure(a)
    T = eltype(a)
    log = Tuple{T, T}[]
    func, ctx = cclosure(1, Cint, (Ref{T}, Ref{T})) do a, b
        push!(log, (a, b))
        compare(a, b)
    end
    qsort_c(a, func, ctx)
    log, a
end
qsort_log_cclosure([3,2,1])"><pre><span class="pl-k">function</span> <span class="pl-en">qsort_log_cclosure</span>(a)
    T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(a)
    log <span class="pl-k">=</span> Tuple{T, T}[]
    func, ctx <span class="pl-k">=</span> <span class="pl-c1">cclosure</span>(<span class="pl-c1">1</span>, Cint, (Ref{T}, Ref{T})) <span class="pl-k">do</span> a, b
        <span class="pl-c1">push!</span>(log, (a, b))
        <span class="pl-c1">compare</span>(a, b)
    <span class="pl-k">end</span>
    <span class="pl-c1">qsort_c</span>(a, func, ctx)
    log, a
<span class="pl-k">end</span>
<span class="pl-c1">qsort_log_cclosure</span>([<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>])</pre></div>
<p dir="auto">Note that <code>Ref{T}</code> in <code>@cfunction</code> (and thus <code>cclosure</code>) tells Julia to load the pointer of type <code>T</code> for you.</p>
<h3 dir="auto"><a id="user-content-without-cclosure" class="anchor" aria-hidden="true" href="#without-cclosure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Without <code>cclosure</code></h3>
<p dir="auto">For comparison, without <code>cclosure</code> it is usually written either as a monolithic piece:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function compare_log(log, a, b)
    push!(log, (a, b))
    compare(a, b)
end
function qsort_log_monolithic(a::Vector{Int})
    log = Tuple{Int,Int}[]
    func = @cfunction compare_log Cint (Ref{Vector{Tuple{Int,Int}}}, Ref{Int}, Ref{Int})
    ctx = Ref(log)
    qsort_c(a, func, ctx)
    log, a
end
qsort_log_monolithic([3,2,1])"><pre><span class="pl-k">function</span> <span class="pl-en">compare_log</span>(log, a, b)
    <span class="pl-c1">push!</span>(log, (a, b))
    <span class="pl-c1">compare</span>(a, b)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">qsort_log_monolithic</span>(a<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>)
    log <span class="pl-k">=</span> Tuple{Int,Int}[]
    func <span class="pl-k">=</span> <span class="pl-c1">@cfunction</span> compare_log Cint (Ref{Vector{Tuple{Int,Int}}}, Ref{Int}, Ref{Int})
    ctx <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(log)
    <span class="pl-c1">qsort_c</span>(a, func, ctx)
    log, a
<span class="pl-k">end</span>
<span class="pl-c1">qsort_log_monolithic</span>([<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>])</pre></div>
<p dir="auto">... or type-unstable:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function compare_unstable(p, a, b)
    f = unsafe_pointer_to_objref(p)[]
    f(a, b)
end
function qsort_log_unstable(a)
    T = eltype(a)
    log = Tuple{T, T}[]
    ctx = function (a, b)
        a = unsafe_load(Ptr{T}(a))
        b = unsafe_load(Ptr{T}(b))
        push!(log, (a, b))
        compare(a, b)
    end
    func = @cfunction compare_unstable Cint (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid})
    qsort_c(a, func, Ref(ctx))
    log, a
end
qsort_log_unstable([3,2,1])"><pre><span class="pl-k">function</span> <span class="pl-en">compare_unstable</span>(p, a, b)
    f <span class="pl-k">=</span> <span class="pl-c1">unsafe_pointer_to_objref</span>(p)[]
    <span class="pl-c1">f</span>(a, b)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">qsort_log_unstable</span>(a)
    T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(a)
    log <span class="pl-k">=</span> Tuple{T, T}[]
    ctx <span class="pl-k">=</span> <span class="pl-k">function</span> (a, b)
        a <span class="pl-k">=</span> <span class="pl-c1">unsafe_load</span>(<span class="pl-c1">Ptr</span><span class="pl-c1">{T}</span>(a))
        b <span class="pl-k">=</span> <span class="pl-c1">unsafe_load</span>(<span class="pl-c1">Ptr</span><span class="pl-c1">{T}</span>(b))
        <span class="pl-c1">push!</span>(log, (a, b))
        <span class="pl-c1">compare</span>(a, b)
    <span class="pl-k">end</span>
    func <span class="pl-k">=</span> <span class="pl-c1">@cfunction</span> compare_unstable Cint (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid})
    <span class="pl-c1">qsort_c</span>(a, func, <span class="pl-c1">Ref</span>(ctx))
    log, a
<span class="pl-k">end</span>
<span class="pl-c1">qsort_log_unstable</span>([<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>])</pre></div>
<p dir="auto">In any case you need another global function visible to <code>@cfunction</code>.</p>
<h3 dir="auto"><a id="user-content-qsort-on-other-platforms" class="anchor" aria-hidden="true" href="#qsort-on-other-platforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>qsort</code> on other platforms</h3>
<p dir="auto"><a href="https://linux.die.net/man/3/qsort_r" rel="nofollow">Linux</a> and <a href="https://en.cppreference.com/w/c/algorithm/qsort" rel="nofollow">C11</a> (Julia is built with C89 so this is only for reference)</p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typedef int (*callback)(const void *left, const void *right, void *context);
void qsort_r(void *base, size_t num, size_t width, callback compare, void *context);"><pre><span class="pl-k">typedef</span> <span class="pl-en">int</span> (*callback)(<span class="pl-k">const</span> <span class="pl-k">void</span> *left, <span class="pl-k">const</span> <span class="pl-k">void</span> *right, <span class="pl-k">void</span> *context);
<span class="pl-k">void</span> <span class="pl-en">qsort_r</span>(<span class="pl-k">void</span> *base, <span class="pl-c1">size_t</span> num, <span class="pl-c1">size_t</span> width, callback compare, <span class="pl-k">void</span> *context);</pre></div>
<p dir="auto"><a href="https://www.freebsd.org/cgi/man.cgi?query=qsort_r&amp;sektion=3" rel="nofollow">BSD</a></p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typedef int (*callback)(void *context, const void *left, const void *right);
void qsort_r(void *base, size_t num, size_t width, void *context, callback compare);"><pre><span class="pl-k">typedef</span> <span class="pl-en">int</span> (*callback)(<span class="pl-k">void</span> *context, <span class="pl-k">const</span> <span class="pl-k">void</span> *left, <span class="pl-k">const</span> <span class="pl-k">void</span> *right);
<span class="pl-k">void</span> <span class="pl-en">qsort_r</span>(<span class="pl-k">void</span> *base, <span class="pl-c1">size_t</span> num, <span class="pl-c1">size_t</span> width, <span class="pl-k">void</span> *context, callback compare);</pre></div>
<h2 dir="auto"><a id="user-content-typedef" class="anchor" aria-hidden="true" href="#typedef"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Typedef</h2>
<p dir="auto">If you feel like exposing C <code>typedef</code> to Julia, you can write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add parameter `T` because callback is generic
callback(f, T) = cclosure(f, 1, Cint, (Ref{T}, Ref{T}))
# used as 
func, ctx = callback(T) do a, b
    ...
end"><pre><span class="pl-c"><span class="pl-c">#</span> add parameter `T` because callback is generic</span>
<span class="pl-en">callback</span>(f, T) <span class="pl-k">=</span> <span class="pl-c1">cclosure</span>(f, <span class="pl-c1">1</span>, Cint, (Ref{T}, Ref{T}))
<span class="pl-c"><span class="pl-c">#</span> used as </span>
func, ctx <span class="pl-k">=</span> <span class="pl-c1">callback</span>(T) <span class="pl-k">do</span> a, b
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-storing-closures" class="anchor" aria-hidden="true" href="#storing-closures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Storing closures</h2>
<p dir="auto">In <code>func, ctx = cclosure(f, ...)</code>, <code>func</code> is alive for the current Julia session, while <code>ctx</code> holds reference to <code>f</code> and must be kept alive when the callback is called which is already done by <code>ccall</code>. So you should GC-root <code>ctx</code> when you store the callback in C structs as a pair of pointers.</p>
</article></div>