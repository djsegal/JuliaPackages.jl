<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sqlstrings" class="anchor" aria-hidden="true" href="#sqlstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SQLStrings</h1>
<p>SQLStrings.jl provides the <code>@sql_cmd</code> macro to allow SQL query strings to be
constructed by normal-looking string interpolation but without risking SQL
formatting errors or SQL injection attacks on your application. For example,
the code</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="query = &quot;INSERT INTO Students VALUES ('$name', $age, '$class')&quot;
runquery(connection, query);
"><pre>query <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>INSERT INTO Students VALUES ('<span class="pl-v">$name</span>', <span class="pl-v">$age</span>, '<span class="pl-v">$class</span>')<span class="pl-pds">"</span></span>
<span class="pl-c1">runquery</span>(connection, query);</pre></div>
<p>is vulerable to the canonical SQL injection attack:</p>
<p><a href="https://xkcd.com/327" rel="nofollow"><img src="https://camo.githubusercontent.com/21b3a64813fc28181100d9dc73732b48d1ba0e98e8bab418c049bcdd4b10177b/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f6578706c6f6974735f6f665f615f6d6f6d2e706e67" alt="Little Bobby Tables" data-canonical-src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png" style="max-width:100%;"></a></p>
<p>Here's how to make this safe using SQLStrings.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="query = sql`INSERT INTO Students VALUES ($name, $age, $class)`
runquery(connection, query);
"><pre>query <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>INSERT INTO Students VALUES ($name, $age, $class)<span class="pl-pds">`</span></span>
<span class="pl-c1">runquery</span>(connection, query);</pre></div>
<p>In addition to making the above code safe, it allows the Julia types of
interpolated parameters to be preserved and passed to the database driver
library which can then marshal them correctly into types it understands. This
provides more control than using string interpolation which is for human
readability rather than data transfer.</p>
<h1><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple usage</h1>
<p>To use with a given database backend, you'll need a small amount of integration
code. In the examples below we'll use with LibPQ.jl and a <code>runquery()</code> function
(hopefully integration will be automatic in future).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SQLStrings
import LibPQ

runquery(conn, sql::SQLStrings.Sql)
    query, args = SQLStrings.prepare(sql)
    LibPQ.execute(conn, query, args)
end
"><pre><span class="pl-k">using</span> SQLStrings
<span class="pl-k">import</span> LibPQ

<span class="pl-c1">runquery</span>(conn, sql<span class="pl-k">::</span><span class="pl-c1">SQLStrings.Sql</span>)
    query, args <span class="pl-k">=</span> SQLStrings<span class="pl-k">.</span><span class="pl-c1">prepare</span>(sql)
    LibPQ<span class="pl-k">.</span><span class="pl-c1">execute</span>(conn, query, args)
<span class="pl-k">end</span></pre></div>
<p>Creating a table and inserting some values</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="conn = LibPQ.connection(your_connection_string)

runquery(conn, sql`CREATE TABLE foo (email text, userid integer)`)

for (email,id) in [ (&quot;admin@example.com&quot;, 1)
                    (&quot;foo@example.com&quot;,   2)]
    runquery(conn, sql`INSERT INTO foo VALUES ($email, $id)`)
end
"><pre>conn <span class="pl-k">=</span> LibPQ<span class="pl-k">.</span><span class="pl-c1">connection</span>(your_connection_string)

<span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>CREATE TABLE foo (email text, userid integer)<span class="pl-pds">`</span></span>)

<span class="pl-k">for</span> (email,id) <span class="pl-k">in</span> [ (<span class="pl-s"><span class="pl-pds">"</span>admin@example.com<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
                    (<span class="pl-s"><span class="pl-pds">"</span>foo@example.com<span class="pl-pds">"</span></span>,   <span class="pl-c1">2</span>)]
    <span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>INSERT INTO foo VALUES ($email, $id)<span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Thence:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; runquery(conn, sql`SELECT * FROM foo`) |&gt; DataFrame
2×2 DataFrame
 Row │ email              userid
     │ String?            Int32?
─────┼───────────────────────────
   1 │ admin@example.com       1
   2 │ foo@example.com         2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>SELECT * FROM foo<span class="pl-pds">`</span></span>) <span class="pl-k">|&gt;</span> DataFrame
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ email              userid
     │ String?            Int32?
─────┼───────────────────────────
   <span class="pl-c1">1</span> │ admin<span class="pl-c1">@example</span><span class="pl-k">.</span>com       <span class="pl-c1">1</span>
   <span class="pl-c1">2</span> │ foo<span class="pl-c1">@example</span><span class="pl-k">.</span>com         <span class="pl-c1">2</span></pre></div>
<h1><a id="user-content-howtos" class="anchor" aria-hidden="true" href="#howtos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Howtos</h1>
<h2><a id="user-content-inserting-values-from-a-julia-collection-into-a-row" class="anchor" aria-hidden="true" href="#inserting-values-from-a-julia-collection-into-a-row"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inserting values from a Julia collection into a row</h2>
<p>In some circumstances it can be useful to use splatting syntax to interpolate a
Julia collection into a comma-separated list of values. Generally simple scalar
parameters should be preferred for simplicity, but splatting can be useful on
occasion:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="email_and_id = (&quot;bar@example.com&quot;, 3)
runquery(conn, sql`INSERT INTO foo VALUES ($(email_and_id...))`)
"><pre>email_and_id <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>bar@example.com<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>INSERT INTO foo VALUES ($(email_and_id...))<span class="pl-pds">`</span></span>)</pre></div>
<h2><a id="user-content-using-the-in-operator-with-a-julia-collection" class="anchor" aria-hidden="true" href="#using-the-in-operator-with-a-julia-collection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the <code>in</code> operator with a Julia collection</h2>
<p>There's two ways to do this. First, using <code>in</code> and splatting syntax</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ids = (1,2)
       runquery(conn, sql`SELECT * FROM foo WHERE userid IN ($(ids...))`) |&gt; DataFrame
       2×2 DataFrame
        Row │ email              userid
            │ String?            Int32?
       ─────┼───────────────────────────
          1 │ admin@example.com       1
          2 │ foo@example.com         2
"><pre>julia<span class="pl-k">&gt;</span> ids <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
       <span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>SELECT * FROM foo WHERE userid IN ($(ids...))<span class="pl-pds">`</span></span>) <span class="pl-k">|&gt;</span> DataFrame
       <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
        Row │ email              userid
            │ String?            Int32?
       ─────┼───────────────────────────
          <span class="pl-c1">1</span> │ admin<span class="pl-c1">@example</span><span class="pl-k">.</span>com       <span class="pl-c1">1</span>
          <span class="pl-c1">2</span> │ foo<span class="pl-c1">@example</span><span class="pl-k">.</span>com         <span class="pl-c1">2</span></pre></div>
<p>Second, using the SQL <code>any</code> operator and simply passing a single SQL array parameter:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ids = [1,2]
       runquery(conn, sql`SELECT * FROM foo WHERE userid = any($ids)`) |&gt; DataFrame
       2×2 DataFrame
        Row │ email              userid
            │ String?            Int32?
       ─────┼───────────────────────────
          1 │ admin@example.com       1
          2 │ foo@example.com         2
"><pre>julia<span class="pl-k">&gt;</span> ids <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
       <span class="pl-c1">runquery</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>SELECT * FROM foo WHERE userid = any($ids)<span class="pl-pds">`</span></span>) <span class="pl-k">|&gt;</span> DataFrame
       <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
        Row │ email              userid
            │ String?            Int32?
       ─────┼───────────────────────────
          <span class="pl-c1">1</span> │ admin<span class="pl-c1">@example</span><span class="pl-k">.</span>com       <span class="pl-c1">1</span>
          <span class="pl-c1">2</span> │ foo<span class="pl-c1">@example</span><span class="pl-k">.</span>com         <span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-building-up-a-query-from-fragments" class="anchor" aria-hidden="true" href="#building-up-a-query-from-fragments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Building up a query from fragments</h2>
<p>On occasion you might want to dynamically build up a complicated query from
fragments of SQL source text. To do this, the result of <code>@sql_cmd</code> can be
interpolated into a larger query as follows.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="conn = LibPQ.connection(your_connection_string)

some_condition = true

x = 100
x = 20
# Example of an optional clauses - use empty sql` to disable it.
and_clause = some_condition ? sql`AND y=$y` : sql``

# Interpolation of values produces SQL parameters; interpolating sql`
# fragments adds them to the query.
q = sql`SELECT * FROM table WHERE x=$x $and_clause`
runquery(conn, q)
"><pre>conn <span class="pl-k">=</span> LibPQ<span class="pl-k">.</span><span class="pl-c1">connection</span>(your_connection_string)

some_condition <span class="pl-k">=</span> <span class="pl-c1">true</span>

x <span class="pl-k">=</span> <span class="pl-c1">100</span>
x <span class="pl-k">=</span> <span class="pl-c1">20</span>
<span class="pl-c"><span class="pl-c">#</span> Example of an optional clauses - use empty sql` to disable it.</span>
and_clause <span class="pl-k">=</span> some_condition <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>AND y=$y<span class="pl-pds">`</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span><span class="pl-pds">`</span></span>

<span class="pl-c"><span class="pl-c">#</span> Interpolation of values produces SQL parameters; interpolating sql`</span>
<span class="pl-c"><span class="pl-c">#</span> fragments adds them to the query.</span>
q <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>SELECT * FROM table WHERE x=$x $and_clause<span class="pl-pds">`</span></span>
<span class="pl-c1">runquery</span>(conn, q)</pre></div>
<p>A word of warning that constructing SQL logic with Julia-level logic can make
the code quite hard to understand. It can be worth considering writing one
larger SQL query which does more of the logic on the SQL side.</p>
<h1><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Design</h1>
<p><code>SQLStrings</code> is a minimal approach to integrating SQL with Julia code in a safe
way — it understands only the basic rules of SQL quoting and Julia string
interpolation, but does no other parsing of the source text. This allows tight
integration with your database of choice by being unopinionated about its
source language and any SQL language extensions it may have.</p>
<p>I've chosen backticks for <code>@sql_cmd</code> rather than a normal string macro because</p>
<ul>
<li>It's important to have syntax highlighting for interpolations, but editors
typically disable this within normal string macros.</li>
<li><code>@sql_cmd</code> is very conceptually similar to the builtin backticks and
<code>Base.Cmd</code>: it's a lightweight layer which deals only with preserving the
structure of tokens in the source text.</li>
</ul>
</article></div>