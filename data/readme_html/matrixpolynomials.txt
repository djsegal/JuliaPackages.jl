<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matrixpolynomialsjl" class="anchor" aria-hidden="true" href="#matrixpolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixPolynomials.jl</h1>
<p><a href="https://jagot.github.io/MatrixPolynomials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jagot.github.io/MatrixPolynomials.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/jagot/MatrixPolynomials.jl/actions"><img src="https://github.com/jagot/MatrixPolynomials.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jagot/MatrixPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/322fd50fa939b8ae4c6038aec84dcd0a67fda0b3002bb5ddc7ff598baa1f3b30/68747470733a2f2f636f6465636f762e696f2f67682f6a61676f742f4d6174726978506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jagot/MatrixPolynomials.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package aids in the computation of the action of a matrix
polynomial on a vector, i.e. <code>p(A)v</code>, where <code>A</code> is a (square) matrix
(or a linear operator) that is supplied to the polynomial <code>p</code>. The
matrix polynomial <code>p(A)</code> is never formed explicitly, instead only its
action on <code>v</code> is evaluated. This is commonly used in time-stepping
algorithms for ordinary differential equations (ODEs) and discretized
partial differential equations (PDEs) where <code>p</code> is an approximation of
the exponential function (or the related <code>φ</code> functions:
<code>φ₀(z) = exp(z)</code>, <code>φₖ₊₁ = [φₖ(z)-φₖ(0)]/z</code>, <code>φₖ(0)=1/k!</code>) on the
field-of-values of the matrix <code>A</code>, which for the methods in this
package needs to be known before-hand.</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives</h2>
<p>Other packages with similar goals, but instead based on matrix
polynomials found via Krylov iterations are</p>
<ul>
<li><a href="https://github.com/JuliaDiffEq/ExponentialUtilities.jl">https://github.com/JuliaDiffEq/ExponentialUtilities.jl</a></li>
<li><a href="https://github.com/Jutho/KrylovKit.jl">https://github.com/Jutho/KrylovKit.jl</a></li>
</ul>
<p>Krylov iterations do not need to know the field-of-values of the
matrix <code>A</code> before-hand, instead, an orthogonal basis is built-up
on-the-fly, by repeated action of <code>A</code> on test vectors: <code>Aⁿ*v</code>. This
process is however very sensitive to the condition number of <code>A</code>,
something that can be alleviated by iterating a shifted and inverted
matrix instead: <code>(A-σI)⁻¹</code> (rational Krylov). Not all matrices/linear
operators are easily inverted/factorized, however.</p>
<p>Moreover, the Krylov iterations for general matrices (then called
Arnoldi iterations) require long-term recurrences with mutual
orthogonalization along with inner products, all of which can be
costly to compute. Finally, a subspace approximation of the polynomial
<code>p</code> of a upper Hessenberg matrix needs to computed. The
real-symmetric/complex-Hermitian case (Lanczos iterations) reduces to
three-term recurrences and a tridiagonal subspace matrix. In contrast,
the polynomial methods of this packages two-term recurrences only, no
orthogonalization (and hence no inner products), and finally no
evaluation of the polynomial on a subspace matrix. This could
potentially mean that the methods are easier to implement on a GPU.</p>
</article></div>