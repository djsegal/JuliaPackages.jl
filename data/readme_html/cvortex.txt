<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cvortexjl" class="anchor" aria-hidden="true" href="#cvortexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CVortex.jl</h1>
<p dir="auto">A Julia wrapper for GPU accelerated vortex filament and vortex particle methods of the <a href="https://github.com/hjabird/cvortex">CVortex library</a>.</p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<h3 dir="auto"><a id="user-content-what-does-cvortexjl-do" class="anchor" aria-hidden="true" href="#what-does-cvortexjl-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What does CVortex.jl do?</h3>
<p dir="auto">CVortex.jl is a wrapper for the CVortex library. It has the following functionality:</p>
<ul dir="auto">
<li>Compute velocities induced by collections of 2D regularised vortex particles, 3D regularised vortex particles and 3D straight singular vortex filaments.</li>
<li>Compute the vortex stretching term induced on 3D vortex particles by other 3D particles or vortex filaments.</li>
<li>Compute the change in particle vorticity due to viscous interaction between 3D regularised vortex particles.</li>
<li>Redistribute 2D and 3D vortex particles onto a grid.</li>
</ul>
<h3 dir="auto"><a id="user-content-what-will-it-run-on" class="anchor" aria-hidden="true" href="#what-will-it-run-on"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What will it run on?</h3>
<p dir="auto">CVortex.jl only runs on 64bit Windows or 64bit Linux. The library is not compatible with MacOS or other
CPU instruction sets.</p>
<p dir="auto">To obtain the maximum benefit you'll also need an OpenCL 1.2 compatible GPU or iGPU. This includes:</p>
<ul dir="auto">
<li>Intel integrated graphics</li>
<li>AMD integrated graphics and discrete GPUs</li>
<li>Nvidia GPUs (Any GPU that runs CUDA)</li>
</ul>
<p dir="auto">You'll also have needed to have installed the appropriate GPU drivers. Note that
many hypervisors (programs that allow you to run virtual machines such as VirtualBox)
don't pass through graphics hardware.</p>
<p dir="auto">Even if you don't have compatable a compatible GPU, you'll still benefit
from the multicore implementation.</p>
<h3 dir="auto"><a id="user-content-how-can-i-get-cvortexjl" class="anchor" aria-hidden="true" href="#how-can-i-get-cvortexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How can I get CVortex.jl?</h3>
<p dir="auto">You'll need to add the package to your system.
Run Julia and:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(v1.1) pkg&gt; add CVortex"><pre class="notranslate"><code>(v1.1) pkg&gt; add CVortex
</code></pre></div>
<p dir="auto">remembering that to access to package environment the <code>]</code> must be used.
Binaries for the CVortex library will automatically be downloaded.</p>
<h3 dir="auto"><a id="user-content-is-there-documentation" class="anchor" aria-hidden="true" href="#is-there-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Is there documentation?</h3>
<p dir="auto">Yes! The ordinary help syntax within Julia (Type <code>?</code> within the REPL) will give you help on a particular topic. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="help?&gt; particle_induced_velocity"><pre class="notranslate"><code>help?&gt; particle_induced_velocity
</code></pre></div>
<p dir="auto">For examples see <a href="https://github.com/hjabird/CVortexExamples.jl">CVortex.jl examples</a></p>
<h2 dir="auto"><a id="user-content-using-cvortexjl" class="anchor" aria-hidden="true" href="#using-cvortexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using CVortex.jl</h2>
<p dir="auto">The first thing you'll need to do is to import CVortex.jl. This can be done using</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using CVortex"><pre class="notranslate"><code>using CVortex
</code></pre></div>
<h3 dir="auto"><a id="user-content-vortex-filaments" class="anchor" aria-hidden="true" href="#vortex-filaments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vortex filaments</h3>
<p dir="auto">All vortex filaments in CVortex are straight and singular. They have three properties, a start point, an
end point and a vorticity. The first two are 3D, and the latter is a scalar.</p>
<h4 dir="auto"><a id="user-content-velocity" class="anchor" aria-hidden="true" href="#velocity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Velocity</h4>
<p dir="auto">To obtain the velocity induced on a point in 3D one uses:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="startp = rand(3)  # Filament start coordinate
endp = rand(3)    # Filament end coordinate
fvort = rand()    # A scalar. Filament's vorticity
mesp = rand(3)    # Velocity measurement location.
vel = filament_induced_velocity(startp, endp, fvort, mesp);"><pre class="notranslate"><code>startp = rand(3)  # Filament start coordinate
endp = rand(3)    # Filament end coordinate
fvort = rand()    # A scalar. Filament's vorticity
mesp = rand(3)    # Velocity measurement location.
vel = filament_induced_velocity(startp, endp, fvort, mesp);
</code></pre></div>
<p dir="auto">The returned <code>vel</code> is a Float32 array of length 3.</p>
<p dir="auto">We use our hardware better if we group computations together. Suppose we had <code>N</code> vortex filaments, we can vectorise
the computation of the influence on a measurement point as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="N = 10000
startps = rand(N, 3)
endps = rand(N, 3)
fvorts = rand(N)
mesp = rand(3)
vel = filament_induced_velocity(startps, endps, fvorts, mesp)"><pre class="notranslate"><code>N = 10000
startps = rand(N, 3)
endps = rand(N, 3)
fvorts = rand(N)
mesp = rand(3)
vel = filament_induced_velocity(startps, endps, fvorts, mesp)
</code></pre></div>
<p dir="auto">Again, <code>vel</code> is a Float32 array of length 3.</p>
<p dir="auto">To create a problem suitable for GPU accelleration, we need multiple-multiple problems.
To do this the measurement points becomes a matrix:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="N = 10000
M = 100000
startps = rand(N, 3)
endps = rand(N, 3)
fvorts = rand(N)
mesp = rand(M, 3)
vels = filament_induced_velocity(startps, endps, fvorts, mesp)"><pre class="notranslate"><code>N = 10000
M = 100000
startps = rand(N, 3)
endps = rand(N, 3)
fvorts = rand(N)
mesp = rand(M, 3)
vels = filament_induced_velocity(startps, endps, fvorts, mesp)
</code></pre></div>
<p dir="auto">where <code>vels</code> is an M by 3 Float32 matrix.</p>
<h4 dir="auto"><a id="user-content-influence-matrix" class="anchor" aria-hidden="true" href="#influence-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Influence matrix</h4>
<p dir="auto">Its often desirable to obtain the influence of a vortex filament (perhaps it the context
of a vortex ring) on the velocity in a given direction at a point. A function for this is
included:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="nvels = induced_velocity_influence_matrix(
      filament_start_coords :: Matrix{&lt;:Real},
      filament_end_coords :: Matrix{&lt;:Real},
      measurement_points :: Matrix{&lt;:Real},
      measurement_directions :: Matrix{&lt;:Real})"><pre class="notranslate"><code>nvels = induced_velocity_influence_matrix(
      filament_start_coords :: Matrix{&lt;:Real},
      filament_end_coords :: Matrix{&lt;:Real},
      measurement_points :: Matrix{&lt;:Real},
      measurement_directions :: Matrix{&lt;:Real})
</code></pre></div>
<p dir="auto">For N vortex filaments, a matrix A is returned such that, for a length N
vector of filament vorticity called b, the induced velocities measured at
the M points in M directions would be given by A*b.</p>
<h3 dir="auto"><a id="user-content-vortex-particles" class="anchor" aria-hidden="true" href="#vortex-particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vortex particles</h3>
<p dir="auto">Vortex particles are blobs of vorticity. Whilst they can be singular, this isn't good
for long term stability. CVortex therefore implements vortex particle regularisation.</p>
<h4 dir="auto"><a id="user-content-regularisation" class="anchor" aria-hidden="true" href="#regularisation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Regularisation</h4>
<p dir="auto">CVortex.jl uses the struct <code>RegularisationFunction</code> to group together functions relevent
to a regularisation method. A <code>RegularisationFunction</code> can be obtained using pre-programmed
routines:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="singular_reg = singular_regularisation()
planet_reg = planetary_regularisation()
winckel_reg = winckelmans_regularisation()
gauss_reg = gaussian_regularisation()"><pre class="notranslate"><code>singular_reg = singular_regularisation()
planet_reg = planetary_regularisation()
winckel_reg = winckelmans_regularisation()
gauss_reg = gaussian_regularisation()
</code></pre></div>
<p dir="auto"><code>singular_regularisation()</code> isn't actually a regularisation because it allows the use of singular
vortex particles. <code>planetary_regularisation()</code> allow regularisation, but cannot be used
in viscous schemes. <code>winckelmans_regularisation()</code> is a higher order algebraic regularisation.
<code>gaussian_regularisation()</code> is normal gaussian regularisation.</p>
<h4 dir="auto"><a id="user-content-2d-vortex-particles" class="anchor" aria-hidden="true" href="#2d-vortex-particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2D vortex particles</h4>
<p dir="auto">Using 2D vortex particles is much like using singular vortex filament, with two additions:</p>
<ul dir="auto">
<li>A regularisation function is required</li>
<li>A regularisation distance is required</li>
</ul>
<p dir="auto">The regularisation distance is like the radius of the vortex particles. Roughly, it
represents the finest fidelity that the field can resolve. Consequently, vortex particles
must overlap for a good solution.</p>
<h5 dir="auto"><a id="user-content-velocity-1" class="anchor" aria-hidden="true" href="#velocity-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Velocity</h5>
<p dir="auto">To obtain the velocity induced by a 2D vortex particle one uses</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="vels = particle_induced_velocity(particle_positions, particle_vorts, 
  measurement_points, regularisation, regularisation_distance)"><pre class="notranslate"><code>vels = particle_induced_velocity(particle_positions, particle_vorts, 
  measurement_points, regularisation, regularisation_distance)
</code></pre></div>
<p dir="auto">Where:</p>
<ul dir="auto">
<li>For single particle -&gt; single measurement point: <code>particle_positions</code> is a length 2 vector, <code>particle_vorts</code> is scalar and <code>measurement_points</code> is a length 2 vector. <code>vels</code> is a length 2 vector.</li>
<li>For multiple particles -&gt; single measurement point: <code>particle_positions</code> is an N by 2 matrix, <code>particle_vorts</code> is a length N vector and <code>measurement_points</code> is a length 2 vector. <code>vels</code> is a length 2 vector.</li>
<li>For multiple particles -&gt; multiple measurement points: <code>particle_positions</code> is an N by 2 matrix, <code>particle_vorts</code> is a length N vector and <code>measurement_points</code> is an M by 2 matrix. <code>vels</code> is an M by 2 matrix.
In all cases, <code>regularisation_distance</code> is as scalar. Different sized particles aren't supported.</li>
</ul>
<h5 dir="auto"><a id="user-content-viscous-rate-of-change-of-vorticity" class="anchor" aria-hidden="true" href="#viscous-rate-of-change-of-vorticity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Viscous rate of change of vorticity</h5>
<p dir="auto">For viscous vortex particle method, the rate of change of vorticity of each particle is computed.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dvorts = particle_visc_induced_dvort(
  inducing_particle_positions, inducing_particle_vorts, inducing_particle_areas,
  induced_particle_positions, induced_particle_vorts, induced_particle_areas,
  regularisation, regularisation_distance, kinematic_viscosity)"><pre class="notranslate"><code>dvorts = particle_visc_induced_dvort(
  inducing_particle_positions, inducing_particle_vorts, inducing_particle_areas,
  induced_particle_positions, induced_particle_vorts, induced_particle_areas,
  regularisation, regularisation_distance, kinematic_viscosity)
</code></pre></div>
<p dir="auto">Here the rate of change of vorticity on the "induced" particles is computed. The particle_area
variables is of the same type as the vorticity vector.</p>
<h4 dir="auto"><a id="user-content-3d-vortex-particles" class="anchor" aria-hidden="true" href="#3d-vortex-particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D Vortex particles</h4>
<p dir="auto">3D vortex particles are characterised by a position (in 3D) and a vorticity vector (again, in 3D).
Like 2D particles, a regularisation function and a regularisation distance is required for
computation.</p>
<h5 dir="auto"><a id="user-content-velocity-2" class="anchor" aria-hidden="true" href="#velocity-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Velocity</h5>
<p dir="auto">To obtain the velocity induced by a 3D vortex particle one uses</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="vels = particle_induced_velocity(particle_positions, particle_vorts, 
  measurement_points, regularisation, regularisation_distance)"><pre class="notranslate"><code>vels = particle_induced_velocity(particle_positions, particle_vorts, 
  measurement_points, regularisation, regularisation_distance)
</code></pre></div>
<p dir="auto">Where:</p>
<ul dir="auto">
<li>For single particle -&gt; single measurement point: <code>particle_positions</code> is a length 3 vector, <code>particle_vorts</code> is a length 3 vector and <code>measurement_points</code> is a length 3 vector. <code>vels</code> is a length 3 vector.</li>
<li>For multiple particles -&gt; single measurement point: <code>particle_positions</code> is an N by 3 matrix, <code>particle_vorts</code> is an N by 3 matrix and <code>measurement_points</code> is a length 3 vector. <code>vels</code> is a length 3 vector.</li>
<li>For multiple particles -&gt; multiple measurement points: <code>particle_positions</code> is an N by 3 matrix, <code>particle_vorts</code> is an N by 3 matrix and <code>measurement_points</code> is an M by 3 matrix. <code>vels</code> is an M by 3 matrix.
In all cases, <code>regularisation_distance</code> is as scalar. Different sized particles aren't supported.</li>
</ul>
<h4 dir="auto"><a id="user-content-vortex-stretching" class="anchor" aria-hidden="true" href="#vortex-stretching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vortex stretching</h4>
<p dir="auto">In 3D vorticies can be "stretched" leading to a rate of change of vorticity. To compute this
the following is used:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dvort = particle_induced_dvort(
        inducing_particle_position, inducing_particle_vorticity,
        induced_particle_position, induced_particle_vorticity,
        kernel :: RegularisationFunction, regularisation_radius :: Real)"><pre class="notranslate"><code>dvort = particle_induced_dvort(
        inducing_particle_position, inducing_particle_vorticity,
        induced_particle_position, induced_particle_vorticity,
        kernel :: RegularisationFunction, regularisation_radius :: Real)
</code></pre></div>
<h5 dir="auto"><a id="user-content-viscous-rate-of-change-of-vorticity-1" class="anchor" aria-hidden="true" href="#viscous-rate-of-change-of-vorticity-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Viscous rate of change of vorticity</h5>
<p dir="auto">For viscous vortex particle method, the rate of change of vorticity of each particle is computed.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dvorts = particle_visc_induced_dvort(
  inducing_particle_positions, inducing_particle_vorts, inducing_particle_areas,
  induced_particle_positions, induced_particle_vorts, induced_particle_areas,
  regularisation, regularisation_distance, kinematic_viscosity)"><pre class="notranslate"><code>dvorts = particle_visc_induced_dvort(
  inducing_particle_positions, inducing_particle_vorts, inducing_particle_areas,
  induced_particle_positions, induced_particle_vorts, induced_particle_areas,
  regularisation, regularisation_distance, kinematic_viscosity)
</code></pre></div>
<p dir="auto">Here the rate of change of vorticity on the "induced" particles is computed. The particle_area
variables is of the same type as the vorticity vector.</p>
<h4 dir="auto"><a id="user-content-vortex-particle-redistribution" class="anchor" aria-hidden="true" href="#vortex-particle-redistribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vortex particle redistribution</h4>
<p dir="auto">Vortex particles can be redistributed onto a grid to fix problems introduced by particles spreading out of
grouping together.</p>
<p dir="auto">To do this some kind of redistribution scheme is required. This scheme is encapsulated within
a <code>RedistributionFunction</code> struct. These can be created as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="scheme = lambda0_redistribution()
scheme = lambda1_redistribution()
scheme = lambda2_redistribution()
scheme = lambda3_redistribution()
scheme = m4p_redistribution()"><pre class="notranslate"><code>scheme = lambda0_redistribution()
scheme = lambda1_redistribution()
scheme = lambda2_redistribution()
scheme = lambda3_redistribution()
scheme = m4p_redistribution()
</code></pre></div>
<p dir="auto">The <code>lambda3_redistribution()</code> scheme and  <code>m4p_redistribution()</code> scheme are generally recommended.
The <code>lambda0_redistribution()</code> and <code>lambda2_redistribution()</code> are discontinious, and so can cause problems
numerically. The <code>lambda1_redistribution()</code> is dissipative.</p>
<p dir="auto">Having chosen a scheme, particles can then be redistributed:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="positions, vorts, areas = redistribute_particles_on_grid(
        particle_positions, inducing_particle_vorticity,
        redistribution_function, grid_density;
        negligible_vort=1e-4, max_new_particles=-1)"><pre class="notranslate"><code>positions, vorts, areas = redistribute_particles_on_grid(
        particle_positions, inducing_particle_vorticity,
        redistribution_function, grid_density;
        negligible_vort=1e-4, max_new_particles=-1)
</code></pre></div>
<p dir="auto">There are two optional parameters, <code>negligible_vort</code> and <code>max_new_particles</code>.
These are designed to stop lots of vortex particles with very small vorticities
being created.</p>
<p dir="auto"><code>negligible_vort</code> is a threshold for discarding particles, and should be a
value between 0 (discard no particles) and 1 (discard all particles). It is
implemented as the proportion of the average particle's vorticity that any
particle must have possess to be kept. The vorticity of any discarded particle
is distributed evenly among the remaining particles.</p>
<p dir="auto"><code>max_new_particles</code> is a hard limit on the number of new vortex particles
that can be created. When equal to -1, there is no limit. If <code>negligible_vort</code> is
chosen such that there are more than the <code>max_new_particles</code> remaining, further
particles are discarded until the number of particles is less than <code>max_new_particles</code>.
Due to the implementation, this may result in fewer particles than <code>max_new_particles</code>.</p>
<h4 dir="auto"><a id="user-content-mixing-3d-vortex-particles-and-filaments" class="anchor" aria-hidden="true" href="#mixing-3d-vortex-particles-and-filaments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixing 3D vortex particles and filaments</h4>
<p dir="auto">It is possible to mix vortex particles and filaments in 3D. Since vortex filaments
are singular, it is not possible to include viscosity for these problems (unless
you're willing to cheat somehow).</p>
<p dir="auto">The only addition function required for putting both in one problem is the
vortex stretching induced by vortex filaments on vortex particles. This can be
obtained using</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dvort = filament_induced_dvort(
      filament_start_coord,
      filament_end_coord,
      filament_strength,
      induced_particle_position ,
      induced_particle_vorticity)"><pre class="notranslate"><code>dvort = filament_induced_dvort(
      filament_start_coord,
      filament_end_coord,
      filament_strength,
      induced_particle_position ,
      induced_particle_vorticity)
</code></pre></div>
<p dir="auto">where everything is assumed to be singular.</p>
<h3 dir="auto"><a id="user-content-contolling-the-accelerators--gpus" class="anchor" aria-hidden="true" href="#contolling-the-accelerators--gpus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contolling the accelerators / GPUs</h3>
<p dir="auto">In computers with multiple GPUs (probably an iGPU + discrete GPU) it may
be desirable to control which GPU is being used, or in some cases to stop GPUs being used at
all.</p>
<p dir="auto">But first, one must know how many GPUs CVortex has found:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="number_of_gpus = number_of_accelerators()"><pre class="notranslate"><code>number_of_gpus = number_of_accelerators()
</code></pre></div>
<p dir="auto">where an integer is returned.</p>
<p dir="auto">The accelerators are given an index of 1:number_of_accelerators(). Acclerators
can then be controlled and investigated using the index.</p>
<p dir="auto">To obtain the name one uses:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="name = accelerator_name(accelerator_index)"><pre class="notranslate"><code>name = accelerator_name(accelerator_index)
</code></pre></div>
<p dir="auto">Note that the name may not be unique among your GPUs, or even share the name of the
product you purchased. For example, an for an AMD RX Vega 56:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; accelerator_name(1)
&quot;gfx900&quot;"><pre class="notranslate"><code>julia&gt; accelerator_name(1)
"gfx900"
</code></pre></div>
<p dir="auto">To investigate whether CVortex is using a GPU:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="in_use = accelerator_enabled(index)"><pre class="notranslate"><code>in_use = accelerator_enabled(index)
</code></pre></div>
<p dir="auto">which returns 1 (true) or 0 (false).</p>
<p dir="auto">To enable an accelerator</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="accelerator_enable(index)"><pre class="notranslate"><code>accelerator_enable(index)
</code></pre></div>
<p dir="auto">and to disable an accelerator</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="accelerator_disable(index)"><pre class="notranslate"><code>accelerator_disable(index)
</code></pre></div>
<h2 dir="auto"><a id="user-content-potentially-faq" class="anchor" aria-hidden="true" href="#potentially-faq"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Potentially FAQ</h2>
<p dir="auto"><em><strong>Why does CVortex.jl return Float32s?</strong></em>
Because (almost) all the underlying code uses floats. GPU manufactures
cripple the double precision speed of their consumer-level GPUs, or may not include
double-precision capability at all (it isn't required by the OpenCL spec.).
But since the discretisation of vortex particles of vortex filaments lead to more
error than single precision computing, the cost of using single precision
is negligible, whilst the compatability/performance benifits are huge.</p>
<p dir="auto"><em><strong>Why is the program hanging?</strong></em>
The implementation of some OpenCL drivers is supposedly dodgy, especially
on older GPUs.</p>
<p dir="auto"><em><strong>Why isn't CVortex.jl available on MacOS or X architecture?</strong></em>
CVortex is theoretically compatable with MacOS and any CPU
architecture that can be targetet by MSVC, GCC or Clang. For
multithreading, OpenMP has to be available. For GPU acceleration,
an implementation of the full OpenCL 1.2 profile has to be available.
CVortex isn't compiled for these architectures or Mac, but I lack the hardware
on which to compile or test binaries. For a sufficiently keen bean,
it would be possible to compile cvortex from source, and copy the shared library
into CVortex.jl build directory.</p>
<p dir="auto"><em><strong>Why isn't it faster?</strong></em>
It would be possible to make CVortex faster, but to do so would complicate
the interface. The code has also not be tailored to any particular hardware.</p>
<p dir="auto"><em><strong>Why does <code>using CVortex</code> take such a long time to run?</strong></em>
<code>using CVortex</code> calls the underlying CVortex library's initialisation
function which must in turn compile the OpenCL kernels for used by
the programs.</p>
<p dir="auto"><em><strong>Why isn't CVortex using my iGPU/GPU</strong></em>
Thats potentially a big questions. If <code>number_of_accelerators()</code> returns the
expected number of devices, its probably because the problem isn't suitable for
GPU acceleration (only multiple-multiple problems are accelerated, and even
then the problem must have a sufficient number of both target and source objects).
If the number is less than expected, things get more complicated. It may be that
the OpenCL kernels could not be sucessfully compiled (I've not encountered this)
or, more likely, the OpenCL ICD loader didn't find the device's OpenCL runtime library.
This might be because the drivers aren't properly installed. Additionally, on Windows,
driver installers are liable to overwrite files installed by other driver installers.
If you're running a virtual machine, check that the GPU is being passed through (if
the hypervisor is even capable of doing this).</p>
</article></div>