<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-norg" class="anchor" aria-hidden="true" href="#norg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Norg</h1>
<p dir="auto"><a href="https://klafyvel.github.io/Norg.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://klafyvel.github.io/Norg.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/klafyvel/Norg.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/klafyvel/Norg.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Klafyvel/Norg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/22576706976d9e1fbdc43b370dd83667a2bd97f10c4ca85456b711e0dc1b045a/68747470733a2f2f636f6465636f762e696f2f67682f4b6c61667976656c2f4e6f72672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Test Coverage" data-canonical-src="https://codecov.io/gh/Klafyvel/Norg.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Norg.jl is a library to parse the <a href="https://github.com/nvim-neorg/norg-specs">norg file format</a>
used in <a href="https://github.com/nvim-neorg/neorg">NeoVim's neorg</a>.</p>
<p dir="auto">This is heavily work in progress, so expect breaking changes. Meanwhile, I'd be really happy if you could try Norg.jl and tell me if you find unexpected behaviours.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is registered.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add Norg"><pre>]add Norg</pre></div>
<p dir="auto">If you want the latest dev version:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add https://github.com/Klafyvel/Norg.jl"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>Klafyvel<span class="pl-k">/</span>Norg<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-what-can-it-do-" class="anchor" aria-hidden="true" href="#what-can-it-do-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What can it do ?</h2>
<p dir="auto">For now layer 3 compatibility is implemented in the parser, and there is code generation for html and pandoc JSON targets. There is no semantic analysis yet, which for example means that links to line number or using the <code>#</code> target syntax are poorly handled in code generation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Norg

julia&gt; s = &quot;&quot;&quot;
       Hi ! I am a Norg document. For now only /basic/ *markup* is !implemented!.
       That should not prevent you from *,!nesting!, ^the^ /good/ `stuff`*

       You can of course make paragraphs, you -nerd- /beautiful/ nerd.

       We also can use links : {https://example.com}

       But it's easier to read if you use a link description, as in this link towards {https://klafyvel.me}[my *website*] !
       &quot;&quot;&quot;;

julia&gt; norg(HTMLTarget(), s)
# pretty HTML prints there, but have a look at its rendering below

julia&gt; norg&quot;Neorg also has a string macro that can be used in Pluto&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Norg

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">       Hi ! I am a Norg document. For now only /basic/ *markup* is !implemented!.</span>
<span class="pl-s">       That should not prevent you from *,!nesting!, ^the^ /good/ `stuff`*</span>
<span class="pl-s"></span>
<span class="pl-s">       You can of course make paragraphs, you -nerd- /beautiful/ nerd.</span>
<span class="pl-s"></span>
<span class="pl-s">       We also can use links : {https://example.com}</span>
<span class="pl-s"></span>
<span class="pl-s">       But it's easier to read if you use a link description, as in this link towards {https://klafyvel.me}[my *website*] !</span>
<span class="pl-s">       <span class="pl-pds">"""</span></span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norg</span>(<span class="pl-c1">HTMLTarget</span>(), s)
<span class="pl-c"><span class="pl-c">#</span> pretty HTML prints there, but have a look at its rendering below</span>

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">norg</span>"</span>Neorg also has a string macro that can be used in Pluto<span class="pl-pds">"</span></span></pre></div>
<div dir="auto">
  <p dir="auto">Hi ! I am a Norg document. For now only
    <i>basic</i>
    <b>markup</b> is
    <span>implemented</span>.
    <br>That should not prevent you from *
    <sub>
      <span>nesting</span>
    </sub>
    <sup>the</sup>
    <i>good</i>
    <code>stuff</code>*
  </p>
  <p dir="auto">You can of course make paragraphs, you
    <del>nerd</del>
    <i>beautiful</i> nerd.
  </p>
  <p dir="auto">We also can use links :
    <a href="https://example.com" rel="nofollow">https://example.com</a>
  </p>
  <p dir="auto">But it's easier to read if you use a link description, as in this link towards
    <a href="https://klafyvel.me" rel="nofollow">my
      <b>website</b>
    </a> !
  </p>
</div>
<p dir="auto">Note that you can parse the entire Norg specification just like that:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Norg

s = open(Norg.NORG_SPEC_PATH, &quot;r&quot;) do f
    read(f, String)
end;
open(&quot;1.0-specification.html&quot;, &quot;w&quot;) do f
    write(f, string(norg(HTMLTarget(), s)))
end"><pre><span class="pl-k">using</span> Norg

s <span class="pl-k">=</span> <span class="pl-c1">open</span>(Norg<span class="pl-k">.</span>NORG_SPEC_PATH, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">read</span>(f, String)
<span class="pl-k">end</span>;
<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>1.0-specification.html<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">write</span>(f, <span class="pl-c1">string</span>(<span class="pl-c1">norg</span>(<span class="pl-c1">HTMLTarget</span>(), s)))
<span class="pl-k">end</span></pre></div>
<p dir="auto">Norg.jl is also capable of outputing Pandoc JSON, allowing you to feed your
Norg files to pandoc!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import JSON
open(&quot;1.0-specification.json&quot;, &quot;w&quot;) do f
  JSON.print(f, norg(JSONTarget(), s), 2)
end;"><pre><span class="pl-k">import</span> JSON
<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>1.0-specification.json<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(f, <span class="pl-c1">norg</span>(<span class="pl-c1">JSONTarget</span>(), s), <span class="pl-c1">2</span>)
<span class="pl-k">end</span>;</pre></div>
<p dir="auto">You can then invoke Pandoc as follow:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pandoc -f json -t markdown 1.0-specification.json -o 1.0-specification.md"><pre>pandoc -f json -t markdown 1.0-specification.json -o 1.0-specification.md</pre></div>
<h2 dir="auto"><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  - (x) Layer 1 support
  - (x) Layer 2 support
  - (x) Layer 3 Support
  - (-) Layer 4 support
  -- (x) Standard Ranged Tags
  -- ( ) Table cells
  -- (x) Free-form attached modifiers
  -- ( ) Intersection modifiers
  -- ( ) Attached modifier extensions
  -- (x) Inline mathematics and variable attached modifiers
  #waiting.for Layer 4 support
  - ( ) Layer 5 support
  -- ( ) Interpretation/Execution of macro tags
  -- ( ) Semantic understanding/execution of carryover tags
  -- ( ) Evaluation of `@code` blocs for the NIP language (if they are marked with `#eval`)
  #waiting.for Layer 4 support
  - ( ) FileIO.jl integration
  - ( ) Various code generation
  -- (-) HTML
  --- (x) Layer 1 support
  --- (x) Layer 2 support
  --- (x) Layer 3 support
  --- (-) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Markdown
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  -- (-) Pandoc JSON
  --- (x) Layer 1 support
  --- (x) Layer 2 support
  --- (x) Layer 3 support
  --- (-) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Julia Terminal display using julia's nice features such as `printstyled` and others.
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Norg
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  #waiting.for Layer 4 support
  - ( ) Consume pandoc JSON to create a Norg AST.
  #waiting.for Layer 4 support
  - ( ) Export CLI utility
  #contexts someday
  - ( ) Allow Franklin.jl to use Norg file format, because NeoVim+Julia = &lt;3
  #contexts someday
  - ( ) Documenter.jl plugin"><pre class="notranslate"><code>  - (x) Layer 1 support
  - (x) Layer 2 support
  - (x) Layer 3 Support
  - (-) Layer 4 support
  -- (x) Standard Ranged Tags
  -- ( ) Table cells
  -- (x) Free-form attached modifiers
  -- ( ) Intersection modifiers
  -- ( ) Attached modifier extensions
  -- (x) Inline mathematics and variable attached modifiers
  #waiting.for Layer 4 support
  - ( ) Layer 5 support
  -- ( ) Interpretation/Execution of macro tags
  -- ( ) Semantic understanding/execution of carryover tags
  -- ( ) Evaluation of `@code` blocs for the NIP language (if they are marked with `#eval`)
  #waiting.for Layer 4 support
  - ( ) FileIO.jl integration
  - ( ) Various code generation
  -- (-) HTML
  --- (x) Layer 1 support
  --- (x) Layer 2 support
  --- (x) Layer 3 support
  --- (-) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Markdown
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  -- (-) Pandoc JSON
  --- (x) Layer 1 support
  --- (x) Layer 2 support
  --- (x) Layer 3 support
  --- (-) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Julia Terminal display using julia's nice features such as `printstyled` and others.
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  -- ( ) Norg
  --- ( ) Layer 1 support
  --- ( ) Layer 2 support
  --- ( ) Layer 3 support
  --- ( ) Layer 4 support
  --- ( ) Layer 5 support
  #waiting.for Layer 4 support
  - ( ) Consume pandoc JSON to create a Norg AST.
  #waiting.for Layer 4 support
  - ( ) Export CLI utility
  #contexts someday
  - ( ) Allow Franklin.jl to use Norg file format, because NeoVim+Julia = &lt;3
  #contexts someday
  - ( ) Documenter.jl plugin
</code></pre></div>
<h2 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the hood</h2>
<p dir="auto">There are three main steps for turning Norg files into HTML (since it's the only supported target for now).</p>
<ol dir="auto">
<li>Tokenizing (identifying the different chunks of code)</li>
<li>Parsing (create an Abstract Syntax Tree, AST)</li>
<li>Code generation (turning the AST into HTML)</li>
</ol>
<p dir="auto">Earlier Norg.jl would rely on Julia's type system, but that made the code type-unstable. That's why I refactored it using a kind of enumeration to label each token and node of the AST. I did not invent anything here, it comes straight from <a href="https://github.com/JuliaLang/JuliaSyntax.jl/">JuliaSyntax.jl</a> super cool ideas.</p>
</article></div>