<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-superfab" class="anchor" aria-hidden="true" href="#superfab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SuperFaB</h1>
<p><em>SuperFaB</em> is a code for cosmological spherical Fourier-Bessel (SFB) analysis.
The details of the code are presented in <a href="https://arxiv.org/abs/2102.10079" rel="nofollow">2102.10079</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install <em>SuperFaB</em>, start the <a href="https://julialang.org/" rel="nofollow">Julia</a> REPL and type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add SphericalFourierBesselDecompositions
"><pre>]add SphericalFourierBesselDecompositions</pre></div>

<p>The package makes use of some python packages (e.g.
<a href="https://github.com/healpy/healpy">healpy</a>) that are only supported on MacOSX
and Linux. The above command <em>should</em> work if healpy is already installed, but
if problems occur when first using the package, see
<a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a>. Specifically, try
<code>ENV["PYTHON"]=""; ]build PyCall</code>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<p>Load the package and create a shortcut</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SphericalFourierBesselDecompositions
julia&gt; SFB = SphericalFourierBesselDecompositions
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SphericalFourierBesselDecompositions
julia<span class="pl-k">&gt;</span> SFB <span class="pl-k">=</span> SphericalFourierBesselDecompositions</pre></div>
<p>To perform a SFB decomposition, we create a modes object <code>amodes</code> that contains
the modes and basis functions, and for the pseudo-SFB power spectrum we create
<code>cmodes</code>,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; amodes = SFB.AnlmModes(kmax, rmin, rmax)
julia&gt; cmodes = SFB.ClnnModes(amodes, Δnmax=0)
"><pre>julia<span class="pl-k">&gt;</span> amodes <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">AnlmModes</span>(kmax, rmin, rmax)
julia<span class="pl-k">&gt;</span> cmodes <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">ClnnModes</span>(amodes, Δnmax<span class="pl-k">=</span><span class="pl-c1">0</span>)</pre></div>
<p>Here, <code>kmax</code> is the maximum k-mode to be calculated, <code>rmin</code> and <code>rmax</code> are the
radial boundaries. <code>Δnmax</code> specifies how many off-diagonals <code>k ≠ k'</code> to
include.</p>
<p>The window function is described by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; wmodes = SFB.ConfigurationSpaceModes(rmin, rmax, nr, amodes.nside)
julia&gt; win = SFB.SeparableArray(phi, mask, name1=:phi, name2=:mask)
julia&gt; win_rhat_ln = SFB.win_rhat_ln(win, wmodes, amodes)
julia&gt; Veff = SFB.integrate_window(win, wmodes)
"><pre>julia<span class="pl-k">&gt;</span> wmodes <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">ConfigurationSpaceModes</span>(rmin, rmax, nr, amodes<span class="pl-k">.</span>nside)
julia<span class="pl-k">&gt;</span> win <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">SeparableArray</span>(phi, mask, name1<span class="pl-k">=</span><span class="pl-c1">:phi</span>, name2<span class="pl-k">=</span><span class="pl-c1">:mask</span>)
julia<span class="pl-k">&gt;</span> win_rhat_ln <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">win_rhat_ln</span>(win, wmodes, amodes)
julia<span class="pl-k">&gt;</span> Veff <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">integrate_window</span>(win, wmodes)</pre></div>
<p>where <code>nr</code> is the number of radial bins, <code>phi</code> is an array of length <code>nr</code>, and
<code>mask</code> is a HEALPix mask. In general, <code>win</code> can be a 2D-array, where the first
dimension is radial, and the second dimension is the HEALPix mask at each
radius. Using a <code>SeparableArray</code> uses Julia's dispatch mechanism to call more
efficient specialized algorithms when the radial and angular window are
separable. <code>SFB.win_rhat_ln()</code> performs the radial transform of the window,
<code>SFB.integrate_window()</code> is a convenient way to calculate the effective volume
<code>Veff</code>.</p>
<p>The SFB decomposition is now performed with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; anlm = SFB.cat2amln(rθϕ, amodes, nbar, win_rhat_ln)
julia&gt; CNobs = SFB.amln2clnn(anlm, cmodes)
"><pre>julia<span class="pl-k">&gt;</span> anlm <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">cat2amln</span>(rθϕ, amodes, nbar, win_rhat_ln)
julia<span class="pl-k">&gt;</span> CNobs <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">amln2clnn</span>(anlm, cmodes)</pre></div>
<p>where <code>rθϕ</code> is a <code>3 × Ngalaxies</code> array with the <code>r</code>, <code>θ</code>, and <code>ϕ</code> coordinates
of each galaxy in the survey, and <code>nbar = Ngalaxies / Veff</code> is the average
number density. The second line calculates the pseudo-SFB power spectrum.</p>
<p>Shot noise and pixel window are calculated with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Nobs_th = SFB.win_lnn(win, wmodes, cmodes) ./ nbar
julia&gt; pixwin = SFB.pixwin(cmodes)
"><pre>julia<span class="pl-k">&gt;</span> Nobs_th <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">win_lnn</span>(win, wmodes, cmodes) <span class="pl-k">./</span> nbar
julia<span class="pl-k">&gt;</span> pixwin <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">pixwin</span>(cmodes)</pre></div>
<p>Window deconvolution is performed with bandpower binning:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; w̃mat, vmat = SFB.bandpower_binning_weights(cmodes; Δℓ=Δℓ, Δn=Δn)
julia&gt; bcmodes = SFB.ClnnBinnedModes(w̃mat, vmat, cmodes)
julia&gt; bcmix = SFB.power_win_mix(win, w̃mat, vmat, wmodes, bcmodes)
julia&gt; Cobs = @. (CNobs - Nobs_th) / pixwin ^ 2
julia&gt; C = bcmix \ (w̃mat * Cobs)
"><pre>julia<span class="pl-k">&gt;</span> w̃mat, vmat <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">bandpower_binning_weights</span>(cmodes; Δℓ<span class="pl-k">=</span>Δℓ, Δn<span class="pl-k">=</span>Δn)
julia<span class="pl-k">&gt;</span> bcmodes <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">ClnnBinnedModes</span>(w̃mat, vmat, cmodes)
julia<span class="pl-k">&gt;</span> bcmix <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">power_win_mix</span>(win, w̃mat, vmat, wmodes, bcmodes)
julia<span class="pl-k">&gt;</span> Cobs <span class="pl-k">=</span> <span class="pl-c1">@.</span> (CNobs <span class="pl-k">-</span> Nobs_th) <span class="pl-k">/</span> pixwin <span class="pl-k">^</span> <span class="pl-c1">2</span>
julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> bcmix <span class="pl-k">\</span> (w̃mat <span class="pl-k">*</span> Cobs)</pre></div>
<p>The first line calculates binning matrices <code>w̃</code> and <code>v</code> for bin sizes <code>Δℓ ~ 1/fsky</code> and <code>Δn = 1</code>, the second line describes modes similar to <code>cmodes</code> but
for bandpower binned modes. The coupling matrix is calculated in the third
line, the shot noise and pixel window are corrected in the fourth line, and the
last line does the binning and deconvolves the window function.</p>
<p>To compare with a theoretical prediction, we calculate the deconvolved binning
matrix <code>wmat</code>,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra
julia&gt; wmat = bcmix * SFB.power_win_mix(win, w̃mat, I, wmodes, bcmodes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra
julia<span class="pl-k">&gt;</span> wmat <span class="pl-k">=</span> bcmix <span class="pl-k">*</span> SFB<span class="pl-k">.</span><span class="pl-c1">power_win_mix</span>(win, w̃mat, I, wmodes, bcmodes)</pre></div>
<p>The modes of the pseudo-SFB power spectrum are given by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; lkk = SFB.getlkk(bcmodes)
"><pre>julia<span class="pl-k">&gt;</span> lkk <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">getlkk</span>(bcmodes)</pre></div>
<p>where for a given <code>i</code> the element <code>lkk[1,i]</code> is the ℓ-mode, <code>lkk[2,i]</code> is the
<code>n</code>-mode, <code>lkk[3,i]</code> is the <code>n'</code>-mode of the pseudo-SFB power spectrum element
<code>C[i]</code>.</p>
<p>An unoptimized way to calculate the covariance matrix is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; VW = SFB.calc_covariance_exact_chain(C_th, nbar, win, wmodes, cmodes)
julia&gt; V = inv(bcmix) * w̃mat * VW * w̃mat' * inv(bcmix)'
"><pre>julia<span class="pl-k">&gt;</span> VW <span class="pl-k">=</span> SFB<span class="pl-k">.</span><span class="pl-c1">calc_covariance_exact_chain</span>(C_th, nbar, win, wmodes, cmodes)
julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> <span class="pl-c1">inv</span>(bcmix) <span class="pl-k">*</span> w̃mat <span class="pl-k">*</span> VW <span class="pl-k">*</span> w̃mat<span class="pl-k">'</span> <span class="pl-k">*</span> <span class="pl-c1">inv</span>(bcmix)<span class="pl-k">'</span></pre></div>
</article></div>