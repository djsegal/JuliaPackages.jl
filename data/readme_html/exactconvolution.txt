<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exactconvolution" class="anchor" aria-hidden="true" href="#exactconvolution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExactConvolution</h1>
<p dir="auto"><a href="https://kessido.github.io/ExactConvolution.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://kessido.github.io/ExactConvolution.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/kessido/ExactConvolution.jl/actions"><img src="https://github.com/kessido/ExactConvolution.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kessido/ExactConvolution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1434043686649a7cddfb1a61e2ce8d05d0db36ee402e32bba4d62f9b3b6ed1e/68747470733a2f2f636f6465636f762e696f2f67682f6b65737369646f2f4578616374436f6e766f6c7574696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/kessido/ExactConvolution.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is intended for computing exact convolutions of integers vectors.</p>
<p dir="auto">It is essentialy a wrapper over GMP's BigInt multiplications, and as such it is very efficient. Convolutions of two Int64 arrays of length 10^5 can take about 60ms, or 120ms if negative values are presented.</p>
<p dir="auto">For integers that floating point computations might be sufficient exact for, please use <a href="https://github.com/JuliaDSP/DSP.jl">DSP.jl</a>, which for some cases can be 10x faster.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add ExactConvolution"><pre>pkg<span class="pl-k">&gt;</span> add ExactConvolution</pre></div>
<p dir="auto">Or, equivalently, via <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ExactConvolution&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ExactConvolution<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ExactConvolution

julia&gt; exact_conv(Int16, [1,2], [4,5,6])
4-element Vector{Int16}:
  4
 13
 16
 12

julia&gt; exact_conv(BigInt, [big&quot;2&quot;^80, big&quot;5&quot;^42], [4,5,6])
4-element Vector{BigInt}:
       4835703278458516698824704
  909500746402026311060912593380
 1136875630771077985168847065181
 1364242052659392356872558593750

julia&gt; exact_conv(Int128, [big&quot;2&quot;^80, big&quot;5&quot;^42], [4,5,6])
4-element Vector{Int128}:
       4835703278458516698824704
  909500746402026311060912593380
 1136875630771077985168847065181
 1364242052659392356872558593750

julia&gt; exact_conv(Int8, [1,-2], [4,5,6])
4-element Vector{Int8}:
   4
  -3
  -4
 -12

julia&gt; using BenchmarkTools

julia&gt; rand_array(bits) = rand(0:2^bits, 10^5);

julia&gt; arr1,arr2 = rand_array(20),rand_array(20);

julia&gt; @btime exact_conv(Int64, arr1, arr2);
  64.988 ms (600085 allocations: 27.98 MiB)

julia&gt; using DSP

julia&gt; @btime conv(arr1, arr2);
  5.548 ms (94 allocations: 10.69 MiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExactConvolution

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exact_conv</span>(Int16, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Int16}<span class="pl-k">:</span>
  <span class="pl-c1">4</span>
 <span class="pl-c1">13</span>
 <span class="pl-c1">16</span>
 <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exact_conv</span>(BigInt, [<span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>2<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">80</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>5<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">42</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{BigInt}<span class="pl-k">:</span>
       <span class="pl-c1">4835703278458516698824704</span>
  <span class="pl-c1">909500746402026311060912593380</span>
 <span class="pl-c1">1136875630771077985168847065181</span>
 <span class="pl-c1">1364242052659392356872558593750</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exact_conv</span>(Int128, [<span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>2<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">80</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>5<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">42</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Int128}<span class="pl-k">:</span>
       <span class="pl-c1">4835703278458516698824704</span>
  <span class="pl-c1">909500746402026311060912593380</span>
 <span class="pl-c1">1136875630771077985168847065181</span>
 <span class="pl-c1">1364242052659392356872558593750</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exact_conv</span>(Int8, [<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Int8}<span class="pl-k">:</span>
   <span class="pl-c1">4</span>
  <span class="pl-k">-</span><span class="pl-c1">3</span>
  <span class="pl-k">-</span><span class="pl-c1">4</span>
 <span class="pl-k">-</span><span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-en">rand_array</span>(bits) <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">^</span>bits, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> arr1,arr2 <span class="pl-k">=</span> <span class="pl-c1">rand_array</span>(<span class="pl-c1">20</span>),<span class="pl-c1">rand_array</span>(<span class="pl-c1">20</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">exact_conv</span>(Int64, arr1, arr2);
  <span class="pl-c1">64.988</span> ms (<span class="pl-c1">600085</span> allocations<span class="pl-k">:</span> <span class="pl-c1">27.98</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DSP

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">conv</span>(arr1, arr2);
  <span class="pl-c1">5.548</span> ms (<span class="pl-c1">94</span> allocations<span class="pl-k">:</span> <span class="pl-c1">10.69</span> MiB)</pre></div>
</article></div>