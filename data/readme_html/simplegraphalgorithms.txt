<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplegraphalgorithms" class="anchor" aria-hidden="true" href="#simplegraphalgorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleGraphAlgorithms</h1>
<p dir="auto">This module provides additional functions for the <code>SimpleGraphs</code>
module that rely on integer programming. In addition to requiring the
<code>SimpleGraphs</code> module, it also requires <code>JuMP</code> and <code>MathProgBase</code>
which, in turn, requires that some solvers be loaded. I've used <code>Cbc</code>.</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<h3 dir="auto"><a id="user-content-cliques-and-independent-sets" class="anchor" aria-hidden="true" href="#cliques-and-independent-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cliques and independent sets</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>max_indep_set(G)</code> returns a maximum size independent set of an
<code>UndirectedGraph</code>.</p>
</li>
<li>
<p dir="auto"><code>max_clique(G)</code> returns a maximum size clique of an <code>UndirectedGraph</code>.</p>
</li>
<li>
<p dir="auto"><code>max_matching(G)</code> returns a maximum size matching of an
<code>UndirectedGraph</code>.</p>
</li>
<li>
<p dir="auto"><code>fractional_matching(G)</code> returns a (maximum) fractional matching of the
graph <code>G</code>. This is presented a dictionary mapping edges of <code>G</code> to rational values
in <code>{0, 1/2, 1}</code>.</p>
</li>
<li>
<p dir="auto"><code>kfactor(G,k)</code> returns a <code>k</code>-factor of <code>G</code>. This is a set of edges
with the property that every vertex of <code>G</code> is incident with exactly <code>k</code>
edges of the set. An error is thrown if no such set exists.
(When <code>k==1</code> this returns a perfect matching.)</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-covering-and-domination" class="anchor" aria-hidden="true" href="#covering-and-domination"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Covering and domination</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>min_dom_set(G)</code> returns a smallest dominating set of an
<code>UndirectedGraph</code>. That is, a smallest set <code>S</code> with the property that
every vertex of <code>G</code> either is in <code>S</code> or is adjacent to a vertex of
<code>S</code>.</p>
</li>
<li>
<p dir="auto"><code>min_vertex_cover(G)</code> returns a smallest vertex cover of <code>G</code>. This
is a set of vertices <code>S</code> such that every edge of <code>G</code> has at least
one end point in <code>S</code>.</p>
</li>
<li>
<p dir="auto"><code>min_edge_cover(G)</code> returns a smallest edge cover of <code>G</code>. This is
a set of edges <code>F</code> such that every vertex of <code>G</code> is the end point
of at least one edge in <code>F</code>. <strong>Note</strong>: If <code>G</code> has an isolated
vertex, then no edge cover is possible and error is generated.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-isomorphism" class="anchor" aria-hidden="true" href="#isomorphism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Isomorphism</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>iso(G,H)</code> finds an isomorphism between graphs <code>G</code> and
<code>H</code>. Specifically, it finds a <code>Dict</code> mapping the vertices of <code>G</code> to
the vertices of <code>H</code> that gives the isomorphism. If the graphs are
not isomorphic, an error is raised.</p>
</li>
<li>
<p dir="auto"><code>iso2(G,H)</code> has the same functionality as <code>iso</code> but omits various
preliminary checks. This may be faster for highly symmetric graphs
(e.g., for vertex transitive graphs).</p>
</li>
<li>
<p dir="auto"><code>is_iso(G,H)</code> checks if the two graphs are isomorphic.</p>
</li>
<li>
<p dir="auto"><code>is_iso(G,H,d)</code> checks if the dictionary <code>d</code> is an isomorphism
from <code>G</code> to <code>H</code>.</p>
</li>
<li>
<p dir="auto"><code>iso_matrix(G,H)</code> finds an isomorphism between graphs <code>G</code> and
<code>H</code>. Specifically, it finds a permutation matrix <code>P</code> such that
<code>A*P==P*B</code> where <code>A</code> and <code>B</code> are the adjacency matrices of the
graphs <code>G</code> and <code>H</code>, respectively. If the graphs are not isomorphic,
an error is raised.</p>
</li>
<li>
<p dir="auto"><code>frac_iso(G,H)</code> finds a fractional isomorphism between the graphs. Specifically,
if <code>A</code> and <code>B</code> are the adjacency matrices of the two graphs, then produce a
doubly stochastic matrix <code>S</code> such that <code>A*S == S*B</code>, or throw an error if
no such matrix exists.</p>
</li>
<li>
<p dir="auto"><code>is_frac_iso(G,H)</code> returns <code>true</code> if the graphs are fractionally isomorphic
and <code>false</code> if not.</p>
</li>
<li>
<p dir="auto"><code>hom(G,H)</code> finds a graph homomorphism from <code>G</code> to <code>H</code>. This is a mapping <code>f</code>
(dictionary) with the property that if <code>{u,v}</code> is an edge of <code>G</code> then
<code>{f[u],f[v]}</code> is an edge of <code>H</code>. If no homomorphism exists an error is raised.</p>
</li>
<li>
<p dir="auto"><code>hom_check(G,H,d)</code> determines if <code>d</code> is a homomorphism from <code>G</code> to <code>H</code>.</p>
</li>
<li>
<p dir="auto"><code>info_map(G)</code> creates a mapping from the vertices of <code>G</code> to 128-bit
integers. If there is an automorphism between a pair of vertices,
then they will map to the same value, and the converse is <em>likely</em>
to be true.</p>
</li>
<li>
<p dir="auto"><code>uhash(G)</code> creates a hash value for the graph <code>G</code> with the property
that isomorphic graphs have the same hash value.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-coloring" class="anchor" aria-hidden="true" href="#coloring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Coloring</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>vertex_color(G,k)</code> returns a <code>k</code>-coloring of <code>G</code> (or throws an error if no
such coloring exists). If <code>k</code> is omitted, the number of colors is <code>χ(G)</code>
(chromatic number).</p>
</li>
<li>
<p dir="auto"><code>vertex_color(G,a,b)</code> returns an <code>a:b</code>-coloring of <code>G</code> (or throws an error
if no such coloring exists). An <code>a:b</code>-coloring is a mapping from the vertices of
<code>G</code> to <code>b</code>-element subsets of <code>{1,2,...,a}</code> such that adjacent vertices are
assigned disjoint sets.</p>
</li>
<li>
<p dir="auto"><code>chromatic_number(G)</code> returns the least <code>k</code> such that <code>G</code> is <code>k</code>-colorable.</p>
</li>
<li>
<p dir="auto"><code>chromatic_poly(G)</code> computes the chromatic polynomial of <code>G</code>. (See the
<code>help</code> message for more information.)</p>
</li>
<li>
<p dir="auto"><code>edge_color(G,k)</code> returns a <code>k</code>-edge-coloring of <code>G</code>.</p>
</li>
<li>
<p dir="auto"><code>edge_chromatic_number(G)</code> returns the edge chromatic number of <code>G</code>.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-connectivity" class="anchor" aria-hidden="true" href="#connectivity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connectivity</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>min_cut(G)</code> returns a minimum size (vertex) cut set. <code>min_cut(G,s,t)</code>
return a smallest set of vertices that separate <code>s</code> and <code>t</code>.</p>
</li>
<li>
<p dir="auto"><code>connectivity(G)</code> or <code>connectivity(G,s,t)</code> returns the size of such a cut set.</p>
</li>
<li>
<p dir="auto"><code>min_edge_cut(G)</code> returns a minimum size edge cut set.
<code>min_edge_cut(G,s,t)</code> returns a minimum set of edges that separate vertices
<code>s</code> and <code>t</code>.</p>
</li>
<li>
<p dir="auto"><code>edge_connectivity(G)</code> or <code>edge_connectivity(G,s,t)</code> returns the size of
such an edge cut set.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-maximum-average-degree" class="anchor" aria-hidden="true" href="#maximum-average-degree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Maximum average degree</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>ad(G)</code> returns the average degree of <code>G</code>.</p>
</li>
<li>
<p dir="auto"><code>mad(G)</code> returns the maximum average degree of <code>G</code>.</p>
</li>
<li>
<p dir="auto"><code>mad_core(G)</code> returns a subgraph <code>H</code> of <code>G</code> for which <code>ad(H)==mad(G)</code>.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using SimpleGraphs; using SimpleGraphAlgorithms; using ChooseOptimizer; using ShowSet

julia&gt; set_solver_verbose(false)
[ Info: Setting verbose option for Cbc to false

julia&gt; G = Paley(17)
Paley (n=17, m=68)

julia&gt; max_indep_set(G)
{1,4,7}

julia&gt; max_clique(G)
{3,4,5}

julia&gt; min_dom_set(G)
{3,6,9}

julia&gt; max_matching(G)
{(1, 16),(2, 4),(3, 12),(5, 9),(6, 15),(7, 8),(10, 11),(13, 14)}

julia&gt; vertex_color(G,6)
Dict{Int64,Int64} with 17 entries:
  2  =&gt; 3
  16 =&gt; 1
  11 =&gt; 4
  0  =&gt; 4
  7  =&gt; 6
  9  =&gt; 2
  10 =&gt; 1
  8  =&gt; 3
  6  =&gt; 4
  4  =&gt; 6
  3  =&gt; 5
  5  =&gt; 3
  13 =&gt; 1
  14 =&gt; 5
  15 =&gt; 2
  12 =&gt; 2
  1  =&gt; 6"><pre class="notranslate"><code>julia&gt; using SimpleGraphs; using SimpleGraphAlgorithms; using ChooseOptimizer; using ShowSet

julia&gt; set_solver_verbose(false)
[ Info: Setting verbose option for Cbc to false

julia&gt; G = Paley(17)
Paley (n=17, m=68)

julia&gt; max_indep_set(G)
{1,4,7}

julia&gt; max_clique(G)
{3,4,5}

julia&gt; min_dom_set(G)
{3,6,9}

julia&gt; max_matching(G)
{(1, 16),(2, 4),(3, 12),(5, 9),(6, 15),(7, 8),(10, 11),(13, 14)}

julia&gt; vertex_color(G,6)
Dict{Int64,Int64} with 17 entries:
  2  =&gt; 3
  16 =&gt; 1
  11 =&gt; 4
  0  =&gt; 4
  7  =&gt; 6
  9  =&gt; 2
  10 =&gt; 1
  8  =&gt; 3
  6  =&gt; 4
  4  =&gt; 6
  3  =&gt; 5
  5  =&gt; 3
  13 =&gt; 1
  14 =&gt; 5
  15 =&gt; 2
  12 =&gt; 2
  1  =&gt; 6
</code></pre></div>
<p dir="auto">Petersen's graph can be described as either the 5,2-Kneser graph or as
the complement of the line graph of K(5).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G = Kneser(5,2);

julia&gt; H = complement(line_graph(Complete(5)));

julia&gt; iso(G,H)
Dict{Set{Int64},Tuple{Int64,Int64}} with 10 entries:
  {1,4} =&gt; (1, 5)
  {2,4} =&gt; (1, 4)
  {2,5} =&gt; (3, 4)
  {1,3} =&gt; (2, 5)
  {3,4} =&gt; (1, 2)
  {1,2} =&gt; (4, 5)
  {3,5} =&gt; (2, 3)
  {4,5} =&gt; (1, 3)
  {2,3} =&gt; (2, 4)
  {1,5} =&gt; (3, 5)

julia&gt; iso_matrix(G,H)
10×10 Array{Int64,2}:
 0  0  0  0  0  0  0  1  0  0
 0  0  0  0  0  0  0  0  1  0
 0  0  0  1  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  0  0
 0  0  0  0  1  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  0  0  0
 0  0  1  0  0  0  0  0  0  0"><pre class="notranslate"><code>julia&gt; G = Kneser(5,2);

julia&gt; H = complement(line_graph(Complete(5)));

julia&gt; iso(G,H)
Dict{Set{Int64},Tuple{Int64,Int64}} with 10 entries:
  {1,4} =&gt; (1, 5)
  {2,4} =&gt; (1, 4)
  {2,5} =&gt; (3, 4)
  {1,3} =&gt; (2, 5)
  {3,4} =&gt; (1, 2)
  {1,2} =&gt; (4, 5)
  {3,5} =&gt; (2, 3)
  {4,5} =&gt; (1, 3)
  {2,3} =&gt; (2, 4)
  {1,5} =&gt; (3, 5)

julia&gt; iso_matrix(G,H)
10×10 Array{Int64,2}:
 0  0  0  0  0  0  0  1  0  0
 0  0  0  0  0  0  0  0  1  0
 0  0  0  1  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  0  0
 0  0  0  0  1  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  0  0  0
 0  0  1  0  0  0  0  0  0  0
</code></pre></div>
<h2 dir="auto"><a id="user-content-setting-solver-and-its-options" class="anchor" aria-hidden="true" href="#setting-solver-and-its-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting Solver and its Options</h2>
<p dir="auto">By default, the <code>Cbc</code> solver is used for integer programming
and the optimizer does no output.</p>
<p dir="auto">The function <code>use_Cbc()</code> sets the solver to be the <code>Cbc</code> solver.
Called as <code>use_Cbc(true)</code> causes the solver to be verbose in
its working.</p>
<p dir="auto">The <code>Gurobi</code> solver may used instead. Since this module is not
dependent on <code>Gurobi</code>, do this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Gurobi
julia&gt; use_Gurobi()"><pre class="notranslate"><code>julia&gt; using Gurobi
julia&gt; use_Gurobi()
</code></pre></div>
<p dir="auto">Alternatively, <code>use_Gurobi(true)</code> for extensive output as the
solver does its work.</p>
<p dir="auto">To switch back to the <code>Cbc</code> solver, do <code>use_Cbc()</code>.</p>
<p dir="auto">These functions rely on my <code>ChooseOptimizer</code> module.</p>
<h2 dir="auto"><a id="user-content-using-simplegraphalgorithms-with-graphs" class="anchor" aria-hidden="true" href="#using-simplegraphalgorithms-with-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>SimpleGraphAlgorithms</code> with <code>Graphs</code></h2>
<p dir="auto"><code>SimpleGraphAlgorithms</code> is built to work with <code>UndirectedGraph</code> objects as defined in <code>SimpleGraphs</code>.
To apply these functions to graphs from Julia's <code>Graphs</code> module, you can use <code>SimpleGraphConverter</code> like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Graphs, SimpleGraphAlgorithms, SimpleGraphs, SimpleGraphConverter

julia&gt; use_Cbc()
[ Info: Solver Cbc verbose is set to false

julia&gt; g = circular_ladder_graph(9)
{18, 27} undirected simple Int64 graph

julia&gt; chromatic_number(UG(g))
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
3"><pre class="notranslate"><code>julia&gt; using Graphs, SimpleGraphAlgorithms, SimpleGraphs, SimpleGraphConverter

julia&gt; use_Cbc()
[ Info: Solver Cbc verbose is set to false

julia&gt; g = circular_ladder_graph(9)
{18, 27} undirected simple Int64 graph

julia&gt; chromatic_number(UG(g))
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  4 2021 

command line - Cbc_C_Interface -LogLevel 0 -solve -quit (default strategy 1)
3
</code></pre></div>
</article></div>