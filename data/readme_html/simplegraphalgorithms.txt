<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplegraphalgorithms" class="anchor" aria-hidden="true" href="#simplegraphalgorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleGraphAlgorithms</h1>
<p>This module provides additional functions for the <code>SimpleGraphs</code>
module that rely on integer programming. In addition to requiring the
<code>SimpleGraphs</code> module, it also requires <code>JuMP</code> and <code>MathProgBase</code>
which, in turn, requires that some solvers be loaded. I've used <code>Cbc</code>.</p>
<p><strong>New</strong>: Now requires the <code>Polynomials</code> module.</p>
<p><strong>Note</strong>: Because these functions rely on solving integer linear
programs, they can be rather slow for large graphs.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<h4><a id="user-content-cliques-and-independent-sets" class="anchor" aria-hidden="true" href="#cliques-and-independent-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cliques and independent sets</h4>
<ul>
<li>
<p><code>max_indep_set(G)</code> returns a maximum size independent set of a
<code>SimpleGraph</code>.</p>
</li>
<li>
<p><code>max_clique(G)</code> returns a maximum size clique of a <code>SimpleGraph</code>.</p>
</li>
<li>
<p><code>max_matching(G)</code> returns a maximum size matching of a
<code>SimpleGraph</code>.</p>
</li>
<li>
<p><code>kfactor(G,k)</code> returns a <code>k</code>-factor of <code>G</code>. This is a set of edges
with the property that every vertex of <code>G</code> is incident with exactly <code>k</code>
edges of the set. An error is thrown if no such set exists.
(When <code>k==1</code> this returns a perfect matching.)</p>
</li>
</ul>
<h4><a id="user-content-covering-and-domination" class="anchor" aria-hidden="true" href="#covering-and-domination"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Covering and domination</h4>
<ul>
<li>
<p><code>min_dom_set(G)</code> returns a smallest dominating set of a
<code>SimpleGraph</code>. That is, a smallest set <code>S</code> with the property that
every vertex of <code>G</code> either is in <code>S</code> or is adjacent to a vertex of
<code>S</code>.</p>
</li>
<li>
<p><code>min_vertex_cover(G)</code> returns a smallest vertex cover of <code>G</code>. This
is a set of vertices <code>S</code> such that every edge of <code>G</code> has at least
one end point in <code>S</code>.</p>
</li>
<li>
<p><code>min_edge_cover(G)</code> returns a smallest edge cover of <code>G</code>. This is
a set of edges <code>F</code> such that every vertex of <code>G</code> is the end point
of at least one edge in <code>F</code>. <strong>Note</strong>: If <code>G</code> has an isolated
vertex, then no edge cover is possible and error is generated.</p>
</li>
</ul>
<h4><a id="user-content-isomorphism" class="anchor" aria-hidden="true" href="#isomorphism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Isomorphism</h4>
<ul>
<li>
<p><code>iso(G,H)</code> finds an isomorphism between graphs <code>G</code> and
<code>H</code>. Specifically, it finds a <code>Dict</code> mapping the vertices of <code>G</code> to
the vertices of <code>H</code> that gives the isomorphism. If the graphs are
not isomorphic, an error is raised.</p>
</li>
<li>
<p><code>is_iso(G,H)</code> checks if the two graphs are isomorphic.</p>
</li>
<li>
<p><code>is_iso(G,H,d)</code> checks if the dictionary <code>d</code> is an isomorphism
from <code>G</code> to <code>H</code>.</p>
</li>
<li>
<p><code>iso_matrix(G,H)</code> finds an isomorphism between graphs <code>G</code> and
<code>H</code>. Specifically, it finds a permutation matrix <code>P</code> such that
<code>A*P==P*B</code> where <code>A</code> and <code>B</code> are the adjacency matrices of the
graphs <code>G</code> and <code>H</code>, respectively. If the graphs are not isomorphic,
an error is raised.</p>
</li>
<li>
<p><code>info_map(G)</code> creates a mapping from the vertices of <code>G</code> to 128-bit
integers. If there is an automorphism between a pair of vertices,
then they will map to the same value, and the converse is <em>likely</em>
to be true. This is used by <code>iso2</code> as part of the preprocessing
phase.</p>
</li>
<li>
<p><code>uhash(G)</code> creates a hash value for the graph <code>G</code> with the property
that isomorphic graphs have the same hash value.</p>
</li>
</ul>
<h4><a id="user-content-coloring" class="anchor" aria-hidden="true" href="#coloring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Coloring</h4>
<ul>
<li>
<p><code>color(G,k)</code> returns a <code>k</code>-coloring of <code>G</code> (or throws an error if no
such coloring exists).</p>
</li>
<li>
<p><code>chromatic_number(G)</code> returns the least <code>k</code> such that <code>G</code> is <code>k</code>-colorable.</p>
</li>
<li>
<p><code>chrome_poly(G)</code> computes the chromatic polynomial of <code>G</code>. (See the
<code>help</code> message for more information.)</p>
</li>
<li>
<p><code>edge_color(G,k)</code> returns a <code>k</code>-edge-coloring of <code>G</code>.</p>
</li>
<li>
<p><code>edge_chromatic_number(G)</code> returns the edge chromatic number of <code>G</code>.</p>
</li>
</ul>
<h4><a id="user-content-connectivity" class="anchor" aria-hidden="true" href="#connectivity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Connectivity</h4>
<ul>
<li>
<p><code>min_cut(G)</code> returns a minimum size (vertex) cut set. <code>min_cut(G,s,t)</code>
return a smallest set of vertices that separate <code>s</code> and <code>t</code>.</p>
</li>
<li>
<p><code>connectivity(G)</code> or <code>connectivity(G,s,t)</code> returns the size of such a cut set.</p>
</li>
<li>
<p><code>min_edge_cut(G)</code> returns a minimum size edge cut set.
<code>min_edge_cut(G,s,t)</code> returns a minimum set of edges that separate vertices
<code>s</code> and <code>t</code>.</p>
</li>
<li>
<p><code>edge_connectivity(G)</code> or <code>edge_connectivity(G,s,t)</code> returns the size of
such an edge cut set.</p>
</li>
</ul>
<h4><a id="user-content-maximum-average-degree" class="anchor" aria-hidden="true" href="#maximum-average-degree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Maximum average degree</h4>
<ul>
<li>
<p><code>ad(G)</code> returns the average degree of <code>G</code>.</p>
</li>
<li>
<p><code>mad(G)</code> returns the maximum average degree of <code>G</code>.</p>
</li>
<li>
<p><code>mad_core(G)</code> returns a subgraph <code>H</code> of <code>G</code> for which <code>ad(H)==mad(G)</code>.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleGraphs; <span class="pl-k">using</span> SimpleGraphAlgorithms

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Paley</span>(<span class="pl-c1">17</span>)
<span class="pl-c1">Paley</span>(<span class="pl-c1">17</span>) graph (n<span class="pl-k">=</span><span class="pl-c1">17</span>, m<span class="pl-k">=</span><span class="pl-c1">68</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_indep_set</span>(G)
<span class="pl-c1">Set</span>([<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_clique</span>(G)
<span class="pl-c1">Set</span>([<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">min_dom_set</span>(G)
<span class="pl-c1">Set</span>([<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">3</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_matching</span>(G)
<span class="pl-c1">Set</span>([(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>),(<span class="pl-c1">11</span>,<span class="pl-c1">13</span>),(<span class="pl-c1">15</span>,<span class="pl-c1">16</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">10</span>,<span class="pl-c1">14</span>),(<span class="pl-c1">6</span>,<span class="pl-c1">7</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>),(<span class="pl-c1">8</span>,<span class="pl-c1">9</span>)])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">color</span>(G,<span class="pl-c1">6</span>)
Dict{Int64,Int64} with <span class="pl-c1">17</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">16</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">11</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">0</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
  <span class="pl-c1">9</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">10</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">8</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">6</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">4</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">13</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">14</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">15</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">12</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">1</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span></pre></div>
<p>Petersen's graph can be described as either the 5,2-Kneser graph or as
the complement of the line graph of K(5).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Kneser</span>(<span class="pl-c1">5</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">Kneser</span>(<span class="pl-c1">10</span>,<span class="pl-c1">2</span>) graph (n<span class="pl-k">=</span><span class="pl-c1">10</span>, m<span class="pl-k">=</span><span class="pl-c1">15</span>)

julia<span class="pl-k">&gt;</span> H <span class="pl-k">=</span> <span class="pl-c1">complement</span>(<span class="pl-c1">line_graph</span>(<span class="pl-c1">Complete</span>(<span class="pl-c1">5</span>)))
SimpleGraph{Tuple{Int64,Int64}} (n<span class="pl-k">=</span><span class="pl-c1">10</span>, m<span class="pl-k">=</span><span class="pl-c1">15</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iso</span>(G,H)
Dict{Set{Int64},Tuple{Int64,Int64}} with <span class="pl-c1">10</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">1</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">5</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">5</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">3</span>,<span class="pl-c1">5</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">2</span>,<span class="pl-c1">5</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">3</span>,<span class="pl-c1">1</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">3</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">2</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
  <span class="pl-c1">Set</span>([<span class="pl-c1">5</span>,<span class="pl-c1">1</span>]) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>,<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iso_matrix</span>(G,H)
<span class="pl-c1">10</span>x10 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<h2><a id="user-content-setting-solver-and-its-options" class="anchor" aria-hidden="true" href="#setting-solver-and-its-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting Solver and its Options</h2>
<p>By default, the <code>Cbc</code> solver is used for integer programming
and the optimizer does no output.</p>
<p>The function <code>use_Cbc()</code> sets the solver to be the <code>Cbc</code> solver.
Called as <code>use_Cbc(true)</code> causes the solver to be verbose in
its working.</p>
<p>The <code>Gurobi</code> solver may used instead. Since this module is not
dependent on <code>Gurobi</code>, do this:</p>
<pre><code>julia&gt; using Gurobi
julia&gt; use_Gurobi()
</code></pre>
<p>Alternatively, <code>use_Gurobi(true)</code> for extensive output as the
solver does its work.</p>
<p>To switch back to the <code>Cbc</code> solver, do <code>use_Cbc()</code>.</p>
<p>These functions rely on my <code>ChooseOptimizer</code> module.</p>
</article></div>