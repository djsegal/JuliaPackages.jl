<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-typeclassjl" class="anchor" aria-hidden="true" href="#typeclassjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Typeclass.jl</h1>
<p><a href="https://travis-ci.org/jasonmorton/Typeclass.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37bc4a7275587c74b33a954eb94bdafb8ab83d7d/68747470733a2f2f7472617669732d63692e6f72672f6a61736f6e6d6f72746f6e2f54797065636c6173732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jasonmorton/Typeclass.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Multiparameter typeclasses for Julia. Allows circular definitions, interfaces, and so on.</p>
<p>To use it, define a class by giving some methods, which can either have an output type or default implementation.  Here is an example with only output types:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@class</span> Monoid T <span class="pl-k">begin</span>
       <span class="pl-c1">munit</span>(<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-c1">mappend</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p>The constructor macro @class takes the name of the typeclass, followed by any number of type parameters separated by spaces, then a begin-end block containing the methods (which use the type parameters).</p>
<p>Now declare some type, or ordered list of types, to be an instance of the class, supplying any needed methods.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@instance</span> Monoid Array{Int} <span class="pl-k">begin</span>
       <span class="pl-en">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>)<span class="pl-k">=</span>Int[]
       <span class="pl-en">mappend</span>(x<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>,y<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>)<span class="pl-k">=</span>[x;y]
<span class="pl-k">end</span>
    
<span class="pl-c1">@test</span> <span class="pl-c1">munit</span>(Int[<span class="pl-c1">3</span>])<span class="pl-k">==</span>Int[]
<span class="pl-c1">@test</span> <span class="pl-c1">mappend</span>([<span class="pl-c1">3</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])<span class="pl-k">==</span>[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>]</pre></div>
<p>Circular definitions are fine.  They are resolved by Typeclass.jl once you give the instance declaration, and you only need to supply enough information to disambiguate (e.g. defining eq or noteq below is enough).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@class</span> Eq T <span class="pl-k">begin</span>
    <span class="pl-en">eq</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">noteq</span>(x,y)
    <span class="pl-en">noteq</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">eq</span>(x,y)
    <span class="pl-k">==</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-c1">eq</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> ignored unless use @instance! form</span>
<span class="pl-k">end</span></pre></div>
<p>Note that</p>
<pre><code>@instance
</code></pre>
<p>does NOT override any methods that are already able to operate on your type, while</p>
<pre><code>@instance!
</code></pre>
<p>does register a new method.</p>
<p>More complex example: a monoidal category</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@class</span> MonoidalCategory Ob Mor <span class="pl-k">begin</span>
    <span class="pl-c1">dom</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">cod</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">id</span>(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span>
    <span class="pl-c1">compose</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span> <span class="pl-c"><span class="pl-c">#</span>f*g</span>
    <span class="pl-c1">otimes</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span>
    <span class="pl-c1">otimes</span>(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>,B<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-en">munit</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">munit</span>(<span class="pl-c1">dom</span>(f))
    <span class="pl-c"><span class="pl-c">#</span> syntax, using unicode</span>
    <span class="pl-k">∘</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">compose</span>(f,g)
    ⊗(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">otimes</span>(f,g)
    ⊗(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>,B<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">=</span><span class="pl-c1">otimes</span>(A,B)
<span class="pl-k">end</span></pre></div>
<p>Now we can tell Julia how to treat matrices as a monoidal category.</p>
<div class="highlight highlight-source-julia"><pre>typealias Mat Matrix{Float64}
<span class="pl-c1">@instance</span> MonoidalCategory Int Mat <span class="pl-k">begin</span>
    <span class="pl-en">dom</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">size</span>(f)[<span class="pl-c1">2</span>]
    <span class="pl-en">cod</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">size</span>(f)[<span class="pl-c1">1</span>]
    <span class="pl-en">id</span>(A<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span><span class="pl-c1">eye</span>(A)
    <span class="pl-en">compose</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>,g<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span>f<span class="pl-k">*</span>g
    <span class="pl-en">otimes</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>,g<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">kron</span>(f,g)
    <span class="pl-en">otimes</span>(A<span class="pl-k">::</span><span class="pl-c1">Int</span>,B<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span>A<span class="pl-k">*</span>B
    <span class="pl-en">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-c1">@test</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)⊗<span class="pl-c1">id</span>(<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">id</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)<span class="pl-k">∘</span><span class="pl-c1">id</span>(<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">dom</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))<span class="pl-k">==</span><span class="pl-c1">3</span></pre></div>
</article></div>