<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-typeclassjl" class="anchor" aria-hidden="true" href="#typeclassjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Typeclass.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/jasonmorton/Typeclass.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a7dc68760e8e47210a6a0cf7bf876079a4296b5732da8b72e871f23e06ec410c/68747470733a2f2f7472617669732d63692e6f72672f6a61736f6e6d6f72746f6e2f54797065636c6173732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jasonmorton/Typeclass.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Multiparameter typeclasses for Julia. Allows circular definitions, interfaces, and so on.</p>
<p dir="auto">To use it, define a class by giving some methods, which can either have an output type or default implementation.  Here is an example with only output types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@class Monoid T begin
       munit(::T)::T
       mappend(x::T,y::T)::T
end"><pre><span class="pl-c1">@class</span> Monoid T <span class="pl-k">begin</span>
       <span class="pl-c1">munit</span>(<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-c1">mappend</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The constructor macro @class takes the name of the typeclass, followed by any number of type parameters separated by spaces, then a begin-end block containing the methods (which use the type parameters).</p>
<p dir="auto">Now declare some type, or ordered list of types, to be an instance of the class, supplying any needed methods.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@instance Monoid Array{Int} begin
       munit(::Array{Int})=Int[]
       mappend(x::Array{Int},y::Array{Int})=[x;y]
end
    
@test munit(Int[3])==Int[]
@test mappend([3,4],[4,5])==[3,4,4,5]"><pre><span class="pl-c1">@instance</span> Monoid Array{Int} <span class="pl-k">begin</span>
       <span class="pl-en">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>)<span class="pl-k">=</span>Int[]
       <span class="pl-en">mappend</span>(x<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>,y<span class="pl-k">::</span><span class="pl-c1">Array{Int}</span>)<span class="pl-k">=</span>[x;y]
<span class="pl-k">end</span>
    
<span class="pl-c1">@test</span> <span class="pl-c1">munit</span>(Int[<span class="pl-c1">3</span>])<span class="pl-k">==</span>Int[]
<span class="pl-c1">@test</span> <span class="pl-c1">mappend</span>([<span class="pl-c1">3</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])<span class="pl-k">==</span>[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>]</pre></div>
<p dir="auto">Circular definitions are fine.  They are resolved by Typeclass.jl once you give the instance declaration, and you only need to supply enough information to disambiguate (e.g. defining eq or noteq below is enough).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@class Eq T begin
    eq(x::T,y::T)=!noteq(x,y)
    noteq(x::T,y::T)=!eq(x,y)
    ==(x::T,y::T)=eq(x,y) # ignored unless use @instance! form
end"><pre><span class="pl-c1">@class</span> Eq T <span class="pl-k">begin</span>
    <span class="pl-en">eq</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">noteq</span>(x,y)
    <span class="pl-en">noteq</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">eq</span>(x,y)
    <span class="pl-k">==</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>,y<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">=</span><span class="pl-c1">eq</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> ignored unless use @instance! form</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Note that</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@instance"><pre class="notranslate"><code>@instance
</code></pre></div>
<p dir="auto">does NOT override any methods that are already able to operate on your type, while</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@instance!"><pre class="notranslate"><code>@instance!
</code></pre></div>
<p dir="auto">does register a new method.</p>
<p dir="auto">More complex example: a monoidal category</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@class MonoidalCategory Ob Mor begin
    dom(f::Mor)::Ob
    cod(f::Mor)::Ob
    id(A::Ob)::Mor
    compose(f::Mor,g::Mor)::Mor #f*g
    otimes(f::Mor,g::Mor)::Mor
    otimes(A::Ob,B::Ob)::Ob
    munit(::Ob)::Ob
    munit(f::Mor)=munit(dom(f))
    # syntax, using unicode
    ∘(f::Mor,g::Mor)=compose(f,g)
    ⊗(f::Mor,g::Mor)=otimes(f,g)
    ⊗(A::Ob,B::Ob)=otimes(A,B)
end"><pre><span class="pl-c1">@class</span> MonoidalCategory Ob Mor <span class="pl-k">begin</span>
    <span class="pl-c1">dom</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">cod</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">id</span>(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span>
    <span class="pl-c1">compose</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span> <span class="pl-c"><span class="pl-c">#</span>f*g</span>
    <span class="pl-c1">otimes</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">::</span><span class="pl-c1">Mor</span>
    <span class="pl-c1">otimes</span>(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>,B<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-c1">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">::</span><span class="pl-c1">Ob</span>
    <span class="pl-en">munit</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">munit</span>(<span class="pl-c1">dom</span>(f))
    <span class="pl-c"><span class="pl-c">#</span> syntax, using unicode</span>
    <span class="pl-k">∘</span>(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">compose</span>(f,g)
    ⊗(f<span class="pl-k">::</span><span class="pl-c1">Mor</span>,g<span class="pl-k">::</span><span class="pl-c1">Mor</span>)<span class="pl-k">=</span><span class="pl-c1">otimes</span>(f,g)
    ⊗(A<span class="pl-k">::</span><span class="pl-c1">Ob</span>,B<span class="pl-k">::</span><span class="pl-c1">Ob</span>)<span class="pl-k">=</span><span class="pl-c1">otimes</span>(A,B)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now we can tell Julia how to treat matrices as a monoidal category.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typealias Mat Matrix{Float64}
@instance MonoidalCategory Int Mat begin
    dom(f::Mat)=size(f)[2]
    cod(f::Mat)=size(f)[1]
    id(A::Int)=eye(A)
    compose(f::Mat,g::Mat)=f*g
    otimes(f::Mat,g::Mat)=kron(f,g)
    otimes(A::Int,B::Int)=A*B
    munit(::Int)=1
end

@test id(2)⊗id(2) == id(4)
@test id(2)∘id(2) == id(2)
@test dom(rand(2,3))==3"><pre>typealias Mat Matrix{Float64}
<span class="pl-c1">@instance</span> MonoidalCategory Int Mat <span class="pl-k">begin</span>
    <span class="pl-en">dom</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">size</span>(f)[<span class="pl-c1">2</span>]
    <span class="pl-en">cod</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">size</span>(f)[<span class="pl-c1">1</span>]
    <span class="pl-en">id</span>(A<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span><span class="pl-c1">eye</span>(A)
    <span class="pl-en">compose</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>,g<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span>f<span class="pl-k">*</span>g
    <span class="pl-en">otimes</span>(f<span class="pl-k">::</span><span class="pl-c1">Mat</span>,g<span class="pl-k">::</span><span class="pl-c1">Mat</span>)<span class="pl-k">=</span><span class="pl-c1">kron</span>(f,g)
    <span class="pl-en">otimes</span>(A<span class="pl-k">::</span><span class="pl-c1">Int</span>,B<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span>A<span class="pl-k">*</span>B
    <span class="pl-en">munit</span>(<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">=</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-c1">@test</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)⊗<span class="pl-c1">id</span>(<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">id</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)<span class="pl-k">∘</span><span class="pl-c1">id</span>(<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">id</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">dom</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))<span class="pl-k">==</span><span class="pl-c1">3</span></pre></div>
</article></div>