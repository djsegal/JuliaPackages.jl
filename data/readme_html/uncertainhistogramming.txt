<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-uncertainhistogramming" class="anchor" aria-hidden="true" href="#uncertainhistogramming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UncertainHistogramming</h1>
<p dir="auto"><a href="https://meese-wj.github.io/UncertainHistogramming.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://meese-wj.github.io/UncertainHistogramming.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://github.com/meese-wj/UncertainHistogramming.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/meese-wj/UncertainHistogramming.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">A lightweight Julia package to plot a density function for a given set of values with known uncertainties.</p>
<p dir="auto">An example application of the main <code>export</code>ed <code>abstract</code> <code>struct</code>, <code>ContinuousHistogram</code>, is to visualize a "histogram" of experimental values, when each <em>value</em> has a measured experimental <em>uncertainty</em>. This is to be contrast with normal <code>Histogram</code>ming that assumes that each <em>value</em> is exact, meaning its <em>uncertainty</em> is <code>zero()</code>.</p>
<p dir="auto">This package provides similar functionality to what is expected from <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation?oldformat=true" rel="nofollow"><em>kernel density estimation</em> (KDE)</a>, but here the data errors/uncertainties which act as the kernel bandwidths are all, in principle, different.</p>
<p dir="auto">An example <code>GaussianHistogram &lt;: ContinuousHistogram</code> can be <code>construct</code>ed from the following Julia code</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots # One must Pkg.add this separately
using UncertainHistogramming
Plots.gr()  # Use GR to reproduce the plot exactly 

# Create a list of (value, error)-tuples
values_errs = [(-3.5, 0.5), (-1.5, 0.75),
               (0, 0.25), (1.5, 0.75), 
               (3.5, 0.5)]

# Initialize the GaussianHistogram and 
# push! the data into it
hist = GaussianHistogram()
push!(hist, values_errs)

# Create an argument array to build the
# ContinuousHistogram from 
x = LinRange(-6, 6, 3000)

# Plot using a User Recipe 
# (thanks to RecipesBase.jl)
plot(x, hist)"><pre><span class="pl-k">using</span> Plots <span class="pl-c"><span class="pl-c">#</span> One must Pkg.add this separately</span>
<span class="pl-k">using</span> UncertainHistogramming
Plots<span class="pl-k">.</span><span class="pl-c1">gr</span>()  <span class="pl-c"><span class="pl-c">#</span> Use GR to reproduce the plot exactly </span>

<span class="pl-c"><span class="pl-c">#</span> Create a list of (value, error)-tuples</span>
values_errs <span class="pl-k">=</span> [(<span class="pl-k">-</span><span class="pl-c1">3.5</span>, <span class="pl-c1">0.5</span>), (<span class="pl-k">-</span><span class="pl-c1">1.5</span>, <span class="pl-c1">0.75</span>),
               (<span class="pl-c1">0</span>, <span class="pl-c1">0.25</span>), (<span class="pl-c1">1.5</span>, <span class="pl-c1">0.75</span>), 
               (<span class="pl-c1">3.5</span>, <span class="pl-c1">0.5</span>)]

<span class="pl-c"><span class="pl-c">#</span> Initialize the GaussianHistogram and </span>
<span class="pl-c"><span class="pl-c">#</span> push! the data into it</span>
hist <span class="pl-k">=</span> <span class="pl-c1">GaussianHistogram</span>()
<span class="pl-c1">push!</span>(hist, values_errs)

<span class="pl-c"><span class="pl-c">#</span> Create an argument array to build the</span>
<span class="pl-c"><span class="pl-c">#</span> ContinuousHistogram from </span>
x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">6</span>, <span class="pl-c1">6</span>, <span class="pl-c1">3000</span>)

<span class="pl-c"><span class="pl-c">#</span> Plot using a User Recipe </span>
<span class="pl-c"><span class="pl-c">#</span> (thanks to RecipesBase.jl)</span>
<span class="pl-c1">plot</span>(x, hist)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/example_gaussian_histogram.png"><img src="docs/src/assets/example_gaussian_histogram.png" alt="Example GaussianHistogram" style="max-width: 100%;"></a></p>
</article></div>