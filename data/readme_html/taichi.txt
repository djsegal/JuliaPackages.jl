<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-taichijl" class="anchor" aria-hidden="true" href="#taichijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Taichi.jl</h1>
<p dir="auto"><a href="https://lucifer1004.github.io/Taichi.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://lucifer1004.github.io/Taichi.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/lucifer1004/Taichi.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/lucifer1004/Taichi.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lucifer1004/Taichi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/119b8db88443279ad54dba0fb5113cf2a08555a5033cb957163e9d1c0886aaa4/68747470733a2f2f636f6465636f762e696f2f67682f6c756369666572313030342f5461696368692e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/lucifer1004/Taichi.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/lucifer1004/Taichi.jl">Taichi.jl</a> is a thin wrapper around <a href="https://www.taichi-lang.org/" rel="nofollow">Taichi</a>. It is built upon two packages:</p>
<ul dir="auto">
<li><a href="https://github.com/cjdoris/PythonCall.jl">PythonCall.jl</a> which makes Julia &amp; Python easily interoperable.</li>
<li><a href="https://github.com/lucifer1004/Jl2Py.jl">Jl2Py.jl</a> which transpiles Julia code to Python.</li>
</ul>
<p dir="auto">The general workflow is as follows:</p>
<div class="highlight highlight-text-adblock notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="||==========||                 ||==========||                 ||==========||
||  Julia   ||    Taichi.jl    ||  Python  ||      Taichi     ||  Taichi  ||
||          ||                 ||          || (via PythonCall)||          ||
||  kernel  ||   ===========&gt;  ||  kernel  ||   ===========&gt;  ||  kernel  ||
||==========||                 ||==========||                 ||==========||"><pre><span class="pl-k">||</span>==========||                 ||==========||                 ||==========|<span class="pl-k">|</span>
<span class="pl-k">||</span>  Julia   ||    Taichi.jl    ||  Python  ||      Taichi     ||  Taichi  |<span class="pl-k">|</span>
<span class="pl-k">||</span>          ||                 ||          || (via PythonCall)||          |<span class="pl-k">|</span>
<span class="pl-k">||</span>  kernel  ||   ===========&gt;  ||  kernel  ||   ===========&gt;  ||  kernel  |<span class="pl-k">|</span>
<span class="pl-k">||</span>==========||                 ||==========||                 ||==========|<span class="pl-k">|</span></pre></div>
<p dir="auto">There is a language-agnostic Taichi IR called <code>Chi</code> under development. After <code>Chi</code> becomes stable, we will switch to directly transpilation from Julia AST to <code>Chi</code> IR.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto"><code>Taichi.jl</code> is very simple to use. The Python module <code>taichi</code> is exported as a constant <code>ti</code>. Then you can call most functions exactly the same way as in Python.</p>
<p dir="auto">For wrapping kernel functions, two macros are exported, namely, <code>@ti_func</code> and <code>@ti_kernel</code>. The typical usage is to put the macro in front of an anonymous function, then assign it to a variable.</p>
<p dir="auto">Following is a Julian adaptation of the "Julia set" example. Take caution that Python boolean values cannot be directly used in Julia, and we need to use helper functions like <code>pytruth</code> and <code>pyeq</code>. More examples can be seen in <a href="https://github.com/lucifer1004/Taichi.jl/tree/main/examples">examples</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Taichi

let
    ti.init(; arch=ti.gpu)
    n = 640
    pixels = ti.Vector.field(3; dtype=pytype(1.0), shape=(n * 2, n))

    paint = @ti_kernel (t::Float64) -&gt; for (i, j) in pixels
        c = ti.Vector([-0.8, ti.cos(t) * 0.2])
        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2
        rgb = ti.Vector([0, 1, 1])
        iterations = 0
        while z.norm() &lt; 20 &amp;&amp; iterations &lt; 50
            z = ti.Vector([z[0]^2 - z[1]^2, z[0] * z[1] * 2]) + c
            iterations += 1
            pixels[i, j] = (1 - iterations * 0.02) * rgb
        end
    end

    gui = ti.GUI(&quot;Julia Set&quot;; res=(n * 2, n))
    i = 0
    flag = 0
    while pytruth(gui.running)
        if flag == 0
            i -= 1
            if i * 0.02 &lt;= 0.2
                flag = 1
            end
        else
            i += 1
            if i * 0.02 &gt; (Ï€ * 1.2)
                flag = 0
            end
        end

        paint(i * 0.02)
        gui.set_image(pixels)
        gui.show()
    end
end"><pre><span class="pl-k">using</span> Taichi

<span class="pl-k">let</span>
    ti<span class="pl-k">.</span><span class="pl-c1">init</span>(; arch<span class="pl-k">=</span>ti<span class="pl-k">.</span>gpu)
    n <span class="pl-k">=</span> <span class="pl-c1">640</span>
    pixels <span class="pl-k">=</span> ti<span class="pl-k">.</span>Vector<span class="pl-k">.</span><span class="pl-c1">field</span>(<span class="pl-c1">3</span>; dtype<span class="pl-k">=</span><span class="pl-c1">pytype</span>(<span class="pl-c1">1.0</span>), shape<span class="pl-k">=</span>(n <span class="pl-k">*</span> <span class="pl-c1">2</span>, n))

    paint <span class="pl-k">=</span> <span class="pl-c1">@ti_kernel</span> (t<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">-&gt;</span> <span class="pl-k">for</span> (i, j) <span class="pl-k">in</span> pixels
        c <span class="pl-k">=</span> ti<span class="pl-k">.</span><span class="pl-c1">Vector</span>([<span class="pl-k">-</span><span class="pl-c1">0.8</span>, ti<span class="pl-k">.</span><span class="pl-c1">cos</span>(t) <span class="pl-k">*</span> <span class="pl-c1">0.2</span>])
        z <span class="pl-k">=</span> ti<span class="pl-k">.</span><span class="pl-c1">Vector</span>([i <span class="pl-k">/</span> n <span class="pl-k">-</span> <span class="pl-c1">1</span>, j <span class="pl-k">/</span> n <span class="pl-k">-</span> <span class="pl-c1">0.5</span>]) <span class="pl-k">*</span> <span class="pl-c1">2</span>
        rgb <span class="pl-k">=</span> ti<span class="pl-k">.</span><span class="pl-c1">Vector</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>])
        iterations <span class="pl-k">=</span> <span class="pl-c1">0</span>
        <span class="pl-k">while</span> z<span class="pl-k">.</span><span class="pl-c1">norm</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">20</span> <span class="pl-k">&amp;&amp;</span> iterations <span class="pl-k">&lt;</span> <span class="pl-c1">50</span>
            z <span class="pl-k">=</span> ti<span class="pl-k">.</span><span class="pl-c1">Vector</span>([z[<span class="pl-c1">0</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> z[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>, z[<span class="pl-c1">0</span>] <span class="pl-k">*</span> z[<span class="pl-c1">1</span>] <span class="pl-k">*</span> <span class="pl-c1">2</span>]) <span class="pl-k">+</span> c
            iterations <span class="pl-k">+=</span> <span class="pl-c1">1</span>
            pixels[i, j] <span class="pl-k">=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> iterations <span class="pl-k">*</span> <span class="pl-c1">0.02</span>) <span class="pl-k">*</span> rgb
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    gui <span class="pl-k">=</span> ti<span class="pl-k">.</span><span class="pl-c1">GUI</span>(<span class="pl-s"><span class="pl-pds">"</span>Julia Set<span class="pl-pds">"</span></span>; res<span class="pl-k">=</span>(n <span class="pl-k">*</span> <span class="pl-c1">2</span>, n))
    i <span class="pl-k">=</span> <span class="pl-c1">0</span>
    flag <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">while</span> <span class="pl-c1">pytruth</span>(gui<span class="pl-k">.</span>running)
        <span class="pl-k">if</span> flag <span class="pl-k">==</span> <span class="pl-c1">0</span>
            i <span class="pl-k">-=</span> <span class="pl-c1">1</span>
            <span class="pl-k">if</span> i <span class="pl-k">*</span> <span class="pl-c1">0.02</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">0.2</span>
                flag <span class="pl-k">=</span> <span class="pl-c1">1</span>
            <span class="pl-k">end</span>
        <span class="pl-k">else</span>
            i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
            <span class="pl-k">if</span> i <span class="pl-k">*</span> <span class="pl-c1">0.02</span> <span class="pl-k">&gt;</span> (Ï€ <span class="pl-k">*</span> <span class="pl-c1">1.2</span>)
                flag <span class="pl-k">=</span> <span class="pl-c1">0</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>

        <span class="pl-c1">paint</span>(i <span class="pl-k">*</span> <span class="pl-c1">0.02</span>)
        gui<span class="pl-k">.</span><span class="pl-c1">set_image</span>(pixels)
        gui<span class="pl-k">.</span><span class="pl-c1">show</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Screenshot of the example above:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./gif/juliaset.gif"><img src="./gif/juliaset.gif" alt="Julia Set" data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto">You can run it from the repository root:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --project=. examples/juliaset.jl"><pre>julia --project=. examples/juliaset.jl</pre></div>
<h2 dir="auto"><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More Examples</h2>
<h3 dir="auto"><a id="user-content-game-of-life" class="anchor" aria-hidden="true" href="#game-of-life"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Game of Life</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="gif/gameoflife.gif"><img src="gif/gameoflife.gif" alt="Game of Life GIF" data-animated-image="" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --project=. examples/gameoflife.jl"><pre>julia --project=. examples/gameoflife.jl</pre></div>
<h3 dir="auto"><a id="user-content-fem99" class="anchor" aria-hidden="true" href="#fem99"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FEM99</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="gif/fem99.gif"><img src="gif/fem99.gif" alt="FEM99 GIF" data-animated-image="" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --project=. examples/fem99.jl"><pre>julia --project=. examples/fem99.jl</pre></div>
</article></div>