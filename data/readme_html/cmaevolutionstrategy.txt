<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cmaevolutionstrategyjl" class="anchor" aria-hidden="true" href="#cmaevolutionstrategyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CMAEvolutionStrategy.jl</h1>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667"><img src="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-stable-green.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/jbrea/CMAEvolutionStrategy.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/738cef0e2f5a45bada1c42ce2bf458d236837767b020ea20fb156dbb16637b46/68747470733a2f2f7472617669732d63692e636f6d2f6a627265612f434d4145766f6c7574696f6e53747261746567792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jbrea/CMAEvolutionStrategy.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/jbrea/CMAEvolutionStrategy.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d1f9cb1fe65533af70496550399bd0811053f5c691b6eba0a3ebf1e61b6773bc/687474703a2f2f636f6465636f762e696f2f6769746875622f6a627265612f434d4145766f6c7574696f6e53747261746567792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jbrea/CMAEvolutionStrategy.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>

<p dir="auto">The CMA Evolution Strategy is a stochastic method for derivative-free
optimization of potentially non-linear, non-convex or noisy functions over
continuous domains (<a href="https://arxiv.org/abs/1604.00772" rel="nofollow">Hansen 2016</a>).
A brief discussion of its performance in practice can be found on
<a href="https://en.wikipedia.org/wiki/CMA-ES#Performance_in_practice" rel="nofollow">wikipedia</a>.</p>
<p dir="auto">The default settings and implementation details follow closely
<a href="https://arxiv.org/abs/1604.00772" rel="nofollow">Hansen 2016</a> and
<a href="https://github.com/CMA-ES/pycma">pycma</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function rosenbrock(x)
           n = length(x)
           sum(100 * (x[2i-1]^2 - x[2i])^2 + (x[2i-1] - 1)^2 for i in 1:div(n, 2))
       end

julia&gt; using CMAEvolutionStrategy

julia&gt; result = minimize(rosenbrock, zeros(6), 1.)
(4_w,9)-aCMA-ES (mu_w=2.8,w_1=49%) in dimension 6 (seed=17743412058849885570, 2020-05-12T16:22:27.211)
  iter   fevals   function value      sigma   time[s]
     1        9   6.06282462e+02   8.36e-01     0.008
     2       18   6.00709117e+02   8.42e-01     0.009
     3       27   2.40853796e+02   7.84e-01     0.009
   100      900   8.25748973e-01   1.44e-01     0.021
   200     1800   2.21358637e-05   1.12e-02     0.040
   266     2394   5.58767672e-12   2.76e-05     0.051
Optimizer{Parameters,BasicLogger,Stop}
(4_w,9)-aCMA-ES (mu_w=2.8,w_1=49%) in dimension 6 (seed=17743412058849885570, 2020-05-12T16:22:27.254)
  termination reason: ftol = 1.0e-11 (2020-05-12T16:22:27.255)
  lowest observed function value: 1.076905008476142e-12 at [0.9999990479016964, 0.9999981609497738, 0.9999990365312236, 0.9999981369588251, 0.9999994689450983, 0.9999988356249463]
  population mean: [1.000000255106133, 1.0000004709845969, 1.0000006232562606, 1.0000012290059055, 0.9999998790530266, 0.9999997338544545]

julia&gt; xbest(result)
6-element Array{Float64,1}:
 0.9999990479016964
 0.9999981609497738
 0.9999990365312236
 0.9999981369588251
 0.9999994689450983
 0.9999988356249463

julia&gt; fbest(result)
1.076905008476142e-12

julia&gt; population_mean(result)
6-element Array{Float64,1}:
 1.000000255106133
 1.0000004709845969
 1.0000006232562606
 1.0000012290059055
 0.9999998790530266
 0.9999997338544545

help?&gt; minimize
search: minimize

  minimize(f, x0, s0;
           lower = nothing,
           upper = nothing,
           constraints = _constraints(lower, upper),
           noise_handling = nothing,
           popsize = 4 + floor(Int, 3*log(length(x0))),
           callback = (object, inputs, function_values, ranks) -&gt; nothing,
           parallel_evaluation = false,
           multi_threading = false,
           verbosity = 1,
           seed = rand(UInt),
           logger = BasicLogger(x0, verbosity = verbosity, callback = callback),
           maxtime = nothing,
           maxiter = nothing,
           maxfevals = nothing,
           stagnation = 100 + 100 * length(x0)^1.5/popsize,
           ftarget = nothing,
           xtol = nothing,
           ftol = 1e-11)

  Minimize function f starting around x0 with initial covariance s0 * I under box constraints
  lower .&lt;= x0 .&lt;= upper, where x0, lower and upper are vectors of the same length or
  nothing.

  The result is an Optimizer object from which e.g. xbest, fbest or population_mean can be
  extracted.

  If parallel_evaluation = true, the objective function f receives matrices of n rows (n =
  length(x0)) and popsize columns and should return a vector of length popsize. To use
  multi-threaded parallel evaluation of the objective function, set multi_threading = true
  and start julia with multiple threads (c.f. julia manual for the multi-threading
  setup)."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">rosenbrock</span>(x)
           n <span class="pl-k">=</span> <span class="pl-c1">length</span>(x)
           <span class="pl-c1">sum</span>(<span class="pl-c1">100</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>i])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (x[<span class="pl-c1">2</span>i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">div</span>(n, <span class="pl-c1">2</span>))
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CMAEvolutionStrategy

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">minimize</span>(rosenbrock, <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>), <span class="pl-c1">1.</span>)
(<span class="pl-c1">4_</span>w,<span class="pl-c1">9</span>)<span class="pl-k">-</span>aCMA<span class="pl-k">-</span>ES (mu_w<span class="pl-k">=</span><span class="pl-c1">2.8</span>,w_1<span class="pl-k">=</span><span class="pl-c1">49</span><span class="pl-k">%</span>) <span class="pl-k">in</span> dimension <span class="pl-c1">6</span> (seed<span class="pl-k">=</span><span class="pl-c1">17743412058849885570</span>, <span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">12</span>T16<span class="pl-k">:</span><span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">27.211</span>)
  iter   fevals   <span class="pl-k">function</span> value      sigma   time[s]
     <span class="pl-c1">1</span>        <span class="pl-c1">9</span>   <span class="pl-c1">6.06282462e+02</span>   <span class="pl-c1">8.36e-01</span>     <span class="pl-c1">0.008</span>
     <span class="pl-c1">2</span>       <span class="pl-c1">18</span>   <span class="pl-c1">6.00709117e+02</span>   <span class="pl-c1">8.42e-01</span>     <span class="pl-c1">0.009</span>
     <span class="pl-c1">3</span>       <span class="pl-c1">27</span>   <span class="pl-c1">2.40853796e+02</span>   <span class="pl-c1">7.84e-01</span>     <span class="pl-c1">0.009</span>
   <span class="pl-c1">100</span>      <span class="pl-c1">900</span>   <span class="pl-c1">8.25748973e-01</span>   <span class="pl-c1">1.44e-01</span>     <span class="pl-c1">0.021</span>
   <span class="pl-c1">200</span>     <span class="pl-c1">1800</span>   <span class="pl-c1">2.21358637e-05</span>   <span class="pl-c1">1.12e-02</span>     <span class="pl-c1">0.040</span>
   <span class="pl-c1">266</span>     <span class="pl-c1">2394</span>   <span class="pl-c1">5.58767672e-12</span>   <span class="pl-c1">2.76e-05</span>     <span class="pl-c1">0.051</span>
Optimizer{Parameters,BasicLogger,Stop}
(<span class="pl-c1">4_</span>w,<span class="pl-c1">9</span>)<span class="pl-k">-</span>aCMA<span class="pl-k">-</span>ES (mu_w<span class="pl-k">=</span><span class="pl-c1">2.8</span>,w_1<span class="pl-k">=</span><span class="pl-c1">49</span><span class="pl-k">%</span>) <span class="pl-k">in</span> dimension <span class="pl-c1">6</span> (seed<span class="pl-k">=</span><span class="pl-c1">17743412058849885570</span>, <span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">12</span>T16<span class="pl-k">:</span><span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">27.254</span>)
  termination reason<span class="pl-k">:</span> ftol <span class="pl-k">=</span> <span class="pl-c1">1.0e-11</span> (<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">12</span>T16<span class="pl-k">:</span><span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">27.255</span>)
  lowest observed <span class="pl-k">function</span> value<span class="pl-k">:</span> <span class="pl-c1">1.076905008476142e-12</span> at [<span class="pl-c1">0.9999990479016964</span>, <span class="pl-c1">0.9999981609497738</span>, <span class="pl-c1">0.9999990365312236</span>, <span class="pl-c1">0.9999981369588251</span>, <span class="pl-c1">0.9999994689450983</span>, <span class="pl-c1">0.9999988356249463</span>]
  population mean<span class="pl-k">:</span> [<span class="pl-c1">1.000000255106133</span>, <span class="pl-c1">1.0000004709845969</span>, <span class="pl-c1">1.0000006232562606</span>, <span class="pl-c1">1.0000012290059055</span>, <span class="pl-c1">0.9999998790530266</span>, <span class="pl-c1">0.9999997338544545</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xbest</span>(result)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.9999990479016964</span>
 <span class="pl-c1">0.9999981609497738</span>
 <span class="pl-c1">0.9999990365312236</span>
 <span class="pl-c1">0.9999981369588251</span>
 <span class="pl-c1">0.9999994689450983</span>
 <span class="pl-c1">0.9999988356249463</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fbest</span>(result)
<span class="pl-c1">1.076905008476142e-12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">population_mean</span>(result)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.000000255106133</span>
 <span class="pl-c1">1.0000004709845969</span>
 <span class="pl-c1">1.0000006232562606</span>
 <span class="pl-c1">1.0000012290059055</span>
 <span class="pl-c1">0.9999998790530266</span>
 <span class="pl-c1">0.9999997338544545</span>

help?<span class="pl-k">&gt;</span> minimize
search<span class="pl-k">:</span> minimize

  <span class="pl-c1">minimize</span>(f, x0, s0;
           lower <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           upper <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           constraints <span class="pl-k">=</span> <span class="pl-c1">_constraints</span>(lower, upper),
           noise_handling <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           popsize <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">floor</span>(Int, <span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">log</span>(<span class="pl-c1">length</span>(x0))),
           callback <span class="pl-k">=</span> (object, inputs, function_values, ranks) <span class="pl-k">-&gt;</span> <span class="pl-c1">nothing</span>,
           parallel_evaluation <span class="pl-k">=</span> <span class="pl-c1">false</span>,
           multi_threading <span class="pl-k">=</span> <span class="pl-c1">false</span>,
           verbosity <span class="pl-k">=</span> <span class="pl-c1">1</span>,
           seed <span class="pl-k">=</span> <span class="pl-c1">rand</span>(UInt),
           logger <span class="pl-k">=</span> <span class="pl-c1">BasicLogger</span>(x0, verbosity <span class="pl-k">=</span> verbosity, callback <span class="pl-k">=</span> callback),
           maxtime <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           maxiter <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           maxfevals <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           stagnation <span class="pl-k">=</span> <span class="pl-c1">100</span> <span class="pl-k">+</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> <span class="pl-c1">length</span>(x0)<span class="pl-k">^</span><span class="pl-c1">1.5</span><span class="pl-k">/</span>popsize,
           ftarget <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           xtol <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
           ftol <span class="pl-k">=</span> <span class="pl-c1">1e-11</span>)

  Minimize <span class="pl-k">function</span> f starting around x0 with initial covariance s0 <span class="pl-k">*</span> I under box constraints
  lower <span class="pl-k">.&lt;=</span> x0 <span class="pl-k">.&lt;=</span> upper, <span class="pl-k">where</span> x0, lower and upper are vectors of the same length or
  <span class="pl-c1">nothing</span>.

  The result is an Optimizer object from which e<span class="pl-k">.</span>g. xbest, fbest or population_mean can be
  extracted.

  If parallel_evaluation <span class="pl-k">=</span> <span class="pl-c1">true</span>, the objective <span class="pl-k">function</span> f receives matrices of n rows (n <span class="pl-k">=</span>
  <span class="pl-c1">length</span>(x0)) and popsize columns and should <span class="pl-k">return</span> a vector of length popsize. To use
  multi<span class="pl-k">-</span>threaded parallel evaluation of the objective <span class="pl-k">function</span>, set multi_threading <span class="pl-k">=</span> <span class="pl-c1">true</span>
  and start julia with multiple threads (c<span class="pl-k">.</span>f. julia manual <span class="pl-k">for</span> the multi<span class="pl-k">-</span>threading
  setup)<span class="pl-k">.</span></pre></div>
<h2 dir="auto"><a id="user-content-noise-handling" class="anchor" aria-hidden="true" href="#noise-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Noise Handling</h2>
<p dir="auto">The standard settings may work well for noisy objective functions. To avoid
premature convergence due to too fast decrease of sigma, there is the option
<code>noise_handling = CMAEvolutionStrategy.NoiseHandling(ασ = 1.1, callback = s -&gt; s &gt; 0)</code>.
Choose <code>ασ</code> such that sigma decreases slowly (and does not diverge). The callback
function can be used to change the objective function, e.g. increase the
measurement duration, if this leads to smaller noise. The variable <code>s</code> indicates
whether CMA-ES can handle the current level of noise: <code>s &gt; 0</code> indicates that the
noise level is too high. Whenever the callback returns <code>true</code>, sigma gets multiplied by
<code>ασ</code>, which is the case when <code>s &gt; 0</code>, with the default callback.</p>
<p dir="auto">For details on noise handling see <a href="http://dx.doi.org/10.1109/TEVC.2008.924423" rel="nofollow">Hansen 2009</a>.</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">Running
<a href="https://github.com/jonathanBieler/BlackBoxOptimizationBenchmarking.jl">BlackBoxOptimizationBenchmarking</a>
in <a href="test/bbob.jl">24 dimensions</a>, highlights the advantage of CMA-ES early in optimization.
All methods were chained into NelderMead after 90% of the run length (c.f. <a href="https://github.com/jonathanBieler/BlackBoxOptimizationBenchmarking.jl">BlackBoxOptimizationBenchmarking</a>)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="bbob24.png"><img src="bbob24.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">CMAES = this package,
BBO = <a href="https://github.com/robertfeldt/BlackBoxOptim.jl">BlackBoxOptim</a>,
NES = <a href="https://github.com/francescoalemanno/NaturalES.jl">NaturalES</a>,
Evo = <a href="https://github.com/wildart/Evolutionary.jl">Evolutionary</a>,
PyCMA = <a href="https://github.com/CMA-ES/pycma">pycma</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="bbob24rt.png"><img src="bbob24rt.png" alt="" style="max-width: 100%;"></a></p>
</article></div>