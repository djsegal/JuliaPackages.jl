<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-signalalignment" class="anchor" aria-hidden="true" href="#signalalignment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SignalAlignment</h1>
<p dir="auto"><a href="https://github.com/baggepinnen/SignalAlignment.jl/actions"><img src="https://github.com/baggepinnen/SignalAlignment.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/SignalAlignment.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa79db1414c8dd36fc9ac936d682cc8b090ccef66aef11898f41440173fbe43e/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f5369676e616c416c69676e6d656e742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/baggepinnen/SignalAlignment.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package takes a vector of signals and tries to align them.</p>
<p dir="auto">One use case for this is when two different instruments are used to record something that is going on, but they may record at different sample rates, have no synchronization, or have different time offsets. Before analyzing such experiments, it may be helpful to align the signals to each other.</p>
<h1 dir="auto"><a id="user-content-function-reference" class="anchor" aria-hidden="true" href="#function-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function reference</h1>
<ul dir="auto">
<li><code>align_signals(signals, method; master, by, output)</code>: Main entrypoint for signal alignment</li>
<li><code>syncplot</code>: takes the same arguments as <code>align_signals</code> (except <code>output</code>) and plots the aligned signals</li>
</ul>
<h2 dir="auto"><a id="user-content-method-reference" class="anchor" aria-hidden="true" href="#method-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Method reference</h2>
<p dir="auto">The method indicates how alignment is computed. The method is specified by passing a <code>method</code> argument to <code>align_signals</code>. The following methods are available:</p>
<ul dir="auto">
<li><code>Delay(; delay_method)</code>: Align signals by shifting them with respect to each other
<ul dir="auto">
<li><code>delay_method = DTWDelay()</code>: Align signals by computing the optimal delay using Dynamic-Time Warping. This can be computationally expensive for very long signals, but is more robust than <code>XcorrDelay</code>.</li>
<li><code>delay_method = XcorrDelay()</code>: Align signals by computing the optimal delay using cross-correlation</li>
</ul>
</li>
<li><code>Warp(; warp_method)</code>: Align signals by warping them with respect to each other
<ul dir="auto">
<li><code>warp_method = DTW(; radius, ...)</code>: Align signals by computing the optimal warp using Dynamic-Time Warping. See <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl">DynamicAxisWarping.jl</a> for options to <code>DTW</code>.</li>
<li><code>warp_method = GDTW()</code>: Align signals by computing the optimal warp using Generalized Dynamic-Time Warping. See <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl">DynamicAxisWarping.jl</a> for options to <code>GDTW</code> or the example below.</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-master-reference" class="anchor" aria-hidden="true" href="#master-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Master reference</h2>
<p dir="auto">The master indicates which signal is used as the reference signal to which the other signals are aligned. The master is specified by passing a <code>master</code> argument to <code>align_signals</code>. The following masters are available:</p>
<ul dir="auto">
<li><code>Index</code>: Align all signals to a particular signal. The default is <code>Index(1)</code> which aligns all signals to the first signal.</li>
<li><code>Longest</code>: Align all signals to the longest signal</li>
<li><code>Shortest</code>: Align all signals to the shortest signal</li>
<li><code>Centroid</code>: Align all signals to the computed centroid (generalized median) of all signals. The metric used to compute the centroid is specified by, e.g., <code>Centroid(SqEuclidean())</code>.</li>
<li><code>Barycenter</code>: Align all signals to the computed barycenter (generalized mean) of all signals. The metric used to compute the barycenter is specified by, e.g., <code>Barycenter(SqEuclidean())</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-output-reference" class="anchor" aria-hidden="true" href="#output-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output reference</h2>
<p dir="auto">The output indicates what is returned by <code>align_signals</code>. The output is specified by passing an <code>output</code> argument to <code>align_signals</code>. The following output options are available:</p>
<ul dir="auto">
<li><code>Indices()</code>: Return the indices that align the signals.</li>
<li><code>Signals()</code>: Return the aligned signals.</li>
</ul>
<p dir="auto">The map from indices to aligned signals is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="aligned_signals = [signals[i][inds[i]] for i in eachindex(signals)]"><pre>aligned_signals <span class="pl-k">=</span> [signals[i][inds[i]] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(signals)]</pre></div>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<h2 dir="auto"><a id="user-content-align-shifted-signals-to-one-particular-signal" class="anchor" aria-hidden="true" href="#align-shifted-signals-to-one-particular-signal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Align shifted signals to one particular signal</h2>
<p dir="auto">We can indicate that we want to align a vector of signals to a particular signal by passing the index of the signal we want to align to as the <code>master</code> argument to <code>align_signals</code>. The default master if none is provided is <code>Index(1)</code> like we use below.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SignalAlignment
s0 = sin.((0:0.05:2pi)) # A noisy signal
s1 = s0[1:end-10]       # A second signal, misaligned with the first
s2 = s0[20:end]         # A third signal
signals = [s0, s1, s2]  # A vector of signals we want to align
signals = [s .+ 0.02 .* randn(length(s)) for s in signals] # Add some noise to the signals

master = Index(1)       # Indicate which signal is the master to which the others are aligned
method = Delay(delay_method=DTWDelay()) # Indicate that we want to align the signals by shifting them, and the delay between them is computed using DTW
output = Indices() # Indicate that we want the aligning indices as output
inds = align_signals(signals, method; master, output)"><pre><span class="pl-k">using</span> SignalAlignment
s0 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.((<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">2pi</span>)) <span class="pl-c"><span class="pl-c">#</span> A noisy signal</span>
s1 <span class="pl-k">=</span> s0[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">10</span>]       <span class="pl-c"><span class="pl-c">#</span> A second signal, misaligned with the first</span>
s2 <span class="pl-k">=</span> s0[<span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">end</span>]         <span class="pl-c"><span class="pl-c">#</span> A third signal</span>
signals <span class="pl-k">=</span> [s0, s1, s2]  <span class="pl-c"><span class="pl-c">#</span> A vector of signals we want to align</span>
signals <span class="pl-k">=</span> [s <span class="pl-k">.+</span> <span class="pl-c1">0.02</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(s)) <span class="pl-k">for</span> s <span class="pl-k">in</span> signals] <span class="pl-c"><span class="pl-c">#</span> Add some noise to the signals</span>

master <span class="pl-k">=</span> <span class="pl-c1">Index</span>(<span class="pl-c1">1</span>)       <span class="pl-c"><span class="pl-c">#</span> Indicate which signal is the master to which the others are aligned</span>
method <span class="pl-k">=</span> <span class="pl-c1">Delay</span>(delay_method<span class="pl-k">=</span><span class="pl-c1">DTWDelay</span>()) <span class="pl-c"><span class="pl-c">#</span> Indicate that we want to align the signals by shifting them, and the delay between them is computed using DTW</span>
output <span class="pl-k">=</span> <span class="pl-c1">Indices</span>() <span class="pl-c"><span class="pl-c">#</span> Indicate that we want the aligning indices as output</span>
inds <span class="pl-k">=</span> <span class="pl-c1">align_signals</span>(signals, method; master, output)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3-element Vector{UnitRange{Int64}}:
 2:1884
 2:1884
 1:1883"><pre class="notranslate"><code>3-element Vector{UnitRange{Int64}}:
 2:1884
 2:1884
 1:1883
</code></pre></div>
<p dir="auto">The indices returned by <code>align_signals</code> can be used to align the signals to the master signal.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="aligned_signals = [signals[i][inds[i]] for i in eachindex(signals)]
plot(signals, label=[&quot;s0&quot; &quot;s1&quot; &quot;s2&quot;], l=(:dash, ))
plot!(aligned_signals, label=[&quot;s0 aligned&quot; &quot;s1 aligned&quot; &quot;s2 aligned&quot;], c=(1:3)', size=(600, 400))"><pre>aligned_signals <span class="pl-k">=</span> [signals[i][inds[i]] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(signals)]
<span class="pl-c1">plot</span>(signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2<span class="pl-pds">"</span></span>], l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, ))
<span class="pl-c1">plot!</span>(aligned_signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2 aligned<span class="pl-pds">"</span></span>], c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)<span class="pl-k">'</span>, size<span class="pl-k">=</span>(<span class="pl-c1">600</span>, <span class="pl-c1">400</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/215254940-f8ced414-cbf3-4818-b31b-19199485de52.png"><img src="https://user-images.githubusercontent.com/3797491/215254940-f8ced414-cbf3-4818-b31b-19199485de52.png" alt="image" style="max-width: 100%;"></a></p>
<p dir="auto">The example above used Dynamic-Time Warping (DTW) to find the optimal delay with which to shift the signals to the master. Rather than DTW, we can compute the delay using cross-correlation as well</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="method = Delay(delay_method = XcorrDelay())"><pre>method <span class="pl-k">=</span> <span class="pl-c1">Delay</span>(delay_method <span class="pl-k">=</span> <span class="pl-c1">XcorrDelay</span>())</pre></div>
<p dir="auto">If we want to obtain the aligned signals directly as output rather than the aligning indices, we pass <code>output = Signals()</code>.</p>
<h2 dir="auto"><a id="user-content-align-signals-with-different-sample-rates" class="anchor" aria-hidden="true" href="#align-signals-with-different-sample-rates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Align signals with different sample rates</h2>
<p dir="auto">In this example, the second signal has a sample rate that is 2x lower than the first signal. We can align the signals by warping them using Dynamic-Time Warping (DTW) to fit the first signal. DTW is handled by the <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl">DynamicAxisWarping.jl</a> package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SignalAlignment
s0 = sin.((0:0.05:2pi)) # A noisy signal
s1 = s0[1:2:end-10]     # A second signal with 2x lower sample rate
s2 = s0[20:end]         # A third signal
signals = [s0, s1, s2]  # A vector of signals we want to align
signals = [s .+ 0.02 .* randn(length(s)) for s in signals] # Add some noise to the signals

master = Index(1)       # Indicate which signal is the master to which the others are aligned
method = Warp(warp_method=DTW(radius=20))
output = Signals() # Indicate that we want the aligned signals as output
# syncplot(signals, method; master) # Call this if you only want to plot the aligned signals

aligned_signals = align_signals(signals, method; master, output)
plot(signals, label=[&quot;s0&quot; &quot;s1&quot; &quot;s2&quot;], l=(:dash, ))
plot!(aligned_signals, label=[&quot;s0 aligned&quot; &quot;s1 aligned&quot; &quot;s2 aligned&quot;], c=(1:3)', size=(600, 400))"><pre><span class="pl-k">using</span> SignalAlignment
s0 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.((<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">2pi</span>)) <span class="pl-c"><span class="pl-c">#</span> A noisy signal</span>
s1 <span class="pl-k">=</span> s0[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">10</span>]     <span class="pl-c"><span class="pl-c">#</span> A second signal with 2x lower sample rate</span>
s2 <span class="pl-k">=</span> s0[<span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">end</span>]         <span class="pl-c"><span class="pl-c">#</span> A third signal</span>
signals <span class="pl-k">=</span> [s0, s1, s2]  <span class="pl-c"><span class="pl-c">#</span> A vector of signals we want to align</span>
signals <span class="pl-k">=</span> [s <span class="pl-k">.+</span> <span class="pl-c1">0.02</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(s)) <span class="pl-k">for</span> s <span class="pl-k">in</span> signals] <span class="pl-c"><span class="pl-c">#</span> Add some noise to the signals</span>

master <span class="pl-k">=</span> <span class="pl-c1">Index</span>(<span class="pl-c1">1</span>)       <span class="pl-c"><span class="pl-c">#</span> Indicate which signal is the master to which the others are aligned</span>
method <span class="pl-k">=</span> <span class="pl-c1">Warp</span>(warp_method<span class="pl-k">=</span><span class="pl-c1">DTW</span>(radius<span class="pl-k">=</span><span class="pl-c1">20</span>))
output <span class="pl-k">=</span> <span class="pl-c1">Signals</span>() <span class="pl-c"><span class="pl-c">#</span> Indicate that we want the aligned signals as output</span>
<span class="pl-c"><span class="pl-c">#</span> syncplot(signals, method; master) # Call this if you only want to plot the aligned signals</span>

aligned_signals <span class="pl-k">=</span> <span class="pl-c1">align_signals</span>(signals, method; master, output)
<span class="pl-c1">plot</span>(signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2<span class="pl-pds">"</span></span>], l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, ))
<span class="pl-c1">plot!</span>(aligned_signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2 aligned<span class="pl-pds">"</span></span>], c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)<span class="pl-k">'</span>, size<span class="pl-k">=</span>(<span class="pl-c1">600</span>, <span class="pl-c1">400</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/215255054-afedf97c-4913-4bed-923d-d5ac6b52c5a6.png"><img src="https://user-images.githubusercontent.com/3797491/215255054-afedf97c-4913-4bed-923d-d5ac6b52c5a6.png" alt="image" style="max-width: 100%;"></a></p>
<p dir="auto">Notice how the signal that was sampled slowly has been stretched to fit the first signal. This introduces some artifacts, where some samples have been repeated. If undesired, these artifacts can be mitigated somewhat by using generalized DTW, shown below. If the signals are instead aligned to the shortest signal, the longer signals are subsampled:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="master = Shortest() 
aligned_signals = align_signals(signals, method; master, output)
plot(signals, label=[&quot;s0&quot; &quot;s1&quot; &quot;s2&quot;], l=(:dash, ))
plot!(aligned_signals, label=[&quot;s0 aligned&quot; &quot;s1 aligned&quot; &quot;s2 aligned&quot;], c=(1:3)', size=(600, 400))"><pre>master <span class="pl-k">=</span> <span class="pl-c1">Shortest</span>() 
aligned_signals <span class="pl-k">=</span> <span class="pl-c1">align_signals</span>(signals, method; master, output)
<span class="pl-c1">plot</span>(signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2<span class="pl-pds">"</span></span>], l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, ))
<span class="pl-c1">plot!</span>(aligned_signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2 aligned<span class="pl-pds">"</span></span>], c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)<span class="pl-k">'</span>, size<span class="pl-k">=</span>(<span class="pl-c1">600</span>, <span class="pl-c1">400</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/215255616-f924449c-edb2-4431-b6d2-ccfc58636d90.png"><img src="https://user-images.githubusercontent.com/3797491/215255616-f924449c-edb2-4431-b6d2-ccfc58636d90.png" alt="image" style="max-width: 100%;"></a></p>
<p dir="auto">To get a smoother result, use <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl#generalized-dtw">generalized DTW (GDTW)</a> instead of DTW.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="master = Shortest()
method = Warp(warp_method=GDTW(symmetric=false))
aligned_signals = align_signals(signals, method; master, output)
plot(signals, label=[&quot;s0&quot; &quot;s1&quot; &quot;s2&quot;], l=(:dash, ))
plot!(aligned_signals, label=[&quot;s0 aligned&quot; &quot;s1 aligned&quot; &quot;s2 aligned&quot;], c=(1:3)', size=(600, 400))"><pre>master <span class="pl-k">=</span> <span class="pl-c1">Shortest</span>()
method <span class="pl-k">=</span> <span class="pl-c1">Warp</span>(warp_method<span class="pl-k">=</span><span class="pl-c1">GDTW</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">false</span>))
aligned_signals <span class="pl-k">=</span> <span class="pl-c1">align_signals</span>(signals, method; master, output)
<span class="pl-c1">plot</span>(signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2<span class="pl-pds">"</span></span>], l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, ))
<span class="pl-c1">plot!</span>(aligned_signals, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>s0 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s1 aligned<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>s2 aligned<span class="pl-pds">"</span></span>], c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)<span class="pl-k">'</span>, size<span class="pl-k">=</span>(<span class="pl-c1">600</span>, <span class="pl-c1">400</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/215255887-3cdeafae-ff39-4de2-85cf-d8849302c938.png"><img src="https://user-images.githubusercontent.com/3797491/215255887-3cdeafae-ff39-4de2-85cf-d8849302c938.png" alt="image" style="max-width: 100%;"></a></p>
</article></div>