<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-evolinear" class="anchor" aria-hidden="true" href="#evolinear"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EvoLinear</h1>
<table>
<thead>
<tr>
<th align="center">Documentation</th>
<th align="center">CI Status</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://jeremiedb.github.io/EvoLinear.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://jeremiedb.github.io/EvoLinear.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/jeremiedb/EvoLinear.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/jeremiedb/EvoLinear.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://app.codecov.io/github/jeremiedb/evolinear.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2fefc695ae84832cabaf2f5106e0c3a98bc12f48d74f7ec0fe70393daa16adf6/68747470733a2f2f636f6465636f762e696f2f6769746875622f6a6572656d696564622f65766f6c696e6561722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/github/jeremiedb/evolinear.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">ML library implementing linear boosting with L1 and L2 regularization.
For tree based boosting, consider <a href="https://github.com/Evovest/EvoTrees.jl">EvoTrees.jl</a>.</p>
<p dir="auto">Supported loss functions:</p>
<ul dir="auto">
<li>mse (squared-error)</li>
<li>logistic (logloss) regression</li>
<li>poisson</li>
<li>gamma</li>
<li>tweedie</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From General Registry</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add EvoLinear"><pre class="notranslate"><code>pkg&gt; add EvoLinear
</code></pre></div>
<p dir="auto">For latest version</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/jeremiedb/EvoLinear.jl"><pre class="notranslate"><code>pkg&gt; add https://github.com/jeremiedb/EvoLinear.jl
</code></pre></div>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Build a configuration struct with <code>EvoLinearRegressor</code>. Then <code>EvoLinear.fit</code> takes <code>x::Matrix</code> and <code>y::Vector</code> as inputs, plus optionally <code>w::Vector</code> as weights and fits a linear boosted model.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EvoLinear
config = EvoLinearRegressor(loss=:mse, nrounds=10, L1=1e-1, L2=1e-2)
m = EvoLinear.fit(config; x, y, metric=:mse)
p = EvoLinear.predict_proj(m, x)
p = m(x)"><pre><span class="pl-k">using</span> EvoLinear
config <span class="pl-k">=</span> <span class="pl-c1">EvoLinearRegressor</span>(loss<span class="pl-k">=</span><span class="pl-c1">:mse</span>, nrounds<span class="pl-k">=</span><span class="pl-c1">10</span>, L1<span class="pl-k">=</span><span class="pl-c1">1e-1</span>, L2<span class="pl-k">=</span><span class="pl-c1">1e-2</span>)
m <span class="pl-k">=</span> EvoLinear<span class="pl-k">.</span><span class="pl-c1">fit</span>(config; x, y, metric<span class="pl-k">=</span><span class="pl-c1">:mse</span>)
p <span class="pl-k">=</span> EvoLinear<span class="pl-k">.</span><span class="pl-c1">predict_proj</span>(m, x)
p <span class="pl-k">=</span> <span class="pl-c1">m</span>(x)</pre></div>
<p dir="auto">Splines - Experimental</p>
<p dir="auto">Number of knots for selected features is defined through a <code>Dict</code> of the form: <code>Dict(feat_id::Int =&gt; nknots::Int)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="config = EvoSplineRegressor(loss=:mse, nrounds=10, knots = Dict(1 =&gt; 4, 5 =&gt; 8))
m = EvoLinear.fit(config; x, y, metric=:mse)
p = m(x')"><pre>config <span class="pl-k">=</span> <span class="pl-c1">EvoSplineRegressor</span>(loss<span class="pl-k">=</span><span class="pl-c1">:mse</span>, nrounds<span class="pl-k">=</span><span class="pl-c1">10</span>, knots <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>, <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">8</span>))
m <span class="pl-k">=</span> EvoLinear<span class="pl-k">.</span><span class="pl-c1">fit</span>(config; x, y, metric<span class="pl-k">=</span><span class="pl-c1">:mse</span>)
p <span class="pl-k">=</span> <span class="pl-c1">m</span>(x<span class="pl-k">'</span>)</pre></div>
</article></div>