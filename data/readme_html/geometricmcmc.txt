<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><em>The <code>GeometricMCMC</code> package has been deprecated since it has been merged into the <code>MCMC</code> package.</em></p>
<h2><a id="user-content-overview-of-packages-scope" class="anchor" aria-hidden="true" href="#overview-of-packages-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview of package's scope</h2>
<p>This package implements the following 6 MCMC algorithms:</p>
<table>
  <tbody><tr>
    <th></th><th>Julia function</th><th>MCMC algorithm</th>
  </tr>
  <tr>
    <td>1</td><td>mh</td><td>Metropolis-Hastings (MH)</td>
  </tr>
  <tr>
    <td>2</td><td>mala</td><td>Metropolis adjusted Langevin algorithm (MALA)</td>
  </tr>
  <tr>
    <td>3</td><td>smmala</td><td>Simplified Manifold MALA (SMMALA)</td>
  </tr>
  <tr>
    <td>4</td><td>mmala</td><td>Manifold MALA (MMALA)</td>
  </tr>
  <tr>
    <td>5</td><td>hmc</td><td>Hamiltonian Monte Carlo (HMC)</td>
  </tr>
  <tr>
    <td>6</td><td>rmhmc</td><td>Riemannian manifold HMC (RMHMC)</td>
  </tr>
</tbody></table>
<p>More details for the geometric MCMC methods of the package can be found in <a href="http://onlinelibrary.wiley.com/doi/10.1111/j.1467-9868.2010.00765.x/full" rel="nofollow">this article</a>.</p>
<p>Furthermore, the package provides the <code>linearZV()</code> and <code>quadraticZV()</code> functions for the computation of the zero-variance (ZV) Monte Carlo Bayesian estimators, see <a href="http://link.springer.com/article/10.1007%2Fs11222-012-9344-6" rel="nofollow">this publication</a>.</p>
<h2><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation and usage</h2>
<p>To install the GeometricMCMC package, the usual commands of the Julia package
manager are called:</p>
<pre><code>Pkg.update()
Pkg.add("GeometricMCMC")
</code></pre>
<p>After installation, the following typical statement is typed in the Julia
command prompt so as to use the GeometricMCMC package:</p>
<pre><code>using GeometricMCMC
</code></pre>
<p>The <code>Distributions</code> package may be needed, mostly for sampling from
distributions, so it may be useful to make both packages available:</p>
<pre><code>using Distributions, GeometricMCMC
</code></pre>
<h2><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h2>
<p>This file serves as a tutorial explaining how to use the MCMC routines of the
package, as well as the <code>linearZV()</code> and <code>quadraticZV()</code> functions. Code for
the Bayesian logit model with multivariate uncorrelated zero-mean Normal prior
is provided to demonstrate usage and to follow through the tutorial.</p>
<p>To invoke each of the MCMC methods of the package, it is required to provide
two input arguments. The first argument is an instance of the <code>Model</code> type,
defined in the package, and is common across all 6 MCMC routines. The second
argument is an instance of the algorithm's options type and is specific to the
algorithm.</p>
<h3><a id="user-content-the-model-type" class="anchor" aria-hidden="true" href="#the-model-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Model</code> type</h3>
<p>The <code>Model</code> type provides the statistical model to the MCMC routines. This
includes the functions defining the model, the number of the model's parameters
and the data.</p>
<p>More specifically, the functions required for defining the model are the
log-prior, the log-likelihood, the gradient of the log-posterior, the
position-specific metric tensor of the Riemannian manifold of the parameter
space and the tensor's partial derivatives with respect to each of the
parameters. These functions need to be known in closed form as the package
stands so far. The log-posterior is also one of the model's functions and it
does not need to be specified by the user, since the <code>Model</code> type sets it to be
the sum of the log-likelihood with the log-prior.</p>
<p>It is apparent that the <code>Model</code> type represents a Bayesian model. However, it
is also possible to accommodate simpler statistical models, such a non-Bayesian
log-target. This can be achieved, for instance, by setting the log-likelihood
to be equal to the log-target and the improper log-prior to be zero.</p>
<p>For ease of use, all the user-defined functions in the Model type (apart
from the ones starting with "rand" as explained later in the tutorial)
conventionally share the same signature</p>
<pre><code>function myFunction(pars::Vector{Float64}, nPars::Int, data::Union(Array{Any}, Dict{Any, Any}))
</code></pre>
<p>where <code>pars</code> are the model's parameters simulated by the MCMC algorithm and
thus not needed to be numerically specified by the user, <code>nPars</code> is the number
of parameters and <code>data</code> is an Array <code>Array{Any}</code> or a dictionary <code>Dict{Any,  Any}</code> holding the data.</p>
<p>The Model can be instantiated with fewer arguments. For instance, the
Metropolis-Hastings function <code>mh()</code> requires only the log-prior, log-likelihood
and the gradient of the log-posterior. In fact, the gradient of the
log-posterior is not necessary for running a Metropolis-Hastings MCMC
simulation. Nevertheless, it has been set as a required argument so that <code>mh()</code>
returns the zero-variance control variates along with the MCMC output.
Similarly, the log-prior, log-likelihood and the gradient of the log-posterior
suffice as arguments in the instantiation of <code>Model</code> in order to run MALA or
HMC. SMMALA requires additionally the metric tensor. The partial derivatives of
the metric tensor with respect to the parameters are needed in the <code>Model</code>
instantiation only for MMALA or RMHMC simulations.</p>
<h3><a id="user-content-an-example-the-bayesian-logit-model-with-normal-prior" class="anchor" aria-hidden="true" href="#an-example-the-bayesian-logit-model-with-normal-prior"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>An example: the Bayesian logit model with Normal prior</h3>
<h4><a id="user-content-creating-the-data-member-of-the-model-type" class="anchor" aria-hidden="true" href="#creating-the-data-member-of-the-model-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating the <code>data</code> member of the <code>Model</code> type</h4>
<p>To illustrate how to create a Bayesian <code>Model</code>, the logit regression with a
multivariate uncorrelated zero-mean Normal prior is considered. The data are
then the design matrix <code>X</code>, with <code>nData</code> rows and <code>nPars</code> columns, and the
binary response variable <code>y</code>, which is a vector with <code>nData</code> elements. <code>nData</code>
and<code>nPars</code> are the number of data points and the number of parameters,
respectively. Assuming a Normal prior N(0, priorVar*I), the prior's variance
<code>priorVar</code> is also part of the data, in the broad sense of the word.</p>
<p>It is up to the user's preference whether to define <code>data</code> as <code>Array{Any}</code> or
<code>Dict{Any, Any}</code>, as long as <code>data</code> is manipulated accordingly in
the subsequent definition of the <code>Model</code> functions. In what follows, <code>data</code> is
introduced as a dictionary, holding the design matrix <code>X</code>, the response
variable <code>y</code>, the prior variance <code>priorVar</code> and the number of data points
<code>nData</code>. Strictly speaking, <code>nData</code> is not a requirement, since it can be
deduced by <code>size(X, 1)</code>. It is however more efficient to pass <code>nData</code> to the
<code>data</code> dictionary, given that a typical MCMC simulation invokes the <code>Model</code>
functions thousands of times.</p>
<p>As a concrete example, <code>test/swiss.txt</code> contains the Swiss banknotes dataset.
The dataset holds the measurements of 4 covariates on 200 Swiss banknotes,
of which 100 genuine and 100 counterfeit, representing the length of the bill,
the width of the left and the right edge, and the bottom margin width.
Therefore, the design matrix <code>X</code> has 200 rows and 4 columns, and the 4
regression coefficients constitute the model parameters to be estimated. The
binary response variable <code>y</code> is the type of banknote, 0 being genuine and 1
counterfeit. To create the <code>data</code> dictionary for the Swiss banknotes, change
into the <code>test</code> directory and run the <code>test/swiss.jl</code> script:</p>
<pre><code># Create design matrix X and response variable y from swiss data array
swiss = readdlm("swiss.txt", ' ');
covariates = swiss[:, 1:end-1];
nData, nPars = size(covariates);

covariates = (bsxfun(-, covariates, mean(covariates, 1))
./repmat(std(covariates, 1), nData, 1));

polynomialOrder = 1;
X = zeros(nData, nPars*polynomialOrder);
for i = 1:polynomialOrder
  X[:, ((i-1)*nPars+1):i*nPars] = covariates.^i;
end

y = swiss[:, end];

# Create data dictionary
data = {"X"=&gt;X, "y"=&gt;y, "priorVar"=&gt;100., "nData"=&gt;nData};
</code></pre>
<h4><a id="user-content-defining-the-functions-of-the-model" class="anchor" aria-hidden="true" href="#defining-the-functions-of-the-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Defining the functions of the <code>Model</code></h4>
<p>Having defined the <code>data</code> dictionary as above, <code>test/logitNormalPrior.jl</code>
provides the functions of the Bayesian logit model:</p>
<pre><code># Functions for Bayesian logit model with a Normal prior N(0, priorVar*I)

function logPrior(pars::Vector{Float64}, nPars::Int, data::Dict{Any, Any})
  return (-dot(pars,pars)/data["priorVar"]
    -nPars*log(2*pi*data["priorVar"]))/2
end

function logLikelihood(pars::Vector{Float64}, nPars::Int, data::Dict{Any, Any})
  XPars = data["X"]*pars
  return (XPars'*data["y"]-sum(log(1+exp(XPars))))[1]
end

function gradLogPosterior(pars::Vector{Float64}, nPars::Int,
  data::Dict{Any, Any})
  return (data["X"]'*(data["y"]-1./(1+exp(-data["X"]*pars)))
    -pars/data["priorVar"])
end

function tensor(pars::Vector{Float64}, nPars::Int, data::Dict{Any, Any})
  p = 1./(1+exp(-data["X"]*pars))
  return ((data["X"]'.*repmat((p.*(1-p))', nPars, 1))*data["X"]
    +(eye(nPars)/data["priorVar"]))
end

function derivTensor(pars::Vector{Float64}, nPars::Int, data::Dict{Any, Any})
  matrix = Array(Float64, data["nData"], nPars)
  output = Array(Float64, nPars, nPars, nPars)

  p = 1./(1+exp(-data["X"]*pars))

  for i = 1:nPars
    for j =1:nPars
      matrix[:, j] = data["X"][:, j].*((p.*(1-p)).*((1-2*p).*data["X"][:, i]))
    end

    output[:, :, i] = matrix'*data["X"]
  end
  
  return output
end

function randPrior(nPars::Int, data::Dict{Any, Any})
  return rand(Normal(0.0, sqrt(data["priorVar"])), nPars)
end
</code></pre>
<p>There are two points to bare in mind when defining the functions of the model.
Firstly, it is practical, though not obligatory, to use the reserved names
<code>logPrior()</code>, <code>logLikelihood()</code>, <code>gradLogPosterior()</code>, <code>tensor()</code>,
<code>derivTensor()</code> and <code>randPrior()</code> in the relevant function definitions.
Secondly, it is mandatory to adhere to the signature</p>
<pre><code>function myFunction(pars::Vector{Float64}, nPars::Int, data::Union(Array{Any}, Dict{Any, Any}))
</code></pre>
<p>for the deterministic functions of the model, and to the signature</p>
<pre><code>function myFunction(nPars::Int, data::Union(Array{Any}, Dict{Any, Any}))
</code></pre>
<p>for the stochastic function <code>randPrior()</code>.</p>
<p>The second argument <code>nPars</code> to the model's functions seems redundant, since it
can be derived from the first argument <code>pars</code> via the <code>size(pars, 1)</code> command.
Nevertheless, it is more efficient practice to pass <code>nPars</code> as an argument
given the number of times the functions are invoked in a single MCMC run.
Besides, once the functions are passed to <code>Model</code>, then they are invoked with
fewer arguments as members of the instantiated <code>Model</code>, so the interface remains
simple.</p>
<h4><a id="user-content-creating-an-instance-of-model" class="anchor" aria-hidden="true" href="#creating-an-instance-of-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating an instance of <code>Model</code></h4>
<p>Once the <code>data</code> and the functions of <code>Model</code> are defined, it is straightforward
to instantiate <code>Model</code> with a single command. For example,
<code>test/logitNormalPriorSwissRmhmc.jl</code> demosntrates how to create an instance of
<code>Model</code> so as to run RMHMC:</p>
<pre><code>model = Model(nPars, data, logPrior, logLikelihood, gradLogPosterior, tensor, derivTensor, randPrior);
</code></pre>
<p>As shown in <code>test/logitNormalPriorSwissMmala.jl</code>, the same <code>Model</code>
instantiation is used for MMALA. In fact, the same command invocation suffices
to create an instance which can be then utilized by any of the 6 MCMC
algorithms of the GeometricMCMC package.</p>
<p>In order to make <code>Model</code> more user friendly, it is possible to shorten the
<code>Model</code> invocation in some cases. For example, the partial derivatives of the
metric tensor are not needed when running SMMALA. This is why <code>derivTensor()</code>
is omitted in <code>test/logitNormalPriorSwissSmmala.jl</code> in the <code>model</code> definition:</p>
<pre><code>model = Model(nPars, data, logPrior, logLikelihood, gradLogPosterior, tensor, randPrior);
</code></pre>
<p>As a second example, the <code>tensor()</code> function is not needed when running
Metropolis-Hastings, MALA or HMC. For this reason, both <code>tensor()</code> and
<code>derivTensor()</code> can be left out at <code>Model</code> instantiation. So, the <code>model</code>
definition in <code>test/logitNormalPriorSwissMh.jl</code>,
<code>test/logitNormalPriorSwissMala.jl</code> and<code>test/logitNormalPriorSwissHmc.jl</code>
takes the more succinct form</p>
<pre><code>model = Model(nPars, data, logPrior, logLikelihood, gradLogPosterior, randPrior);
</code></pre>
<p>Apparently, the corresponding function definitions <code>tensor()</code> and
<code>derivTensor()</code> are not required if there is no intention to run RMHMC or MMALA.</p>
<p>Although the functions in the <code>model</code> instance are meant to be invoked
internally by the MCMC functions, they are also available at the disposal of
the user. For this reason, it is useful to demonstrate how they can be called.
Having defined <code>model</code>, <code>model.randPrior()</code>, without any input arguments,
samples from the prior. Any of the deterministic functions of the model are
called by passing to them a vector holding the values of the model's
paramater. For example</p>
<pre><code>parsSample = model.randPrior()
model.logPrior(parsSample)
model.logLikelihood(parsSample)
model.logPosterior(parsSample)
model.gradLogPosterior(parsSample)
model.tensor(parsSample)
model.derivTensor(parsSample)
</code></pre>
<h3><a id="user-content-the-mcmc-option-types" class="anchor" aria-hidden="true" href="#the-mcmc-option-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The MCMC option types</h3>
<p>The common <code>Model</code> type shared by all the MCMC routines is handy as it has
become clear from the tutorial. On the other hand, the options of each MCMC
algorithm are obviously specific to the algorithm. The only generic set of
common MCMC options are  the total number of MCMC iterations <code>n</code>, the number of
burnin iterations <code>nBurnin</code> and the monitor rate <code>monitorRate</code>, which is the
number of successive iterations for which the acceptance ratio is calculated.
It is therefore natural to gather <code>n</code>, <code>nBurnin</code> and <code>monitorRate</code> in the
"base" MCMC type <code>McmcOpts</code>. <code>nPostBurnin</code> is also a member of <code>McmcOpts</code> and
it is implicity set by the constructor of <code>McmcOpts</code> to be the difference
<code>n-nBurnin</code>.</p>
<p><code>McmcOpts</code> is in turn member of the other option types, which are specific to
each MCMC routine. Therefore, the Metropolis-Hastings <code>MhOpts</code> type consists of
<code>McmcOpts</code> and of the additional <code>widthCorrection</code> member, which helps
adjusting the proposal's standard deviation when the acceptance ratio is
outside the [20%, 60%] acceptance ratio band. An empirically reasonable value
for <code>widthCorrection</code> is <code>0.1</code> for example.</p>
<p>The user does not need to initialize <code>McmcOpts</code> separately, since the
constructor of the options type of each MCMC routine invokes the constructor of
<code>McmcOpts</code>. As it can be seen in <code>test/logitNormalPriorSwissMh.jl</code> for example,</p>
<pre><code>mhOpts = MhOpts(55000, 5000, 0.1);
</code></pre>
<p>creates an instance of the Metropolis-Hastings <code>MhOpts</code> type. This means that
the following values are accessible as members of <code>MhOpts</code>:</p>
<table>
  <tbody><tr>
    <th></th><th>mhOpts's member</th><th>Value</th>
  </tr>
  <tr>
    <td>1</td><td>mhOpts.mcmc.n</td><td>55000</td>
  </tr>
  <tr>
    <td>2</td><td>mhOpts.mcmc.Burnin</td><td>5000</td>
  </tr>
  <tr>
    <td>3</td><td>mhOpts.mcmc.nPostBurnin</td><td>50000</td>
  </tr>
  <tr>
    <td>4</td><td>mhOpts.mcmc.monitorRate</td><td>100</td>
  </tr>
  <tr>
    <td>5</td><td>mhOpts.widthCorrection</td><td>0.1</td>
  </tr>
</tbody></table>
<p>If a monitorRate other than the default of 100 is desired, say 200, then it
can be passed as the third argument to the constructor of <code>MhOpts</code>:</p>
<pre><code>mhOpts = MhOpts(55000, 5000, 200, 0.1);
</code></pre>
<p>In a similar way, the type <code>MalaOpts</code> holds the options of the MALA algorithm,
which include <code>McmcOpts</code> and the drift step. MALA's drift step can be either a
constant real number or a function with signature</p>
<pre><code>myDriftStep(currentIter::Int, acceptanceRatio::Float64, nMcmc::Int, nBurnin::Int, currentStep::Float64)
</code></pre>
<p>which adjusts and returns the drift step during burnin on the basis of the
current value of the acceptance ratio. <code>src/setStep.jl</code> contains auxiliary
functions to assist the user setting up a function for adjusting the drift step
during burnin. Without elaborating in full detail, if the user wants to use
the available auxiliary <code>setMalaDriftStep</code> function, he needs to define only a
vector of 10 drift steps. The first value of the vector is the one empirically
considered to be reasonable. If the resulting acceptance ratio is too low or
too high for MALA, then the second drift step of the vector is used, which is
expected to be rather small. The successive steps of the vector should be
increasing at a pace that brings the acceptance ratio to the desired levels.
Apparently, defining appropriate numerical values for the 10 drift steps of the
vector is a trial-and-error process. <code>test/logitNormalPriorSwissMala.jl</code> gives
an example of how to define the drift steps and subsequently how to invoke the
<code>setMalaDriftStep</code> function:</p>
<pre><code>driftSteps = [1, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.25];

setDriftStep(i::Int, acceptanceRatio::Float64, nMcmc::Int, 
  nBurnin::Int, currentStep::Float64) =
  setMalaDriftStep(i, acceptanceRatio, nMcmc, nBurnin, currentStep, driftSteps)
</code></pre>
<p>Then the <code>MalaOpts</code> type, holding the MALA options, is instantiated as</p>
<pre><code>malaOpts = MalaOpts(55000, 5000, setDriftStep);
</code></pre>
<p>The <code>SmmalaOpts</code> and <code>MmalaOpts</code> types for SMMALA and MMALA, respectively, are
aliases of the <code>MalaOpts</code> type.</p>
<p>In short, <code>MhOpts</code> holds the options for HMC. These include <code>McmcOpts</code>, the
number of leapfrog steps <code>nLeaps</code>, the mass matrix <code>mass</code> and the leapfrog
step, which can be specified either as a constant real number or as a function
that adjusts the leapfrog step, similarly to the MALA mechanism for adjusting
the drift step. An example of setting up the HMC options is available in
<code>test/logitNormalPriorSwissHmc.jl</code>:</p>
<pre><code>leapSteps = [0.4, 1e-3/2, 1e-3, 1e-2, 1e-1, 0.15, 0.2, 0.25, 0.3, 0.35];

setLeapStep(i::Int, acceptanceRatio::Float64, nMcmc::Int, 
  nBurnin::Int, currentStep::Float64) =
  setHmcLeapStep(i, acceptanceRatio, nMcmc, nBurnin, currentStep, leapSteps)

hmcOpts = HmcOpts(55000, 5000, 10, setLeapStep, eye(nPars));
</code></pre>
<p>where 10 corresponds to <code>nLeaps</code> and <code>eye(nPars)</code> to <code>mass</code>.</p>
<p>The <code>RmhmcOpts</code> options type of RMHMC includes <code>McmcOpts</code>, the number of
leapfrog steps <code>nLeaps</code>, the number of Newton steps <code>nNewton</code> and the leapfrog
step, which is either a constant real or it is tuned similarly to HMC's
leapfrog step. <code>test/logitNormalPriorSwissRmhmc.jl</code> provides an example for
setting up the RMHMC options:</p>
<pre><code>leapSteps = [0.9, 0.01, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8];

setLeapStep(i::Int, acceptanceRatio::Float64, nMcmc::Int, 
  nBurnin::Int, currentStep::Float64) =
  setRmhmcLeapStep(i, acceptanceRatio, nMcmc, nBurnin, currentStep, leapSteps)

rmhmcOpts = RmhmcOpts(55000, 5000, 6, setLeapStep, 4);
</code></pre>
<p>where 6 corresponds to <code>nLeaps</code> and 4 to <code>nNewton</code>.</p>
<h3><a id="user-content-calling-the-mcmc-routines" class="anchor" aria-hidden="true" href="#calling-the-mcmc-routines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Calling the MCMC routines</h3>
<p>With the <code>Model</code> and MCMC option types instantiated, the MCMC routines can be
called with a single command. Here are the examples for running all 6 MCMC
algorithms on the Bayesian logit model with multivariate uncorrelated zero-mean
Normal prior:</p>
<pre><code>mcmc, z = mh(model, mhOpts);
mcmc, z = mala(model, malaOpts);
mcmc, z = smmala(model, smmalaOpts);
mcmc, z = mmala(model, mmalaOpts);
mcmc, z = hmc(model, hmcOpts);
mcmc, z = rmhmc(model, rmhmcOpts);
</code></pre>
<p>Each of the 6 MCMC routines return 2 <code>Float64</code> arrays with
<code>opts.mcmc.nPostBurnin</code> rows and <code>model.nPars</code> columns each. The <code>mcmc</code> array
holds the simulated MCMC chains, while the <code>z</code> array holds the zero-variance
control variates, i.e. minus half the gradient of the log-target.</p>
<h3><a id="user-content-calling-the-zero-variance-routines" class="anchor" aria-hidden="true" href="#calling-the-zero-variance-routines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Calling the zero-variance routines</h3>
<p>The <code>mcmc</code> and <code>z</code> arrays can be passed as arguments to the <code>linearZv()</code> or
<code>quadraticZv()</code> functions in order to compute the linear or the quadratic
zero-variance Bayesian estimators:</p>
<pre><code>linearZvMcmc, linearCoef = linearZv(mcmc, z);
quadraticZvMcmc, quadraticCoef = quadraticZv(mcmc, z);
</code></pre>
<p><code>linearZv()</code> returns 2 <code>Float64</code> arrays. The first one, saved in <code>linearZvMcmc</code>
above, has <code>opts.mcmc.nPostBurnin</code> rows and <code>model.nPars</code> columns and holds the
linear ZV-MCMC estimators. The second array, saved in <code>linearCoef</code>, has
<code>model.nPars</code> rows and <code>model.nPars</code> columns. <code>linearCoef</code> contains the
coefficients of the linear polynomial upon which the zero-variance approach
relies.</p>
<p>In a similar fashion, <code>quadraticZv()</code> returns 2 <code>Float64</code> arrays, the first of
which has <code>opts.mcmc.nPostBurnin</code> rows and <code>model.nPars</code> columns and holds the
quadratic ZV-MCMC estimators. The second array has
<code>model.nPars*(model.nPars+3)/2</code> rows and <code>model.nPars</code> columns, containing the
coefficients of the underlying quadratic polynomial of the zero-variance method.</p>
<p>The Bayesian probit model with multivariate uncorrelated zero-mean Normal is
also available in the <code>test</code> directory, accompanied by the scripts for running
all 6 MCMC algorithms on the vasoconstriction dataset. The data come from an
experiment conducted on human physiology to study the effect of taking a single
deep breath on the occurrence of a reflex vasoconstriction in the skin of the
digits. 39 samples from three individuals are available, each of them
contributing 9, 8 and 22 samples. Although the data represent repeated
measurements, the observations can be assumed to be independent, therefore the
Bayesian probit model can be applied. Two explanatory variables are included in
the study, namely the rate of inhalation and the inhaled volume of air per
individual. An intercept is also added, so 3 regression coefficients comprise
the parameters of the model. The occurrence or non-occurrence of
vasoconstriction in the skin of the digits of each subject, corresponding to 1
and 0, plays the role of the binary response.</p>
<h2><a id="user-content-future-features" class="anchor" aria-hidden="true" href="#future-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future features</h2>
<p>The GeometricMCMC package is being extended to include</p>
<ul>
<li>models of ordinary differential equations (ODEs),</li>
<li>usage of the MCMC routines when the model's functions are not known in closed
form.</li>
</ul>
</article></div>