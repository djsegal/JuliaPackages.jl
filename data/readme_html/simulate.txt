<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-discreteeventsjl" class="anchor" aria-hidden="true" href="#discreteeventsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DiscreteEvents.jl</h1>
<p dir="auto">A Julia package for <strong>discrete event generation and simulation</strong>.</p>
<p dir="auto"><a href="https://juliadynamics.github.io/DiscreteEvents.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliadynamics.github.io/DiscreteEvents.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaDynamics/DiscreteEvents.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaDynamics/DiscreteEvents.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaDynamics/DiscreteEvents.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/71cfba740214e58e9594f4cb6bb6496988051b22b26a517f63df582704bb939b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696144796e616d6963732f44697363726574654576656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaDynamics/DiscreteEvents.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>DiscreteEvents.jl</code> <sup id="user-content-a1"><a href="#f1">1</a></sup>  introduces <em>clocks</em> and allows to schedule and execute arbitrary functions or expressions as <em>actions</em> on the clocks' timeline. It provides simple, yet powerful ways to model and simulate discrete event systems (DES).</p>
<h2 dir="auto"><a id="user-content-an-mm3-queue" class="anchor" aria-hidden="true" href="#an-mm3-queue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An M/M/3 queue</h2>
<p dir="auto">Three servers serve customers arriving at an arrival rate λ with a service rate μ. We implement <code>serve</code> and <code>arrive</code> functions, create a clock and queues, start three service processes and an arrival process and run.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DiscreteEvents, Printf, Distributions, Random

# describe a server process
function serve(clk::Clock, id::Int, input::Channel, output::Channel, X::Distribution)
    job = take!(input)
    print(clk, @sprintf(&quot;%6.3f: server %d serving customer %d\n&quot;, tau(clk), id, job))
    @delay! clk X
    print(clk, @sprintf(&quot;%6.3f: server %d finished serving %d\n&quot;, tau(clk), id, job))
    put!(output, job)
end

# model the arrivals
function arrive(c::Clock, input::Channel, cust::Vector{Int})
    cust[1] += 1
    @printf(&quot;%6.3f: customer %d arrived\n&quot;, tau(c), cust[1])
    put!(input, cust[1])
end

Random.seed!(123)   # set random number seed
const μ = 1/3       # service rate
const λ = 0.9       # arrival rate
count   = [0]       # a job counter

clock  = Clock()    # create a clock
input  = Channel{Int}(Inf)
output = Channel{Int}(Inf)
for i in 1:3        # start three server processes
    @process serve(clock, i, input, output, Exponential(1/μ))
end
# create a repeating event for 10 arrivals
@event arrive(clock, input, count) every Exponential(1/λ) 10
@run! clock 20      # run the clock for 20 time units"><pre><span class="pl-k">using</span> DiscreteEvents, Printf, Distributions, Random

<span class="pl-c"><span class="pl-c">#</span> describe a server process</span>
<span class="pl-k">function</span> <span class="pl-en">serve</span>(clk<span class="pl-k">::</span><span class="pl-c1">Clock</span>, id<span class="pl-k">::</span><span class="pl-c1">Int</span>, input<span class="pl-k">::</span><span class="pl-c1">Channel</span>, output<span class="pl-k">::</span><span class="pl-c1">Channel</span>, X<span class="pl-k">::</span><span class="pl-c1">Distribution</span>)
    job <span class="pl-k">=</span> <span class="pl-c1">take!</span>(input)
    <span class="pl-c1">print</span>(clk, <span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%6.3f: server %d serving customer %d<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-c1">tau</span>(clk), id, job))
    <span class="pl-c1">@delay!</span> clk X
    <span class="pl-c1">print</span>(clk, <span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%6.3f: server %d finished serving %d<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-c1">tau</span>(clk), id, job))
    <span class="pl-c1">put!</span>(output, job)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> model the arrivals</span>
<span class="pl-k">function</span> <span class="pl-en">arrive</span>(c<span class="pl-k">::</span><span class="pl-c1">Clock</span>, input<span class="pl-k">::</span><span class="pl-c1">Channel</span>, cust<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>)
    cust[<span class="pl-c1">1</span>] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>%6.3f: customer %d arrived<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-c1">tau</span>(c), cust[<span class="pl-c1">1</span>])
    <span class="pl-c1">put!</span>(input, cust[<span class="pl-c1">1</span>])
<span class="pl-k">end</span>

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">123</span>)   <span class="pl-c"><span class="pl-c">#</span> set random number seed</span>
<span class="pl-k">const</span> μ <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>       <span class="pl-c"><span class="pl-c">#</span> service rate</span>
<span class="pl-k">const</span> λ <span class="pl-k">=</span> <span class="pl-c1">0.9</span>       <span class="pl-c"><span class="pl-c">#</span> arrival rate</span>
count   <span class="pl-k">=</span> [<span class="pl-c1">0</span>]       <span class="pl-c"><span class="pl-c">#</span> a job counter</span>

clock  <span class="pl-k">=</span> <span class="pl-c1">Clock</span>()    <span class="pl-c"><span class="pl-c">#</span> create a clock</span>
input  <span class="pl-k">=</span> <span class="pl-c1">Channel</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">Inf</span>)
output <span class="pl-k">=</span> <span class="pl-c1">Channel</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">Inf</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>        <span class="pl-c"><span class="pl-c">#</span> start three server processes</span>
    <span class="pl-c1">@process</span> <span class="pl-c1">serve</span>(clock, i, input, output, <span class="pl-c1">Exponential</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>μ))
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> create a repeating event for 10 arrivals</span>
<span class="pl-c1">@event</span> <span class="pl-c1">arrive</span>(clock, input, count) every <span class="pl-c1">Exponential</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>λ) <span class="pl-c1">10</span>
<span class="pl-c1">@run!</span> clock <span class="pl-c1">20</span>      <span class="pl-c"><span class="pl-c">#</span> run the clock for 20 time units</span></pre></div>
<p dir="auto">If we source this program, it runs a simulation.</p>
<details><summary>output:</summary>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="
julia&gt; include(&quot;examples/intro.jl&quot;)
 0.141: customer 1 arrived
 0.141: server 1 serving customer 1
 1.668: server 1 finished serving 1
 2.316: customer 2 arrived
 2.316: server 2 serving customer 2
 3.154: customer 3 arrived
 3.154: server 3 serving customer 3
 4.182: customer 4 arrived
 4.182: server 1 serving customer 4
 4.364: server 3 finished serving 3
 4.409: customer 5 arrived
 4.409: server 3 serving customer 5
 4.533: customer 6 arrived
 4.566: server 2 finished serving 2
 4.566: server 2 serving customer 6
 5.072: customer 7 arrived
 5.299: server 3 finished serving 5
 5.299: server 3 serving customer 7
 5.335: server 1 finished serving 4
 5.376: customer 8 arrived
 5.376: server 1 serving customer 8
 5.833: customer 9 arrived
 6.134: customer 10 arrived
 6.570: server 1 finished serving 8
 6.570: server 1 serving customer 9
 6.841: server 3 finished serving 7
 6.841: server 3 serving customer 10
 8.371: server 2 finished serving 6
10.453: server 1 finished serving 9
10.477: server 3 finished serving 10
&quot;run! finished with 40 clock events, 0 sample steps, simulation time: 20.0&quot;"><pre class="notranslate"><code>
julia&gt; include("examples/intro.jl")
 0.141: customer 1 arrived
 0.141: server 1 serving customer 1
 1.668: server 1 finished serving 1
 2.316: customer 2 arrived
 2.316: server 2 serving customer 2
 3.154: customer 3 arrived
 3.154: server 3 serving customer 3
 4.182: customer 4 arrived
 4.182: server 1 serving customer 4
 4.364: server 3 finished serving 3
 4.409: customer 5 arrived
 4.409: server 3 serving customer 5
 4.533: customer 6 arrived
 4.566: server 2 finished serving 2
 4.566: server 2 serving customer 6
 5.072: customer 7 arrived
 5.299: server 3 finished serving 5
 5.299: server 3 serving customer 7
 5.335: server 1 finished serving 4
 5.376: customer 8 arrived
 5.376: server 1 serving customer 8
 5.833: customer 9 arrived
 6.134: customer 10 arrived
 6.570: server 1 finished serving 8
 6.570: server 1 serving customer 9
 6.841: server 3 finished serving 7
 6.841: server 3 serving customer 10
 8.371: server 2 finished serving 6
10.453: server 1 finished serving 9
10.477: server 3 finished serving 10
"run! finished with 40 clock events, 0 sample steps, simulation time: 20.0"
</code></pre></div>
</details>
<p dir="auto">For further examples see the <a href="https://juliadynamics.github.io/DiscreteEvents.jl/dev/" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>DiscreteEvents</code> is installed with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add DiscreteEvents"><pre>pkg<span class="pl-k">&gt;</span> add DiscreteEvents</pre></div>
<p dir="auto">The development version can be installed with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/JuliaDynamics/DiscreteEvents.jl"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaDynamics<span class="pl-k">/</span>DiscreteEvents<span class="pl-k">.</span>jl</pre></div>
<p dir="auto">Please use, test and help to develop <code>DiscreteEvents</code>! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>
<p dir="auto"><strong>Author:</strong> Paul Bayer,<br>
<strong>License:</strong> MIT</p>
<p dir="auto"><b id="user-content-f1">1</b>   <code>DiscreteEvents.jl</code> as of <code>v0.3</code> has been renamed from <a href="https://github.com/JuliaDynamics/DiscreteEvents.jl/tree/v0.2.0"><code>Simulate.jl</code></a>, see <a href="https://github.com/JuliaDynamics/DiscreteEvents.jl/issues/13" data-hovercard-type="issue" data-hovercard-url="/JuliaDynamics/DiscreteEvents.jl/issues/13/hovercard">issue #13</a>.<a href="#a1"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</article></div>