<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sdpsymmetryreduction" class="anchor" aria-hidden="true" href="#sdpsymmetryreduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SDPSymmetryReduction</h1>
<p>Numerically reduces semidefinite programming problems by exploiting their symmetry. Input is in vectorized standard form</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sup/inf     dot(C,x)
subject to  Ax = b,
            Mat(x) is positive semidefinite/doubly nonnegative,
"><pre><code>sup/inf     dot(C,x)
subject to  Ax = b,
            Mat(x) is positive semidefinite/doubly nonnegative,
</code></pre></div>
<p>where <code>C</code> and <code>b</code> are vectors and <code>A</code> is a matrix.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Simply run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SDPSymmetryReduction  # Press ']' to enter the Pkg REPL mode.
"><pre>pkg<span class="pl-k">&gt;</span> add SDPSymmetryReduction  <span class="pl-c"><span class="pl-c">#</span> Press ']' to enter the Pkg REPL mode.</span></pre></div>
<h2><a id="user-content-determining-an-admissible-subspace" class="anchor" aria-hidden="true" href="#determining-an-admissible-subspace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Determining an admissible subspace</h2>
<p>The function <code>admPartSubspace</code> determines an optimal admissible partition subspace for the problem. This is done using a randomized Jordan-reduction algorithm, and it returns a Jordan algebra (closed under linear combinations and squaring). SDPs can be restricted to such a subspace without changing their optimal value.</p>
<p>Given <code>C,A</code> and <code>b</code>, <code>admPartSubspace(C,a,b)</code> returns a <code>Partition P</code> with <code>P.n</code> giving the number of parts of the partition, and <code>P.P</code> returning an integer valued matrix (same size at <code>x</code> in matrix form) with entries <code>1,...,n</code> defining the partition.</p>
<h2><a id="user-content-block-diagonalizing-a-jordan-algebra" class="anchor" aria-hidden="true" href="#block-diagonalizing-a-jordan-algebra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Block-diagonalizing a Jordan-algebra</h2>
<p>The function <code>blockDiagonalize</code> determines a block-diagonalization of a (Jordan)-algebra given by a partition <code>P</code> using a randomized algorithm.</p>
<p><code>blockDiagonalize(P)</code> returns a real block-diagonalization <code>blkd</code>, if it exists, otherwise <code>nothing</code>.</p>
<ul>
<li><code>blkd.blkSizes</code> returns an integer array of the sizes of the blocks.</li>
<li><code>blkd.blks</code> returns an array of length <code>P.n</code> containing arrays of (real) matrices of sizes <code>blkd.blkSizes</code>. I.e. <code>blkd.blks[i]</code> is the image of the basis element <code>P.P .== i</code>.</li>
</ul>
<p><code>blockDiagonalize(P; complex = true)</code> returns the same, but with complex valued matrices, and should be used if no real block-diagonalization was found. To use the complex matrices practically, remember that a Hermitian matrix <code>A</code> is positive semidefinite iff <code>[real(A) -imag(A); imag(A) real(A)]</code> is positive semidefinite.</p>
<h2><a id="user-content-example-theta-function" class="anchor" aria-hidden="true" href="#example-theta-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Theta'-function</h2>
<p>Let <code>Adj</code> be an adjacency matrix of an (undirected) graph <code>G</code>. Then the Theta'-function of the graph is given by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sup         dot(J,X)
subject to  dot(Adj,X) = 0,
            dot(I,X) = 1,
            X is positive semidefinite,
            X is entry-wise nonnegative,
"><pre><code>sup         dot(J,X)
subject to  dot(Adj,X) = 0,
            dot(I,X) = 1,
            X is positive semidefinite,
            X is entry-wise nonnegative,
</code></pre></div>
<p>where <code>J</code> is the all-ones matrix, and <code>I</code> the identity. Then we can exploit the symmetry of the graph and calculate this function by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SDPSymmetryReduction
using LinearAlgebra, SparseArrays
using JuMP, MosekTools

# Theta' SDP
N = size(Adj,1)
C = ones(N^2)
A = hcat(vec(Adj), vec(Matrix(I, N, N)))'
b = [0, 1]

# Find the optimal admissible subspace (= Jordan algebra)
P = admPartSubspace(C, A, b, true)

# Block-diagonalize the algebra
blkD = blockDiagonalize(P, true)

# Calculate the coefficients of the new SDP
PMat = hcat([sparse(vec(P.P .== i)) for i = 1:P.n]...)
newA = A * PMat
newB = b
newC = C' * PMat

# Solve with optimizer of choice
m = Model(Mosek.Optimizer)

# Initialize variables corresponding parts of the partition P
# &gt;= 0 because the original SDP-matrices are entry-wise nonnegative
x = @variable(m, x[1:P.n] &gt;= 0)

@constraint(m, newA * x .== newB)
@objective(m, Max, newC * x)

psdBlocks = sum(blkD.blks[i] .* x[i] for i = 1:P.n)
for blk in psdBlocks
    if size(blk, 1) &gt; 1
        @constraint(m, blk in PSDCone())
    else
        @constraint(m, blk .&gt;= 0)
    end
end

optimize!(m)

@show termination_status(m)
@show value(newC * x)
"><pre><span class="pl-k">using</span> SDPSymmetryReduction
<span class="pl-k">using</span> LinearAlgebra, SparseArrays
<span class="pl-k">using</span> JuMP, MosekTools

<span class="pl-c"><span class="pl-c">#</span> Theta' SDP</span>
N <span class="pl-k">=</span> <span class="pl-c1">size</span>(Adj,<span class="pl-c1">1</span>)
C <span class="pl-k">=</span> <span class="pl-c1">ones</span>(N<span class="pl-k">^</span><span class="pl-c1">2</span>)
A <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">vec</span>(Adj), <span class="pl-c1">vec</span>(<span class="pl-c1">Matrix</span>(I, N, N)))<span class="pl-k">'</span>
b <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> Find the optimal admissible subspace (= Jordan algebra)</span>
P <span class="pl-k">=</span> <span class="pl-c1">admPartSubspace</span>(C, A, b, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Block-diagonalize the algebra</span>
blkD <span class="pl-k">=</span> <span class="pl-c1">blockDiagonalize</span>(P, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Calculate the coefficients of the new SDP</span>
PMat <span class="pl-k">=</span> <span class="pl-c1">hcat</span>([<span class="pl-c1">sparse</span>(<span class="pl-c1">vec</span>(P<span class="pl-k">.</span>P <span class="pl-k">.==</span> i)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n]<span class="pl-k">.</span><span class="pl-k">..</span>)
newA <span class="pl-k">=</span> A <span class="pl-k">*</span> PMat
newB <span class="pl-k">=</span> b
newC <span class="pl-k">=</span> C<span class="pl-k">'</span> <span class="pl-k">*</span> PMat

<span class="pl-c"><span class="pl-c">#</span> Solve with optimizer of choice</span>
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Mosek<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> Initialize variables corresponding parts of the partition P</span>
<span class="pl-c"><span class="pl-c">#</span> &gt;= 0 because the original SDP-matrices are entry-wise nonnegative</span>
x <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c1">@constraint</span>(m, newA <span class="pl-k">*</span> x <span class="pl-k">.==</span> newB)
<span class="pl-c1">@objective</span>(m, Max, newC <span class="pl-k">*</span> x)

psdBlocks <span class="pl-k">=</span> <span class="pl-c1">sum</span>(blkD<span class="pl-k">.</span>blks[i] <span class="pl-k">.*</span> x[i] <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n)
<span class="pl-k">for</span> blk <span class="pl-k">in</span> psdBlocks
    <span class="pl-k">if</span> <span class="pl-c1">size</span>(blk, <span class="pl-c1">1</span>) <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>
        <span class="pl-c1">@constraint</span>(m, blk <span class="pl-k">in</span> <span class="pl-c1">PSDCone</span>())
    <span class="pl-k">else</span>
        <span class="pl-c1">@constraint</span>(m, blk <span class="pl-k">.&gt;=</span> <span class="pl-c1">0</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">optimize!</span>(m)

<span class="pl-c1">@show</span> <span class="pl-c1">termination_status</span>(m)
<span class="pl-c1">@show</span> <span class="pl-c1">value</span>(newC <span class="pl-k">*</span> x)</pre></div>
<p>There are more examples in the folder <code>examples</code>:</p>
<ul>
<li><code>ReduceAndSolveJuMP.jl</code>: A more advanced function for fully reducing and solving SDPs with JuMP and Mosek, including support for complex block-diagonalizations.</li>
<li><code>ErdosRenyiThetaFunction.jl</code>: A full example calculating the Theta'-function of Erdos-Renyi graphs.</li>
<li><code>QuadraticAssignmentProblems.jl</code>: Loads a QAP in QAPLib format and then reduces and solves a strong doubly nonnegative relaxation of it.</li>
</ul>
</article></div>