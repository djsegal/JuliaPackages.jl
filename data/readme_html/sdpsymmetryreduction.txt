<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sdpsymmetryreduction" class="anchor" aria-hidden="true" href="#sdpsymmetryreduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SDPSymmetryReduction</h1>
<p dir="auto"><a href="https://DanielBrosch.github.io/SDPSymmetryReduction.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://DanielBrosch.github.io/SDPSymmetryReduction.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/DanielBrosch/SDPSymmetryReduction.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/DanielBrosch/SDPSymmetryReduction.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/DanielBrosch/SDPSymmetryReduction.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a7d2ebd693a12f2afd0b0dacd3a66df1b93bde7f1f846a78933a5ec2ae4e7cf5/68747470733a2f2f636f6465636f762e696f2f67682f44616e69656c42726f7363682f53445053796d6d65747279526564756374696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/DanielBrosch/SDPSymmetryReduction.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-sdpsymmetryreduction-1" class="anchor" aria-hidden="true" href="#sdpsymmetryreduction-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SDPSymmetryReduction</h1>
<p dir="auto">Numerically reduces semidefinite programming problems by exploiting their symmetry. Input is in vectorized standard form</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sup/inf     dot(C,x)
subject to  Ax = b,
            Mat(x) is positive semidefinite/doubly nonnegative,"><pre class="notranslate"><code>sup/inf     dot(C,x)
subject to  Ax = b,
            Mat(x) is positive semidefinite/doubly nonnegative,
</code></pre></div>
<p dir="auto">where <code>C</code> and <code>b</code> are vectors and <code>A</code> is a matrix.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Simply run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add SDPSymmetryReduction  # Press ']' to enter the Pkg REPL mode."><pre>pkg<span class="pl-k">&gt;</span> add SDPSymmetryReduction  <span class="pl-c"><span class="pl-c">#</span> Press ']' to enter the Pkg REPL mode.</span></pre></div>
<h2 dir="auto"><a id="user-content-main-use" class="anchor" aria-hidden="true" href="#main-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main use</h2>
<p dir="auto">The function <code>admPartSubspace</code> determines an optimal admissible partition subspace for the problem. This is done using a randomized Jordan-reduction algorithm, and it returns a Jordan algebra (closed under linear combinations and squaring). SDPs can be restricted to such a subspace without changing their optimal value.</p>
<p dir="auto">The function <code>blockDiagonalize</code> determines a block-diagonalization of a (Jordan)-algebra given by a partition <code>P</code> using a randomized algorithm.</p>
<p dir="auto">For more details, see the <a href="https://DanielBrosch.github.io/SDPSymmetryReduction.jl/stable" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-example-theta-function" class="anchor" aria-hidden="true" href="#example-theta-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Theta'-function</h2>
<p dir="auto">Let <code>Adj</code> be an adjacency matrix of an (undirected) graph <code>G</code>. Then the Theta'-function of the graph is given by</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sup         dot(J,X)
subject to  dot(Adj,X) = 0,
            dot(I,X) = 1,
            X is positive semidefinite,
            X is entry-wise nonnegative,"><pre class="notranslate"><code>sup         dot(J,X)
subject to  dot(Adj,X) = 0,
            dot(I,X) = 1,
            X is positive semidefinite,
            X is entry-wise nonnegative,
</code></pre></div>
<p dir="auto">where <code>J</code> is the all-ones matrix, and <code>I</code> the identity. Then we can exploit the symmetry of the graph and calculate this function by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SDPSymmetryReduction
using LinearAlgebra, SparseArrays
using JuMP, MosekTools

# Theta' SDP
N = size(Adj,1)
C = ones(N^2)
A = hcat(vec(Adj), vec(Matrix(I, N, N)))'
b = [0, 1]

# Find the optimal admissible subspace (= Jordan algebra)
P = admPartSubspace(C, A, b, true)

# Block-diagonalize the algebra
blkD = blockDiagonalize(P, true)

# Calculate the coefficients of the new SDP
PMat = hcat([sparse(vec(P.P .== i)) for i = 1:P.n]...)
newA = A * PMat
newB = b
newC = C' * PMat

# Solve with optimizer of choice
m = Model(Mosek.Optimizer)

# Initialize variables corresponding parts of the partition P
# &gt;= 0 because the original SDP-matrices are entry-wise nonnegative
x = @variable(m, x[1:P.n] &gt;= 0)

@constraint(m, newA * x .== newB)
@objective(m, Max, newC * x)

psdBlocks = sum(blkD.blks[i] .* x[i] for i = 1:P.n)
for blk in psdBlocks
    if size(blk, 1) &gt; 1
        @constraint(m, blk in PSDCone())
    else
        @constraint(m, blk .&gt;= 0)
    end
end

optimize!(m)

@show termination_status(m)
@show value(newC * x)"><pre><span class="pl-k">using</span> SDPSymmetryReduction
<span class="pl-k">using</span> LinearAlgebra, SparseArrays
<span class="pl-k">using</span> JuMP, MosekTools

<span class="pl-c"><span class="pl-c">#</span> Theta' SDP</span>
N <span class="pl-k">=</span> <span class="pl-c1">size</span>(Adj,<span class="pl-c1">1</span>)
C <span class="pl-k">=</span> <span class="pl-c1">ones</span>(N<span class="pl-k">^</span><span class="pl-c1">2</span>)
A <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">vec</span>(Adj), <span class="pl-c1">vec</span>(<span class="pl-c1">Matrix</span>(I, N, N)))<span class="pl-k">'</span>
b <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> Find the optimal admissible subspace (= Jordan algebra)</span>
P <span class="pl-k">=</span> <span class="pl-c1">admPartSubspace</span>(C, A, b, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Block-diagonalize the algebra</span>
blkD <span class="pl-k">=</span> <span class="pl-c1">blockDiagonalize</span>(P, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Calculate the coefficients of the new SDP</span>
PMat <span class="pl-k">=</span> <span class="pl-c1">hcat</span>([<span class="pl-c1">sparse</span>(<span class="pl-c1">vec</span>(P<span class="pl-k">.</span>P <span class="pl-k">.==</span> i)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n]<span class="pl-k">.</span><span class="pl-k">..</span>)
newA <span class="pl-k">=</span> A <span class="pl-k">*</span> PMat
newB <span class="pl-k">=</span> b
newC <span class="pl-k">=</span> C<span class="pl-k">'</span> <span class="pl-k">*</span> PMat

<span class="pl-c"><span class="pl-c">#</span> Solve with optimizer of choice</span>
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Mosek<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> Initialize variables corresponding parts of the partition P</span>
<span class="pl-c"><span class="pl-c">#</span> &gt;= 0 because the original SDP-matrices are entry-wise nonnegative</span>
x <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c1">@constraint</span>(m, newA <span class="pl-k">*</span> x <span class="pl-k">.==</span> newB)
<span class="pl-c1">@objective</span>(m, Max, newC <span class="pl-k">*</span> x)

psdBlocks <span class="pl-k">=</span> <span class="pl-c1">sum</span>(blkD<span class="pl-k">.</span>blks[i] <span class="pl-k">.*</span> x[i] <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>n)
<span class="pl-k">for</span> blk <span class="pl-k">in</span> psdBlocks
    <span class="pl-k">if</span> <span class="pl-c1">size</span>(blk, <span class="pl-c1">1</span>) <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>
        <span class="pl-c1">@constraint</span>(m, blk <span class="pl-k">in</span> <span class="pl-c1">PSDCone</span>())
    <span class="pl-k">else</span>
        <span class="pl-c1">@constraint</span>(m, blk <span class="pl-k">.&gt;=</span> <span class="pl-c1">0</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">optimize!</span>(m)

<span class="pl-c1">@show</span> <span class="pl-c1">termination_status</span>(m)
<span class="pl-c1">@show</span> <span class="pl-c1">value</span>(newC <span class="pl-k">*</span> x)</pre></div>
<p dir="auto">There are more examples in the <a href="https://DanielBrosch.github.io/SDPSymmetryReduction.jl/stable" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">See <a href="CITATION.bib"><code>CITATION.bib</code></a> for the relevant reference(s).</p>
</article></div>