<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ecosjl" class="anchor" aria-hidden="true" href="#ecosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ECOS.jl</h1>
<p>Julia wrapper for the <a href="https://github.com/embotech/ecos">ECOS</a> embeddable conic
optimization interior point solver.</p>
<p><a href="https://github.com/jump-dev/ECOS.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/ECOS.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/ECOS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9878e650d9a3cde1acf2730adce7dce080fb49d649571aa05a0f69375a3dc1df/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f45434f532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/ECOS.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You can install ECOS.jl through the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;ECOS&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ECOS<span class="pl-pds">"</span></span>)</pre></div>
<p>ECOS.jl will automatically install and setup the ECOS solver itself using <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a>.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>After ECOS.jl is installed and built, you can replace the installed <code>libecos</code> dependency with a custom installation by following the <a href="https://julialang.github.io/Pkg.jl/v1/artifacts/#Overriding-artifact-locations-1" rel="nofollow">Pkg documentation for overriding artifacts</a>. Note that your custom <code>libecos</code> is required to be at least version 2.0.5.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The ECOS interface is completely wrapped. ECOS functions corresponding to the C API are available as <code>ECOS.setup</code>, <code>ECOS.solve</code>, <code>ECOS.cleanup</code>, and <code>ECOS.ver</code> (these are not exported from the module). Function arguments are extensively documented in the source, and an example of usage can be found in <code>test/direct.jl</code>.</p>
<p>ECOS.jl also supports the <strong><a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a></strong> standard solver interface.
Thanks to this support ECOS can be used as a solver with both the <strong><a href="https://github.com/jump-dev/JuMP.jl">JuMP</a></strong> and <strong><a href="https://github.com/JuliaOpt/Convex.jl">Convex.jl</a></strong> modeling languages.</p>
<p>All ECOS solver options can be set through the direct interface and through MathOptInterface.
The list of options is defined the <a href="https://github.com/embotech/ecos/blob/master/include/ecos.h"><code>ecos.h</code> header</a>, which we reproduce here:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="gamma          # scaling the final step length
delta          # regularization parameter
eps            # regularization threshold
feastol        # primal/dual infeasibility tolerance
abstol         # absolute tolerance on duality gap
reltol         # relative tolerance on duality gap
feastol_inacc  # primal/dual infeasibility relaxed tolerance
abstol_inacc   # absolute relaxed tolerance on duality gap
reltol_inacc   # relative relaxed tolerance on duality gap
nitref         # number of iterative refinement steps
maxit          # maximum number of iterations
verbose        # verbosity bool for PRINTLEVEL &lt; 3
"><pre>gamma          <span class="pl-c"><span class="pl-c">#</span> scaling the final step length</span>
delta          <span class="pl-c"><span class="pl-c">#</span> regularization parameter</span>
eps            <span class="pl-c"><span class="pl-c">#</span> regularization threshold</span>
feastol        <span class="pl-c"><span class="pl-c">#</span> primal/dual infeasibility tolerance</span>
abstol         <span class="pl-c"><span class="pl-c">#</span> absolute tolerance on duality gap</span>
reltol         <span class="pl-c"><span class="pl-c">#</span> relative tolerance on duality gap</span>
feastol_inacc  <span class="pl-c"><span class="pl-c">#</span> primal/dual infeasibility relaxed tolerance</span>
abstol_inacc   <span class="pl-c"><span class="pl-c">#</span> absolute relaxed tolerance on duality gap</span>
reltol_inacc   <span class="pl-c"><span class="pl-c">#</span> relative relaxed tolerance on duality gap</span>
nitref         <span class="pl-c"><span class="pl-c">#</span> number of iterative refinement steps</span>
maxit          <span class="pl-c"><span class="pl-c">#</span> maximum number of iterations</span>
verbose        <span class="pl-c"><span class="pl-c">#</span> verbosity bool for PRINTLEVEL &lt; 3</span></pre></div>
<p>To use these settings you can either pass them as keyword arguments to <code>setup</code>
(direct interface) or as arguments to the <code>ECOS.Optimizer</code> constructor
(MathOptInterface interface), e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Direct
my_prob = ECOS.setup(n, m, ..., c, h, b; maxit=10, feastol=1e-5)
# MathOptInterface (with JuMP)
model = Model(with_optimizer(ECOS.Optimizer, maxit=10, feastol=1e-5))
"><pre><span class="pl-c"><span class="pl-c">#</span> Direct</span>
my_prob <span class="pl-k">=</span> ECOS<span class="pl-k">.</span><span class="pl-c1">setup</span>(n, m, <span class="pl-k">...</span>, c, h, b; maxit<span class="pl-k">=</span><span class="pl-c1">10</span>, feastol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)
<span class="pl-c"><span class="pl-c">#</span> MathOptInterface (with JuMP)</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(ECOS<span class="pl-k">.</span>Optimizer, maxit<span class="pl-k">=</span><span class="pl-c1">10</span>, feastol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>))</pre></div>
<h3><a id="user-content-jump-example" class="anchor" aria-hidden="true" href="#jump-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JuMP example</h3>
<p>This example shows how we can model a simple knapsack problem with JuMP and use ECOS to solve it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP
using ECOS

items  = [:Gold, :Silver, :Bronze]
values = Dict(:Gold =&gt; 5.0,  :Silver =&gt; 3.0,  :Bronze =&gt; 1.0)
weight = Dict(:Gold =&gt; 2.0,  :Silver =&gt; 1.5,  :Bronze =&gt; 0.3)

model = Model(with_optimizer(ECOS.Optimizer))
@variable(model, 0 &lt;= take[items] &lt;= 1)  # Define a variable for each item
@objective(model, Max, sum(values[item] * take[item] for item in items))
@constraint(model, sum(weight[item] * take[item] for item in items) &lt;= 3)
optimize!(model)

println(value.(take))
# take
# [  Gold] = 0.9999999680446406
# [Silver] = 0.46666670881026834
# [Bronze] = 0.9999999633898735
"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> ECOS

items  <span class="pl-k">=</span> [<span class="pl-c1">:Gold</span>, <span class="pl-c1">:Silver</span>, <span class="pl-c1">:Bronze</span>]
values <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Gold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>,  <span class="pl-c1">:Silver</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>,  <span class="pl-c1">:Bronze</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>)
weight <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Gold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>,  <span class="pl-c1">:Silver</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.5</span>,  <span class="pl-c1">:Bronze</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.3</span>)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(ECOS<span class="pl-k">.</span>Optimizer))
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> take[items] <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> Define a variable for each item</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">sum</span>(values[item] <span class="pl-k">*</span> take[item] <span class="pl-k">for</span> item <span class="pl-k">in</span> items))
<span class="pl-c1">@constraint</span>(model, <span class="pl-c1">sum</span>(weight[item] <span class="pl-k">*</span> take[item] <span class="pl-k">for</span> item <span class="pl-k">in</span> items) <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">optimize!</span>(model)

<span class="pl-c1">println</span>(<span class="pl-c1">value</span>.(take))
<span class="pl-c"><span class="pl-c">#</span> take</span>
<span class="pl-c"><span class="pl-c">#</span> [  Gold] = 0.9999999680446406</span>
<span class="pl-c"><span class="pl-c">#</span> [Silver] = 0.46666670881026834</span>
<span class="pl-c"><span class="pl-c">#</span> [Bronze] = 0.9999999633898735</span></pre></div>
<hr>
<p><code>ECOS.jl</code> is licensed under the MIT License (see LICENSE.md), but note that ECOS itself is GPL v3.</p>
</article></div>