<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-acceleratedarraysjl" class="anchor" aria-hidden="true" href="#acceleratedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AcceleratedArrays.jl</h1>
<p><em>Arrays with acceleration indices.</em></p>
<p><a href="https://travis-ci.org/andyferris/AcceleratedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff0203269e83c9c3a8afaa8fa85bc36d8d256be6/68747470733a2f2f7472617669732d63692e6f72672f616e64796665727269732f416363656c6572617465644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/andyferris/AcceleratedArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/andyferris/acceleratedarrays-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c1b70ed3bd670b16c62e604b777506d800a4a410/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f397177623231397770646d33646733633f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/9qwb219wpdm3dg3c?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/andyferris/AcceleratedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/611538fedd9ccb24bed440e8847617280ca1bfbb/68747470733a2f2f636f6465636f762e696f2f67682f616e64796665727269732f416363656c6572617465644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/andyferris/AcceleratedArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><strong>AcceleratedArrays</strong> provides (secondary) acceleration indexes for Julia <code>AbstractArray</code>s. Such
acceleration indexes can be used to speed up certain operations, particularly those
involving searching through the values - for example, an <code>AcceleratedArray</code> may have more
efficient implementations of functions such as <code>findall</code>, <code>filter</code>, and <code>unique</code>.</p>
<p>As a general rule, this package has been implemented for the purposes of accelerating
analytics workloads and is designed to support functional, non-mutating workflows. It is
currently not supported to add an index to data you expect to mutate afterwards.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting started</h2>
<p>To download this package, from Julia v1.0 press <code>]</code> to enter package mode and type:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> dev https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>andyferris<span class="pl-k">/</span>AcceleratedArrays<span class="pl-k">.</span>jl</pre></div>
<p>An <code>AcceleratedArray</code> is generally created by using the <code>accelerate</code> and <code>accelerate!</code>
functions.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Construct a hash mapping to unique names</span>
a <span class="pl-k">=</span> <span class="pl-c1">accelerate</span>([<span class="pl-s"><span class="pl-pds">"</span>Alice<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Bob<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Charlie<span class="pl-pds">"</span></span>], UniqueHashIndex)

<span class="pl-c"><span class="pl-c">#</span> Rearrange an array of random numbers into ascending order</span>
b <span class="pl-k">=</span> <span class="pl-c1">accelerate!</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">100</span>), SortIndex)</pre></div>
<p>The resulting arrays can be used just like regular Julia arrays, except some operations
become faster. For example, the hash map will let us find a certain element without
exhaustively searching the array, or we can easily find all the elements within a
given interval with a sorted array.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Find the index of "Bob" in `a`</span>
<span class="pl-c1">findall</span>(<span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">"</span>Bob<span class="pl-pds">"</span></span>), a)

<span class="pl-c"><span class="pl-c">#</span> Return all the numbers in `b` between 40 and 60</span>
<span class="pl-c1">filter</span>(<span class="pl-c1">in</span>(<span class="pl-c1">40..60</span>), b)</pre></div>
<h2><a id="user-content-accelerated-functions" class="anchor" aria-hidden="true" href="#accelerated-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accelerated functions</h2>
<p>Accelerations are fully implemented for the following functions, where <code>a</code> is an
<code>AcceleratedArray</code>:</p>
<ul>
<li><code>x âˆˆ a</code></li>
<li><code>count(pred, a)</code></li>
<li><code>findall(pred, a)</code></li>
<li><code>filter(pred, a)</code></li>
</ul>
<p>There is some work-in-progress on a variety of other functions, including some from
<a href="https://github.com/JuliaData/SplitApplyCombine.jl">SplitApplyCombine</a>:</p>
<ul>
<li><code>findfirst(pred, a)</code> and <code>findlast(pred, a)</code></li>
<li><code>unique(a)</code></li>
<li><code>group</code>, <code>groupinds</code>, <code>groupview</code> and <code>groupreduce</code></li>
<li><code>innerjoin</code></li>
</ul>
<p>Accelerations are only available for some predicates <code>pred</code>, which naturally depend on the
acceleration index used (see below for a full set).</p>
<h2><a id="user-content-acceleration-indexes" class="anchor" aria-hidden="true" href="#acceleration-indexes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acceleration Indexes</h2>
<p>The package intruduces the <code>AbstractIndex</code> supertype and the following concrete implemetations.
Generally, an index is created when the user calls <code>accelerate</code> or <code>accelerate!</code>.</p>
<h4><a id="user-content-hashindex" class="anchor" aria-hidden="true" href="#hashindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>HashIndex</code></h4>
<p>This index constructs a hashmap between values in the array, and the corresponding array
indices. For example, invoking <code>findall</code> to search for the locations of certain values
will be reduced to a simple dictionary lookup. Primarily accelerates commands using the
<code>isequal</code> predicate.</p>
<h4><a id="user-content-uniquehashindex" class="anchor" aria-hidden="true" href="#uniquehashindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>UniqueHashIndex</code></h4>
<p>Like <code>HashIndex</code>, except each value in the array can only appear once. Apart from
guaranteeing uniqueness, certain operations may be faster with a <code>UniqueHashIndex</code> than
with a <code>HashIndex</code>.</p>
<h4><a id="user-content-sortindex" class="anchor" aria-hidden="true" href="#sortindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>SortIndex</code></h4>
<p>This index determines the order of the elements (with respect to <code>isless</code>). This index
can accelerate not only the <code>isequal</code> predicate, but a variety of other order-based
predicates as well (see below).</p>
<p>The <code>accelerate!</code> function will rearrange the input array, like <code>sort!</code>. This can speed
up operations due to simplified algorithms and cache locality.</p>
<h4><a id="user-content-uniquesortindex" class="anchor" aria-hidden="true" href="#uniquesortindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>UniqueSortIndex</code></h4>
<p>Like <code>SortIndex</code>, except each value in the array can only appear once. Apart from
guaranteeing uniqueness, certain operations may be faster with a <code>UniqueSortIndex</code> than
with a <code>SortIndex</code>.</p>
<h3><a id="user-content-custom-acceleration-indices" class="anchor" aria-hidden="true" href="#custom-acceleration-indices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom acceleration indices</h3>
<p>It is simple for a user or another package to implement an <code>AbstractIndex</code> - for instance
a third-party package may provide a spatial acceleration index, or an index for fast
textual search. Simply overload <code>accelerate</code> (and optionally <code>accelerate!</code>) as well as the
operations you would like to accelerate, such as <code>filter</code>, <code>findall</code>, etc. Indices for
unique sets of values may inherit from <code>AbstractUniqueIndex &lt;: AbstractIndex</code>.</p>
<h2><a id="user-content-order-based-predicates-and-intervals" class="anchor" aria-hidden="true" href="#order-based-predicates-and-intervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Order-based predicates and Intervals</h2>
<p>In Julia, sorting is (typically) achieved using the <code>isless</code> and <code>isequal</code> predicates,
which are designed to provide a canonical total order for values. Currently, the
acceleration indices rely on these rather than the comparison operators <code>==</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, <code>&gt;=</code> and <code>!=</code>.</p>
<p>To make life easier, this package introduces a number of new convenience functions:</p>
<ul>
<li><code>islessequal(a, b) = isless(a, b) || isequal(a, b)</code></li>
<li><code>isgreater(a, b) = isless(b, a)</code></li>
<li><code>isgreaterequal(a, b) = isless(b, a) || isequal(a, b)</code></li>
</ul>
<p>Any of these support "currying", which is a simple syntax for creating a closure such as
<code>isequal(a) = (b -&gt; isequal(a, b))</code>. Such curried predicates are picked up by multiple
dispatch to accelerate operations like <code>findall(isequal(3.0), accelerated_array)</code>.</p>
<h3><a id="user-content-intervals" class="anchor" aria-hidden="true" href="#intervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Intervals</h3>
<p>It is common to want to search for all values in a range. This package introduces an
<code>Interval</code> type to represent the set of of values between two endpoints (with respect to
<code>isless</code> and <code>isequal</code>).</p>
<p>An interval is easily created with the <code>..</code> operator via the syntax <code>a .. b</code>. To find if
a value is in this range, use the <code>in</code> function/operator (alternatively spelled <code>âˆˆ</code>, which
can be inserted at the REPL via <code>\in &lt;TAB&gt;</code>). For example, <code>3 âˆˆ 0 .. 10</code> is <code>true</code> but
<code>13 âˆˆ 0 .. 10</code> is <code>false</code>.</p>
<p>By default, an interval is inclusive of its endpoints, such that <code>10 âˆˆ 0 .. 10</code>. An endpoint
can be excluded via the <code>lessthan</code> or <code>greaterthan</code> function, which returns a value almost equal
to but slightly less/greater than its input. An interval exclusive of both its endpoints can be
expressed as <code>greaterthan(a) .. lessthan(b)</code>. For example <code>10 âˆ‰ 0 .. lessthan(10)</code>.</p>
<h2><a id="user-content-work-remaining" class="anchor" aria-hidden="true" href="#work-remaining"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Work remaining</h2>
<p>This package is still young, and could support some more features, such as:</p>
<ul>
<li>Accelerate more functions, including those in <code>SplitApplyCombine</code>.</li>
<li>Figure out how to support <code>missing</code>, <code>==</code>, <code>&lt;</code> with either a hash- or sort-based index.</li>
<li>Move <code>Interval</code>s into their own package, potentially reconcile with <em>IntervalSets.jl</em>
(which currently uses <code>&lt;=</code> and <code>&gt;=</code> for comparisons).</li>
</ul>
</article></div>