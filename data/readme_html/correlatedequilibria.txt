<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-correlatedequilibriajl" class="anchor" aria-hidden="true" href="#correlatedequilibriajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CorrelatedEquilibria.jl</h1>
<p dir="auto">A package for finding correlated equilibria of normal form games.</p>
<h2 dir="auto"><a id="user-content-setting-up-a-game" class="anchor" aria-hidden="true" href="#setting-up-a-game"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting up a game</h2>
<h3 dir="auto"><a id="user-content-with-two-players" class="anchor" aria-hidden="true" href="#with-two-players"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>With two players</h3>
<p dir="auto">Create a game by specifying the matrix of payoffs. Here's a simple game of chicken:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="game = Game([
    (0, 0) (7, 2);
    (2, 7) (6, 6)
])"><pre>game <span class="pl-k">=</span> <span class="pl-c1">Game</span>([
    (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) (<span class="pl-c1">7</span>, <span class="pl-c1">2</span>);
    (<span class="pl-c1">2</span>, <span class="pl-c1">7</span>) (<span class="pl-c1">6</span>, <span class="pl-c1">6</span>)
])</pre></div>
<p dir="auto">You can also supply a separate payoff matrix for each player. The following defines the same game:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="game = Game(
    [0 7; 2 6],
    [0 2; 7 6] 
)"><pre>game <span class="pl-k">=</span> <span class="pl-c1">Game</span>(
    [<span class="pl-c1">0</span> <span class="pl-c1">7</span>; <span class="pl-c1">2</span> <span class="pl-c1">6</span>],
    [<span class="pl-c1">0</span> <span class="pl-c1">2</span>; <span class="pl-c1">7</span> <span class="pl-c1">6</span>] 
)</pre></div>
<p dir="auto">You can provide a single matrix to define a zero-sum game:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="game = Game([1 -1; -1 1])"><pre>game <span class="pl-k">=</span> <span class="pl-c1">Game</span>([<span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>])</pre></div>
<h3 dir="auto"><a id="user-content-with-n-players" class="anchor" aria-hidden="true" href="#with-n-players"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>With n players</h3>
<p dir="auto">The game construction syntax generalizes to an arbitrary number of players -- you can create an n-player game by providing an n-dimensional array of n-tuples. For example, the following is a 3-player game with 2 actions for each player:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="game = Game([
    (0, 1, 2) (3, 4, 5);
    (5, 4, 3) (2, 1, 0)
    ;;;
    (1, 2, 3) (4, 5, 6);
    (6, 5, 4) (3, 2, 1)
    ;;;
    (2, 3, 4) (5, 6, 7);
    (7, 6, 5) (4, 3, 2)
])"><pre>game <span class="pl-k">=</span> <span class="pl-c1">Game</span>([
    (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>) (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>);
    (<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>) (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
    ;;;
    (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>);
    (<span class="pl-c1">6</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>) (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
    ;;;
    (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>) (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>);
    (<span class="pl-c1">7</span>, <span class="pl-c1">6</span>, <span class="pl-c1">5</span>) (<span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
])</pre></div>
<p dir="auto">Providing a separate matrix for each player also works, with the following equivalent:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="game = Game(
    [
        0 3; 5 2 ;;;
        1 4; 6 3 ;;;
        2 5; 7 4
    ],
    [
        1 4; 4 1 ;;;
        2 5; 5 2 ;;;
        3 6; 6 3
    ],
    [
        2 5; 5 2 ;;;
        3 6; 6 3 ;;;
        4 7; 7 4
    ]
)"><pre>game <span class="pl-k">=</span> <span class="pl-c1">Game</span>(
    [
        <span class="pl-c1">0</span> <span class="pl-c1">3</span>; <span class="pl-c1">5</span> <span class="pl-c1">2</span> ;;;
        <span class="pl-c1">1</span> <span class="pl-c1">4</span>; <span class="pl-c1">6</span> <span class="pl-c1">3</span> ;;;
        <span class="pl-c1">2</span> <span class="pl-c1">5</span>; <span class="pl-c1">7</span> <span class="pl-c1">4</span>
    ],
    [
        <span class="pl-c1">1</span> <span class="pl-c1">4</span>; <span class="pl-c1">4</span> <span class="pl-c1">1</span> ;;;
        <span class="pl-c1">2</span> <span class="pl-c1">5</span>; <span class="pl-c1">5</span> <span class="pl-c1">2</span> ;;;
        <span class="pl-c1">3</span> <span class="pl-c1">6</span>; <span class="pl-c1">6</span> <span class="pl-c1">3</span>
    ],
    [
        <span class="pl-c1">2</span> <span class="pl-c1">5</span>; <span class="pl-c1">5</span> <span class="pl-c1">2</span> ;;;
        <span class="pl-c1">3</span> <span class="pl-c1">6</span>; <span class="pl-c1">6</span> <span class="pl-c1">3</span> ;;;
        <span class="pl-c1">4</span> <span class="pl-c1">7</span>; <span class="pl-c1">7</span> <span class="pl-c1">4</span>
    ]
)</pre></div>
<p dir="auto">In this case, you'll need to ensure that the matrices provided have the same dimensions, with the number of dimensions equal to the number of players.</p>
<h2 dir="auto"><a id="user-content-solving" class="anchor" aria-hidden="true" href="#solving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solving</h2>
<p dir="auto">Solving works by defining a linear program, which is solved using <a href="https://github.com/jump-dev/JuMP.jl"><code>JuMP.jl</code></a>.</p>
<p dir="auto">Simply pass the game you want to solve to the <code>findeq</code> function. The result is an array of probabilities for the mixed-strategy equilibrium.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# using the chicken game from above
game = Game([
    (0, 0) (7, 2);
    (2, 7) (6, 6)
])
eq = findeq(game)
# should get eq == [0.0 0.25; 0.25 0.5]"><pre><span class="pl-c"><span class="pl-c">#</span> using the chicken game from above</span>
game <span class="pl-k">=</span> <span class="pl-c1">Game</span>([
    (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) (<span class="pl-c1">7</span>, <span class="pl-c1">2</span>);
    (<span class="pl-c1">2</span>, <span class="pl-c1">7</span>) (<span class="pl-c1">6</span>, <span class="pl-c1">6</span>)
])
eq <span class="pl-k">=</span> <span class="pl-c1">findeq</span>(game)
<span class="pl-c"><span class="pl-c">#</span> should get eq == [0.0 0.25; 0.25 0.5]</span></pre></div>
<p dir="auto">By default, the result is the correlated equilibrium that maximizes total payoffs. If you want just any correlated equilibrium, you can set the keyword argument <code>best</code> to <code>false</code>, i.e., <code>findeq(game, best = false)</code>.</p>
</article></div>