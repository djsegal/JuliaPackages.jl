<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastexpmjl-a-fast-exponential-for-large-matrices" class="anchor" aria-hidden="true" href="#fastexpmjl-a-fast-exponential-for-large-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>fastExpm.jl a fast exponential for large matrices</h1>
<p>This is a fast implementation of exponential matrix for large full/sparse matrices, commonly found in (quantum) physics simulations.
It is significantly faster than Julia's exp implementation for matrices bigger than 16x16.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<h3><a id="user-content-needed" class="anchor" aria-hidden="true" href="#needed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Needed</h3>
<ul>
<li>LinearAlgebra</li>
<li>SparseArrays</li>
</ul>
<h3><a id="user-content-optinal" class="anchor" aria-hidden="true" href="#optinal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optinal</h3>
<ul>
<li>MKL.jl (<a href="https://github.com/JuliaLinearAlgebra/MKL.jl">https://github.com/JuliaLinearAlgebra/MKL.jl</a>), speeds up computations.</li>
</ul>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="fastExpm(A)
fastExpm(A; threshold=1e-6)
fastExpm(A; nonzero_tol=1e-14)
fastExpm(A; threshold=1e-6, nonzero_tol=1e-14)
"><pre><code>fastExpm(A)
fastExpm(A; threshold=1e-6)
fastExpm(A; nonzero_tol=1e-14)
fastExpm(A; threshold=1e-6, nonzero_tol=1e-14)
</code></pre></div>
<p>This function efficiently implements matrix exponentiation for sparse and full matrices.
This code is based on scaling, taylor series and squaring.
Currently works only on the CPU</p>
<p>Two optional keyword arguments are used to speed up the computation and preserve sparsity.</p>
<ul>
<li>"threshold" determines the threshold for the Taylor series (default 1e-6), e.g. fastExpm(A, threshold=1e-10)</li>
<li>"nonzero_tol" strips elements smaller than nonzero_tol at each computation step to preserve sparsity (default 1e-14) ,e.g. fastExpm(A, nonzero_tol=1e-10)</li>
</ul>
<p>This code was originally developed by Ilya Kuprov (<a href="http://spindynamics.org/" rel="nofollow">http://spindynamics.org/</a>) and has been adapted by F. Mentink-Vigier (<a href="mailto:fmentink@magnet.fsu.edu">fmentink@magnet.fsu.edu</a>)
and Murari Soundararajan (<a href="mailto:murari@magnet.fsu.edu">murari@magnet.fsu.edu</a>). If you use this code, please cite</p>
<ul>
<li>H. J. Hogben, M. Krzystyniak, G. T. P. Charnock, P. J. Hore and I. Kuprov, Spinach – A software library for simulation of spin dynamics in large spin systems, J. Magn. Reson., 2011, 208, 179–194.</li>
<li>I. Kuprov, Diagonalization-free implementation of spin relaxation theory for large spin systems., J. Magn. Reson., 2011, 209, 31–38.</li>
</ul>
</article></div>