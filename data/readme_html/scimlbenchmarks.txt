<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-scimlbenchmarksjl-benchmarks-for-scientific-machine-learning-sciml-and-equation-solvers" class="anchor" aria-hidden="true" href="#scimlbenchmarksjl-benchmarks-for-scientific-machine-learning-sciml-and-equation-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SciMLBenchmarks.jl: Benchmarks for Scientific Machine Learning (SciML) and Equation Solvers</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/SciMLBenchmarksOutput/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://buildkite.com/julialang/scimlbenchmarks-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d0ad79b2c424285b1495174be68f13beb7550a6c122ed74b0233b128e3d30748/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f32663462353730386266303938633735636531393366303462336633633430343766393933663065333633653331346336312e737667" alt="Build status" data-canonical-src="https://badge.buildkite.com/2f4b5708bf098c75ce193f04b3f3c4047f993f0e363e314c61.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">SciMLBenchmarks.jl holds webpages, pdfs, and notebooks showing the benchmarks
for the SciML Scientific Machine Learning Software ecosystem, including:</p>
<ul dir="auto">
<li>Benchmarks of equation solver implementations</li>
<li>Speed and robustness comparisons of methods for parameter estimation / inverse problems</li>
<li>Training universal differential equations (and subsets like neural ODEs)</li>
<li>Training of physics-informed neural networks (PINNs)</li>
<li>Surrogate comparisons, including radial basis functions, neural operators (DeepONets, Fourier Neural Operators), and more</li>
</ul>
<p dir="auto">The SciML Bench suite is made to be a comprehensive open source benchmark from the ground up, covering the methods of
computational science and scientific computing all the way to AI for science.</p>
<h2 dir="auto"><a id="user-content-rules-optimal-fair-and-reproducible" class="anchor" aria-hidden="true" href="#rules-optimal-fair-and-reproducible"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rules: Optimal, Fair, and Reproducible</h2>
<p dir="auto">These benchmarks are meant to represent good optimized coding style. Benchmarks are preferred to be run on the provided open
benchmarking hardware for full reproducibility (though in some cases, such as with language barriers, this can be difficult).
Each benchmark is documented with the compute devices used along with package versions for necessary reproduction. These
benchmarks attempt to measure in terms of work-precision efficiency, either timing with an approximately matching the error
or building work-precision diagrams for direct comparison of speed at given error tolerances.</p>
<p dir="auto"><strong>If any of the code from any of the languages can be improved, please open a pull request</strong>.</p>
<h2 dir="auto"><a id="user-content-results" class="anchor" aria-hidden="true" href="#results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Results</h2>
<p dir="auto">To view the results of the SciML Benchmarks, go to <a href="https://benchmarks.sciml.ai/stable/" rel="nofollow">benchmarks.sciml.ai</a>. By default, this
will lead to the latest tagged version of the benchmarks. To see the in-development version of the benchmarks, go to
<a href="https://benchmarks.sciml.ai/dev/" rel="nofollow">https://benchmarks.sciml.ai/dev/</a>.</p>
<p dir="auto">Static outputs in pdf, markdown, and html reside in <a href="https://github.com/SciML/SciMLBenchmarksOutput">SciMLBenchmarksOutput</a>.</p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">To cite the SciML Benchmarks, please cite the following:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{rackauckas2019confederated,
  title={Confederated modular differential equation APIs for accelerated algorithm development and benchmarking},
  author={Rackauckas, Christopher and Nie, Qing},
  journal={Advances in Engineering Software},
  volume={132},
  pages={1--6},
  year={2019},
  publisher={Elsevier}
}

@article{DifferentialEquations.jl-2017,
 author = {Rackauckas, Christopher and Nie, Qing},
 doi = {10.5334/jors.151},
 journal = {The Journal of Open Research Software},
 keywords = {Applied Mathematics},
 note = {Exported from https://app.dimensions.ai on 2019/05/05},
 number = {1},
 pages = {},
 title = {DifferentialEquations.jl â€“ A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia},
 url = {https://app.dimensions.ai/details/publication/pub.1085583166 and http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/galley/245/download/},
 volume = {5},
 year = {2017}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">rackauckas2019confederated</span>,
  <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Confederated modular differential equation APIs for accelerated algorithm development and benchmarking<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Rackauckas, Christopher and Nie, Qing<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span>=<span class="pl-s"><span class="pl-pds">{</span>Advances in Engineering Software<span class="pl-pds">}</span></span>,
  <span class="pl-s">volume</span>=<span class="pl-s"><span class="pl-pds">{</span>132<span class="pl-pds">}</span></span>,
  <span class="pl-s">pages</span>=<span class="pl-s"><span class="pl-pds">{</span>1--6<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2019<span class="pl-pds">}</span></span>,
  <span class="pl-s">publisher</span>=<span class="pl-s"><span class="pl-pds">{</span>Elsevier<span class="pl-pds">}</span></span>
}

<span class="pl-k">@article</span>{<span class="pl-en">DifferentialEquations.jl-2017</span>,
 <span class="pl-s">author</span> = <span class="pl-s"><span class="pl-pds">{</span>Rackauckas, Christopher and Nie, Qing<span class="pl-pds">}</span></span>,
 <span class="pl-s">doi</span> = <span class="pl-s"><span class="pl-pds">{</span>10.5334/jors.151<span class="pl-pds">}</span></span>,
 <span class="pl-s">journal</span> = <span class="pl-s"><span class="pl-pds">{</span>The Journal of Open Research Software<span class="pl-pds">}</span></span>,
 <span class="pl-s">keywords</span> = <span class="pl-s"><span class="pl-pds">{</span>Applied Mathematics<span class="pl-pds">}</span></span>,
 <span class="pl-s">note</span> = <span class="pl-s"><span class="pl-pds">{</span>Exported from https://app.dimensions.ai on 2019/05/05<span class="pl-pds">}</span></span>,
 <span class="pl-s">number</span> = <span class="pl-s"><span class="pl-pds">{</span>1<span class="pl-pds">}</span></span>,
 <span class="pl-s">pages</span> = <span class="pl-s"><span class="pl-pds">{</span><span class="pl-pds">}</span></span>,
 <span class="pl-s">title</span> = <span class="pl-s"><span class="pl-pds">{</span>DifferentialEquations.jl â€“ A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia<span class="pl-pds">}</span></span>,
 <span class="pl-s">url</span> = <span class="pl-s"><span class="pl-pds">{</span>https://app.dimensions.ai/details/publication/pub.1085583166 and http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/galley/245/download/<span class="pl-pds">}</span></span>,
 <span class="pl-s">volume</span> = <span class="pl-s"><span class="pl-pds">{</span>5<span class="pl-pds">}</span></span>,
 <span class="pl-s">year</span> = <span class="pl-s"><span class="pl-pds">{</span>2017<span class="pl-pds">}</span></span>
}</pre></div>
<h2 dir="auto"><a id="user-content-current-summary" class="anchor" aria-hidden="true" href="#current-summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Summary</h2>
<p dir="auto">The following is a quick summary of the benchmarks. These paint broad strokes
over the set of tested equations and some specific examples may differ.</p>
<h3 dir="auto"><a id="user-content-non-stiff-odes" class="anchor" aria-hidden="true" href="#non-stiff-odes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-Stiff ODEs</h3>
<ul dir="auto">
<li>OrdinaryDiffEq.jl's methods are the most efficient by a good amount</li>
<li>The <code>Vern</code> methods tend to do the best in every benchmark of this category</li>
<li>At lower tolerances, <code>Tsit5</code> does well consistently.</li>
<li>ARKODE and Hairer's <code>dopri5</code>/<code>dop853</code> perform very similarly, but are both
far less efficient than the <code>Vern</code> methods.</li>
<li>The multistep methods, <code>CVODE_Adams</code> and <code>lsoda</code>, tend to not do very well.</li>
<li>The ODEInterface multistep method <code>ddeabm</code> does not do as well as the other
multistep methods.</li>
<li>ODE.jl's methods are not able to consistently solve the problems.</li>
<li>Fixed time step methods are less efficient than the adaptive methods.</li>
</ul>
<h3 dir="auto"><a id="user-content-stiff-odes" class="anchor" aria-hidden="true" href="#stiff-odes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stiff ODEs</h3>
<ul dir="auto">
<li>In this category, the best methods are much more problem dependent.</li>
<li>For smaller problems:
<ul dir="auto">
<li><code>Rosenbrock23</code>, <code>lsoda</code>, and <code>TRBDF2</code> tend to be the most efficient at high
tolerances.</li>
<li><code>Rodas4</code> and <code>Rodas5</code> tend to be the most efficient at low tolerances.</li>
</ul>
</li>
<li>For larger problems (Filament PDE):
<ul dir="auto">
<li><code>QNDF</code> and <code>FBDF</code> does the best at all normal tolerances.</li>
<li>The ESDIRK methods like <code>TRBDF2</code> and <code>KenCarp4</code> can come close.</li>
</ul>
</li>
<li><code>radau</code> is always the most efficient when tolerances go to the low extreme
(<code>1e-13</code>)</li>
<li>Fixed time step methods tend to diverge on every tested problem because the
high stiffness results in divergence of the Newton solvers.</li>
<li>ARKODE is very inconsistent and requires a lot of tweaking in order to not
diverge on many of the tested problems. When it doesn't diverge, the similar
algorithms in OrdinaryDiffEq.jl (<code>KenCarp4</code>) are much more efficient in most
cases.</li>
<li>ODE.jl and GeometricIntegrators.jl fail to converge on any of the tested
problems.</li>
</ul>
<h3 dir="auto"><a id="user-content-dynamical-odes" class="anchor" aria-hidden="true" href="#dynamical-odes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dynamical ODEs</h3>
<ul dir="auto">
<li>Higher order (generally order &gt;=6) symplectic integrators are much more
efficient than the lower order counterparts.</li>
<li>For high accuracy, using a symplectic integrator is not preferred. Their extra
cost is not necessary since the other integrators are able to not drift simply
due to having low enough error.</li>
<li>In this class, the <code>DPRKN</code> methods are by far the most efficient. The <code>Vern</code>
methods do well for not being specific to the domain.</li>
</ul>
<h3 dir="auto"><a id="user-content-non-stiff-sdes" class="anchor" aria-hidden="true" href="#non-stiff-sdes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-Stiff SDEs</h3>
<ul dir="auto">
<li>For simple 1-dimensional SDEs at low accuracy, the <code>EM</code> and <code>RKMil</code> methods
can do well. Beyond that, they are simply outclassed.</li>
<li>The <code>SRA</code> and <code>SRI</code> methods both are very similar within-class on the simple
SDEs.</li>
<li><code>SRA3</code> is the most efficient when applicable and the tolerances are low.</li>
<li>Generally, only low accuracy is necessary to get to sampling error of the mean.</li>
<li>The adaptive method is very conservative with error estimates.</li>
</ul>
<h3 dir="auto"><a id="user-content-stiff-sdes" class="anchor" aria-hidden="true" href="#stiff-sdes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stiff SDEs</h3>
<ul dir="auto">
<li>The high order adaptive methods (<code>SRIW1</code>) generally do well on stiff problems.</li>
<li>The "standard" low-order implicit methods, <code>ImplicitEM</code> and <code>ImplicitRK</code>, do
not do well on all stiff problems. Some exceptions apply to well-behaved
problems like the Stochastic Heat Equation.</li>
</ul>
<h3 dir="auto"><a id="user-content-non-stiff-ddes" class="anchor" aria-hidden="true" href="#non-stiff-ddes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-Stiff DDEs</h3>
<ul dir="auto">
<li>The efficiency ranking tends to match the ODE Tests, but the cutoff from
low to high tolerance is lower.</li>
<li><code>Tsit5</code> does well in a large class of problems here.</li>
<li>The <code>Vern</code> methods do well in low tolerance cases.</li>
</ul>
<h3 dir="auto"><a id="user-content-stiff-ddes" class="anchor" aria-hidden="true" href="#stiff-ddes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stiff DDEs</h3>
<ul dir="auto">
<li>The Rosenbrock methods, specifically <code>Rodas5</code>, perform well.</li>
</ul>
<h3 dir="auto"><a id="user-content-parameter-estimation" class="anchor" aria-hidden="true" href="#parameter-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parameter Estimation</h3>
<ul dir="auto">
<li>Broadly two different approaches have been used, Bayesian Inference and Optimisation
algorithms.</li>
<li>In general it seems that the optimisation algorithms perform more accurately but that can be
attributed to the larger number of data points being used in the optimisation cases, Bayesian
approach tends to be slower of the two and hence lesser data points are used, accuracy can
increase if proper data is used.</li>
<li>Within the different available optimisation algorithms, BBO from the BlackBoxOptim package and GN_CRS2_LM
for the global case while LD_SLSQP,LN_BOBYQA and LN_NELDERMEAD for the local case from the NLopt package
perform the best.</li>
<li>Another algorithm being used is the <a href="https://github.com/timholy/QuadDIRECT.jl">QuadDIRECT</a> algorithm, it gives very good results in the shorter problem case
but doesn't do very well in the case of the longer problems.</li>
<li>The choice of global versus local optimization make a huge difference in the timings. BBO tends to find
the correct solution for a global optimization setup. For local optimization, most methods in NLopt,
like :LN_BOBYQA, solve the problem very fast but require a good initial condition.</li>
<li>The different backends options available for Bayesian method offer some tradeoffs beteween
time, accuracy and control. It is observed that sufficiently high accuracy can be observed with
any of the backends with the fine tuning of stepsize, constraints on the parameters, tightness of the
priors and number of iterations being passed.</li>
</ul>
<h2 dir="auto"><a id="user-content-interactive-notebooks" class="anchor" aria-hidden="true" href="#interactive-notebooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interactive Notebooks</h2>
<p dir="auto">To generate the interactive notebooks, first install the SciMLBenchmarks, instantiate the
environment, and then run <code>SciMLBenchmarks.open_notebooks()</code>. This looks as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add SciMLBenchmarks#master
]activate SciMLBenchmarks
]instantiate
using SciMLBenchmarks
SciMLBenchmarks.open_notebooks()"><pre>]add SciMLBenchmarks<span class="pl-c"><span class="pl-c">#</span>master</span>
]activate SciMLBenchmarks
]instantiate
<span class="pl-k">using</span> SciMLBenchmarks
SciMLBenchmarks<span class="pl-k">.</span><span class="pl-c1">open_notebooks</span>()</pre></div>
<p dir="auto">The benchmarks will be generated at your <code>pwd()</code> in a folder called <code>generated_notebooks</code>.</p>
<p dir="auto">Note that when running the benchmarks, the packages are not automatically added. Thus you
will need to add the packages manually or use the internal Project/Manifest tomls to
instantiate the correct packages. This can be done by activating the folder of the benchmarks.
For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.activate(joinpath(pkgdir(SciMLBenchmarks),&quot;benchmarks&quot;,&quot;NonStiffODE&quot;))
Pkg.instantiate()"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(SciMLBenchmarks),<span class="pl-s"><span class="pl-pds">"</span>benchmarks<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NonStiffODE<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">instantiate</span>()</pre></div>
<p dir="auto">will add all of the packages required to run any benchmark in the <code>NonStiffODE</code> folder.</p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">All of the files are generated from the Weave.jl files in the <code>benchmarks</code> folder. The generation process runs automatically,
and thus one does not necessarily need to test the Weave process locally. Instead, simply open a PR that adds/updates a
file in the "benchmarks" folder and the PR will generate the benchmark on demand. Its artifacts can then be inspected in the
Buildkite as described below before merging. Note that it will use the Project.toml and Manifest.toml of the subfolder, so
any changes to dependencies requires that those are updated.</p>
<h3 dir="auto"><a id="user-content-reporting-bugs-and-issues" class="anchor" aria-hidden="true" href="#reporting-bugs-and-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reporting Bugs and Issues</h3>
<p dir="auto">Report any bugs or issues at <a href="https://github.com/SciML/SciMLBenchmarks.jl">the SciMLBenchmarks repository</a>.</p>
<h3 dir="auto"><a id="user-content-inspecting-benchmark-results" class="anchor" aria-hidden="true" href="#inspecting-benchmark-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inspecting Benchmark Results</h3>
<p dir="auto">To see benchmark results before merging, click into the BuildKite, click onto
Artifacts, and then investigate the trained results.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/1814174/118359358-02ddc980-b551-11eb-8a9b-24de947cefee.PNG"><img src="https://user-images.githubusercontent.com/1814174/118359358-02ddc980-b551-11eb-8a9b-24de947cefee.PNG" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-manually-generating-files" class="anchor" aria-hidden="true" href="#manually-generating-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Manually Generating Files</h3>
<p dir="auto">All of the files are generated from the Weave.jl files in the <code>benchmarks</code> folder. To run the generation process, do for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]activate SciMLBenchmarks # Get all of the packages
using SciMLBenchmarks
SciMLBenchmarks.weave_file(joinpath(pkgdir(SciMLBenchmarks),&quot;benchmarks&quot;,&quot;NonStiffODE&quot;),&quot;linear_wpd.jmd&quot;)"><pre>]activate SciMLBenchmarks <span class="pl-c"><span class="pl-c">#</span> Get all of the packages</span>
<span class="pl-k">using</span> SciMLBenchmarks
SciMLBenchmarks<span class="pl-k">.</span><span class="pl-c1">weave_file</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(SciMLBenchmarks),<span class="pl-s"><span class="pl-pds">"</span>benchmarks<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NonStiffODE<span class="pl-pds">"</span></span>),<span class="pl-s"><span class="pl-pds">"</span>linear_wpd.jmd<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">To generate all of the files in a folder, for example, run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SciMLBenchmarks.weave_folder(joinpath(pkgdir(SciMLBenchmarks),&quot;benchmarks&quot;,&quot;NonStiffODE&quot;))"><pre>SciMLBenchmarks<span class="pl-k">.</span><span class="pl-c1">weave_folder</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(SciMLBenchmarks),<span class="pl-s"><span class="pl-pds">"</span>benchmarks<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NonStiffODE<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">To generate all of the notebooks, do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SciMLBenchmarks.weave_all()"><pre>SciMLBenchmarks<span class="pl-k">.</span><span class="pl-c1">weave_all</span>()</pre></div>
<p dir="auto">Each of the benchmarks displays the computer characteristics at the bottom of
the benchmark. Since performance-necessary computations are normally performed on
compute clusters, the official benchmarks use a workstation with an
AMD EPYC 7502 32-Core Processor @ 2.50GHz to match the performance characteristics of
a standard node in a high performance computing (HPC) cluster or cloud computing
setup.</p>
</article></div>