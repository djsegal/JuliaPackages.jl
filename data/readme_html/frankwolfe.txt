<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-frankwolfejl" class="anchor" aria-hidden="true" href="#frankwolfejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FrankWolfe.jl</h1>
<p dir="auto"><a href="https://github.com/ZIB-IOL/FrankWolfe.jl/actions"><img src="https://github.com/ZIB-IOL/FrankWolfe.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://zib-iol.github.io/FrankWolfe.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://zib-iol.github.io/FrankWolfe.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ZIB-IOL/FrankWolfe.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/58b3a7e741a0867ff93c17df7320fb9b4c0e617203836c7669e16997b1240e90/68747470733a2f2f636f6465636f762e696f2f67682f5a49422d494f4c2f4672616e6b576f6c66652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ZIB-IOL/FrankWolfe.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=FrankWolfe" rel="nofollow"><img src="https://camo.githubusercontent.com/2428c5bd91c618bd5f171b715d27f49d59831f3f1d8b9a577127f1b43481eff0/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f4672616e6b576f6c6665" alt="Genie Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/FrankWolfe" style="max-width: 100%;"></a></p>
<p dir="auto">This package is a toolbox for Frank-Wolfe and conditional gradients algorithms.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Frank-Wolfe algorithms were designed to solve optimization problems of the form <code>min_{x ∈ C} f(x)</code>, where <code>f</code> is a differentiable convex function and <code>C</code> is a convex and compact set.
They are especially useful when we know how to optimize a linear function over <code>C</code> in an efficient way.</p>
<p dir="auto">A paper presenting the package with mathematical explanations and numerous examples can be found here:</p>
<blockquote>
<p dir="auto"><a href="https://arxiv.org/abs/2104.06675" rel="nofollow">FrankWolfe.jl: A high-performance and flexible toolbox for Frank-Wolfe algorithms and Conditional Gradients</a>.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The most recent release is available via the julia package manager, e.g., with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;FrankWolfe&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FrankWolfe<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or the master branch:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(url=&quot;https://github.com/ZIB-IOL/FrankWolfe.jl&quot;, rev=&quot;master&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/ZIB-IOL/FrankWolfe.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Let's say we want to minimize the Euclidian norm over the probability simplex <code>Δ</code>. Using <code>FrankWolfe.jl</code>, this is what the code looks like (in dimension 3):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FrankWolfe

julia&gt; f(p) = sum(abs2, p)  # objective function

julia&gt; grad!(storage, p) = storage .= 2p  # in-place gradient computation

# # function d ⟻ argmin ⟨p,d⟩ st. p ∈ Δ
julia&gt; lmo = FrankWolfe.ProbabilitySimplexOracle(1.)

julia&gt; p0 = [1., 0., 0.]

julia&gt; p_opt, _ = frank_wolfe(f, grad!, lmo, p0; verbose=true);

Vanilla Frank-Wolfe Algorithm.
MEMORY_MODE: FrankWolfe.InplaceEmphasis() STEPSIZE: Adaptive EPSILON: 1.0e-7 MAXITERATION: 10000 TYPE: Float64
MOMENTUM: nothing GRADIENTTYPE: Nothing
[ Info: In memory_mode memory iterates are written back into x0!

-------------------------------------------------------------------------------------------------
  Type     Iteration         Primal           Dual       Dual Gap           Time         It/sec
-------------------------------------------------------------------------------------------------
     I             1   1.000000e+00  -1.000000e+00   2.000000e+00   0.000000e+00            Inf
  Last            24   3.333333e-01   3.333332e-01   9.488992e-08   1.533181e+00   1.565373e+01
-------------------------------------------------------------------------------------------------

julia&gt; p_opt
3-element Vector{Float64}:
 0.33333334349923327
 0.33333332783841896
 0.3333333286623478"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FrankWolfe

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(p) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(abs2, p)  <span class="pl-c"><span class="pl-c">#</span> objective function</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">grad!</span>(storage, p) <span class="pl-k">=</span> storage <span class="pl-k">.=</span> <span class="pl-c1">2</span>p  <span class="pl-c"><span class="pl-c">#</span> in-place gradient computation</span>

<span class="pl-c"><span class="pl-c">#</span> # function d ⟻ argmin ⟨p,d⟩ st. p ∈ Δ</span>
julia<span class="pl-k">&gt;</span> lmo <span class="pl-k">=</span> FrankWolfe<span class="pl-k">.</span><span class="pl-c1">ProbabilitySimplexOracle</span>(<span class="pl-c1">1.</span>)

julia<span class="pl-k">&gt;</span> p0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>]

julia<span class="pl-k">&gt;</span> p_opt, _ <span class="pl-k">=</span> <span class="pl-c1">frank_wolfe</span>(f, grad!, lmo, p0; verbose<span class="pl-k">=</span><span class="pl-c1">true</span>);

Vanilla Frank<span class="pl-k">-</span>Wolfe Algorithm.
MEMORY_MODE<span class="pl-k">:</span> FrankWolfe<span class="pl-k">.</span><span class="pl-c1">InplaceEmphasis</span>() STEPSIZE<span class="pl-k">:</span> Adaptive EPSILON<span class="pl-k">:</span> <span class="pl-c1">1.0e-7</span> MAXITERATION<span class="pl-k">:</span> <span class="pl-c1">10000</span> TYPE<span class="pl-k">:</span> Float64
MOMENTUM<span class="pl-k">:</span> <span class="pl-c1">nothing</span> GRADIENTTYPE<span class="pl-k">:</span> Nothing
[ Info<span class="pl-k">:</span> In memory_mode memory iterates are written back into x0!

<span class="pl-k">-------------------------------------------------------------------------------------------------</span>
  Type     Iteration         Primal           Dual       Dual Gap           Time         It<span class="pl-k">/</span>sec
<span class="pl-k">-------------------------------------------------------------------------------------------------</span>
     I             <span class="pl-c1">1</span>   <span class="pl-c1">1.000000e+00</span>  <span class="pl-k">-</span><span class="pl-c1">1.000000e+00</span>   <span class="pl-c1">2.000000e+00</span>   <span class="pl-c1">0.000000e+00</span>            <span class="pl-c1">Inf</span>
  Last            <span class="pl-c1">24</span>   <span class="pl-c1">3.333333e-01</span>   <span class="pl-c1">3.333332e-01</span>   <span class="pl-c1">9.488992e-08</span>   <span class="pl-c1">1.533181e+00</span>   <span class="pl-c1">1.565373e+01</span>
<span class="pl-k">-------------------------------------------------------------------------------------------------</span>

julia<span class="pl-k">&gt;</span> p_opt
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.33333334349923327</span>
 <span class="pl-c1">0.33333332783841896</span>
 <span class="pl-c1">0.3333333286623478</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation-and-examples" class="anchor" aria-hidden="true" href="#documentation-and-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation and examples</h2>
<p dir="auto">To explore the content of the package, go to the <a href="https://zib-iol.github.io/FrankWolfe.jl/dev/" rel="nofollow">documentation</a>.</p>
<p dir="auto">Beyond those presented in the documentation, many more use cases are implemented in the <code>examples</code> folder.
To run them, you will need to activate the test environment, which can be done simply with <a href="https://github.com/JuliaTesting/TestEnv.jl">TestEnv.jl</a> (we recommend you install it in your base Julia).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TestEnv

julia&gt; TestEnv.activate()
&quot;/tmp/jl_Ux8wKE/Project.toml&quot;

# necessary for plotting
julia&gt; include(&quot;examples/plot_utils.jl&quot;)
julia&gt; include(&quot;examples/linear_regression.jl&quot;)
..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TestEnv

julia<span class="pl-k">&gt;</span> TestEnv<span class="pl-k">.</span><span class="pl-c1">activate</span>()
<span class="pl-s"><span class="pl-pds">"</span>/tmp/jl_Ux8wKE/Project.toml<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> necessary for plotting</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/plot_utils.jl<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/linear_regression.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span></pre></div>
<p dir="auto">If you need the plotting utilities in your own code, make sure Plots.jl is included in your current project and run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
using FrankWolfe

include(joinpath(dirname(pathof(FrankWolfe)), &quot;../examples/plot_utils.jl&quot;))"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> FrankWolfe

<span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(FrankWolfe)), <span class="pl-s"><span class="pl-pds">"</span>../examples/plot_utils.jl<span class="pl-pds">"</span></span>))</pre></div>
</article></div>