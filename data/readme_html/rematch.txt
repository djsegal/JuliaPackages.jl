<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rematch" class="anchor" aria-hidden="true" href="#rematch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rematch</h1>
<p><a href="https://travis-ci.org/RelationalAI-oss/Rematch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4c675e2429373fcf7d11476735e8239feefbfad28ceb8c960c0054545706ff0c/68747470733a2f2f7472617669732d63692e6f72672f52656c6174696f6e616c41492d6f73732f52656d617463682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/RelationalAI-oss/Rematch.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Pattern matching.</p>
<p><code>Rematch.jl</code> provides a syntax sugar for matching julia values against syntactic
patterns. The <code>@match</code> macro expands a pattern-matching syntax into a series of
if-elses that check the types and structure of the provided value, allowing you
to more simply write checks that describe your intent.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Rematch

julia&gt; struct Foo
           x::Int64
           y::String
       end

julia&gt; f(x) = @match x begin
           _::String =&gt; :string
           [a,a,a] =&gt; (:all_the_same, a)
           [a,bs...,c] =&gt; (:at_least_2, a, bs, c)
           Foo(x, &quot;foo&quot;) where x &gt; 1 =&gt; :foo
       end
f (generic function with 1 method)

julia&gt; f(&quot;foo&quot;)
:string

julia&gt; f([1,1,1])
(:all_the_same, 1)

julia&gt; f([1,1])
(:at_least_2, 1, Int64[], 1)

julia&gt; f([1,2,3,4])
(:at_least_2, 1, [2, 3], 4)

julia&gt; f([1])
ERROR: Rematch.MatchFailure([1])
Stacktrace:
 [1] macro expansion at /home/jamie/.julia/v0.6/Rematch/src/Rematch.jl:173 [inlined]
 [2] f(::Array{Int64,1}) at ./REPL[3]:1

julia&gt; f(Foo(2, &quot;foo&quot;))
:foo

julia&gt; f(Foo(0, &quot;foo&quot;))
ERROR: Rematch.MatchFailure(Foo(0, &quot;foo&quot;))
Stacktrace:
 [1] macro expansion at /home/jamie/.julia/v0.6/Rematch/src/Rematch.jl:173 [inlined]
 [2] f(::Foo) at ./REPL[13]:1

julia&gt; f(Foo(2, &quot;not a foo&quot;))
ERROR: Rematch.MatchFailure(Foo(2, &quot;not a foo&quot;))
Stacktrace:
 [1] macro expansion at /home/jamie/.julia/v0.6/Rematch/src/Rematch.jl:173 [inlined]
 [2] f(::Foo) at ./REPL[13]:1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Rematch

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo
           x<span class="pl-k">::</span><span class="pl-c1">Int64</span>
           y<span class="pl-k">::</span><span class="pl-c1">String</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">@match</span> x <span class="pl-k">begin</span>
           _<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:string</span>
           [a,a,a] <span class="pl-k">=&gt;</span> (<span class="pl-c1">:all_the_same</span>, a)
           [a,bs<span class="pl-k">...</span>,c] <span class="pl-k">=&gt;</span> (<span class="pl-c1">:at_least_2</span>, a, bs, c)
           <span class="pl-c1">Foo</span>(x, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>) <span class="pl-k">where</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:foo</span>
       <span class="pl-k">end</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>)
<span class="pl-c1">:string</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>])
(<span class="pl-c1">:all_the_same</span>, <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>])
(<span class="pl-c1">:at_least_2</span>, <span class="pl-c1">1</span>, Int64[], <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
(<span class="pl-c1">:at_least_2</span>, <span class="pl-c1">1</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>])
ERROR<span class="pl-k">:</span> Rematch<span class="pl-k">.</span><span class="pl-c1">MatchFailure</span>([<span class="pl-c1">1</span>])
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-k">macro</span> expansion at <span class="pl-k">/</span>home<span class="pl-k">/</span>jamie<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">6</span><span class="pl-k">/</span>Rematch<span class="pl-k">/</span>src<span class="pl-k">/</span>Rematch<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">173</span> [inlined]
 [<span class="pl-c1">2</span>] <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>))
<span class="pl-c1">:foo</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>))
ERROR<span class="pl-k">:</span> Rematch<span class="pl-k">.</span><span class="pl-c1">MatchFailure</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>))
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-k">macro</span> expansion at <span class="pl-k">/</span>home<span class="pl-k">/</span>jamie<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">6</span><span class="pl-k">/</span>Rematch<span class="pl-k">/</span>src<span class="pl-k">/</span>Rematch<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">173</span> [inlined]
 [<span class="pl-c1">2</span>] <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">13</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>not a foo<span class="pl-pds">"</span></span>))
ERROR<span class="pl-k">:</span> Rematch<span class="pl-k">.</span><span class="pl-c1">MatchFailure</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>not a foo<span class="pl-pds">"</span></span>))
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-k">macro</span> expansion at <span class="pl-k">/</span>home<span class="pl-k">/</span>jamie<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>v0.<span class="pl-c1">6</span><span class="pl-k">/</span>Rematch<span class="pl-k">/</span>src<span class="pl-k">/</span>Rematch<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">173</span> [inlined]
 [<span class="pl-c1">2</span>] <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Foo</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">13</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-assignment-syntax" class="anchor" aria-hidden="true" href="#assignment-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Assignment Syntax</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@match pattern = value
"><pre><span class="pl-c1">@match</span> pattern <span class="pl-k">=</span> value</pre></div>
<p>If value matches pattern, binds variables and returns <code>value</code>. Otherwise, throws <code>MatchFailure</code>.</p>
<p>After evaluation, any variable names used within <code>pattern</code> will be bound as new variables in the enclosing scope. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @match Foo(x,2) = Foo(1,2)
Foo(1,2)

julia&gt; x
1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@match</span> <span class="pl-en">Foo</span>(x,<span class="pl-c1">2</span>) <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-case-syntax" class="anchor" aria-hidden="true" href="#case-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case Syntax</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@match value begin
    pattern1 =&gt; result1
    pattern2 =&gt; result2
    ...
end
"><pre><span class="pl-c1">@match</span> value <span class="pl-k">begin</span>
    pattern1 <span class="pl-k">=&gt;</span> result1
    pattern2 <span class="pl-k">=&gt;</span> result2
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p>Returns <code>result</code> for the first matching pattern. If there are no matching patterns, throws <code>MatchFailure</code>.</p>
<p>Note that unlike the <em>assignment syntax</em>, this does not create any variable bindings outside the match macro.</p>
<h2><a id="user-content-patterns" class="anchor" aria-hidden="true" href="#patterns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Patterns</h2>
<ul>
<li><code>_</code> matches anything</li>
<li><code>foo</code> matches anything, binds value to <code>foo</code></li>
<li><code>Foo(x,y,z)</code> matches structs of type <code>Foo</code> with fields matching <code>x,y,z</code></li>
<li><code>Foo(y=1)</code> matches structs of type <code>Foo</code> whose <code>y</code> field equals <code>1</code></li>
<li><code>[x,y,z]</code> matches <code>AbstractArray</code>s with 3 entries matching <code>x,y,z</code></li>
<li><code>(x,y,z)</code> matches <code>Tuple</code>s with 3 entries matching <code>x,y,z</code></li>
<li><code>[x,y...,z]</code> matches <code>AbstractArray</code>s with at least 2 entries, where <code>x</code> matches the first entry, <code>z</code> matches the last entry and <code>y</code> matches the remaining entries.</li>
<li><code>(x,y...,z)</code> matches <code>Tuple</code>s with at least 2 entries, where <code>x</code> matches the first entry, <code>z</code> matches the last entry and <code>y</code> matches the remaining entries.</li>
<li><code>_::T</code> matches any subtype (<code>isa</code>) of T</li>
<li><code>x || y</code> matches values which match either <code>x</code> or <code>y</code> (only variables which exist in both branches will be bound)</li>
<li><code>x &amp;&amp; y</code> matches values which match both <code>x</code> and <code>y</code></li>
<li><code>x where condition</code> matches only if <code>condition</code> is true (<code>condition</code> may use any variables that occur earlier in the pattern eg <code>(x, y, z where x + y &gt; z)</code>)</li>
<li>Anything else is treated as a constant and tested for equality</li>
<li>Expressions can be interpolated in as constants via standard interpolation syntax <code>$(x)</code></li>
</ul>
<p>Patterns can be nested arbitrarily.</p>
<p>Repeated variables only match if they are equal (<code>==</code>). For example <code>(x,x)</code> matches <code>(1,1)</code> but not <code>(1,2)</code>.</p>
<h2><a id="user-content-differences-from-matchjl" class="anchor" aria-hidden="true" href="#differences-from-matchjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differences from <a href="https://github.com/kmsquire/Match.jl">Match.jl</a></h2>
<p>This package was branched from the original <a href="https://github.com/kmsquire/Match.jl">Match.jl</a>. It now differs in several ways:</p>
<ul>
<li>If no branches are matched, throws <code>MatchFailure</code> instead of returning nothing.</li>
<li>Matching against a struct with the wrong number of fields produces an error instead of silently failing.</li>
<li>Repeated variables require equality, ie <code>@match (1,2) begin (x,x) =&gt; :ok end</code> fails.</li>
<li>The syntax for guards is <code>x where x &gt; 1</code> instead of <code>x, if x &gt; 1 end</code> and can occur anywhere in a pattern.</li>
<li>Structs can be matched by field-names, allowing partial matches: <code>@match Foo(1,2) begin Foo(y=2) =&gt; :ok end</code> returns <code>:ok</code>.</li>
<li>Patterns support interpolation, ie <code>let x=1; @match ($x,$(x+1)) = (1,2); end</code> is a match.</li>
<li>No support (yet) for matching <code>Regex</code> or <code>UnitRange</code>.</li>
<li>No support (yet) for matching against multidimensional arrays - all array patterns use linear indexing.</li>
</ul>
</article></div>