<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphkernelsjl" class="anchor" aria-hidden="true" href="#graphkernelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphKernels.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for calculating <a href="https://en.wikipedia.org/wiki/Graph_kernel" rel="nofollow">graph kernels</a> -
kernel functions where the inputs are graphs.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GraphKernels: ShortestPathGraphKernel, svmtrain, svmpredict

julia&gt; using GraphDatasets: loadgraphs, TUDatasets
julia&gt; using SimpleValueGraphs: get_graphval
julia&gt; using Random: shuffle
julia&gt; using Statistics: mean

# load the MUTAG dataset - it contains 188 graphs of two different classes
julia&gt; graphs = loadgraphs(TUDatasets.MUTAGDataset(); resolve_categories=true)
188-element ValGraphCollection of graphs with
              eltype: Int8
  vertex value types: (chem = String,)
    edge value types: (bond_type = String,)
   graph value types: (class = Int8,)

# shuffle the graphs and split into train and test data
julia&gt; graphs = shuffle(graphs);
julia&gt; X_train, X_test = graphs[begin:120], graphs[121:end];
julia&gt; y_train, y_test = get_graphval.(X_train, :class), get_graphval.(X_test, :class);

# instantiate a ShortestPathGraphKernel
# dist_key is set to nothing so that we use unit distances for all edges
julia&gt; kernel = ShortestPathGraphKernel(;dist_key=nothing)
ShortestPathGraphKernel{ConstVertexKernel}(0.0, ConstVertexKernel(1.0), nothing)

# train a support vector machine with that kernel
julia&gt; model = svmtrain(X_train, y_train, kernel);

# predict classe on the test data
julia&gt; y_test_pred = svmpredict(model, X_test);

# compare with the actual classes and calculate the accuracy
julia&gt; accuracy = mean(y_test .== y_test_pred)
0.8529411764705882"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GraphKernels<span class="pl-k">:</span> ShortestPathGraphKernel, svmtrain, svmpredict

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GraphDatasets<span class="pl-k">:</span> loadgraphs, TUDatasets
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleValueGraphs<span class="pl-k">:</span> get_graphval
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random<span class="pl-k">:</span> shuffle
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics<span class="pl-k">:</span> mean

<span class="pl-c"><span class="pl-c">#</span> load the MUTAG dataset - it contains 188 graphs of two different classes</span>
julia<span class="pl-k">&gt;</span> graphs <span class="pl-k">=</span> <span class="pl-c1">loadgraphs</span>(TUDatasets<span class="pl-k">.</span><span class="pl-c1">MUTAGDataset</span>(); resolve_categories<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">188</span><span class="pl-k">-</span>element ValGraphCollection of graphs with
              eltype<span class="pl-k">:</span> Int8
  vertex value types<span class="pl-k">:</span> (chem <span class="pl-k">=</span> String,)
    edge value types<span class="pl-k">:</span> (bond_type <span class="pl-k">=</span> String,)
   graph value types<span class="pl-k">:</span> (class <span class="pl-k">=</span> Int8,)

<span class="pl-c"><span class="pl-c">#</span> shuffle the graphs and split into train and test data</span>
julia<span class="pl-k">&gt;</span> graphs <span class="pl-k">=</span> <span class="pl-c1">shuffle</span>(graphs);
julia<span class="pl-k">&gt;</span> X_train, X_test <span class="pl-k">=</span> graphs[<span class="pl-c1">begin</span><span class="pl-k">:</span><span class="pl-c1">120</span>], graphs[<span class="pl-c1">121</span><span class="pl-k">:</span><span class="pl-c1">end</span>];
julia<span class="pl-k">&gt;</span> y_train, y_test <span class="pl-k">=</span> <span class="pl-c1">get_graphval</span>.(X_train, <span class="pl-c1">:class</span>), <span class="pl-c1">get_graphval</span>.(X_test, <span class="pl-c1">:class</span>);

<span class="pl-c"><span class="pl-c">#</span> instantiate a ShortestPathGraphKernel</span>
<span class="pl-c"><span class="pl-c">#</span> dist_key is set to nothing so that we use unit distances for all edges</span>
julia<span class="pl-k">&gt;</span> kernel <span class="pl-k">=</span> <span class="pl-c1">ShortestPathGraphKernel</span>(;dist_key<span class="pl-k">=</span><span class="pl-c1">nothing</span>)
<span class="pl-c1">ShortestPathGraphKernel</span><span class="pl-c1">{ConstVertexKernel}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">ConstVertexKernel</span>(<span class="pl-c1">1.0</span>), <span class="pl-c1">nothing</span>)

<span class="pl-c"><span class="pl-c">#</span> train a support vector machine with that kernel</span>
julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">svmtrain</span>(X_train, y_train, kernel);

<span class="pl-c"><span class="pl-c">#</span> predict classe on the test data</span>
julia<span class="pl-k">&gt;</span> y_test_pred <span class="pl-k">=</span> <span class="pl-c1">svmpredict</span>(model, X_test);

<span class="pl-c"><span class="pl-c">#</span> compare with the actual classes and calculate the accuracy</span>
julia<span class="pl-k">&gt;</span> accuracy <span class="pl-k">=</span> <span class="pl-c1">mean</span>(y_test <span class="pl-k">.==</span> y_test_pred)
<span class="pl-c1">0.8529411764705882</span></pre></div>
<h1 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h1>
<h2 dir="auto"><a id="user-content-graph-kernels" class="anchor" aria-hidden="true" href="#graph-kernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Graph Kernels</h2>
<h3 dir="auto"><a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python</h3>
<ul dir="auto">
<li><a href="https://github.com/ysig/GraKeL">GraKeL</a>, A scikit-learn compatible library for graph kernels</li>
<li><a href="https://github.com/jajupmochi/graphkit-learn">graphkit-learn</a>, A Python package for graph kernels, graph edit distances and graph pre-image problem.</li>
</ul>
<h2 dir="auto"><a id="user-content-general-graph-machine-learning" class="anchor" aria-hidden="true" href="#general-graph-machine-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General graph machine learning</h2>
<h3 dir="auto"><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia</h3>
<ul dir="auto">
<li><a href="https://github.com/FluxML/GeometricFlux.jl">GeometricFlux</a>, Geometric Deep Learning for Flux</li>
</ul>
<h3 dir="auto"><a id="user-content-python-1" class="anchor" aria-hidden="true" href="#python-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python</h3>
<ul dir="auto">
<li><a href="https://github.com/stellargraph/stellargraph">StellarGraph</a>, Machine Learning on Graphs</li>
<li><a href="https://github.com/dmlc/dgl">DGL</a>, Python package built to ease deep learning on graph, on top of existing DL frameworks.</li>
<li><a href="https://github.com/deepmind/graph_nets">Graph Nets</a>, Build Graph Nets in Tensorflow</li>
<li><a href="https://github.com/danielegrattarola/spektral/">Spektral</a>, Graph Neural Networks with Keras and Tensorflow 2.</li>
<li><a href="https://github.com/rusty1s/pytorch_geometric">PyTorch Geometric</a>, Geometric Deep Learning Extension Library for PyTorch</li>
</ul>
</article></div>