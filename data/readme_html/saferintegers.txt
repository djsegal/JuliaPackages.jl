<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-saferintegers" class="anchor" aria-hidden="true" href="#saferintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SaferIntegers</h1>
<h3 dir="auto"><a id="user-content-these-integer-types-do-not-ignore-arithmetic-overflows-and-underflows" class="anchor" aria-hidden="true" href="#these-integer-types-do-not-ignore-arithmetic-overflows-and-underflows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>These integer types do not ignore arithmetic overflows and underflows.</h3>
<hr>
<h4 dir="auto"><a id="user-content-copyright-2018-2023-by-jeffrey-sarnoff--this-work-is-made-available-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright-2018-2023-by-jeffrey-sarnoff--this-work-is-made-available-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright © 2018-2023 by Jeffrey Sarnoff.    This work is made available under <a href="https://opensource.org/licenses/MIT" rel="nofollow">The MIT License</a>.</h4>
<hr>
<p dir="auto"><a href="http://jeffreysarnoff.github.io/SaferIntegers.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="http://jeffreysarnoff.github.io/SaferIntegers.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://codecov.io/github/JeffreySarnoff/SaferIntegers.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/ad613eb67a45be2e1bf68d8b4f4cb7e4bab14b9343f9f6ccdce896961da18f76/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a6566667265795361726e6f66662f5361666572496e7465676572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="Test Coverage" data-canonical-src="https://codecov.io/github/JeffreySarnoff/SaferIntegers.jl/coverage.svg?branch=main" style="max-width: 100%;"></a> <a href="https://pkgs.genieframework.com?packages=SaferIntegers&amp;startdate=2010-01-01&amp;enddate=2040-12-31" rel="nofollow"><img src="https://camo.githubusercontent.com/3c0d3c291c5012296224f59e33dae4c23853faedc61befbde720b8bad8fcf3b7/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f5361666572496e746567657273" alt="Package Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/SaferIntegers" style="max-width: 100%;"></a> <a href="http://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/9f6b5dca9fd95975898fb95c2cc5b995351004a6c4443ccb13e1916a97bb122a/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667" alt="MIT license" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg" style="max-width: 100%;"></a></p>
<hr>
<h4 dir="auto"><a id="user-content-a-safer-way" class="anchor" aria-hidden="true" href="#a-safer-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A Safer Way</h4>
<p dir="auto">Using the default Int or UInt types allows overflow and underflow errors to occur silently, without notice. These incorrect values propagate and such errors are difficult to recognize after the fact.</p>
<p dir="auto">This package exports safer versions. These types check for <em>overflow and underflow</em> in each of the basic arithmetic functions. The processing will stop with a message in the event of <em>overflow or underflow</em>.  On one machine, the overhead relative to the built-in integer types is &lt;= 1.2x.</p>
<h4 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background</h4>
<p dir="auto">Integer overflow occurs when an integer type is increased beyond its maximum value. Integer underflow occurs when an integer type is decreased below its minimum value.  Signed and Unsigned values are subject to overflow and underflow.  With Julia, you can see the rollover using Int or UInt types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typemax(Int) + one(Int) &lt; 0
typemin(Int) - one(Int) &gt; 0
typemax(UInt) + one(UInt) == typemin(UInt)
typemin(UInt) - one(UInt) == typemax(UInt)"><pre><span class="pl-c1">typemax</span>(Int) <span class="pl-k">+</span> <span class="pl-c1">one</span>(Int) <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>
<span class="pl-c1">typemin</span>(Int) <span class="pl-k">-</span> <span class="pl-c1">one</span>(Int) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
<span class="pl-c1">typemax</span>(UInt) <span class="pl-k">+</span> <span class="pl-c1">one</span>(UInt) <span class="pl-k">==</span> <span class="pl-c1">typemin</span>(UInt)
<span class="pl-c1">typemin</span>(UInt) <span class="pl-k">-</span> <span class="pl-c1">one</span>(UInt) <span class="pl-k">==</span> <span class="pl-c1">typemax</span>(UInt)</pre></div>
<p dir="auto">There are security implications for integer overflow in certain situations.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" for i in 1:a
    secure(biohazard[i])
 end
 
 a = Int16(456) * Int16(567)
 a == -3592
 # the for loop does not execute"><pre> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>a
    <span class="pl-c1">secure</span>(biohazard[i])
 <span class="pl-k">end</span>
 
 a <span class="pl-k">=</span> <span class="pl-c1">Int16</span>(<span class="pl-c1">456</span>) <span class="pl-k">*</span> <span class="pl-c1">Int16</span>(<span class="pl-c1">567</span>)
 a <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">3592</span>
 <span class="pl-c"><span class="pl-c">#</span> the for loop does not execute</span></pre></div>
<h2 dir="auto"><a id="user-content-highlights" class="anchor" aria-hidden="true" href="#highlights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Highlights</h2>
<h3 dir="auto"><a id="user-content-why-does-this-package-exist" class="anchor" aria-hidden="true" href="#why-does-this-package-exist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why Does This Package Exist?</h3>
<ul dir="auto">
<li>
<p dir="auto">Your work may require that integer calculations be secure, well-behaved or unsurprising.</p>
</li>
<li>
<p dir="auto">Your clients may expect your package/app/product calculates with care and correctness.</p>
</li>
<li>
<p dir="auto">Your software may become part of a system on which the health or assets of others depends.</p>
</li>
<li>
<p dir="auto">Your prefer to publish research results that are free of error, and you work with integers.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-what-does-this-package-offer" class="anchor" aria-hidden="true" href="#what-does-this-package-offer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What Does This Package Offer?</h3>
<ul dir="auto">
<li>
<p dir="auto"><em>SaferIntegers</em> let you work more cleanly and always alerts otherwise silent problems.</p>
</li>
<li>
<p dir="auto">This package is designed for easy use and written to be performant in many sorts of use.</p>
</li>
<li>
<p dir="auto">All exported types are stable (e.g. <code>typeof(SafeInt32(1) + 1) == SafeInt32</code>)</p>
</li>
<li>
<p dir="auto">Using <em>SaferIntegers</em> can preclude some known ways that insecure systems are breached.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-test-code-for-integer-safety" class="anchor" aria-hidden="true" href="#test-code-for-integer-safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test code for integer safety</h3>
<ul dir="auto">
<li><code>@saferintegers include(joinpath("PackageTestDirectory", "PackageTests.jl"))</code>
<ul dir="auto">
<li>includes a type modified <code>PackageTests.jl</code> in the current environment</li>
<li>all <code>Integer</code> types in <code>PackageTests.jl</code> are become <code>SafeInteger</code> types</li>
<li>run it and see if there are any problems!</li>
</ul>
</li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-a-basic-guide" class="anchor" aria-hidden="true" href="#a-basic-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A Basic Guide</h2>
<p dir="auto">To use safer integers within your computations, where you have been using<br>
explict digit sequences put them inside the safe integer constructors,<br>
<code>SafeInt(11)</code> or <code>SafeUInt(0x015A)</code> and similarly for the bitsize-named versions<br>
<code>SafeInt8</code>, <code>SafeInt16</code> .. <code>SafeInt128</code> and <code>SafeUInt8</code> .. <code>SafeUInt128</code></p>
<p dir="auto">Where you had used<code>Int</code> or <code>UInt</code> now use <code>SafeInt</code> or <code>SafeUInt</code> and similarly
with the bitsize-named versions.</p>
<p dir="auto">SafeInt and SafeUInt give you these arithmetic operators:<br>
<code>+</code>, <code>-</code>, <code>*</code>, <code>div</code>, <code>rem</code>, <code>fld</code>, <code>mod</code>, <code>fld1</code>, <code>mod1</code>, <code>^</code><br>
which have become overflow and underflow aware.</p>
<p dir="auto">The Int and UInt types can fail at simple arithmetic<br>
and will continue carrying the incorrectness forward.<br>
The validity of values obtained is difficult to ascertain.</p>
<p dir="auto">Most calculations proceed without incident,
and when used SafeInts operate as Ints
should a calculation encouter an overflow or underflow,
we are alerted and the calculation does not proceed.</p>
<h4 dir="auto"><a id="user-content-give-them-a-whirl" class="anchor" aria-hidden="true" href="#give-them-a-whirl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Give them a whirl.</h4>
<blockquote>
<p dir="auto">Get the package: <code>Pkg.add("SaferIntegers")</code><br>
Use the package:  <code>using SaferIntegers</code></p>
</blockquote>
<ul dir="auto">
<li>These functions check for overflow/underflow automatically:
<ul dir="auto">
<li><code>abs</code>, <code>neg</code>, <code>div</code>, <code>fld</code>, <code>fld1</code>, <code>cld</code>, <code>rem</code>, <code>mod</code>, <code>mod1</code></li>
<li><code>divrem</code>, <code>fldmod</code>, <code>fldmod1</code></li>
<li><code>-</code>, <code>+</code>, <code>*</code>, <code>^</code></li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-exported-types-and-constructors--converters" class="anchor" aria-hidden="true" href="#exported-types-and-constructors--converters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported Types and Constructors / Converters</h2>
<ul dir="auto">
<li><code>SafeInt8</code>, <code>SafeInt16</code>, <code>SafeInt32</code>, <code>SafeInt64</code>, <code>SafeInt128</code></li>
<li><code>SafeUInt8</code>, <code>SafeUInt16</code>, <code>SafeUInt32</code>, <code>SafeUInt64</code>, <code>SafeUInt128</code></li>
<li><code>SafeSigned</code>, <code>SafeUnsigned</code>, <code>SafeInteger</code></li>
<li><code>SafeRational</code></li>
</ul>
<p dir="auto">They check for overflow, even when multiplied by the usual Int and UInt types.<br>
Otherwise, they should be unsurprising.</p>
<h3 dir="auto"><a id="user-content-type-definitions" class="anchor" aria-hidden="true" href="#type-definitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type definitions</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="abstract type SafeUnsigned &lt;: Unsigned end
abstract type SafeSigned &lt;: Signed end
const SafeInteger = Union{SafeUnsigned, SafeSigned}"><pre class="notranslate"><code>abstract type SafeUnsigned &lt;: Unsigned end
abstract type SafeSigned &lt;: Signed end
const SafeInteger = Union{SafeUnsigned, SafeSigned}
</code></pre></div>
<p dir="auto">(thanks to Mark Kittisopikul's PR and TimHoly's design of Ratios.jl)</p>
<h2 dir="auto"><a id="user-content-other-conversions" class="anchor" aria-hidden="true" href="#other-conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Conversions</h2>
<p dir="auto"><code>Signed(x::SafeSigned)</code> returns an signed built-in integer of the same bitwidth as x<br>
<code>Unsigned(x::SafeUnsigned)</code> returns an unsigned built-in integer of the same bitwidth as x<br>
<code>Integer(x::SafeInteger)</code> returns a built-in integer of the same bitwidth and either Signed or Unsigned as is x</p>
<p dir="auto"><code>SafeSigned(x::Signed)</code> returns a safe signed integer of the same bitwidth as x<br>
<code>SafeUnsigned(x::Unsigned)</code> returns a safe unsigned integer of the same bitwidth as x<br>
<code>SafeInteger(x::Integer)</code> returns a safe Integer of the same bitwidth and is either Signed or Unsigned as matches x</p>
<h2 dir="auto"><a id="user-content-supports" class="anchor" aria-hidden="true" href="#supports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supports</h2>
<ul dir="auto">
<li><code>signbit</code>, <code>sign</code>, <code>abs</code>, <code>abs2</code></li>
<li><code>count_ones</code>, <code>count_zeros</code></li>
<li><code>leading_zeros</code>, <code>trailing_zeros</code>, <code>leading_ones</code>, <code>trailing_ones</code></li>
<li><code>ndigits0z</code></li>
<li><code>isless</code>, <code>isequal</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code></li>
<li><code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>\</code>, <code>^</code></li>
<li><code>div</code>, <code>fld</code>, <code>fld1</code>, <code>cld</code>, <code>rem</code>, <code>mod</code>, <code>mod1</code></li>
<li><code>divrem</code>, <code>fldmod</code>, <code>fldmod1</code></li>
<li><code>zero</code>, <code>one</code></li>
<li><code>typemin</code>, <code>typemax</code>, <code>widen</code></li>
</ul>
<h2 dir="auto"><a id="user-content-test-code-for-integer-safety-1" class="anchor" aria-hidden="true" href="#test-code-for-integer-safety-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test code for integer safety</h2>
<h3 dir="auto"><a id="user-content-test-snippets" class="anchor" aria-hidden="true" href="#test-snippets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>test snippets</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; @saferintegers begin
         x = 64
         y = Int16(16)
         z = x + y + SafeInt128(x)
         x, y, z
         end
(64, 16, 144)

julia&gt; typeof.(ans)
(SafeInt64, SafeInt16, SafeInt128)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@saferintegers</span> <span class="pl-k">begin</span>
         x <span class="pl-k">=</span> <span class="pl-c1">64</span>
         y <span class="pl-k">=</span> <span class="pl-c1">Int16</span>(<span class="pl-c1">16</span>)
         z <span class="pl-k">=</span> x <span class="pl-k">+</span> y <span class="pl-k">+</span> <span class="pl-c1">SafeInt128</span>(x)
         x, y, z
         <span class="pl-k">end</span>
(<span class="pl-c1">64</span>, <span class="pl-c1">16</span>, <span class="pl-c1">144</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>.(ans)
(SafeInt64, SafeInt16, SafeInt128)</pre></div>
<h3 dir="auto"><a id="user-content-test-source-file" class="anchor" aria-hidden="true" href="#test-source-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>test source file</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cd(&lt;source file directory&gt;)
julia&gt; @saferintegers include(&lt;filename.jl&gt;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(<span class="pl-k">&lt;</span>source file directory<span class="pl-k">&gt;</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@saferintegers</span> <span class="pl-c1">include</span>(<span class="pl-k">&lt;</span>filename<span class="pl-k">.</span>jl<span class="pl-k">&gt;</span>)</pre></div>
<h2 dir="auto"><a id="user-content-benchmarking-on-one-machine" class="anchor" aria-hidden="true" href="#benchmarking-on-one-machine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarking (on one machine)</h2>
<p dir="auto">julia v1.1-dev</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SaferIntegers
using BenchmarkTools
BenchmarkTools.DEFAULT_PARAMETERS.time_tolerance=0.005

@noinline function test(n, f, a,b,c,d)
   result = a;
   i = 0
   while true
       i += 1
       i &gt; n &amp;&amp; break       
       result += f(d,c)+f(b,a)+f(d,b)+f(c,a)
   end
   return result
end

hundredths(x) = round(x, digits=2)

a = 17; b = 721; c = 75; d = 567;
sa, sb, sc, sd = SafeInt.((a, b, c, d));
n = 10_000;

hundredths( (@belapsed test(n, +, $sa, $sb, $sc, $sd)) /
            (@belapsed test(n, +, $a, $b, $c, $d))        )
1.25

hundredths( (@belapsed test(n, *, $sa, $sb, $sc, $sd)) /
            (@belapsed test(n, *, $a, $b, $c, $d))        )
1.25

hundredths( (@belapsed test(n, div, $sa, $sb, $sc, $sd)) /
            (@belapsed test(n, div, $a, $b, $c, $d))      )
1.14"><pre><span class="pl-k">using</span> SaferIntegers
<span class="pl-k">using</span> BenchmarkTools
BenchmarkTools<span class="pl-k">.</span>DEFAULT_PARAMETERS<span class="pl-k">.</span>time_tolerance<span class="pl-k">=</span><span class="pl-c1">0.005</span>

<span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">test</span>(n, f, a,b,c,d)
   result <span class="pl-k">=</span> a;
   i <span class="pl-k">=</span> <span class="pl-c1">0</span>
   <span class="pl-k">while</span> <span class="pl-c1">true</span>
       i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       i <span class="pl-k">&gt;</span> n <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>       
       result <span class="pl-k">+=</span> <span class="pl-c1">f</span>(d,c)<span class="pl-k">+</span><span class="pl-c1">f</span>(b,a)<span class="pl-k">+</span><span class="pl-c1">f</span>(d,b)<span class="pl-k">+</span><span class="pl-c1">f</span>(c,a)
   <span class="pl-k">end</span>
   <span class="pl-k">return</span> result
<span class="pl-k">end</span>

<span class="pl-en">hundredths</span>(x) <span class="pl-k">=</span> <span class="pl-c1">round</span>(x, digits<span class="pl-k">=</span><span class="pl-c1">2</span>)

a <span class="pl-k">=</span> <span class="pl-c1">17</span>; b <span class="pl-k">=</span> <span class="pl-c1">721</span>; c <span class="pl-k">=</span> <span class="pl-c1">75</span>; d <span class="pl-k">=</span> <span class="pl-c1">567</span>;
sa, sb, sc, sd <span class="pl-k">=</span> <span class="pl-c1">SafeInt</span>.((a, b, c, d));
n <span class="pl-k">=</span> <span class="pl-c1">10_000</span>;

<span class="pl-c1">hundredths</span>( (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, <span class="pl-k">+</span>, <span class="pl-k">$</span>sa, <span class="pl-k">$</span>sb, <span class="pl-k">$</span>sc, <span class="pl-k">$</span>sd)) <span class="pl-k">/</span>
            (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, <span class="pl-k">+</span>, <span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d))        )
<span class="pl-c1">1.25</span>

<span class="pl-c1">hundredths</span>( (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, <span class="pl-k">*</span>, <span class="pl-k">$</span>sa, <span class="pl-k">$</span>sb, <span class="pl-k">$</span>sc, <span class="pl-k">$</span>sd)) <span class="pl-k">/</span>
            (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, <span class="pl-k">*</span>, <span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d))        )
<span class="pl-c1">1.25</span>

<span class="pl-c1">hundredths</span>( (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, div, <span class="pl-k">$</span>sa, <span class="pl-k">$</span>sb, <span class="pl-k">$</span>sc, <span class="pl-k">$</span>sd)) <span class="pl-k">/</span>
            (<span class="pl-c1">@belapsed</span> <span class="pl-c1">test</span>(n, div, <span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-k">$</span>c, <span class="pl-k">$</span>d))      )
<span class="pl-c1">1.14</span></pre></div>
<h3 dir="auto"><a id="user-content-technical-notes-about-code-updated-a-while-ago" class="anchor" aria-hidden="true" href="#technical-notes-about-code-updated-a-while-ago"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>technical notes about code updated a while ago</h3>
<p dir="auto">The exported abstract types SafeInteger, SafeSigned, SafeUnsigned are now defined as originally intended.
Julia’s advancement, the active pursuit of consistant type abstractions, made it easy.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="SafeUnsigned  &lt;:  Unsigned
SafeSigned    &lt;:  Signed
SafeInteger   &lt;:  Integer"><pre class="notranslate"><code>SafeUnsigned  &lt;:  Unsigned
SafeSigned    &lt;:  Signed
SafeInteger   &lt;:  Integer
</code></pre></div>
<p dir="auto">This clean approach holds through the exported concrete types.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="SafeUInt &lt;: SafeUnsigned &lt;: Unsigned &lt;: Integer &lt;: Real
SafeInt  &lt;: SafeSigned   &lt;: Signed   &lt;: Integer &lt;: Real"><pre class="notranslate"><code>SafeUInt &lt;: SafeUnsigned &lt;: Unsigned &lt;: Integer &lt;: Real
SafeInt  &lt;: SafeSigned   &lt;: Signed   &lt;: Integer &lt;: Real
</code></pre></div>
<p dir="auto">A good deal of benchmarking was done to evaluate the appropriateness of using SaferIntegers with Ratios.jl.to protect calculations within Interpolations.jl from Integer overflow in innocent looking linear interpolation without warning. The results are compelling, encouraging their wider application.</p>
<p dir="auto">Using SafeInt64s with Ratios requires 1.025 the time used with Int64 Ratios.
This is merely an extra 1.5 seconds per minute.</p>
<p dir="auto">see <a href="https://github.com/timholy/Ratios.jl/pull/23" data-hovercard-type="pull_request" data-hovercard-url="/timholy/Ratios.jl/pull/23/hovercard">Ratios/pull/23</a> for details.</p>
<hr>
<p dir="auto">The formal distinction is in the creation of the abstract types, and so the inheritance hierarchy that pervades the concrete types.</p>
<p dir="auto">The new way is much cleaner and makes reasoning about the shallow extension to the abstract inheritance paths much simpler. This is given in the announcement above. The old way was a result of earlier internal limitations that Julia’s type patterning had embedded in the way Unsigned and Signed integer types had been developed (well, implemented). This forced defining these abstract types:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="abstract type SafeInteger  &lt;: Integer     end
abstract type SafeSigned   &lt;: SafeInteger end"><pre class="notranslate"><code>abstract type SafeInteger  &lt;: Integer     end
abstract type SafeSigned   &lt;: SafeInteger end
</code></pre></div>
<p dir="auto">So it precluded the natural pattern of type abstraction and well-formed instantiation logic we have now.</p>
<ul dir="auto">
<li>it had been the case that <code>!(SafeUnsigned &lt;: Unsigned)</code>.</li>
</ul>
<p dir="auto">There are some additional changes.</p>
<ul dir="auto">
<li>Several bugs (limited to small yet substantive subdomains) were found by careful users and are fixed.</li>
<li><code>float(x::SafeInteger)</code> now works to mirror <code>float(x::Integer)</code>, for cross-package support.</li>
<li>There are other implementation improvements that just work.</li>
</ul>
<h3 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>credits</h3>
<p dir="auto">This work derives from <a href="https://github.com/JuliaMath/RoundingIntegers.jl">RoundingIntegers.jl</a>.</p>
<p dir="auto">The @saferintegers macro machinery is heavily informed by <a href="https://github.com/stevengj/ChangePrecision.jl">ChangePrecision.jl</a>.</p>
</article></div>