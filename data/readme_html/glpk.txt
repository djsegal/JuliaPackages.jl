<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-glpkjl" class="anchor" aria-hidden="true" href="#glpkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GLPK.jl</h1>
<p>GLPK.jl is a wrapper for the <a href="https://www.gnu.org/software/glpk" rel="nofollow">GNU Linear Programming Kit library</a>.</p>
<p>It has two components:</p>
<ul>
<li>a thin wrapper around the complete C API</li>
<li>an interface to <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a></li>
</ul>
<p>The C API can be accessed via <code>GLPK.glp_XXX</code> functions, where the names and
arguments are identical to the C API. See the <code>/tests</code> folder for inspiration.</p>
<p><a href="https://github.com/jump-dev/GLPK.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/GLPK.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/GLPK.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ebfae35fb3d5558b55288ff93e68a865b15668c8840fb0e4c73be60a553f287/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f474c504b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/GLPK.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General/">General registry</a>
and so can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;GLPK&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)</pre></div>
<p>In addition to installing the GLPK.jl package, this will also download and
install the GLPK binaries. (You do not need to install GLPK separately.) If you
require a custom build of GLPK, see the <strong>Custom Installation</strong> instructions
below.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>To install custom built GLPK binaries, use the environmental variable
<code>JULIA_GLPK_LIBRARY_PATH</code> to point to the path at which you installed GLPK (the
folder containing <code>libglpk</code>). For example, on Mac, after installing GLPK with
<code>brew install glpk</code>, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_GLPK_LIBRARY_PATH&quot;] = &quot;/usr/local/Cellar/glpk/4.65/lib&quot;
import Pkg
Pkg.add(&quot;GLPK&quot;)
Pkg.build(&quot;GLPK&quot;)
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_GLPK_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/local/Cellar/glpk/4.65/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)</pre></div>
<p>Replace <code>"/usr/local/Cellar/glpk/4.65/lib"</code> with a different path as
appropriate.</p>
<p><strong>You must have <code>JULIA_GLPK_LIBRARY_PATH</code> set <em>every</em> time you run <code>using GLPK</code>,
not just when you install it.</strong></p>
<p>Switch back to the default binaries as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="delete!(ENV, &quot;JULIA_GLPK_LIBRARY_PATH&quot;)
import Pkg
Pkg.build(&quot;GLPK&quot;)
"><pre><span class="pl-c1">delete!</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>JULIA_GLPK_LIBRARY_PATH<span class="pl-pds">"</span></span>)
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use with JuMP</h2>
<p>We highly recommend that you use GLPK.jl with higher level packages such as
<a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>.</p>
<p>This can be done using the <code>GLPK.Optimizer</code> object. Here is how to create a JuMP
model that uses GLPK as the solver.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, GLPK

model = Model(GLPK.Optimizer)
set_optimizer_attribute(model, &quot;tm_lim&quot;, 60 * 1_000)
set_optimizer_attribute(model, &quot;msg_lev&quot;, GLPK.GLP_MSG_OFF)
"><pre><span class="pl-k">using</span> JuMP, GLPK

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(GLPK<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>tm_lim<span class="pl-pds">"</span></span>, <span class="pl-c1">60</span> <span class="pl-k">*</span> <span class="pl-c1">1_000</span>)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>msg_lev<span class="pl-pds">"</span></span>, GLPK<span class="pl-k">.</span>GLP_MSG_OFF)</pre></div>
<p>If the model is primal or dual infeasible, GLPK will attempt to find a
certificate of infeasibility. This can be expensive, particularly if you do not
intend to use the certificate. If this is the case, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Model(() -&gt; GLPK.Optimizer(want_infeasibility_certificates = false))
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> GLPK<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(want_infeasibility_certificates <span class="pl-k">=</span> <span class="pl-c1">false</span>))</pre></div>
<h2><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Callbacks</h2>
<p>Here is an example using GLPK's solver-specific callbacks.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, GLPK, Test

model = Model(GLPK.Optimizer)
@variable(model, 0 &lt;= x &lt;= 2.5, Int)
@variable(model, 0 &lt;= y &lt;= 2.5, Int)
@objective(model, Max, y)
reasons = UInt8[]
function my_callback_function(cb_data)
    reason = GLPK.glp_ios_reason(cb_data.tree)
    push!(reasons, reason)
    if reason != GLPK.GLP_IROWGEN
        return
    end
    x_val = callback_value(cb_data, x)
    y_val = callback_value(cb_data, y)
    if y_val - x_val &gt; 1 + 1e-6
        con = @build_constraint(y - x &lt;= 1)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    elseif y_val + x_val &gt; 3 + 1e-6
        con = @build_constraint(y - x &lt;= 1)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    end
end
MOI.set(model, GLPK.CallbackFunction(), my_callback_function)
optimize!(model)
@test termination_status(model) == MOI.OPTIMAL
@test primal_status(model) == MOI.FEASIBLE_POINT
@test value(x) == 1
@test value(y) == 2
@show reasons
"><pre><span class="pl-k">using</span> JuMP, GLPK, Test

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(GLPK<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@objective</span>(model, Max, y)
reasons <span class="pl-k">=</span> UInt8[]
<span class="pl-k">function</span> <span class="pl-en">my_callback_function</span>(cb_data)
    reason <span class="pl-k">=</span> GLPK<span class="pl-k">.</span><span class="pl-c1">glp_ios_reason</span>(cb_data<span class="pl-k">.</span>tree)
    <span class="pl-c1">push!</span>(reasons, reason)
    <span class="pl-k">if</span> reason <span class="pl-k">!=</span> GLPK<span class="pl-k">.</span>GLP_IROWGEN
        <span class="pl-k">return</span>
    <span class="pl-k">end</span>
    x_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, x)
    y_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, y)
    <span class="pl-k">if</span> y_val <span class="pl-k">-</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">-</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">elseif</span> y_val <span class="pl-k">+</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">-</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, GLPK<span class="pl-k">.</span><span class="pl-c1">CallbackFunction</span>(), my_callback_function)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@test</span> <span class="pl-c1">termination_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL
<span class="pl-c1">@test</span> <span class="pl-c1">primal_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>FEASIBLE_POINT
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(x) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(y) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">@show</span> reasons</pre></div>
</article></div>