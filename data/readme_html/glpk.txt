<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-glpkjl" class="anchor" aria-hidden="true" href="#glpkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GLPK.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaOpt/GLPK.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4ddc2e13ea80467311f27d66070dc5b0f6ae0fd2/68747470733a2f2f6170692e7472617669732d63692e6f72672f4a756c69614f70742f474c504b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://api.travis-ci.org/JuliaOpt/GLPK.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/JuliaOpt/glpk-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4816c6bf355aacce5a5d66ad9c9baf0e501b09da/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f347435653264697233677037666236683f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/4t5e2dir3gp7fb6h?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/r/JuliaOpt/GLPK.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47c7c1c0c26ac1bc5cc46b510de71d3e7ffdeeb7/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4a756c69614f70742f474c504b2e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/coveralls/JuliaOpt/GLPK.jl.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>GLPK.jl is a wrapper for the <a href="http://www.gnu.org/software/glpk" rel="nofollow">GNU Linear Programming Kit library</a>.
It makes it possible to access nearly all of GLPK functionality from within Julia programs.</p>
<p>This package is part of <a href="http://www.juliaopt.org/" rel="nofollow">the JuliaOpt project</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General/">General registry</a> and so can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)</pre></div>
<p>GLPK.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the GLPK binaries with <a href="https://gmplib.org" rel="nofollow">GMP</a> support.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>To install custom built GLPK binaries set the environmental variable <code>JULIA_GLPK_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("GLPK")</code>. For instance, if the libraries are installed in <code>/opt/lib</code> just call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_GLPK_LIBRARY_PATH<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>GLPK<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install set  <code>JULIA_GLPK_LIBRARY_PATH</code>  before calling <code>import Pkg; Pkg.add("GLPK")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_GLPK_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("GLPK")</code>.</p>
<h2><a id="user-content-glpkoptimizer" class="anchor" aria-hidden="true" href="#glpkoptimizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>GLPK.Optimizer</code></h2>
<p>Use <code>GLPK.Optimizer</code> to create a new optimizer object:</p>
<p>In the following examples the time limit is set to one minute and logging is turned off.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GLPK
model <span class="pl-k">=</span> GLPK<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>tm_lim<span class="pl-pds">"</span></span>), <span class="pl-c1">60000</span>)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>msg_lev<span class="pl-pds">"</span></span>), GLPK<span class="pl-k">.</span>MSG_OFF)</pre></div>
<p>For JuMP, use:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, GLPK
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(
    <span class="pl-c1">optimizer_with_attributes</span>(GLPK<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>tm_lim<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">60000</span>, <span class="pl-s"><span class="pl-pds">"</span>msg_lev<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> GLPK<span class="pl-k">.</span>MSG_OFF)
)</pre></div>
<p><strong>Note: previous versions of <code>GLPK.jl</code> required you to choose either <code>GLPKSolverLP</code> or <code>GLPKSolverMIP</code>. This is no longer needed; just use <code>GLPK.Optimizer</code>.</strong></p>
<h2><a id="user-content-pre-emptive-checks" class="anchor" aria-hidden="true" href="#pre-emptive-checks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pre-emptive checks</h2>
<p><code>GLPK.jl</code> has a lot of pre-emptive checks to catch cases where the C API might
throw an uninformative error. However, in benchmarks, this takes a
non-negligible amount of time (e.g. 20% in add_constraints). At the risk of
possibly running into an uninformative error, you can run the following after
importing GLPK to disable these checks:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GLPK
GLPK<span class="pl-k">.</span><span class="pl-c1">jl_set_preemptive_check</span>(<span class="pl-c1">false</span>)</pre></div>
</article></div>