<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-json2" class="anchor" aria-hidden="true" href="#json2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JSON2</h1>
<p><em>Fast JSON for Julia types</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>PackageEvaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="http://pkg.julialang.org/?pkg=JSON2" rel="nofollow"><img src="https://camo.githubusercontent.com/b1f11e3dd3814756ce5f089bbdfb3b99f41d0c74d8734e0f626146f5dc19aaa0/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4a534f4e325f302e362e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/JSON2_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/quinnj/JSON2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/641efe8140546dac67493b47685eaac79fe123207e81616eeef007c0bc9e027b/68747470733a2f2f7472617669732d63692e6f72672f7175696e6e6a2f4a534f4e322e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/quinnj/JSON2.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/quinnj/JSON2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d7e1db668f5f144b7420b43e72daab1e22ecbdb91424a514e8140831b51f2905/68747470733a2f2f636f6465636f762e696f2f67682f7175696e6e6a2f4a534f4e322e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/quinnj/JSON2.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package is deprecated. Its successor is at <a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code> and so can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;JSON2&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>JSON2<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Project Status</h2>
<p>The package is tested against the current Julia <code>v1.0</code> release and nightly on Linux and OS X.</p>
<h2><a id="user-content-contributing-and-questions" class="anchor" aria-hidden="true" href="#contributing-and-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing and Questions</h2>
<p>Contributions are very welcome, as are feature requests and suggestions. Please open an
<a href="https://github.com/quinnj/JSON2.jl/issues">issue</a> if you encounter any problems or would just like to ask a question.</p>

<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>For most use-cases, all you ever need are:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="JSON2.write(obj) =&gt; String
JSON2.read(str, T) =&gt; T
@pretty json_string # print a &quot;prettified&quot; version of a JSON string
"><pre>JSON2<span class="pl-k">.</span><span class="pl-c1">write</span>(obj) <span class="pl-k">=&gt;</span> String
JSON2<span class="pl-k">.</span><span class="pl-c1">read</span>(str, T) <span class="pl-k">=&gt;</span> T
<span class="pl-c1">@pretty</span> json_string <span class="pl-c"><span class="pl-c">#</span> print a "prettified" version of a JSON string</span></pre></div>
<p>Native support for reading/writing is provided for:</p>
<ul>
<li><code>NamedTuple</code></li>
<li><code>Array</code></li>
<li><code>Number</code></li>
<li><code>Nothing</code>/<code>Missing</code>: corresponds to JSON <code>null</code></li>
<li><code>String</code></li>
<li><code>Bool</code></li>
<li><code>JSON2.Function</code>: type that represents a javascipt function (stored in plain text)</li>
<li><code>Union{T, Nothing}</code></li>
<li><code>AbstractDict</code></li>
<li><code>Tuple</code></li>
<li><code>Set</code></li>
<li><code>Char</code></li>
<li><code>Symbol</code></li>
<li><code>Enum</code></li>
<li><code>Date</code>/<code>DateTime</code></li>
</ul>
<p>Custom types are supported by default as well, utilizing reflection to generate compiled JSON parsers for a type's fields. So in general, you really can just do <code>JSON2.read(str, MyType)</code> and everything will "Just Work" (and be freaky fast as well!).</p>
<h3><a id="user-content-custom-json-formatting" class="anchor" aria-hidden="true" href="#custom-json-formatting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom JSON Formatting</h3>
<h4><a id="user-content-default" class="anchor" aria-hidden="true" href="#default"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Default</h4>
<p>In many cases, a type doesn't even <em>need</em> to use <code>JSON2.@format</code> since the default reflection-based parsing is somewhat flexible. By default, the JSON input is expected to contain each field of a type and be in the same order as the type was defined. For example, the struct:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct T
    a::Int
    b::Int
    c::Union{Nothing, Int}
end
"><pre><span class="pl-k">struct</span> T
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
    c<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Int}</span>
<span class="pl-k">end</span></pre></div>
<p>Could have valid JSON in the forms:</p>
<div class="highlight highlight-source-json position-relative" data-snippet-clipboard-copy-content="{&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: null} // all 3 fields provided in correct order
{&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: 2}
{&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: null, &quot;d&quot;: 3} // extra fields are ignored
{&quot;a&quot;: 0} // will work if T(a) constructor is defined
{&quot;a&quot;: 0, &quot;b&quot;: 1} // will work if T(a, b) constructor is defined
"><pre>{<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>: <span class="pl-c1">null</span>} // all <span class="pl-c1">3</span> fields provided in correct order
{<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>: <span class="pl-c1">2</span>}
{<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>: <span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>: <span class="pl-c1">3</span>} // extra fields are ignored
{<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: <span class="pl-c1">0</span>} // will work if T(a) constructor is defined
{<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>} // will work if T(a, b) constructor is defined</pre></div>
<p>That is, each field <em>must</em> be present in the JSON input and match in position to the original struct definition. Extra arguments after the struct's own fieldtypes are ignored. As noted, the exception to a field needing to be present is if 1) the field and <em>all subsequent fields</em> are not present and 2) appropriate constructors are defined that take these limited subsets of inputs when constructing, e.g. <code>T(a)</code>, <code>T(a, b)</code>, etc.</p>
<h4><a id="user-content-jsonformat-t" class="anchor" aria-hidden="true" href="#jsonformat-t"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JSON.@format T</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="JSON2.@format T [noargs|keywordargs] begin
    _field_ =&gt; (; options...)
    _field2_ =&gt; (; options...)
end
"><pre>JSON2<span class="pl-k">.</span><span class="pl-c1">@format</span> T [noargs<span class="pl-k">|</span>keywordargs] <span class="pl-k">begin</span>
    _field_ <span class="pl-k">=&gt;</span> (; options<span class="pl-k">...</span>)
    _field2_ <span class="pl-k">=&gt;</span> (; options<span class="pl-k">...</span>)
<span class="pl-k">end</span></pre></div>
<p>Specify a custom JSON formatting for a struct <code>T</code>, with individual field options being given like <code>fieldname =&gt; (; option1=value1, option2=value2)</code>, i.e a Pair of the name of the field to a NamedTuple of options. Valid field options include:</p>
<ul>
<li><code>name</code>: if a field's name should be read/written differently than it's defined name</li>
<li><code>jsontype</code>: if the JSON type of a field is different than the julia field type, the JSON type can be provided like <code>jsontype=String</code></li>
<li><code>omitempty</code>: whether an "empty" julia field should still be written; applies to collection types like <code>AbstractArray</code>, <code>AbstractDict</code>, <code>AbstractSet</code>, etc.</li>
<li><code>exclude</code>: whether a julia field should be excluded altogether from JSON reading/writing</li>
<li><code>default</code>: a default value that can be provided for a julia field if it may not appear in a JSON input string when parsing</li>
</ul>
<p>Again, the default case is for JSON input that will have consistently ordered, always-present fields; for cases where the input JSON is <em>not</em> well-ordered or if there is a possibility of a field not being present in the JSON input, there are a few additional options for custom parsing.</p>
<h4><a id="user-content-default-field-values" class="anchor" aria-hidden="true" href="#default-field-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Default field values</h4>
<p>If the JSON input fields will always be consistenly-ordered, but fields may be missing (i.e. field isn't present at all in the input), field defaults can be provided like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="JSON2.@format T begin
    c =&gt; (default=0,)
end
"><pre>JSON2<span class="pl-k">.</span><span class="pl-c1">@format</span> T <span class="pl-k">begin</span>
    c <span class="pl-k">=&gt;</span> (default<span class="pl-k">=</span><span class="pl-c1">0</span>,)
<span class="pl-k">end</span></pre></div>
<p>This says that, when reading from a JSON input, if field <code>c</code> isn't present, to set it's value to 0.</p>
<p>If the JSON input is not consistenly-ordered, there are two other options for allowing direct type parsing</p>
<h4><a id="user-content-keywordargs-constructor" class="anchor" aria-hidden="true" href="#keywordargs-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keywordargs Constructor</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="T(; a=0, b=0, c=0, kwargs...) = T(a, b, c)
JSON2.@format T keywordargs begin
    # ...
end
"><pre><span class="pl-en">T</span>(; a<span class="pl-k">=</span><span class="pl-c1">0</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>, c<span class="pl-k">=</span><span class="pl-c1">0</span>, kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">T</span>(a, b, c)
JSON2<span class="pl-k">.</span><span class="pl-c1">@format</span> T keywordargs <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span> ...</span>
<span class="pl-k">end</span></pre></div>
<p>Here we've defined a "keywordargs" constructor for <code>T</code> that essentially takes a default for each field as keyword arguments, then constructs <code>T</code>.
During parsing, the JSON input will be parsed for any valid field key-values and the keyword constructor will be called
with whatever arguments are parsed in whatever order. Note that we also included a catchall <code>kwargs...</code> in our constructor which can be used to "throw away" or ignore any extra fields in the JSON input.</p>
<h4><a id="user-content-noargs-constructor" class="anchor" aria-hidden="true" href="#noargs-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Noargs Constructor</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mutable struct T
    a::Int
    b::Int
    c::Union{Nothing, Int}
end
T() = T(0, 0, 0)
JSON2.@format T noargs begin
    #...
end
"><pre><span class="pl-k">mutable struct</span> T
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
    c<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Int}</span>
<span class="pl-k">end</span>
<span class="pl-en">T</span>() <span class="pl-k">=</span> <span class="pl-c1">T</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
JSON2<span class="pl-k">.</span><span class="pl-c1">@format</span> T noargs <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span>...</span>
<span class="pl-k">end</span></pre></div>
<p>In this case, we've made <code>T</code> a <em>mutable</em> struct and defined a "noargs" constructor <code>T() = ...</code>; we then specified in <code>JSON2.@format T noargs</code> the <code>noargs</code> option.
During parsing, an instance of <code>T</code> will first constructed using the "noargs" constructor, then fields will be set as they're parsed from the JSON input (hence why <code>mutable struct</code> is required).</p>
</article></div>