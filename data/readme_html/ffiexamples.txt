<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ffiexamplesjl" class="anchor" aria-hidden="true" href="#ffiexamplesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FFIExamples.jl</h1>
<p dir="auto">Many small examples that demonstrate how Julia's FFI works as of v0.4.</p>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<ul dir="auto">
<li>
<p dir="auto">001: Pass a <code>Float64</code> from Julia to C by copying the value. Return a <code>Float64</code> from C to Julia by copying the value.</p>
</li>
<li>
<p dir="auto">002: Pass a <code>Float64</code> from Julia to C by copying a reference to the value. Return a <code>Void</code> value from C to Julia as a no-op.</p>
</li>
<li>
<p dir="auto">003: Pass an <code>ASCIIString</code> from Julia to C by copying a reference to the string's raw bytes. Mutate the raw byte vector inside the C function. Return a <code>Void</code> value from C to Julia as a no-op.</p>
</li>
<li>
<p dir="auto">004: Pass no arguments to a C function that returns a pointer to a static <code>Vector{Uint8}</code> whose memory is owned by C. Make a copy of the vector and interpret it as a string using <code>bytestring</code>. This creates an <code>ASCIIString</code> value that Julia's GC will free when appropriate.</p>
</li>
<li>
<p dir="auto">005: Pass a primitive integer type from Julia to C by copying the value. Return a user-defined <code>isbits</code> immutable struct by copying the value. Note that both Julia and C need to define the struct independently, but using equivalent memory layouts.</p>
</li>
<li>
<p dir="auto">006: Pass a user-defined <code>isbits</code> immutable struct from Julia to C by copying the value. Return a primitive integer type by copying the result value.</p>
</li>
<li>
<p dir="auto">007: Pass a user-defined mutable struct from Julia to C by copying a reference to the value. Mutate the struct's contents in C. Return <code>Void</code>.</p>
</li>
<li>
<p dir="auto">008: Pass a primitive integer type from Julia to C by coping the value. Return a user-defined mutable struct by copying the value.</p>
</li>
<li>
<p dir="auto">009: Pass a vector of primitive floating point type from Julia to C by copying a reference to the vector along with a copy of the array's length as a primitive integer type. Mutate the array in C. Return <code>Void</code>.</p>
</li>
<li>
<p dir="auto">010: Pass a vector of vectors of primitive floating point type from Julia to C by copying a reference to the vector of vectors along with a copy of the outer vector's length and a copy of the inner vector's common length. Mutate each of the inner vectors in C. Return <code>Void</code>.</p>
</li>
<li>
<p dir="auto">011: Pass a vector of <code>ASCIIString</code> objects from Julia to C by copying a reference to a vector of strings long with a copy of the outer vector's length and a reference to a vector of primitive integers, each of which represents the length of an individual string in the vector. Mutate each string in C. Return <code>Void</code>.</p>
</li>
<li>
<p dir="auto">012: Pass a vector of user-defined immutable structs from Julia to C by copying a reference to the vector along with a copy of the vector's length as a primitive integer value. Mutate each of the structs in C, thereby violating Julia's internal-to-Julia requirement that immutable objects never be mutated. Return <code>Void</code>.</p>
</li>
</ul>
</article></div>