<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-beliefgridvalueiteration" class="anchor" aria-hidden="true" href="#beliefgridvalueiteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BeliefGridValueIteration</h1>
<p><a href="https://travis-ci.org/JuliaPOMDP/BeliefGridValueIteration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/834efe5f390f007f43c80bb4394ca3440e9f455555229d6e1df0c9ac55ae5c75/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f42656c6965664772696456616c7565497465726174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/BeliefGridValueIteration.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaPOMDP/BeliefGridValueIteration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d8562b2515d181559b53e18d09ee9dea4b29130ba8101e160ed68fbd268885e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961504f4d44502f42656c6965664772696456616c7565497465726174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPOMDP/BeliefGridValueIteration.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaPOMDP/BeliefGridValueIteration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f6a029b32942444c9b3ff004cac709bc47262080e6f230819cb6d9103c6dc408/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961504f4d44502f42656c6965664772696456616c7565497465726174696f6e2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaPOMDP/BeliefGridValueIteration.jl/badge.svg" style="max-width:100%;"></a></p>
<p>An offline POMDP solver from "Computationally Feasible Bounds for Partially Observed Markov Decision Processes" (1991), by W. S. Lovejoy.
It computes an upper bound on the value function by performing value iteration on a discretized belief space.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Start Julia and make sure you have the JuliaPOMDP registry:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import POMDPs
POMDPs.add_registry()
"><pre><span class="pl-k">import</span> POMDPs
POMDPs<span class="pl-k">.</span><span class="pl-c1">add_registry</span>()</pre></div>
<p>Then install using the standard package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;BeliefGridValueIteration&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BeliefGridValueIteration<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs
using POMDPModels # for the tiger pomdp problem
using BeliefGridValueIteration

pomdp = TigerPOMDP()

solver = BeliefGridValueIterationSolver(m = 2, verbose=true)

policy = solve(solver, pomdp)

# Evaluate the value at a given belief point
b0 = [0.5, 0.5]
value(policy, b0)
"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> POMDPModels <span class="pl-c"><span class="pl-c">#</span> for the tiger pomdp problem</span>
<span class="pl-k">using</span> BeliefGridValueIteration

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()

solver <span class="pl-k">=</span> <span class="pl-c1">BeliefGridValueIterationSolver</span>(m <span class="pl-k">=</span> <span class="pl-c1">2</span>, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)

policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the value at a given belief point</span>
b0 <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]
<span class="pl-c1">value</span>(policy, b0)</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p><strong>Solver Options:</strong></p>
<ul>
<li><code>m::Int64 = 1</code> Granularity of the belief grid for the triangulation</li>
<li><code>precision::Float64 = 0.0</code> The solver stops when the desired convergence precision is reached</li>
<li><code>max_iterations::Int64 = 100</code> Number of iteration of value iteration</li>
<li><code>verbose::Bool = false</code> whether or not the solver prints information</li>
</ul>
<p><strong>Requirements:</strong></p>
<p>This should return a list of the following functions to be implemented for your POMDP to be solved by this solver:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@requirements_info BeliefGridValueIterationSolver() YourPOMDP()
"><pre><span class="pl-c1">@requirements_info</span> <span class="pl-c1">BeliefGridValueIterationSolver</span>() <span class="pl-c1">YourPOMDP</span>()</pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>The authors thank Tim Wheeler and Mykel Kochenderfer for providing a starter implementation of this code.</p>
</article></div>