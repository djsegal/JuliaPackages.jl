<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fluxarchitectures" class="anchor" aria-hidden="true" href="#fluxarchitectures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FluxArchitectures</h1>
<p dir="auto"><a href="https://sdobber.github.io/FluxArchitectures.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/sdobber/FluxArchitectures.jl/actions"><img src="https://github.com/sdobber/FluxArchitectures.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/sdobber/FluxArchitectures.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc73b696923fdd768286c26b0077aeaa5f0d45e14cff8614e1073e189cd9f4ac/68747470733a2f2f636f6465636f762e696f2f67682f73646f626265722f466c7578417263686974656374757265732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/sdobber/FluxArchitectures.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Complex neural network examples for Flux.jl.</p>
<p dir="auto">This package contains a loose collection of (slightly) more advanced neural network architectures, mostly centered around time series forecasting.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install FluxArchitectures, type <code>]</code> to activate the package manager, and type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add FluxArchitectures"><pre>add FluxArchitectures</pre></div>
<p dir="auto">for installation. After <code>using FluxArchitectures</code>, the following functions are exported:</p>
<ul dir="auto">
<li><code>prepare_data</code></li>
<li><code>get_data</code></li>
<li><code>DARNN</code></li>
<li><code>DSANet</code></li>
<li><code>LSTnet</code></li>
<li><code>TPALSTM</code></li>
</ul>
<p dir="auto">See their docstrings, the documentation, and the <code>examples</code> folder for details.</p>
<h2 dir="auto"><a id="user-content-models" class="anchor" aria-hidden="true" href="#models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Models</h2>
<ul dir="auto">
<li>
<p dir="auto"><strong>LSTnet</strong>: This "Long- and Short-term Time-series network" follows the paper by <a href="https://arxiv.org/abs/1703.07015" rel="nofollow">Lai et. al.</a>.</p>
</li>
<li>
<p dir="auto"><strong>DARNN</strong>: The "Dual-Stage Attention-Based Recurrent Neural Network for Time Series Prediction" is based on the paper by <a href="https://arxiv.org/abs/1704.02971" rel="nofollow">Qin et. al.</a>.</p>
</li>
<li>
<p dir="auto"><strong>TPA-LSTM</strong>: The Temporal Pattern Attention LSTM network is based on the paper "Temporal Pattern Attention for Multivariate Time Series Forecasting" by <a href="https://arxiv.org/pdf/1809.04206v2.pdf" rel="nofollow">Shih et. al.</a>.</p>
</li>
<li>
<p dir="auto"><strong>DSANet</strong>: The "Dual Self-Attention Network for Multivariate Time Series Forecasting" is based on the paper by <a href="https://kyonhuang.top/files/Huang-DSANet.pdf" rel="nofollow">Siteng Huang et. al.</a></p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">Activate the package and load some sample-data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FluxArchitectures
poollength = 10; horizon = 15; datalength = 1000;
input, target = get_data(:exchange_rate, poollength, datalength, horizon) "><pre><span class="pl-k">using</span> FluxArchitectures
poollength <span class="pl-k">=</span> <span class="pl-c1">10</span>; horizon <span class="pl-k">=</span> <span class="pl-c1">15</span>; datalength <span class="pl-k">=</span> <span class="pl-c1">1000</span>;
input, target <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(<span class="pl-c1">:exchange_rate</span>, poollength, datalength, horizon) </pre></div>
<p dir="auto">Define a model and a loss function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = LSTnet(size(input, 1), 2, 3, poollength, 120)
loss(x, y) = Flux.mse(model(x), y')"><pre>model <span class="pl-k">=</span> <span class="pl-c1">LSTnet</span>(<span class="pl-c1">size</span>(input, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, poollength, <span class="pl-c1">120</span>)
<span class="pl-en">loss</span>(x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">model</span>(x), y<span class="pl-k">'</span>)</pre></div>
<p dir="auto">Train the model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Flux.train!(loss, Flux.params(model),Iterators.repeated((input, target), 20), Adam(0.01))"><pre>Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(loss, Flux<span class="pl-k">.</span><span class="pl-c1">params</span>(model),Iterators<span class="pl-k">.</span><span class="pl-c1">repeated</span>((input, target), <span class="pl-c1">20</span>), <span class="pl-c1">Adam</span>(<span class="pl-c1">0.01</span>))</pre></div>
</article></div>