<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parametertestsjl" class="anchor" aria-hidden="true" href="#parametertestsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ParameterTests.jl</h1>
<p><em>Provides support for parameter and sample tests in Julia</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://infinitechai.github.io/ParameterTests.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://infinitechai.github.io/ParameterTests.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/InfiniteChai/ParameterTests.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba0b0867a01c974c677a446ff7f406e1431ff906fbc877d620f654eb40eea1c3/68747470733a2f2f7472617669732d63692e636f6d2f496e66696e697465436861692f506172616d6574657254657374732e6a6c2e7376673f6272616e63683d6d61696e" alt="" data-canonical-src="https://travis-ci.com/InfiniteChai/ParameterTests.jl.svg?branch=main" style="max-width:100%;"></a> <a href="https://codecov.io/gh/InfiniteChai/ParameterTests.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5ee44dc90b870b09a1ddd1faf3e67350fb6eb2eb40c648465cc768ab9b29bfc1/68747470733a2f2f636f6465636f762e696f2f67682f496e66696e697465436861692f506172616d6574657254657374732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/InfiniteChai/ParameterTests.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package builds around the standard testing framework in Julia to allow for easy
extension for parameterised and sample testing, while not restricting the free-form
testing capabilities.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>This package provides a simple way to write parameterised tests and to help find
the edge cases in your code.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ParameterTests
@paramtest &quot;Integers Commute&quot; begin
  @given a ∈ integers(), b ∈ integers()
  @test a + b == b + a
end
"><pre><span class="pl-k">using</span> ParameterTests
<span class="pl-c1">@paramtest</span> <span class="pl-s"><span class="pl-pds">"</span>Integers Commute<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
  <span class="pl-c1">@given</span> a <span class="pl-k">∈</span> <span class="pl-c1">integers</span>(), b <span class="pl-k">∈</span> <span class="pl-c1">integers</span>()
  <span class="pl-c1">@test</span> a <span class="pl-k">+</span> b <span class="pl-k">==</span> b <span class="pl-k">+</span> a
<span class="pl-k">end</span></pre></div>
</article></div>