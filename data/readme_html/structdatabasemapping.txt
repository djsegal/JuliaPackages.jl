<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://coveralls.io/github/lucianolorenti/StructDatabaseMapping.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/66fec326a165d26d9273dec7e2a4c766f1735f02435e7f57b7c718931dc46fd1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c756369616e6f6c6f72656e74692f53747275637444617461626173654d617070696e672e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/lucianolorenti/StructDatabaseMapping.jl/badge.svg" style="max-width:100%;"></a>  <a href="https://lucianolorenti.github.io/StructDatabaseMapping.jl/dev/index.html" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add StructDatabaseMapping
"><pre>] add StructDatabaseMapping</pre></div>
<h1><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h1>
<ul>
<li><a href="https://github.com/JuliaDatabases/SQLite.jl">SQLite</a></li>
<li><a href="https://github.com/invenia/LibPQ.jl">PostgreSQL</a></li>
<li><a href="https://github.com/JuliaDatabases/Redis.jl">Redis</a></li>
<li>Possibly every relational DB that supports the DBInterface</li>
</ul>
<h1><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple example</h1>
<p><a href="https://lucianolorenti.github.io/StructDatabaseMapping.jl/dev/example.html" rel="nofollow">For a better example see the docs</a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StructDatabaseMapping
using Dates
using SQLite
using Test

mutable struct Author &lt;: Model
    id::DBId{Integer}
    name::String
    age::Integer
    date::DateTime
end
function Author(;id::Union{Integer, Nothing} = nothing,
                name::String=&quot;&quot;,
                age::Integer=0,
                date::DateTime=now())
    return Author(id, name, age, date)
end
mutable struct Book &lt;: Model
    id::DBId{String}
    author::ForeignKey{Author}
    data::Dict{String, Integer}
end
function Book(;id::Union{String, Nothing}=nothing,
               author::Foreign{Author}=Author(),
               data::Dict{String, Integer}=Dict())
    return Book(id, author, data)
end

DB_FILE = &quot;test_db&quot;
using SQLite
creator = ()-&gt;SQLite.DB(DB_FILE)
mapper = DBMapper(creator)

register!(mapper, Author)
register!(mapper, Book)

configure_relation(mapper, Book, :author, on_delete=Cascade())
create_table(mapper, Author)
create_table(mapper, Book)
author = Author(name=&quot;pirulo&quot;, age=50)
insert!(mapper, author)
"><pre><span class="pl-k">using</span> StructDatabaseMapping
<span class="pl-k">using</span> Dates
<span class="pl-k">using</span> SQLite
<span class="pl-k">using</span> Test

<span class="pl-k">mutable struct</span> Author <span class="pl-k">&lt;:</span> <span class="pl-c1">Model</span>
    id<span class="pl-k">::</span><span class="pl-c1">DBId{Integer}</span>
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
    age<span class="pl-k">::</span><span class="pl-c1">Integer</span>
    date<span class="pl-k">::</span><span class="pl-c1">DateTime</span>
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">Author</span>(;id<span class="pl-k">::</span><span class="pl-c1">Union{Integer, Nothing}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
                name<span class="pl-k">::</span><span class="pl-c1">String</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>,
                age<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">=</span><span class="pl-c1">0</span>,
                date<span class="pl-k">::</span><span class="pl-c1">DateTime</span><span class="pl-k">=</span><span class="pl-c1">now</span>())
    <span class="pl-k">return</span> <span class="pl-c1">Author</span>(id, name, age, date)
<span class="pl-k">end</span>
<span class="pl-k">mutable struct</span> Book <span class="pl-k">&lt;:</span> <span class="pl-c1">Model</span>
    id<span class="pl-k">::</span><span class="pl-c1">DBId{String}</span>
    author<span class="pl-k">::</span><span class="pl-c1">ForeignKey{Author}</span>
    data<span class="pl-k">::</span><span class="pl-c1">Dict{String, Integer}</span>
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">Book</span>(;id<span class="pl-k">::</span><span class="pl-c1">Union{String, Nothing}</span><span class="pl-k">=</span><span class="pl-c1">nothing</span>,
               author<span class="pl-k">::</span><span class="pl-c1">Foreign{Author}</span><span class="pl-k">=</span><span class="pl-c1">Author</span>(),
               data<span class="pl-k">::</span><span class="pl-c1">Dict{String, Integer}</span><span class="pl-k">=</span><span class="pl-c1">Dict</span>())
    <span class="pl-k">return</span> <span class="pl-c1">Book</span>(id, author, data)
<span class="pl-k">end</span>

DB_FILE <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test_db<span class="pl-pds">"</span></span>
<span class="pl-k">using</span> SQLite
creator <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span>SQLite<span class="pl-k">.</span><span class="pl-c1">DB</span>(DB_FILE)
mapper <span class="pl-k">=</span> <span class="pl-c1">DBMapper</span>(creator)

<span class="pl-c1">register!</span>(mapper, Author)
<span class="pl-c1">register!</span>(mapper, Book)

<span class="pl-c1">configure_relation</span>(mapper, Book, <span class="pl-c1">:author</span>, on_delete<span class="pl-k">=</span><span class="pl-c1">Cascade</span>())
<span class="pl-c1">create_table</span>(mapper, Author)
<span class="pl-c1">create_table</span>(mapper, Book)
author <span class="pl-k">=</span> <span class="pl-c1">Author</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>pirulo<span class="pl-pds">"</span></span>, age<span class="pl-k">=</span><span class="pl-c1">50</span>)
<span class="pl-c1">insert!</span>(mapper, author)</pre></div>
</article></div>