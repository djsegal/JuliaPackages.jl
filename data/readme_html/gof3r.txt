<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gof3r" class="anchor" aria-hidden="true" href="#gof3r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GOF3R</h1>
<p dir="auto"><a href="https://travis-ci.com/SimonDanisch/GOF3R.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad4cc95d3df1393026146a1a94f8fd3e086888ac747239fda582d8ab57d31a0e/68747470733a2f2f7472617669732d63692e636f6d2f626561636f6e2d62696f7369676e616c732f474f4633522e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/beacon-biosignals/GOF3R.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/beacon-biosignals/GOF3R.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/19597a27e3bbb9128682243477c49868d4f53f58db704abafa5702e33d605f27/68747470733a2f2f636f6465636f762e696f2f67682f626561636f6e2d62696f7369676e616c732f474f4633522e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/beacon-biosignals/GOF3R.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Very lightweight wrapper around <a href="https://github.com/rlmcpherson/s3gof3r">s3gof3r</a>.
Offers:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
    s3stream(bucket, path)

Return an `IO` object streaming `path` from `bucket`.
&quot;&quot;&quot;
s3stream(bucket, path)

&quot;&quot;&quot;
    s3getfile(bucket, path, outfile)

Write the file at `bucket:path` to `outfile`.
&quot;&quot;&quot;
s3getfile(bucket, path, outfile)

&quot;&quot;&quot;
    s3upload(bucket, file, key)

Upload `file` to `bucket:key`.
&quot;&quot;&quot;
s3upload(bucket, file, key)

&quot;&quot;&quot;
    s3stream(f, bucket, path)

Call `f(s3stream(bucket, path))`, ensuring that the stream is closed properly once `f`
has finished executing, including in the case of errors.
&quot;&quot;&quot;
s3stream(f, bucket, path)"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    s3stream(bucket, path)</span>
<span class="pl-s"></span>
<span class="pl-s">Return an `IO` object streaming `path` from `bucket`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">s3stream</span>(bucket, path)

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    s3getfile(bucket, path, outfile)</span>
<span class="pl-s"></span>
<span class="pl-s">Write the file at `bucket:path` to `outfile`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">s3getfile</span>(bucket, path, outfile)

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    s3upload(bucket, file, key)</span>
<span class="pl-s"></span>
<span class="pl-s">Upload `file` to `bucket:key`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">s3upload</span>(bucket, file, key)

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    s3stream(f, bucket, path)</span>
<span class="pl-s"></span>
<span class="pl-s">Call `f(s3stream(bucket, path))`, ensuring that the stream is closed properly once `f`</span>
<span class="pl-s">has finished executing, including in the case of errors.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">s3stream</span>(f, bucket, path)</pre></div>
<p dir="auto">You need to set up the authorization as outlined at <a href="https://github.com/rlmcpherson/s3gof3r#gof3r-command-line-interface-usage">https://github.com/rlmcpherson/s3gof3r#gof3r-command-line-interface-usage</a></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export AWS_ACCESS_KEY_ID=&lt;access_key&gt;
export AWS_SECRET_ACCESS_KEY=&lt;secret_key&gt;"><pre class="notranslate"><code>export AWS_ACCESS_KEY_ID=&lt;access_key&gt;
export AWS_SECRET_ACCESS_KEY=&lt;secret_key&gt;
</code></pre></div>
<p dir="auto">gof3r also supports IAM role-based keys from EC2 instance metadata. If available and environment variables are not set, these keys are used are used automatically.
For 2 factor authentication you can also set <code>AWS_SECURITY_TOKEN</code> to your session token.
A little script doing 2 factor auth for you with aws-cli:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JSON3

code = 000000 # your valid code from your 2 factor APP
userid = 0000000000 # your user id from AWS
username = &quot;username&quot; # your username
json = String(read(`aws sts get-session-token --serial-number arn:aws:iam::$(userid):mfa/$(username) --token-code $code --profile=main`))
creds = JSON3.read(json).Credentials

ENV[&quot;AWS_ACCESS_KEY_ID&quot;] = creds.AccessKeyId
ENV[&quot;AWS_SECRET_ACCESS_KEY&quot;] = creds.SecretAccessKey
ENV[&quot;AWS_SECURITY_TOKEN&quot;] = creds.SessionToken"><pre><span class="pl-k">using</span> JSON3

code <span class="pl-k">=</span> <span class="pl-c1">000000</span> <span class="pl-c"><span class="pl-c">#</span> your valid code from your 2 factor APP</span>
userid <span class="pl-k">=</span> <span class="pl-c1">0000000000</span> <span class="pl-c"><span class="pl-c">#</span> your user id from AWS</span>
username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> your username</span>
json <span class="pl-k">=</span> <span class="pl-c1">String</span>(<span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">`</span>aws sts get-session-token --serial-number arn:aws:iam::$(userid):mfa/$(username) --token-code $code --profile=main<span class="pl-pds">`</span></span>))
creds <span class="pl-k">=</span> JSON3<span class="pl-k">.</span><span class="pl-c1">read</span>(json)<span class="pl-k">.</span>Credentials

<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>AWS_ACCESS_KEY_ID<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> creds<span class="pl-k">.</span>AccessKeyId
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>AWS_SECRET_ACCESS_KEY<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> creds<span class="pl-k">.</span>SecretAccessKey
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>AWS_SECURITY_TOKEN<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> creds<span class="pl-k">.</span>SessionToken</pre></div>
<p dir="auto">And additionally set <code>AWS_REGION</code> and <code>AWS_ENDPOINT</code>, which default to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if !haskey(ENV, &quot;AWS_REGION&quot;)
    ENV[&quot;AWS_REGION&quot;] = &quot;us-east-2&quot;
end
endpoint = get(ENV, &quot;AWS_ENDPOINT&quot;, &quot;s3.us-east-2.amazonaws.com&quot;)"><pre><span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">haskey</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>AWS_REGION<span class="pl-pds">"</span></span>)
    <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>AWS_REGION<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>us-east-2<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>
endpoint <span class="pl-k">=</span> <span class="pl-c1">get</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>AWS_ENDPOINT<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>s3.us-east-2.amazonaws.com<span class="pl-pds">"</span></span>)</pre></div>
</article></div>