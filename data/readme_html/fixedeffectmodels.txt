<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/FixedEffects/FixedEffectModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/34a30f03c2970c2eecc2b37863733ea254514d33/68747470733a2f2f7472617669732d63692e636f6d2f4669786564456666656374732f46697865644566666563744d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/FixedEffects/FixedEffectModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://gitlab.com/JuliaGPU/FixedEffectModels.jl/commits/master" rel="nofollow"><img src="https://camo.githubusercontent.com/ef42519d74cf31dac280007c03fa173a62024c69/68747470733a2f2f6769746c61622e636f6d2f4a756c69614750552f46697865644566666563744d6f64656c732e6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="pipeline status" data-canonical-src="https://gitlab.com/JuliaGPU/FixedEffectModels.jl/badges/master/pipeline.svg" style="max-width:100%;"></a></p>
<p>This package estimates linear models with high dimensional categorical variables and/or instrumental variables.</p>
<p>Its objective is similar to the Stata command <a href="https://github.com/sergiocorreia/reghdfe"><code>reghdfe</code></a> and the R function <a href="https://cran.r-project.org/web/packages/lfe/lfe.pdf" rel="nofollow"><code>felm</code></a>. The package tends to be much faster than these two options.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/65b43aedb317f7d44a734d8ee5ac1971cc5b2c8a/687474703a2f2f7777772e6d61747468696575676f6d657a2e636f6d2f66696c65732f66697865646566666563746d6f64656c735f62656e63686d61726b2e706e67"><img src="https://camo.githubusercontent.com/65b43aedb317f7d44a734d8ee5ac1971cc5b2c8a/687474703a2f2f7777772e6d61747468696575676f6d657a2e636f6d2f66696c65732f66697865646566666563746d6f64656c735f62656e63686d61726b2e706e67" alt="benchmark" data-canonical-src="http://www.matthieugomez.com/files/fixedeffectmodels_benchmark.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add FixedEffectModels</code>.</p>
<h2><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syntax</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DataFrames, RDatasets, FixedEffectModels
df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>plm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cigar<span class="pl-pds">"</span></span>)
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)), Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>), weights <span class="pl-k">=</span> <span class="pl-c1">:Pop</span>)
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span>
<span class="pl-c"><span class="pl-c">#</span> Number of obs:               1380   Degrees of freedom:            32</span>
<span class="pl-c"><span class="pl-c">#</span> R2:                         0.803   R2 Adjusted:                0.798</span>
<span class="pl-c"><span class="pl-c">#</span> F Statistic:              13.3382   p-value:                    0.001</span>
<span class="pl-c"><span class="pl-c">#</span> R2 within:                  0.139   Iterations:                     6</span>
<span class="pl-c"><span class="pl-c">#</span> Converged:                   true</span>
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span>
<span class="pl-c"><span class="pl-c">#</span>         Estimate  Std.Error  t value Pr(&gt;|t|)   Lower 95%   Upper 95%</span>
<span class="pl-c"><span class="pl-c">#</span> ---------------------------------------------------------------------</span>
<span class="pl-c"><span class="pl-c">#</span> NDI  -0.00526264 0.00144097 -3.65216    0.000 -0.00808942 -0.00243586</span>
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span></pre></div>
<ul>
<li>
<p>A typical formula is composed of one dependent variable, exogeneous variables, endogeneous variables, instrumental variables, and a set of high-dimensional fixed effects.</p>
<div class="highlight highlight-source-julia"><pre>dependent variable <span class="pl-k">~</span> exogenous variables <span class="pl-k">+</span> (endogenous variables <span class="pl-k">~</span> instrumental variables) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(fixedeffect variable)</pre></div>
<p>High-dimensional fixed effect variables are indicated with the function <code>fe</code>.  You can add an arbitrary number of high dimensional fixed effects, separated with <code>+</code>. Moreover, you can interact a fixed effect with a continuous variable (e.g. <code>fe(State)&amp;Year</code>) or with another fixed effect (e.g. <code>fe(State)&amp;fe(Year)</code>).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> Price <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)))
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State)<span class="pl-k">&amp;</span>Year))
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State)<span class="pl-k">&amp;</span><span class="pl-c1">fe</span>(Year)))
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> (Price <span class="pl-k">~</span> Pimin)))</pre></div>
<p>To construct formula programatically, use</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">reg</span>(df, <span class="pl-c1">Term</span>(<span class="pl-c1">:Sales</span>) <span class="pl-k">~</span> <span class="pl-c1">Term</span>(<span class="pl-c1">:NDI</span>) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(<span class="pl-c1">Term</span>(<span class="pl-c1">:State</span>)) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(<span class="pl-c1">Term</span>(<span class="pl-c1">:Year</span>))</pre></div>
</li>
<li>
<p>Standard errors are indicated with the prefix <code>Vcov</code>.</p>
<div class="highlight highlight-source-julia"><pre> Vcov<span class="pl-k">.</span><span class="pl-c1">robust</span>()
 Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>)
 Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>, <span class="pl-c1">:Year</span>)</pre></div>
</li>
<li>
<p>The option <code>weights</code> specifies a variable for weights</p>
<div class="highlight highlight-source-julia"><pre> weights <span class="pl-k">=</span> <span class="pl-c1">:Pop</span></pre></div>
</li>
<li>
<p>The option <code>subset</code> specifies a subset of the data</p>
<div class="highlight highlight-source-julia"><pre> subset <span class="pl-k">=</span> df<span class="pl-k">.</span>State <span class="pl-k">.&gt;=</span> <span class="pl-c1">30</span></pre></div>
</li>
<li>
<p>The option <code>save</code> can be set to one of the following:  <code>:residuals</code> to save residuals, <code>:fe</code> to save fixed effects, <code>true</code> to save both</p>
</li>
<li>
<p>The option <code>method</code> can be set to one of the following: <code>:cpu</code>, <code>:gpu</code> (see Performances below).</p>
</li>
<li>
<p>The option <code>contrasts</code> specifies particular contrasts for categorical variables in the formula, e.g.</p>
<div class="highlight highlight-source-julia"><pre> df<span class="pl-k">.</span>YearC <span class="pl-k">=</span> <span class="pl-c1">categorical</span>(df<span class="pl-k">.</span>Year)
 <span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> YearC); contrasts <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:YearC</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">DummyCoding</span>(base <span class="pl-k">=</span> <span class="pl-c1">80</span>)))</pre></div>
</li>
</ul>
<h2><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Output</h2>
<p><code>reg</code> returns a light object. It is composed of</p>
<ul>
<li>the vector of coefficients &amp; the covariance matrix (use <code>coef</code>, <code>coefnames</code>, <code>vcov</code> on the output of <code>reg</code>)</li>
<li>a boolean vector reporting rows used in the estimation</li>
<li>a set of scalars (number of observations, the degree of freedoms, r2, etc)</li>
<li>with the option <code>save = true</code>, a dataframe aligned with the initial dataframe with residuals and, if the model contains high dimensional fixed effects, fixed effects estimates (use <code>residuals</code> or <code>fe</code> on the output of <code>reg</code>)</li>
</ul>
<p>Methods such as <code>predict</code>, <code>residuals</code> are still defined but require to specify a dataframe as a second argument.  The problematic size of <code>lm</code> and <code>glm</code> models in R or Julia is discussed <a href="http://www.r-bloggers.com/trimming-the-fat-from-glm-models-in-r/" rel="nofollow">here</a>, <a href="https://blogs.oracle.com/R/entry/is_the_size_of_your" rel="nofollow">here</a>, <a href="http://stackoverflow.com/questions/21896265/how-to-minimize-size-of-object-of-class-lm-without-compromising-it-being-passe" rel="nofollow">here</a> <a href="http://stackoverflow.com/questions/15260429/is-there-a-way-to-compress-an-lm-class-for-later-prediction" rel="nofollow">here</a> (and for absurd consequences, <a href="http://stackoverflow.com/questions/26010742/using-stargazer-with-memory-greedy-glm-objects" rel="nofollow">here</a> and <a href="http://stackoverflow.com/questions/22577161/not-enough-ram-to-run-stargazer-the-normal-way" rel="nofollow">there</a>).</p>
<p>You may use <a href="https://github.com/jmboehm/RegressionTables.jl">RegressionTables.jl</a> to get publication-quality regression tables.</p>
<h2><a id="user-content-performances" class="anchor" aria-hidden="true" href="#performances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performances</h2>
<h4><a id="user-content-gpu" class="anchor" aria-hidden="true" href="#gpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GPU</h4>
<p>The package has support for GPUs (Nvidia) (thanks to Paul Schrimpf). This can make the package an order of magnitude faster for complicated problems.</p>
<p>First make sure that <code>using CuArrays</code> works without issue. Then, estimate a model with <code>method = :gpu</code>.</p>
<p>When working on the GPU, it is encouraged to set the floating point precision to <code>Float32</code> with <code>double_precision = false</code>, since it is usually much faster.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FixedEffectModels
df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>plm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cigar<span class="pl-pds">"</span></span>)
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)), method <span class="pl-k">=</span> <span class="pl-c1">:gpu</span>, double_precision <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<h2><a id="user-content-solution-method" class="anchor" aria-hidden="true" href="#solution-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solution Method</h2>
<p>Denote the model <code>y = X β + D θ + e</code> where X is a matrix with few columns and D is the design matrix from categorical variables. Estimates for <code>β</code>, along with their standard errors, are obtained in two steps:</p>
<ol>
<li><code>y, X</code>  are regressed on <code>D</code> using the package <a href="https://github.com/matthieugomez/FixedEffects.jl">FixedEffects.jl</a></li>
<li>Estimates for <code>β</code>, along with their standard errors, are obtained by regressing the projected <code>y</code> on the projected <code>X</code> (an application of the Frisch Waugh-Lovell Theorem)</li>
<li>With the option <code>save = true</code>, estimates for the high dimensional fixed effects are obtained after regressing the residuals of the full model minus the residuals of the partialed out models on <code>D</code> using the package <a href="https://github.com/matthieugomez/FixedEffects.jl">FixedEffects.jl</a></li>
</ol>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h1>
<p>Baum, C. and Schaffer, M. (2013) <em>AVAR: Stata module to perform asymptotic covariance estimation for iid and non-iid data robust to heteroskedasticity, autocorrelation, 1- and 2-way clustering, and common cross-panel autocorrelated disturbances</em>. Statistical Software Components, Boston College Department of Economics.</p>
<p>Correia, S. (2014) <em>REGHDFE: Stata module to perform linear or instrumental-variable regression absorbing any number of high-dimensional fixed effects</em>. Statistical Software Components, Boston College Department of Economics.</p>
<p>Fong, DC. and Saunders, M. (2011) <em>LSMR: An Iterative Algorithm for Sparse Least-Squares Problems</em>.  SIAM Journal on Scientific Computing</p>
<p>Gaure, S. (2013) <em>OLS with Multiple High Dimensional Category Variables</em>. Computational Statistics and Data Analysis</p>
<p>Kleibergen, F, and Paap, R. (2006) <em>Generalized reduced rank tests using the singular value decomposition.</em> Journal of econometrics</p>
<p>Kleibergen, F. and Schaffer, M.  (2007) <em>RANKTEST: Stata module to test the rank of a matrix using the Kleibergen-Paap rk statistic</em>. Statistical Software Components, Boston College Department of Economics.</p>
</article></div>