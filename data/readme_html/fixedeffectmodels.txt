<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/FixedEffects/FixedEffectModels.jl/actions"><img src="https://github.com/FixedEffects/FixedEffectModels.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a></p>
<p dir="auto">This package estimates linear models with high dimensional categorical variables and/or instrumental variables.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add FixedEffectModels</code>.</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">The objective of the package is similar to the Stata command <a href="https://github.com/sergiocorreia/reghdfe"><code>reghdfe</code></a> and the R packages <a href="https://cran.r-project.org/web/packages/lfe/lfe.pdf" rel="nofollow"><code>lfe</code></a> and <a href="https://lrberge.github.io/fixest/" rel="nofollow"><code>fixest</code></a>. The package is much faster than <code>reghdfe</code> or <code>lfe</code>. It also tends to be a bit faster than the more recent <code>fixest</code> (depending on the exact command). For complicated models, <code>FixedEffectModels</code> can also run on Nvidia GPUs for even faster performances (see below)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d96ad00ea139b4f2641fd9c9e0b3ab900ac39f021ba8129fc81cef7da66b1a94/687474703a2f2f7777772e6d61747468696575676f6d657a2e636f6d2f66696c65732f66697865646566666563746d6f64656c735f62656e63686d61726b2e706e67"><img src="https://camo.githubusercontent.com/d96ad00ea139b4f2641fd9c9e0b3ab900ac39f021ba8129fc81cef7da66b1a94/687474703a2f2f7777772e6d61747468696575676f6d657a2e636f6d2f66696c65732f66697865646566666563746d6f64656c735f62656e63686d61726b2e706e67" alt="benchmark" data-canonical-src="http://www.matthieugomez.com/files/fixedeffectmodels_benchmark.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames, RDatasets, FixedEffectModels
df = dataset(&quot;plm&quot;, &quot;Cigar&quot;)
reg(df, @formula(Sales ~ NDI + fe(State) + fe(Year)), Vcov.cluster(:State), weights = :Pop)
# =====================================================================
# Number of obs:               1380   Degrees of freedom:            32
# R2:                         0.803   R2 Adjusted:                0.798
# F Statistic:              13.3382   p-value:                    0.001
# R2 within:                  0.139   Iterations:                     6
# Converged:                   true
# =====================================================================
#         Estimate  Std.Error  t value Pr(&gt;|t|)   Lower 95%   Upper 95%
# ---------------------------------------------------------------------
# NDI  -0.00526264 0.00144097 -3.65216    0.000 -0.00808942 -0.00243586
# ====================================================================="><pre><span class="pl-k">using</span> DataFrames, RDatasets, FixedEffectModels
df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>plm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cigar<span class="pl-pds">"</span></span>)
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)), Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>), weights <span class="pl-k">=</span> <span class="pl-c1">:Pop</span>)
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span>
<span class="pl-c"><span class="pl-c">#</span> Number of obs:               1380   Degrees of freedom:            32</span>
<span class="pl-c"><span class="pl-c">#</span> R2:                         0.803   R2 Adjusted:                0.798</span>
<span class="pl-c"><span class="pl-c">#</span> F Statistic:              13.3382   p-value:                    0.001</span>
<span class="pl-c"><span class="pl-c">#</span> R2 within:                  0.139   Iterations:                     6</span>
<span class="pl-c"><span class="pl-c">#</span> Converged:                   true</span>
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span>
<span class="pl-c"><span class="pl-c">#</span>         Estimate  Std.Error  t value Pr(&gt;|t|)   Lower 95%   Upper 95%</span>
<span class="pl-c"><span class="pl-c">#</span> ---------------------------------------------------------------------</span>
<span class="pl-c"><span class="pl-c">#</span> NDI  -0.00526264 0.00144097 -3.65216    0.000 -0.00808942 -0.00243586</span>
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">A typical formula is composed of one dependent variable, exogeneous variables, endogeneous variables, instrumental variables, and a set of high-dimensional fixed effects.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dependent variable ~ exogenous variables + (endogenous variables ~ instrumental variables) + fe(fixedeffect variable)"><pre>dependent variable <span class="pl-k">~</span> exogenous variables <span class="pl-k">+</span> (endogenous variables <span class="pl-k">~</span> instrumental variables) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(fixedeffect variable)</pre></div>
<p dir="auto">High-dimensional fixed effect variables are indicated with the function <code>fe</code>.  You can add an arbitrary number of high dimensional fixed effects, separated with <code>+</code>. You can also interact fixed effects using <code>&amp;</code> or <code>*</code>.</p>
<p dir="auto">For instance, to add state fixed effects use <code>fe(State)</code>. To add both state and year fixed effects, use <code>fe(State) + fe(Year)</code>. To add state-year fixed effects, use <code>fe(State)&amp;fe(Year)</code>. To add state specific slopes for year, use <code>fe(State)&amp;Year</code>. To add both state fixed-effects and state specific slopes for year use <code>fe(State)*Year</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reg(df, @formula(Sales ~ Price + fe(State) + fe(Year)))
reg(df, @formula(Sales ~ NDI + fe(State) + fe(State)&amp;Year))
reg(df, @formula(Sales ~ NDI + fe(State)&amp;fe(Year)))              # for illustration only (this will not run here)
reg(df, @formula(Sales ~ (Price ~ Pimin)))"><pre><span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> Price <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)))
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State)<span class="pl-k">&amp;</span>Year))
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State)<span class="pl-k">&amp;</span><span class="pl-c1">fe</span>(Year)))              <span class="pl-c"><span class="pl-c">#</span> for illustration only (this will not run here)</span>
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> (Price <span class="pl-k">~</span> Pimin)))</pre></div>
<p dir="auto">To construct formula programatically, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reg(df, term(:Sales) ~ term(:NDI) + fe(:State) + fe(:Year))"><pre><span class="pl-c1">reg</span>(df, <span class="pl-c1">term</span>(<span class="pl-c1">:Sales</span>) <span class="pl-k">~</span> <span class="pl-c1">term</span>(<span class="pl-c1">:NDI</span>) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(<span class="pl-c1">:State</span>) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(<span class="pl-c1">:Year</span>))</pre></div>
</li>
<li>
<p dir="auto">The option <code>contrasts</code> specifies that a column should be understood as a set of dummy variables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" reg(df, @formula(Sales ~ Price + Year); contrasts = Dict(:Year =&gt; DummyCoding()))"><pre> <span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> Price <span class="pl-k">+</span> Year); contrasts <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Year</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">DummyCoding</span>()))</pre></div>
<p dir="auto">You can specify different base levels</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" reg(df, @formula(Sales ~ Price + Year); contrasts = Dict(:Year =&gt; DummyCoding(base = 80)))"><pre> <span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> Price <span class="pl-k">+</span> Year); contrasts <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Year</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">DummyCoding</span>(base <span class="pl-k">=</span> <span class="pl-c1">80</span>)))</pre></div>
</li>
<li>
<p dir="auto">The option <code>weights</code> specifies a variable for weights</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" weights = :Pop"><pre> weights <span class="pl-k">=</span> <span class="pl-c1">:Pop</span></pre></div>
</li>
<li>
<p dir="auto">Standard errors are indicated with the prefix <code>Vcov</code> (with the package <a href="http://github.com/matthieugomez/Vcov.jl">Vcov</a>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" Vcov.robust()
 Vcov.cluster(:State)
 Vcov.cluster(:State, :Year)"><pre> Vcov<span class="pl-k">.</span><span class="pl-c1">robust</span>()
 Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>)
 Vcov<span class="pl-k">.</span><span class="pl-c1">cluster</span>(<span class="pl-c1">:State</span>, <span class="pl-c1">:Year</span>)</pre></div>
</li>
<li>
<p dir="auto">The option <code>save</code> can be set to one of the following:  <code>:none</code> (default) to save nothing, <code>:residuals</code> to save residuals, <code>:fe</code> to save fixed effects, and <code>:all</code> to save both. Once saved, they can then be accessed using <code>residuals(m)</code> or <code>fe(m)</code> where <code>m</code> is the estimated model (the object returned by the function <code>reg</code>). Both residuals and fixed effects are aligned with the original dataframe used to estimate the model.</p>
</li>
<li>
<p dir="auto">The option <code>method</code> can be set to one of the following: <code>:cpu</code>, <code>:gpu</code> (see Performances below).</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output</h2>
<p dir="auto"><code>reg</code> returns a light object. It is composed of</p>
<ul dir="auto">
<li>the vector of coefficients &amp; the covariance matrix (use <code>coef</code>, <code>coefnames</code>, <code>vcov</code> on the output of <code>reg</code>)</li>
<li>a boolean vector reporting rows used in the estimation</li>
<li>a set of scalars (number of observations, the degree of freedoms, r2, etc)</li>
</ul>
<p dir="auto">Methods such as <code>predict</code>, <code>residuals</code> are still defined but require to specify a dataframe as a second argument.  The problematic size of <code>lm</code> and <code>glm</code> models in R or Julia is discussed <a href="http://www.r-bloggers.com/trimming-the-fat-from-glm-models-in-r/" rel="nofollow">here</a>, <a href="https://blogs.oracle.com/R/entry/is_the_size_of_your" rel="nofollow">here</a>, <a href="http://stackoverflow.com/questions/21896265/how-to-minimize-size-of-object-of-class-lm-without-compromising-it-being-passe" rel="nofollow">here</a> <a href="http://stackoverflow.com/questions/15260429/is-there-a-way-to-compress-an-lm-class-for-later-prediction" rel="nofollow">here</a> (and for absurd consequences, <a href="http://stackoverflow.com/questions/26010742/using-stargazer-with-memory-greedy-glm-objects" rel="nofollow">here</a> and <a href="http://stackoverflow.com/questions/22577161/not-enough-ram-to-run-stargazer-the-normal-way" rel="nofollow">there</a>).</p>
<p dir="auto">You may use <a href="https://github.com/jmboehm/RegressionTables.jl">RegressionTables.jl</a> to get publication-quality regression tables.</p>
<h2 dir="auto"><a id="user-content-performances" class="anchor" aria-hidden="true" href="#performances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performances</h2>
<h3 dir="auto"><a id="user-content-multithreads" class="anchor" aria-hidden="true" href="#multithreads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultiThreads</h3>
<p dir="auto"><code>FixedEffectModels</code> is multi-threaded. Use the option <code>nthreads</code> to select the number of threads to use in the estimation (defaults to <code>Threads.nthreads()</code>).</p>
<h3 dir="auto"><a id="user-content-nvidia-gpu" class="anchor" aria-hidden="true" href="#nvidia-gpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nvidia GPU</h3>
<p dir="auto">The package has support for Nvidia GPUs  (thanks to Paul Schrimpf). This can make the package an order of magnitude faster for complicated problems.</p>
<p dir="auto">If you have a Nvidia GPU, run <code>using CUDA</code> before <code>using FixedEffectModels</code>. Then, estimate a model with <code>method = :gpu</code>. For maximum speed, set the floating point precision to <code>Float32</code> with <code>double_precision = false</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CUDA, FixedEffectModels
df = dataset(&quot;plm&quot;, &quot;Cigar&quot;)
reg(df, @formula(Sales ~ NDI + fe(State) + fe(Year)), method = :gpu, double_precision = false)"><pre><span class="pl-k">using</span> CUDA, FixedEffectModels
df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>plm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cigar<span class="pl-pds">"</span></span>)
<span class="pl-c1">reg</span>(df, <span class="pl-c1">@formula</span>(Sales <span class="pl-k">~</span> NDI <span class="pl-k">+</span> <span class="pl-c1">fe</span>(State) <span class="pl-k">+</span> <span class="pl-c1">fe</span>(Year)), method <span class="pl-k">=</span> <span class="pl-c1">:gpu</span>, double_precision <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<h2 dir="auto"><a id="user-content-solution-method" class="anchor" aria-hidden="true" href="#solution-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solution Method</h2>
<p dir="auto">Denote the model <code>y = X β + D θ + e</code> where X is a matrix with few columns and D is the design matrix from categorical variables. Estimates for <code>β</code>, along with their standard errors, are obtained in two steps:</p>
<ol dir="auto">
<li><code>y, X</code>  are regressed on <code>D</code> using the package <a href="https://github.com/FixedEffects/FixedEffects.jl">FixedEffects.jl</a></li>
<li>Estimates for <code>β</code>, along with their standard errors, are obtained by regressing the projected <code>y</code> on the projected <code>X</code> (an application of the Frisch Waugh-Lovell Theorem)</li>
<li>With the option <code>save = true</code>, estimates for the high dimensional fixed effects are obtained after regressing the residuals of the full model minus the residuals of the partialed out models on <code>D</code> using the package <a href="https://github.com/FixedEffects/FixedEffects.jl">FixedEffects.jl</a></li>
</ol>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">Baum, C. and Schaffer, M. (2013) <em>AVAR: Stata module to perform asymptotic covariance estimation for iid and non-iid data robust to heteroskedasticity, autocorrelation, 1- and 2-way clustering, and common cross-panel autocorrelated disturbances</em>. Statistical Software Components, Boston College Department of Economics.</p>
<p dir="auto">Correia, S. (2014) <em>REGHDFE: Stata module to perform linear or instrumental-variable regression absorbing any number of high-dimensional fixed effects</em>. Statistical Software Components, Boston College Department of Economics.</p>
<p dir="auto">Fong, DC. and Saunders, M. (2011) <em>LSMR: An Iterative Algorithm for Sparse Least-Squares Problems</em>.  SIAM Journal on Scientific Computing</p>
<p dir="auto">Gaure, S. (2013) <em>OLS with Multiple High Dimensional Category Variables</em>. Computational Statistics and Data Analysis</p>
</article></div>