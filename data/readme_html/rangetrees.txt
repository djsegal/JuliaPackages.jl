<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rangetreesjl" class="anchor" aria-hidden="true" href="#rangetreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RangeTrees.jl</h1>
<p dir="auto"><a href="https://dmbates.github.io/RangeTrees.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://dmbates.github.io/RangeTrees.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/dmbates/RangeTrees.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/dmbates/RangeTrees.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/dmbates/RangeTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/369f88cb8541be82c920052aa5bce6bf411ef260d1ebb86bfe71b784eb7b37ab/68747470733a2f2f636f6465636f762e696f2f67682f646d62617465732f52616e676554726565732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/dmbates/RangeTrees.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d06568363f463a23594ec5aeba441ebd5f39cdaafd32a6f4a28a1ba0fd9ab036/68747470733a2f2f4a756c696143492e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f522f52616e676554726565732e737667" alt="PkgEval" data-canonical-src="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/R/RangeTrees.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This <a href="https://julialang.org" rel="nofollow">Julia</a> package defines the <code>RangeNode</code> type to represent an <a href="https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree" rel="nofollow">augmented interval tree</a> created from a <code>Vector{UnitRange{T}} where {T&lt;:Integer}</code>.
(The tree is represented by its root node.)</p>
<p dir="auto">A fast <code>intersect</code> method for a target range and a <code>RangeNode</code> can be used to evaluate coverage by the ranges in the tree routed at the node, as in the <a href="https://bedtools.readthedocs.io/en/latest/content/tools/coverage.html" rel="nofollow">coverage</a> program from
<a href="https://bedtools.readthedocs.io/en/latest/index.html" rel="nofollow">bedtools</a>.</p>
<p dir="auto">Tree traversal, printing, etc. use the <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees.jl</a> framework.</p>
<p dir="auto">The facilities of this package are a subset of those offered by <a href="http://github.com/BioJulia/IntervalTrees.jl">IntervalTrees.jl</a> but tuned to the particular task of intersecting a <code>UnitRange</code> target with the intervals (also represented as <code>UnitRange</code>) in the tree.</p>
<p dir="auto">The example in the figure on the <a href="https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree" rel="nofollow">Wikipedia page</a> can be reproduced as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RangeTrees

julia&gt; rr = RangeNode([0:0, 3:40, 10:14, 20:35, 29:98]);

julia&gt; print_tree(rn)
(10:14, 98)
├─ (3:40, 40)
│  └─ (0:0, 0)
└─ (29:98, 98)
   └─ (20:35, 35)

julia&gt; results = intersect(40:59, rn)
2-element Vector{UnitRange{Int64}}:
 40:40
 40:59

julia&gt; intersect!(empty!(results), 40:59, rn)
2-element Vector{UnitRange{Int64}}:
 40:40
 40:59

julia&gt; intersect!(empty!(results), 40:59, rn)
2-element Vector{UnitRange{Int64}}:
 40:40
 40:59"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RangeTrees

julia<span class="pl-k">&gt;</span> rr <span class="pl-k">=</span> <span class="pl-c1">RangeNode</span>([<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">40</span>, <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">14</span>, <span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">35</span>, <span class="pl-c1">29</span><span class="pl-k">:</span><span class="pl-c1">98</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(rn)
(<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">14</span>, <span class="pl-c1">98</span>)
├─ (<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">40</span>, <span class="pl-c1">40</span>)
│  └─ (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
└─ (<span class="pl-c1">29</span><span class="pl-k">:</span><span class="pl-c1">98</span>, <span class="pl-c1">98</span>)
   └─ (<span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">35</span>, <span class="pl-c1">35</span>)

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">intersect</span>(<span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span>, rn)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{UnitRange{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">40</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intersect!</span>(<span class="pl-c1">empty!</span>(results), <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span>, rn)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{UnitRange{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">40</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intersect!</span>(<span class="pl-c1">empty!</span>(results), <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span>, rn)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{UnitRange{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">40</span>
 <span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">59</span></pre></div>
<p dir="auto">Each node in the <code>print_tree</code> output is shown as the range at that node and the maximum value of <code>last(range)</code> in the subtree rooted at that node.  This is the augmentation in the tree that allows for fast intersection of the nodes in the tree with a target tree.</p>
<p dir="auto">The tree <code>rt</code> is not the same as the one shown in the figure because a <code>RangeNode</code> is constructed to be balanced and the one in the figure is not balanced.
Note that in the figure the intervals exclude the right hand endpoint whereas Julia's <code>UnitRange{&lt;:Integer}</code> is inclusive of both end points.
Thus <code>[20, 36)</code> in the figure corresponds to the range <code>20:35</code>.</p>
<p dir="auto">The <code>intersect!</code> method allows for passing the vector that will be the result, reducing the memory allocations.  Note that the first argument to <code>intersect!</code> should be wrapped in <code>empty!</code> because <code>intersect!</code> is recursive and <code>push!</code>s each intersection onto the end of <code>result</code>.</p>
</article></div>