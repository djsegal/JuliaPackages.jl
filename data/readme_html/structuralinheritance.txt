<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structuralinheritancejl" class="anchor" aria-hidden="true" href="#structuralinheritancejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructuralInheritance.jl</h1>
<p dir="auto">pseudo structural inheritance for the Julia language</p>
<p dir="auto"><a href="https://travis-ci.org/WschW/StructuralInheritance.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47c9962a50a7e5845589a12ea58adbb5e7dc45fc2a4370d7ed1ed339f81b61f6/68747470733a2f2f7472617669732d63692e6f72672f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WschW/StructuralInheritance.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/WschW/StructuralInheritance.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/326afb7b295a948afd835e2454baa095414e5861cdb6ee436de52e73493fd7aa/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/WschW/StructuralInheritance.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/WschW/StructuralInheritance.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8fbefe9e3fad5d992a70237b385c6d9d0e4e5be54fc7e47ddca7f74906502daa/687474703a2f2f636f6465636f762e696f2f6769746875622f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/WschW/StructuralInheritance.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StructuralInheritance

julia&gt; @protostruct struct A{T}
           fieldFromA::T
       end
ProtoA

julia&gt; @protostruct struct B{D} &lt;: A{Complex{D}}
          fieldFromB::D
       end &quot;SomeOtherPrefix&quot;
SomeOtherPrefixB

julia&gt; @protostruct struct C &lt;: B{Int}
         fieldFromC
       end
ProtoC"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructuralInheritance

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> A{T}
           fieldFromA<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-k">end</span>
ProtoA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> B{D} <span class="pl-k">&lt;:</span> <span class="pl-c1">A{Complex{D}}</span>
          fieldFromB<span class="pl-k">::</span><span class="pl-c1">D</span>
       <span class="pl-k">end</span> <span class="pl-s"><span class="pl-pds">"</span>SomeOtherPrefix<span class="pl-pds">"</span></span>
SomeOtherPrefixB

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> C <span class="pl-k">&lt;:</span> <span class="pl-c1">B{Int}</span>
         fieldFromC
       <span class="pl-k">end</span>
ProtoC</pre></div>
<p dir="auto">If we take a look at C we can see it inherits structure.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @doc C
  No documentation found.

  Summary
  ≡≡≡≡≡≡≡≡≡

  struct C &lt;: ProtoC

  Fields
  ≡≡≡≡≡≡≡≡

  fieldFromA :: Complex{Int64}
  fieldFromB :: Int64
  fieldFromC :: Any

  Supertype Hierarchy
  ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡

  C &lt;: ProtoC &lt;: SomeOtherPrefixB{Int64} &lt;: ProtoA{Complex{Int64}} &lt;: Any"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@doc</span> C
  No documentation found.

  Summary
  <span class="pl-k">≡≡≡≡≡≡≡≡≡</span>

  <span class="pl-k">struct</span> C <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoC</span>

  Fields
  <span class="pl-k">≡≡≡≡≡≡≡≡</span>

  fieldFromA <span class="pl-k">::</span> <span class="pl-c1">Complex{Int64}</span>
  fieldFromB <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
  fieldFromC <span class="pl-k">::</span> <span class="pl-c1">Any</span>

  Supertype Hierarchy
  <span class="pl-k">≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡</span>

  C <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoC</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">SomeOtherPrefixB{Int64}</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoA{Complex{Int64}}</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">Any</span></pre></div>
<p dir="auto">functions can be written to take advantage of the inherited structure</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; getFieldA(x::ProtoA) = x.fieldFromA
getFieldA (generic function with 1 method)

julia&gt; getFieldA(C(3 + im,2,&quot;c's new field&quot;))
3 + 1im"><pre class="notranslate"><code>julia&gt; getFieldA(x::ProtoA) = x.fieldFromA
getFieldA (generic function with 1 method)

julia&gt; getFieldA(C(3 + im,2,"c's new field"))
3 + 1im
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="InheritanceExampleDiagram.png"><img src="InheritanceExampleDiagram.png" alt="Example structural inheritance diagram" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-note-on-emulating-super-constructors" class="anchor" aria-hidden="true" href="#note-on-emulating-super-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note: on emulating super constructors</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StructuralInheritance

julia&gt; @protostruct struct R
           ff::Int
           sf
           R(x) = new(x,x^2)
           R(x,y) = new(x,y)
       end
ProtoR

julia&gt; @protostruct struct S &lt;: R
           tf::Int
       end
ProtoS"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructuralInheritance

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> R
           ff<span class="pl-k">::</span><span class="pl-c1">Int</span>
           sf
           <span class="pl-en">R</span>(x) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x,x<span class="pl-k">^</span><span class="pl-c1">2</span>)
           <span class="pl-en">R</span>(x,y) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x,y)
       <span class="pl-k">end</span>
ProtoR

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> S <span class="pl-k">&lt;:</span> <span class="pl-c1">R</span>
           tf<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>
ProtoS</pre></div>
<p dir="auto">We can call the constructor in R and use its values to fill fields in S.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; S(x) = S(StructuralInheritance.totuple(R(x))...,x^3)
S

julia&gt; S(2)
S(2, 4, 8)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">S</span>(x) <span class="pl-k">=</span> <span class="pl-c1">S</span>(StructuralInheritance<span class="pl-k">.</span><span class="pl-c1">totuple</span>(<span class="pl-c1">R</span>(x))<span class="pl-k">...</span>,x<span class="pl-k">^</span><span class="pl-c1">3</span>)
S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">S</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">S</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">8</span>)</pre></div>
<p dir="auto">It is worth noting that this cannot be used with new() as new does not permit
splatting.</p>
</article></div>