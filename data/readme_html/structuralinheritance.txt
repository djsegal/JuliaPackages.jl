<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-structuralinheritancejl" class="anchor" aria-hidden="true" href="#structuralinheritancejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StructuralInheritance.jl</h1>
<p>pseudo structural inheritance for the Julia language</p>
<p><a href="https://travis-ci.org/WschW/StructuralInheritance.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1d93e59a680c655214fa73266882c3412c676587/68747470733a2f2f7472617669732d63692e6f72672f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WschW/StructuralInheritance.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/WschW/StructuralInheritance.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9d35f1fd3bb44bcb96c2ec905c9f4196a04e243e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/WschW/StructuralInheritance.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/WschW/StructuralInheritance.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9f51ac71a70ae8aefa5ed91a5c3101d29209d064/687474703a2f2f636f6465636f762e696f2f6769746875622f57736368572f5374727563747572616c496e6865726974616e63652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/WschW/StructuralInheritance.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructuralInheritance

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> A{T}
           fieldFromA<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-k">end</span>
ProtoA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> B{D} <span class="pl-k">&lt;:</span> <span class="pl-c1">A{Complex{D}}</span>
          fieldFromB<span class="pl-k">::</span><span class="pl-c1">D</span>
       <span class="pl-k">end</span> <span class="pl-s"><span class="pl-pds">"</span>SomeOtherPrefix<span class="pl-pds">"</span></span>
SomeOtherPrefixB

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> C <span class="pl-k">&lt;:</span> <span class="pl-c1">B{Int}</span>
         fieldFromC
       <span class="pl-k">end</span>
ProtoC</pre></div>
<p>If we take a look at C we can see it inherits structure.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@doc</span> C
  No documentation found.

  Summary
  <span class="pl-k">≡≡≡≡≡≡≡≡≡</span>

  <span class="pl-k">struct</span> C <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoC</span>

  Fields
  <span class="pl-k">≡≡≡≡≡≡≡≡</span>

  fieldFromA <span class="pl-k">::</span> <span class="pl-c1">Complex{Int64}</span>
  fieldFromB <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
  fieldFromC <span class="pl-k">::</span> <span class="pl-c1">Any</span>

  Supertype Hierarchy
  <span class="pl-k">≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡</span>

  C <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoC</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">SomeOtherPrefixB{Int64}</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">ProtoA{Complex{Int64}}</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">Any</span></pre></div>
<p>functions can be written to take advantage of the inherited structure</p>
<pre><code>julia&gt; getFieldA(x::ProtoA) = x.fieldFromA
getFieldA (generic function with 1 method)

julia&gt; getFieldA(C(3 + im,2,"c's new field"))
3 + 1im
</code></pre>
<p><a target="_blank" rel="noopener noreferrer" href="InheritanceExampleDiagram.png"><img src="InheritanceExampleDiagram.png" alt="Example structural inheritance diagram" style="max-width:100%;"></a></p>
<h2><a id="user-content-note-on-emulating-super-constructors" class="anchor" aria-hidden="true" href="#note-on-emulating-super-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Note: on emulating super constructors</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructuralInheritance

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> R
           ff<span class="pl-k">::</span><span class="pl-c1">Int</span>
           sf
           <span class="pl-en">R</span>(x) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x,x<span class="pl-k">^</span><span class="pl-c1">2</span>)
           <span class="pl-en">R</span>(x,y) <span class="pl-k">=</span> <span class="pl-c1">new</span>(x,y)
       <span class="pl-k">end</span>
ProtoR

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@protostruct</span> <span class="pl-k">struct</span> S <span class="pl-k">&lt;:</span> <span class="pl-c1">R</span>
           tf<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>
ProtoS</pre></div>
<p>We can call the constructor in R and use its values to fill fields in S.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">S</span>(x) <span class="pl-k">=</span> <span class="pl-c1">S</span>(StructuralInheritance<span class="pl-k">.</span><span class="pl-c1">totuple</span>(<span class="pl-c1">R</span>(x))<span class="pl-k">...</span>,x<span class="pl-k">^</span><span class="pl-c1">3</span>)
S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">S</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">S</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">8</span>)</pre></div>
<p>It is worth noting that this cannot be used with new() as new does not permit
splatting.</p>
</article></div>