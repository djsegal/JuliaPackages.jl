<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-freqtables" class="anchor" aria-hidden="true" href="#freqtables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FreqTables</h1>
<p><a href="https://github.com/nalimilan/FreqTables.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/nalimilan/FreqTables.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/nalimilan/FreqTables.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a7123953b785d67613be476a7711da4a1026483b5c4689d6585bd22b39bbb333/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6e616c696d696c616e2f467265715461626c65732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/nalimilan/FreqTables.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>This package allows computing one- or multi-way frequency tables (a.k.a. contingency or pivot tables) from
any type of vector or array. It includes support for <a href="https://github.com/JuliaData/CategoricalArrays.jl"><code>CategoricalArray</code></a>
and <a href="https://github.com/JuliaData/Tables.jl"><code>Tables.jl</code></a> compliant objects, as well as for weighted counts.</p>
<p>Tables are represented as <a href="https://github.com/davidavdav/NamedArrays.jl/"><code>NamedArray</code></a> objects.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FreqTables

julia&gt; x = repeat([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], outer=[100]);

julia&gt; y = repeat([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;], inner=[10], outer=[10]);

julia&gt; tbl = freqtable(x)
4-element Named Array{Int64,1}
Dim1  │
──────┼────
a     │ 100
b     │ 100
c     │ 100
d     │ 100

julia&gt; prop(tbl)
4-element Named Array{Float64,1}
Dim1  │
──────┼─────
a     │ 0.25
b     │ 0.25
c     │ 0.25
d     │ 0.25

julia&gt; freqtable(x, y)
4×4 Named Array{Int64,2}
Dim1 ╲ Dim2 │  A   B   C   D
────────────┼───────────────
a           │ 30  20  30  20
b           │ 30  20  30  20
c           │ 20  30  20  30
d           │ 20  30  20  30

julia&gt; tbl2 = freqtable(x, y, subset=1:20)
4×2 Named Array{Int64,2}
Dim1 ╲ Dim2 │ A  B
────────────┼─────
a           │ 3  2
b           │ 3  2
c           │ 2  3
d           │ 2  3

julia&gt; prop(tbl2, margins=2)
4×2 Named Array{Float64,2}
Dim1 ╲ Dim2 │   A    B
────────────┼─────────
a           │ 0.3  0.2
b           │ 0.3  0.2
c           │ 0.2  0.3
d           │ 0.2  0.3

julia&gt; freqtable(x, y, subset=1:20, weights=repeat([1, .5], outer=[10]))
4×2 Named Array{Float64,2}
Dim1 ╲ Dim2 │   A    B
────────────┼─────────
a           │ 3.0  2.0
b           │ 1.5  1.0
c           │ 2.0  3.0
d           │ 1.0  1.5
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FreqTables

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>], outer<span class="pl-k">=</span>[<span class="pl-c1">100</span>]);

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>], inner<span class="pl-k">=</span>[<span class="pl-c1">10</span>], outer<span class="pl-k">=</span>[<span class="pl-c1">10</span>]);

julia<span class="pl-k">&gt;</span> tbl <span class="pl-k">=</span> <span class="pl-c1">freqtable</span>(x)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Named Array{Int64,<span class="pl-c1">1</span>}
Dim1  │
──────┼────
a     │ <span class="pl-c1">100</span>
b     │ <span class="pl-c1">100</span>
c     │ <span class="pl-c1">100</span>
d     │ <span class="pl-c1">100</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prop</span>(tbl)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Named Array{Float64,<span class="pl-c1">1</span>}
Dim1  │
──────┼─────
a     │ <span class="pl-c1">0.25</span>
b     │ <span class="pl-c1">0.25</span>
c     │ <span class="pl-c1">0.25</span>
d     │ <span class="pl-c1">0.25</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freqtable</span>(x, y)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Named Array{Int64,<span class="pl-c1">2</span>}
Dim1 ╲ Dim2 │  A   B   C   D
────────────┼───────────────
a           │ <span class="pl-c1">30</span>  <span class="pl-c1">20</span>  <span class="pl-c1">30</span>  <span class="pl-c1">20</span>
b           │ <span class="pl-c1">30</span>  <span class="pl-c1">20</span>  <span class="pl-c1">30</span>  <span class="pl-c1">20</span>
c           │ <span class="pl-c1">20</span>  <span class="pl-c1">30</span>  <span class="pl-c1">20</span>  <span class="pl-c1">30</span>
d           │ <span class="pl-c1">20</span>  <span class="pl-c1">30</span>  <span class="pl-c1">20</span>  <span class="pl-c1">30</span>

julia<span class="pl-k">&gt;</span> tbl2 <span class="pl-k">=</span> <span class="pl-c1">freqtable</span>(x, y, subset<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Int64,<span class="pl-c1">2</span>}
Dim1 ╲ Dim2 │ A  B
────────────┼─────
a           │ <span class="pl-c1">3</span>  <span class="pl-c1">2</span>
b           │ <span class="pl-c1">3</span>  <span class="pl-c1">2</span>
c           │ <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
d           │ <span class="pl-c1">2</span>  <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prop</span>(tbl2, margins<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Float64,<span class="pl-c1">2</span>}
Dim1 ╲ Dim2 │   A    B
────────────┼─────────
a           │ <span class="pl-c1">0.3</span>  <span class="pl-c1">0.2</span>
b           │ <span class="pl-c1">0.3</span>  <span class="pl-c1">0.2</span>
c           │ <span class="pl-c1">0.2</span>  <span class="pl-c1">0.3</span>
d           │ <span class="pl-c1">0.2</span>  <span class="pl-c1">0.3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freqtable</span>(x, y, subset<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, weights<span class="pl-k">=</span><span class="pl-c1">repeat</span>([<span class="pl-c1">1</span>, <span class="pl-c1">.5</span>], outer<span class="pl-k">=</span>[<span class="pl-c1">10</span>]))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Float64,<span class="pl-c1">2</span>}
Dim1 ╲ Dim2 │   A    B
────────────┼─────────
a           │ <span class="pl-c1">3.0</span>  <span class="pl-c1">2.0</span>
b           │ <span class="pl-c1">1.5</span>  <span class="pl-c1">1.0</span>
c           │ <span class="pl-c1">2.0</span>  <span class="pl-c1">3.0</span>
d           │ <span class="pl-c1">1.0</span>  <span class="pl-c1">1.5</span></pre></div>
<p>For convenience, when working with tables (like e.g. a <code>DataFrame</code>) one can pass a table object and columns as symbols:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DataFrames, CSV

julia&gt; iris = DataFrame(CSV.File(joinpath(dirname(pathof(DataFrames)), &quot;../docs/src/assets/iris.csv&quot;)));

julia&gt; iris.LongSepal = iris.SepalLength .&gt; 5.0;

julia&gt; freqtable(iris, :Species, :LongSepal)
3×2 Named Array{Int64,2}
Species ╲ LongSepal │ false   true
────────────────────┼─────────────
setosa              │    28     22
versicolor          │     3     47
virginica           │     1     49

julia&gt; freqtable(iris, :Species, :LongSepal, subset=iris.PetalLength .&lt; 4.0)
2×2 Named Array{Int64,2}
Species ╲ LongSepal │ false   true
────────────────────┼─────────────
setosa              │    28     22
versicolor          │     3      8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames, CSV

julia<span class="pl-k">&gt;</span> iris <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(DataFrames)), <span class="pl-s"><span class="pl-pds">"</span>../docs/src/assets/iris.csv<span class="pl-pds">"</span></span>)));

julia<span class="pl-k">&gt;</span> iris<span class="pl-k">.</span>LongSepal <span class="pl-k">=</span> iris<span class="pl-k">.</span>SepalLength <span class="pl-k">.&gt;</span> <span class="pl-c1">5.0</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freqtable</span>(iris, <span class="pl-c1">:Species</span>, <span class="pl-c1">:LongSepal</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Int64,<span class="pl-c1">2</span>}
Species ╲ LongSepal │ <span class="pl-c1">false</span>   <span class="pl-c1">true</span>
────────────────────┼─────────────
setosa              │    <span class="pl-c1">28</span>     <span class="pl-c1">22</span>
versicolor          │     <span class="pl-c1">3</span>     <span class="pl-c1">47</span>
virginica           │     <span class="pl-c1">1</span>     <span class="pl-c1">49</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freqtable</span>(iris, <span class="pl-c1">:Species</span>, <span class="pl-c1">:LongSepal</span>, subset<span class="pl-k">=</span>iris<span class="pl-k">.</span>PetalLength <span class="pl-k">.&lt;</span> <span class="pl-c1">4.0</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Int64,<span class="pl-c1">2</span>}
Species ╲ LongSepal │ <span class="pl-c1">false</span>   <span class="pl-c1">true</span>
────────────────────┼─────────────
setosa              │    <span class="pl-c1">28</span>     <span class="pl-c1">22</span>
versicolor          │     <span class="pl-c1">3</span>      <span class="pl-c1">8</span></pre></div>
<p>Note that when one of the input variables contains integers, <code>Name(i)</code> has to be used
when indexing into the table to prevent <code>i</code> to be interpreted as a numeric index:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; df = DataFrame(A = 101:103, B = [&quot;x&quot;,&quot;y&quot;,&quot;y&quot;]);

julia&gt; ft = freqtable(df, :A, :B)
3×2 Named Array{Int64,2}
Dim1 ╲ Dim2 │ x  y
────────────┼─────
101         │ 1  0
102         │ 0  1
103         │ 0  1

julia&gt; ft[Name(101), &quot;x&quot;]
1

julia&gt; ft[101,&quot;x&quot;]
ERROR: BoundsError: attempt to access 10×2 Array{Int64,2} at index [101, 1]
"><pre>julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(A <span class="pl-k">=</span> <span class="pl-c1">101</span><span class="pl-k">:</span><span class="pl-c1">103</span>, B <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]);

julia<span class="pl-k">&gt;</span> ft <span class="pl-k">=</span> <span class="pl-c1">freqtable</span>(df, <span class="pl-c1">:A</span>, <span class="pl-c1">:B</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Array{Int64,<span class="pl-c1">2</span>}
Dim1 ╲ Dim2 │ x  y
────────────┼─────
<span class="pl-c1">101</span>         │ <span class="pl-c1">1</span>  <span class="pl-c1">0</span>
<span class="pl-c1">102</span>         │ <span class="pl-c1">0</span>  <span class="pl-c1">1</span>
<span class="pl-c1">103</span>         │ <span class="pl-c1">0</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> ft[<span class="pl-c1">Name</span>(<span class="pl-c1">101</span>), <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> ft[<span class="pl-c1">101</span>,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64,<span class="pl-c1">2</span>} at index [<span class="pl-c1">101</span>, <span class="pl-c1">1</span>]</pre></div>
</article></div>