<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unitfulchainrulesjl" class="anchor" aria-hidden="true" href="#unitfulchainrulesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnitfulChainRules.jl</h1>
<p dir="auto"><code>UnitfulChainRules.jl</code> adds support for differentiating through scalar <code>Unitful.Quantity</code> construction and arithmetic. The arithmetic rules are drawn from the existing <code>ChainRules.jl</code> scalar rules, so this package provides the <code>Quantity</code> autodiff rules and utilities.</p>
<p dir="auto">Right now, this includes <code>rrule, frule</code> implementations for the <code>Quantity</code> construction and the <code>ProjectTo</code> utility. We implement projection onto <code>Quantity</code>s and projection of <code>Quantity</code>s onto <code>Real, Complex</code> numbers.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To import the rules, all that is required is importing <code>UnitfulChainRules.jl</code> in addition to <code>Unitful.jl</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Unitful: W, μm, ms
using UnitfulChainRules
using Zygote

Zygote.gradient((x,y) -&gt; (x*W)/(y*μm)/ms, 3.0*W, 2.0*μm)
# (0.5 W μm^-2 ms^-1, -0.75 W^2 μm^-3 ms^-1)

Zygote.gradient((x,y) -&gt; (x*ms + 9*y*ms)/μm, 2.0*W, 3.0*W)
# (1.0 ms μm^-1, 9.0 ms μm^-1)"><pre><span class="pl-k">using</span> Unitful<span class="pl-k">:</span> W, μm, ms
<span class="pl-k">using</span> UnitfulChainRules
<span class="pl-k">using</span> Zygote

Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>((x,y) <span class="pl-k">-&gt;</span> (x<span class="pl-k">*</span>W)<span class="pl-k">/</span>(y<span class="pl-k">*</span>μm)<span class="pl-k">/</span>ms, <span class="pl-c1">3.0</span><span class="pl-k">*</span>W, <span class="pl-c1">2.0</span><span class="pl-k">*</span>μm)
<span class="pl-c"><span class="pl-c">#</span> (0.5 W μm^-2 ms^-1, -0.75 W^2 μm^-3 ms^-1)</span>

Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>((x,y) <span class="pl-k">-&gt;</span> (x<span class="pl-k">*</span>ms <span class="pl-k">+</span> <span class="pl-c1">9</span><span class="pl-k">*</span>y<span class="pl-k">*</span>ms)<span class="pl-k">/</span>μm, <span class="pl-c1">2.0</span><span class="pl-k">*</span>W, <span class="pl-c1">3.0</span><span class="pl-k">*</span>W)
<span class="pl-c"><span class="pl-c">#</span> (1.0 ms μm^-1, 9.0 ms μm^-1)</span></pre></div>
<h2 dir="auto"><a id="user-content-array-rules" class="anchor" aria-hidden="true" href="#array-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Array Rules</h2>
<p dir="auto">This package does not yet include compatibility for operations between arrays of <code>Unitful.Quantity</code>s, like most <code>LinearAlgebra</code> ops. <a href="https://github.com/SBuercklin/UnitfulChainRules.jl/issues/5" data-hovercard-type="issue" data-hovercard-url="/SBuercklin/UnitfulChainRules.jl/issues/5/hovercard">An issue</a> is open for discussing how to best add array rules.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<ul dir="auto">
<li><a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a> - Implements dimensional numerical quantities for Julia</li>
<li><a href="https://github.com/JuliaDiff/ChainRules.jl">ChainRules.jl</a> - Provides a standard set of rules for interfacing with various autodiff backends in Julia</li>
</ul>
</article></div>