<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/sadit/SimilaritySearch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/782ec7bdcbfae070d2f06fcda76e4ddf909b5641/68747470733a2f2f7472617669732d63692e6f72672f73616469742f53696d696c61726974795365617263682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sadit/SimilaritySearch.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/sadit/SimilaritySearch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/39fdb6d0f7bf527b307f03c3a32008f9796d9d07/68747470733a2f2f636f6465636f762e696f2f67682f73616469742f53696d696c61726974795365617263682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sadit/SimilaritySearch.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/sadit/SimilaritySearch.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/585f845bb4c7cbdf62f74124cb2438de8ce55924/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73616469742f53696d696c61726974795365617263682e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sadit/SimilaritySearch.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-similaritysearchjl" class="anchor" aria-hidden="true" href="#similaritysearchjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimilaritySearch.jl</h1>
<p>SimilaritySearch.jl is a library for approximate nearest neighbors.</p>
<h1><a id="user-content-installing-similaritysearch" class="anchor" aria-hidden="true" href="#installing-similaritysearch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing SimilaritySearch</h1>
<p>You may install the package as follows</p>
<div class="highlight highlight-source-shell"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; pkg"add https://github.com/sadit/SimilaritySearch.jl"<span class="pl-pds">'</span></span></pre></div>
<p>also, you can run the set of tests as fol</p>
<div class="highlight highlight-source-shell"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; pkg"test SimilaritySearch"<span class="pl-pds">'</span></span></pre></div>
<h1><a id="user-content-indexing-and-searching" class="anchor" aria-hidden="true" href="#indexing-and-searching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Indexing and searching</h1>
<p>A simple exhaustive search can be implemented as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimilaritySearch
julia<span class="pl-k">&gt;</span> db <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">8</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100_000</span>]
julia<span class="pl-k">&gt;</span> seqindex <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Sequential, db)  <span class="pl-c"><span class="pl-c">#</span> construction</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">search</span>(seqindex, l2_distance, <span class="pl-c1">rand</span>(<span class="pl-c1">8</span>), <span class="pl-c1">KnnResult</span>(<span class="pl-c1">3</span>))  <span class="pl-c"><span class="pl-c">#</span> searching 3-nn for the random vector rand(8)</span>
<span class="pl-c1">KnnResult</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">3</span>, Item{Int64}[<span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">83265</span>, <span class="pl-c1">0.198482</span>), <span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">44113</span>, <span class="pl-c1">0.219748</span>), <span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">38506</span>, <span class="pl-c1">0.254233</span>)])</pre></div>
<p><code>SimilarySearch.jl</code> supports different kinds of indexes and distance functions. For example, you can create a different index with Manhattan distance as follows</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimilaritySearch<span class="pl-k">.</span>Graph
julia<span class="pl-k">&gt;</span> graph <span class="pl-k">=</span> <span class="pl-c1">fit</span>(SearchGraph, l1_distance, db)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">search</span>(seqindex, l2_distance, <span class="pl-c1">rand</span>(<span class="pl-c1">8</span>), <span class="pl-c1">KnnResult</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">KnnResult</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">3</span>, Item{Int64}[<span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">48881</span>, <span class="pl-c1">0.200722</span>), <span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">56933</span>, <span class="pl-c1">0.224531</span>), <span class="pl-c1">Item</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">21200</span>, <span class="pl-c1">0.234252</span>)])</pre></div>
<p>Please note that <code>fit</code>ing a <code>SearchGraph</code> may seems that it pauses for some moments, this is because this kind of methods are designed to compute the best parameters online. We aim that this strategy reduces the complexity of using a searching method, since it tries to achieve the better performance for the given initial configuration.</p>
<p>The package implements several distances, as the following ones:</p>
<ul>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/distances/vectors.jl">Minkowski family</a>
<ul>
<li><code>l1_distance</code> also known as Manhattan distance</li>
<li><code>l2_distance</code> a.k.a Euclidean distance</li>
<li>squared_l2_distance (not metric)</li>
<li><code>linf_distance</code> ($L_âˆž$) a.k.a. Chebyshev distance</li>
<li>and a factory for generic <code>p</code> values to define the Minkowski family of distances.</li>
</ul>
</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/distances/cos.jl">Angle distance</a>
<ul>
<li><code>angle_distance</code></li>
<li><code>cosine_distance</code> (not metric, but faster than angle's distance)</li>
<li>please not that these functions suppose that your vectors are normalized</li>
</ul>
</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/distances/bits.jl">Binary hamming distance</a></li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/distances/strings.jl">String distances</a>
<ul>
<li><code>common_prefix_distance</code> (not metric)</li>
<li><code>generic_levenshtein</code> (with variable costs)</li>
<li><code>hamming_distance</code></li>
<li><code>levenshtein_distance</code></li>
<li><code>lcs_distance</code></li>
</ul>
</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/distances/sets.jl">Set distances</a>; here sets are represented as ordered lists (arrays) of integers (in fact, ordered items)
<ul>
<li><code>jaccard_distance</code></li>
<li><code>dice_distance</code> (not metric)</li>
<li><code>intersection_distance</code> (not metric)</li>
</ul>
</li>
</ul>
<p>Please note that you can implement your own distance function and pass to any method, so you can support for any kind of object.</p>
<p>The package is designed to work with approximate indexes, that is, those search methods that are allowed to have false positives and false negatives. However, it supports the following exact methods:</p>
<ul>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/indexes/seq.jl">Sequential</a> or exhaustive search</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/indexes/laesa.jl">LAESA</a> or pivot table; it supports different <a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/indexes/pivotselectiontables.jl">pivot selection strategies</a></li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/knr/kvp.jl">Kvp</a> or K vantage points</li>
</ul>
<p><code>SimilaritySearch.jl</code> implements tghe following approximate methods:</p>
<ul>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/knr/knr.jl">Knr</a> K nearest references implemented over an uncompressed inverted index.</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/graph/graph.jl">SearchGraph</a>. This is the main method supporting multiple search algorithms for searching and for neighborhood computation (critical for the construction procedure).
<ul>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/graph/ihc.jl">IHC</a>. search method inspired in <em>iterated hill climbing</em>.</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/graph/tihc.jl">TIHC</a>. search method inspired in a mix of <em>random search</em> and <em>iterated hill climbing</em>.</li>
<li><a href="https://github.com/sadit/SimilaritySearch.jl/blob/master/src/graph/beamsearch.jl">BeamSearch</a>. search method inspired in beam search with initial random search.</li>
</ul>
</li>
</ul>
<p>A number of neighborhood computations are also <a href="https://github.com/sadit/SimilaritySearch.jl/tree/master/src/graph/neighborhood">available</a>.</p>
<p><strong>TODO: cite related papers</strong></p>
<h1><a id="user-content-benchmarking" class="anchor" aria-hidden="true" href="#benchmarking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmarking</h1>
<p>The package has a benchmarking procedure that can be used to compare different searching methods; this is the same procedure used by internal optimizers</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimilaritySearch, SimilaritySearch<span class="pl-k">.</span>Graph, SimilaritySearch<span class="pl-k">.</span>SimilarReferences
julia<span class="pl-k">&gt;</span> db <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">8</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100_000</span>]
julia<span class="pl-k">&gt;</span> queries <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">8</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1_000</span>]
julia<span class="pl-k">&gt;</span> perf <span class="pl-k">=</span> <span class="pl-c1">Performance</span>(l2_distance, db, queries, queries_from_db<span class="pl-k">=</span><span class="pl-c1">false</span>, expected_k<span class="pl-k">=</span><span class="pl-c1">10</span>)
julia<span class="pl-k">&gt;</span> seq <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Sequential, db)
julia<span class="pl-k">&gt;</span> knr <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Knr, l2_distance, db, numrefs<span class="pl-k">=</span><span class="pl-c1">1000</span>, k<span class="pl-k">=</span><span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span> graph <span class="pl-k">=</span> <span class="pl-c1">fit</span>(SearchGraph, l2_distance, db)
julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> (seq<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, seq, l2_distance), knr<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, knr, l2_distance), graph<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, graph, l2_distance))
julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>(undef, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
julia<span class="pl-k">&gt;</span> M[<span class="pl-c1">1</span>, :] <span class="pl-k">.=</span> [<span class="pl-s"><span class="pl-pds">"</span>index<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>distances_sum<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>evaluations_ratio<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>queries_by_second<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>recall<span class="pl-pds">"</span></span>]
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(
            [<span class="pl-s"><span class="pl-pds">"</span>seq<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>knr<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>graph<span class="pl-pds">"</span></span>],
            [p<span class="pl-k">.</span>distances_sum<span class="pl-k">/</span>P[<span class="pl-c1">1</span>]<span class="pl-k">.</span>distances_sum <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [p<span class="pl-k">.</span>evaluations<span class="pl-k">/</span>P[<span class="pl-c1">1</span>]<span class="pl-k">.</span>evaluations <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [<span class="pl-c1">1</span><span class="pl-k">/</span>p<span class="pl-k">.</span>seconds <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [p<span class="pl-k">.</span>recall <span class="pl-k">for</span> p <span class="pl-k">in</span> P]) <span class="pl-k">|&gt;</span> enumerate
       M[i<span class="pl-k">+</span><span class="pl-c1">1</span>, :] <span class="pl-k">.=</span> p
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> M
<span class="pl-c1">4</span><span class="pl-k">Ã—</span><span class="pl-c1">5</span> Array{Any,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>index<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>distances_sum<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>evaluations_ratio<span class="pl-pds">"</span></span>       <span class="pl-s"><span class="pl-pds">"</span>queries_by_second<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>recall<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>seq<span class="pl-pds">"</span></span>    <span class="pl-c1">1.0</span>               <span class="pl-c1">1.0</span>                     <span class="pl-c1">199.328</span>                 <span class="pl-c1">1.0</span>      
 <span class="pl-s"><span class="pl-pds">"</span>knr<span class="pl-pds">"</span></span>    <span class="pl-c1">1.01003</span>           <span class="pl-c1">0.0197858</span>              <span class="pl-c1">2438.6</span>                   <span class="pl-c1">0.9084</span>   
 <span class="pl-s"><span class="pl-pds">"</span>graph<span class="pl-pds">"</span></span>  <span class="pl-c1">1.01298</span>           <span class="pl-c1">0.00281581</span>            <span class="pl-c1">11273.1</span>                   <span class="pl-c1">0.87</span> </pre></div>
<p>You may achieve better performance using different parameters at construction time;
however, this is not always preferred. <a href="https://github.com/sadit/SimilaritySearch.jl">SimilaritySearch.jl</a> also optimizes already built indexes</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">optimize!</span>(knr, l2_distance, recall<span class="pl-k">=</span><span class="pl-c1">0.7</span>, k<span class="pl-k">=</span><span class="pl-c1">10</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">optimize!</span>(graph, l2_distance, recall<span class="pl-k">=</span><span class="pl-c1">0.7</span>, k<span class="pl-k">=</span><span class="pl-c1">10</span>)
julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> (seq<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, seq, l2_distance), knr<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, knr, l2_distance), graph<span class="pl-k">=</span><span class="pl-c1">probe</span>(perf, graph, l2_distance))
julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>(undef, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
julia<span class="pl-k">&gt;</span> M[<span class="pl-c1">1</span>, :] <span class="pl-k">.=</span> [<span class="pl-s"><span class="pl-pds">"</span>index<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>distances_sum<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>evaluations_ratio<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>queries_by_second<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>recall<span class="pl-pds">"</span></span>]
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(
            [<span class="pl-s"><span class="pl-pds">"</span>seq<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>knr<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>graph<span class="pl-pds">"</span></span>],
            [p<span class="pl-k">.</span>distances_sum<span class="pl-k">/</span>P[<span class="pl-c1">1</span>]<span class="pl-k">.</span>distances_sum <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [p<span class="pl-k">.</span>evaluations<span class="pl-k">/</span>P[<span class="pl-c1">1</span>]<span class="pl-k">.</span>evaluations <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [<span class="pl-c1">1</span><span class="pl-k">/</span>p<span class="pl-k">.</span>seconds <span class="pl-k">for</span> p <span class="pl-k">in</span> P],
            [p<span class="pl-k">.</span>recall <span class="pl-k">for</span> p <span class="pl-k">in</span> P]) <span class="pl-k">|&gt;</span> enumerate
       M[i<span class="pl-k">+</span><span class="pl-c1">1</span>, :] <span class="pl-k">.=</span> p
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> M
<span class="pl-c1">4</span><span class="pl-k">Ã—</span><span class="pl-c1">5</span> Array{Any,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>index<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>distances_sum<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>evaluations_ratio<span class="pl-pds">"</span></span>      <span class="pl-s"><span class="pl-pds">"</span>queries_by_second<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>recall<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>seq<span class="pl-pds">"</span></span>    <span class="pl-c1">1.0</span>               <span class="pl-c1">1.0</span>                    <span class="pl-c1">200.575</span>                 <span class="pl-c1">1.0</span>      
 <span class="pl-s"><span class="pl-pds">"</span>knr<span class="pl-pds">"</span></span>    <span class="pl-c1">1.00066</span>           <span class="pl-c1">0.0341043</span>             <span class="pl-c1">1582.46</span>                  <span class="pl-c1">0.9905</span>   
 <span class="pl-s"><span class="pl-pds">"</span>graph<span class="pl-pds">"</span></span>  <span class="pl-c1">1.0009</span>            <span class="pl-c1">0.00492749</span>            <span class="pl-c1">6261.43</span>                  <span class="pl-c1">0.9872</span>   
</pre></div>
</article></div>