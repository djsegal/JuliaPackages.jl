<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-liftedtrajectorygames" class="anchor" aria-hidden="true" href="#liftedtrajectorygames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LiftedTrajectoryGames</h1>
<p dir="auto"><a href="https://github.com/lassepe/LiftedTrajectoryGames.jl/actions/workflows/ci.yml"><img src="https://github.com/lassepe/LiftedTrajectoryGames.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lassepe/LiftedTrajectoryGames.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9eb4c5c638c754fe65c08859e4f79defb5c0beed938cce03af3d979b5b75907e/68747470733a2f2f636f6465636f762e696f2f67682f6c6173736570652f4c69667465645472616a6563746f727947616d65732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d49366a38684c36783232" alt="codecov" data-canonical-src="https://codecov.io/gh/lassepe/LiftedTrajectoryGames.jl/branch/main/graph/badge.svg?token=I6j8hL6x22" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2bb630e2707a04100cd270fd944d22816241c37b68a5a1629257920c65e17891/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c7565" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue" style="max-width: 100%;"></a></p>
<p dir="auto">A reference implementation of the lifted game solver presented in our RSS 2022 paper <a href="https://arxiv.org/pdf/2205.00291.pdf" rel="nofollow">"Learning Mixed Strategies in Trajectory Games"</a>.</p>
<p dir="auto">Please consult <a href="https://lasse-peters.net/pub/lifted-games" rel="nofollow">project website</a> for more information on this project.</p>
<p dir="auto"><a href="https://arxiv.org/pdf/2205.00291.pdf" rel="nofollow"><img src="https://camo.githubusercontent.com/43a27115fc6f84e6cbf45443adf3119ecb022f2b20a06121f433334c530f2d6d/68747470733a2f2f6c617373652d7065746572732e6e65742f7075622f6c69667465642d67616d65732f706574657273323032327273732d7465617365722e706e67" alt="" data-canonical-src="https://lasse-peters.net/pub/lifted-games/peters2022rss-teaser.png" style="max-width: 100%;"></a></p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inproceedings{peters2022rss,
    title     = {Learning Mixed Strategies in Trajectory Games},
    author    = {Peters, Lasse and Fridovich-Keil, David and Ferranti, Laura and Stachniss, Cyrill and Alonso-Mora, Javier and Laine, Forrest},
    booktitle = {Proc.~of Robotics: Science and Systems (RSS)},
    year      = {2022},
    url       = {https://arxiv.org/abs/2205.00291}
}"><pre><span class="pl-k">@inproceedings</span>{<span class="pl-en">peters2022rss</span>,
    <span class="pl-s">title</span>     = <span class="pl-s"><span class="pl-pds">{</span>Learning Mixed Strategies in Trajectory Games<span class="pl-pds">}</span></span>,
    <span class="pl-s">author</span>    = <span class="pl-s"><span class="pl-pds">{</span>Peters, Lasse and Fridovich-Keil, David and Ferranti, Laura and Stachniss, Cyrill and Alonso-Mora, Javier and Laine, Forrest<span class="pl-pds">}</span></span>,
    <span class="pl-s">booktitle</span> = <span class="pl-s"><span class="pl-pds">{</span>Proc.~of Robotics: Science and Systems (RSS)<span class="pl-pds">}</span></span>,
    <span class="pl-s">year</span>      = <span class="pl-s"><span class="pl-pds">{</span>2022<span class="pl-pds">}</span></span>,
    <span class="pl-s">url</span>       = <span class="pl-s"><span class="pl-pds">{</span>https://arxiv.org/abs/2205.00291<span class="pl-pds">}</span></span>
}</pre></div>
<h2 dir="auto"><a id="user-content-teaser-learning-to-solve-a-game-of-tag-from-scratch-in-receding-horizon-self-play" class="anchor" aria-hidden="true" href="#teaser-learning-to-solve-a-game-of-tag-from-scratch-in-receding-horizon-self-play"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Teaser: Learning to solve a game of tag from scratch in receding-horizon self-play.</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./media/sim_steps.gif"><img src="./media/sim_steps.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install LiftedTrajectoryGames, simply add it via Julia's package manager from the REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# hit `]` to enter &quot;pkg&quot;-mode of the REPL
pkg&gt; add LiftedTrajectoryGames"><pre><span class="pl-c"><span class="pl-c">#</span> hit `]` to enter "pkg"-mode of the REPL</span>
pkg<span class="pl-k">&gt;</span> add LiftedTrajectoryGames</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">LiftedTrajectoryGames uses <a href="https://github.com/lassepe/TrajectoryGamesBase.jl">TrajectoryGamesBase</a> as an abstraction of the problem and solver interface for trajectory games. Please to refer to that package for documentation on the problem setup. Note that the lifted game solver <strong>requires differentiability of the game's costs and dynamics</strong>.</p>
<h3 dir="auto"><a id="user-content-solver-setup" class="anchor" aria-hidden="true" href="#solver-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solver Setup</h3>
<p dir="auto">For a game that meets those assumptions, you can construct a <code>solver::LiftedTrajectoryGameSolver</code> using the helper constructor that recovers the relevant solver parameters (network input/output dimensions etc.) from a given <code>game::TrajectoryGame</code>. Note that the solver construction may take a while as it compiles all the relevant functions and derivatives for acceleration of downstream solver invocations.</p>
<blockquote>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> Please refer to the docstrings of each type and function for more information.
For example, type <code>?LiftedTrajectoryGameSolver</code> in the REPL for more information on solver options.</p>
</blockquote>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LiftedTrajectoryGames
using TrajectoryGamesBase
using TrajectoryGamesExamples

# place holder; replace with your actual game constructor
game = two_player_meta_tag()
planning_horizon = 20
# the number of &quot;pure&quot; trajectories to mix over for each player:
n_actions = [2 for _ in 1:num_players(game)]
solver = LiftedTrajectoryGameSolver(game, planning_horizon; n_actions)"><pre><span class="pl-k">using</span> LiftedTrajectoryGames
<span class="pl-k">using</span> TrajectoryGamesBase
<span class="pl-k">using</span> TrajectoryGamesExamples

<span class="pl-c"><span class="pl-c">#</span> place holder; replace with your actual game constructor</span>
game <span class="pl-k">=</span> <span class="pl-c1">two_player_meta_tag</span>()
planning_horizon <span class="pl-k">=</span> <span class="pl-c1">20</span>
<span class="pl-c"><span class="pl-c">#</span> the number of "pure" trajectories to mix over for each player:</span>
n_actions <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">num_players</span>(game)]
solver <span class="pl-k">=</span> <span class="pl-c1">LiftedTrajectoryGameSolver</span>(game, planning_horizon; n_actions)</pre></div>
<h3 dir="auto"><a id="user-content-solver-invocation" class="anchor" aria-hidden="true" href="#solver-invocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solver Invocation</h3>
<h4 dir="auto"><a id="user-content-open-loop-planning" class="anchor" aria-hidden="true" href="#open-loop-planning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Open-Loop Planning</h4>
<p dir="auto">Once you have set up the solver, you can invoke it for a given <code>initial_state</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BlockArrays: mortar
initial_state = (mortar([rand(4) for _ in 1:num_players(game)]) .- 0.5) * 4
# You will notice that the first invocation of this function is very slow because Julia has to compile a lot of code.
# After all the compilation is done, subsequent invocations of this method should be blazingly fast. (on the order of milliseconds).
strategy = solve_trajectory_game!(solver, game, initial_state)"><pre><span class="pl-k">using</span> BlockArrays<span class="pl-k">:</span> mortar
initial_state <span class="pl-k">=</span> (<span class="pl-c1">mortar</span>([<span class="pl-c1">rand</span>(<span class="pl-c1">4</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">num_players</span>(game)]) <span class="pl-k">.-</span> <span class="pl-c1">0.5</span>) <span class="pl-k">*</span> <span class="pl-c1">4</span>
<span class="pl-c"><span class="pl-c">#</span> You will notice that the first invocation of this function is very slow because Julia has to compile a lot of code.</span>
<span class="pl-c"><span class="pl-c">#</span> After all the compilation is done, subsequent invocations of this method should be blazingly fast. (on the order of milliseconds).</span>
strategy <span class="pl-k">=</span> <span class="pl-c1">solve_trajectory_game!</span>(solver, game, initial_state)</pre></div>
<p dir="auto">The resulting <em>mixed</em> joint <code>strategy</code> can then be invoked on the state to compute <code>controls</code> for all players.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A strategy may be time-varying. Therefore, we also have to hand in the time.
time = 1
controls = strategy(initial_state, time)"><pre><span class="pl-c"><span class="pl-c">#</span> A strategy may be time-varying. Therefore, we also have to hand in the time.</span>
time <span class="pl-k">=</span> <span class="pl-c1">1</span>
controls <span class="pl-k">=</span> <span class="pl-c1">strategy</span>(initial_state, time)</pre></div>
<h4 dir="auto"><a id="user-content-receding-horizon-planning" class="anchor" aria-hidden="true" href="#receding-horizon-planning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Receding-Horizon Planning</h4>
<p dir="auto">In practice, you may also wish to use the solver in the framework of model-predictive game play (MPGP), i.e., for receding-horizon invocations rather than the generation of open-loop plans.
To this end, you can wrap the solver in a <code>receding_horizon_strategy::TrajectoryGamesBase.RecedingHorizonStrategy</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="receding_horizon_strategy = RecedingHorizonStrategy(; solver, game, turn_length = 5)"><pre>receding_horizon_strategy <span class="pl-k">=</span> <span class="pl-c1">RecedingHorizonStrategy</span>(; solver, game, turn_length <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto">This strategy will invoke the solver on demand upon invocation for a given state and time, <code>receding_horizon_strategy(state, time)</code>.
Therefore, you can directly pass this <code>receding_horizon_strategy</code> to the <code>TrajectoryGamesBase.rollout</code> function for a receding-horizon online rollout:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="number_of_simulation_steps = 500
simulation_steps = rollout(
    game.dynamics,
    receding_horizon_strategy,
    initial_state,
    number_of_simulation_steps;
    # here, we also record the strategy at each time step for visualization below
    get_info = (strategy, x, t) -&gt; strategy.receding_horizon_strategy,
)"><pre>number_of_simulation_steps <span class="pl-k">=</span> <span class="pl-c1">500</span>
simulation_steps <span class="pl-k">=</span> <span class="pl-c1">rollout</span>(
    game<span class="pl-k">.</span>dynamics,
    receding_horizon_strategy,
    initial_state,
    number_of_simulation_steps;
    <span class="pl-c"><span class="pl-c">#</span> here, we also record the strategy at each time step for visualization below</span>
    get_info <span class="pl-k">=</span> (strategy, x, t) <span class="pl-k">-&gt;</span> strategy<span class="pl-k">.</span>receding_horizon_strategy,
)</pre></div>
<h3 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h3>
<p dir="auto">TrajectoryGamesExamples additionally provides the function <code>animate_sim_steps</code> to visualize the resulting <code>simulation_steps</code> sequence using Makie.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# activate the GLMakie backend to render on a GPU-accelerated canvas.
# Loading this package may take a while.
using GLMakie
animate_sim_steps(
    game,
    simulation_steps;
    live = true, # slow down the renderering for live viewing
    framerate = 60,
    show_turn = true,
    filename = &quot;sim_steps&quot; # store the visualization at this (relative) path
)"><pre><span class="pl-c"><span class="pl-c">#</span> activate the GLMakie backend to render on a GPU-accelerated canvas.</span>
<span class="pl-c"><span class="pl-c">#</span> Loading this package may take a while.</span>
<span class="pl-k">using</span> GLMakie
<span class="pl-c1">animate_sim_steps</span>(
    game,
    simulation_steps;
    live <span class="pl-k">=</span> <span class="pl-c1">true</span>, <span class="pl-c"><span class="pl-c">#</span> slow down the renderering for live viewing</span>
    framerate <span class="pl-k">=</span> <span class="pl-c1">60</span>,
    show_turn <span class="pl-k">=</span> <span class="pl-c1">true</span>,
    filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sim_steps<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> store the visualization at this (relative) path</span>
)</pre></div>
<p dir="auto">Now you can watch the solver learning from scratch to solve the tag game.
The resulting visualization should look something like the teaser video above (of course depending on you random seed).</p>
<hr>
<blockquote>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> TODO:</p>
<ul dir="auto">
<li>explain learning settings</li>
</ul>
</blockquote>
</article></div>