<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ttvfaster" class="anchor" aria-hidden="true" href="#ttvfaster"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TTVFaster</h1>
<p dir="auto">First order eccentricity transit timing variations (TTVs) computed in Agol &amp; Deck (2015)
<a href="https://ui.adsabs.harvard.edu/abs/2016ApJ...818..177A/abstract" rel="nofollow"><img src="https://camo.githubusercontent.com/74613bfc31bd26c83dae091587c5136bb96627380ea55811974c7e1733aa65c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4144532d3230313641504a2e2e2e3831382e2e2e313737412d626c7565" alt="ADS" data-canonical-src="https://img.shields.io/badge/ADS-2016APJ...818...177A-blue" style="max-width: 100%;"></a> <a href="http://arxiv.org/abs/1509.01623" rel="nofollow"><img src="https://camo.githubusercontent.com/c2268ac9129516ef228739f8fc6518dfac94f9c7f63550a8de53cb4c29a43abb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d313530392e30313632332d627269676874677265656e" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-1509.01623-brightgreen" style="max-width: 100%;"></a></p>
<p dir="auto">This implements equation (33) from that paper by computing the Laplace
coefficients using a series solution due to Jack Wisdom, computing
the f_{1,j}^{(+-k)} coefficients given in equation (34) using the functions u and
v_+- with coefficients given in Table 1.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the registered TTVFaster repo as a Julia package with the <code>Pkg</code> manager.</p>
<ul dir="auto">
<li>the repo from the package registry has been tested on Julia v1.3.0</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg Pkg.add(&quot;TTVFaster.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TTVFaster.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In its current state, the package computes the TTVs of a multi-transiting planetary system where <em>two</em> planets are observed to be transiting.
If you intend to modify the source code for more than 2 transiting planets, please create a GitHub fork to develop your own version.</p>
<ul dir="auto">
<li>make sure to replace <code>your-GitHub-username</code> with your actual GitHub username in the code below</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.develop(PackageSpec(url=&quot;git@github.com:your-GitHub-username/TTVFaster.jl.git&quot;))"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">develop</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>git@github.com:your-GitHub-username/TTVFaster.jl.git<span class="pl-pds">"</span></span>))</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">TTVFaster computes TTVs with respect to 5 properties for each planet: \mu,t0,Period, e cos(omega), e sin(omega);
where \mu is the mass ratio of the planet to the star, t0 is the initial transit time (of the averaged orbit),
Period is the mean orbital period, e is the eccentricity, and omega is the longitude of periastron.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">The file kepler62ef_planets.txt in the examples/ directory contains
a comma-separated set of 10 parameters that describe a system with two planets similar to Kepler-62e/f.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TTVFaster,DelimitedFiles

julia&gt; data=readdlm(&quot;kepler62ef_planets.txt&quot;,',',Float64)  
1x10 Array{Float64,2}:
 3.02306e-5  122.386  -16.5926  -0.00127324  0.0026446  1.67874e-5  267.307  155.466  -0.0025544  0.00117917

julia&gt; include(&quot;test_ttv.jl&quot;)  
test_ttv (generic function with 4 methods)

julia&gt; @time ttv1,ttv2=test_ttv(5,40,20,data);  # inputs are jmax,ntrans1,ntrans2,data
  0.982326 seconds (2.04 M allocations: 98.466 MiB, 12.08% gc time)
julia&gt; @time ttv1,ttv2=test_ttv(5,40,20,data);  
  0.001171 seconds (331 allocations: 21.922 KiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TTVFaster,DelimitedFiles

julia<span class="pl-k">&gt;</span> data<span class="pl-k">=</span><span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>kepler62ef_planets.txt<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>,Float64)  
<span class="pl-c1">1</span>x10 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3.02306e-5</span>  <span class="pl-c1">122.386</span>  <span class="pl-k">-</span><span class="pl-c1">16.5926</span>  <span class="pl-k">-</span><span class="pl-c1">0.00127324</span>  <span class="pl-c1">0.0026446</span>  <span class="pl-c1">1.67874e-5</span>  <span class="pl-c1">267.307</span>  <span class="pl-c1">155.466</span>  <span class="pl-k">-</span><span class="pl-c1">0.0025544</span>  <span class="pl-c1">0.00117917</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test_ttv.jl<span class="pl-pds">"</span></span>)  
test_ttv (generic <span class="pl-k">function</span> with <span class="pl-c1">4</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> ttv1,ttv2<span class="pl-k">=</span><span class="pl-c1">test_ttv</span>(<span class="pl-c1">5</span>,<span class="pl-c1">40</span>,<span class="pl-c1">20</span>,data);  <span class="pl-c"><span class="pl-c">#</span> inputs are jmax,ntrans1,ntrans2,data</span>
  <span class="pl-c1">0.982326</span> seconds (<span class="pl-c1">2.04</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">98.466</span> MiB, <span class="pl-c1">12.08</span><span class="pl-k">%</span> gc time)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> ttv1,ttv2<span class="pl-k">=</span><span class="pl-c1">test_ttv</span>(<span class="pl-c1">5</span>,<span class="pl-c1">40</span>,<span class="pl-c1">20</span>,data);  
  <span class="pl-c1">0.001171</span> seconds (<span class="pl-c1">331</span> allocations<span class="pl-k">:</span> <span class="pl-c1">21.922</span> KiB)</pre></div>
<p dir="auto">This computes the TTVs and writes them to the files inner_ttv.txt and outer_ttv.txt.
Note that the TTVs are stored in the variables ttv1 and ttv2, as well.
The test_ttv.jl routine accepts jmax (the maximum j to sum to, in this example 5),
ntrans1 (number of transits of the inner planet), ntrans2 (the number of transits of the outer planet),
and data which contains the parameters of both planets.</p>
</article></div>