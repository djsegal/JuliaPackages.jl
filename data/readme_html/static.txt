<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-static" class="anchor" aria-hidden="true" href="#static"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Static</h1>
<p><a href="https://sciml.github.io/Static.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://sciml.github.io/Static.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/Static.jl/actions"><img src="https://github.com/SciML/Static.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SciML/Static.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6884da3e7ccccfeab64e217375ddc7bca33cf3be20d970373ac6515f55f422da/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f5374617469632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/SciML/Static.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>Static</code> defines a limited set of statically parameterized types and a common interface that is shared between them. Defining a new static type that conforms with this interface only requires defining the following:</p>
<ul>
<li><code>Static.static(::T)</code> - given the non-static type <code>T</code> return its static counterpart.</li>
<li><code>Static.is_static(::Type{S})</code> - given the static type <code>S</code> return <code>True()</code>.</li>
<li><code>Static.known(::Type{S})</code>- given the static type <code>S</code> return the known non-static value.</li>
</ul>
<p>Fore example, the following would appropriately define the interface for <code>StaticChar</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Static.static(x::Char) = StaticChar(x)
Static.is_static(::Type{T}) where {T&lt;:StaticChar} = True()
Static.known(::Type{StaticChar{C}}) where {C} = C::Char
"><pre>Static<span class="pl-k">.</span><span class="pl-en">static</span>(x<span class="pl-k">::</span><span class="pl-c1">Char</span>) <span class="pl-k">=</span> <span class="pl-c1">StaticChar</span>(x)
Static<span class="pl-k">.</span><span class="pl-en">is_static</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">StaticChar</span>} <span class="pl-k">=</span> <span class="pl-c1">True</span>()
Static<span class="pl-k">.</span><span class="pl-en">known</span>(<span class="pl-k">::</span><span class="pl-c1">Type{StaticChar{C}}</span>) <span class="pl-k">where</span> {C} <span class="pl-k">=</span> C<span class="pl-k">::</span><span class="pl-c1">Char</span></pre></div>
</article></div>