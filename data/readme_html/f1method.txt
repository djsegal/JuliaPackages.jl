<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/4486578/57202054-3d1c4400-6fe4-11e9-97d7-9a1ffbfcb2fc.png"><img src="https://user-images.githubusercontent.com/4486578/57202054-3d1c4400-6fe4-11e9-97d7-9a1ffbfcb2fc.png" alt="logo" title="F1method" align="right" height="200" style="max-width:100%;"></a></p>
<h1><a id="user-content-f-1-algorithm" class="anchor" aria-hidden="true" href="#f-1-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>F-1 algorithm</h1>
<p>
  <a href="https://briochemc.github.io/F1Method.jl/stable/" rel="nofollow">
    <img src="https://camo.githubusercontent.com/a875aeff163269fd7beb2a68018e3cb8ba26e6fa0a2984734327a75754bfdd8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6272696f6368656d632f46314d6574686f642e6a6c2f446f63756d656e746174696f6e3f7374796c653d666f722d7468652d6261646765266c6162656c3d446f63756d656e746174696f6e266c6f676f3d52656164253230746865253230446f6373266c6f676f436f6c6f723d7768697465" data-canonical-src="https://img.shields.io/github/workflow/status/briochemc/F1Method.jl/Documentation?style=for-the-badge&amp;label=Documentation&amp;logo=Read%20the%20Docs&amp;logoColor=white" style="max-width:100%;">
  </a>
</p>
<p>
  <a href="https://doi.org/10.5281/zenodo.2667835" rel="nofollow">
    <img src="https://camo.githubusercontent.com/f6c3978791372b56adecf17071f6726d8407509850db55adf5f587c10b8b9f8c/687474703a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e353238312532302532462532307a656e6f646f2e323636373833352d626c75652e7376673f267374796c653d666c61742d737175617265" data-canonical-src="http://img.shields.io/badge/DOI-10.5281%20%2F%20zenodo.2667835-blue.svg?&amp;style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://github.com/briochemc/F1Method.jl/blob/master/LICENSE">
    <img alt="License: MIT" src="https://camo.githubusercontent.com/fcd9b4b40556cbae5890b8909abec6d88286933a4af3a00c4cf9f02df682b805/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e7376673f267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg?&amp;style=flat-square" style="max-width:100%;">
  </a>
</p>
<p>
  <a href="https://github.com/briochemc/F1Method.jl/actions">
    <img src="https://camo.githubusercontent.com/ff4b7a306fded3fdb853db660e04e8d951fc040aeeacfb222d1fbf63c13fd558/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6272696f6368656d632f46314d6574686f642e6a6c2f4d61632532304f53253230583f6c6162656c3d4f5358266c6f676f3d4170706c65266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/workflow/status/briochemc/F1Method.jl/Mac%20OS%20X?label=OSX&amp;logo=Apple&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://github.com/briochemc/F1Method.jl/actions">
    <img src="https://camo.githubusercontent.com/d63f343099d0ec0483a3973919831ab32b9e21045863b1998213dce4e2354cc8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6272696f6368656d632f46314d6574686f642e6a6c2f4c696e75783f6c6162656c3d4c696e7578266c6f676f3d4c696e7578266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/workflow/status/briochemc/F1Method.jl/Linux?label=Linux&amp;logo=Linux&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://github.com/briochemc/F1Method.jl/actions">
    <img src="https://camo.githubusercontent.com/50c2f7e64688061deee472399318fbf33bb8b68abb3d79ccf5589bdf6e8c0843/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6272696f6368656d632f46314d6574686f642e6a6c2f57696e646f77733f6c6162656c3d57696e646f7773266c6f676f3d57696e646f7773266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/workflow/status/briochemc/F1Method.jl/Windows?label=Windows&amp;logo=Windows&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://codecov.io/gh/briochemc/F1Method.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/eeb2658c3d33d5c08a8cb311e5b509af56dbcb6ac0d95fab837d65244b0cc516/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6272696f6368656d632f46314d6574686f642e6a6c2f6d61737465723f6c6162656c3d436f6465636f76266c6f676f3d636f6465636f76266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/codecov/c/github/briochemc/F1Method.jl/master?label=Codecov&amp;logo=codecov&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;">
  </a>
</p>
<p>This package implements the F-1 algorithm described in <em><a href="https://www.bpasquier.com/publication/pasquier_primeau_sisc_2019/" rel="nofollow">Pasquier and Primeau</a></em> (in preparation).
It allows for efficient quasi-auto-differentiation of an objective function defined implicitly by the solution of a steady-state problem.</p>
<p>Consider a discretized system of nonlinear partial differential equations that takes the form</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="F(x,p) = 0
"><pre><code>F(x,p) = 0
</code></pre></div>
<p>where <code>x</code> is a column vector of the model state variables and <code>p</code> is a vector of parameters.
The F-1 algorithm then allows for an efficient computation of both the gradient vector and the Hessian matrix of a generic objective function defined by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="objective(p) = f(s(p),p)
"><pre><code>objective(p) = f(s(p),p)
</code></pre></div>
<p>where <code>s(p)</code> is the steady-state solution of the system, i.e., such that <code>F(s(p),p) = 0</code> and where <code>f(x,p)</code> is for example a measure of the mismatch between observed state, parameters, and observations.
Optimizing the model is then simply done by minimizing <code>objective(p)</code>.
(See <em><a href="https://www.bpasquier.com/publication/pasquier_primeau_sisc_2019/" rel="nofollow">Pasquier and Primeau</a></em> (in preparation), for more details.)</p>
<h2><a id="user-content-advantages-of-the-f-1-algorithm" class="anchor" aria-hidden="true" href="#advantages-of-the-f-1-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advantages of the F-1 algorithm</h2>
<p>The F-1 algorithm is <strong>easy</strong> to use, gives <strong>accurate</strong> results, and is computationally <strong>fast</strong>:</p>
<ul>
<li><strong>Easy</strong> — The F-1 algorithm basically just needs the user to provide a solver (for finding the steady-state), the mismatch function, <code>f</code>, the state function, <code>F</code>, and their derivatives, <code>∇ₓf</code> and <code>∇ₓF</code> w.r.t. the state <code>x</code>.
(Note these derivatives can be computed numerically, via the <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a> package for example.)</li>
<li><strong>Accurate</strong> — Thanks to ForwardDiff's nested dual numbers implementation, the accuracy of the gradient and Hessian, as computed by the F-1 algorithm, are close to machine precision.</li>
<li><strong>Fast</strong> — The F-1 algorithm is as fast as if you derived analytical formulas for every first and second derivatives <em>and</em> used those in the most efficient way.
This is because the bottleneck of such computations is the number of matrix factorizations, and the F-1 algorithm only requires a single one. In comparison, standard autodifferentiation methods that take the steady-state solver as a black box would require order <code>m</code> or <code>m^2</code> factorizations, where <code>m</code> is the number of parameters.</li>
</ul>
<h2><a id="user-content-whats-needed" class="anchor" aria-hidden="true" href="#whats-needed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What's needed?</h2>
<p>A requirement of the F-1 algorithm is that the Jacobian matrix <code>A = ∇ₓf</code> can be created, stored, and factorized.</p>
<p>To use the F-1 algorithm, the user must:</p>
<ul>
<li>Make sure that there is a suitable algorithm <code>alg</code> to solve the steady-state equation</li>
<li>overload the <code>solve</code> function and the <code>SteadyStateProblem</code> constructor from <a href="https://github.com/JuliaDiffEq/DiffEqBase.jl">DiffEqBase</a>. (An example is given in the CI tests — see, e.g., the <a href="test/simple_setup.jl"><code>test/simple_setup.jl</code></a> file.)</li>
<li>Provide the derivatives of <code>f</code> and <code>F</code> with respect to the state, <code>x</code>.</li>
</ul>
<h2><a id="user-content-a-concrete-example" class="anchor" aria-hidden="true" href="#a-concrete-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A concrete example</h2>
<p>Make sure you have overloaded <code>solve</code> from DiffEqBase
(an example of how to do this is given in the <a href="https://briochemc.github.io/F1Method.jl/stable/" rel="nofollow">documentation</a>).
Once initial values for the state, <code>x</code>, and parameters, <code>p</code>, are chosen, simply initialize the required memory cache, <code>mem</code> via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Initialize the cache for storing reusable objects
mem = initialize_mem(F, ∇ₓf, ∇ₓF, x, p, alg; options...)
"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize the cache for storing reusable objects</span>
mem <span class="pl-k">=</span> <span class="pl-c1">initialize_mem</span>(F, ∇ₓf, ∇ₓF, x, p, alg; options<span class="pl-k">...</span>)</pre></div>
<p>wrap the functions into functions of <code>p</code> only via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Wrap the objective, gradient, and Hessian functions
objective(p) = F1Method.objective(f, F, ∇ₓF, mem, p, alg; options...)
gradient(p) = F1Method.gradient(f, F, ∇ₓf, ∇ₓF, mem, p, alg; options...)
hessian(p) = F1Method.hessian(f, F, ∇ₓf, ∇ₓF, mem, p, alg; options...)
"><pre><span class="pl-c"><span class="pl-c">#</span> Wrap the objective, gradient, and Hessian functions</span>
<span class="pl-en">objective</span>(p) <span class="pl-k">=</span> F1Method<span class="pl-k">.</span><span class="pl-c1">objective</span>(f, F, ∇ₓF, mem, p, alg; options<span class="pl-k">...</span>)
<span class="pl-en">gradient</span>(p) <span class="pl-k">=</span> F1Method<span class="pl-k">.</span><span class="pl-c1">gradient</span>(f, F, ∇ₓf, ∇ₓF, mem, p, alg; options<span class="pl-k">...</span>)
<span class="pl-en">hessian</span>(p) <span class="pl-k">=</span> F1Method<span class="pl-k">.</span><span class="pl-c1">hessian</span>(f, F, ∇ₓf, ∇ₓF, mem, p, alg; options<span class="pl-k">...</span>)</pre></div>
<p>and compute the objective, gradient, or Hessian via either of</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="objective(p)

gradient(p)

hessian(p)
"><pre><span class="pl-c1">objective</span>(p)

<span class="pl-c1">gradient</span>(p)

<span class="pl-c1">hessian</span>(p)</pre></div>
<p>That's it.
You were told it was simple, weren't you?
Now you can test how fast and accurate it is!</p>
<h2><a id="user-content-citing-the-software" class="anchor" aria-hidden="true" href="#citing-the-software"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing the software</h2>
<p>If you use this package, or implement your own package based on the F-1 algorithm please cite us.
If you use the F-1 algorithm, please cite <em><a href="https://www.bpasquier.com/publication/pasquier_primeau_sisc_2019/" rel="nofollow">Pasquier and Primeau</a></em> (in prep.).
If you also use this package directly, please cite it! (Use <a href="https://doi.org/10.5281/zenodo.2667835" rel="nofollow">the Zenodo link</a> or the <a href="./CITATION.bib">CITATION.bib file</a>, which contains a bibtex entry.)</p>
</article></div>