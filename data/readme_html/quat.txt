<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-quaternionsjl" class="anchor" aria-hidden="true" href="#quaternionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quaternions.jl</h1>
<p>A Julia module with quaternion, octonion and dual-quaternion functionality</p>
<p><a href="https://travis-ci.org/JuliaGeometry/Quaternions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e760348e362bca63c3cb4e3e5e3cd591c0ddb13/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147656f6d657472792f5175617465726e696f6e732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGeometry/Quaternions.jl.png?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGeometry/Quaternions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/75f77b5b032920d3d69a2afb10f9f32d2f0dc082/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c696147656f6d657472792f5175617465726e696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaGeometry/Quaternions.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Quaternion" rel="nofollow">Quaternions</a> are best known for their suitability
as representations of 3D rotational orientation. They can also be viewed as an extension of complex numbers.</p>
<p>Implemented functions are:</p>
<pre><code>+-*/^
real  
imag  (a vector)  
conj  
abs  
abs2  
exp  
log  
normalize  
normalizea  (return normalized quaternion and absolute value as a pair)  
angleaxis  (taken as an orientation, return the angle and axis (3 vector) as a tuple)  
angle  
axis  
exp  
log  
sin  
cos  
sqrt  
linpol  (interpolate between 2 normalized quaternions)  
</code></pre>
<p><a href="http://en.wikipedia.org/wiki/Dual_quaternion" rel="nofollow">Dual quaternions</a> are an extension, combining quaternions with
<a href="https://github.com/scidom/DualNumbers.jl">dual numbers</a>.
On top of just orientation, they can represent all rigid transformations.</p>
<p>There are two conjugation concepts here</p>
<pre><code>conj  (quaternion conjugation)  
dconj (dual conjugation)
</code></pre>
<p>further implemented here:</p>
<pre><code>Q0  (the 'real' quaternion)  
Qe  ( the 'dual' part)  
+-*/^  
abs  
abs2  
normalize  
normalizea  
angleaxis  
angle  
axis  
exp  
log  
sqrt  
</code></pre>
<p><a href="http://en.wikipedia.org/wiki/Octonion" rel="nofollow">Octonions</a> form the logical next step on the Complex-Quaternion path.
They play a role, for instance, in the mathematical foundation of String theory.</p>
<pre><code>+-*/^
real  
imag  (a vector)  
conj  
abs  
abs2  
exp  
log  
normalize  
normalizea  (return normalized octonion and absolute value as a tuple)  
exp  
log  
sqrt  
</code></pre>
</article></div>