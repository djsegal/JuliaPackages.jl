<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-shortstrings" class="anchor" aria-hidden="true" href="#shortstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShortStrings</h1>
<p>This is an efficient string format for storing strings of size less than 15 bytes.</p>
<h1><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ShortStrings, SortingAlgorithms
N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">1e6</span>)
svec <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N]
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec)
<span class="pl-c1">@time</span> <span class="pl-c1">sort</span>(svec);
<span class="pl-c1">@time</span> <span class="pl-c1">sort</span>(ssvec, by <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>size_content, alg<span class="pl-k">=</span>RadixSort);

<span class="pl-c"><span class="pl-c">#</span> conversion to shorter strings is also possible with</span>
<span class="pl-c1">ShortString7</span>(<span class="pl-c1">randstring</span>(<span class="pl-c1">7</span>))
<span class="pl-c1">ShortString3</span>(<span class="pl-c1">randstring</span>(<span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> convenience macros are provided for writing actual strings (e.g., for comparison)</span>
s15 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss15</span>"</span>A short string<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> ShortString15 === ShortString{Int128}</span>
s7 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss7</span>"</span>shorter<span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> ShortString7 === ShortString{Int64}</span>
s3 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss3</span>"</span>srt<span class="pl-pds">"</span></span>               <span class="pl-c"><span class="pl-c">#</span> ShortString3 === ShortString{Int32}</span></pre></div>
<h1><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmark</h1>
<p><a target="_blank" rel="noopener noreferrer" href="readme_string_sort.png"><img src="readme_string_sort.png" alt="String sorting performance" style="max-width:100%;"></a></p>
<h2><a id="user-content-benchmarking-code" class="anchor" aria-hidden="true" href="#benchmarking-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarking code</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">1e6</span>);
svec <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N];
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec);
basesort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec)
radixsort_timings <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> SortingLab<span class="pl-k">.</span><span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec)
short_radixsort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> ShortStrings<span class="pl-k">.</span><span class="pl-c1">fsort</span>(<span class="pl-k">$</span>ssvec)
<span class="pl-c"><span class="pl-c">#</span> another way to do sorting</span>
<span class="pl-c1">sort</span>(ssvec, by <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>size_content, alg<span class="pl-k">=</span>RadixSort)

<span class="pl-k">using</span> RCall
<span class="pl-c1">R</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">memory.limit(<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">31</span><span class="pl-k">-</span><span class="pl-c1">1</span>)</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span>
<span class="pl-c1">@rput</span> svec;
r_timings <span class="pl-k">=</span> <span class="pl-c1">R</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">memory.limit(<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">31</span><span class="pl-k">-</span><span class="pl-c1">1</span>)</span>
<span class="pl-s1">replicate(<span class="pl-k">$</span>(length(<span class="pl-smi">short_radixsort.times</span>)), system.time(sort(<span class="pl-smi">svec</span>, <span class="pl-v">method</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>radix<span class="pl-pds">"</span></span>))[<span class="pl-c1">3</span>])</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span>;

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ShortStrings radix sort<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>R radix sort<span class="pl-pds">"</span></span>],
    <span class="pl-c1">mean</span>.([basesort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, radixsort_timings<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, short_radixsort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, r_timings]),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>String sort performance - len: 1m, variable size 15<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>readme_string_sort.png<span class="pl-pds">"</span></span>)


<span class="pl-k">using</span> SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">2e7</span>);
svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">รท</span><span class="pl-c1">100</span>],N)
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec);
basesort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>
radixsort_timings <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> SortingLab<span class="pl-k">.</span><span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>
short_radixsort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> ShortStrings<span class="pl-k">.</span><span class="pl-c1">fsort</span>(<span class="pl-k">$</span>ssvec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>

<span class="pl-k">using</span> RCall

<span class="pl-c1">@rput</span> svec;
r_timings <span class="pl-k">=</span> <span class="pl-c1">R</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">replicate(max(<span class="pl-c1">5</span>, <span class="pl-k">$</span>(length(<span class="pl-smi">short_radixsort.times</span>))), system.time(sort(<span class="pl-smi">svec</span>, <span class="pl-v">method</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>radix<span class="pl-pds">"</span></span>))[<span class="pl-c1">3</span>])</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span>;

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ShortStrings radix sort<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>R radix sort<span class="pl-pds">"</span></span>],
    <span class="pl-c1">mean</span>.([basesort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, radixsort_timings<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, short_radixsort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, r_timings]),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>String sort performance - len: <span class="pl-v">$(N<span class="pl-k">รท</span><span class="pl-c1">1_000_000</span>)</span>m, fixed size: 15<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>readme_string_sort_fixed_len.png<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h1>
<p>This is based on the discussion <a href="https://discourse.julialang.org/t/progress-towards-faster-sortperm-for-strings/8505/4?u=xiaodai" rel="nofollow">here</a>. If Julia.Base adopts the hybrid representation of strings then it makes this package redundant.</p>
<h1><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build Status</h1>
<p><a href="https://travis-ci.org/xiaodaigh/ShortStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5d5f7ef1f188094766afa5f34811e79ae386e2aa/68747470733a2f2f7472617669732d63692e6f72672f7869616f64616967682f53686f7274537472696e67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/xiaodaigh/ShortStrings.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/xiaodaigh/ShortStrings.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1b4fe1c2845a5c9e490c8d66e812bf0f57291c49/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7869616f64616967682f53686f7274537472696e67732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/xiaodaigh/ShortStrings.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/xiaodaigh/ShortStrings.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2763687627ff0e366b7488209d202d50dd2b5a95/687474703a2f2f636f6465636f762e696f2f6769746875622f7869616f64616967682f53686f7274537472696e67732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/xiaodaigh/ShortStrings.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>