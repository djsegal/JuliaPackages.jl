<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-shortstrings" class="anchor" aria-hidden="true" href="#shortstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ShortStrings</h2>
<p dir="auto">This is an efficient string format for storing strings using integer types. For example, <code>UInt32</code> can hold 3 bytes of string with 1 byte to record the size of the string and a <code>UInt128</code> can hold a 15-byte string with 1 byte to record the size of the string.</p>
<p dir="auto">Using BitIntegers.jl, integer of larger size than <code>UInt128</code> can be defined. This package supports string with up to 255 bytes in size.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ShortStrings

using SortingAlgorithms
using Random: randstring

N = Int(1e6)
svec = [randstring(rand(1:15)) for i=1:N]
# convert to ShortString
ssvec = ShortString15.(svec)

# sort short vectors
@time sort(svec);
@time sort(ssvec, by = x-&gt;x.size_content, alg=RadixSort);

# conversion to shorter strings is also possible with
ShortString7(randstring(7))
ShortString3(randstring(3))

# convenience macros are provided for writing actual strings (e.g., for comparison)
s15 = ss15&quot;A short string&quot;  # ShortString15 === ShortString{Int128}
s7 = ss7&quot;shorter&quot;           # ShortString7 === ShortString{Int64}
s3 = ss3&quot;srt&quot;               # ShortString3 === ShortString{Int32}

# The ShortString constructor can automatically select the shortest size that a string will fit in
ShortString(&quot;This is a long string&quot;)

# The maximum length can also be added:
ShortString(&quot;Foo&quot;, 15)

# The `ss` macro will also select the shortest size that will fit
s31 = ss&quot;This also is a long string&quot;"><pre><span class="pl-k">using</span> ShortStrings

<span class="pl-k">using</span> SortingAlgorithms
<span class="pl-k">using</span> Random<span class="pl-k">:</span> randstring

N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">1e6</span>)
svec <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N]
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec)

<span class="pl-c"><span class="pl-c">#</span> sort short vectors</span>
<span class="pl-c1">@time</span> <span class="pl-c1">sort</span>(svec);
<span class="pl-c1">@time</span> <span class="pl-c1">sort</span>(ssvec, by <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>size_content, alg<span class="pl-k">=</span>RadixSort);

<span class="pl-c"><span class="pl-c">#</span> conversion to shorter strings is also possible with</span>
<span class="pl-c1">ShortString7</span>(<span class="pl-c1">randstring</span>(<span class="pl-c1">7</span>))
<span class="pl-c1">ShortString3</span>(<span class="pl-c1">randstring</span>(<span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> convenience macros are provided for writing actual strings (e.g., for comparison)</span>
s15 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss15</span>"</span>A short string<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> ShortString15 === ShortString{Int128}</span>
s7 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss7</span>"</span>shorter<span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> ShortString7 === ShortString{Int64}</span>
s3 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss3</span>"</span>srt<span class="pl-pds">"</span></span>               <span class="pl-c"><span class="pl-c">#</span> ShortString3 === ShortString{Int32}</span>

<span class="pl-c"><span class="pl-c">#</span> The ShortString constructor can automatically select the shortest size that a string will fit in</span>
<span class="pl-c1">ShortString</span>(<span class="pl-s"><span class="pl-pds">"</span>This is a long string<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> The maximum length can also be added:</span>
<span class="pl-c1">ShortString</span>(<span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>, <span class="pl-c1">15</span>)

<span class="pl-c"><span class="pl-c">#</span> The `ss` macro will also select the shortest size that will fit</span>
s31 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ss</span>"</span>This also is a long string<span class="pl-pds">"</span></span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="0.386383 seconds (126 allocations: 11.450 MiB, 18.62% gc time, 0.59% comp
ilation time)
  0.279547 seconds (742.26 k allocations: 74.320 MiB, 70.85% compilation ti
me)
&quot;This also is a long string&quot;"><pre class="notranslate"><code>0.386383 seconds (126 allocations: 11.450 MiB, 18.62% gc time, 0.59% comp
ilation time)
  0.279547 seconds (742.26 k allocations: 74.320 MiB, 70.85% compilation ti
me)
"This also is a long string"
</code></pre></div>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N = Int(1e6);
svec = [randstring(rand(1:15)) for i=1:N];
# convert to ShortString
ssvec = ShortString15.(svec);
basesort = @benchmark sort($svec)
radixsort_timings = @benchmark SortingLab.radixsort($svec)
short_radixsort = @benchmark ShortStrings.fsort($ssvec)
# another way to do sorting
sort(ssvec, by = x-&gt;x.size_content, alg=RadixSort)

using RCall
@rput svec;
r_timings = R&quot;&quot;&quot;
replicate($(length(short_radixsort.times)), system.time(sort(svec, method=&quot;radix&quot;))[3])
&quot;&quot;&quot;;

using Plots
bar([&quot;Base.sort&quot;,&quot;SortingLab.radixsort&quot;,&quot;ShortStrings radix sort&quot;, &quot;R radix sort&quot;],
    mean.([basesort.times./1e9, radixsort_timings.times./1e9, short_radixsort.times./1e9, r_timings]),
    title=&quot;String sort performance - len: 1m, variable size 15&quot;,
    label = &quot;seconds&quot;)"><pre><span class="pl-k">using</span> SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">1e6</span>);
svec <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N];
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec);
basesort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec)
radixsort_timings <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> SortingLab<span class="pl-k">.</span><span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec)
short_radixsort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> ShortStrings<span class="pl-k">.</span><span class="pl-c1">fsort</span>(<span class="pl-k">$</span>ssvec)
<span class="pl-c"><span class="pl-c">#</span> another way to do sorting</span>
<span class="pl-c1">sort</span>(ssvec, by <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>size_content, alg<span class="pl-k">=</span>RadixSort)

<span class="pl-k">using</span> RCall
<span class="pl-c1">@rput</span> svec;
r_timings <span class="pl-k">=</span> <span class="pl-c1">R</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">replicate(<span class="pl-k">$</span>(length(<span class="pl-smi">short_radixsort.times</span>)), system.time(sort(<span class="pl-smi">svec</span>, <span class="pl-v">method</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>radix<span class="pl-pds">"</span></span>))[<span class="pl-c1">3</span>])</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span>;

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ShortStrings radix sort<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>R radix sort<span class="pl-pds">"</span></span>],
    <span class="pl-c1">mean</span>.([basesort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, radixsort_timings<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, short_radixsort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, r_timings]),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>String sort performance - len: 1m, variable size 15<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/README_2_1.png"><img src="figures/README_2_1.png" alt="" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N = Int(1e6);
svec = rand([randstring(rand(1:15)) for i=1:N÷100],N)
# convert to ShortString
ssvec = ShortString15.(svec);
basesort = @benchmark sort($svec) samples = 5 seconds = 120
radixsort_timings = @benchmark SortingLab.radixsort($svec) samples = 5 seconds = 120
short_radixsort = @benchmark ShortStrings.fsort($ssvec) samples = 5 seconds = 120

using RCall

@rput svec;
r_timings = R&quot;&quot;&quot;
replicate(max(5, $(length(short_radixsort.times))), system.time(sort(svec, method=&quot;radix&quot;))[3])
&quot;&quot;&quot;;

using Plots
bar([&quot;Base.sort&quot;,&quot;SortingLab.radixsort&quot;,&quot;ShortStrings radix sort&quot;, &quot;R radix sort&quot;],
    mean.([basesort.times./1e9, radixsort_timings.times./1e9, short_radixsort.times./1e9, r_timings]),
    title=&quot;String sort performance - len: $(N÷1_000_000)m, fixed size: 15&quot;,
    label = &quot;seconds&quot;)"><pre><span class="pl-k">using</span> SortingLab, ShortStrings, SortingAlgorithms, BenchmarkTools;
N <span class="pl-k">=</span> <span class="pl-c1">Int</span>(<span class="pl-c1">1e6</span>);
svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>)) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">÷</span><span class="pl-c1">100</span>],N)
<span class="pl-c"><span class="pl-c">#</span> convert to ShortString</span>
ssvec <span class="pl-k">=</span> <span class="pl-c1">ShortString15</span>.(svec);
basesort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>
radixsort_timings <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> SortingLab<span class="pl-k">.</span><span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>
short_radixsort <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> ShortStrings<span class="pl-k">.</span><span class="pl-c1">fsort</span>(<span class="pl-k">$</span>ssvec) samples <span class="pl-k">=</span> <span class="pl-c1">5</span> seconds <span class="pl-k">=</span> <span class="pl-c1">120</span>

<span class="pl-k">using</span> RCall

<span class="pl-c1">@rput</span> svec;
r_timings <span class="pl-k">=</span> <span class="pl-c1">R</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">replicate(max(<span class="pl-c1">5</span>, <span class="pl-k">$</span>(length(<span class="pl-smi">short_radixsort.times</span>))), system.time(sort(<span class="pl-smi">svec</span>, <span class="pl-v">method</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>radix<span class="pl-pds">"</span></span>))[<span class="pl-c1">3</span>])</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span>;

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ShortStrings radix sort<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>R radix sort<span class="pl-pds">"</span></span>],
    <span class="pl-c1">mean</span>.([basesort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, radixsort_timings<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, short_radixsort<span class="pl-k">.</span>times<span class="pl-k">./</span><span class="pl-c1">1e9</span>, r_timings]),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>String sort performance - len: <span class="pl-v">$(N<span class="pl-k">÷</span><span class="pl-c1">1_000_000</span>)</span>m, fixed size: 15<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/README_3_1.png"><img src="figures/README_3_1.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">This is based on the discussion <a href="https://discourse.julialang.org/t/progress-towards-faster-sortperm-for-strings/8505/4?u=xiaodai" rel="nofollow">here</a>. If Julia.Base adopts the hybrid representation of strings then it makes this package redundant.</p>
<h1 dir="auto"><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build Status</h1>
<p dir="auto"><a href="https://github.com/JuliaString/Strs.jl/issues"><img src="https://camo.githubusercontent.com/f5054ffcd4245c10d3ec85ef059e07aacf787b560f83ad4aec2236364437d097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaString/ShortStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6b0d6af5fed35d3ee7afaab7736f973e6514b55087ef0c4d44875eaa84083832/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f53686f7274537472696e67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/ShortStrings.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaString/ShortStrings.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d2db76b542351e565dbf688cbb48de376d0b732a1aaf9d73647a4ebe60678264/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f53686f7274537472696e67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/ShortStrings.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
</article></div>