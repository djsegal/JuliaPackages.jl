<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-parametricmcps" class="anchor" aria-hidden="true" href="#parametricmcps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParametricMCPs</h1>
<p dir="auto"><a href="https://github.com/lassepe/ParametricMCPs.jl/actions/workflows/ci.yml"><img src="https://github.com/lassepe/ParametricMCPs.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lassepe/ParametricMCPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3830d7384978af402cb4e2fa4a5061613bf1e28c2d7a22e97f5eeeab8c97abf3/68747470733a2f2f636f6465636f762e696f2f67682f6c6173736570652f506172616d65747269634d4350732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d6b6e4c4a39685666654f" alt="codecov" data-canonical-src="https://codecov.io/gh/lassepe/ParametricMCPs.jl/branch/main/graph/badge.svg?token=knLJ9hVfeO" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2bb630e2707a04100cd270fd944d22816241c37b68a5a1629257920c65e17891/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c7565" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a generic, differentiable mathematical programming layer by compiling mixed complementarity problems (MCPs) parameterized by a "runtime"-parameter vector. The resulting <code>ParametricMCP</code> can be solved for different parameter instantiations using <code>solve(problem, parameters)</code> and the <code>solve</code> routine is made differentiable via <a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore</a> and <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">ParametricMCPs is a registered package.
Thus, installation is as simple as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add ParametricMCPs"><pre>] add ParametricMCPs</pre></div>
<p dir="auto">This package uses the proprietary PATH solver under the hood (via <a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a>).
Therefore, you will need a license key to solve larger problems.
However, by courtesy of Steven Dirkse, Michael Ferris, and Tudd Munson,
<a href="https://pages.cs.wisc.edu/~ferris/path.html" rel="nofollow">temporary licenses are available free of charge</a>.
Please consult the documentation of <a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a> to learn about loading the license key.</p>
<h2 dir="auto"><a id="user-content-quickstart-by-example" class="anchor" aria-hidden="true" href="#quickstart-by-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart by Example</h2>
<p dir="auto">Simple forward computation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ParametricMCPs

# setup a simple MCP which represents a QP with
# - cost: sum((z[1:2] - θ).^2)
# - constaints: z[1:2] &gt;= 0

f(z, θ) = [2z[1:2] - z[3:4] - 2θ; z[1:2]]
lower_bounds = [-Inf, -Inf, 0, 0]
upper_bounds = [Inf, Inf, Inf, Inf]
parameter_dimension = 2
problem = ParametricMCP(f, lower_bounds, upper_bounds, parameter_dimension)

some_parameter = [1.0, 2.0]
solve(problem, some_parameter)"><pre><span class="pl-k">using</span> ParametricMCPs

<span class="pl-c"><span class="pl-c">#</span> setup a simple MCP which represents a QP with</span>
<span class="pl-c"><span class="pl-c">#</span> - cost: sum((z[1:2] - θ).^2)</span>
<span class="pl-c"><span class="pl-c">#</span> - constaints: z[1:2] &gt;= 0</span>

<span class="pl-en">f</span>(z, θ) <span class="pl-k">=</span> [<span class="pl-c1">2</span>z[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">-</span> z[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>] <span class="pl-k">-</span> <span class="pl-c1">2</span>θ; z[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]]
lower_bounds <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
upper_bounds <span class="pl-k">=</span> [<span class="pl-c1">Inf</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">Inf</span>]
parameter_dimension <span class="pl-k">=</span> <span class="pl-c1">2</span>
problem <span class="pl-k">=</span> <span class="pl-c1">ParametricMCP</span>(f, lower_bounds, upper_bounds, parameter_dimension)

some_parameter <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>]
<span class="pl-c1">solve</span>(problem, some_parameter)</pre></div>
<p dir="auto">Since we provide differentiation rules via <code>ChainRulesCore</code>, the solver can be
differentiated using your favourite ad-framework, e.g., Zygote:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Zygote

function dummy_pipeline(θ)
    solution = ParametricMCPs.solve(problem, θ)
    sum(solution.z .^ 2)
end

Zygote.gradient(dummy_pipeline, some_parameter)"><pre><span class="pl-k">using</span> Zygote

<span class="pl-k">function</span> <span class="pl-en">dummy_pipeline</span>(θ)
    solution <span class="pl-k">=</span> ParametricMCPs<span class="pl-k">.</span><span class="pl-c1">solve</span>(problem, θ)
    <span class="pl-c1">sum</span>(solution<span class="pl-k">.</span>z <span class="pl-k">.^</span> <span class="pl-c1">2</span>)
<span class="pl-k">end</span>

Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>(dummy_pipeline, some_parameter)</pre></div>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This package is effectively a thin wrapper around the great work of other people.
Special thanks goes to the maintainers of the following packages:</p>
<ul dir="auto">
<li><a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a></li>
<li><a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore.jl</a></li>
<li><a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a></li>
<li><a href="https://github.com/JuliaSymbolics/Symbolics.jl">Symbolics.jl</a></li>
</ul>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<p dir="auto">For some specialized, closely related applications, you may want to consider the following packages (all of which also provide differentiation rules):</p>
<ul dir="auto">
<li><a href="https://github.com/forrestlaine/TensorGames.jl">TensorGames.jl</a> solves finite N-player normal-form games.</li>
<li><a href="https://github.com/lassepe/DifferentiableTrajectoryOptimization.jl">DifferentiableTrajectoryOptimization.jl</a> solves parametric (single-player) trajectory optimization problems. The interface is very similar to ParametricMCPs.jl. Beyond the PATH solver, this package also supports backends like IPOPT and OSQP.</li>
</ul>
</article></div>