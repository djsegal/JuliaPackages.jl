<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-espyinsidefunction" class="anchor" aria-hidden="true" href="#espyinsidefunction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EspyInsideFunction</h1>
<p dir="auto">This package provides functionality to extract internal variables from a function.
"Internal" refers here to variables that are neither parameters nor outputs of the function.</p>
<p dir="auto">The need for <code>EspyInsideFunction</code> arises when there is a difference between</p>
<ul dir="auto">
<li>what the rest of the software needs to exchange with the function, in order to
carry out the software's task, and</li>
<li>what the user may want to know about intermediate results internal to the function.</li>
</ul>
<p dir="auto">An example is the extraction of results in
a finite element software. The code for an element type must include a function that takes in
the degrees of freedom (in mechanics: nodel displacements) and output the element's
contributions to the residuals (forces). The user is interested in intermediate results such as stresses and strains.</p>
<p dir="auto">Writing the function to explicitly export intermediate results clutters the element code, the element API, and the rest of the software.</p>
<p dir="auto"><code>EspyInsideFunction</code>'s approach to this problem is to use metaprogramming to generate two versions of the
function's code</p>
<ol dir="auto">
<li>The fast version, that does nothing to save or export internediate results.  This is then
used in e.g. the finite element solution process.</li>
<li>The exporting version.  In it receives additional parameters
<ul dir="auto">
<li>a vector <code>out</code>, to be filled with the requested results.</li>
<li>a <code>key</code> describing which internal results are wanted and where in <code>out</code> to store which result.
Typicaly, this version of the code is called once the computations have been completed (using the fast version), to extract
the requested results.</li>
</ul>
</li>
</ol>
<p dir="auto">See the <a href="https://philippemaincon.github.io/EspyInsideFunction.jl/" rel="nofollow"><code>documentation</code></a>
A complete usage example can be found in <a href="https://github.com/PhilippeMaincon/EspyInsideFunction.jl/blob/master/test/EspyDemo.jl"><code>EspyDemo.jl</code></a></p>
</article></div>