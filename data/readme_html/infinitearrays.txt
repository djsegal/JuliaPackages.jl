<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-infinitearraysjl" class="anchor" aria-hidden="true" href="#infinitearraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InfiniteArrays.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaArrays/InfiniteArrays.jl/actions"><img src="https://github.com/JuliaArrays/InfiniteArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/InfiniteArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/82b98fcdd96042879fa897fc2d089976723c4fba705abc75b8883dbf599b5d2e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f496e66696e6974654172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/InfiniteArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for representing arrays with infinite dimension sizes, designed to work
with other array types. Infinite arrays are by necessity lazy, and so this
package is closely linked to <a href="https://github.com/JuliaArrays/LazyArrays.jl">LazyArrays.jl</a>.</p>
<p dir="auto">The package currently supports construction, but future versions will include
support for linear algebra operations like matrix multiplication, LU decompositions,
and QR decompositions.</p>
<p dir="auto">Here are some examples of current functionality:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using InfiniteArrays, LinearAlgebra

julia&gt; x = Ones(∞) # infinite vector of all ones
Ones{Float64,1,Tuple{InfiniteArrays.OneToInf{Int64}}} with indices OneToInf():
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 ⋮

julia&gt; cumsum(x) # infinite sum
1.0:1.0:+∞

julia&gt; exp.(-(1:∞)) .+ 2 # broadcasting supported
BroadcastArray{Float64,1,Base.Broadcast.Broadcasted{LazyArrays.LazyArrayStyle{1},Tuple{InfiniteArrays.OneToInf{Int64}},typeof(+),Tuple{BroadcastArray{Float64,1,Base.Broadcast.Broadcasted{LazyArrays.LazyArrayStyle{1},Tuple{InfiniteArrays.OneToInf{Int64}},typeof(exp),Tuple{InfiniteArrays.InfStepRange{Int64,Int64}}}},Int64}}} with indices OneToInf():
 2.3678794411714423
 2.135335283236613
 2.049787068367864
 2.018315638888734
 2.0067379469990856
 2.0024787521766663
 2.0009118819655547
 2.0003354626279024
 2.0001234098040865
 2.0000453999297623
 2.0000167017007904
 2.000006144212353
 2.000002260329407
 2.000000831528719
 2.0000003059023204
 2.0000001125351745
 2.0000000413993773
 2.00000001522998
 2.0000000056027964
 2.0000000020611535
 2.000000000758256
 2.0000000002789466
 2.000000000102619
 2.000000000037751
 2.000000000013888
 2.0000000000051092
 ⋮

julia&gt; Diagonal(1:∞) # combines well with Base arrays
Diagonal{Int64,InfiniteArrays.InfUnitRange{Int64}} with indices OneToInf()×OneToInf():
 1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  …
 ⋅  2  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  3  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  4  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  5  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  6  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  …
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  7  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  8  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  9   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  10   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅  11   ⋅   ⋅   ⋅   ⋅  …
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅  12   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅  13   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  14   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  15
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  …
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  …
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅   ⋅   ⋅  …
 ⋮              ⋮                ⋮                  ⋱

 julia&gt; C = cache(Ones(∞)); C[1] = 3; C # Use cache to make mutable
LazyArrays.CachedArray{Float64,1,Array{Float64,1},Ones{Float64,1,Tuple{InfiniteArrays.InfiniteCardinal{0}}}} with indices OneToInf():
 3.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 1.0
 ⋮"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InfiniteArrays, LinearAlgebra

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Ones</span>(∞) <span class="pl-c"><span class="pl-c">#</span> infinite vector of all ones</span>
Ones{Float64,<span class="pl-c1">1</span>,Tuple{InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 ⋮

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cumsum</span>(x) <span class="pl-c"><span class="pl-c">#</span> infinite sum</span>
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-k">+</span>∞

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>.(<span class="pl-k">-</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>∞)) <span class="pl-k">.+</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> broadcasting supported</span>
BroadcastArray{Float64,<span class="pl-c1">1</span>,Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LazyArrays<span class="pl-k">.</span>LazyArrayStyle{<span class="pl-c1">1</span>},Tuple{InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}},<span class="pl-c1">typeof</span>(<span class="pl-k">+</span>),Tuple{BroadcastArray{Float64,<span class="pl-c1">1</span>,Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LazyArrays<span class="pl-k">.</span>LazyArrayStyle{<span class="pl-c1">1</span>},Tuple{InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}},<span class="pl-c1">typeof</span>(exp),Tuple{InfiniteArrays<span class="pl-k">.</span>InfStepRange{Int64,Int64}}}},Int64}}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">2.3678794411714423</span>
 <span class="pl-c1">2.135335283236613</span>
 <span class="pl-c1">2.049787068367864</span>
 <span class="pl-c1">2.018315638888734</span>
 <span class="pl-c1">2.0067379469990856</span>
 <span class="pl-c1">2.0024787521766663</span>
 <span class="pl-c1">2.0009118819655547</span>
 <span class="pl-c1">2.0003354626279024</span>
 <span class="pl-c1">2.0001234098040865</span>
 <span class="pl-c1">2.0000453999297623</span>
 <span class="pl-c1">2.0000167017007904</span>
 <span class="pl-c1">2.000006144212353</span>
 <span class="pl-c1">2.000002260329407</span>
 <span class="pl-c1">2.000000831528719</span>
 <span class="pl-c1">2.0000003059023204</span>
 <span class="pl-c1">2.0000001125351745</span>
 <span class="pl-c1">2.0000000413993773</span>
 <span class="pl-c1">2.00000001522998</span>
 <span class="pl-c1">2.0000000056027964</span>
 <span class="pl-c1">2.0000000020611535</span>
 <span class="pl-c1">2.000000000758256</span>
 <span class="pl-c1">2.0000000002789466</span>
 <span class="pl-c1">2.000000000102619</span>
 <span class="pl-c1">2.000000000037751</span>
 <span class="pl-c1">2.000000000013888</span>
 <span class="pl-c1">2.0000000000051092</span>
 ⋮

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Diagonal</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>∞) <span class="pl-c"><span class="pl-c">#</span> combines well with Base arrays</span>
Diagonal{Int64,InfiniteArrays<span class="pl-k">.</span>InfUnitRange{Int64}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">×</span><span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 <span class="pl-k">⋅</span>  <span class="pl-c1">2</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">3</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">4</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">5</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">6</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">7</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">8</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">9</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">10</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  <span class="pl-c1">11</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  <span class="pl-c1">12</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  <span class="pl-c1">13</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  <span class="pl-c1">14</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  <span class="pl-c1">15</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>   <span class="pl-k">⋅</span>  …
 ⋮              ⋮                ⋮                  ⋱

 julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">cache</span>(<span class="pl-c1">Ones</span>(∞)); C[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>; C <span class="pl-c"><span class="pl-c">#</span> Use cache to make mutable</span>
LazyArrays<span class="pl-k">.</span>CachedArray{Float64,<span class="pl-c1">1</span>,Array{Float64,<span class="pl-c1">1</span>},Ones{Float64,<span class="pl-c1">1</span>,Tuple{InfiniteArrays<span class="pl-k">.</span>InfiniteCardinal{<span class="pl-c1">0</span>}}}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 ⋮</pre></div>
</article></div>