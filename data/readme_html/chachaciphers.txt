<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chachaciphers" class="anchor" aria-hidden="true" href="#chachaciphers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChaChaCiphers</h1>
<p dir="auto"><a href="https://kernelmethod.github.io/ChaChaCiphers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://kernelmethod.github.io/ChaChaCiphers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/kernelmethod/ChaChaCiphers.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/kernelmethod/ChaChaCiphers.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kernelmethod/ChaChaCiphers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69ae7506ee99624acfdd05db5b3612d55ad9b63efb80a45a1c21c730534add62/68747470733a2f2f636f6465636f762e696f2f67682f6b65726e656c6d6574686f642f436861436861436970686572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/kernelmethod/ChaChaCiphers.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/kernelmethod/ChaChaCiphers.jl">ChaChaCiphers</a> is a
CUDA-compatible, pure-Julia implementation of the ChaCha family of stream
ciphers. This package provides:</p>
<ul dir="auto">
<li>fast, cryptographically-secure, and reproducible random number generators
implementing Julia's <code>AbstractRNG</code> interface for both CPU and GPU, and</li>
<li>implementations of ChaCha stream ciphers such as ChaCha20 that can be used as
building blocks for other cryptographic primitives, such as the
ChaCha20-Poly1305 AEAD algorithm.</li>
</ul>
<p dir="auto">The default stream cipher provided by this package follows <a href="https://cr.yp.to/chacha.html" rel="nofollow">Daniel Bernstein's
original implementation</a> (using a 64-bit counter
and 64-bit nonce), which allows you to generate 1 ZiB of random data before the
nonce must be recycled.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install ChaChaCiphers.jl with <code>julia&gt; ] add ChaChaCiphers</code> in the Julia
REPL, or with <code>using Pkg; Pkg.add("ChaChaCiphers");</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">You can start using ChaChaCiphers.jl for random number generation by creating a
<code>ChaChaStream</code> instance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ChaChaCiphers

julia&gt; rng = ChaChaStream();"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChaChaCiphers

julia<span class="pl-k">&gt;</span> rng <span class="pl-k">=</span> <span class="pl-c1">ChaChaStream</span>();</pre></div>
<p dir="auto">This will create a <code>ChaChaStream</code> with a randomly-generated key. Alternatively,
you can specify a key and pass it in to <code>ChaChaStream</code> to create a reproducible
random number stream</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; key = UInt32.([
          0xe2e39848, 0x70bb974d, 0x845f88b4, 0xb30725e4,
          0x15c309dc, 0x72d545bb, 0x466e99e3, 0x6a759f91
       ]);

julia&gt; rng = ChaChaStream(key);"><pre>julia<span class="pl-k">&gt;</span> key <span class="pl-k">=</span> <span class="pl-c1">UInt32</span>.([
          <span class="pl-c1">0xe2e39848</span>, <span class="pl-c1">0x70bb974d</span>, <span class="pl-c1">0x845f88b4</span>, <span class="pl-c1">0xb30725e4</span>,
          <span class="pl-c1">0x15c309dc</span>, <span class="pl-c1">0x72d545bb</span>, <span class="pl-c1">0x466e99e3</span>, <span class="pl-c1">0x6a759f91</span>
       ]);

julia<span class="pl-k">&gt;</span> rng <span class="pl-k">=</span> <span class="pl-c1">ChaChaStream</span>(key);</pre></div>
<p dir="auto">You can then pass <code>rng</code> into random number generation functions like <code>rand</code> or
<code>randn</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rand(rng, UInt8)
0x18

julia&gt; rand(rng, 1:10, 3)
3-element Vector{Int64}:
 8
 4
 3

julia&gt; randn(rng, 3)
3-element Vector{Float64}:
  0.4899558093907058
 -0.4164526650672216
 -0.864497576500388"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(rng, UInt8)
<span class="pl-c1">0x18</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(rng, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">randn</span>(rng, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.4899558093907058</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4164526650672216</span>
 <span class="pl-k">-</span><span class="pl-c1">0.864497576500388</span></pre></div>
</article></div>