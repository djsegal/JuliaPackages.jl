<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-delayssatoolkit" class="anchor" aria-hidden="true" href="#delayssatoolkit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DelaySSAToolkit</h1>

<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Style</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://palmtree2013.github.io/DelaySSAToolkit.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="doc dev badge" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/palmtree2013/DelaySSAToolkit.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/palmtree2013/DelaySSAToolkit.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="ci badge" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/palmtree2013/DelaySSAToolkit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/482c1c4c8f3b674de6e2d7d3780cd1a64c0ab8973a2668c1c0889c05036bc2b0/68747470733a2f2f636f6465636f762e696f2f67682f70616c6d74726565323031332f44656c6179535341546f6f6c6b69742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="cov badge" data-canonical-src="https://codecov.io/gh/palmtree2013/DelaySSAToolkit.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>

<p dir="auto">DelaySSAToolkit.jl is a tool developed on top of <a href="https://github.com/SciML/JumpProcesses.jl">JumpProcesses.jl</a> in Julia which solves the stochastic simulation <a href="#1">[1]</a> coupled with delays. A portion of this library’s code is taken from the MIT licensed JumpProcesses.jl library.
That code is copyright (c) 2017: Chris Rackauckas. This package contains the following features:</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Various delay stochastic simulation algorithms are provided <a href="#2">[2-6]</a>;</li>
<li>Stochastic delay type is supported;</li>
<li>Multiple delay channels and simultaneous delay reactions are supported;</li>
<li>A cascade of delay reactions is supported (a delay reaction that causes other delay reactions);</li>
<li>Priority queue and dependency graph are integrated for high computational performance;</li>
<li>Ecosystem with <a href="https://github.com/SciML/Catalyst.jl">Catalyst.jl</a>, <a href="https://github.com/SciML/JumpProcesses.jl">JumpProcesses.jl</a>, <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a> and more...</li>
</ul>
<p dir="auto">More information is available in the <a href="https://palmtree2013.github.io/DelaySSAToolkit.jl/dev/" rel="nofollow">documentation</a>. Please feel free to open issues and submit pull requests!</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">DelaySSAToolkit can be installed through the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;DelaySSAToolkit&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DelaySSAToolkit<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To run the following two examples, Catalyst.jl has to be installed by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Catalyst&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Catalyst<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-seir-model" class="anchor" aria-hidden="true" href="#seir-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SEIR model</h3>
<p dir="auto">Check <a href="https://palmtree2013.github.io/DelaySSAToolkit.jl/dev/tutorials/tutorials/" rel="nofollow">this example</a> for more details.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Catalyst
using DelaySSAToolkit
# Model: Markovian part
rn = @reaction_network begin
    ρ, S+I --&gt; E+I
    r, I --&gt; R
end ρ r
u0 = [999,1,0,0] # S, I, E, R
tf = 400.
tspan = (0,tf)
ps = [1e-4, 1e-2]

# Model: non-Markovian part (delay reactions)
τ = 20.
delay_trigger_affect! = function (integrator, rng)
    append!(integrator.de_chan[1], τ) # add a delay time τ to the first delay channel
end
delay_trigger = Dict(1=&gt;delay_trigger_affect!) # the first reaction S+I -&gt; E+I will trigger a delay reaction: E --&gt; I after τ time.  
delay_complete = Dict(1=&gt;[2=&gt;1, 3=&gt;-1]) # E --&gt; I after τ time: transfer from E (minus 1) to I (plus 1) after the completed delay reaction
delay_interrupt = Dict() 
de_chan0 = [[]] # initial condition for delay channel: no on-going delay reactions
delayjumpset = DelayJumpSet(delay_trigger, delay_complete, delay_interrupt)

# convert the ReactionSystem to a JumpSystem
jumpsys = convert(JumpSystem, rn, combinatoric_ratelaws=false)
dprob = DiscreteProblem(jumpsys,u0,tspan,ps)
djprob = DelayJumpProblem(jumpsys, dprob, DelayRejection(), delayjumpset, de_chan0, save_positions=(true,true))
sol = solve(djprob, SSAStepper(),seed=1234)
# ] add Plots
using Plots; theme(:vibrant)
plot(sol, label = [&quot;S&quot; &quot;I&quot; &quot;E&quot; &quot;R&quot;], linewidth = 3, legend = :top, ylabel = &quot;# of individuals&quot;, xlabel = &quot;Time&quot;, fmt=:png)"><pre><span class="pl-k">using</span> Catalyst
<span class="pl-k">using</span> DelaySSAToolkit
<span class="pl-c"><span class="pl-c">#</span> Model: Markovian part</span>
rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
    ρ, S<span class="pl-k">+</span>I <span class="pl-k">--&gt;</span> E<span class="pl-k">+</span>I
    r, I <span class="pl-k">--&gt;</span> R
<span class="pl-k">end</span> ρ r
u0 <span class="pl-k">=</span> [<span class="pl-c1">999</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>] <span class="pl-c"><span class="pl-c">#</span> S, I, E, R</span>
tf <span class="pl-k">=</span> <span class="pl-c1">400.</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0</span>,tf)
ps <span class="pl-k">=</span> [<span class="pl-c1">1e-4</span>, <span class="pl-c1">1e-2</span>]

<span class="pl-c"><span class="pl-c">#</span> Model: non-Markovian part (delay reactions)</span>
τ <span class="pl-k">=</span> <span class="pl-c1">20.</span>
delay_trigger_affect! <span class="pl-k">=</span> <span class="pl-k">function</span> (integrator, rng)
    <span class="pl-c1">append!</span>(integrator<span class="pl-k">.</span>de_chan[<span class="pl-c1">1</span>], τ) <span class="pl-c"><span class="pl-c">#</span> add a delay time τ to the first delay channel</span>
<span class="pl-k">end</span>
delay_trigger <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span>delay_trigger_affect!) <span class="pl-c"><span class="pl-c">#</span> the first reaction S+I -&gt; E+I will trigger a delay reaction: E --&gt; I after τ time.  </span>
delay_complete <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, <span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> E --&gt; I after τ time: transfer from E (minus 1) to I (plus 1) after the completed delay reaction</span>
delay_interrupt <span class="pl-k">=</span> <span class="pl-c1">Dict</span>() 
de_chan0 <span class="pl-k">=</span> [[]] <span class="pl-c"><span class="pl-c">#</span> initial condition for delay channel: no on-going delay reactions</span>
delayjumpset <span class="pl-k">=</span> <span class="pl-c1">DelayJumpSet</span>(delay_trigger, delay_complete, delay_interrupt)

<span class="pl-c"><span class="pl-c">#</span> convert the ReactionSystem to a JumpSystem</span>
jumpsys <span class="pl-k">=</span> <span class="pl-c1">convert</span>(JumpSystem, rn, combinatoric_ratelaws<span class="pl-k">=</span><span class="pl-c1">false</span>)
dprob <span class="pl-k">=</span> <span class="pl-c1">DiscreteProblem</span>(jumpsys,u0,tspan,ps)
djprob <span class="pl-k">=</span> <span class="pl-c1">DelayJumpProblem</span>(jumpsys, dprob, <span class="pl-c1">DelayRejection</span>(), delayjumpset, de_chan0, save_positions<span class="pl-k">=</span>(<span class="pl-c1">true</span>,<span class="pl-c1">true</span>))
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(djprob, <span class="pl-c1">SSAStepper</span>(),seed<span class="pl-k">=</span><span class="pl-c1">1234</span>)
<span class="pl-c"><span class="pl-c">#</span> ] add Plots</span>
<span class="pl-k">using</span> Plots; <span class="pl-c1">theme</span>(<span class="pl-c1">:vibrant</span>)
<span class="pl-c1">plot</span>(sol, label <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>I<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>], linewidth <span class="pl-k">=</span> <span class="pl-c1">3</span>, legend <span class="pl-k">=</span> <span class="pl-c1">:top</span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span># of individuals<span class="pl-pds">"</span></span>, xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Time<span class="pl-pds">"</span></span>, fmt<span class="pl-k">=</span><span class="pl-c1">:png</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/seir.png"><img src="docs/src/assets/seir.png" alt="seir" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-a-bursty-model-7" class="anchor" aria-hidden="true" href="#a-bursty-model-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A bursty model <a href="#7">[7]</a></h3>
<p dir="auto">Check this <a href="https://palmtree2013.github.io/DelaySSAToolkit.jl/dev/tutorials/bursty/" rel="nofollow">example</a> for more details.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DelaySSAToolkit
using Catalyst
# Model: Markovian part
@parameters a b
@variables t
@species X(t)
burst_sup = 30
rxs = [Reaction(a*b^i/(1+b)^(i+1),nothing,[X],nothing,[i]) for i in 1:burst_sup]
rxs = vcat(rxs)
@named rs = ReactionSystem(rxs,t,[X],[a,b])
u0 = [0]
tf = 200.
tspan = (0,tf)
ps = [0.0282, 3.46]
# Model: non-Markovian part
τ = 130.
delay_trigger_affect! = []
for i in 1:burst_sup
    push!(delay_trigger_affect!, function (integrator, rng)
    append!(integrator.de_chan[1], fill(τ, i))
    end)
end
delay_trigger = Dict([Pair(i, delay_trigger_affect![i]) for i in 1:burst_sup])
delay_complete = Dict(1=&gt;[1=&gt;-1])
delay_interrupt = Dict()
de_chan0 = [[]]
delayjumpset = DelayJumpSet(delay_trigger, delay_complete, delay_interrupt)

# convert the ReactionSystem to a JumpSystem
jumpsys = convert(JumpSystem, rs, combinatoric_ratelaws=false)
dprob = DiscreteProblem(jumpsys, u0, tspan, ps)
djprob = DelayJumpProblem(jumpsys, dprob, DelayRejection(), delayjumpset, de_chan0, save_positions=(false,false))
ensprob = EnsembleProblem(djprob)
ens = solve(ensprob, SSAStepper(), EnsembleThreads(), trajectories=10^5)"><pre><span class="pl-k">using</span> DelaySSAToolkit
<span class="pl-k">using</span> Catalyst
<span class="pl-c"><span class="pl-c">#</span> Model: Markovian part</span>
<span class="pl-c1">@parameters</span> a b
<span class="pl-c1">@variables</span> t
<span class="pl-c1">@species</span> <span class="pl-c1">X</span>(t)
burst_sup <span class="pl-k">=</span> <span class="pl-c1">30</span>
rxs <span class="pl-k">=</span> [<span class="pl-c1">Reaction</span>(a<span class="pl-k">*</span>b<span class="pl-k">^</span>i<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>b)<span class="pl-k">^</span>(i<span class="pl-k">+</span><span class="pl-c1">1</span>),<span class="pl-c1">nothing</span>,[X],<span class="pl-c1">nothing</span>,[i]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>burst_sup]
rxs <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(rxs)
<span class="pl-c1">@named</span> rs <span class="pl-k">=</span> <span class="pl-c1">ReactionSystem</span>(rxs,t,[X],[a,b])
u0 <span class="pl-k">=</span> [<span class="pl-c1">0</span>]
tf <span class="pl-k">=</span> <span class="pl-c1">200.</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0</span>,tf)
ps <span class="pl-k">=</span> [<span class="pl-c1">0.0282</span>, <span class="pl-c1">3.46</span>]
<span class="pl-c"><span class="pl-c">#</span> Model: non-Markovian part</span>
τ <span class="pl-k">=</span> <span class="pl-c1">130.</span>
delay_trigger_affect! <span class="pl-k">=</span> []
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>burst_sup
    <span class="pl-c1">push!</span>(delay_trigger_affect!, <span class="pl-k">function</span> (integrator, rng)
    <span class="pl-c1">append!</span>(integrator<span class="pl-k">.</span>de_chan[<span class="pl-c1">1</span>], <span class="pl-c1">fill</span>(τ, i))
    <span class="pl-k">end</span>)
<span class="pl-k">end</span>
delay_trigger <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([<span class="pl-c1">Pair</span>(i, delay_trigger_affect![i]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>burst_sup])
delay_complete <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span>])
delay_interrupt <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
de_chan0 <span class="pl-k">=</span> [[]]
delayjumpset <span class="pl-k">=</span> <span class="pl-c1">DelayJumpSet</span>(delay_trigger, delay_complete, delay_interrupt)

<span class="pl-c"><span class="pl-c">#</span> convert the ReactionSystem to a JumpSystem</span>
jumpsys <span class="pl-k">=</span> <span class="pl-c1">convert</span>(JumpSystem, rs, combinatoric_ratelaws<span class="pl-k">=</span><span class="pl-c1">false</span>)
dprob <span class="pl-k">=</span> <span class="pl-c1">DiscreteProblem</span>(jumpsys, u0, tspan, ps)
djprob <span class="pl-k">=</span> <span class="pl-c1">DelayJumpProblem</span>(jumpsys, dprob, <span class="pl-c1">DelayRejection</span>(), delayjumpset, de_chan0, save_positions<span class="pl-k">=</span>(<span class="pl-c1">false</span>,<span class="pl-c1">false</span>))
ensprob <span class="pl-k">=</span> <span class="pl-c1">EnsembleProblem</span>(djprob)
ens <span class="pl-k">=</span> <span class="pl-c1">solve</span>(ensprob, <span class="pl-c1">SSAStepper</span>(), <span class="pl-c1">EnsembleThreads</span>(), trajectories<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/bursty.svg"><img src="docs/src/assets/bursty.svg" alt="bursty" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-recommendations" class="anchor" aria-hidden="true" href="#recommendations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Recommendations</h2>
<p dir="auto">To solve a <code>DelayJumpProblem</code>, here are few recommendations for good performance:</p>
<ul dir="auto">
<li>
<p dir="auto">Use Catalyst.jl to build your Markovian model (model without delays). For certain algorithms that need dependency graph, it will be auto-generated.</p>
</li>
<li>
<p dir="auto">For a small number of jumps, <code>DelayRejection</code> and <code>DelayDirect</code> will often perform better than other aggregators.</p>
</li>
<li>
<p dir="auto">For large numbers of jumps with sparse chain like structures and similar jump rates, for example continuous time random walks, <code>DelayDirectCR</code> and <code>DelayMNRM</code> often have the best performance.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-other-related-packages" class="anchor" aria-hidden="true" href="#other-related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/kaandocal/FiniteStateProjection.jl">FiniteStateProjection.jl</a>: Finite State Projection algorithms for chemical reaction networks.</li>
<li><a href="https://github.com/augustinas1/MomentClosure.jl">MomentClosure.jl</a>: Tools to generate and study moment equations for any chemical reaction network using various moment closure approximations.</li>
</ul>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@article{fuDelaySSAToolkitJlStochastic2022,
  title = {{{DelaySSAToolkit}}.Jl: Stochastic Simulation of Reaction Systems with Time Delays in {{Julia}}},
  shorttitle = {{{DelaySSAToolkit}}.Jl},
  author = {Fu, Xiaoming and Zhou, Xinyi and Gu, Dongyang and Cao, Zhixing and Grima, Ramon},
  editor = {Valencia, Alfonso},
  year = {2022},
  month = sep,
  journal = {Bioinformatics},
  volume = {38},
  number = {17},
  pages = {4243--4245},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btac472},
  copyright = {All rights reserved},
  langid = {english}
}"><pre class="notranslate"><code>@article{fuDelaySSAToolkitJlStochastic2022,
  title = {{{DelaySSAToolkit}}.Jl: Stochastic Simulation of Reaction Systems with Time Delays in {{Julia}}},
  shorttitle = {{{DelaySSAToolkit}}.Jl},
  author = {Fu, Xiaoming and Zhou, Xinyi and Gu, Dongyang and Cao, Zhixing and Grima, Ramon},
  editor = {Valencia, Alfonso},
  year = {2022},
  month = sep,
  journal = {Bioinformatics},
  volume = {38},
  number = {17},
  pages = {4243--4245},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btac472},
  copyright = {All rights reserved},
  langid = {english}
}
</code></pre></div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto"><a id="user-content-1">[1]</a> Daniel T. Gillespie, "Exact stochastic simulation of coupled chemical reactions", The Journal of Physical Chemistry 1977 81 (25), 2340-2361.
<a href="https://doi.org/10.1021/j100540a008" rel="nofollow">https://doi.org/10.1021/j100540a008</a></p>
<p dir="auto"><a id="user-content-2">[2]</a> Barrio, Manuel, Kevin Burrage, André Leier, and Tianhai Tian. "Oscillatory regulation of Hes1: discrete stochastic delay modelling and simulation." PLoS computational biology 2, no. 9 (2006): e117. <a href="https://doi.org/10.1371/journal.pcbi.0020117" rel="nofollow">https://doi.org/10.1371/journal.pcbi.0020117</a></p>
<p dir="auto"><a id="user-content-3">[3]</a> Xiaodong Cai, "Exact stochastic simulation of coupled chemical reactions with delays", The Journal of Chemical Physics 126, 124108(2007).
<a href="https://aip.scitation.org/doi/10.1063/1.2710253" rel="nofollow">https://doi/10.1063/1.2710253</a></p>
<p dir="auto"><a id="user-content-4">[4]</a> David F. Anderson, "A modified Next Reaction Method for simulating chemical systems with time dependent propensities and delays", The Journal of Chemical Physics 128, 109903(2008).
<a href="https://aip.scitation.org/doi/10.1063/1.2799998" rel="nofollow">https://doi/10.1063/1.2799998</a></p>
<p dir="auto"><a id="user-content-5">[5]</a> Slepoy, Alexander, Aidan P. Thompson, and Steven J. Plimpton. "A constant-time kinetic Monte Carlo algorithm for simulation of large biochemical reaction networks." The journal of chemical physics 128, no. 20 (2008): 05B618. <a href="https://doi.org/10.1063/1.2919546" rel="nofollow">https://doi.org/10.1063/1.2919546</a></p>
<p dir="auto"><a id="user-content-6">[6]</a> Mauch, Sean, and Mark Stalzer. "Efficient formulations for exact stochastic simulation of chemical systems." IEEE/ACM Transactions on Computational Biology and Bioinformatics 8, no. 1 (2009): 27-35. <a href="https://doi.org/10.1109/TCBB.2009.47" rel="nofollow">https://doi.org/10.1109/TCBB.2009.47</a></p>
<p dir="auto"><a id="user-content-7">[7]</a> Qingchao Jiang, Xiaoming Fu, Shifu Yan, Runlai Li, Wenli Du, Zhixing Cao, Feng Qian, Ramon Grima, "Neural network aided approximation and parameter inference of non-Markovian models of gene expression". Nature communications, (2021) 12(1), 1-12. <a href="https://doi.org/10.1038/s41467-021-22919-1" rel="nofollow">https://doi.org/10.1038/s41467-021-22919-1</a></p>
</article></div>