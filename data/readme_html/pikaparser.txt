<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pikaparserjl----parser-library-for-julia" class="anchor" aria-hidden="true" href="#pikaparserjl----parser-library-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PikaParser.jl -- Parser library for Julia</h1>
<table>
<thead>
<tr>
<th align="center">Build status</th>
<th align="center">Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/LCSB-BioCore/PikaParser.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/LCSB-BioCore/PikaParser.jl/workflows/CI/badge.svg?branch=master" alt="CI status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/LCSB-BioCore/PikaParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8cb8da5b982028b52e21a818f44eee6f87f441035e749bf4fb64b0815be158be/68747470733a2f2f636f6465636f762e696f2f67682f4c4353422d42696f436f72652f50696b615061727365722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d41327569376578474948" alt="codecov" data-canonical-src="https://codecov.io/gh/LCSB-BioCore/PikaParser.jl/branch/master/graph/badge.svg?token=A2ui7exGIH" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://lcsb-biocore.github.io/PikaParser.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/82c347c7b50bd81a04b5c6fbc99d91f2a1565fffa213c21f5ed152243e2fccf5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c7565" alt="stable documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue" style="max-width: 100%;"></a> <a href="https://lcsb-biocore.github.io/PikaParser.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/1123e3818ed2e930890286368ee21be1351bdab4db9b1f62406cc6410320b8d5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d6379616e" alt="dev documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-cyan" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">A simple straightforward implementation of PikaParser in pure Julia, following
the specification by Luke A. D. Hutchison (see
<a href="https://github.com/lukehutch/pikaparser">https://github.com/lukehutch/pikaparser</a>).</p>
<p dir="auto">Pika parsers are pretty fast, they are easy to specify, carry the ability to
unambiguously match all PEG grammars including the left-recursive ones, and
provide great mechanisms for parsing error recovery.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import PikaParser as P"><pre><span class="pl-k">import</span> PikaParser <span class="pl-k">as</span> P</pre></div>
<h3 dir="auto"><a id="user-content-building-a-grammar" class="anchor" aria-hidden="true" href="#building-a-grammar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building a grammar</h3>
<p dir="auto">All grammar clauses are subtype of a <code>Clause</code>. The types are indexed by the
labels for your grammar rules -- Julia symbols are a natural choice, but you
are free to use integers, strings, or anything else.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rules = Dict(
    # match a sequence of characters that satisfies `isdigit`
    :digits =&gt; P.some(:digit =&gt; P.satisfy(isdigit)),

    # expression in parentheses
    :parens =&gt; P.seq(
        P.token('('),
        # you can name the rules in nested contexts
        :expr =&gt; P.first(:plusexpr, :minusexpr, :digits, :parens),
        P.token(')'),
    ),

    # some random operators
    :plusexpr =&gt; P.seq(:expr, P.token('+'), :expr),
    :minusexpr =&gt; P.seq(:expr, P.token('-'), :expr),
)

g = P.make_grammar(
    [:expr], # the top-level rule
    P.flatten(rules, Char), # process the rules into a single level and specialize them for crunching Chars
)"><pre>rules <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c"><span class="pl-c">#</span> match a sequence of characters that satisfies `isdigit`</span>
    <span class="pl-c1">:digits</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">some</span>(<span class="pl-c1">:digit</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">satisfy</span>(isdigit)),

    <span class="pl-c"><span class="pl-c">#</span> expression in parentheses</span>
    <span class="pl-c1">:parens</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">seq</span>(
        P<span class="pl-k">.</span><span class="pl-c1">token</span>(<span class="pl-s"><span class="pl-pds">'</span>(<span class="pl-pds">'</span></span>),
        <span class="pl-c"><span class="pl-c">#</span> you can name the rules in nested contexts</span>
        <span class="pl-c1">:expr</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">first</span>(<span class="pl-c1">:plusexpr</span>, <span class="pl-c1">:minusexpr</span>, <span class="pl-c1">:digits</span>, <span class="pl-c1">:parens</span>),
        P<span class="pl-k">.</span><span class="pl-c1">token</span>(<span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>),
    ),

    <span class="pl-c"><span class="pl-c">#</span> some random operators</span>
    <span class="pl-c1">:plusexpr</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">seq</span>(<span class="pl-c1">:expr</span>, P<span class="pl-k">.</span><span class="pl-c1">token</span>(<span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>), <span class="pl-c1">:expr</span>),
    <span class="pl-c1">:minusexpr</span> <span class="pl-k">=&gt;</span> P<span class="pl-k">.</span><span class="pl-c1">seq</span>(<span class="pl-c1">:expr</span>, P<span class="pl-k">.</span><span class="pl-c1">token</span>(<span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>), <span class="pl-c1">:expr</span>),
)

g <span class="pl-k">=</span> P<span class="pl-k">.</span><span class="pl-c1">make_grammar</span>(
    [<span class="pl-c1">:expr</span>], <span class="pl-c"><span class="pl-c">#</span> the top-level rule</span>
    P<span class="pl-k">.</span><span class="pl-c1">flatten</span>(rules, Char), <span class="pl-c"><span class="pl-c">#</span> process the rules into a single level and specialize them for crunching Chars</span>
)</pre></div>
<p dir="auto">The grammar is now prepared for parsing.</p>
<h3 dir="auto"><a id="user-content-parsing-text" class="anchor" aria-hidden="true" href="#parsing-text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parsing text</h3>
<p dir="auto">Parsing is executed simply by running your grammar on any indexable input using
<code>parse</code>.</p>
<p dir="auto">(Notably, PikaParsers require frequent indexing of inputs, and incremental
parsing of streams is thus complicated. To improve the performance, it is also
advisable to lex your input into a vector of more complex tokens, using e.g.
<code>parse_lex</code>.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="input = &quot;12-(34+567-8)&quot;
p = P.parse(g, input)"><pre>input <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>12-(34+567-8)<span class="pl-pds">"</span></span>
p <span class="pl-k">=</span> P<span class="pl-k">.</span><span class="pl-c1">parse</span>(g, input)</pre></div>
<p dir="auto">You can find if an expression was matched at a certain position:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="P.find_match_at!(p, :expr, 1)"><pre>P<span class="pl-k">.</span><span class="pl-c1">find_match_at!</span>(p, <span class="pl-c1">:expr</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">...which returns an index in the match table (if found), such as <code>45</code>.</p>
<p dir="auto">You can have a look at the match: <code>p.matches[45]</code> should return: <code>julia PikaParser.Match(10, 1, 13, 2, 52, 0, 41, 0) </code> where <code>10</code> is the renumbered
rule ID for <code>:expr</code>, <code>1</code> is the starting position of the match in the input,
<code>13</code> is the last position of the match (here, that means the whole input); <code>2</code>
is the option index (in this case, it points to <code>:expr</code> option 2, which is
<code>:minusexpr</code>). The rest of the <code>Match</code> structure is used for internal values
that organize the match tree and submatches.</p>
<h3 dir="auto"><a id="user-content-recovering-parsed-asts" class="anchor" aria-hidden="true" href="#recovering-parsed-asts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Recovering parsed ASTs</h3>
<p dir="auto">You can use <code>traverse_match</code> to recursively walk the parse trees, to produce
ASTs, and translate, interpret or evaluate the expressions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="P.traverse_match(p, P.find_match_at!(p, :expr, 1))"><pre>P<span class="pl-k">.</span><span class="pl-c1">traverse_match</span>(p, P<span class="pl-k">.</span><span class="pl-c1">find_match_at!</span>(p, <span class="pl-c1">:expr</span>, <span class="pl-c1">1</span>))</pre></div>
<p dir="auto">By default, this runs through the whole match tree and transcodes the matches
to Julia <code>Expr</code> AST. In this case, if you pipe the output through
JuliaFormatter, you will get something like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="expr(
    minusexpr(
        expr(digits(digit(&quot;1&quot;), digit(&quot;2&quot;))),
        var&quot;minusexpr-2&quot;(&quot;-&quot;),
        expr(
            parens(
                var&quot;parens-1&quot;(&quot;(&quot;),
                expr(
                    plusexpr(
                        expr(digits(digit(&quot;3&quot;), digit(&quot;4&quot;))),
                        var&quot;plusexpr-2&quot;(&quot;+&quot;),
                        expr(
                            minusexpr(
                                expr(digits(digit(&quot;5&quot;), digit(&quot;6&quot;), digit(&quot;7&quot;))),
                                var&quot;minusexpr-2&quot;(&quot;-&quot;),
                                expr(digits(digit(&quot;8&quot;))),
                            ),
                        ),
                    ),
                ),
                var&quot;parens-3&quot;(&quot;)&quot;),
            ),
        ),
    ),
)"><pre><span class="pl-c1">expr</span>(
    <span class="pl-c1">minusexpr</span>(
        <span class="pl-c1">expr</span>(<span class="pl-c1">digits</span>(<span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>), <span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>))),
        <span class="pl-c1">var"minusexpr-2"</span>(<span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>),
        <span class="pl-c1">expr</span>(
            <span class="pl-c1">parens</span>(
                <span class="pl-c1">var"parens-1"</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>),
                <span class="pl-c1">expr</span>(
                    <span class="pl-c1">plusexpr</span>(
                        <span class="pl-c1">expr</span>(<span class="pl-c1">digits</span>(<span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>), <span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span>))),
                        <span class="pl-c1">var"plusexpr-2"</span>(<span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>),
                        <span class="pl-c1">expr</span>(
                            <span class="pl-c1">minusexpr</span>(
                                <span class="pl-c1">expr</span>(<span class="pl-c1">digits</span>(<span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>), <span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>6<span class="pl-pds">"</span></span>), <span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>7<span class="pl-pds">"</span></span>))),
                                <span class="pl-c1">var"minusexpr-2"</span>(<span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>),
                                <span class="pl-c1">expr</span>(<span class="pl-c1">digits</span>(<span class="pl-c1">digit</span>(<span class="pl-s"><span class="pl-pds">"</span>8<span class="pl-pds">"</span></span>))),
                            ),
                        ),
                    ),
                ),
                <span class="pl-c1">var"parens-3"</span>(<span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>),
            ),
        ),
    ),
)</pre></div>
<p dir="auto">It is straightforward to specify your own method of evaluating the parses by
supplying the matchtree opening and folding functions. For example, you can
evaluate the expression as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="P.traverse_match(p, P.find_match_at!(p, :expr, 1),
    fold = (m, p, subvals) -&gt;
        m.rule == :digits ? parse(Int, m.view) :
        m.rule == :expr ? subvals[1] :
        m.rule == :parens ? subvals[2] :
        m.rule == :plusexpr ? subvals[1] + subvals[3] :
        m.rule == :minusexpr ? subvals[1] - subvals[3] : nothing,
)"><pre>P<span class="pl-k">.</span><span class="pl-c1">traverse_match</span>(p, P<span class="pl-k">.</span><span class="pl-c1">find_match_at!</span>(p, <span class="pl-c1">:expr</span>, <span class="pl-c1">1</span>),
    fold <span class="pl-k">=</span> (m, p, subvals) <span class="pl-k">-&gt;</span>
        m<span class="pl-k">.</span>rule <span class="pl-k">==</span> <span class="pl-c1">:digits</span> <span class="pl-k">?</span> <span class="pl-c1">parse</span>(Int, m<span class="pl-k">.</span>view) <span class="pl-k">:</span>
        m<span class="pl-k">.</span>rule <span class="pl-k">==</span> <span class="pl-c1">:expr</span> <span class="pl-k">?</span> subvals[<span class="pl-c1">1</span>] <span class="pl-k">:</span>
        m<span class="pl-k">.</span>rule <span class="pl-k">==</span> <span class="pl-c1">:parens</span> <span class="pl-k">?</span> subvals[<span class="pl-c1">2</span>] <span class="pl-k">:</span>
        m<span class="pl-k">.</span>rule <span class="pl-k">==</span> <span class="pl-c1">:plusexpr</span> <span class="pl-k">?</span> subvals[<span class="pl-c1">1</span>] <span class="pl-k">+</span> subvals[<span class="pl-c1">3</span>] <span class="pl-k">:</span>
        m<span class="pl-k">.</span>rule <span class="pl-k">==</span> <span class="pl-c1">:minusexpr</span> <span class="pl-k">?</span> subvals[<span class="pl-c1">1</span>] <span class="pl-k">-</span> subvals[<span class="pl-c1">3</span>] <span class="pl-k">:</span> <span class="pl-c1">nothing</span>,
)</pre></div>
<p dir="auto">You should get the expectable result (<code>-581</code>).</p>
<h4 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h4>
<p dir="auto"><code>PikaParser.jl</code> was developed at the Luxembourg Centre for Systems
Biomedicine of the University of Luxembourg
(<a href="https://www.uni.lu/lcsb" rel="nofollow">uni.lu/lcsb</a>).
The development was supported by European Union's Horizon 2020 Programme under
PerMedCoE project (<a href="https://www.permedcoe.eu/" rel="nofollow">permedcoe.eu</a>),
agreement no. 951773.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/unilu.svg"><img src="docs/src/assets/unilu.svg" alt="Uni.lu logo" height="64px" style="max-width: 100%;"></a>   <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/lcsb.svg"><img src="docs/src/assets/lcsb.svg" alt="LCSB logo" height="64px" style="max-width: 100%;"></a>   <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/permedcoe.svg"><img src="docs/src/assets/permedcoe.svg" alt="PerMedCoE logo" height="64px" style="max-width: 100%;"></a></p>
</article></div>