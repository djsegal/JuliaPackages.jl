<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/biglogo-blacktheme.svg?raw=true&amp;sanitize=true"><img src="docs/src/assets/biglogo-blacktheme.svg?raw=true&amp;sanitize=true" alt="" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://biaslab.github.io/rxinfer-website/" rel="nofollow"><img src="https://camo.githubusercontent.com/8d83e4fbc30322b05d2a246afc2af37264eaa01a2e0fd89a046d89afb260f04b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f6666696369616c253230706167652532302d5278496e6665722d626c7565" alt="Official page" data-canonical-src="https://img.shields.io/badge/official%20page%20-RxInfer-blue" style="max-width: 100%;"></a>
<a href="https://biaslab.github.io/RxInfer.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://biaslab.github.io/RxInfer.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://biaslab.github.io/RxInfer.jl/stable/examples/overview/" rel="nofollow"><img src="https://camo.githubusercontent.com/16e06767a6ac5a2a016d80f6b0854e4388f5d403dbe3e3d608e5b9db6cd23848/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6578616d706c65732d5278496e6665722d627269676874677265656e" alt="Examples" data-canonical-src="https://img.shields.io/badge/examples-RxInfer-brightgreen" style="max-width: 100%;"></a>
<a href="https://github.com/biaslab/RxInfer.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/biaslab/RxInfer.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/biaslab/RxInfer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49c260cc892f7258717c4a0b3310e55a5c012ccf994441166fe8312bef05ec8a/68747470733a2f2f636f6465636f762e696f2f67682f626961736c61622f5278496e6665722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/biaslab/RxInfer.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/187598853fc94add4e7706149c5b488493bc5b31b4f268ceb60f3069b5b8b9f4/68747470733a2f2f4a756c696143492e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f522f5278496e6665722e737667" alt="PkgEval" data-canonical-src="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/R/RxInfer.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.21105/joss.05161" rel="nofollow"><img src="https://camo.githubusercontent.com/2a3c8f8cabe58d194bd8679a6e71bc970cbeee07a62240e53e5883da68685e3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f75726e616c2532306f662532304f70656e253230536f75726365253230536f6674776172652d31302e32313130352f6a6f73732e30353136312d637269746963616c" alt="DOI" data-canonical-src="https://img.shields.io/badge/Journal%20of%20Open%20Source%20Software-10.21105/joss.05161-critical" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/501995296" rel="nofollow"><img src="https://camo.githubusercontent.com/503b2e1c766c1c9ac2e7158339a8c0a59d0cd3db618c2b55227e5735a2893a2f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5a656e6f646f2d31302e353238312f7a656e6f646f2e373737343932312d696d706f7274616e74" alt="Zenodo" data-canonical-src="https://img.shields.io/badge/Zenodo-10.5281/zenodo.7774921-important" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h1>
<p dir="auto"><code>RxInfer.jl</code> is a Julia package for automatic Bayesian inference on a factor graph with reactive message passing.</p>
<p dir="auto">Given a probabilistic model, RxInfer allows for an efficient message-passing based Bayesian inference. It uses the model structure to generate an algorithm that consists of a sequence of local computations on a Forney-style factor graph (FFG) representation of the model.</p>
<h3 dir="auto"><a id="user-content-performance-and-scalability" class="anchor" aria-hidden="true" href="#performance-and-scalability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance and scalability</h3>
<p dir="auto">RxInfer.jl has been designed with a focus on efficiency, scalability and maximum performance for running Bayesian inference with message passing. Below is a comparison between RxInfer.jl and Turing.jl on latent state estimation in a linear multi-variate Gaussian state-space model. <a href="https://github.com/TuringLang/Turing.jl">Turing.jl</a> is a state-of-the-art Julia-based general-purpose probabilistic programming package and is capable of running inference in a broader class of models. Still, RxInfer.jl executes the inference task in <a href="https://biaslab.github.io/RxInfer.jl/stable/examples/overview/" rel="nofollow">various models</a> faster and more accurately. RxInfer.jl accomplishes this by taking advantage of any conjugate likelihood-prior pairings in the model, which have analytical posteriors that are known by RxInfer.jl. As a result, in models with conjugate pairings, RxInfer.jl often beats general-purpose probabilistic programming packages in terms of computational load, speed, memory and accuracy. Note, however, that RxInfer.jl also supports non-conjugate inference and is continually improving in order to support a larger class of models.</p>
<table>
<thead>
<tr>
<th align="center">Turing comparison</th>
<th align="center">Scalability performance</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="benchmarks/plots/lgssm_comparison.svg?raw=true&amp;sanitize=true"><img src="benchmarks/plots/lgssm_comparison.svg?raw=true&amp;sanitize=true" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="benchmarks/plots/lgssm_scaling.svg?raw=true&amp;sanitize=true"><img src="benchmarks/plots/lgssm_scaling.svg?raw=true&amp;sanitize=true" alt="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-faster-inference-with-better-results" class="anchor" aria-hidden="true" href="#faster-inference-with-better-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faster inference with better results</h3>
<p dir="auto">RxInfer.jl not only beats generic-purpose Bayesian inference methods in conjugate models, executes faster, and scales better, but also provides more accurate results. Check out the <a href="https://biaslab.github.io/RxInfer.jl/stable/examples/overview/" rel="nofollow">documentation</a> for more examples!</p>
<table>
<thead>
<tr>
<th align="center">Inference with RxInfer</th>
<th align="center">Inference with HMC</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="benchmarks/plots/inference_rxinfer.svg?raw=true&amp;sanitize=true"><img src="benchmarks/plots/inference_rxinfer.svg?raw=true&amp;sanitize=true" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="benchmarks/plots/inference_turing.svg?raw=true&amp;sanitize=true"><img src="benchmarks/plots/inference_turing.svg?raw=true&amp;sanitize=true" alt="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">The benchmark and accuracy experiment, which generated these plots, is available in the <code>benchmarks/</code> folder. Note, that the execution speed and accuracy
of the HMC estimator heavily depends on the choice of hyper-parameters.
In this example, RxInfer executes exact inference consistently and does not depend on any hyper-parameters.</p>
<h3 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h3>
<ul dir="auto">
<li><a href="https://doi.org/10.3390/e23070807" rel="nofollow">Variational Message Passing and Local Constraint Manipulation in Factor Graphs</a> describes theoretical aspects of the underlying Bayesian inference method.</li>
<li><a href="https://doi.org/10.48550/arXiv.2112.13251" rel="nofollow">Reactive Message Passing for Scalable Bayesian Inference</a> describes implementation aspects of the Bayesian inference engine and performs benchmarks and accuracy comparison on various models.</li>
<li><a href="https://doi.org/10.1016/j.simpa.2022.100299" rel="nofollow">A Julia package for reactive variational Bayesian inference</a> - a reference paper for the <code>ReactiveMP.jl</code> package.</li>
</ul>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">Install RxInfer through the Julia package manager:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add RxInfer"><pre class="notranslate"><code>] add RxInfer
</code></pre></div>
<p dir="auto">Optionally, use <code>] test RxInfer</code> to validate the installation by running the test suite.</p>
<h1 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h1>
<p dir="auto">There are examples available to get you started in the <code>examples/</code> folder. Alternatively, preview the same examples in the <a href="https://biaslab.github.io/RxInfer.jl/stable/examples/overview/" rel="nofollow">documentation</a>.</p>
<h3 dir="auto"><a id="user-content-coin-flip-simulation" class="anchor" aria-hidden="true" href="#coin-flip-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Coin flip simulation</h3>
<p dir="auto">Here we show a simple example of how to use RxInfer.jl for Bayesian inference problems. In this example we want to estimate a bias of a coin in a form of a probability distribution in a coin flip simulation.</p>
<p dir="auto">Let's start by creating some dataset. For simplicity in this example we will use static pre-generated dataset. Each sample can be thought of as the outcome of single flip which is either heads or tails (1 or 0). We will assume that our virtual coin is biased, and lands heads up on 75% of the trials (on average).</p>
<p dir="auto">First let's setup our environment by importing all needed packages:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RxInfer, Random"><pre><span class="pl-k">using</span> RxInfer, Random</pre></div>
<p dir="auto">Next, let's define our dataset:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n = 500  # Number of coin flips
p = 0.75 # Bias of a coin

distribution = Bernoulli(p) 
dataset      = float.(rand(Bernoulli(p), n))"><pre>n <span class="pl-k">=</span> <span class="pl-c1">500</span>  <span class="pl-c"><span class="pl-c">#</span> Number of coin flips</span>
p <span class="pl-k">=</span> <span class="pl-c1">0.75</span> <span class="pl-c"><span class="pl-c">#</span> Bias of a coin</span>

distribution <span class="pl-k">=</span> <span class="pl-c1">Bernoulli</span>(p) 
dataset      <span class="pl-k">=</span> <span class="pl-c1">float</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">Bernoulli</span>(p), n))</pre></div>
<h3 dir="auto"><a id="user-content-model-specification" class="anchor" aria-hidden="true" href="#model-specification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model specification</h3>
<p dir="auto">In a Bayesian setting, the next step is to specify our probabilistic model. This amounts to specifying the joint probability of the random variables of the system.</p>
<h4 dir="auto"><a id="user-content-likelihood" class="anchor" aria-hidden="true" href="#likelihood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Likelihood</h4>
<p dir="auto">We will assume that the outcome of each coin flip is governed by the Bernoulli distribution, i.e.</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$$y_i \sim \mathrm{Bernoulli}(\theta)$$</math-renderer>
<p dir="auto">where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$y_i = 1$</math-renderer> represents "heads", <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$y_i = 0$</math-renderer> represents "tails". The underlying probability of the coin landing heads up for a single coin flip is <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$\theta \in [0,1]$</math-renderer>.</p>
<h4 dir="auto">
<a id="user-content-prior" class="anchor" aria-hidden="true" href="#prior"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prior</h4>
<p dir="auto">We will choose the conjugate prior of the Bernoulli likelihood function defined above, namely the beta distribution, i.e.</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$$\theta \sim Beta(a, b)$$</math-renderer>
<p dir="auto">where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$a$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$b$</math-renderer> are the hyperparameters that encode our prior beliefs about the possible values of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$\theta$</math-renderer>. We will assign values to the hyperparameters in a later step.</p>
<h4 dir="auto">
<a id="user-content-joint-probability" class="anchor" aria-hidden="true" href="#joint-probability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Joint probability</h4>
<p dir="auto">The joint probability is given by the multiplication of the likelihood and the prior, i.e.</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$$P(y_{1:N}, \theta) = P(\theta) \prod_{i=1}^N P(y_i | \theta).$$</math-renderer>
<p dir="auto">Now let's see how to specify this model using GraphPPL's package syntax.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# GraphPPL.jl export `@model` macro for model specification
# It accepts a regular Julia function and builds an FFG under the hood
@model function coin_model(n)

    # `datavar` creates data 'inputs' in our model
    # We will pass data later on to these inputs
    # In this example we create a sequence of inputs that accepts Float64
    y = datavar(Float64, n)
    
    # We endow θ parameter of our model with some prior
    θ ~ Beta(2.0, 7.0)
    
    # We assume that outcome of each coin flip 
    # is governed by the Bernoulli distribution
    for i in 1:n
        y[i] ~ Bernoulli(θ)
    end
    
end
"><pre><span class="pl-c"><span class="pl-c">#</span> GraphPPL.jl export `@model` macro for model specification</span>
<span class="pl-c"><span class="pl-c">#</span> It accepts a regular Julia function and builds an FFG under the hood</span>
<span class="pl-c1">@model</span> <span class="pl-k">function</span> <span class="pl-en">coin_model</span>(n)

    <span class="pl-c"><span class="pl-c">#</span> `datavar` creates data 'inputs' in our model</span>
    <span class="pl-c"><span class="pl-c">#</span> We will pass data later on to these inputs</span>
    <span class="pl-c"><span class="pl-c">#</span> In this example we create a sequence of inputs that accepts Float64</span>
    y <span class="pl-k">=</span> <span class="pl-c1">datavar</span>(Float64, n)
    
    <span class="pl-c"><span class="pl-c">#</span> We endow θ parameter of our model with some prior</span>
    θ <span class="pl-k">~</span> <span class="pl-c1">Beta</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">7.0</span>)
    
    <span class="pl-c"><span class="pl-c">#</span> We assume that outcome of each coin flip </span>
    <span class="pl-c"><span class="pl-c">#</span> is governed by the Bernoulli distribution</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        y[i] <span class="pl-k">~</span> <span class="pl-c1">Bernoulli</span>(θ)
    <span class="pl-k">end</span>
    
<span class="pl-k">end</span>
</pre></div>
<p dir="auto">As you can see, <code>RxInfer</code> offers a model specification syntax that resembles closely to the mathematical equations defined above. We use <code>datavar</code> function to create "clamped" variables that take specific values at a later date. <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$\theta \sim \mathrm{Beta}(2.0, 7.0)$</math-renderer> expression creates random variable <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$θ$</math-renderer> and assigns it as an output of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="03517f7de3378a1e0b961a98954e261a">$\mathrm{Beta}$</math-renderer> node in the corresponding FFG.</p>
<h3 dir="auto">
<a id="user-content-inference-specification" class="anchor" aria-hidden="true" href="#inference-specification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inference specification</h3>
<p dir="auto">Once we have defined our model, the next step is to use <code>RxInfer</code> API to infer quantities of interests. To do this we can use a generic <code>inference</code> function from <code>RxInfer.jl</code> that supports static datasets.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="result = inference(
    model = coin_model(length(dataset)),
    data  = (y = dataset, )
)"><pre>result <span class="pl-k">=</span> <span class="pl-c1">inference</span>(
    model <span class="pl-k">=</span> <span class="pl-c1">coin_model</span>(<span class="pl-c1">length</span>(dataset)),
    data  <span class="pl-k">=</span> (y <span class="pl-k">=</span> dataset, )
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/img/coin-flip.svg?raw=true&amp;sanitize=true"><img src="docs/src/assets/img/coin-flip.svg?raw=true&amp;sanitize=true" alt="Coin Flip" title="Coin-Flip readme results" style="max-width: 100%;"></a></p>
<h1 dir="auto">
<a id="user-content-where-to-go-next" class="anchor" aria-hidden="true" href="#where-to-go-next"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Where to go next?</h1>
<p dir="auto">There are a set of <a href="https://biaslab.github.io/RxInfer.jl/stable/examples/overview/" rel="nofollow">examples</a> available in <code>RxInfer</code> repository that demonstrate the more advanced features of the package. Alternatively, you can head to the <a href="https://biaslab.github.io/RxInfer.jl/stable/" rel="nofollow">documentation</a> that provides more detailed information of how to use <code>RxInfer</code> to specify more complex probabilistic models.</p>
<h1 dir="auto">
<a id="user-content-ecosystem" class="anchor" aria-hidden="true" href="#ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ecosystem</h1>
<p dir="auto">The <code>RxInfer</code> framework consists of three <em>core</em> packages developed by BIASlab:</p>
<ul dir="auto">
<li>
<a href="https://github.com/biaslab/ReactiveMP.jl"><code>ReactiveMP.jl</code></a> - the underlying message passing-based inference engine</li>
<li>
<a href="https://github.com/biaslab/GraphPPL.jl"><code>GraphPPL.jl</code></a> - model and constraints specification package</li>
<li>
<a href="https://github.com/biaslab/Rocket.jl"><code>Rocket.jl</code></a> - reactive extensions package for Julia</li>
</ul>
<h1 dir="auto">
<a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h1>
<p dir="auto">MIT License Copyright (c) 2021-2023 BIASlab</p>
</article></div>