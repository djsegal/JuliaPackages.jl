<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-arbfloatsjl" class="anchor" aria-hidden="true" href="#arbfloatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArbFloats.jl</h1>
<h2><a id="user-content-arbnumericsjl-is-the-successor-to-this-package" class="anchor" aria-hidden="true" href="#arbnumericsjl-is-the-successor-to-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/JeffreySarnoff/ArbNumerics.jl">ArbNumerics.jl</a> is the successor to this package</h2>
<h4><a id="user-content-copyright--2016-2019-by-jeffrey-sarnoff--released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2016-2019-by-jeffrey-sarnoff--released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright © 2016-2019 by Jeffrey Sarnoff.  Released under the MIT License.</h4>
<p><a href="https://travis-ci.org/JuliaArbTypes/ArbFloats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2a4613042a5d71e5d4814bc80768e84133e4edf2/68747470733a2f2f7472617669732d63692e6f72672f4a756c696141726254797065732f417262466c6f6174732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArbTypes/ArbFloats.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h3><a id="user-content-arbfloats-calculate-faster-than-bigfloats-at-medium-precisions" class="anchor" aria-hidden="true" href="#arbfloats-calculate-faster-than-bigfloats-at-medium-precisions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArbFloats calculate faster than BigFloats at medium precisions</h3>
<p>These results were obtained using BenchmarkTools.jl on one desktop system.</p>
<ul>
<li>Relative Speed
<ul>
<li>big    ≝   mean(execution time using BigFloats at the given precision)</li>
<li>arb    ≝   mean(execution time using ArbFloats at the given precision)</li>
<li>Relative Speed = Speedup + 1 = round( abs(arb-big) / arb ) + 1</li>
</ul>
</li>
</ul>
<h4><a id="user-content-arbfloat-operations-performed-during-one-bigfloat-operation" class="anchor" aria-hidden="true" href="#arbfloat-operations-performed-during-one-bigfloat-operation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArbFloat operations performed during one BigFloat operation</h4>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center">precisions</th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"></td>
<td align="center">256 bits</td>
<td align="center">1024 bits</td>
<td align="center">2048 bits</td>
<td align="center">3000 bits</td>
</tr>
<tr>
<td align="center"><strong>function</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">add</td>
<td align="center">1</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">multiply</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">3</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">divide</td>
<td align="center">3</td>
<td align="center">8</td>
<td align="center">35</td>
<td align="center">60</td>
</tr>
<tr>
<td align="center">sine</td>
<td align="center">10</td>
<td align="center">12</td>
<td align="center">10</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">arctangent</td>
<td align="center">16</td>
<td align="center">18</td>
<td align="center">64</td>
<td align="center">45</td>
</tr>
<tr>
<td align="center">exponential</td>
<td align="center">18</td>
<td align="center">68</td>
<td align="center">20</td>
<td align="center">24</td>
</tr>
<tr>
<td align="center">logarithm</td>
<td align="center">25</td>
<td align="center">68</td>
<td align="center">140</td>
<td align="center">200</td>
</tr>
<tr>
<td align="center">Riemann zeta</td>
<td align="center">40</td>
<td align="center">100</td>
<td align="center">24</td>
<td align="center">28</td>
</tr>
</tbody>
</table>
<h1></h1>
<h5><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h5>
<p>This package is a faster alternative to BigFloats when working with significands<br>
that do not exceed ~3,500 bits (~1050 digits).</p>
<p>The base C library implements floating point intervals and operations thereupon<br>
which are guaranteed to produce results that enclose the theoretical math value.<br>
While not the package focus, full access to interval-based functions is present.</p>
<p>ArbFloats provides more performant extended precision floating point math<br>
and will show results as accurately as possible by using a precision that<br>
does not misrepresent the information content of the underlying interval.</p>
<p><strong>Version 0.1.00</strong> released 2016-Sep-15.<br>
<strong>Version 0.1.14</strong> released 2016-Dec-23.</p>
<h3><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h3>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add ArbFloats
pkg<span class="pl-k">&gt;</span> build ArbFloats <span class="pl-c"><span class="pl-c">#</span> if you did not see it build</span>
pkg<span class="pl-k">&gt;</span> precompile</pre></div>
<p>If you have not installed Nemo before, you will see compilation notes and maybe warnings.<br>
Ignore them.  This is a good time to walk the dog, go for coffee, or play shuffleboard.<br>
When the prompt comes back,   quit() and restart Julia and <code>julia&gt; using ArbFloats</code><br>
should precompile quickly and work well.  This is what I do, to get things set up:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()
<span class="pl-c"><span class="pl-c">#</span> get current Nemo, if you have an old version of Nemo, do</span>
<span class="pl-c"><span class="pl-c">#</span> Pkg.rm("Nemo"); Pkg.rm("Nemo");</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Nemo<span class="pl-pds">"</span></span>)
<span class="pl-c1">quit</span>()
<span class="pl-c"><span class="pl-c">#</span> get current ArbFloats, if you have an older realization do</span>
<span class="pl-c"><span class="pl-c">#</span> Pkg.rm("ArbFloats");Pkg.rm("ArbFloats");</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ArbFloats<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()
<span class="pl-k">using</span> ArbFloats
<span class="pl-c1">quit</span>()
<span class="pl-k">using</span> ArbFloats
<span class="pl-c1">quit</span>()</pre></div>
<p><strong>It is helpful to add Nemo first, quit, then add ArbFloats and quit</strong>.</p>
<h4><a id="user-content-initializing-arbfloats" class="anchor" aria-hidden="true" href="#initializing-arbfloats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initializing ArbFloats</h4>
<p>ArbFloats can be initialized from Integers, Floats, Rationals, and Strings</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ArbFloats

<span class="pl-c1">precision</span>(ArbFloat) <span class="pl-c"><span class="pl-c">#</span> show the current default precision</span>
<span class="pl-c"><span class="pl-c">#</span> 116</span>
<span class="pl-c1">setprecision</span>(ArbFloat, <span class="pl-c1">200</span>) <span class="pl-c"><span class="pl-c">#</span> change the current default precision</span>
<span class="pl-c"><span class="pl-c">#</span> 200</span>
<span class="pl-k">const</span> Arb200 <span class="pl-k">=</span> ArbFloat{<span class="pl-c1">200</span>} Arb200 <span class="pl-c"><span class="pl-c">#</span> A Good Idea, and shaves cycles in use</span>

a <span class="pl-k">=</span> <span class="pl-c1">ArbFloat</span>(<span class="pl-c1">12</span>);          <span class="pl-c"><span class="pl-c">#</span> use the default precision, at run time</span>
b <span class="pl-k">=</span> <span class="pl-c1">@ArbFloat</span>(<span class="pl-c1">12</span>);         <span class="pl-c"><span class="pl-c">#</span> use the default precision, at compile time</span>
c <span class="pl-k">=</span> <span class="pl-c1">ArbFloat</span><span class="pl-c1">{200}</span>(golden); <span class="pl-c"><span class="pl-c">#</span> use specified precision, at run time</span>
d <span class="pl-k">=</span> <span class="pl-c1">@ArbFloat</span>(<span class="pl-c1">200</span>,golden); <span class="pl-c"><span class="pl-c">#</span> use specified precision, at compile time</span>
e <span class="pl-k">=</span> <span class="pl-c1">Arb200</span>(<span class="pl-c1">12</span>);            <span class="pl-c"><span class="pl-c">#</span> use named precision, assuming prior type const</span>

<span class="pl-c"><span class="pl-c">#</span> setprecision(ArbFloat, 53+0); # akin to setprecision(BigFloat, 53)</span>
<span class="pl-c"><span class="pl-c">#</span> to see elementary function evaluations rounded to (at least) N significand bits, </span>
<span class="pl-c"><span class="pl-c">#</span>   using setprecision(ArbFloat, N+10) is recommended and at least N+7 is suggested</span>
<span class="pl-c"><span class="pl-c">#</span>   setprecisionAugmented(ArbFloat, N) does the N+10 automatically</span>
<span class="pl-c"><span class="pl-c">#</span>   setprecisionAugmented(ArbFloat, N, d) uses N+d for the precision</span>

<span class="pl-c"><span class="pl-c">#=</span>=</span>
<span class="pl-c">          remember to do this        and           to avoid this</span>
<span class="pl-c">=<span class="pl-c">=#</span></span>
    goodValue <span class="pl-k">=</span> <span class="pl-c1">@ArbFloat</span>(<span class="pl-c1">1.2345</span>);        wrongValue <span class="pl-k">=</span> <span class="pl-c1">ArbFloat</span>(<span class="pl-c1">1.2345</span>);
<span class="pl-c"><span class="pl-c">#</span>       1.234500000000000000                   1.2344999999999999307</span>
    <span class="pl-c1">ArbFloat</span>(<span class="pl-c1">12345</span>)<span class="pl-k">/</span><span class="pl-c1">ArbFloat</span>(<span class="pl-c1">1000</span>);       <span class="pl-c1">ArbFloat</span>(<span class="pl-c1">12.345</span>)<span class="pl-k">/</span><span class="pl-c1">ArbFloat</span>(<span class="pl-c1">10</span>)
<span class="pl-c"><span class="pl-c">#</span>       1.234500000000000000                   1.234500000000000064</span>

<span class="pl-c1">@ArbFloat</span>(<span class="pl-c1">1.2345</span>) <span class="pl-k">==</span> <span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2345<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ArbFloats

<span class="pl-c1">setprecision</span>(ArbFloat, <span class="pl-c1">80</span>)

exp1 <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">ArbFloat</span>(<span class="pl-c1">1</span>))
<span class="pl-c"><span class="pl-c">#</span> 2.71828182845904523536029..</span>

<span class="pl-c1">stringsmall</span>(exp1),<span class="pl-c1">stringcompact</span>(exp1),<span class="pl-c1">string</span>(exp1),<span class="pl-c1">stringall</span>(exp1)
(<span class="pl-s"><span class="pl-pds">"</span>2.7182818<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2.71828182845905<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2.71828182845904523536029<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2.71828182845904523536029<span class="pl-pds">"</span></span>)
<span class="pl-c1">showall_pm</span>(exp1)
<span class="pl-c"><span class="pl-c">#</span> 2.718281828459045235360286±3.3216471534462276e-24</span>
<span class="pl-c1">bounds</span>(exp1)
<span class="pl-c"><span class="pl-c">#</span> ( 2.71828182845904523536028,  2.718281828459045235360293 )</span>

<span class="pl-c1">setprecision</span>(ArbFloat, <span class="pl-c1">116</span>); <span class="pl-c"><span class="pl-c">#</span> the initial default precision</span>

fuzzed_e <span class="pl-k">=</span> <span class="pl-c1">tan</span>(<span class="pl-c1">atanh</span>(<span class="pl-c1">tanh</span>(<span class="pl-c1">atan</span>(<span class="pl-c1">exp</span>(<span class="pl-c1">one</span>(ArbFloat))))))
<span class="pl-c"><span class="pl-c">#</span> 2.718281828459045235360287</span>
<span class="pl-c1">showall</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> 2.7182818284590452353602874713527</span>

<span class="pl-c1">bounds</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> ( 2.718281828459045235360287,</span>
<span class="pl-c"><span class="pl-c">#</span>   2.718281828459045235360287 )</span>
<span class="pl-c"><span class="pl-c">#</span> they are not really the same ...    </span>
lo, hi <span class="pl-k">=</span> <span class="pl-c1">bounds</span>(fuzzed_e);
<span class="pl-c1">showall</span>(lo,hi)
<span class="pl-c"><span class="pl-c">#</span> ( 2.7182818284590452353602874713526543,</span>
    <span class="pl-c1">2.7182818284590452353602874713526701</span> )
    
<span class="pl-c"><span class="pl-c">#</span> use values of the same precision with interval operators</span>

<span class="pl-c1">precision</span>(exp1), <span class="pl-c1">precision</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> 80, 116</span>
<span class="pl-c1">overlap</span>(exp1, fuzzed_e), <span class="pl-c1">contains</span>(fuzzed_e, exp1), <span class="pl-c1">iscontainedby</span>(exp1, fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> ( true. false, false )</span>
exp1 <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">ArbFloat</span>(<span class="pl-c1">1.0</span>))
<span class="pl-c1">precision</span>(exp1), <span class="pl-c1">precision</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> (116, 116)</span>
<span class="pl-c1">overlap</span>(exp1, fuzzed_e), <span class="pl-c1">contains</span>(fuzzed_e, exp1), <span class="pl-c1">iscontainedby</span>(exp1, fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> ( true. true, true )</span>


<span class="pl-c1">smartstring</span>(exp1)
<span class="pl-c"><span class="pl-c">#</span> "2.71828182845904523536028747135266+"</span>
<span class="pl-c1">smartstring</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> "2.7182818284590452353602874713527-"</span></pre></div>
<p>####Float32 and ArbFloat32</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> ArbFloat32 <span class="pl-k">=</span> ArbFloat{<span class="pl-c1">24</span>} <span class="pl-c"><span class="pl-c">#</span> Float32 has 24 significand bits</span>
<span class="pl-c1">setprecision</span>(ArbFloat, <span class="pl-c1">24</span>) <span class="pl-c"><span class="pl-c">#</span> it is good to keep precisions in concert</span>

fpOneThird <span class="pl-k">=</span> <span class="pl-c1">1.0</span>f0 <span class="pl-k">/</span> <span class="pl-c1">3.0</span>f0
<span class="pl-c"><span class="pl-c">#</span> 0.3333334f0</span>

oneThird <span class="pl-k">=</span> <span class="pl-c1">ArbFloat32</span>(<span class="pl-c1">1</span>) <span class="pl-k">/</span> <span class="pl-c1">ArbFloat32</span>(<span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> 0.3333333..s</span>
<span class="pl-c1">show_pm</span>(oneThird)
<span class="pl-c"><span class="pl-c">#</span> 0.33333331±2.98023223877e-8</span>


<span class="pl-c"><span class="pl-c">#</span> gamma(1/3) is 2.6789_3853_4707_7476_3365_5692_9409_7467_7644~</span>
<span class="pl-c1">gamma</span>( fpOneThird )
<span class="pl-c"><span class="pl-c">#</span> 2.6789_384f0</span>

gamma_oneThird <span class="pl-k">=</span> <span class="pl-c1">gamma</span>( oneThird )
<span class="pl-c"><span class="pl-c">#</span> 2.6789_4..</span>
<span class="pl-c1">bounds</span>(gamma_oneThird)
<span class="pl-c"><span class="pl-c">#</span> (2.6789_362, 2.6789_401)</span>
<span class="pl-c1">showsmall</span>(gamma_oneThird)
<span class="pl-c"><span class="pl-c">#</span> 2.67894</span></pre></div>
<h4><a id="user-content-display" class="anchor" aria-hidden="true" href="#display"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Display</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> e.g. stringsmall &amp; showsmall, stringsmall_pm &amp; showsmall_pm</span>
<span class="pl-c"><span class="pl-c">#</span> {string,show}{small, compact, all, small_pm, compact_pm, all_pm}</span>
<span class="pl-c1">stringsmall</span>(oneThird), <span class="pl-c1">stringsmall_pm</span>(oneThird)
(<span class="pl-s"><span class="pl-pds">"</span>0.3333333<span class="pl-pds">"</span></span>,  <span class="pl-s"><span class="pl-pds">"</span>0.33333331±2.98e-8<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> show works with vectors and tuples and varargs of ArbFloat</span>
<span class="pl-c1">showsmall</span>([oneThird, oneThird]);<span class="pl-c1">showsmall</span>((oneThird,oneThird));<span class="pl-c1">showsmall</span>(oneThird,oneThird)
<span class="pl-c"><span class="pl-c">#</span> [ 0.3333333,      ( 0.3333333,      ( 0.3333333,</span>
<span class="pl-c"><span class="pl-c">#</span>   0.3333333 ]       0.3333333 )       0.3333333 )</span>


<span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>Inf<span class="pl-pds">"</span></span>), <span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>-Inf<span class="pl-pds">"</span></span>), <span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>NaN<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> +Inf, -Inf, NaN</span>
<span class="pl-c1">one</span>(ArbFloat)<span class="pl-k">/</span><span class="pl-c1">ArbFloat</span>(<span class="pl-c1">Inf</span>), <span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>Inf<span class="pl-pds">"</span></span>)<span class="pl-k">+</span><span class="pl-c1">ArbFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>-Inf<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> 0, NaN</span>

<span class="pl-c1">showmart</span>(exp1)
<span class="pl-c"><span class="pl-c">#</span> 2.71828182845904523536028747135266+</span>
<span class="pl-c1">showsmart</span>(fuzzed_e)
<span class="pl-c"><span class="pl-c">#</span> 2.7182818284590452353602874713527-</span>

pi66bits<span class="pl-k">=</span><span class="pl-c1">ArbFloat</span><span class="pl-c1">{66}</span>(pi)
<span class="pl-c"><span class="pl-c">#</span> 3.141592653589793238</span>
<span class="pl-c1">showpretty</span>(<span class="pl-c1">ArbFloat</span><span class="pl-c1">{66}</span>(pi))
<span class="pl-c"><span class="pl-c">#</span> 3.141_592_653_589_793_238</span>

pi67bits<span class="pl-k">=</span><span class="pl-c1">ArbFloat</span><span class="pl-c1">{67}</span>(pi)
<span class="pl-c"><span class="pl-c">#</span> 3.1415926535897932385</span>
<span class="pl-c1">showpretty</span>(<span class="pl-c1">ArbFloat</span><span class="pl-c1">{67}</span>(pi),<span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> 3.14159_26535_89793_2385</span></pre></div>
<h4><a id="user-content-non-strict-total-ordering" class="anchor" aria-hidden="true" href="#non-strict-total-ordering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Non-Strict Total Ordering</h4>
<div class="highlight highlight-source-julia"><pre>thinner <span class="pl-k">=</span> <span class="pl-c1">midpoint_radius</span>( <span class="pl-c1">1000.0</span>, <span class="pl-c1">1.0</span>);
thicker <span class="pl-k">=</span> <span class="pl-c1">midpoint_radius</span>( <span class="pl-s"><span class="pl-pds">"</span>1000.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>2.0<span class="pl-pds">"</span></span>);

thicker≻ thinner, thinner  ⪯  thicker, <span class="pl-c1">succ</span>(thicker, thinner),
<span class="pl-c"><span class="pl-c">#</span> (true, true, true)</span>
thicker  ⪯  thinner, thinner ≻  thicker, <span class="pl-c1">preceq</span>(thicker, thinner)
<span class="pl-c"><span class="pl-c">#</span> (false, false, false)</span>
<span class="pl-c1">succ</span>(thicker, thinner), <span class="pl-c1">succ</span>(thinner, thicker)
<span class="pl-c"><span class="pl-c">#</span> false, true</span>
</pre></div>
<h3><a id="user-content-compatible-packages" class="anchor" aria-hidden="true" href="#compatible-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatible Packages</h3>
<p><strong>using ArbFloats # goes anywhere</strong><br>
DifferentialEquations, DualNumbers, ForwardDiff, HyperDualNumbers, MappedArrays,<br>
Plots, Polynomials, Quaternions, TaylorSeries, others</p>
<p><em>partially compatible</em><br>
Roots (accepts ArbFloats, results are Float64)</p>
<p>If you have a package that accepts AbstractFloats or Reals and does not “just work”<br>
with ArbFloats, please note it as an issue. If you have a package that works well<br>
with ArbFloats, do let us know.</p>
<h3><a id="user-content-more-information" class="anchor" aria-hidden="true" href="#more-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Information</h3>
<p>Please the notes directory for more information about ArbFloats.</p>
<h4><a id="user-content-hewing-to-the-sensible" class="anchor" aria-hidden="true" href="#hewing-to-the-sensible"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hewing to the sensible</h4>
<p>Arb is happiest, and performs most admirably using intervals where the radius is<br>
a very small portion of the working precision. Ideally, the radius is kept within<br>
8*eps(midpoint).  With Arb, you are likely ok up to twice that.  And should your<br>
approach generate overly wide intervals, then it is worth trying an algorithm<br>
that is designed to visit each extended precision variable less often.
(prefer projection techniques to recursively applicative transforms), perhaps run<br>
at higher working precision, is worth trying.  A toy version is likely to behave<br>
in the same manner as your the more refined software.  It is worth the look.</p>
<p>The intervals underlying this package are kept by Arb as an extended precision<br>
<code>midpoint</code> and a <code>radius</code> (halfwidth) as a float of low precision &amp; high range.<br>
The radius is stored as a 30 bit significand and a ~60 bit exponent.  The radius<br>
is like a Float32 (24bit significand) value with a much larger exponent.</p>
<h4><a id="user-content-warp-and-weft" class="anchor" aria-hidden="true" href="#warp-and-weft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warp and Weft</h4>
<p>One way of think of these midpoint+radius intervals is as cereal and milk.<br>
The cereal  sources nourishment and the milk makes it easy to digest.<br>
The midpoint associates as a valuation, and the radius engages as a capacity-<br>
limiting store of value. The more extensive the radius, the more spread out,<br>
dilute is any value stored.  Value concentrates as the midpoint magnitude<br>
increases relative to the radius.</p>
<p>Another is to use the pairing of midpoint with its immediate locale (diameter)<br>
as a semantic descriptor and quantify the semantics.  The veridical presentment<br>
of floating point quantities is one of the primary motivators for this package.<br>
And there is software which moves from two floats, <code>midpoint</code>+<code>radius</code>, through<br>
the active preternatural simplicty of most informing whilst least misleading,<br>
into the floating point value that best reflects <code>the crispness of its novelty</code>.</p>
<h4><a id="user-content-rough-spots" class="anchor" aria-hidden="true" href="#rough-spots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rough Spots</h4>
<p>This package does whatever it may through the Arb C library.  On rare occasion,<br>
this may give a result which makes Arb sense yet appears counter-intuitive here.<br>
One example is Arb's ability to work with and to return projective infinity (±Inf).<br>
This package now does now provide a means of working with Arb's complex intervals,<br>
nor is their access to any of Arb's matrix routines (det, inv, lu, maybe charpoly).</p>
<p>ArbFloats do not lend themselves easily to higher matrix algebra (svd, eigenvals).<br>
If someone implements one of the known good algorithms for getting the eigenvalues<br>
or the svd of a matrix with interval-valued entries, this package is at the ready.</p>
<p><em>We use some of Nemo's libraries.  Nemo is very large, and this work needs less than 1/8th of it.</em></p>
<h3><a id="user-content-about-arb-and-using-nemos-libraries" class="anchor" aria-hidden="true" href="#about-arb-and-using-nemos-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About Arb and using Nemo's libraries</h3>
<p>This work is constructed atop a state-of-the-art C library for working with<br>
<em>midpoint ± radius</em> intervals, <code>Arb</code>. Arb is designed and written by Fredrik<br>
Johansson, who graciously allows Julia to use it under the MIT License.</p>
<p>The C libraries that this package accesses are some of the shared libraries that<br>
Nemo.jl requires and builds; and, with permission, I call them directly.</p>
<p>It is a useful fiction to think of <code>ArbFloats</code> as Arb values with a zero radius<br>
– and sometimes they are. When an ArbFloat has a nonzero radius, the user sees<br>
only those digits that remain after rounding the ArbFloat to subsume the radius.</p>
<h3><a id="user-content-appropriateness" class="anchor" aria-hidden="true" href="#appropriateness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Appropriateness</h3>
<p>This package is appropriate to use for extending the precision of floating point<br>
computations from 64 bits [~17 digits] up to 3,250 bits [~1000 digits].<br>
While Testing on many different hosts is needed to characterize a most performant<br>
precision range, I have found working with 800 bits (~240 digits) a welcome change.</p>
<h4><a id="user-content-conceptual-background" class="anchor" aria-hidden="true" href="#conceptual-background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conceptual Background</h4>
<p><code>Transparency</code>: a desirable quality that may obtain in the presentation of<br>
numerical quantity. Where transparency exists, it may well not persist.<br>
A diminution of transparency increases <code>opacity</code>, and vice versa. Presentation<br>
of a floating point value either evinces transparency or furthers opacity.<br>
With transparent values, ‘looking at a value’ is ‘looking through to see the<br>
knowable value’. With opaque values, ‘looking at a value’ is ‘looking away from’<br>
that. And it is that nonresponsive, nonparticipative engagement of cognitive<br>
attention that is the opaqueness underlying opacity.</p>
<p>Presented with a transparent floating point value, the perceiver is become<br>
best informed. There is no other rendition of that floating point realization<br>
which is intrinsically more informing and none which relays the value of that<br>
floating point realization more accurately – none with fewer digits, none with<br>
more digits, none of greater magnitude, none of lesser magnitude.</p>
<p>An <code>ArbFloat</code> is an extended precision float architected to evince transparency.<br>
It informs without leading or misleading. An ArbFloat, when viewed, appears as<br>
an extended precision floating point value.  When any of the exported arithmetic,<br>
elementary or special functions is applied to an ArbFloat, the value transforms<br>
as an extended precision floating point interval.</p>
<h2><a id="user-content-exports-including-re-exports" class="anchor" aria-hidden="true" href="#exports-including-re-exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exports (including re-exports)</h2>
<table>
<thead>
<tr>
<th>used with ArbFloat</th>
<th>nature</th>
</tr>
</thead>
<tbody>
<tr>
<td>precision, setprecision</td>
<td>as with BigFloat</td>
</tr>
<tr>
<td>Arb values are intervals</td>
<td>nature</td>
</tr>
<tr>
<td>midpoint, radius, lowerbound, upperbound, bounds,</td>
<td>Arb’s constituent parts</td>
</tr>
<tr>
<td>isexact, notexact,</td>
<td>float-y or interval-y</td>
</tr>
<tr>
<td>overlap, donotoverlap,</td>
<td>of interval suborder</td>
</tr>
<tr>
<td>contains, iscontainedby, doesnotcontain, isnotcontainedby,</td>
<td>of interval partial order</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>ArbFloat attributes</th>
<th>nature</th>
</tr>
</thead>
<tbody>
<tr>
<td>isnan, isinf, isfinite, issubnormal, isinteger, notinteger,</td>
<td>floatingpoint predicates</td>
</tr>
<tr>
<td>iszero, notzero, nonzero, isone, notone,</td>
<td>number predicates</td>
</tr>
<tr>
<td>ispositive, notpositive, isnegative, notnegative,</td>
<td>numerical predicates</td>
</tr>
</tbody>
</table>
<blockquote>
<p>copy, deepcopy, zero, one, eps, epsilon, isequal, notequal, isless,<br>
(==), (!=), (&lt;), (&lt;=), (&gt;=), (&gt;),  #  Arb, strict:  a &lt; b iff upperbound(a) &lt; lowerbound(b)<br>
(≃), (≄), (≺), (⪯), (≻), (⪰),    #  non-strict total ordering  (best for convergence tests)<br>
simeq, nsime, prec, preceq, succ, succeq, # names matching binops above<br>
approxeq, ≊, min, max, minmax,</p>
</blockquote>
<blockquote>
<p>signbit, sign, flipsign, copysign, abs, (+),(-),(*),(/),(),(%),(^), inv,<br>
sqrt, invsqrt, hypot, factorial, doublefactorial, risingfactorial, trunc,<br>
round, ceil, floor, trunc, fld, cld, fmod, modf,
integerpart, fractionalpart,</p>
</blockquote>
<blockquote>
<p>pow, root, exp, expm1, log, log1p, log2, log10, logbase, sin, cos, sincos,<br>
sincospi, tan, csc, sec, cot, asin, acos, atan, atan2, sinh, cosh, sinhcosh,<br>
tanh, csch, sech, coth, asinh, acosh, atanh,</p>
</blockquote>
<blockquote>
<p>gamma, lgamma, digamma, sinc, zeta, polylog, agm</p>
</blockquote>
<blockquote>
<p>string, stringsmall, stringlarge, stringall,
smartstring, smartvalue,
smartmodf, decimalpart, # both use smartvalue(fractionalpart)</p>
</blockquote>
<h4><a id="user-content-credits-references-thanks" class="anchor" aria-hidden="true" href="#credits-references-thanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits, References, Thanks</h4>
<p>This work relies on Fredrik Johansson's Arb software, using parts of that
extensive C library.<br>
He has been greatly helpful. The Arb library documentation is
<a href="http://fredrikj.net/arb/" rel="nofollow">here</a>.</p>
<p>Much of the early development was well informed from study of Nemo.jl, a number
theory and<br>
numerical algebra package that incorporates some of Arb's capabilities along
with many others.<br>
William Hart and Tommy Hofmann have been gracious with their work and generous
with their time.</p>
<p>=====</p>
<p>Many have helped me.  Some with their prior acts of good will.<br>
Others by explaining subtleties, sharing exemplary Julian ways,<br>
suggesting improvements, providing fixes, or doing testing.<br>
The list of names outgrew this space, see <a href="https://github.com/JuliaArbTypes/ArbFloats.jl/blob/master/notes/help_along_the_way.md">this</a> for more.</p>
<p>Please alert me to any issues, miscues or inartful expressions.</p>
<p>If you find something to be an issue for you, submit it as an <a href="https://github.com/JuliaArbTypes/ArbFloats.jl/issues">issue</a>.<br>
If you write something that improves this for others, submit it as a <a href="https://github.com/JuliaArbTypes/ArbFloats.jl/pulls">pull request</a>.</p>
</article></div>