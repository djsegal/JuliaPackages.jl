<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sparsetimeseries" class="anchor" aria-hidden="true" href="#sparsetimeseries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SparseTimeSeries</h1>
<p><a href="https://travis-ci.com/jonalm/SparseTimeSeries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/16b599a541d76bada55b9c3fc5606b9a11d44663/68747470733a2f2f6170692e7472617669732d63692e636f6d2f6a6f6e616c6d2f53706172736554696d655365726965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.com/jonalm/SparseTimeSeries.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jonalm/SparseTimeSeries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c7e17c9905d3a3fbd06cd3f284e393f4c35bd0fd/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6e616c6d2f53706172736554696d655365726965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jonalm/SparseTimeSeries.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides some functionality to handle sparse time series, i.e. series with either {<code>tag, timestamp, value</code>} triplets or {<code>timestamp, value</code>} pairs which typically represents state changes in an arbitrary system. The (potentially tagged) value is considered to be <em>valid</em> in the time interval from the recorded timestamp until a new value (with the same tag) is present. In other words, <em>Forward fill</em> is the natural imputation strategy.</p>
<p>If you are looking for general time series functionality, check out the much more mature
<a href="https://github.com/JuliaStats/TimeSeries.jl">TimeSeries.jl</a> package first.</p>
<h2><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Note</h2>
<p>The package supports</p>
<ul>
<li><code>value</code> of arbitrary type</li>
<li>any <code>timestamp</code> which can be sorted</li>
<li><code>tag</code> of <code>Symbol</code> type</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> y1 <span class="pl-k">=</span> <span class="pl-c1">EventSeries</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0</span>, step<span class="pl-k">=</span><span class="pl-c1">0.1</span>, length<span class="pl-k">=</span><span class="pl-c1">5</span>) <span class="pl-k">|&gt;</span> collect, <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">5</span>)) <span class="pl-c"><span class="pl-c">#</span> create an EventSeries from a timestamps and a value array</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element EventSeries{Float64,Array{Float64,<span class="pl-c1">1</span>},Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 {timest.: <span class="pl-c1">0.0</span>, value<span class="pl-k">:</span> <span class="pl-c1">53</span>}
 {timest.: <span class="pl-c1">0.1</span>, value<span class="pl-k">:</span> <span class="pl-c1">23</span>}
 {timest.: <span class="pl-c1">0.2</span>, value<span class="pl-k">:</span> <span class="pl-c1">37</span>}
 {timest.: <span class="pl-c1">0.3</span>, value<span class="pl-k">:</span> <span class="pl-c1">61</span>}
 {timest.: <span class="pl-c1">0.4</span>, value<span class="pl-k">:</span> <span class="pl-c1">34</span>}

julia<span class="pl-k">&gt;</span> y2 <span class="pl-k">=</span> <span class="pl-c1">EventSeries</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0</span>, step<span class="pl-k">=</span><span class="pl-c1">0.05</span>, length<span class="pl-k">=</span><span class="pl-c1">6</span>), [<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>]) <span class="pl-c"><span class="pl-c">#</span> removes repeated values by default</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element EventSeries{Float64,Array{Float64,<span class="pl-c1">1</span>},Char,Array{Char,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 {timest.: <span class="pl-c1">0.0</span>, value<span class="pl-k">:</span> A}
 {timest.: <span class="pl-c1">0.15</span>, value<span class="pl-k">:</span> B}
 {timest.: <span class="pl-c1">0.25</span>, value<span class="pl-k">:</span> C}


julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">TaggedEventSeries</span>()
julia<span class="pl-k">&gt;</span> y[<span class="pl-c1">:Rand</span>] <span class="pl-k">=</span> y1 <span class="pl-c"><span class="pl-c">#</span> assign EventSeries by setindex!</span>
julia<span class="pl-k">&gt;</span> y[<span class="pl-c1">:Char</span>] <span class="pl-k">=</span> y2
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(y, <span class="pl-c1">TaggedEvent</span>(<span class="pl-c1">:Int</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">123</span>)) <span class="pl-c"><span class="pl-c">#</span> push value to new tag</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(y, <span class="pl-c1">TaggedEvent</span>(<span class="pl-c1">:Char</span>, <span class="pl-c1">10.0</span>, <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span>)) <span class="pl-c"><span class="pl-c">#</span> push new value (more recent) to existing tag</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">tagged_events</span>(y) <span class="pl-c"><span class="pl-c">#</span> sorts all events according to time</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{TaggedEvent{Float64,U} <span class="pl-k">where</span> U,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 {tag<span class="pl-k">:</span> Char, timest.: <span class="pl-c1">0.0</span>, value<span class="pl-k">:</span> A}
 {tag<span class="pl-k">:</span> Rand, timest.: <span class="pl-c1">0.0</span>, value<span class="pl-k">:</span> <span class="pl-c1">53</span>}
 {tag<span class="pl-k">:</span> Rand, timest.: <span class="pl-c1">0.1</span>, value<span class="pl-k">:</span> <span class="pl-c1">23</span>}
 {tag<span class="pl-k">:</span> Char, timest.: <span class="pl-c1">0.15</span>, value<span class="pl-k">:</span> B}
 {tag<span class="pl-k">:</span> Rand, timest.: <span class="pl-c1">0.2</span>, value<span class="pl-k">:</span> <span class="pl-c1">37</span>}
 {tag<span class="pl-k">:</span> Char, timest.: <span class="pl-c1">0.25</span>, value<span class="pl-k">:</span> C}
 {tag<span class="pl-k">:</span> Rand, timest.: <span class="pl-c1">0.3</span>, value<span class="pl-k">:</span> <span class="pl-c1">61</span>}
 {tag<span class="pl-k">:</span> Rand, timest.: <span class="pl-c1">0.4</span>, value<span class="pl-k">:</span> <span class="pl-c1">34</span>}
 {tag<span class="pl-k">:</span> Int, timest.: <span class="pl-c1">3.0</span>, value<span class="pl-k">:</span> <span class="pl-c1">123</span>}
 {tag<span class="pl-k">:</span> Char, timest.: <span class="pl-c1">10.0</span>, value<span class="pl-k">:</span> D}

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill_forward_event</span>(y, <span class="pl-c1">2.0</span>)
 (Char <span class="pl-k">=</span> {timest.: <span class="pl-c1">0.25</span>, value<span class="pl-k">:</span> C}, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> {timest.: <span class="pl-c1">0.4</span>, value<span class="pl-k">:</span> <span class="pl-c1">34</span>})

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill_forward_value</span>(y, <span class="pl-c1">5.0</span>)
 (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">123</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">34</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">EventSeries</span>(y) <span class="pl-c"><span class="pl-c">#</span> creates an EventSeries where each value is a filled forward named tuple with values for each tag</span>
<span class="pl-c1">9</span><span class="pl-k">-</span>element EventSeries{Float64,Array{Float64,<span class="pl-c1">1</span>},NamedTuple{(<span class="pl-c1">:Char</span>, <span class="pl-c1">:Int</span>, <span class="pl-c1">:Rand</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>,Array{NamedTuple{(<span class="pl-c1">:Char</span>, <span class="pl-c1">:Int</span>, <span class="pl-c1">:Rand</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 {timest.: <span class="pl-c1">0.0</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">53</span>)}
 {timest.: <span class="pl-c1">0.1</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">23</span>)}
 {timest.: <span class="pl-c1">0.15</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">23</span>)}
 {timest.: <span class="pl-c1">0.2</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">37</span>)}
 {timest.: <span class="pl-c1">0.25</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">37</span>)}
 {timest.: <span class="pl-c1">0.3</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">61</span>)}
 {timest.: <span class="pl-c1">0.4</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">34</span>)}
 {timest.: <span class="pl-c1">3.0</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">123</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">34</span>)}     
 {timest.: <span class="pl-c1">10.0</span>, value<span class="pl-k">:</span> (Char <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span>, Int <span class="pl-k">=</span> <span class="pl-c1">123</span>, Rand <span class="pl-k">=</span> <span class="pl-c1">34</span>)}</pre></div>
</article></div>