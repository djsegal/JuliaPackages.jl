<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sparsetimeseries" class="anchor" aria-hidden="true" href="#sparsetimeseries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SparseTimeSeries</h1>
<p><a href="https://travis-ci.com/jonalm/SparseTimeSeries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/16b599a541d76bada55b9c3fc5606b9a11d44663/68747470733a2f2f6170692e7472617669732d63692e636f6d2f6a6f6e616c6d2f53706172736554696d655365726965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.com/jonalm/SparseTimeSeries.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jonalm/SparseTimeSeries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c7e17c9905d3a3fbd06cd3f284e393f4c35bd0fd/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6e616c6d2f53706172736554696d655365726965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jonalm/SparseTimeSeries.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>If you are looking for general time series functionality, check out the much more mature
<a href="https://github.com/JuliaStats/TimeSeries.jl">TimeSeries.jl</a> package first.</p>
<h2><a id="user-content-functionality-overview" class="anchor" aria-hidden="true" href="#functionality-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functionality overview</h2>
<p>The package supports, <code>value</code> of arbitrary type and any <code>timestamp</code> which can be sorted.</p>
<p>The  key data types are the <code>Event</code>, which wraps a (timestamp, value) pair;
the <code>Segment</code> which wraps a (time start, time end, value) triplet;
the <code>EventSeries</code> (subtype of <code>AbstracVector</code>), which holds the time series.</p>
<p>The <code>EventSeries</code> has, in addition to the standard <code>AbstracVector</code> interface, the following methods:</p>
<ul>
<li><code>align(::EventSeries...)</code> returns a tuple of <code>EventSeries</code> containing subsets of the corresponding series   input, such that the time domain of each output series corresponds to the largest common time domain of the input series. (See <code>select</code> below.)</li>
<li><code>cumtime(::EventSeries, value)</code> returns the cumulative time for which the series takes the input <code>value</code>.</li>
<li><code>fill_forward_event(::EventSeries, time)</code> returns the most recent <code>Event</code> prior to input <code>time</code>.</li>
<li><code>fill_forward_value(::EventSeries, time)</code> returns the most recent <code>value</code> prior to input <code>time</code>.</li>
<li><code>fuse(;named_eventseries)</code> returns a new a new <code>EventSeries</code> with time sorted <code>Event</code>s for each timestamp in the input series, where the values are named tuples containing the fill forward value of all input time series.</li>
<li><code>segments(events)</code> returns an iterator over all <code>Segement</code>s defined by consecutive <code>Event</code>s in the input.</li>
<li><code>select(::EventSeries, tstart, tend)</code> returns an <code>EventSeries</code> which is a subset of the input series, containing the <code>Events</code> in the time domain <code>[tstart, tend]</code>. The endpoint values are set by filling forward.</li>
<li><code>splice(;named_eventseries...)</code> returns a new a new <code>EventSeries</code> with time sorted <code>Event</code>s for each timestamp in the input series, where the values are values are name-value pairs.</li>
</ul>
</article></div>