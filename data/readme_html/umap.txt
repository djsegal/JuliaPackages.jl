<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-umapjl" class="anchor" aria-hidden="true" href="#umapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UMAP.jl</h1>
<p><a href="https://travis-ci.com/dillondaudert/UMAP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a6fdffce56eb679ce9244f6925ef7fccf2933c34/68747470733a2f2f7472617669732d63692e636f6d2f64696c6c6f6e646175646572742f554d41502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/dillondaudert/UMAP.jl.svg?branch=master" style="max-width:100%;"></a><a href="https://ci.appveyor.com/project/dillondaudert/umap-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1108eb14127ee12f1ff8bff1988072f6fe3838d7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f626438723734696e67666f73373136363f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/bd8r74ingfos7166?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/dillondaudert/UMAP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/659f802d2265f74f8e19a8c38923567a96e8f4ca/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64696c6c6f6e646175646572742f554d41502e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/dillondaudert/UMAP.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/dillondaudert/UMAP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e628555b98a61ef70575e18d07a411c73fa092f/68747470733a2f2f636f6465636f762e696f2f67682f64696c6c6f6e646175646572742f554d41502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/dillondaudert/UMAP.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A pure Julia implementation of the <a href="https://arxiv.org/abs/1802.03426" rel="nofollow">Uniform Manifold Approximation and Projection</a> dimension reduction
algorithm</p>
<blockquote>
<p>McInnes, L, Healy, J, Melville, J, <em>UMAP: Uniform Manifold Approximation and Projection for
Dimension Reduction</em>. ArXiV 1802.03426, 2018</p>
</blockquote>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>embedding <span class="pl-k">=</span> <span class="pl-c1">umap</span>(X, n_components; n_neighbors, metric, min_dist, <span class="pl-k">...</span>)</pre></div>
<p>The <code>umap</code> function takes two arguments, <code>X</code> (a column-major matrix of shape (n_features, n_samples)), <code>n_components</code> (the number of dimensions in the output embedding), and various keyword arguments. Several important ones are:</p>
<ul>
<li><code>n_neighbors::Int=15</code>: This controls how many neighbors around each point are considered to be part of its local neighborhood. Larger values will result in embeddings that capture more global structure, while smaller values will preserve more local structures.</li>
<li><code>metric::SemiMetric=Euclidean()</code>: The (semi)metric to use when calculating distances between points. This can be any subtype of the <code>SemiMetric</code> type from the <code>Distances.jl</code> package, including user-defined types.</li>
<li><code>min_dist::Float=0.1</code>: This controls the minimum spacing of points in the embedding. Larger values will cause points to be more evenly distributed, while smaller values will preserve more local structure.</li>
</ul>
<p>The returned <code>embedding</code> will be a matrix of shape (n_components, n_samples).</p>
<h3><a id="user-content-using-precomputed-distances" class="anchor" aria-hidden="true" href="#using-precomputed-distances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using precomputed distances</h3>
<p>UMAP can use a precomputed distance matrix instead of finding the nearest neighbors itself. In this case, the distance matrix is passed as <code>X</code> and the <code>metric</code> keyword argument should be <code>:precomputed</code>. Example:</p>
<div class="highlight highlight-source-julia"><pre>embedding <span class="pl-k">=</span> <span class="pl-c1">umap</span>(distances, n_components; metric<span class="pl-k">=</span><span class="pl-c1">:precomputed</span>)</pre></div>
<h2><a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation Details</h2>
<p>There are two main steps involved in UMAP: building a weighted graph with edges connecting points to their nearest neighbors, and optimizing the low-dimensional embedding of that graph. The first step is accomplished either by an exact kNN search (for datasets with <code>&lt; 4096</code> points) or by the approximate kNN search algorithm, <a href="https://github.com/dillondaudert/NearestNeighborDescent.jl">NNDescent</a>. This step is also usually the most costly.</p>
<p>The low-dimensional embedding is initialized (by default) with the eigenvectors of the normalized Laplacian of the kNN graph. These are found using ARPACK (via <a href="https://github.com/JuliaLinearAlgebra/Arpack.jl">Arpack.jl</a>).</p>
<h2><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current Limitations</h2>
<ul>
<li><strong>No transform</strong>: Only one-time embeddings are possible at the moment. That is to say, it isn't possible to "fit" UMAP to a dataset and then use it to "transform" new data</li>
<li><strong>Input data types</strong>: Only data points that are represented by vectors of numbers (passed in as a matrix) are valid inputs. This is mostly due to a lack of support for other formats in <a href="https://github.com/dillondaudert/NearestNeighborDescent.jl">NNDescent</a>. Support for e.g. string datasets is possible in the future</li>
<li><strong>Sequential</strong>: This implementation does not take advantage of any parallelism</li>
</ul>
<h2><a id="user-content-external-resources" class="anchor" aria-hidden="true" href="#external-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>External Resources</h2>
<ul>
<li><a href="https://pair-code.github.io/understanding-umap/" rel="nofollow">Understanding UMAP</a></li>
<li>For a great description of how UMAP works, see <a href="https://umap-learn.readthedocs.io/en/latest/how_umap_works.html" rel="nofollow">this page</a> from the Python UMAP documentation</li>
<li>If you're familiar with <a href="https://lvdmaaten.github.io/tsne/" rel="nofollow">t-SNE</a>, then <a href="https://jlmelville.github.io/uwot/umap-for-tsne.html" rel="nofollow">this page</a> describes UMAP with similar vocabulary to that dimension reduction algorithm</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>The full MNIST and FMNIST datasets are plotted below using both this implementation and the <a href="github.com/lmcinnes/umap">Python implementation</a> for comparison. These were generated by <a href="PlotMNIST.ipynb">this notebook</a>.</p>
<p>Note that the memory allocation for the Python UMAP is unreliable, as Julia's benchmarking doesn't count memory allocated within Python itself.</p>
<h3><a id="user-content-mnist" class="anchor" aria-hidden="true" href="#mnist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MNIST</h3>
<p><a target="_blank" rel="noopener noreferrer" href="img/mnist_julia.png"><img src="img/mnist_julia.png" alt="Julia MNIST" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="img/mnist_python.png"><img src="img/mnist_python.png" alt="Python MNIST" style="max-width:100%;"></a></p>
<h3><a id="user-content-fmnist" class="anchor" aria-hidden="true" href="#fmnist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FMNIST</h3>
<p><a target="_blank" rel="noopener noreferrer" href="img/fmnist_julia.png"><img src="img/fmnist_julia.png" alt="Julia FMNIST" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="img/fmnist_python.png"><img src="img/fmnist_python.png" alt="Python FMNIST" style="max-width:100%;"></a></p>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Disclaimer</h2>
<p>This implementation is a work-in-progress. If you encounter any issues, please create
an issue or make a pull request.</p>
</article></div>