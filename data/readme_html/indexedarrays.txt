<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-uniquevectors" class="anchor" aria-hidden="true" href="#uniquevectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UniqueVectors</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/UniqueVectors/iZpAV" rel="nofollow"><img src="https://camo.githubusercontent.com/05b2540062482b9721a7b55ea6b0f713188c96639571035d78592d4b45302d92/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e69717565566563746f72732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/UniqueVectors/version.svg" style="max-width: 100%;"></a>
<a href="https://github.com/garrison/UniqueVectors.jl/actions"><img src="https://github.com/garrison/UniqueVectors.jl/actions/workflows/test.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/garrison/UniqueVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/242cda2c7b165c0357bfe5f972a45b0bfec1b4e74a04b3f3e43972ba383f43d6/68747470733a2f2f636f6465636f762e696f2f6769746875622f6761727269736f6e2f556e69717565566563746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d73424576565774726a76" alt="Coverage Status" data-canonical-src="https://codecov.io/github/garrison/UniqueVectors.jl/branch/master/graph/badge.svg?token=sBEvVWtrjv" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/UniqueVectors/iZpAV" rel="nofollow"><img src="https://camo.githubusercontent.com/0366612db8a86b0397555a7f7267bf55d27b3730c275c566f431149dea23ecbd/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e69717565566563746f72732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/UniqueVectors/pkgeval.svg" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;UniqueVectors&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>UniqueVectors<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><code>UniqueVector</code> is a data structure acts like a <code>Vector</code> of unique elements, but also maintains a dictionary that is updated in sync with the vector, which allows for quick <code>O(1)</code> lookup of the index of any element:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using UniqueVectors

julia&gt; uv = UniqueVector([&quot;cat&quot;, &quot;dog&quot;, &quot;mouse&quot;])
3-element UniqueVectors.UniqueVector{String}:
 &quot;cat&quot;
 &quot;dog&quot;
 &quot;mouse&quot;

julia&gt; uv[1]
&quot;cat&quot;

julia&gt; findfirst(isequal(&quot;dog&quot;), uv)         # executes quickly via a dictionary lookup, not sequential search
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UniqueVectors

julia<span class="pl-k">&gt;</span> uv <span class="pl-k">=</span> <span class="pl-c1">UniqueVector</span>([<span class="pl-s"><span class="pl-pds">"</span>cat<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mouse<span class="pl-pds">"</span></span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element UniqueVectors<span class="pl-k">.</span>UniqueVector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>cat<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>mouse<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> uv[<span class="pl-c1">1</span>]
<span class="pl-s"><span class="pl-pds">"</span>cat<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">findfirst</span>(<span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>), uv)         <span class="pl-c"><span class="pl-c">#</span> executes quickly via a dictionary lookup, not sequential search</span>
<span class="pl-c1">2</span></pre></div>
<p dir="auto">As might be expected, <code>UniqueVector</code> supports many of the usual methods for <code>Vector</code>, but all operations enforce the condition that each element of the array must be unique (as defined by <code>isequal</code>).  The mutating methods <code>push!</code>, <code>pop!</code>, and <code>empty!</code> are implemented as well, as these operations keep constant the indices of existing elements in the array, allowing the dictionary to be updated efficiently.</p>
<p dir="auto">In addition, <code>UniqueVector</code> implements a mutating <code>findfirst!</code> method, which returns the index of an element if it exists in the array, or otherwise appends the element and returns its new index:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; findfirst!(isequal(&quot;cat&quot;), uv)
1

julia&gt; findfirst!(isequal(&quot;horse&quot;), uv)
4

julia&gt; uv
4-element UniqueVectors.UniqueVector{String}:
 &quot;cat&quot;
 &quot;dog&quot;
 &quot;mouse&quot;
 &quot;horse&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">findfirst!</span>(<span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">"</span>cat<span class="pl-pds">"</span></span>), uv)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">findfirst!</span>(<span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">"</span>horse<span class="pl-pds">"</span></span>), uv)
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> uv
<span class="pl-c1">4</span><span class="pl-k">-</span>element UniqueVectors<span class="pl-k">.</span>UniqueVector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>cat<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>mouse<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>horse<span class="pl-pds">"</span></span></pre></div>
<p dir="auto"><code>UniqueVector</code> is derived from an abstract type known as <code>AbstractUniqueVector</code>.  This type is meant for anything that implements a fast bi-directional mapping between elements of a type <code>T</code> and integers from <code>1</code> to <code>N</code>.  For some applications, it will be possible to have alternative implementations of this interface--ones that resemble an <code>UniqueVector</code> but can be calculated quickly on the fly (and may not need to be fully stored in memory).  One notable example of this would be <a href="http://www.phy.cuhk.edu.hk/hqlin/paper/018PRB42_6561.pdf" rel="nofollow">Lin</a> <a href="http://www.phy.cuhk.edu.hk/hqlin/paper/033ComPhys7_400.pdf" rel="nofollow">Tables</a>, which are often used in numerical exact diagonalization studies, and which are used to map each basis element of a quantum Hamiltonian to indices <code>1</code> through <code>N</code>.</p>
<p dir="auto">(More generally, one might want an abstract type that represents any bidirectional mapping between two different sets (without one of them necessarily being contiguous integers from <code>1</code> to <code>N</code>).  In this case, using <code>findfirst</code> may not be the appropriate interface, and I'd welcome any comments on this.)</p>
<p dir="auto">Note: This package was formerly known as <code>IndexedArrays</code> (see issue <a href="https://github.com/garrison/UniqueVectors.jl/issues/4" data-hovercard-type="issue" data-hovercard-url="/garrison/UniqueVectors.jl/issues/4/hovercard">#4</a>).</p>
</article></div>