<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gdaljl" class="anchor" aria-hidden="true" href="#gdaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GDAL.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaGeo/GDAL.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaGeo/GDAL.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Julia wrapper for <a href="http://gdal.org/" rel="nofollow">GDAL - Geospatial Data Abstraction Library</a>. This
package is a binding to the C API of GDAL/OGR. It provides only a C style usage, where
resources must be closed manually, and datasets are pointers.</p>
<p dir="auto">Other packages can build on top of this to provide a more Julian user experience. See for
example <a href="https://github.com/yeesian/ArchGDAL.jl">ArchGDAL.jl</a>.</p>
<p dir="auto"><em>Most users will want to use <a href="https://github.com/yeesian/ArchGDAL.jl">ArchGDAL.jl</a> instead
of using GDAL.jl directly.</em></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is registered, so add it using <code>Pkg</code>. This will also download GDAL binaries
created in <a href="https://github.com/JuliaPackaging/Yggdrasil/tree/master/G/GDAL">Yggdrasil</a>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add GDAL"><pre class="notranslate"><code>pkg&gt; add GDAL
</code></pre></div>
<p dir="auto">To check if it is installed correctly, you could run the test suite with:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; test GDAL"><pre class="notranslate"><code>pkg&gt; test GDAL
</code></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Docstrings are automatically inserted from the GDAL documentation. Note that these are
written for the C API, so function names and argument type names will differ.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using GDAL

help?&gt; GDAL.ogr_g_creategeometry
  OGR_G_CreateGeometry(OGRwkbGeometryType eGeometryType) -&gt; OGRGeometryH

  Create an empty geometry of desired type.

  Parameters
  ––––––––––––

    •    eGeometryType: the type code of the geometry to be created.

  Returns
  –––––––––

  handle to the newly create geometry or NULL on failure. Should be freed with OGRGDestroyGeometry() after use."><pre class="notranslate"><code>julia&gt; using GDAL

help?&gt; GDAL.ogr_g_creategeometry
  OGR_G_CreateGeometry(OGRwkbGeometryType eGeometryType) -&gt; OGRGeometryH

  Create an empty geometry of desired type.

  Parameters
  ––––––––––––

    •    eGeometryType: the type code of the geometry to be created.

  Returns
  –––––––––

  handle to the newly create geometry or NULL on failure. Should be freed with OGRGDestroyGeometry() after use.
</code></pre></div>
<p dir="auto">Further usage documentation is not yet available, but the files
<a href="https://github.com/JuliaGeo/GDAL.jl/blob/master/test/tutorial_raster.jl"><code>test/tutorial_raster.jl</code></a>
and
<a href="https://github.com/JuliaGeo/GDAL.jl/blob/master/test/tutorial_vector.jl"><code>test/tutorial_vector.jl</code></a>
should provide a good hint based on the API tutorials from <a href="http://gdal.org/" rel="nofollow">GDAL.org</a>.</p>
<p dir="auto">The bulk of this package is generated automatically by the scripts under
<a href="https://github.com/JuliaGeo/GDAL.jl/tree/master/gen"><code>gen/</code></a>.</p>
<h2 dir="auto"><a id="user-content-using-the-gdal-and-ogr-utilities" class="anchor" aria-hidden="true" href="#using-the-gdal-and-ogr-utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using the GDAL and OGR utilities</h2>
<p dir="auto">The provided GDAL installation also contains the commonly used utilities such as
<code>gdal_translate</code> and <code>ogr2ogr</code>. They can be called from Julia like so:</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GDAL_jll

# list information about a raster dataset
run(`$(gdalinfo_path()) path/to/raster-file`)

# convert raster data between different formats
run(`$(gdal_translate_path()) -of COG input.asc output.tif`)

# list information about an OGR-supported data source
run(`$(ogrinfo_path()) path/to/vector-file`)

# convert simple features data between file formats
run(`$(ogr2ogr_path()) -f FlatGeobuf output.fgb input.shp`)"><pre><span class="pl-smi">using</span> <span class="pl-smi">GDAL_jll</span>

<span class="pl-c"><span class="pl-c">#</span> list information about a raster dataset</span>
run(<span class="pl-smi">`$(gdalinfo_path()) path/to/raster-file`</span>)

<span class="pl-c"><span class="pl-c">#</span> convert raster data between different formats</span>
run(<span class="pl-smi">`$(gdal_translate_path()) -of COG input.asc output.tif`</span>)

<span class="pl-c"><span class="pl-c">#</span> list information about an OGR-supported data source</span>
run(<span class="pl-smi">`$(ogrinfo_path()) path/to/vector-file`</span>)

<span class="pl-c"><span class="pl-c">#</span> convert simple features data between file formats</span>
run(<span class="pl-smi">`$(ogr2ogr_path()) -f FlatGeobuf output.fgb input.shp`</span>)</pre></div>
<p dir="auto">The <code>&lt;util&gt;_path</code> functions are exported from the
<a href="https://github.com/JuliaBinaryWrappers/GDAL_jll.jl"><code>GDAL_jll</code></a> package. If you only wish
to run the utilities, that package will have all you need. If you are using the GDAL
package, they are also available as <code>GDAL.&lt;util&gt;_path</code>. A list of the available utilities
can be found <a href="https://github.com/JuliaBinaryWrappers/GDAL_jll.jl#products">here</a>.
Documentation for them is available on
<a href="https://gdal.org/programs/index.html" rel="nofollow">gdal.org/programs</a>. Note that programs implemented in
Python (ending in .py) are not available, since those would require a Python installation.</p>
<p dir="auto">Since GDAL 2.1's <a href="https://trac.osgeo.org/gdal/wiki/rfc59.1_utilities_as_a_library" rel="nofollow">RFC59.1</a>
most utilities are also available as functions in the library, they are implemented
<a href="https://github.com/JuliaGeo/GDAL.jl/blob/master/src/gdal_utils.jl">here</a> and tested
<a href="https://github.com/JuliaGeo/GDAL.jl/blob/master/test/gdal_utils.jl">here</a>. If these are
used you can avoid the need for calling the binaries.</p>
<p dir="auto">If you want to use these utilities from outside julia, note that this will not work unless
you set two things:</p>
<ol dir="auto">
<li>The environment variable <code>GDAL_DATA</code> must be set to the value returned in julia by
<code>GDAL.GDAL_DATA[]</code>.</li>
<li>Julia's <code>Sys.BINDIR</code> must be in your path.</li>
</ol>
<p dir="auto">Inside of julia (2) is always the case, and (1) happens on loading the <code>GDAL</code> module, in its
<code>__init__</code> function.</p>
<h2 dir="auto"><a id="user-content-missing-driver-to-support-a-format" class="anchor" aria-hidden="true" href="#missing-driver-to-support-a-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Missing driver to support a format</h2>
<p dir="auto">If you get an error such as the one below:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="GDALError (CE_Failure, code 6):
    The &lt;...&gt; driver needs to be compiled to support &lt;...&gt;"><pre class="notranslate"><code>GDALError (CE_Failure, code 6):
    The &lt;...&gt; driver needs to be compiled to support &lt;...&gt;
</code></pre></div>
<p dir="auto">This means that the GDAL binaries you are using, which normally come from the <a href="https://github.com/JuliaPackaging/Yggdrasil/tree/master/G/GDAL">Yggdrasil
community build tree</a>, are
not compiled with support for the format or feature you need. GDAL is a large library with
many optional dependencies which allow support for more formats. Currently the amount of
formats supported is still limited, but will grow over time. Lists of available formats can
be found <a href="https://gdal.org/drivers/raster/index.html" rel="nofollow">here</a> for rasters and
<a href="https://gdal.org/drivers/vector/index.html" rel="nofollow">here</a> for vectors. If you need support for
another format, consider making an issue in this repository. Many formats need external
libraries as added dependencies. This means an Yggdrasil build also needs to be available
for that library, and added as a dependency. See <a href="https://github.com/JuliaGeo/GDAL.jl/issues/65" data-hovercard-type="issue" data-hovercard-url="/JuliaGeo/GDAL.jl/issues/65/hovercard">issue
#65</a> for a discussion on which new drivers
should be prioritized.</p>
<p dir="auto">In general GDAL format support will be the same across platforms. HDF5 and netCDF are the
exception to this rule, since they are only available on <a href="https://github.com/JuliaPackaging/Yggdrasil/blob/ce6939a8f751083cd683a6eba6083e2abc47956d/G/GDAL/build_tarballs.jl#L99-L104">the major
platforms</a> for now.</p>
</article></div>