<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-muttsinterfacejl" class="anchor" aria-hidden="true" href="#muttsinterfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MuttsInterface.jl</h1>
<p dir="auto">The interface for Mutable Until Shared data structures. (MutTS - Mutable 'Til Shared)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/RelationalAI-oss/MuttsInterface.jl/workflows/CI/badge.svg"><img src="https://github.com/RelationalAI-oss/MuttsInterface.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto"><code>MuttsInterface.jl</code> provides infrastructure for building versioned data structures that follow the
<em>mutable-until-shared discipline</em>, providing all the benefits of purely-functional data
structures (worry-free, lock-free, super fast concurrency), with the pragmatic programming
and performance benefits of mutable data.</p>
<p dir="auto">The <code>@mutt</code> keyword marks a struct as being <em>mutable until shared</em>, meaning that it
<strong><em>starts out</em> mutable, until it is branched-from or manually marked immutable</strong>, after
which it is permanently immutable. This gurantees concurrency-friendly immutable data, while
still allowing in-place construction of complex objects.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @mutt struct S
           x::Int
       end

julia&gt; MuttsInterface.make_mutable_copy(rhs::S) = S(rhs.x)

julia&gt; s = S(2)
S(true, 2)

julia&gt; s.x = 3
3

julia&gt; s2 = branch!(s)
S(true, 3)

julia&gt; s
S(false, 3)

julia&gt; s.x = 4
ERROR: AssertionError: is_mutts_mutable(obj)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mutt</span> <span class="pl-k">struct</span> S
           x<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> MuttsInterface<span class="pl-k">.</span><span class="pl-en">make_mutable_copy</span>(rhs<span class="pl-k">::</span><span class="pl-c1">S</span>) <span class="pl-k">=</span> <span class="pl-c1">S</span>(rhs<span class="pl-k">.</span>x)

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">S</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">S</span>(<span class="pl-c1">true</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> s<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> s2 <span class="pl-k">=</span> <span class="pl-c1">branch!</span>(s)
<span class="pl-c1">S</span>(<span class="pl-c1">true</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> s
<span class="pl-c1">S</span>(<span class="pl-c1">false</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> s<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">4</span>
ERROR<span class="pl-k">:</span> AssertionError<span class="pl-k">:</span> <span class="pl-c1">is_mutts_mutable</span>(obj)</pre></div>
</article></div>