<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-atomicfilewritejl" class="anchor" aria-hidden="true" href="#atomicfilewritejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AtomicFileWrite.jl</h1>
<p><em>Write to file atomically</em></p>
<h3><a id="user-content-what-it-does" class="anchor" aria-hidden="true" href="#what-it-does"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What it does</h3>
<p>This tiny package provides a single funtion, <code>atomic_write(f, path; backup=nothing, overwrite_backup=false)</code>, to atomically write to a file.
<code>f</code> is applied to an open <code>IOStream</code> on a temporary file, which is then moved to <code>path</code>.
Thus, writing is committed to <code>path</code> only if it completed without error, otherwise the file at <code>path</code> is left untouched.</p>
<p>The <code>backup</code> keyword may be used to specify a backup filename which will contain the original contents of <code>path</code> if <code>f</code> completed successfully.</p>
<h3><a id="user-content-what-it-doesnt-do" class="anchor" aria-hidden="true" href="#what-it-doesnt-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What it doesn't do</h3>
<ul>
<li>There is no support for appending, only overwriting.</li>
<li>It's not thread-safe when the <code>backup</code> keyword is used, since the backup is created by copying. It is only intended to be atomic when run from a single thread.</li>
</ul>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example:</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AtomicFileWrite

filename = &quot;tmp.txt&quot;
open(io-&gt;print(io,&quot;original contents&quot;), filename, &quot;w&quot;)
try 
    atomic_write(filename) do io
        print(io, &quot;new &quot;)
        error(&quot;oops!&quot;)
        print(io, &quot;contents&quot;)
    end
catch e
    showerror(stderr, e, catch_backtrace())
end

# original contents still intact after error
@assert read(filename, String) == &quot;original contents&quot;


backup = filename * &quot;.bak&quot;
atomic_write(io-&gt;print(io,&quot;new contents&quot;), filename, backup=backup, overwrite_backup=true)

@assert read(filename, String) == &quot;new contents&quot;
@assert read(backup, String) == &quot;original contents&quot;
"><pre><span class="pl-k">using</span> AtomicFileWrite

filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>tmp.txt<span class="pl-pds">"</span></span>
<span class="pl-c1">open</span>(io<span class="pl-k">-&gt;</span><span class="pl-c1">print</span>(io,<span class="pl-s"><span class="pl-pds">"</span>original contents<span class="pl-pds">"</span></span>), filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)
<span class="pl-k">try</span> 
    <span class="pl-c1">atomic_write</span>(filename) <span class="pl-k">do</span> io
        <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>new <span class="pl-pds">"</span></span>)
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>oops!<span class="pl-pds">"</span></span>)
        <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>contents<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">catch</span> e
    <span class="pl-c1">showerror</span>(<span class="pl-c1">stderr</span>, e, <span class="pl-c1">catch_backtrace</span>())
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> original contents still intact after error</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">read</span>(filename, String) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>original contents<span class="pl-pds">"</span></span>


backup <span class="pl-k">=</span> filename <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>.bak<span class="pl-pds">"</span></span>
<span class="pl-c1">atomic_write</span>(io<span class="pl-k">-&gt;</span><span class="pl-c1">print</span>(io,<span class="pl-s"><span class="pl-pds">"</span>new contents<span class="pl-pds">"</span></span>), filename, backup<span class="pl-k">=</span>backup, overwrite_backup<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c1">@assert</span> <span class="pl-c1">read</span>(filename, String) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>new contents<span class="pl-pds">"</span></span>
<span class="pl-c1">@assert</span> <span class="pl-c1">read</span>(backup, String) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>original contents<span class="pl-pds">"</span></span></pre></div>
</article></div>