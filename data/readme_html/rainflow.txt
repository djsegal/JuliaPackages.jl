<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rainflow-counting-algorithm" class="anchor" aria-hidden="true" href="#rainflow-counting-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rainflow-counting algorithm</h1>
<p><a href="https://travis-ci.org/dhoegh/Rainflow.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e77fb3dbf0fe8b86fae71103278bc9154e7b111fe5bcc0ea01c49fd9b0eae063/68747470733a2f2f7472617669732d63692e6f72672f64686f6567682f5261696e666c6f772e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dhoegh/Rainflow.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/r/dhoegh/Rainflow.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4daac11ab95808901cb8f79781e5f894ea871d07134b11fe392e9575e11b7e3/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f64686f6567682f5261696e666c6f772e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/dhoegh/Rainflow.jl.svg" style="max-width:100%;"></a></p>
<p>This package contains an implementation of the ASTM E1049-85 rainflow-counting algorithem and it can be used to asses fatigue properties of a structure by reducing a stress spectrum down to simple stress reversals that can be handeled by Palmgren-Miner linear damage rule.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>The package can be installed by:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Rainflow&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Rainflow<span class="pl-pds">"</span></span>)</pre></div>
<p>And a plotting package to visualize the results:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Plots&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Plots<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use</h1>
<p>The use of the package can be seen in the following example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Rainflow
using Plots

signal = 10*randn(100); # Gennerates some random data
extremum, t = sort_peaks(signal) # Sorts the signal to local extrema's, could optional take a time vector
plot(signal)
scatter!(t,extremum) # plots extrema's
cycles = count_cycles(extremum, t) # find all the cycles in the data

bins = sum_cycles(cycles, 10, 1) # Sums the cycles together dependant on intervals, here there is 10 range interval and one mean interval
bar(bins)

range_intervals = [0, 40, 45, 50, 55, 60, 100.] # There can also be specified user defined intervals
mean_intervals = [0.,100.] # The intevals needs to go from 0-100
bins = sum_cycles(cycles, range_intervals, mean_intervals) # Sums the cycles in the given intervals

# Plotting the results with the user defined intervals
boundaries = find_boundary_vals(cycles); # Find the min max values to scale or interpolate the calculated values
range_values = range_intervals/100*boundaries.max_range # Scale the range values
# The bar plot in julia only takes integer array as tick marks
range_values = collect(Iterators.drop(range_values,1)) # Drop the interval with 0 amplitude
range_values = map(x-&gt;round.(x), range_values) # round off the values so they can be converted to Int
range_values = convert(Array{Int64,1},range_values); # Convert the array to Int
bar(range_values, bins, xticks = range_values)
"><pre><span class="pl-k">using</span> Rainflow
<span class="pl-k">using</span> Plots

signal <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> Gennerates some random data</span>
extremum, t <span class="pl-k">=</span> <span class="pl-c1">sort_peaks</span>(signal) <span class="pl-c"><span class="pl-c">#</span> Sorts the signal to local extrema's, could optional take a time vector</span>
<span class="pl-c1">plot</span>(signal)
<span class="pl-c1">scatter!</span>(t,extremum) <span class="pl-c"><span class="pl-c">#</span> plots extrema's</span>
cycles <span class="pl-k">=</span> <span class="pl-c1">count_cycles</span>(extremum, t) <span class="pl-c"><span class="pl-c">#</span> find all the cycles in the data</span>

bins <span class="pl-k">=</span> <span class="pl-c1">sum_cycles</span>(cycles, <span class="pl-c1">10</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Sums the cycles together dependant on intervals, here there is 10 range interval and one mean interval</span>
<span class="pl-c1">bar</span>(bins)

range_intervals <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">40</span>, <span class="pl-c1">45</span>, <span class="pl-c1">50</span>, <span class="pl-c1">55</span>, <span class="pl-c1">60</span>, <span class="pl-c1">100.</span>] <span class="pl-c"><span class="pl-c">#</span> There can also be specified user defined intervals</span>
mean_intervals <span class="pl-k">=</span> [<span class="pl-c1">0.</span>,<span class="pl-c1">100.</span>] <span class="pl-c"><span class="pl-c">#</span> The intevals needs to go from 0-100</span>
bins <span class="pl-k">=</span> <span class="pl-c1">sum_cycles</span>(cycles, range_intervals, mean_intervals) <span class="pl-c"><span class="pl-c">#</span> Sums the cycles in the given intervals</span>

<span class="pl-c"><span class="pl-c">#</span> Plotting the results with the user defined intervals</span>
boundaries <span class="pl-k">=</span> <span class="pl-c1">find_boundary_vals</span>(cycles); <span class="pl-c"><span class="pl-c">#</span> Find the min max values to scale or interpolate the calculated values</span>
range_values <span class="pl-k">=</span> range_intervals<span class="pl-k">/</span><span class="pl-c1">100</span><span class="pl-k">*</span>boundaries<span class="pl-k">.</span>max_range <span class="pl-c"><span class="pl-c">#</span> Scale the range values</span>
<span class="pl-c"><span class="pl-c">#</span> The bar plot in julia only takes integer array as tick marks</span>
range_values <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">drop</span>(range_values,<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> Drop the interval with 0 amplitude</span>
range_values <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">round</span>.(x), range_values) <span class="pl-c"><span class="pl-c">#</span> round off the values so they can be converted to Int</span>
range_values <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array{Int64,<span class="pl-c1">1</span>},range_values); <span class="pl-c"><span class="pl-c">#</span> Convert the array to Int</span>
<span class="pl-c1">bar</span>(range_values, bins, xticks <span class="pl-k">=</span> range_values)</pre></div>
<h2><a id="user-content-performance-note" class="anchor" aria-hidden="true" href="#performance-note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance note</h2>
<p>The algorithem and functions has been tested on data set of 1e8 numbers, and the sorting and sum the cycles into bins can be performed in less than 20s on a laptop.</p>
<p>Don't hesitate to file an issue or pull-request to improve the package.</p>
</article></div>