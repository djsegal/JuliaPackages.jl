<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-catwalkjl" class="anchor" aria-hidden="true" href="#catwalkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Catwalk.jl</h1>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/299561138" rel="nofollow"><img src="https://camo.githubusercontent.com/87757938cee0f09998ea89714e93507f78ac84200a573c64546228709f80751e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3239393536313133382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/299561138.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.21105/jcon.00098" rel="nofollow"><img src="https://camo.githubusercontent.com/866eb3ec1a13b1fc019f8977e984eafe08e40b3fb9f52f1c03d14d54d5d99d37/68747470733a2f2f70726f63656564696e67732e6a756c6961636f6e2e6f72672f7061706572732f31302e32313130352f6a636f6e2e30303039382f7374617475732e737667" alt="DOI" data-canonical-src="https://proceedings.juliacon.org/papers/10.21105/jcon.00098/status.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://tisztamo.github.io/Catwalk.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tisztamo/Catwalk.jl/actions/workflows/ci.yml"><img src="https://github.com/tisztamo/Catwalk.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Catwalk.jl can speed up long-running Julia processes by minimizing the
overhead of dynamic dispatch. It is a JIT compiler that continuosly
re-optimizes dispatch code based on data collected at runtime.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/catwalk-speeddemo.gif"><img src="docs/src/assets/catwalk-speeddemo.gif" alt="Speedup demo" data-animated-image="" style="max-width: 100%;"></a>
<a href="https://github.com/tisztamo/Catwalk.jl/blob/main/test/scheduling.jl">source code of this test</a></p>
<p dir="auto">It profiles user-specified call sites, estimating the distribution of
dynamically dispatched types during runtime, and generates fast
static routes for the most frequent ones on the fly.</p>
<p dir="auto">The statistical profiler has very low overhead and can be configured
to handle situations where the distribution of dispatched types
changes relatively fast.</p>
<p dir="auto">To minimize compilation overhead, recompilation only occurs when the
distribution changed enough and the tunable cost model predicts
significant speedup compared to the best version that was previously
compiled.</p>
<p dir="auto"><a href="https://tisztamo.github.io/Catwalk.jl/dev/" rel="nofollow">Documentation (dev)</a></p>
</article></div>