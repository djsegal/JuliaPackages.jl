<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stippleplotly" class="anchor" aria-hidden="true" href="#stippleplotly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StipplePlotly</h1>
<p dir="auto">Embedding Plotly Charts in Stipple.</p>
<p dir="auto">Both a StipplePlotly-API and the PlotlyBase API are supported.</p>
<h4 dir="auto"><a id="user-content-latest-example-with-forwarding-of-plotly-events" class="anchor" aria-hidden="true" href="#latest-example-with-forwarding-of-plotly-events"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Latest example with forwarding of plotly events</h4>
<h5 dir="auto"><a id="user-content-note-syntax-for-event-forwarding-has-changed" class="anchor" aria-hidden="true" href="#note-syntax-for-event-forwarding-has-changed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note: Syntax for event forwarding has changed!</h5>
<p dir="auto">See the docstrings of <code>watchplots()</code> and <code>watchplot()</code> for more details!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@reactive! mutable struct Example &lt;: ReactiveModel
    @mixin plot::PBPlotWithEvents
end

# commented lines below: manual definition of plot_events
# @reactive! mutable struct Example &lt;: ReactiveModel
#     plot::R{Plot} = Plot()
#     plot_selected::R{Dict{String, Any}} = Dict{String, Any}()
#     plot_hover::R{Dict{String, Any}} = Dict{String, Any}()
# end

function ui(model::Example)
    page(model, class = &quot;container&quot;, 
    row(class = &quot;st-module&quot;, [
        plotly(:plot, syncevents = true),
    ]))
end

# The following line will watch all plots that have `syncevents` enabled
# or that have set `syncprefix` explicitly.
Stipple.js_mounted(::Example) = watchplots(:Example)

function handlers(model)
  on(model.isready) do isready
      isready || return
      push!(model)
  end

  on(model.plot_selected) do data
      haskey(data, &quot;points&quot;) &amp;&amp; @info &quot;Selection: $(getindex.(data[&quot;points&quot;], &quot;pointIndex&quot;))&quot;
  end

  return model
end"><pre><span class="pl-c1">@reactive!</span> <span class="pl-k">mutable struct</span> Example <span class="pl-k">&lt;:</span> <span class="pl-c1">ReactiveModel</span>
    <span class="pl-c1">@mixin</span> plot<span class="pl-k">::</span><span class="pl-c1">PBPlotWithEvents</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> commented lines below: manual definition of plot_events</span>
<span class="pl-c"><span class="pl-c">#</span> @reactive! mutable struct Example &lt;: ReactiveModel</span>
<span class="pl-c"><span class="pl-c">#</span>     plot::R{Plot} = Plot()</span>
<span class="pl-c"><span class="pl-c">#</span>     plot_selected::R{Dict{String, Any}} = Dict{String, Any}()</span>
<span class="pl-c"><span class="pl-c">#</span>     plot_hover::R{Dict{String, Any}} = Dict{String, Any}()</span>
<span class="pl-c"><span class="pl-c">#</span> end</span>

<span class="pl-k">function</span> <span class="pl-en">ui</span>(model<span class="pl-k">::</span><span class="pl-c1">Example</span>)
    <span class="pl-c1">page</span>(model, class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>container<span class="pl-pds">"</span></span>, 
    <span class="pl-c1">row</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>st-module<span class="pl-pds">"</span></span>, [
        <span class="pl-c1">plotly</span>(<span class="pl-c1">:plot</span>, syncevents <span class="pl-k">=</span> <span class="pl-c1">true</span>),
    ]))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The following line will watch all plots that have `syncevents` enabled</span>
<span class="pl-c"><span class="pl-c">#</span> or that have set `syncprefix` explicitly.</span>
Stipple<span class="pl-k">.</span><span class="pl-en">js_mounted</span>(<span class="pl-k">::</span><span class="pl-c1">Example</span>) <span class="pl-k">=</span> <span class="pl-c1">watchplots</span>(<span class="pl-c1">:Example</span>)

<span class="pl-k">function</span> <span class="pl-en">handlers</span>(model)
  <span class="pl-c1">on</span>(model<span class="pl-k">.</span>isready) <span class="pl-k">do</span> isready
      isready <span class="pl-k">||</span> <span class="pl-k">return</span>
      <span class="pl-c1">push!</span>(model)
  <span class="pl-k">end</span>

  <span class="pl-c1">on</span>(model<span class="pl-k">.</span>plot_selected) <span class="pl-k">do</span> data
      <span class="pl-c1">haskey</span>(data, <span class="pl-s"><span class="pl-pds">"</span>points<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Selection: <span class="pl-v">$(<span class="pl-c1">getindex</span>.(data[<span class="pl-s"><span class="pl-pds">"</span>points<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>pointIndex<span class="pl-pds">"</span></span>))</span><span class="pl-pds">"</span></span>
  <span class="pl-k">end</span>

  <span class="pl-k">return</span> model
<span class="pl-k">end</span></pre></div>
<p dir="auto">For more Stipple Plotly Demos please check: <a href="https://github.com/GenieFramework/StippleDemos">Stipple Demos Repo</a></p>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">Handling of Plotly Events was highly inspired by the <a href="https://github.com/JuliaPlots/PlotlyJS.jl">PlotlyJS</a> package by <a href="https://github.com/sglyon">Spencer Lyon</a></p>
</article></div>