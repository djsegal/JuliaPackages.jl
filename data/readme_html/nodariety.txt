<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nodarietyjl" class="anchor" aria-hidden="true" href="#nodarietyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nodariety.jl</h1>
<p dir="auto">Nodariety is a fun (I hope) exploration of the directed graph of concept/theory/algorithm/model/etc. names, where nodes are names of people and edges are "hyphens" between them. Here's a little excerpt:
<a target="_blank" rel="noopener noreferrer" href="img/bit_o_hyphengraph.png"><img src="img/bit_o_hyphengraph.png" alt="hyphengraph" style="max-width: 100%;"></a></p>
<p dir="auto">For more of the story behind this package and some example analyses, see the blog post <a href="link_coming_soon">here</a>.</p>
<p dir="auto">For a different take on visualizing this graph, check out <a href="https://github.com/rkurchin/nodarietyvis">this repo</a>, or just <a href="https://rkurchin.github.io/nodarietyvis/" rel="nofollow">this site</a> directly.</p>
<h2 dir="auto"><a id="user-content-what-do-you-get" class="anchor" aria-hidden="true" href="#what-do-you-get"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What do you get?</h2>
<p dir="auto">If you were to install the package (<code>]add Nodariety</code>) and import it (<code>using Nodariety</code>), what could you then do?</p>
<p dir="auto">The package exports the <code>HyphenGraph</code> type, as well as a default instance of it called <code>hg</code>, which has all the data described by the two CSV files in the <code>data/</code> folder of this repo.</p>
<p dir="auto">Because <code>HyphenGraph</code> is a subtype of <code>AbstractGraph</code>, a lot of the graph analysis algorithms in <code>LightGraph</code> "just work" on it! The package has a variety of functions to play around with this. They all use <code>hg</code> as the default argument, so you can call them straight-up. For example, suppose we wanted to find the longest path we can traverse:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; paths = longest_path()
2-element Vector{Vector{Int64}}:
 [183, 391, 82, 40, 75, 248, 282, 368]
 [285, 391, 82, 40, 75, 248, 282, 368]

 julia&gt; subgraph = hg[paths[2]]
 HyphenGraph with 8 people, 7 hyphens

 julia&gt; subgraph.node_info.family_name
 8-element Vector{String}:
 &quot;Navier&quot;
 &quot;Stokes&quot;
 &quot;Einstein&quot;
 &quot;Cartan&quot;
 &quot;Dieudonné&quot;
 &quot;Manin&quot;
 &quot;Mumford&quot;
 &quot;Shah&quot;"><pre>julia<span class="pl-k">&gt;</span> paths <span class="pl-k">=</span> <span class="pl-c1">longest_path</span>()
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Int64}}<span class="pl-k">:</span>
 [<span class="pl-c1">183</span>, <span class="pl-c1">391</span>, <span class="pl-c1">82</span>, <span class="pl-c1">40</span>, <span class="pl-c1">75</span>, <span class="pl-c1">248</span>, <span class="pl-c1">282</span>, <span class="pl-c1">368</span>]
 [<span class="pl-c1">285</span>, <span class="pl-c1">391</span>, <span class="pl-c1">82</span>, <span class="pl-c1">40</span>, <span class="pl-c1">75</span>, <span class="pl-c1">248</span>, <span class="pl-c1">282</span>, <span class="pl-c1">368</span>]

 julia<span class="pl-k">&gt;</span> subgraph <span class="pl-k">=</span> hg[paths[<span class="pl-c1">2</span>]]
 HyphenGraph with <span class="pl-c1">8</span> people, <span class="pl-c1">7</span> hyphens

 julia<span class="pl-k">&gt;</span> subgraph<span class="pl-k">.</span>node_info<span class="pl-k">.</span>family_name
 <span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>Navier<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Stokes<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Einstein<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Cartan<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Dieudonné<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Manin<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Mumford<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Shah<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Or maybe we want to play around with centrality measures (note that eigenvector centrality can return different results different times it's called):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; all_centrals()
betweenness_centrality: Albert Einstein
closeness_centrality: Leonhard Euler
degree_centrality: Albert Einstein
eigenvector_centrality: Claude-Louis Navier
katz_centrality: David Mumford
pagerank: Albert Einstein
stress_centrality: Albert Einstein
radiality_centrality: Niels Abel"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">all_centrals</span>()
betweenness_centrality<span class="pl-k">:</span> Albert Einstein
closeness_centrality<span class="pl-k">:</span> Leonhard Euler
degree_centrality<span class="pl-k">:</span> Albert Einstein
eigenvector_centrality<span class="pl-k">:</span> Claude<span class="pl-k">-</span>Louis Navier
katz_centrality<span class="pl-k">:</span> David Mumford
pagerank<span class="pl-k">:</span> Albert Einstein
stress_centrality<span class="pl-k">:</span> Albert Einstein
radiality_centrality<span class="pl-k">:</span> Niels Abel</pre></div>
<p dir="auto">We can also ask about largest connected clusters (see <code>get_clusters</code> and <code>trim_graph</code> functions), and check out the <code>node_histogram</code> function for ways to directly probe the demographics of the folks represented in this dataset (unsurprisingly, they are overwhelmingly European and male)...</p>
<h2 dir="auto"><a id="user-content-i-want-to-contribute" class="anchor" aria-hidden="true" href="#i-want-to-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>I want to contribute!</h2>
<p dir="auto">There are plenty of ways you can help! Here are a few:</p>
<ul dir="auto">
<li>Add more data! Please send PR's to the repo and make sure you add to both <code>nodes.csv</code> and <code>edges.csv</code> appropriately, including as much information as you can verify, and being sure that the graph builds properly before PRing.</li>
<li>Help with graph layout. The automatic layout (and all the ones built into NetworkLayout.jl that I've played with) leaves a fair bit to be desired at the moment. If you're handy with that sort of thing, I'd love help with it!</li>
<li>Feel free also to PR other analysis functions or anything you'd like!</li>
</ul>
</article></div>