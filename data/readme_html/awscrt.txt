<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-awscrt" class="anchor" aria-hidden="true" href="#awscrt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AWSCRT</h1>
<table>
<thead>
<tr>
<th><g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png">‚ùó</g-emoji> This is unfinished, early software. Expect bugs and breakages!</th>
</tr>
</thead>
</table>
<p dir="auto"><a href="https://Octogonapus.github.io/AWSCRT.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://Octogonapus.github.io/AWSCRT.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Octogonapus/AWSCRT.jl/actions/workflows/TagBot.yml"><img src="https://github.com/Octogonapus/AWSCRT.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a>
<a href="https://github.com/Octogonapus/AWSCRT.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/Octogonapus/AWSCRT.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Octogonapus/AWSCRT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb0326defdd399c86966b1c4187b3a329aea4df025c2a4a53145f4480b7ef9e4/68747470733a2f2f636f6465636f762e696f2f67682f4f63746f676f6e617075732f4157534352542e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d56464a38374a4f46314f" alt="codecov" data-canonical-src="https://codecov.io/gh/Octogonapus/AWSCRT.jl/branch/main/graph/badge.svg?token=VFJ87JOF1O" style="max-width: 100%;"></a></p>
<p dir="auto">A high-level wrapper for the code in <a href="https://github.com/Octogonapus/LibAWSCRT.jl">LibAWSCRT.jl</a>.
Currently, only an MQTT client is implemented.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add AWSCRT"><pre>pkg<span class="pl-k">&gt;</span> add AWSCRT</pre></div>
<h2 dir="auto"><a id="user-content-mqtt-client" class="anchor" aria-hidden="true" href="#mqtt-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MQTT Client</h2>
<h3 dir="auto"><a id="user-content-create-a-client" class="anchor" aria-hidden="true" href="#create-a-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create a client</h3>
<p dir="auto">A client requires a TLS context that describes how the connection should (or should not) be secured.
Here, we use mutual TLS. The certificate and the private key here are those given to you by AWS IoT Core when you
create a new certificate ("Device certificate" <code>foo.pem.crt</code> and "Private key file" <code>foo-private.pem.key</code> in
the AWS Console).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tls_ctx_options = create_client_with_mtls(
    ENV[&quot;CERT_STRING&quot;],
    ENV[&quot;PRI_KEY_STRING&quot;],
    ca_filepath = joinpath(@__DIR__, &quot;certs&quot;, &quot;AmazonRootCA1.pem&quot;),
    alpn_list = [&quot;x-amzn-mqtt-ca&quot;],
)
tls_ctx = ClientTLSContext(tls_ctx_options)
client = MQTTClient(tls_ctx)"><pre>tls_ctx_options <span class="pl-k">=</span> <span class="pl-c1">create_client_with_mtls</span>(
    <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CERT_STRING<span class="pl-pds">"</span></span>],
    <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>PRI_KEY_STRING<span class="pl-pds">"</span></span>],
    ca_filepath <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>certs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>AmazonRootCA1.pem<span class="pl-pds">"</span></span>),
    alpn_list <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>x-amzn-mqtt-ca<span class="pl-pds">"</span></span>],
)
tls_ctx <span class="pl-k">=</span> <span class="pl-c1">ClientTLSContext</span>(tls_ctx_options)
client <span class="pl-k">=</span> <span class="pl-c1">MQTTClient</span>(tls_ctx)</pre></div>
<h3 dir="auto"><a id="user-content-connect-a-client" class="anchor" aria-hidden="true" href="#connect-a-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connect a client</h3>
<p dir="auto">We can create a connection using the client and connect it to the MQTT endpoint (the server).
<code>ENV["ENDPOINT"]</code> is something like <code>dsf9dh7fd7s9f8-ats.iot.us-east-1.amazonaws.com</code>.
A will is not required, but we set one here.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="topic = &quot;my-topic&quot;
connection = MQTTConnection(client)
task = connect(
    connection,
    ENV[&quot;ENDPOINT&quot;],
    8883,
    &quot;my-client-id&quot;;
    will = Will(topic, AWS_MQTT_QOS_AT_LEAST_ONCE, &quot;The client has gone offline!&quot;, false),
)
fetch(task) # wait for the connection to be opened (or fail)"><pre>topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>my-topic<span class="pl-pds">"</span></span>
connection <span class="pl-k">=</span> <span class="pl-c1">MQTTConnection</span>(client)
task <span class="pl-k">=</span> <span class="pl-c1">connect</span>(
    connection,
    <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>ENDPOINT<span class="pl-pds">"</span></span>],
    <span class="pl-c1">8883</span>,
    <span class="pl-s"><span class="pl-pds">"</span>my-client-id<span class="pl-pds">"</span></span>;
    will <span class="pl-k">=</span> <span class="pl-c1">Will</span>(topic, AWS_MQTT_QOS_AT_LEAST_ONCE, <span class="pl-s"><span class="pl-pds">"</span>The client has gone offline!<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>),
)
<span class="pl-c1">fetch</span>(task) <span class="pl-c"><span class="pl-c">#</span> wait for the connection to be opened (or fail)</span></pre></div>
<h3 dir="auto"><a id="user-content-subscribe" class="anchor" aria-hidden="true" href="#subscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subscribe</h3>
<p dir="auto">Once we are connected, we can subscribe to a topic(s).
A callback is passed with the subscribe call; this callback is called for each received message.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="topic = &quot;test-topic&quot;
task, id = subscribe(
    connection,
    topic,
    AWS_MQTT_QOS_AT_LEAST_ONCE,
    (topic::String, payload::String, dup::Bool, qos::aws_mqtt_qos, retain::Bool) -&gt; begin
        @info &quot;Topic $topic received message: $payload&quot;
    end,
)
fetch(task) # wait for the server to tell us the subscription was received"><pre>topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test-topic<span class="pl-pds">"</span></span>
task, id <span class="pl-k">=</span> <span class="pl-c1">subscribe</span>(
    connection,
    topic,
    AWS_MQTT_QOS_AT_LEAST_ONCE,
    (topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">::</span><span class="pl-c1">String</span>, dup<span class="pl-k">::</span><span class="pl-c1">Bool</span>, qos<span class="pl-k">::</span><span class="pl-c1">aws_mqtt_qos</span>, retain<span class="pl-k">::</span><span class="pl-c1">Bool</span>) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
        <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Topic <span class="pl-v">$topic</span> received message: <span class="pl-v">$payload</span><span class="pl-pds">"</span></span>
    <span class="pl-k">end</span>,
)
<span class="pl-c1">fetch</span>(task) <span class="pl-c"><span class="pl-c">#</span> wait for the server to tell us the subscription was received</span></pre></div>
<h3 dir="auto"><a id="user-content-publish" class="anchor" aria-hidden="true" href="#publish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Publish</h3>
<p dir="auto">Once we are connected, we can publish a payload to a topic.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="topic = &quot;test-topic&quot;
payload = Random.randstring(48)
task, id = publish(connection, topic, payload, AWS_MQTT_QOS_AT_LEAST_ONCE)
fetch(task) # wait for the server to tell us the published message was received"><pre>topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test-topic<span class="pl-pds">"</span></span>
payload <span class="pl-k">=</span> Random<span class="pl-k">.</span><span class="pl-c1">randstring</span>(<span class="pl-c1">48</span>)
task, id <span class="pl-k">=</span> <span class="pl-c1">publish</span>(connection, topic, payload, AWS_MQTT_QOS_AT_LEAST_ONCE)
<span class="pl-c1">fetch</span>(task) <span class="pl-c"><span class="pl-c">#</span> wait for the server to tell us the published message was received</span></pre></div>
<h3 dir="auto"><a id="user-content-clean-up" class="anchor" aria-hidden="true" href="#clean-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Clean Up</h3>
<p dir="auto">We can also unsubscribe and disconnect.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="task, id = unsubscribe(connection, topic)
fetch(task) # wait for the server to tell us the unsubscription was received

task = disconnect(connection)
fetch(task) # wait for the connection to be closed"><pre>task, id <span class="pl-k">=</span> <span class="pl-c1">unsubscribe</span>(connection, topic)
<span class="pl-c1">fetch</span>(task) <span class="pl-c"><span class="pl-c">#</span> wait for the server to tell us the unsubscription was received</span>

task <span class="pl-k">=</span> <span class="pl-c1">disconnect</span>(connection)
<span class="pl-c1">fetch</span>(task) <span class="pl-c"><span class="pl-c">#</span> wait for the connection to be closed</span></pre></div>
<h3 dir="auto"><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>See Also</h3>
<ul dir="auto">
<li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html" rel="nofollow">AWS MQTT Documentation</a></li>
<li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html" rel="nofollow">AWS Protocol Port Mapping and Authentication Documentation</a></li>
<li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/topics.html" rel="nofollow">AWS MQTT Topic Documentation</a></li>
<li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html" rel="nofollow">AWS IoT Client Certificate Documentation</a></li>
</ul>
</article></div>