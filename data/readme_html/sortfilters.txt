<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sortfilters" class="anchor" aria-hidden="true" href="#sortfilters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SortFilters</h1>
<p>Moving quantiles implemented as fast moving window sort algorithm.
Implemented both as functions over a moving window, and stateful filter objects.</p>
<p>Setting an appropriate probability level, you can get: moving median, minimum, maximum, quartiles and so on.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SortFilters
"><pre>pkg<span class="pl-k">&gt;</span> add SortFilters</pre></div>
<h2><a id="user-content-comparison-with-other-packages" class="anchor" aria-hidden="true" href="#comparison-with-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparison with other packages</h2>
<p>There are two other Julia packages with overlapping functionality for moving quantiles functions:</p>
<ul>
<li><a href="https://github.com/JeffreySarnoff/RollingFunctions.jl">RollingFunctions.jl</a></li>
<li><a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.jl</a></li>
</ul>
<p>Compared to these packages, <a href="https://github.com/sairus7/SortFilters.jl">SortFilters.jl</a> provides significant speed-up (3x-20x faster), depending on window size (benchmark available at <a href="https://github.com/sairus7/SortFilters.jl/blob/master/examples/benchmark.jl">examples/benchmark.jl</a>):</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20798349/83455606-e42d1280-a466-11ea-8b48-0e375a7dcaa0.png"><img src="https://user-images.githubusercontent.com/20798349/83455606-e42d1280-a466-11ea-8b48-0e375a7dcaa0.png" alt="plot" style="max-width:100%;"></a></p>
<p>Also <a href="https://github.com/sairus7/SortFilters.jl">SortFilters.jl</a> provides stateful filter objects, allowing you to process a signal of indefinite length in RAM-friendly chunks, similar to <a href="https://juliadsp.github.io/DSP.jl/stable/filters/#stateful-filter-objects-1" rel="nofollow">DSP.jl</a>.</p>
<p>However, if all you need is moving maximum, minimum, or range, then you should use another package, <a href="https://github.com/sairus7/MaxMinFilters.jl">MaxMinFilters.jl</a>, which implement much faster algorithms than moving sort.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p><a href="https://github.com/sairus7/SortFilters.jl/blob/master/examples/example.jl">examples/example.jl</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
using SortFilters
using Random

Random.seed!(5)
len = 200
x = trunc.(Int, 100*randn(len))
x = cumsum(x)
w = 20

# when p represents probability rational number in the range of [0..1]
probability = 0.5
# output is converted to rational type of p
moving_median = movsort(x, w, probability)

# when p represents integer percent number in the range of [0..100]
percent = 50
# output preserves input type and is calculated as simplified quantiles
# from input elements at nearest index
moving_median_int = movsort(x, w, percent)

# also you can get several quantiles at once:
p = (0.25, 0.75)
moving_quartiles = movsort(x, w, p)
# and then calculate interquantile range
moving_iqr = map( x-&gt;x[2]-x[1], moving_quartiles)
moving_q25 = map( x-&gt;x[1], moving_quartiles)
moving_q75 = map( x-&gt;x[2], moving_quartiles)

# notice that quantiles are calculated with a delay of window/2
# start boundary condition is set as a repeated first point
plot(x, label = &quot;x&quot;, legend = :topleft)
plot!(moving_median, label = &quot;exact moving median&quot;)
plot!(moving_median_int, label = &quot;simplified moving median&quot;)
plot!(moving_q25, label = &quot;25th quartile&quot;)
plot!(moving_q75, label = &quot;75th quartile&quot;)

#png(&quot;plot1.png&quot;)
"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> SortFilters
<span class="pl-k">using</span> Random

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">5</span>)
len <span class="pl-k">=</span> <span class="pl-c1">200</span>
x <span class="pl-k">=</span> <span class="pl-c1">trunc</span>.(Int, <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(len))
x <span class="pl-k">=</span> <span class="pl-c1">cumsum</span>(x)
w <span class="pl-k">=</span> <span class="pl-c1">20</span>

<span class="pl-c"><span class="pl-c">#</span> when p represents probability rational number in the range of [0..1]</span>
probability <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
<span class="pl-c"><span class="pl-c">#</span> output is converted to rational type of p</span>
moving_median <span class="pl-k">=</span> <span class="pl-c1">movsort</span>(x, w, probability)

<span class="pl-c"><span class="pl-c">#</span> when p represents integer percent number in the range of [0..100]</span>
percent <span class="pl-k">=</span> <span class="pl-c1">50</span>
<span class="pl-c"><span class="pl-c">#</span> output preserves input type and is calculated as simplified quantiles</span>
<span class="pl-c"><span class="pl-c">#</span> from input elements at nearest index</span>
moving_median_int <span class="pl-k">=</span> <span class="pl-c1">movsort</span>(x, w, percent)

<span class="pl-c"><span class="pl-c">#</span> also you can get several quantiles at once:</span>
p <span class="pl-k">=</span> (<span class="pl-c1">0.25</span>, <span class="pl-c1">0.75</span>)
moving_quartiles <span class="pl-k">=</span> <span class="pl-c1">movsort</span>(x, w, p)
<span class="pl-c"><span class="pl-c">#</span> and then calculate interquantile range</span>
moving_iqr <span class="pl-k">=</span> <span class="pl-c1">map</span>( x<span class="pl-k">-&gt;</span>x[<span class="pl-c1">2</span>]<span class="pl-k">-</span>x[<span class="pl-c1">1</span>], moving_quartiles)
moving_q25 <span class="pl-k">=</span> <span class="pl-c1">map</span>( x<span class="pl-k">-&gt;</span>x[<span class="pl-c1">1</span>], moving_quartiles)
moving_q75 <span class="pl-k">=</span> <span class="pl-c1">map</span>( x<span class="pl-k">-&gt;</span>x[<span class="pl-c1">2</span>], moving_quartiles)

<span class="pl-c"><span class="pl-c">#</span> notice that quantiles are calculated with a delay of window/2</span>
<span class="pl-c"><span class="pl-c">#</span> start boundary condition is set as a repeated first point</span>
<span class="pl-c1">plot</span>(x, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, legend <span class="pl-k">=</span> <span class="pl-c1">:topleft</span>)
<span class="pl-c1">plot!</span>(moving_median, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>exact moving median<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(moving_median_int, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>simplified moving median<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(moving_q25, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>25th quartile<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(moving_q75, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>75th quartile<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>png("plot1.png")</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20798349/83455610-e68f6c80-a466-11ea-8fb3-7b0c18aa92d0.png"><img src="https://user-images.githubusercontent.com/20798349/83455610-e68f6c80-a466-11ea-8fb3-7b0c18aa92d0.png" alt="plot1" style="max-width:100%;"></a></p>
</article></div>