<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-brillouinzonemeshes" class="anchor" aria-hidden="true" href="#brillouinzonemeshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BrillouinZoneMeshes</h1>
<p dir="auto"><a href="https://numericalEFT.github.io/BrillouinZoneMeshes.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://numericalEFT.github.io/BrillouinZoneMeshes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/numericalEFT/BrillouinZoneMeshes.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/numericalEFT/BrillouinZoneMeshes.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/numericalEFT/BrillouinZoneMeshes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b4a5a809a25ff81c35166c2f2ac1748931f6770f5c0af29d38ae0af86a525c37/68747470733a2f2f636f6465636f762e696f2f67682f6e756d65726963616c4546542f4272696c6c6f75696e5a6f6e654d65736865732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/numericalEFT/BrillouinZoneMeshes.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-brillouinzonemeshes-1" class="anchor" aria-hidden="true" href="#brillouinzonemeshes-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BrillouinZoneMeshes</h1>
<p dir="auto">Documentation for <a href="https://github.com/numericalEFT/BrillouinZoneMeshes.jl">BrillouinZoneMeshes</a>.</p>
<p dir="auto">This package provides general-purpose multi-dimensional meshes for numerical
representation of continuous functions and specialized meshes
for functions on Brillouin Zones.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Setup with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    DIM = 2;
    # square lattice
    lattice = Matrix([1.0 0; 0 1]');
    # create Brillouin zone
    br = BZMeshes.Cell(lattice=lattice);
    # uniform mesh
    umesh = BZMeshes.UniformBZMesh(cell=br, size=(4, 4));
    # symmetry reduce map
    mm = MeshMaps.MeshMap(umesh);
    # reduced mesh
    rmesh = ReducedBZMesh(umesh, mm);"><pre>    DIM <span class="pl-k">=</span> <span class="pl-c1">2</span>;
    <span class="pl-c"><span class="pl-c">#</span> square lattice</span>
    lattice <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>([<span class="pl-c1">1.0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>);
    <span class="pl-c"><span class="pl-c">#</span> create Brillouin zone</span>
    br <span class="pl-k">=</span> BZMeshes<span class="pl-k">.</span><span class="pl-c1">Cell</span>(lattice<span class="pl-k">=</span>lattice);
    <span class="pl-c"><span class="pl-c">#</span> uniform mesh</span>
    umesh <span class="pl-k">=</span> BZMeshes<span class="pl-k">.</span><span class="pl-c1">UniformBZMesh</span>(cell<span class="pl-k">=</span>br, size<span class="pl-k">=</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>));
    <span class="pl-c"><span class="pl-c">#</span> symmetry reduce map</span>
    mm <span class="pl-k">=</span> MeshMaps<span class="pl-k">.</span><span class="pl-c1">MeshMap</span>(umesh);
    <span class="pl-c"><span class="pl-c">#</span> reduced mesh</span>
    rmesh <span class="pl-k">=</span> <span class="pl-c1">ReducedBZMesh</span>(umesh, mm);</pre></div>
<p dir="auto">and here are some examples of usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BrillouinZoneMeshes; DIM = 2; lattice = Matrix([1.0 0; 0 1]'); br = BZMeshes.Cell(lattice=lattice); umesh = BZMeshes.UniformBZMesh(cell=br, size=(4, 4)); mm = MeshMaps.MeshMap(umesh); rmesh = ReducedBZMesh(umesh, mm);

julia&gt; length(umesh), length(rmesh)
(16, 3)

julia&gt; AbstractMeshes.locate(rmesh, [1,1])
3

julia&gt; rmesh[3]
2-element StaticArraysCore.SVector{2, Float64} with indices SOneTo(2):
 0.7853981633974483
 0.7853981633974483

julia&gt; AbstractMeshes.volume(rmesh) / 4π^2
1.0

julia&gt; data = ones(3)
3-element Vector{Float64}:
 1.0
 1.0
 1.0

julia&gt; AbstractMeshes.integrate(data, rmesh)
39.47841760435743

julia&gt; AbstractMeshes.interp(data, rmesh, [0.3,-0.2])
1.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BrillouinZoneMeshes; DIM <span class="pl-k">=</span> <span class="pl-c1">2</span>; lattice <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>([<span class="pl-c1">1.0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>); br <span class="pl-k">=</span> BZMeshes<span class="pl-k">.</span><span class="pl-c1">Cell</span>(lattice<span class="pl-k">=</span>lattice); umesh <span class="pl-k">=</span> BZMeshes<span class="pl-k">.</span><span class="pl-c1">UniformBZMesh</span>(cell<span class="pl-k">=</span>br, size<span class="pl-k">=</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)); mm <span class="pl-k">=</span> MeshMaps<span class="pl-k">.</span><span class="pl-c1">MeshMap</span>(umesh); rmesh <span class="pl-k">=</span> <span class="pl-c1">ReducedBZMesh</span>(umesh, mm);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(umesh), <span class="pl-c1">length</span>(rmesh)
(<span class="pl-c1">16</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> AbstractMeshes<span class="pl-k">.</span><span class="pl-c1">locate</span>(rmesh, [<span class="pl-c1">1</span>,<span class="pl-c1">1</span>])
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> rmesh[<span class="pl-c1">3</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArraysCore<span class="pl-k">.</span>SVector{<span class="pl-c1">2</span>, Float64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.7853981633974483</span>
 <span class="pl-c1">0.7853981633974483</span>

julia<span class="pl-k">&gt;</span> AbstractMeshes<span class="pl-k">.</span><span class="pl-c1">volume</span>(rmesh) <span class="pl-k">/</span> <span class="pl-c1">4</span>π<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> AbstractMeshes<span class="pl-k">.</span><span class="pl-c1">integrate</span>(data, rmesh)
<span class="pl-c1">39.47841760435743</span>

julia<span class="pl-k">&gt;</span> AbstractMeshes<span class="pl-k">.</span><span class="pl-c1">interp</span>(data, rmesh, [<span class="pl-c1">0.3</span>,<span class="pl-k">-</span><span class="pl-c1">0.2</span>])
<span class="pl-c1">1.0</span></pre></div>
<h2 dir="auto"><a id="user-content-general" class="anchor" aria-hidden="true" href="#general"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General</h2>
<p dir="auto">Various mesh grids for different purposes are defined as concrete types
derived from <code>AbstractMeshes.AbstractMesh</code>. All of them are supposed to
behave as <code>AbstractArray</code> with elements being <code>SVector</code> representing the
mesh points in Cartesian coordinates.</p>
<p dir="auto">In addition to the interface of <code>AbstractMeshes.AbstractMesh</code>, four useful
methods are defined: <code>locate</code>, <code>volume</code>, <code>interp</code>, and <code>integrate</code>.</p>
<ul dir="auto">
<li><code>locate(mesh, x)</code> finds the mesh point nearest to x</li>
<li><code>volume(mesh, i)</code> gives the volume represented by mesh point <code>mesh[i]</code></li>
<li><code>interp(data, mesh, x)</code> gives the interpolation of <code>data</code> on <code>mesh</code> at    point <code>x</code></li>
<li><code>integrate(data, mesh)</code> compute integration of <code>data</code> on <code>mesh</code></li>
</ul>
<p dir="auto">If it is known that some of the mesh points are guaranteed to have the same
data value, it's possible to define a <code>MeshMap</code> to reveal this fact and
create a <code>ReducedBZMesh</code> to save storage space.</p>
<h2 dir="auto"><a id="user-content-brillouin-zone" class="anchor" aria-hidden="true" href="#brillouin-zone"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Brillouin zone</h2>
<p dir="auto">The information of Brillouin zone is stored in <code>Cells.Cell</code>.
Including lattice vector, reciprocal lattice vector and their inverse;
volume of unit cell and reciprocal unit cell; G vectors for extended
Brillouin zone and symmetries.</p>
<h2 dir="auto"><a id="user-content-uniform-meshes" class="anchor" aria-hidden="true" href="#uniform-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Uniform Meshes</h2>
<p dir="auto">Uniform meshes are defined as uniformly distributed meshes on a
parallellogram area described by an origin and a set of lattice vectors.
The simplest one is <code>BaseMesh.UMesh</code>, while <code>BZMeshes.UniformBZMesh</code>
containes additional information about the Brillouin zone stored in
its <code>cell</code> field.</p>
<p dir="auto">Uniform meshes are conventionally used in various <em>ab initio</em> calculations.
In this package various frequently used meshes, such as Gamma-centered and
Monkhorst-Pack meshes, could be generated via <code>BZMeshes.UniformBZMesh</code> with
different parameters. The default parameter of the constructor of
<code>BZMeshes.UniformBZMesh</code> generates Gamma-centered mesh, while two constructors
for M-P mesh, <code>Monkhorst_Pack</code> and <code>DFTK_Monkhorst_Pack</code>, follow conventions
from VASP and DFTK respectively.</p>
</article></div>