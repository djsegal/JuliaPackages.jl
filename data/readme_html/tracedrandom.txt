<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tracedrandomjl" class="anchor" aria-hidden="true" href="#tracedrandomjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TracedRandom.jl</h1>
<p>Allows for the optional specification of traced addresses (i.e. variable names)
in calls to <code>rand</code> and other primitive functions in <code>Random</code>. Providing this
information allows ordinary Julia code to be "probabilistic-programming-ready".</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rand(:u, Float64, 10)
0.6807722985442752

julia&gt; randn(:z, 3)
3-element Array{Float64,1}:
 -0.39256954974212915
 -0.8048893694012202
 -1.0272306373097992

julia&gt; randperm(:perm)
4-element Array{Int64,1}:
 1
 3
 2
 4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">:u</span>, Float64, <span class="pl-c1">10</span>)
<span class="pl-c1">0.6807722985442752</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">randn</span>(<span class="pl-c1">:z</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.39256954974212915</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8048893694012202</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0272306373097992</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">randperm</span>(<span class="pl-c1">:perm</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span></pre></div>
<p>In addition, a call to some <code>fn::Function</code> can be annotated with an address
by wrapping it in <code>rand</code> call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; gaussian_mixture(μs) = randn(:z) + μs[rand(:k, 1:length(μs))]
julia&gt; rand(:x, gaussian_mixture, [1, 10])
9.594800995267331
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">gaussian_mixture</span>(μs) <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">:z</span>) <span class="pl-k">+</span> μs[<span class="pl-c1">rand</span>(<span class="pl-c1">:k</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(μs))]
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">:x</span>, gaussian_mixture, [<span class="pl-c1">1</span>, <span class="pl-c1">10</span>])
<span class="pl-c1">9.594800995267331</span></pre></div>
<p>By default, the addresses (<code>:x</code>, <code>:z</code>, <code>:k</code> and <code>:perm</code> in the examples above)
are ignored, but they can be intercepted via meta-programming
(see <a href="https://github.com/probcomp/Genify.jl"><code>Genify.jl</code></a>) to support inference
in probabilistic programming systems such as <a href="https://www.gen.dev/" rel="nofollow"><code>Gen</code></a>.
Addresses can be specified as <code>Symbol</code>s, or as pairs from symbols
to other types (<code>Pair{Symbol,&lt;:Any}</code>).</p>
</article></div>