<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-latticerules" class="anchor" aria-hidden="true" href="#latticerules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LatticeRules</h1>
<table>
<thead>
<tr>
<th><strong>Documentation</strong></th>
<th><strong>Build Status</strong></th>
<th><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://PieterjanRobbe.github.io/LatticeRules.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://PieterjanRobbe.github.io/LatticeRules.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td><a href="https://github.com/PieterjanRobbe/LatticeRules.jl/actions"><img src="https://github.com/PieterjanRobbe/LatticeRules.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://travis-ci.com/PieterjanRobbe/LatticeRules.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c89d295bccc645423b27f43a62ecedd33574b69a7102ec06e1213aa9805753ea/68747470733a2f2f7472617669732d63692e636f6d2f5069657465726a616e526f6262652f4c61747469636552756c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/PieterjanRobbe/LatticeRules.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/PieterjanRobbe/LatticeRules-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9f24f14b4da0bc78cc3fef53d4821b35ae5419d460af5a9c68a7964ac41e229/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f5069657465726a616e526f6262652f4c61747469636552756c65732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/PieterjanRobbe/LatticeRules.jl?svg=true" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/PieterjanRobbe/LatticeRules.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ad30cab1489c74a950cbdf7f0ac6d226f11e4c1fba60244c9394461dad674fd/68747470733a2f2f636f6465636f762e696f2f67682f5069657465726a616e526f6262652f4c61747469636552756c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/PieterjanRobbe/LatticeRules.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a> <a href="https://coveralls.io/github/PieterjanRobbe/LatticeRules.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a4bbce15d15187011a98dd869aad4e35ab830e1a45a10418cd1319d6b992caaf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5069657465726a616e526f6262652f4c61747469636552756c65732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/PieterjanRobbe/LatticeRules.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This module provides an implementation of rank-1 lattice rules. Lattice rules generate "quasi-random" sequences of points in <code>d</code> dimensions which are equally distributed over the <code>d</code>-dimensional unit cube [0,1]<sup>d</sup>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To initialize a rank-1 lattice rule <code>lattice_rule</code> in <code>d</code> dimensions, use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LatticeRules
my_lattice = LatticeRule(d)
"><pre><span class="pl-k">using</span> LatticeRules
my_lattice <span class="pl-k">=</span> <span class="pl-c1">LatticeRule</span>(d)</pre></div>
<p>Then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getpoint(my_lattice, 0)
"><pre><span class="pl-c1">getpoint</span>(my_lattice, <span class="pl-c1">0</span>)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_lattice[0]
"><pre>my_lattice[<span class="pl-c1">0</span>]</pre></div>
<p>returns the first point of the lattice, and</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_lattice[k]
"><pre>my_lattice[k]</pre></div>
<p>returns the <code>k</code>th point of the lattice.</p>
<p>For a <code>d</code>-dimensional function <code>f</code>,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f.(my_lattice[1:N])
"><pre><span class="pl-c1">f</span>.(my_lattice[<span class="pl-c1">1</span><span class="pl-k">:</span>N])</pre></div>
<p>gives an approximation for the integral of <code>f</code> using <code>N</code> lattice points.</p>
<p>Providing your own generating vector <code>z</code> is possible with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_other_lattice = LatticeRule(z, d, n)
"><pre>my_other_lattice <span class="pl-k">=</span> <span class="pl-c1">LatticeRule</span>(z, d, n)</pre></div>
<p>where <code>n</code> is the maximum number of points in the lattice.</p>
<p>In practice, it is more useful to have a shifted rank-1 lattice rule</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_shifted_lattice = ShiftedLatticeRule(d)
"><pre>my_shifted_lattice <span class="pl-k">=</span> <span class="pl-c1">ShiftedLatticeRule</span>(d)</pre></div>
<p>to obtain an error estimate in the same way as in the Monte Carlo method.</p>
<p>An existing lattice rule can be turned into a randomly shifted lattice rule using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_other_shifted_lattice = ShiftedLatticeRule(my_lattice)
"><pre>my_other_shifted_lattice <span class="pl-k">=</span> <span class="pl-c1">ShiftedLatticeRule</span>(my_lattice)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="shift = rand(ndims(my_lattice)) 
my_final_shifted_lattice = ShiftedLatticeRule(my_lattice, shift)
"><pre>shift <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">ndims</span>(my_lattice)) 
my_final_shifted_lattice <span class="pl-k">=</span> <span class="pl-c1">ShiftedLatticeRule</span>(my_lattice, shift)</pre></div>
<p>optionally providing the random shift vector <code>shift</code>.</p>
<p>More extensive documentation can be found <a href="https://PieterjanRobbe.github.io/LatticeRules.jl/dev" rel="nofollow">here</a>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>A classic toy example to illustrate the Monte Carlo method is to approximate the value of π by throwing random darts on a square board. Suppose we draw a circle on the board with a diameter equal to the length of one side of the square. Then, the ratio of the area of the circle to the area of the square is π/4. If we now repeatedly throw darts at random on the board, the ratio of the number of darts that landed inside the circle and the total number of darts, multiplied by 4, is an approximation to π.</p>
<p>First, generate a lattice rule in two dimensions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LatticeRules, Statistics
my_lattice = LatticeRule(2)
"><pre><span class="pl-k">using</span> LatticeRules, Statistics
my_lattice <span class="pl-k">=</span> <span class="pl-c1">LatticeRule</span>(<span class="pl-c1">2</span>)</pre></div>
<p>The function <code>inside_circle</code> checks if a dart is inside the circle:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="inside_circle(x) = x[1]*x[1] + x[2]*x[2] &lt; 1
"><pre><span class="pl-en">inside_circle</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;</span> <span class="pl-c1">1</span></pre></div>
<p>Our approximation for the value of π is</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Q = 4 * mean(inside_circle.(collect(my_lattice)))
"><pre><code>Q = 4 * mean(inside_circle.(collect(my_lattice)))
</code></pre></div>
<p>with <code>Q = 3.1416015625</code>.</p>
<h2><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>See also</h2>
<ul>
<li><a href="https://people.cs.kuleuven.be/~dirk.nuyens/qmc-generators/" rel="nofollow">The "Magic Point Shop" of QMC point generators and generating vectors</a> by D. Nuyens</li>
<li><a href="https://web.maths.unsw.edu.au/~fkuo/lattice/index.html" rel="nofollow">Lattice rule generating vectors</a> by F. Y. Kuo.</li>
</ul>
</article></div>