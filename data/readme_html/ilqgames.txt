<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ilqgamesjl" class="anchor" aria-hidden="true" href="#ilqgamesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>iLQGames.jl</h1>
<p dir="auto"><a href="https://github.com/lassepe/iLQGames.jl/actions/workflows/ci.yml"><img src="https://github.com/lassepe/iLQGames.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lassepe/iLQGames.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/145747217dcfda1c08c62c4691ab6872f0e89e723d52e72de5a14c03ac8ba65c/68747470733a2f2f636f6465636f762e696f2f67682f6c6173736570652f694c5147616d65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lassepe/iLQGames.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/BSD-3-Clause" rel="nofollow"><img src="https://camo.githubusercontent.com/8ccf186e7288af6d88a1f6a930c0fcc4e7a8a9936b34e07629d815d1eab4d977/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-BSD%203--Clause-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">iLQGames.jl is a framework for rapidly designing and solving nonlinear general-sum differential
games, built around <a href="https://arxiv.org/abs/1909.04694" rel="nofollow">iterative linear-quadratic game approximations</a>.</p>
<p dir="auto">A brief introduction to this framework and benchmarks against a <a href="https://github.com/HJReachability/ilqgames">C++
implementation</a>
can be found in this <a href="https://arxiv.org/abs/2002.10185" rel="nofollow">short workshop manuscript</a>.
Finally, <a href="https://arxiv.org/abs/2002.04354" rel="nofollow">this paper</a> demonstrates the flexibility and performance of iLQGames.jl
by combining it with a particle-filter scheme to reason about uncertainty in
differential games in real-time.</p>
<p dir="auto"><a href="https://www.dropbox.com/s/y65qxltloz6fh3q/EMAS-WorkshopTalk.webm?dl=0" rel="nofollow"><img src="media/workshop-video-preview.png" alt="Watch the video" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Within the Julia REPL run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(PackageSpec(url=&quot;https://github.com/lassepe/iLQGames.jl&quot;))"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/lassepe/iLQGames.jl<span class="pl-pds">"</span></span>))</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Here is an example of two players controlling a <em>single</em> 4D-unicycle.
Player-1 controls the steering, Player-2 controls the acceleration.</p>
<h4 dir="auto"><a id="user-content-1-describe-dynamics" class="anchor" aria-hidden="true" href="#1-describe-dynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. Describe Dynamics</h4>
<p dir="auto">We define a Unicycle as a subtype of our <code>ControlSystem</code> type and implement the
differential equation by overloading <code>dx</code> for our type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using iLQGames
import iLQGames: dx

# parameters: number of states, number of inputs, sampling time, horizon
nx, nu, ΔT, game_horizon = 4, 2, 0.1, 200

# setup the dynamics
struct Unicycle &lt;: ControlSystem{ΔT,nx,nu} end
# the differential equation of a uncycle with state: (px, py, phi, v)
dx(cs::Unicycle, x, u, t) = SVector(x[4]cos(x[3]), x[4]sin(x[3]), u[1], u[2])
dynamics = Unicycle()
"><pre><span class="pl-k">using</span> iLQGames
<span class="pl-k">import</span> iLQGames<span class="pl-k">:</span> dx

<span class="pl-c"><span class="pl-c">#</span> parameters: number of states, number of inputs, sampling time, horizon</span>
nx, nu, ΔT, game_horizon <span class="pl-k">=</span> <span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">200</span>

<span class="pl-c"><span class="pl-c">#</span> setup the dynamics</span>
<span class="pl-k">struct</span> Unicycle <span class="pl-k">&lt;:</span> <span class="pl-c1">ControlSystem{ΔT,nx,nu}</span> <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> the differential equation of a uncycle with state: (px, py, phi, v)</span>
<span class="pl-en">dx</span>(cs<span class="pl-k">::</span><span class="pl-c1">Unicycle</span>, x, u, t) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(x[<span class="pl-c1">4</span>]<span class="pl-c1">cos</span>(x[<span class="pl-c1">3</span>]), x[<span class="pl-c1">4</span>]<span class="pl-c1">sin</span>(x[<span class="pl-c1">3</span>]), u[<span class="pl-c1">1</span>], u[<span class="pl-c1">2</span>])
dynamics <span class="pl-k">=</span> <span class="pl-c1">Unicycle</span>()
</pre></div>
<h4 dir="auto"><a id="user-content-2-setup-costs" class="anchor" aria-hidden="true" href="#2-setup-costs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Setup Costs</h4>
<p dir="auto">To setup the costs encoding each players objectives, we can derive a custom subtype
from <code>PlayerCost</code>, or, as done here, simply hand the cost function as a lambda function
to the <code>FunctionPlayerCost</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# player-1 wants the unicycle to stay close to the origin,
# player-2 wants to keep close to 1 m/s
costs = (FunctionPlayerCost((g, x, u, t) -&gt; (x[1]^2 + x[2]^2 + u[1]^2)),
         FunctionPlayerCost((g, x, u, t) -&gt; ((x[4] - 1)^2 + u[2]^2)))
# indices of inputs that each player controls
player_inputs = (SVector(1), SVector(2))"><pre><span class="pl-c"><span class="pl-c">#</span> player-1 wants the unicycle to stay close to the origin,</span>
<span class="pl-c"><span class="pl-c">#</span> player-2 wants to keep close to 1 m/s</span>
costs <span class="pl-k">=</span> (<span class="pl-c1">FunctionPlayerCost</span>((g, x, u, t) <span class="pl-k">-&gt;</span> (x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> u[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)),
         <span class="pl-c1">FunctionPlayerCost</span>((g, x, u, t) <span class="pl-k">-&gt;</span> ((x[<span class="pl-c1">4</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> u[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)))
<span class="pl-c"><span class="pl-c">#</span> indices of inputs that each player controls</span>
player_inputs <span class="pl-k">=</span> (<span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>))</pre></div>
<h4 dir="auto"><a id="user-content-3-solve-the-game" class="anchor" aria-hidden="true" href="#3-solve-the-game"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3. Solve the Game</h4>
<p dir="auto">With this information we can construct the game...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g = GeneralGame(game_horizon, player_inputs, dynamics, costs)"><pre>g <span class="pl-k">=</span> <span class="pl-c1">GeneralGame</span>(game_horizon, player_inputs, dynamics, costs)</pre></div>
<p dir="auto">...and solve it for some initial conditions <code>x0</code>.
Automatic differentiation will save us from having to specify how to compute LQ approximations of the system.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# get a solver, choose initial conditions and solve (in about 9 ms with automatic differentiation)
solver = iLQSolver(g)
x0 = SVector(1, 1, 0, 0.5)
converged, trajectory, strategies = solve(g, solver, x0)"><pre><span class="pl-c"><span class="pl-c">#</span> get a solver, choose initial conditions and solve (in about 9 ms with automatic differentiation)</span>
solver <span class="pl-k">=</span> <span class="pl-c1">iLQSolver</span>(g)
x0 <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0.5</span>)
converged, trajectory, strategies <span class="pl-k">=</span> <span class="pl-c1">solve</span>(g, solver, x0)</pre></div>
<p dir="auto">Finally, we can visualize the path of the unicycle as follows (x- and y-position):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# for visualization we need to state which state indices correspond to px and py
position_indices = tuple(SVector(1,2))
# Note: you can use the `plot_traj` call without @animated to get a non-animated plot instead.
@animated(plot_traj(trajectory, g, [:red, :green], player_inputs),
          1:game_horizon, &quot;minimal_example.gif&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> for visualization we need to state which state indices correspond to px and py</span>
position_indices <span class="pl-k">=</span> <span class="pl-c1">tuple</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c"><span class="pl-c">#</span> Note: you can use the `plot_traj` call without @animated to get a non-animated plot instead.</span>
<span class="pl-c1">@animated</span>(<span class="pl-c1">plot_traj</span>(trajectory, g, [<span class="pl-c1">:red</span>, <span class="pl-c1">:green</span>], player_inputs),
          <span class="pl-c1">1</span><span class="pl-k">:</span>game_horizon, <span class="pl-s"><span class="pl-pds">"</span>minimal_example.gif<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">At the equilibrium solution, Player-2 accelerates to reach the desired speed. Player-1 steers the unicycle in
a figure-8 to stay close to the origin.:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/minimal_example.gif"><img src="examples/minimal_example.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></p>
</article></div>