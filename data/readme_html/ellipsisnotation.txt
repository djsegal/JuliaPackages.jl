<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ellipsisnotationjl" class="anchor" aria-hidden="true" href="#ellipsisnotationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EllipsisNotation.jl</h1>
<p><a href="https://travis-ci.com/ChrisRackauckas/EllipsisNotation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81200db4406bcfeab95d6e96d6d095bbab1850189ebc9ed98962a88f9a87d9cf/68747470733a2f2f7472617669732d63692e636f6d2f43687269735261636b6175636b61732f456c6c69707369734e6f746174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ChrisRackauckas/EllipsisNotation.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/ChrisRackauckas/ellipsesnotation-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8aa9f8d99715d78f9b2ee6e812bc4456ef5bb6ce659c0c8b4b8b99b695084a28/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f766736626b387333673773723637756b3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/vg6bk8s3g7sr67uk?svg=true" style="max-width:100%;"></a></p>
<p>This implements the notation <code>..</code> for indexing arrays. It's similar to the Python
<code>...</code> in that it means "all of the columns before (or after)".</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;EllipsisNotation&quot;)
using EllipsisNotation
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EllipsisNotation<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> EllipsisNotation</pre></div>
<h1><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = Array{Int}(undef,2,4,2)

julia&gt; A[..,1] = [2 1 4 5
                 2 2 3 6]

julia&gt; A[..,2] = [3 2 6 5
                  3 2 6 6]

julia&gt; A[:,:,1] == [2 1 4 5
                    2 2 3 6]
true

julia&gt; A[1,..] = reshape([3 4
                          5 6
                          4 5
                          6 7],1,4,2) # drops singleton dimension

julia&gt; B = [3 4
            5 6
            4 5
            6 7]

julia&gt; B == reshape(A[1,..],4,2)
true

julia&gt; A[..,1,2] # Can do as many integers as you want on the end!
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int}</span>(undef,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                 <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">6</span> <span class="pl-c1">5</span>
                  <span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">6</span> <span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> A[:,:,<span class="pl-c1">1</span>] <span class="pl-k">==</span> [<span class="pl-c1">2</span> <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                    <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">6</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">1</span>,<span class="pl-k">..</span>] <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">3</span> <span class="pl-c1">4</span>
                          <span class="pl-c1">5</span> <span class="pl-c1">6</span>
                          <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                          <span class="pl-c1">6</span> <span class="pl-c1">7</span>],<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> drops singleton dimension</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">4</span>
            <span class="pl-c1">5</span> <span class="pl-c1">6</span>
            <span class="pl-c1">4</span> <span class="pl-c1">5</span>
            <span class="pl-c1">6</span> <span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">==</span> <span class="pl-c1">reshape</span>(A[<span class="pl-c1">1</span>,<span class="pl-k">..</span>],<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> Can do as many integers as you want on the end!</span></pre></div>
<p>For avoiding squeezing dimensions from slicing.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; C = ones(3,3,3,3,3);
julia&gt; size(C[1:1, .., 1:1])
(1, 3, 3, 3, 1)
"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(C[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">..</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>])
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)</pre></div>
<p>Note: <code>..</code> slurps dimensions greedily, meaning that the first occurrence
of <code>..</code> in an index expression creates as many slices as possible. Other
instances of <code>..</code> afterwards are treated simply as slices. Usually, you
should only use one instance of <code>..</code> in an indexing expression to avoid
possible confusion.</p>
<h1><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h1>
<p>I would like to acknowledge M. Schauer for the <code>..</code> notation implementation.
He had the original idea, I just extended it and put it into a package because
of how useful it has been to me.</p>
</article></div>