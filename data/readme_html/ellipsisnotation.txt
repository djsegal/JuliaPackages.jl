<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ellipsisnotationjl" class="anchor" aria-hidden="true" href="#ellipsisnotationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EllipsisNotation.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/EllipsisNotation/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/EllipsisNotation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9625bf18c3e200feb9e4354c883ec286c57f5e0e4bb7bf2fc5c3db4d37240762/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f456c6c69707369734e6f746174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/EllipsisNotation.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/EllipsisNotation.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/EllipsisNotation.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">This implements the notation <code>..</code> for indexing arrays. It's similar to the Python
<code>...</code> in that it means "all of the columns before (or after)".</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;EllipsisNotation&quot;)
using EllipsisNotation"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EllipsisNotation<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> EllipsisNotation</pre></div>
<h1 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Array{Int}(undef,2,4,2)

julia&gt; A[..,1] = [2 1 4 5
                 2 2 3 6]

julia&gt; A[..,2] = [3 2 6 5
                  3 2 6 6]

julia&gt; A[:,:,1] == [2 1 4 5
                    2 2 3 6]
true

julia&gt; A[1,..] = reshape([3 4
                          5 6
                          4 5
                          6 7],1,4,2) # drops singleton dimension

julia&gt; B = [3 4
            5 6
            4 5
            6 7]

julia&gt; B == reshape(A[1,..],4,2)
true

julia&gt; A[..,1,2] # Can do as many integers as you want on the end!"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int}</span>(undef,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                 <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">6</span> <span class="pl-c1">5</span>
                  <span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">6</span> <span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> A[:,:,<span class="pl-c1">1</span>] <span class="pl-k">==</span> [<span class="pl-c1">2</span> <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                    <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">6</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">1</span>,<span class="pl-k">..</span>] <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">3</span> <span class="pl-c1">4</span>
                          <span class="pl-c1">5</span> <span class="pl-c1">6</span>
                          <span class="pl-c1">4</span> <span class="pl-c1">5</span>
                          <span class="pl-c1">6</span> <span class="pl-c1">7</span>],<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> drops singleton dimension</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">4</span>
            <span class="pl-c1">5</span> <span class="pl-c1">6</span>
            <span class="pl-c1">4</span> <span class="pl-c1">5</span>
            <span class="pl-c1">6</span> <span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">==</span> <span class="pl-c1">reshape</span>(A[<span class="pl-c1">1</span>,<span class="pl-k">..</span>],<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-k">..</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> Can do as many integers as you want on the end!</span></pre></div>
<p dir="auto">For avoiding squeezing dimensions from slicing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = ones(3,3,3,3,3);
julia&gt; size(C[1:1, .., 1:1])
(1, 3, 3, 3, 1)"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(C[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">..</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>])
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Note: <code>..</code> slurps dimensions greedily, meaning that the first occurrence
of <code>..</code> in an index expression creates as many slices as possible. Other
instances of <code>..</code> afterwards are treated simply as slices. Usually, you
should only use one instance of <code>..</code> in an indexing expression to avoid
possible confusion.</p>
<p dir="auto"><strong>Warning:</strong> <code>..</code> does not work when indexing also with <code>end</code> or <code>begin</code>.
For example, <code>A = randn(2,3,4); A[.., 1:end]</code> will not give the intended
result. This is a known limitation, and is not likely to be fixed until
some necessary changes in the Julia language itself are implemented. See
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="697840243" data-permission-text="Title is private" data-url="https://github.com/SciML/EllipsisNotation.jl/issues/19" data-hovercard-type="issue" data-hovercard-url="/SciML/EllipsisNotation.jl/issues/19/hovercard" href="https://github.com/SciML/EllipsisNotation.jl/issues/19">#19</a>
for more details.</p>
<h1 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h1>
<p dir="auto">I would like to acknowledge M. Schauer for the <code>..</code> notation implementation.
He had the original idea, I just extended it and put it into a package because
of how useful it has been to me.</p>
</article></div>