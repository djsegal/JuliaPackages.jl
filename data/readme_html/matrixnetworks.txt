<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/nassarhuda/MatrixNetworks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a344fd4a802a542c596612f4d1ca476597b64c3fa2b19dcbc4cdee9bf3dfde64/68747470733a2f2f7472617669732d63692e6f72672f6e6173736172687564612f4d61747269784e6574776f726b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Result" data-canonical-src="https://travis-ci.org/nassarhuda/MatrixNetworks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/nassarhuda/MatrixNetworks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f8f4d5f91768002eca7dca1a5ac5f0545d3949d2e7d2cc72c6828f9308219a91/687474703a2f2f636f6465636f762e696f2f6769746875622f6e6173736172687564612f4d61747269784e6574776f726b732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/nassarhuda/MatrixNetworks.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/37493786" rel="nofollow"><img src="https://camo.githubusercontent.com/ccf1132594856b852c07446f9a32d3f5df7601e37f18e7f06b496170f4783c60/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33373439333738362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/37493786.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-matrixnetworks" class="anchor" aria-hidden="true" href="#matrixnetworks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixNetworks</h1>
<p>This package consists of a collection of network algorithms.
In short, the major difference between MatrixNetworks.jl and packages like LightGraphs.jl or Graphs.jl is the way graphs are treated.</p>
<p>In <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>, graphs are created through Graph() and DiGraph() which are based on the representation of G as G = (V,E).
Our viewpoint is different.</p>
<p>MatrixNetworks is based on the philosophy that there should be no distinction between a matrix and a network - thus the name.</p>
<p>For example, <code>d,dt,p = bfs(A,1)</code> computes the bfs distance from the node represented by row 1 to all other nodes of the graph with adjacency matrix A. (A can be of type <code>SparseMatrixCSC</code> or <code>MatrixNetwork</code>). This representation can be easier to work with and handle.</p>
<p>The package provides documentation with sample runs for all functions - viewable through Juilaâ€™s REPL. These sample runs come with sample data, which makes it easier for users to get started on <code>MatrixNetworks</code>.</p>
<h2><a id="user-content-package-installation" class="anchor" aria-hidden="true" href="#package-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package Installation:</h2>
<h5><a id="user-content-to-install-package" class="anchor" aria-hidden="true" href="#to-install-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To install package</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MatrixNetworks&quot;)
using MatrixNetworks
"><pre><code>using Pkg
Pkg.add("MatrixNetworks")
using MatrixNetworks
</code></pre></div>
<h5><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="?bfs
?bipartite_matching
"><pre><code>?bfs
?bipartite_matching
</code></pre></div>
<h5><a id="user-content-to-run-test-cases" class="anchor" aria-hidden="true" href="#to-run-test-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To run test cases:</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.test(&quot;MatrixNetworks&quot;)
"><pre><code>Pkg.test("MatrixNetworks")
</code></pre></div>
<h2><a id="user-content-data-available" class="anchor" aria-hidden="true" href="#data-available"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Data available:</h2>
<h5><a id="user-content-for-a-full-list-of-all-datasets" class="anchor" aria-hidden="true" href="#for-a-full-list-of-all-datasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>For a full list of all datasets:</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="matrix_network_datasets()
"><pre><code>matrix_network_datasets()
</code></pre></div>
<h5><a id="user-content-loading-data-example" class="anchor" aria-hidden="true" href="#loading-data-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading data example:</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="load_matrix_network(&quot;clique-10&quot;)
"><pre><code>load_matrix_network("clique-10")
</code></pre></div>
<h2><a id="user-content-some-examples" class="anchor" aria-hidden="true" href="#some-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some examples:</h2>
<h5><a id="user-content-largest_component-return-the-largest-connected-component-of-a-graph" class="anchor" aria-hidden="true" href="#largest_component-return-the-largest-connected-component-of-a-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>largest_component: Return the largest connected component of a graph</h5>
<p>Acc is a sparse matrix containing the largest connected piece of a directed graph A
p is a logical vector indicating which vertices in A were chosen</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A = load_matrix_network(&quot;dfs_example&quot;)
Acc,p = largest_component(A)
"><pre><code>A = load_matrix_network("dfs_example")
Acc,p = largest_component(A)
</code></pre></div>
<h5><a id="user-content-clustercoeffs-compute-undirected-clustering-coefficients-for-a-graph" class="anchor" aria-hidden="true" href="#clustercoeffs-compute-undirected-clustering-coefficients-for-a-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>clustercoeffs: Compute undirected clustering coefficients for a graph</h5>
<p>cc is the clustering coefficients</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A = load_matrix_network(&quot;clique-10&quot;)
cc = clustercoeffs(MatrixNetwork(A))
"><pre><code>A = load_matrix_network("clique-10")
cc = clustercoeffs(MatrixNetwork(A))
</code></pre></div>
<h5><a id="user-content-bfs-compute-breadth-first-search-distances-starting-from-a-node-in-a-graph" class="anchor" aria-hidden="true" href="#bfs-compute-breadth-first-search-distances-starting-from-a-node-in-a-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>bfs: Compute breadth first search distances starting from a node in a graph</h5>
<p>d is a vector containing the distances of all nodes from node u (1 in the example below)
dt is a vector containing the discover times of all the nodes
pred is a vector containing the predecessors of each of the nodes</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A = load_matrix_network(&quot;bfs_example&quot;)
d,dt,pred = bfs(A,1)
"><pre><code>A = load_matrix_network("bfs_example")
d,dt,pred = bfs(A,1)
</code></pre></div>
<h5><a id="user-content-scomponents-compute-the-strongly-connected-components-of-a-graph" class="anchor" aria-hidden="true" href="#scomponents-compute-the-strongly-connected-components-of-a-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>scomponents: Compute the strongly connected components of a graph</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A = load_matrix_network(&quot;cores_example&quot;)
sc = scomponents(A)
sc.number #number of connected componenets
sc.sizes #sizes of components
sc.map #the mapping of the graph nodes to their respective connected component
strong_components_map(A) # if you just want the map
sc_enrich = enrich(sc) # produce additional enriched output includes:
sc_enrich.reduction_matrix
sc_enrich.transitive_map
sc_enrich.transitive_order
"><pre><code>A = load_matrix_network("cores_example")
sc = scomponents(A)
sc.number #number of connected componenets
sc.sizes #sizes of components
sc.map #the mapping of the graph nodes to their respective connected component
strong_components_map(A) # if you just want the map
sc_enrich = enrich(sc) # produce additional enriched output includes:
sc_enrich.reduction_matrix
sc_enrich.transitive_map
sc_enrich.transitive_order
</code></pre></div>
<p>Can work on ei,ej:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="ei = [1;2;3]
ej = [2;4;1]
scomponents(ei,ej)
"><pre><code>ei = [1;2;3]
ej = [2;4;1]
scomponents(ei,ej)
</code></pre></div>
<h5><a id="user-content-bipartite_matching-return-a-maximum-weight-bipartite-matching-of-a-graph" class="anchor" aria-hidden="true" href="#bipartite_matching-return-a-maximum-weight-bipartite-matching-of-a-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>bipartite_matching: Return a maximum weight bipartite matching of a graph</h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="ei = [1;2;3]
ej = [3;2;4]
BM = bipartite_matching([10;12;13],ei,ej)
BM.weight
BM.cardinality
BM.match
create_sparse(BM) # get the sparse matrix
edge_list(BM) # get the edgelist
edge_indicator(BM,ei,ej) # get edge indicators
"><pre><code>ei = [1;2;3]
ej = [3;2;4]
BM = bipartite_matching([10;12;13],ei,ej)
BM.weight
BM.cardinality
BM.match
create_sparse(BM) # get the sparse matrix
edge_list(BM) # get the edgelist
edge_indicator(BM,ei,ej) # get edge indicators
</code></pre></div>
</article></div>