<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-waterflows" class="anchor" aria-hidden="true" href="#waterflows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WaterFlows</h1>
<table>
<thead>
<tr>
<th align="left"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://travis-ci.org/jannefiluren/WaterFlows.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6311b183f3b82568f91257edac9959fc9bcb687be73c40cf2c4eb949af23bdd0/68747470733a2f2f7472617669732d63692e6f72672f6a616e6e6566696c7572656e2f5761746572466c6f77732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/jannefiluren/WaterFlows.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/jannefiluren/WaterFlows.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4da5e17bf78d5248d4457449ef20ee0a43e36366c91877c6c54c06c85322e3bb/68747470733a2f2f636f6465636f762e696f2f67682f6a616e6e6566696c7572656e2f5761746572466c6f77732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/jannefiluren/WaterFlows.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Hydrological models implemented in the Julia programming language. The package currently provides a set of conceptual hydrological models including methods for computing potential evapotranspiration. The models are built using different components and can be combined in different constellations.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with the Julia package manager. From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add WaterFlows"><pre>pkg<span class="pl-k">&gt;</span> add WaterFlows</pre></div>
<p dir="auto">And load the package using the command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WaterFlows"><pre><span class="pl-k">using</span> WaterFlows</pre></div>
<h2 dir="auto"><a id="user-content-load-input-data" class="anchor" aria-hidden="true" href="#load-input-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load input data</h2>
<p dir="auto">WaterFlows currently reads data in a specific text format (see examples for <a href="https://github.com/jmgnve/WaterFlows/tree/master/data/atnasjo">Atnasjø</a> and <a href="https://github.com/jmgnve/WaterFlows/tree/master/data/fetvatn">Fetvatn</a>).</p>
<p dir="auto">First, read the data for one of the example datasets, here Atnasjø:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="path = joinpath(dirname(pathof(WaterFlows)), &quot;..&quot;, &quot;data&quot;, &quot;atnasjo&quot;)
date, tair, prec, q_obs, frac_lus, frac_area, elev = load_data(path)"><pre>path <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(WaterFlows)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>atnasjo<span class="pl-pds">"</span></span>)
date, tair, prec, q_obs, frac_lus, frac_area, elev <span class="pl-k">=</span> <span class="pl-c1">load_data</span>(path)</pre></div>
<p dir="auto">Second, compute potential evapotranspiration for the catchment:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lat = 60.0
epot = oudin(date, tair, lat, frac_area)"><pre>lat <span class="pl-k">=</span> <span class="pl-c1">60.0</span>
epot <span class="pl-k">=</span> <span class="pl-c1">oudin</span>(date, tair, lat, frac_area)</pre></div>
<p dir="auto">Third, create an object containing the input data that is required for running the models:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="input = InputPTE(date, prec, tair, epot)"><pre>input <span class="pl-k">=</span> <span class="pl-c1">InputPTE</span>(date, prec, tair, epot)</pre></div>
<h2 dir="auto"><a id="user-content-setting-up-and-running-a-complete-and-predefined-model" class="anchor" aria-hidden="true" href="#setting-up-and-running-a-complete-and-predefined-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting up and running a complete and predefined model</h2>
<p dir="auto">The most user-friendly method to run a model is to use a predefined model structure.</p>
<p dir="auto">Start by specifying the time step length in hours and the time for the first input data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tstep = 24.0
tstart = date[1]"><pre>tstep <span class="pl-k">=</span> <span class="pl-c1">24.0</span>
tstart <span class="pl-k">=</span> date[<span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Next setup a model object containing necessary data required for running the model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = model_hbv_light(tstep, tstart, frac_lus)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">model_hbv_light</span>(tstep, tstart, frac_lus)</pre></div>
<p dir="auto">Finally run the model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="q_sim = run_model(model, input)"><pre>q_sim <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(model, input)</pre></div>
<h2 dir="auto"><a id="user-content-building-and-running-a-model-from-components" class="anchor" aria-hidden="true" href="#building-and-running-a-model-from-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building and running a model from components</h2>
<p dir="auto">A complete model can be built from existing components.</p>
<p dir="auto">Again, start by specifying the time step length in hours and the time for the first input data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tstep = 24.0
tstart = date[1]"><pre>tstep <span class="pl-k">=</span> <span class="pl-c1">24.0</span>
tstart <span class="pl-k">=</span> date[<span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Next specify a snow, glacier and subsurface component:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="snow = HbvLightSnow(tstep, tstart, frac_lus)
glacier = NoGlacier()
subsurf = Gr4j(tstep, tstart)"><pre>snow <span class="pl-k">=</span> <span class="pl-c1">HbvLightSnow</span>(tstep, tstart, frac_lus)
glacier <span class="pl-k">=</span> <span class="pl-c1">NoGlacier</span>()
subsurf <span class="pl-k">=</span> <span class="pl-c1">Gr4j</span>(tstep, tstart)</pre></div>
<p dir="auto">and create a model object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = ModelComp(snow, glacier, subsurf)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">ModelComp</span>(snow, glacier, subsurf)</pre></div>
<p dir="auto">Finally run the model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="q_sim = run_model(model, input)"><pre>q_sim <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(model, input)</pre></div>
<h2 dir="auto"><a id="user-content-model-calibration" class="anchor" aria-hidden="true" href="#model-calibration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model calibration</h2>
<p dir="auto">A model can be calibrated by running:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="param_tuned = run_model_calib(model, input, q_obs, warmup = 1, verbose = :verbose)"><pre>param_tuned <span class="pl-k">=</span> <span class="pl-c1">run_model_calib</span>(model, input, q_obs, warmup <span class="pl-k">=</span> <span class="pl-c1">1</span>, verbose <span class="pl-k">=</span> <span class="pl-c1">:verbose</span>)</pre></div>
<p dir="auto">The model can be ran using the best-fit parameters with the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_params!(model, param_tuned)
q_sim = run_model(model, input)"><pre><span class="pl-c1">set_params!</span>(model, param_tuned)
q_sim <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(model, input)</pre></div>
<h2 dir="auto"><a id="user-content-available-components" class="anchor" aria-hidden="true" href="#available-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available components</h2>
<p dir="auto">Currently, a complete model is splitted into three components representing snow melt, glacier melt and subsurface hydrological processes, respectivily.</p>
<p dir="auto">Available snow components:</p>
<ul dir="auto">
<li>HBV light snow melt component (HbvLightSnow)</li>
<li>Simple temperature index snow melt component (TinSnow)</li>
<li>Dummy component for neglecting snow melt (NoSnow)</li>
</ul>
<p dir="auto">Available glacier components:</p>
<ul dir="auto">
<li>Radiation based glacier melt component (HockGlacier)</li>
<li>Temperature index based glacier melt component (TinGlacier)</li>
<li>Dummy component for neglecting glacier melt (NoGlacier)</li>
</ul>
<p dir="auto">Available subsurface components:</p>
<ul dir="auto">
<li>A simple HBV subsurface model component (HbvLightSubsurf)</li>
<li>HBV light subsurface component (Hbv)</li>
<li>GR4J subsurface components (Gr4j)</li>
</ul>
<p dir="auto">The components can be ordered in any combination. However, note that the input arguments may differ between the components. For looking at the implementation of the components, click <a href="https://github.com/jmgnve/WaterFlows/tree/master/src/components">here</a>. The components are combined together to a complete model using <a href="https://github.com/jmgnve/WaterFlows/blob/master/src/models/model_components.jl">this code</a>.</p>
<h2 dir="auto"><a id="user-content-available-models" class="anchor" aria-hidden="true" href="#available-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available models</h2>
<p dir="auto">Currently only the HBV light model setup is available as a complete model as described above.</p>
</article></div>