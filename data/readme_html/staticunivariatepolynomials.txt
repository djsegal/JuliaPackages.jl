<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-staticunivariatepolynomialsjl" class="anchor" aria-hidden="true" href="#staticunivariatepolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StaticUnivariatePolynomials.jl</h1>
<p><a href="https://travis-ci.com/tkoolen/StaticUnivariatePolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7919dde5b49913b81475e907bf76e6d8ee331b7e/68747470733a2f2f7472617669732d63692e636f6d2f746b6f6f6c656e2f537461746963556e6976617269617465506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tkoolen/StaticUnivariatePolynomials.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tkoolen/StaticUnivariatePolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2fffeea0bae5fe46d6285eb30ccf89f3101c7e9c/68747470733a2f2f636f6465636f762e696f2f67682f746b6f6f6c656e2f537461746963556e6976617269617465506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkoolen/StaticUnivariatePolynomials.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>StaticUnivariatePolynomials provides a <code>Polynomial</code> type representing a dense univariate polynomial. In contrast to e.g. <a href="https://github.com/JuliaMath/Polynomials.jl">JuliaMath/Polynomials.jl</a>, coefficients are stored in an <code>NTuple</code>.
This makes <code>Polynomial</code> a stack-allocatable bitstype when the coefficient type is a bitstype, enabling high performance.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Polynomials may be created by passing in coeffients ordered from lowest to highest degree:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticUnivariatePolynomials, BenchmarkTools, Test

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> 1 + 2x + 3x^2</span>
<span class="pl-c1">Polynomial</span><span class="pl-c1">{3,Int64}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>))</pre></div>
<p>The Polynomial type overloads the call operator for evaluation, and is implemented using <code>Base.@evalpoly</code> (for real coefficients, using Horner's method):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">57</span></pre></div>
<p>Evaluation is fast:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">p</span>(x) setup <span class="pl-k">=</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>()

  <span class="pl-c1">2.052</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p>Basic arithmetic is implemented:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">Polynomial</span><span class="pl-c1">{3,Int64}</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> p <span class="pl-k">+</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">Polynomial</span><span class="pl-c1">{3,Int64}</span>((<span class="pl-c1">4</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> p <span class="pl-k">/</span> <span class="pl-c1">4</span>
<span class="pl-c1">Polynomial</span><span class="pl-c1">{3,Float64}</span>((<span class="pl-c1">0.25</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.75</span>))

julia<span class="pl-k">&gt;</span> p <span class="pl-k">*</span> p
<span class="pl-c1">Polynomial</span><span class="pl-c1">{5,Int64}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">10</span>, <span class="pl-c1">12</span>, <span class="pl-c1">9</span>))</pre></div>
<p>Calculus:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> StaticUnivariatePolynomials<span class="pl-k">:</span> derivative, integral

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-en">integral</span>(p, <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> integral of p such that P(0) = 5</span>
<span class="pl-c1">Polynomial</span><span class="pl-c1">{4,Float64}</span>((<span class="pl-c1">5.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>))

julia<span class="pl-k">&gt;</span> P′ <span class="pl-k">=</span> <span class="pl-c1">derivative</span>(P)
<span class="pl-c1">Polynomial</span><span class="pl-c1">{3,Float64}</span>((<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">typeof</span>(P′)(p) <span class="pl-k">===</span> P′
Test Passed</pre></div>
</article></div>