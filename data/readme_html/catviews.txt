<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-catviews" class="anchor" aria-hidden="true" href="#catviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CatViews</h1>
<p><a href="https://travis-ci.org/ahwillia/CatViews.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/936c3536be0b5101ea05c5607fb2c9f8c897d196/68747470733a2f2f7472617669732d63692e6f72672f616877696c6c69612f43617456696577732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ahwillia/CatViews.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/451e00262151ae3b7992f0e843600bf26094bd81/687474703a2f2f692e696d6775722e636f6d2f4f48745a32485a2e6a7067"><img src="https://camo.githubusercontent.com/451e00262151ae3b7992f0e843600bf26094bd81/687474703a2f2f692e696d6775722e636f6d2f4f48745a32485a2e6a7067" width="300px" data-canonical-src="http://i.imgur.com/OHtZ2HZ.jpg" style="max-width:100%;"></a></p>
<p>In optimization and machine learning, model parameters can be distributed across multiple arrays and can interact in complex ways.
However, it can be useful to abstract away these details (e.g. when computing gradients) and collect all the parameters into a single vector.
This is a lightweight package that enables you to switch between these two perspectives seemlessly.</p>
<p>CatViews exports two main things:</p>
<ul>
<li><strong><code>CatView</code></strong> - An array that can represent a sequence of preallocated arrays within a vector.</li>
<li><strong><code>splitview</code></strong> - A function that produces a sequence of new arrays as views into a vector.</li>
</ul>
<p>Both of these functions make use of array <a href="http://docs.julialang.org/en/latest/stdlib/arrays/?highlight=view#Base.view" rel="nofollow"><code>view</code>s</a> so that <em><strong>copying is not required!</strong></em></p>
<p>In general, you should use <code>splitview</code> when you know the array shapes beforehand, and only use <code>CatView</code> when you don't have access to this information. Iterating through the parameter vector should be faster if you use <code>splitview</code>.</p>
<h3><a id="user-content-splitview-documentation" class="anchor" aria-hidden="true" href="#splitview-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>splitview</code> documentation</h3>
<p>In the following example, we create two matrices <code>A</code> and <code>B</code> that are linked to a parameter vector <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>x, (A, B) <span class="pl-k">=</span> <span class="pl-c1">splitview</span>((<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>))

<span class="pl-c"><span class="pl-c">#</span> mutating x updates A and B</span>
x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>
x[<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">12</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>

<span class="pl-c1">@show</span> A  <span class="pl-c"><span class="pl-c">#</span> prints [1 3 5; 2 4 6]</span>
<span class="pl-c1">@show</span> B  <span class="pl-c"><span class="pl-c">#</span> prints [-6 -3; -5 -2; -4 -1]</span></pre></div>
<p>Under the hood, <code>A</code> and <code>B</code> are reshaped <a href="http://docs.julialang.org/en/latest/stdlib/arrays/?highlight=view#Base.view" rel="nofollow"><code>view</code></a>s into <code>x</code>.
Reshaping a view does not causing copying in Julia as of v0.5</p>
<p>You can also get a list of the indices in <code>x</code> that represent the start and end of the arrays:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Random<span class="pl-k">:</span> randn!
x, (A, B, C), s, e <span class="pl-k">=</span> <span class="pl-c1">splitview</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>))
<span class="pl-k">for</span> X <span class="pl-k">in</span> (A, B, C)
  <span class="pl-c1">randn!</span>(X)
<span class="pl-k">end</span>
x[s[<span class="pl-c1">1</span>]<span class="pl-k">:</span>e[<span class="pl-c1">1</span>]] <span class="pl-k">.==</span> <span class="pl-c1">vec</span>(A)
x[s[<span class="pl-c1">2</span>]<span class="pl-k">:</span>e[<span class="pl-c1">2</span>]] <span class="pl-k">.==</span> <span class="pl-c1">vec</span>(B)
x[s[<span class="pl-c1">3</span>]<span class="pl-k">:</span>e[<span class="pl-c1">3</span>]] <span class="pl-k">.==</span> <span class="pl-c1">vec</span>(C)</pre></div>
<h4><a id="user-content-use-vecidx-to-get-the-index-into-the-parent-array" class="anchor" aria-hidden="true" href="#use-vecidx-to-get-the-index-into-the-parent-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Use <code>vecidx</code> to get the index into the parent array</h4>
<p>CatViews also exports a simple function that allows you to match indices between the parameter vector and the reshaped matrices:</p>
<div class="highlight highlight-source-julia"><pre>x, (A, B) <span class="pl-k">=</span> <span class="pl-c1">splitview</span>((<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>))

<span class="pl-c"><span class="pl-c">#</span> fill x with random numbers</span>
<span class="pl-c1">randn!</span>(x)

i <span class="pl-k">=</span> <span class="pl-c1">vecidx</span>(A, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> i == 2</span>
x[i] <span class="pl-k">==</span> A[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>]

j <span class="pl-k">=</span> <span class="pl-c1">vecidx</span>(B,(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> j == 12</span>
x[j] <span class="pl-k">==</span> B[<span class="pl-c1">3</span>, <span class="pl-c1">2</span>]</pre></div>
<h3><a id="user-content-catview-documentation" class="anchor" aria-hidden="true" href="#catview-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>CatView</code> documentation</h3>
<p>Suppose we have <code>A</code> and <code>B</code> already preallocated, and we want to represent them as a parameter vector <code>x</code>:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>);   <span class="pl-c"><span class="pl-c">#</span> imagine this is a large matrix so copying is really undesirable</span>
B <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>);   <span class="pl-c"><span class="pl-c">#</span> imagine this is also large so copying totally sucks</span>
a <span class="pl-k">=</span> <span class="pl-c1">view</span>(A, :);      <span class="pl-c"><span class="pl-c">#</span> vector view of A, no copying</span>
b <span class="pl-k">=</span> <span class="pl-c1">view</span>(B, :);      <span class="pl-c"><span class="pl-c">#</span> vector view of B, no copying</span>
x <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(a, b);      <span class="pl-c"><span class="pl-c">#</span> ACK!! causes copying!!</span>
<span class="pl-c1">typeof</span>(x)            <span class="pl-c"><span class="pl-c">#</span> returns Array, rather than SubArray</span></pre></div>
<p>Furthermore, if you mutate <code>x</code> in this example, the changes aren't automatically reflected in <code>A</code> and <code>B</code>.</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>);
B <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>);
a <span class="pl-k">=</span> <span class="pl-c1">view</span>(A, :);      <span class="pl-c"><span class="pl-c">#</span> no copying</span>
b <span class="pl-k">=</span> <span class="pl-c1">view</span>(B, :);      <span class="pl-c"><span class="pl-c">#</span> no copying</span>
x <span class="pl-k">=</span> <span class="pl-c1">CatView</span>(a, b);   <span class="pl-c"><span class="pl-c">#</span> no copying!!!</span></pre></div>
<p>You can treat <code>x</code> as you would any other vector in Julia! Like <code>splitview</code>, mutating <code>x</code> will also update <code>A</code> and <code>B</code>:</p>
<div class="highlight highlight-source-julia"><pre>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">.=</span> <span class="pl-c1">999</span>
<span class="pl-c1">@show</span> A[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>]</pre></div>
<pre><code>4×4 Array{Float64,2}:
 999.0       0.0188983  -0.720472   1.01939  
 999.0       2.4073     -2.52788   -0.0497283
 999.0      -1.9217     -0.256222   0.642362 
 1.52075  -0.173562    0.604112  -0.574269 
</code></pre>
<p>Did I mention that this happens without copying? That's kind of the whole point.</p>
<h3><a id="user-content-why-is-this-useful" class="anchor" aria-hidden="true" href="#why-is-this-useful"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why is this useful?</h3>
<p>See <a href="https://github.com/ahwillia/CatViews.jl/blob/master/examples/pca.jl"><code>examples/pca.jl</code></a> for a self-contained use case of <code>CatView</code>s. In this optimization problem, there are two matrices (corresponding to the principal components and loadings) of optimization variables. Concatenating these variables into a single vector would provide a way to link this model to many generic optimization solvers. A <code>CatView</code> is a very simple way to do this. It avoids unnecessary copy operations (a potential performance enhancement) and also simplifies the code to implement this.</p>
</article></div>