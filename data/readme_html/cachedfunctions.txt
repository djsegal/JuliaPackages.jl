<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cachedfunctionsjl" class="anchor" aria-hidden="true" href="#cachedfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CachedFunctions.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/longemen3000/CachedFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d2dc15f155363f6d90045eac45862674c9e41daee1a92fc4a087a89a4543877/68747470733a2f2f7472617669732d63692e636f6d2f6c6f6e67656d656e333030302f43616368656446756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/longemen3000/CachedFunctions.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Bored of creating your cache each time when having a function <code>f!(out,x)</code>?</p>
<p dir="auto">Problems defining a higher-order Jacobian with inplace functions?</p>
<p dir="auto">Out of names for the output caches?</p>
<p dir="auto">This package maybe can help you!</p>
<h2 dir="auto"><a id="user-content-limits" class="anchor" aria-hidden="true" href="#limits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limits</h2>
<p dir="auto">This package works with inplace functions of the form: <code>f(out,x)</code>, where:</p>
<ol dir="auto">
<li><code>eltype(x) == eltype(out)</code></li>
<li><code>x</code> is of type <code>Array</code>, <code>Dict</code>, <code>SparseVector</code>, or <code>SparseArray</code></li>
<li>by default, the caches are not thread-safe or async safe. future releases will add special cached types to deal with this. as a workaround, you can try creating new cached functions instances using <code>deepcopy(f)</code></li>
</ol>
<p dir="auto">help on easing those limits is appreciated.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This is the simplest way to use this Package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#example inplace function
function f!(y,x)
    y[1] = exp(sum(x))
    y[2] = x[1]+x[2] - x[3]
    y
end

x1 = rand(3)
x2 = rand(3)
x3 = rand(Float32,3)
x4 = rand(Float32,3)

f = CachedFunction(f!,3,2) #if multidimentional, use CachedFunction(f!,(1,2),(2,3))
f(x1) #allocates one time
f(x2) #all caches created and allocated! f(x2) is evaluated without additional allocations.
evaluate(f,x1) #other way to call the function
f(x3) #a specific cache for Float32 is created
f(x4) #no allocations, again."><pre><span class="pl-c"><span class="pl-c">#</span>example inplace function</span>
<span class="pl-k">function</span> <span class="pl-en">f!</span>(y,x)
    y[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">sum</span>(x))
    y[<span class="pl-c1">2</span>] <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">+</span>x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">3</span>]
    y
<span class="pl-k">end</span>

x1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
x2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
x3 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">3</span>)
x4 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">3</span>)

f <span class="pl-k">=</span> <span class="pl-c1">CachedFunction</span>(f!,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span>if multidimentional, use CachedFunction(f!,(1,2),(2,3))</span>
<span class="pl-c1">f</span>(x1) <span class="pl-c"><span class="pl-c">#</span>allocates one time</span>
<span class="pl-c1">f</span>(x2) <span class="pl-c"><span class="pl-c">#</span>all caches created and allocated! f(x2) is evaluated without additional allocations.</span>
<span class="pl-c1">evaluate</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>other way to call the function</span>
<span class="pl-c1">f</span>(x3) <span class="pl-c"><span class="pl-c">#</span>a specific cache for Float32 is created</span>
<span class="pl-c1">f</span>(x4) <span class="pl-c"><span class="pl-c">#</span>no allocations, again.</span></pre></div>
<p dir="auto">Let's see a little bit more about what whe can do with this <code>f</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; calls(f)
5
julia&gt; cached_methods(f)
IdDict{DataType,Function} with 2 entries:
  Float64 =&gt; #198
  Float32 =&gt; #198"><pre lang="julia-repl" class="notranslate"><code>julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; calls(f)
5
julia&gt; cached_methods(f)
IdDict{DataType,Function} with 2 entries:
  Float64 =&gt; #198
  Float32 =&gt; #198
</code></pre></div>
<p dir="auto">A dict with all cached closures for each type is stored in <code>cached_methods(f)</code>. you can take one and use it if you want. If the cache doesn't exists, it's created on the fly during runtime.</p>
<p dir="auto">What happens if i don't want to allocate during runtime?, The solution: use <code>allocate!(f,Type)</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; allocate!(f,BigFloat)
julia&gt; f
cached version of f! (function with 3 cached methods)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; allocate!(f,BigFloat)
julia&gt; f
cached version of f! (function with 3 cached methods)
</code></pre></div>
<h2 dir="auto"><a id="user-content-accesing-without-evaluating" class="anchor" aria-hidden="true" href="#accesing-without-evaluating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accesing without evaluating</h2>
<p dir="auto">by default, a <code>CachedFunction</code> does not store any type of x, so calling <code>f(x)</code> will just use (or create) a cache for <code>out</code> . If you also want to store the input values, you can use <code>evaluate!(f,x)</code>. You can access the input and output values stored for each type using the functions <code>input(f,Type)</code> and <code>output(f,Type)</code>. <code>allocate!(f,Type)</code> also allocates a cache for <code>x</code>. lets see this in action:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x1 = [1.0,2.0,3.0]
evaluate!(f,x1) #x1 is stored
in1 = input(f,Float64) #accesses the input value when the eltype is a Float64
in1 == x1 #true
out1 = output(f,Float64) #accesses the output value when the eltype is a Float64

x2 = rand(3)
evaluate(f,x2) #evaluates on f2, the cache is changed, but x2 is not stored.
in2 = input(f,Float64) #x1 is stored here, not x2
in2 == x2 #false
out1 ==   output(f,Float64) #false
evaluate(f,x1) #restores the output cache to f(x1)
out1 ==   output(f,Float64) #true"><pre>x1 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>]
<span class="pl-c1">evaluate!</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>x1 is stored</span>
in1 <span class="pl-k">=</span> <span class="pl-c1">input</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>accesses the input value when the eltype is a Float64</span>
in1 <span class="pl-k">==</span> x1 <span class="pl-c"><span class="pl-c">#</span>true</span>
out1 <span class="pl-k">=</span> <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>accesses the output value when the eltype is a Float64</span>

x2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">evaluate</span>(f,x2) <span class="pl-c"><span class="pl-c">#</span>evaluates on f2, the cache is changed, but x2 is not stored.</span>
in2 <span class="pl-k">=</span> <span class="pl-c1">input</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>x1 is stored here, not x2</span>
in2 <span class="pl-k">==</span> x2 <span class="pl-c"><span class="pl-c">#</span>false</span>
out1 <span class="pl-k">==</span>   <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>false</span>
<span class="pl-c1">evaluate</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>restores the output cache to f(x1)</span>
out1 <span class="pl-k">==</span>   <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<h2 dir="auto"><a id="user-content-i-can-do-this-myself-why-did-you-do-this" class="anchor" aria-hidden="true" href="#i-can-do-this-myself-why-did-you-do-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>I can do this myself, why did you do this?</h2>
<p dir="auto">The problem occurs when you need to calculate jacobians of jacobians. how many caches i need to create? of what types?</p>
<h2 dir="auto"><a id="user-content-i-like-it-but-i-want-more-functionality" class="anchor" aria-hidden="true" href="#i-like-it-but-i-want-more-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>I like it! but i want more functionality</h2>
<p dir="auto">I'm open, really open to pull requests and issues. Write something and we will see what we can do.</p>
</article></div>