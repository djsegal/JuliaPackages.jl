<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cachedfunctionsjl" class="anchor" aria-hidden="true" href="#cachedfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CachedFunctions.jl</h1>
<p><a href="https://travis-ci.com/longemen3000/CachedFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e397b70aebfc26194015ee9c6de4ae71557c0411/68747470733a2f2f7472617669732d63692e636f6d2f6c6f6e67656d656e333030302f43616368656446756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/longemen3000/CachedFunctions.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Bored of creating your cache each time when having a function <code>f!(out,x)</code>?</p>
<p>Problems defining a higher order jacobian with inplace functions?</p>
<p>Out of names for the output caches?</p>
<p>This package maybe can help you!</p>
<h2><a id="user-content-limits" class="anchor" aria-hidden="true" href="#limits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limits</h2>
<p>This package works with implace functions of the form: <code>f(out,x)</code>, where:</p>
<ol>
<li><code>eltype(x) == eltype(out)</code></li>
<li><code>x</code> is of type Array,Dict,SparseVector,or SparseArray</li>
<li>by default, the caches are not thread-safe or async safe. future releases will add special cached types to deal with this. as a workaround, you can try creating new cached functions instances using <code>deepcopy(f)</code></li>
</ol>
<p>help on easing those limits is appreciated.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>This is the simplest way to use this Package:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>example inplace function</span>
<span class="pl-k">function</span> <span class="pl-en">f!</span>(y,x)
    y[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">sum</span>(x))
    y[<span class="pl-c1">2</span>] <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">+</span>x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">3</span>]
    y
<span class="pl-k">end</span>

x1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
x2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
x3 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">3</span>)
x4 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">3</span>)

f <span class="pl-k">=</span> <span class="pl-c1">CachedFunction</span>(f!,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span>if multidimentional, use CachedFunction(f!,(1,2),(2,3))</span>
<span class="pl-c1">f</span>(x1) <span class="pl-c"><span class="pl-c">#</span>allocates one time</span>
<span class="pl-c1">f</span>(x2) <span class="pl-c"><span class="pl-c">#</span>all caches created and allocated! f(x2) is evaluated without additional allocations.</span>
<span class="pl-c1">evaluate</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>other way to call the function</span>
<span class="pl-c1">f</span>(x3) <span class="pl-c"><span class="pl-c">#</span>a specific cache for Float32 is created</span>
<span class="pl-c1">f</span>(x4) <span class="pl-c"><span class="pl-c">#</span>no allocations, again.</span></pre></div>
<p>Let's see a little bit more about what whe can do with this <code>f</code></p>
<pre lang="julia-repl"><code>julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; calls(f)
5
julia&gt; cached_methods(f)
IdDict{DataType,Function} with 2 entries:
  Float64 =&gt; #198
  Float32 =&gt; #198
</code></pre>
<p>A dict with all cached closures for each type is stored in <code>cached_methods(f)</code>. you can take one and use it if you want. If the cache doesn't exists, it's created on the fly during runtime.</p>
<p>What happens if i don't want to allocate during runtime?, The solution: use <code>allocate!(f,Type)</code></p>
<pre lang="julia-repl"><code>julia&gt; f
cached version of f! (function with 2 cached methods)
julia&gt; allocate!(f,BigFloat)
julia&gt; f
cached version of f! (function with 3 cached methods)
</code></pre>
<h2><a id="user-content-accesing-without-evaluating" class="anchor" aria-hidden="true" href="#accesing-without-evaluating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accesing without evaluating</h2>
<p>by default, a <code>CachedFunction</code> does not store any type of x, so calling <code>f(x)</code> will just use (or create) a cache for ´out´ . If you also want to store the input values, you can use <code>evaluate!(f,x)</code>. you can access the input and output values stored for each type using the functions <code>input(f,Type)</code> and <code>output(f,Type)</code>. <code>allocate!(f,Type)</code> also allocates a cache for <code>x</code>. lets see this in action:</p>
<div class="highlight highlight-source-julia"><pre>x1 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>]
<span class="pl-c1">evaluate!</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>x1 is stored</span>
in1 <span class="pl-k">=</span> <span class="pl-c1">input</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>accesses the input value when the eltype is a Float64</span>
in1 <span class="pl-k">==</span> x1 <span class="pl-c"><span class="pl-c">#</span>true</span>
out1 <span class="pl-k">=</span> <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>accesses the output value when the eltype is a Float64</span>

x2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">evaluate</span>(f,x2) <span class="pl-c"><span class="pl-c">#</span>evaluates on f2, the cache is changed, but x2 is not stored.</span>
in2 <span class="pl-k">=</span> <span class="pl-c1">input</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>x1 is stored here, not x2</span>
in2 <span class="pl-k">==</span> x2 <span class="pl-c"><span class="pl-c">#</span>false</span>
out1 <span class="pl-k">==</span>   <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>false</span>
<span class="pl-c1">evaluate</span>(f,x1) <span class="pl-c"><span class="pl-c">#</span>restores the output cache to f(x1)</span>
out1 <span class="pl-k">==</span>   <span class="pl-c1">output</span>(f,Float64) <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<h2><a id="user-content-i-can-do-this-myself-why-did-you-do-this" class="anchor" aria-hidden="true" href="#i-can-do-this-myself-why-did-you-do-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>I can do this myself, why did you do this?</h2>
<p>The problem occurs when you need to calculate jacobians of jacobians. how many caches i need to create? of what types?</p>
<h2><a id="user-content-i-like-it-but-i-want-more-functionality" class="anchor" aria-hidden="true" href="#i-like-it-but-i-want-more-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>I like it! but i want more functionality</h2>
<p>i'm open,really open to pull requests and issues. write something and we will se what we can do.</p>
</article></div>