arrayviewsapl package developing array views based staged functions technology julia compared previous efforts staged functions perform compile time allowing results construction indexing reduce singleline expression comparison arrayviews subarrays effort complementary dahua lin excellent arrayviewsjl package strength linear indexing efficient parent array view contiguous purposes package handle abstractarray focus cartesian indexing efficient optionally support slicing dropping dimensions indexed scalar aside differences applicability design approaches efficient compared arrayviews construction types faster linear indexing fast ideal solution probably combine dahua contiguousview type applicable approach base julia subarrays types arrayviews performance particular generality makes slow construct moreover subarray indexing delegated linear indexing bad parent array type support efficient linear indexing cartesian indexing efficient wider variety array types approach emphasized benefits stagedfunctions example benefits staged functions consider d slices d array s sliceview s sliceview cartesian indexing natural approach replace s s runtime overhead requires method getindex specialized viewtypeofunitrangeintintunitrangeint viewtypeofintunitrangeintunitrangeint generate methods using loops supporting int unitrange steprange dimension require pregenerated variants getindex contrast staged functions allow generated fly arbitrary dimensionality desirable julia session fraction methods status re running recent version julia master currently types viewcreation supported subview sliceview subview duplicates julia current indexing rules including dropping trailing dimensions size sliceview aimed apl support currently behaves analogously julia slice julialangjulia similarly julia sub slic