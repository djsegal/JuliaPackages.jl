scanbytejl bytes fast scanbyte package solve simple occurrence byte byte set bytes chunk memory faster version findfirst iterates bytes memory scanbyte microoptimized speed laptop hit ram bandwidth limit gb speed makes suitable building block string search engines regex implementations parsers similar usage central function package memchr function takes chunk memory bytes returns position indexed chunk memory byte byte set found bytes found chunk memory type implements methods pointer sizeof alternatively input raw pointer size byte set passed single uint scanbyte simply dispatch libc memchr function valbs bs instance type byteset abstractsetuint package latter scanbyte compile time pick efficient simd algorithm based content byteset currently scanbyte simd algorithms ssse avx instruction sets found xbased pcs slow fallback cpus instructions example usage examples input data string codeunits object arrayuint pointerlength type implements pointer sizeof search single byte julia memchr julia uint julia memchr codeunits julia uint true julia str julia julia gc preserve str memchr pointer str sizeof str uint uint search byteset val force specialization byteset julia bs byteset x xa xf julia memchr xa xf val bs search using function construct byteset using predicate xxff julia xa xc xd xf function julia bs byteset filter x xff julia memchr hello bob val bs drawbacks moment scanbyte major drawbacks search predicatebyteset single byte tt relies generated functions compute optimal julia code create scanning function means byte set compile time relies explicit simd instructions fast run computers ideally avx instruction set sse ssse sets create scanning function computer avx runs computer llvm probably crash currently fallback methods fairly slow guaranteed stable version detecting simd instructions julia supports package tries guess parsing output llvm