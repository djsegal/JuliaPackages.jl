primesieve prime factoring functions package provides functions related prime factoring generating counting primes factoring integers package fastest source libraries functions name primes cause collisions note dec bitrot rests bit bit broken tests commented tests suite pass fix pr please challenging wrapper standalone program inputs links authors tables libraries package unaware binaries libprimesieve libprimecount windows osx easy installation platforms registered package registered dependency install unix pkg clone pkg clone pkg build primesieve functions package genprimes generate array primes inclusive genprimes generate array primes mfactor factor integers decimal digits primepi prime counting function primes countprimes primes nextprime prevprime prime someprimesnn iterator primes n n someprimesn primes n allprimes iterator primes allprimes primes nthprime nth prime nprimesstart generate array primes start isprime primality test gaussian integers randprime random prime package following tables libraries oliveira tables prime counting function prime sieve library libprimesieve prime counting function library libprimecount integer factoring libraries msieve gmpecm data types tables encoded int native type sieve libprimesieve uint inputoutput type fastest primepi algorithm libprimecount deleglise rivat algorithm int risk overflow constructing giving arguments functions package easiest avoid arguments quotes eg countprimes available bigint int deepconvert functions following functions vectorized genprimes genprimes startstop return array primes start stop genprimes stop return array primes stop genprimes startstop alg algorithm generate primes using specified algorithm algorithm auto default sieve algorithm efficient depends parameters sieve larger intervals larger values start keyword sieve fast sieve libprimesieve function nextprime exceed upper limit argument sieve chosen automatically julia bigint genprimes element arraybigint written genprimesbi bi primepi computes prime counting function primepi alg algorithm efficient algorithms methods auto default dr tabsieve default auto tries choose faster dr tabsieve notes algorithms slower legendre lehmer meissel lmo sieve algorithm dr efficient parallel deleglise rivat method algorithm tabsieve combination tables sieve efficient table entry note example julia time primepi alg tabsieve elapsed time bytes allocated julia time primepi alg dr deleglise rivat faster elapsed time bytes allocated julia time primepi alg dr elapsed time bytes allocated julia time primepi alg tabsieve table sieve faster elapsed time bytes allocated mfactor factor integer example julia time mfactor elapsed time bytes allocated dictintint entries mfactor ecm true ecm search factors larger digits digits mfactor deadline aborts factoring minutes mfactor logfile filenamelog writes information log file mfactor info true prints log information terminal mfactor bigint returns array factorizations mfactor calls libmsieve libecm countprimes count primes prime tuplets interval looks largest value table requested value computes remaining values note primepi logically equivalent countprimes start start function primepi faster slower countprimes countprimes stop count primes equal stop countprimes startstop count primes start stop countprimes start stop tuplet count prime tuplets countprimes start stop alg algorithm count prime tuplets default value start optional keyword argument tuplet values primes prime sextuplets tables implemented tuplet equal primes tuplets optional keyword argument alg tabsieve default nexta sieve sieve slower tabsieve tabsieve combination tables fast sieve nexta variants nextprime examples countprimes primes satisfying countprimes tuplet prime triplets countprimes tuplet prime sextuplets quote arguments expression string converted int prevents overflow countprimes bigint method nexta chosen automatically example julia bigint countprimes nextprime prevprime nextprime returns prime prevprime returns largest prime nextprime returns kth prime following prevprime returns kth prime preceeding algorithms finding optimal available partially automated nextprime prevprime alternate algorithm coded borcher iterators someprimesn primes n someprimesnn primes n n allprimesn primes n allprimes primes example primorial function defined using iterator julia primorial prod someprimes julia bigint primorial nthprime returns nth prime using fast algorithm libprimecount argument converted int nthprime alg sieve algorithm libprimesieve slower nprimes return array primes start usage nprimes start single threaded versions usage scountprimes startstop tuplets printprimes print primes prime tuplets start stop usage printprimes startstop tuplet default value start optional keyword argument tuplet values legendrephi legendre sum phi function legendre arguments converted int primeli offset logarithmic integral argument converted int primeliinv inverse li function argument converted int randprime randprime choose random prime primes range equally chosen randprime choose random prime randprime lim maximum random composite giving randprimenn return nxnx array random primes isprime returns true gaussian integer prime sieve parameters primesievesize set sieve size kilobytes setting sz satisfy sz usage primesievesize primesievesize sz primesievenumthreads set threads parallel sieve default cores usage primesievenumthreads primesievenumthreads numthreads primepinumthreads set threads parallel primepi default cores usage primepinumthreads primepinumthreads numthreads primemaxstop return largest value uint passed parameter stop sieve usage primemaxstop primepixmax function returns largest allowed argument primepi using dr algorithm primetest run test sieve algorithm usage primetest primepitest run test primepi algorithms tables prime pi function functions tables completley hidden user access directly tables julia time countprimes elapsed time bytes allocated happened look tables julia primelookup th table value prime pi table primes interval length found sieves primetableinfo print information prime pi tables julia primetableinfo tables listed table increment value entries table largest table table incr tab len max primelookup look value prime pi function tables provided aid understanding behavior countprimes usage primelookup tuple single element tuple elements returned rem table found largest index satisfying found value prime pi rem primetables array type arrayprimetable containing prime tables tablesjl format example map lengthprimetables tables lengths primetablefilename function returning path file containing prime pi tables tables loaded package loaded details typemaxint explicitly bigger data type instance julia countprimes int example returned value table argument larger primemaxstop routines quote arguments converted appropriate type julia countprimes julia countprimes routines tables convert arguments int indices tables typemaxuint routines sieve converted uint data type sieve routines largest stop value largest start value sieve uint data type conversions depending types start stop countprimes returns int tables sieves routines support data types primetabletype return data type tables int largest values sieve primesievetype return native prime sieve type uint libprimesieve returns data various integer formats chosen julia interface type start parameter eltypeprimetable return element type values table functions apopcount curiosity supposed optimized function julia loop faster apopcountarr binary representation array arr length array truncated multiple note treats contents array bits type particular arr array bits type pointers array counted comments kim walisch algorithm algorithm counts bits population count array using bit tree merging knowledge fastest integer arithmetic bit population count algorithm operations bytes bit cpus example julia aa array uint julia fill aa typemax uint julia time apopcount aa elapsed time bytes allocated test overhead negligible julia lpopcount length countones julia time lpopcount aa elapsed time bytes allocated julia version faster algorithm cdric lauradoux notes algorithms auto genprimes primepi simple choose method improved routines fast worst genprimes magnitude faster baseprimes bugs interrupting call sieves usually cause memory error libprimesieve apparently static interrupt subsequent sieving runs slower correct results interrupting call libprimecount results segfault disablesigint appear memory leaks libprimecount crash julia system msieve interrupt handler installed code install uninstall cal