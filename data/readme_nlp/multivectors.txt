multivectors multivectors julia package defines multivector type represent mixedgrade linear combinations kvectors vector space blades grade multivectors intended implementation geometric algebra useful clifford algebra operator naming conventions ones geometric algebra closely aligned conventions computer science recommended read documentation blades kvectors geometric product multivectors essentially extends algebras types defined blades kvectors geometric product operators defined geometric product fundamental redefine wedge inner products using geometric product note strictly true vectors complete picture extend multivectors require grade projection operator grade projection operator simply returns vector grade contained multivector grade commutator product catch grades inner products grade projection define wedge inner products using geometric product multivectors notice symmetry grade raising grade lowering grade gradegrade grade raising grade gradegrade grade lowering inner product inner product defined multivectors left contraction operator lcontraction contraction blades result blade grade gradegrade orthogonal contained properties grade reduction orthogonality projection operator left contraction powerful intiutive standard inner product generalization inner product dot product vector algebra blades multivectors examples barycentric coordinates julia using multivectors julia generatebasis true generate blades euclidean dspace julia ee e e e e simple angle triangle julia twice triangle worry factor function calculate barycentric coords ratio triangle edge original triangle barycentric coord vertex ratio pbcabc julia barycoords tuple coords notice code directly represents geometric relationship body function coordinate free index vertices julia barycoordse e e julia barycoordse e e julia barycoordsee julia barycoordsee julia barycoordseee plane adding direction multivectorfloat ee multivectorfloat ee multivectorfloat ee plane natural result barycentric coords grade multivector bonus extra information grade vectors extra info grades bit odd lie bracket ratio operator scalar multivector clean results selecting grade scalar explicitly selecting grade relevant results common pattern multivectors julia baryscalars mapgrade barycoords julia baryscalarseee julia baryscalarse extending dimensions straightforwards tetrahedron julia e julia e julia barycoords barycoords generic function method julia barycoordseee julia barycoordseee add extra dimension barycentric coords d volume directly cross product cross product exist d note restart julia basis main module generate basis practice namespace basis module behold barycentric coordinates pentachoron julia using multivectors julia module r using multivectors generatebasis d euclidean space julia using r julia e e e e aller pick basis blades julia ee e e e e pentachoron julia hypervolume origin julia barycoords julia barycoordse e e e julia barycoordsee e e julia barycoordse e e e e julia barycoordsee e e julia barycoordseeee quaternions rotors versors quaternions particularly simple construction geometric algebra geometrically mulitivector transform via geometric product effect rotating vector laying plane amount rotate assume normalized act multivectors neccesarily plane rotation treat versor quaternion versor simply means sandwich product transforming object using sandwich product multiply twice rotating twice angle modify initial construction rule normalize familiar quaternion transformation rule indicate reverse acts complex conjugation flips sign grade blades construction extends lower dimensions involve complex called rotor geometric algebra quaternion geometrically view rotors sequence reflections understand operates vectors parallel plane rotation cayley map rotor construction step create simple mapping rotors bivectors construct rotor single vector plane rotation create vector orthogonal vector plane rotation accomplished multiplying vector bivector rotation plane vectors simlilar fashion vectors adding subtracting vector orthogonal choose bivector scaled tan trigonometry correct angle simplifying pulling adding scaling factor tan tan cayley map depends rotation bivector using similar arguments arrive reverse map recover bivector rotor example construct quaternionrotor taking vector e vector half normalized vector half julia half normalizee normalizeee julia halfe transform vector sandwich product julia reverseeee julia grade prunesortbasis element kvectorfloat e e rotors constructed using halfangle trig functions quaternions julia cos sine true entering values repl keyboard characters required package examples enter type e enter tab type wedge enter wedgetab gotchas note e e types values example julia typeofe unionall operations expected results numerical coefficient required julia e e julia e e e julia e e e methods operators defined linearalgebra package julia using linearalgebra julia normalizee e operators depending specific geometric algebra desireable define operators example meet join operators useful depending context multiple definitionsimplementations operator multivectors chooses omit operator include operators methods defined kvectors blades multivectors linearity extended via vector space scalar outermorphism extended via performance design blades kvectors multivectors current iteration designed exploring prototyping novel algorithms emerging field applied geometric algebra focus computer base animation cgi foundational types optimally performant extend performance rest types blades designed implemented optimal performance mind operations simple blades performance similar operations native scalars julia sqrt exp ex e ey e julia btime ns allocation bytes julia btime exey ns allocation bytes e accomplished julia metaprogramming features effectively leverage julia type system compiler heavy lifting creating unqiue types blade julia typeofex typeofey typeofex typeofey efloat efloat false performance minded design extended kvectors multivectors intention blades kvectors multivectors reference implementation geometric algebra main hurdle achieving performance julia type information effectively optimize code maintaining flexibility ease types rely julia compilerparser achieve performance future versions julia optimize kvectors multivectors extent future versions packages implementing kvectors multivectors performant truely performance require specializing fixed algebra set objects example approach klein related packagestypes documentation kvectors blades information grassmann julia package implements geometric algebra context wider algebraic framework project information contributing please read details authors michael alexander ewert developer digital domain license project licensed modified apache license license file detail