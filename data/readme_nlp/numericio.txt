numericiojl description improved support formatting numeric data includes facilities display values using si prefixes makes easy control significant digits display basic usage numericiojl tries provide convenience iosbase configurability ex setting iosbaseprecision modifying output format base streaming object instead numericiojl formattedio wrapper object print data desired output format appears somewhat similar flexible baseiocontext object core julia obtain string representation real value using si prefixes formatted function formattede si ndigits n similarly generate string using scientific notation following formattede sci ndigits using engineering notation limiting powers divisible formattede eng ndigits limit results ascii output specify charset keyword formattede eng ndigits charsetascii e prefer create convenience formatting function si formatted si ndigits sie n sie t print multiple values preferable efficient directly create formattedio wrapper object fio formattedstdout si ndigits formattedio printlnfio e n printlnfio e t advanced usage lowerlevel structures numericio finetune numeric output desired following example approximates engineering notation using ascii characterset asciiexponentfmt numericioioformattingexpnum x false numericioasciisuperscriptnumerals fmt numericioioformattingrealasciiexponentfmt ndigits decpos decfloatingtrue engtrue minus infinf fio formattedstdout fmt formattedio printlnfio e x generate mantissa exponent portions separately useful displaying plot tick labels using common axis multiplier implementation numericioprintformatted showexpfalse numericioprintformattedexp details sample applications improved repl output julia console users repl outputs easier read simply adding lines juliaconfigstartupjl file import repl using numericio change floats displayed repldisplay basedisplayreplrepldisplay unionfloatfloat printformattedreploutstreamrepl si ndigits change vectors displayed repldisplay function basedisplayreplrepldisplay vector fio formattedreploutstreamrepl si ndigits length printlnreploutstreamrepl element typeof vi printlnfio vi formatted output solution fairly safe programmers writing repl displays read values display failing subsequent read operation issue application programmers expecting carefully formatted output suboptimallooking output re array outputs note defining display method alter arrayfloat arrays displayed change particular output define basebaseabstractiobufferctxiocontext unionfloatfloat printformatted si ndigits currently julia v arrays generate outputs writing temporary iobuffer solution recommended involves altering behaviour relatively lowlevel functions cause issues re coordinating siunits display function described conjuction siunitsjl displayed object type siquantity float instead define following function baseioiocontextbaseterminalsttyterminal unionfloatfloat printformattedio si ndigits formatting outputs siquantity values addition values written terminal note lower level function definition cause undesired behaviours limitations support si notation limited e e values beyond range default scientific notation si notation displays e e e g g g reconfigure numericio arbitrarily display g g t g t g algorithms bit complicated absolutely nice simplifyoptimize code support arbitrary bases ex x compatibility extensive compatibility testing numericiojl performed module tested using following environment windows linux julia