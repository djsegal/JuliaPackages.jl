calippsojl linear programming algorithm jamming hard spheres breaking changes introduced v changing default optimizer passing arguments corresponding section cause following error message main function interrupted error provided optimizerconstructor returned empty optimizer section instructions solving package pure julia implementation calippso algorithm generating jammed packings hard spheres algorithm introduced article artiaco daz parisi riccitersenghi explained calippso consists hain pproximate li near rogramming acking pherical bjects arbitrary dimensions mono disperse poly disperse configurations shown left monodisperse packing k particles coloured according contacts polydisperse packing disks radii lognormal distribution network contacts drawn package licensed mit license please feel free modifyimprove code suits cite useful articlecalippso title hardsphere jamming lens linear optimization author artiaco claudia az hernndez rojas rafael parisi giorgio riccitersenghi federico month nov journal physical review volume pages publisher american physical society doi physreve url documentation read documentation code basic usage installation julia repl jupyter notebook etc simply add calippso prefer import package manager pkg import pkg pkg add calippso automatically install required dependencies main ones jumpjl staticarraysjl glpkjl latter glpk default solver calippso calippso added simply import current space repl jupyter notebook script etc package namely using calippso minimal example mwe change solver calippso scripts examples folder repo usage examples minimal example tried package easy indeed consists single main function producejammedconfigurationxs r provide function generate low density random initial condition calippso explain paper relevant documentation algorithm initial condition close jamming code guaranteed low density configurations systems low density configuration suitable initializing calippso instance jammed system hardspheres size mwe using calippso precompilemainfunction optional highly recommended produce colorful output safely ignore using random random seed optional reproducibility sake mwe choosing seed julia rng determines random ic produces generaterandomconfiguration const r xs generaterandomconfiguration passed assumed systems box size packing info vst smaxvst isostaticvst producejammedconfiguration xs r maxiters main arguments producejammedconfiguration particles initial position xs initial radius r polydisperse systems r instead array specifying size particle implementation producejammedconfiguration assumes system contained periodic hyper cube size value inferred following xs times matrix specifying position particle columns dimensional position vector particle passed third argument producejammedconfiguration left unspecified xs type matrixfloat assumed xs type vectorsvector periodicnumberfloat elements xs periodicnumber type hen automatically inferred instance xs generated calling generaterandomconfiguration example usage keyword arguments maxiters etc explained dedicated section documentation docstring main function simply try producejammedconfiguration output output producejammedconfiguration following jammed packing provided convergence attained stored monopacking struct polypacking systems polydispersity object contains array particles list contact vectors magnitudes contact forces list neighbours information termination status calippso time amount memory allocated process list times lp optimization etc docstring convergenceinfo complete list list values sqrtgammastar obtained optimization list values maxmu smustar dotsmudots obtained optimization analogous list specifies boolean variables isostaticity holds corresponding iteration changing solver fantastic jumpjl package model creation algorithm able available solvers suited linear optimization implementation includes code following solvers gurobijl highsjl glpkjl tested using mosekjl clpjl hypatiajl cosmojl able obtain configurations due lack precision help please strongly advice using gurobijl julia wrapper gurobi solver solver tested developing package choosing solver gurobi mwe look using calippso using random random seed optional reproducibility sake mwe choosing seed julia rng determines random ic produces generaterandomconfiguration using gurobi const grbenv gurobi env const grbopt gurobi optimizer grbenv const grbattributes dict outputflag feasibilitytol e optimalitytol e method threads calippso maxthreads precompilemainfunction grbopt grbattributes optional highly recommended produce colorful output safely ignore const r xs generaterandomconfiguration passed assumed systems box size packing info vst smaxvst isostaticvst producejammedconfiguration xs r maxiters optimizer grbopt solverattributes grbattributes note solvers usually require choices attributes tune accuracy performance refer documentation options advanced usage changes previous versions note versions v choose optimizer solving lp instances v onwards user declare optimizer grbopt arguments grbenv pass single argument producejammedconfiguration led cleaner implementation truly solver agnostic introduced potential time optimize called optimizer associated instance lp model reason producejammedconfiguration interrupted main loop exits function called time model created optimizer error occur error provided optimizerconstructor returned empty optimizer caused optimizer linked model optmize called jump solve simply calippsoempty chosen solver instance calippsoemptygrbopt example using default optimizer calippsoemptycalippsodefaultoptimizer examples examples calippso dimensions features examples section documentation refer examples folder repo scripts usage advanced usage features advanced usage details producejammedconfiguration please refer documentation todo add documentation functions polydisperse packings similar monodisperse counterpart implement functions closed boundary conditions register calippso julia packages registry acknowledgements supported simons collaboration cracking glass grant european research council erc european union horizon gr