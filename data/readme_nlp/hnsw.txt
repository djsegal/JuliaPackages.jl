hnswjl approximate nearest neighbor searches using hierarchical navigable world hnsw algorithm described highlights written julia julian dependencies supports incremental index creation arbitrary distance functions dataagnostic data arbitrary types corresponding distance function creating index index library struct type hierarchicalnsw constructed using hnsw hierarchicalnswdata metric efconstruction data abstractvector data metric euclidean metric distance calculation metric defined distancesjl type evaluatecustommetric implemented maximum links node level note value highly influences recall depending data m m maximum links bottom layer defaults m m efconstruction maximum length dynamic link lists index creation low values reduce recall values increase runtime index creation ef maximum length dynamic link lists search changed afterwards using setefhnsw value ml log prefactor random level generation maxelements lengthdata set larger value add elements structure initial creation hierarchicalnsw struct initialized search graph built calling addtographhnsw indices iteratively inserts data graph optionally provide indices subset indices data partially construct graph searching initialized hierarchicalnsw search approximate nearest neighbors using idxs dists knnsearchhnsw query query single type eltypedata vector simple example using hnsw dim numelements data rand dim numelements intialize hnsw struct hnsw hierarchicalnsw data efconstruction ef add data graph optionally pass subset indices data partially construct graph addtograph hnsw optionally progress notification step numelements addtographhnsw iszero step info processed step queries rand dim approximate nearest neighbors queries idxs dists knnsearch hnsw queries multithreading multithreaded version algorithm available checkout branch multithreaded start indexing addtograph hnsw multithreading true multithreaded searches add multithreadingtrue keyword argument knnsearch