iterationcontroljl linux coverage lightweight package controlling iterative algorithms view training optimizing machine learning models builds earlystoppingjl inspired learningstrategiesjl related software dynamiciteratorsjl installation using pkg pkg add iterationcontrol basic idea suppose object squarerooter iteratively computing approximations square root model squarerooter julia model root train model train iterations julia model root train model train iteration julia model root replace integer argument trainmodel sophisticated controls lifting method train iterationcontroltrain method defined package using iterationcontrol iterationcontrol train model squarerooter train model lifting definition lifted train functionality original model squarerooter iterationcontrol train model julia model root julia iterationcontrol train model step numberlimit info root info info info info stop triggered numberlimit stopping criterion control repeatedly applied sequence triggers stop control step train model iterations applied times signaling stop current control cycle third logs value function root evaluated model info example control terminate model iteration model admits method returning loss difference square root lift method iterationcontrolloss enable control using lossbased stopping criteria loss threshold demonstration include callback model squarerooter train model julia loss model iterationcontrol loss model squarerooter loss model lifting losses float callback model push losses loss model julia iterationcontrol train model step threshold callback callback info stop triggered threshold stopping criterion julia losses element arrayfloat e applications machine learning loss sample loss computed iterations model additionally generates userinspectable training losses iteration similarly lifting appropriate access function iterationcontroltraininglosses enables prechelt progressmodified generalization loss stopping criterion pq table pq criterion earlystoppingjl package otherwise enabled iterationcontrolloss overloaded reference prechelt lutz stopping neural networks tricks trade ed orr springer interface described sufficient controlling conventional machine learning models iteration parameter tree boosting example online incremental training online incremental training lift method ingesting data model iterationcontrolingestmodel datum control datadata data iterator generating datum items ingested application control default data control passive data exhausted data details access model wrapper dealing model wrapping implement data ingestion simple particle tracking example verbose logging inspecting control reports iterationcontroltrain method keyword argument verbosity defaulting larger verbosity noisier return value iterationcontroltrain tuple control report tuples report generated control training example final loss accessed report withlossdo control model squarerooter reports iterationcontrol train model step withlossdo println numberlimit julia reports loss false log julia reports loss controls provided controls repeatedly applied sequence control triggers stop control type detailed docstring short summary advanced options omitted control description enabled overloaded trigger stop notation prechelt step train model iterations train infoidentity log info value model train warnpredicate log warn value model predicatemodel holds train errorpredicate log error value model predicatemodel holds stop train callback call model train timelimit stop hours train numberlimit stop applications control train numbersincebest stop loss occurred control applications ago train withnumberdoinfo call complete control cycles train withlossdoinfoloss call loss loss current loss train loss withtraininglossesdoinfo call current batch training losses train traininglosses invalidvalue stop nan inf inf losstraining loss encountered train thresholdvalue stop loss value train loss glalpha stop generalization loss exceeds alpha train loss gl patience stop consecutive loss increases train loss ups pqalpha stop progressmodified gl exceeds alpha train loss traininglosses pq datadata call ingestmodel item item iterable data train ingest table atomic controls stopping option following controls trigger stop provided function returns true stopiftruetrue specified constructor callback withnumberdo withlossdo withtraininglossesdo control wrappers modify control behavior wrapper description iterationcontrolskipcontrol predicate apply control predicate applications control wrapper function docstring iterationcontrolloudercontrol increase verbosity level control specified value negative values lower verbosity iterationcontrolwithstatedocontrol apply control call internal control useful debugging default logs info warning internal control public api iterationcontrolcompositecontrols apply control controls sequence hood table wrapped controls access model wrapper note functions ordinarily applied model control callback instead applied iterationcontrolexposemodel iterationcontrolexpose appropriately overloaded implementing controls abstract control type object control behavior implemented using functional style interface six methods compulsory fallbacks takedown needsloss needstraininglosses return false namedtuple respectively update control model verbosity initialization update control model verbosity control bool takedown control verbosity humanreadablenamedtuple control cycle count completed control cycles nonsensical apply control model lossmodel overloaded error thrown attempted declare needslosscontrolmycontrol true value true otherwise control applied anyway loss called returns trait needstraininglossescontrol serves analogous purpose training losses simplified version iterationcontroltrain calls methods function train model controls verbosity int control composite controls training verbosity info using controls flat control training event counts control cycles update control model verbosity finished control checks model supports control needsloss control loss model throw errneedsloss needstraininglosses control traininglosses model throw errneedstraininglosses subsequent training events finished update control model verbosity finished control finalization return takedown control verbos