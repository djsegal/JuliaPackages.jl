graphqlclientjl julia graphql client seamless integration server package intended connecting communicating graphql servers easy whilst integrating easily wider julia ecosystem key features querying mutating subscribing manual writing query strings gqlstr standard string literal validates query string compile time deserializing responses directly using structtypes type stable querying construction julia types graphql objects using introspection help querying installation package installed julia package manager using pkg repl mode press enter pkg add graphqlclient using pkg functions julia using pkg pkg add graphqlclient basic usage connecting server client instantiated using client type using graphqlclient client client default query introspect server schema set global client user queries mutations subscriptions introspection functions globalgraphqlclient client querying query client type graphql query hand response containing fields obtained introspection response query client countries query global client response query countries add arguments specify fields response queryargs dict filter dict code dict eq au response query countries queryargs queryargs outputfields name response data countries element vector dictstring name australia query query string directly using normal string gql standard string literal performs validation string querystring gql query eq string countries filter code eqeq name variables dict eq au response graphqlclient execute querystring variables variables define structtype deserialise result using structtypes struct countryname name string structtypes structtype typecountryname structtypes orderedstruct response query countries vectorcountryname queryargs queryargs outputfields name response data countries countrynameaustralia introspection build type automatically country graphqlclient introspectobject country response query countries vectorcountry queryargs queryargs outputfields name response data countries country name australia mutations mutations constructed similar except arguments keyword argument typically mutation input example response mutate client mutationname dict newid response mutate mutationname dict newid global client subscriptions subscriptions syntax similar except julia notation opensubscription client subscriptionname subargs id outputfields val response val response data subscriptionname val stopsub val return stopsub true subscript