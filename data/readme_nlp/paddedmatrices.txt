paddedmatricesjl deprecated paddedmatricesjl deprecated favor stridearraysjl quick start julia using paddedmatrices julia matmul multithreaded multiply store result overwriting contents julia matmulserial singlethreaded multiply store result overwriting contents julia matmul multithreaded multiply return result julia matmulserial singlethreaded multiply return result multithreaded functions start julia multiple threads paddedmatrices maximum minvectorizationbasenumcores threadsnthreads threads system cores start julia threads example core system start julia threads start julia threads start julia julia set julianumthreads environment variable starting julia usage library provides array types purejulia matrix multiplication native types optionally statically sized optionally padding default ensure columns aligned following chart singlethreaded benchmarks cpus comparing smatrix mmatrix multiplication staticarraysjl beyond mmatrix switch using linearalgebrablasgemm stridearray compiletime sizes unsafe ptrarray time lower constant overhead solved julia cascadelakeavx benchmarks base matrixfloat type using purejulia matmul method matrices square axis reports size dimension benchmarks ranged matrices axis reports doubleprecision gflops billions double precision floating operations xe cascadelake cpu avx i g tigerlake laptop cpu avx iu haswell cpu avx mmatrix performed beyond relative haswell linearalgebrablasgemm computer using mkl instead openblas easiest change using mkljl staticarray currently relies unrolling operations taking advantage llvm slp vectorizer approach arrays scales poorly avx dynamicallysized matrix multiplication regular arrayfloat arrays faster starting despite able specialize size arrays unlike smatrix mmatrix versions means method recompile specialize matrixfloat avx smatrix method faster dynamically sized method matrices quickly fell benchmark staticarray larger platforms speed benchmarks skip compile times sizespecializing methods fixedsizearray ptrarray matched smatrix performance beginning leaving smatrix method starting avx systems avx paddedmatrices relies loopvectorizationjl codegeneration goals paddedmatricesjl provide performance range practical sizes dynamic matmul compare openblas mkl larger sizes singlethreaded float benchmarks xe size range tigerlake laptop earlier performance strong size range especially compared default openblas adaptively change packing strategy function size extending benchmarks performance start fall hundred performance particular tuning blocking parameters larger sizes possibly switching packed arrays column panelmajor storage prefetching diagnosing fixing cause erratic performance illustration consider multiplication matrices setup julia using paddedmatrices linuxperf julia julia rand rand c time c similar c allocations kib julia time matmul c c time matmul allocations gib gc time true julia foreachmklmul foreach matmul base oneto sample pstats results julia pstats cpucyclesinstructionsbranchinstructionsbranchmissestaskclockcontextswitchescpumigrationspagefaultsldcacheloadmissesldcacheloadslicacheloadmissesdtlbloadmissesdtlbloadsitlbloadmissesitlbloads time foreachmulc cpucycles e cycles ns instructions e insns cycle branchinstructions e instructions branchmisses e branch instructions taskclock e contextswitches e cpumigrations e pagefaults e ldcacheloadmisses e loads ldcacheloads e licacheloadmisses e dtlbloadmisses e dtlbloads e itlbloadmisses e itlbloads e julia pstats cpucyclesinstructionsbranchinstructionsbranchmissestaskclockcontextswitchescpumigrationspagefaultsldcacheloadmissesldcacheloadslicacheloadmissesdtlbloadmissesdtlbloadsitlbloadmissesitlbloads time foreachmulc cpucycles e cycles ns instructions e insns cycle branchinstructions e instructions branchmisses e branch instructions taskclock e contextswitches e cpumigrations e pagefaults e ldcacheloadmisses e loads ldcacheloads e licacheloadmisses e dtlbloadmisses e dtlbloads e itlbloadmisses e itlbloads e difference ldcacheloadmisses looks relatively minor runs nearly difference performance instructions clock cycle time corresponds mean nearly gflops million matrix multiplications corresponds investigating cause erratic performance mkl example additionally library vectorizedrngjl random generation pay price gc vs staticarrayssmatrix actually faster julia using paddedmatrices staticarrays benchmarktools julia benchmark smatrix rand benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample julia benchmark stridearray rand benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample julia benchmark smatrix randn benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample julia benchmark stridearray randn benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample re generating lot random matrices re actually performancewise biting gcbullet course preallocate performance julia stridearray float undef staticint staticint julia benchmark rand benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample julia benchmark randn benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sample preallocating arrays gain additional performance future try ensure basic functions operations matrix multiplication broadcasting creation force heapallocation inline easier write allocating code mutable arrays arrays loopvectorizationjl broadcasts julia using paddedmatrices staticarrays benchmarktools julia afs stridearray randn asm smatrix array afs julia bfs stridearray rand bsv svector bfs julia cfs stridearray rand csv svector cfs julia dfs exp afs bfs log cfs julia dfs exp asm bsv log csv true julia benchmark exp afs bfs log cfs stridearrays allocating benchmarktools trial memory estimate kib allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time s gc samples evals sample julia benchmark exp asm bsv log csv staticarrays allocating slower benchmarktools trial memory estimate bytes allocs estimate minimum time s gc median time s gc mean time s gc maximum time s gc samples evals sample julia benchmark dfs exp afs bfs log cfs stridearrays using preallocated output benchmarktools trial memory estimate bytes allocs estimate minimum time ns gc median time ns gc mean time ns gc maximum time ns gc samples evals sampl