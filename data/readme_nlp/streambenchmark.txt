streambenchmark getting realistic estimate achievable maximal memory bandwidth note package implements simple variant original stream benchmark bandwidthbenchmarkjl variant thebandwidthbenchmark memorybandwidth function memorybandwidth estimates memory bandwidth megabytes mb returns named tuple indicating median minimum maximum measurements remarks upfront obtain reasonable estimate start julia threads physical cores play length vectors streaming kernels via keyword argument numa nodes times times size outermost cache size particular unreasonably bandwidths pin julia threads separate cores simplest pin julia threads cores compact pinning settings juliaexlusive using threadpinningjl pinthreadscompact latter julia using threadpinning julia pinthreads compact julia using streambenchmark julia memorybandwidth verbose true multi threaded threads copy mb scale mb add mb triad mb median mb median minimum maximum keyword arguments default streambenchmarkdefaultvectorlength length vectors streaming kernels nthreads default threadsnthreads nthreads threads benchmark hold nthreads threadsnthreads writeallocate default true assume count write allocates verbose default false verbose output including individual results streaming kernels benchmark run single multithreaded benchmark call benchmark produces output julia benchmark single threaded copy mb scale mb add mb triad mb median mb multi threaded threads copy mb scale mb add mb triad mb median mb single median minimum maximum multi median minimum maximum scaling threads assess scaling maximal memory bandwidth threads provide function scalingbenchmark julia scalingbenchmark threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth threads max memory bandwidth element vectorfloat julia using unicodeplots julia lineplot length title bandwidth scaling xlabel cores ylabel mb border ascii canvas asciicanvas bandwidth scaling r mb cores vector length default vector length times size outermost cache rule thumb laid dr bandwidth measure memory bandwidth factorsas streambenchmarkvectorlengthdependence julia streambenchmark vectorlengthdependence dictint float entries e comparison original stream benchmark download compile source code original stream benchmark via streambenchmarkjl julia using streambenchmark julia streambenchmark downloadoriginalstream creating folder stream downloading stream benchmark julia streambenchmark compileoriginalstream compiler gcc multithreading false trying compile stream using gcc using options o dstreamarraysize julia streambenchmark executeoriginalstream stream version revision system bytes array element array size elements offset elements memory array mib gib total memory required mib gib kernel executed times time kernel excluding iteration compute reported bandwidth clock granularity precision appears microseconds test microseconds clock ticks increase size arrays getting clock ticks test warning rough guideline results please precision system timer function rate mb avg time min time max time copy scale add triad solution validates avg error e arrays julia memorybandwidth verbose true nthreads writeallocate false original benchmark count assumes absence writeallocates single threaded threads copy mb scale mb add mb triad mb median mb median minimum maximum options comments loopvectorization streambenchmarksjl loopvectorization avxt instead threads setting streambenchmarkavxt true note nthreads single thread nthreadsthreadsnthreads threads avxt compatible benchmark run subset available julia threads thread pinning recommended set environmental variable juliaexclusive pinthreadscompact threadpinningjl pin julia threads nthreads cores discussion options numactl caveats resources original stream benchmark fortran blog post optimize interpret benchmark acknowledgements ci infrastructure provided paderborn center parallel computing pc