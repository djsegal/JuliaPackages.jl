staticpolynomials documentation build status references cite staticpolynomialsjl library fast evaluation multivariate polynomials achieves speed automatically generating compiling performance code evaluation polynomial derivatives encoding type signature terms exists julia metaprogramming capabilities particular generated functions tradeoff approach polynomial unless coefficients changes functions compiled usually idea evaluate polynomial system polynomials package optimised fast evaluation suited usual polynomial arithmetic recommended construct polynomial implementation multivariatepolynomialsjl dynamicpolynomialsjl convert staticpolynomialspolynomial evaluations performance staticpolynomials substantially faster automatic differentiation packages forwarddiff complex polynomials outperforms hand tuned gradients using staticpolynomials benchmarktools staticarrays import forwarddiff import dynamicpolynomials polyvar realworld test polynomial function f return setup polynomial polyvar p polynomial f svector rand btime f ns allocations bytes btime p ns allocations bytes btime gradient p ns allocations bytes cfg forwarddiff gradientconfig f btime forwarddiff gradient f cfg ns allocations bytes short introduction julia import dynamicpolynomials polyvar julia using staticpolynomials gradient julia polyvar julia polynomial x xy julia evaluate julia gradient element arrayint declare variables parameters julia polynomial parameters a x xy julia evaluate julia gradient element arrayint differentiate respect parameters julia differentiateparameters element arrayint support systems polynomials julia polyvar julia polynomialsystem polynomialsystem x y julia evaluate element arrayint julia jacobian arrayint declare parameters julia polynomialsystem parameters polynomialsystem a x y xb julia evaluate element arrayint julia jacobian arrayint differentiate respect parameters julia differentiateparameters arrayint