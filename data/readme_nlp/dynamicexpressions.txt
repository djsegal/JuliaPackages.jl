ridiculously fast dynamic expressions dynamicexpressionsjl backbone symbolicregressionjl pysr summary dynamic expression snippet code change throughout runtime compilation dynamicexpressionsjl following defines enum userspecified operators using enum defines lightweight typestable data structure arbitrary expressions generates specialized evaluation kernels space potential operators generates kernels derivatives using zygotejl dynamicexpressionsjl operate arbitrary types vectors tensors symbols strings unions import export functionality symbolicutilsjl move runtime expression cas example using dynamicexpressions operators operatorenum binaryoperators unaryoperators cos x node feature x node feature expression x cos x randn float expression operators element vectorfloat construct expression normal operators calling operatorenum eval functions node specified enum speed happens naively julia symbols define evaluate expression btime eval cos ns slow meaning hard quickly search space expressions dynamicexpressionsjl compares btime expression operators ns faster compile internally calling evaltreearrayexpression operators change expression dynamically random generator performance btime begin expression op rand random operator expression operators ns performance hardcoded expressions cos btime ns dynamic expression evaluation bit faster evaluating basic hardcoded expression optimize speed hardcoded version foptimized begin vector float undef inbounds simd cos btime foptimized ns dynamicexpressionsjl version slower optimized hand single simd kernel bad importantly change expression throughout runtime expect performance makes data structure ideal symbolic regression evaluationbased searches expression trees derivatives compute gradients speed operators operatorenum binaryoperators unaryoperators cos enableautodiff true x node feature x node feature expression x cos x gradient respect inputs simply character grad expression operators fast btime expression operators ns change expression runtime loss performance btime begin expression op rand expression operators ns internally calling evalgradtreearray function performs forwardmode automatic differentiation expression tree zygotecompiled kernels compute derivative respect constants result grad didfinish evalgradtreearray expression operators variable false respect variables single direction feature result grad didfinish evaldifftreearray expression operators feature generic types scalar operators real mycrazytype glad dynamicexpressionsjl actually arbitrary types operators real scalars genericoperatorenum abstractoperatorenum instead normal operatorenum try strings x node string feature node index input data whatever datafeature d abstract arrays selectdimdata feature nd abstract arrays define operators mystringfunc string ello operators genericoperatorenum binaryoperators unaryoperators mystringfunc extend operators expression types dynamicexpressionsjl extendoperators operators create expression tree mystringfunc x mystringfuncx tree world operators hello world indeed arbitrary types bit slower due potential type instability bad btime tree hello operators ns tensors tensors unions scalars tensors using dynamicexpressions unionfloatvectorfloat c node val scalar constant c node val vector constant x node feature operators tensors multiple dispatch behavior vecadd vecsquare set operator enum operators genericoperatorenum binaryoperators vecadd unaryoperators vecsquare extendoperators operators construct expression tree vecadd vecadd vecsquare x c c evaluate tree operators note operator defined particular input returned instead pretty fast btime tree operators ns btime eval vecadd vecadd vecsquare n