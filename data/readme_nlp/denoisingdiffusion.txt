denoisingdiffusionjl pure julia implementation denoising diffusion probabilistic models popularised denoising diffusion probabilistic models jonathan ho ajay jain pieter abbeel detailed examples please notebooks corresponding project notebooks originally repository removed using gitfilterrepo repository lightweight explanation diffusion process code please blog posts overview unconditioned sampling reverse process left final image estimate coincide final time step denoising diffusion starts image pure noise gradually removes noise time steps resulting natural looking image time step model predicts noise removed reach final image final time step current time step allows estimate final image created updated time step image process trained model generation conditioned sampling classifier free guidance classifier free guidance direct outcome using classifier free guidance introduced classifierfree diffusion guidance jonathan ho tim salimans mode label timestep passed model candidates noise removed generated timestep unconditioned noise using generic label label conditioned noise using target label noise removed weighted combination noise uncond guidancescale cond uncond guidancescale difference cond uncond represents rough gradient original paper cond guidancescale cond uncond using baseline uncond instead allows cancelled skipped special guidancescale module main export gaussiandiffusion struct associated functions various models building blocks included models includes flexible conditionalchain based fluxchain handle multiple inputs input priority versions unets convolutional autoencoder available unet unetfixed unet model specifications unetfixed equivalent unet flexible arbitrary downsampleupsample pairs five advisable based nested skip connections unetfixed linear implementation model unetfixed downsampleupsample pairs middle layers total layers default configuration unetfixed approximately parameters parameters middle layer attention layer models doubling modelchannels approximately quadruple parameters convolution layer size proportional square dimension frchet lenet distances fld generation frechet inception distance fid cumbersome inception v model million parameters overkill generation instead simpler frchet lenet distance proposed calculation except lenet model approximately parameters output layer values opposed inception v pretrained weights lenet model easily trained cpu results standardised example values model parameters fld notes training data unetconditioned guidance gamma samples label unet attention layer unet unet ddim taun eta random loss mean squared error models trained epochs installation download github repository registered julia repl julia enter package mode v pkg dev pathdenoisingdiffusion julia using revise allows dynamic edits code julia using denoisingdiffusion optionally tests run v pkg test denoisingdiffusion repository fastai nbdev manage jupyter notebooks git requires python installation nbdev avoid using follow steps gitconfig examples run examples julia examplestrainimagesjl threads auto start julia repl run interactively spiral values data values data pokemon values data spiral requires approximately parameters generation requires times pokemon possibly satisfying results pokemon achieved pokmon exist example trained billion parameter model task list selfattention blocks ddim efficient faster image generation guided diffus