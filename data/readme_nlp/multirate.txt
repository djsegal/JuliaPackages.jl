multirate package creation execution streaming stateful fir filters perform sample rate conversion installation pkg add multirate multirate depends dsp windowing functions usage direct filtering methods allow time filter vector creating filter object examples previously defined signal filtertaps vectors using multirate decimate filt interpolate filt resample ratio equivalent interpolating decimating efficient filt streaming multirate streaming filter functionality create filter object time call filt object filtering processes picks left processing vectors file filtering stream samples indefinite length filter object type firfiltertkfirkernel subtypes firkernel firstandard normal singlerate fir filter firinterpolator resampling ratio firdecimator resampling ratio firrational resampling ratio specify kernel type chosen based resampling ratio specify creating firfilter object note decimation rational resampling instances filt return empty vector filters require inputs compute output call filt returns empty vector normally eventually return processed samples receives inputs code written assume returned vectors empty following example resampling ratio please note filter taps example contrived input output progression performs useful signal filtering julia element arrayfloat julia ones zeros element arrayfloat julia myfilt firfilter firfilterfirrationalfirrationalx arrayfloat julia y filt myfilt element arrayfloat julia y filt myfilt element arrayfloat julia y filt myfilt element arrayfloat julia y y y element arrayfloat check created filtering separate chunks matches result obtain stateless filtering julia sum filt speed naive approach resampling step process depending decimating interpolating rational resampling rational factor processes look stuff zeros input sample apply antialias filter fills zeros step samples step throw rest design naive rational resampler function naiveresampler vector vector ratio rationalint upfactor num ratio downfactor den ratio xstuffed zeros length upfactor length xstuffed upfactor yinterpolated dsp firfilt xstuffed yinterpolated downfactor length yinterpolated define input samples resample khz khz samplerate interpolation decimation ratio interpolation decimation numtaps interpolation lot taps rand float multirate firdes numtaps interpolation multirate kaiser beta time naiveresampler multiratefilt julia time naiveresampler elapsed time bytes allocated gc time julia resampler multiratefirfilter ratio julia time multiratefilt resampler elapsed time bytes allocated difference speed huge necessarily surprising surprising demo memory allocation naiveresampler allocated gb vs multiratefilt mb multirate heavily optimized numerically speaking improvement using polyphase fir implementation able math samples kept waste cycles multiplying taps stuffed zeros multiplications samples thrown decimation process despite produces results identical naive approach code optimized filtertapspolyphasefilterbanks flipped memory filter routines found internet literal definition discrete convolution moving forward memory input samples backwards memory filter taps vice versa coefficients flipped friendly compiler compiler emit simd instructions perform multiple multiplications tim