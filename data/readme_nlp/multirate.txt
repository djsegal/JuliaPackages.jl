multir packag creation execut stream state fir filter perform sampl rate convers instal pkg add multir multir depend dsp window function usag direct filter method allow time filter vector creat filter object exampl previous defin signal filter tap vector use multir decim filt interpol filt resampl ratio equival interpol decim effici filt stream multir stream filter function creat filter object time call filt object filter process pick left process vector file filter stream sampl indefinit length filter object type firfilt firkernel subtyp firkernel firstandard normal singl rate fir filter firinterpol resampl ratio firdecim resampl ratio firrat resampl ratio specifi kernel type chosen base resampl ratio specifi creat firfilt object note decim ration resampl instanc filt return empti vector filter requir input comput output call filt return empti vector normal eventu return process sampl receiv input code written assum return vector empti follow exampl resampl ratio pleas note filter tap exampl contriv input output progress perform use signal filter julia element array float julia one zero element array float julia myfilt firfilt firfilt firrat firrat array float julia filt myfilt element array float julia filt myfilt element array float julia filt myfilt element array float julia element array float check creat filter separ chunk match result obtain stateless filter julia sum filt speed naiv approach resampl step process depend decim interpol ration resampl ration factor process look stuff zero input sampl appli anti alia filter fill zero step sampl step throw rest design naiv ration resampl function naiveresampl vector vector ratio ration int upfactor num ratio downfactor den ratio xstuf zero length upfactor length xstuf upfactor yinterpol dsp firfilt xstuf yinterpol downfactor length yinterpol defin input sampl resampl khz khz sampler interpol decim ratio interpol decim numtap interpol lot tap rand float multir fird numtap interpol multir kaiser beta time naiveresampl multir filt julia time naiveresampl elaps time byte alloc time julia resampl multir firfilt ratio julia time multir filt resampl elaps time byte alloc differ speed huge necessarili surpris surpris demo memori alloc naiveresampl alloc multir filt multir heavili optim numer speak improv use polyphas fir implement abl math sampl kept doesn wast cycl multipli tap stuf zero multipl sampl thrown decim process despit produc result ident naiv approach code optim filter tap polyphas filter bank flip memori filter routin found internet liter definit discret convolut move forward memori input sampl backward memori filter tap vice versa coeffici flip friend compil compil emit simd instruct perform multipl multipl time