updatablecholeskyfactorizationsjl package contains implementations efficient representations updating algorithms cholesky factorizations compared constructing cholesky factorizations scratch package lead significant speed improvements benchmarks installation install package type subsequently add updatablecholeskyfactorizations julia repl basic usage package exports updatablecholesky type referenced ucholesky structure type computed using function updatablecholesky abstractmatrix int size check bool true computes updatable cholesky factorization starting matrix preallocates matrix future additions matrix defaults twice size n updatablecholesky structure addcolumn updatablecholesky abstractmatrix append columns corresponding rows updatablecholesky factorization complexity m nm size size remove column removecolumn updatablecholesky int updates updatablecholesky factorization corresponding removal th row column original matrix complexity n size following example example using linearalgebra using updatablecholeskyfactorizations setting afull randn afull afull afull afull afull bm afull columns updatablecholesky computing factorization addcolumn appends column factorization factorization afull removecolumn removes st column factorization factorization afull addcolumn bm appends columns bm factorization factorization afull efficiency following benchmarks highlight performance benefits updating cholesky factorization constructing factorization scratch report performance linearalgebra cholesky matrix sizes code following benchmarks found examplesbenchmarksjl cholesky benchmarktools trialestimate time s gctime ns memory kib allocs cholesky benchmarktools trialestimate time s gctime ns memory kib allocs compare package updatablecholesky addcolumn functions updatablecholesky benchmarktools trialestimate time s gctime ns memory kib allocs adding vector updatablecholesky benchmarktools trialestimate time s gctime ns memory bytes allocs adding vectors updatablecholesky benchmarktools trialestimate time s gctime ns memory bytes allocs construction updatablecholesky structure tends slightly slower example cholesky size default consumes memory cholesky factorization twice size accomodate future column additions requiring additional memory allocations subsequently updating factorization faster computing factorization scratch require additional allocations benchmarks adding vector factorization times faster adding vectors times faster calling cholesky time advantage grows increasing benchmarks computed macbook pro m pro gb ram future currently package supports appending columns future add support adding columns arbitrary indic