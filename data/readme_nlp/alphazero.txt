package provides generic simple fast implementation deepmind alphazero algorithm core algorithm lines pure hackable julia code generic interfaces easy add support games learning frameworks magnitude faster competing alternatives written python implementation solve nontrivial games standard desktop computer gpu agent trained cluster machines easily single computer modifying single line code care alphazero beyond publicized success attaining superhuman level games chess deepmind alphazero algorithm illustrates methodology combining learning search explore combinatorial spaces effectively believe methodology exciting applications research care implementation alphazero resourcehungry successful source implementations leela zero written lowlevel languages optimized highly distributed computing environments makes hardly accessible students researchers hackers motivation project provide implementation alphazero simple widely accessible sufficiently powerful fast enable meaningful experiments limited computing resources found julia language instrumental achieving goal training connect agent download alphazerojl start training connect agent run export gkswstype avoid occasional gr bug git clone cd alphazerojl julia project import pkg pkginstantiate julia project using alphazero scriptstrainconnect training iteration takes hour desktop computer intel core i k processor gb nvidia rtx gpu plot evolution win rate alphazero agent baselines vanilla mcts baseline minmax agent plans depth using handcrafted heuristic note alphazero agent exposed baselines training learns purely selfplay form supervision prior knowledge evaluate performances neural network baselines instead plugging mcts play action assigned prior probability unsurprisingly network initially unable win single game significantly stronger minmax baseline despite able perform search information training connect agent using alphazerojl tutorial resources juliacon talk documentation home introduction alphazero package overview connect tutorial solving games hyperparameters documentation contributors jonathan laurent main developer pavel dimens logo design marek kaluba hyperparameters tuning gridworld example micha ukomski mancala example openspiel wrapper johannes fischer documentation improvements contributions alphazerojl welcome contribution ideas available contribution guide please hesitate github issue share idea feedback suggestion supporting citing support project help gain visibility please consider starring repository metrics help secure academic funding future software research appreciate include following citation paper related julia projects alphagpujl alphazero implementation inspired scaling scaling laws board games paper happens gpu including core mcts logic implementation trades genericity flexibility exchange unbeatable performances neural networks environments support batchsimulation gpu reinforcementlearningjl reinforcement learning framework leverages julia multiple dispatch offer highly composable environments algorithms components future releases alphazerojl build framework gains support multithreaded distributed rl pomdpsjl fast elegant designed framework partially observable markov decisions processes acknowledgements material based supported united air force darpa contract fa fa opinions findings conclusions recommendations expressed material author necessarily reflect views united air force darpa