statictools tools enable staticcompilerjl based static compilation julia code accurately subset julia call unsafe julia standalone native binaries avoiding gc allocations llvmcall ing experimental package currently requires julia results doubt check versions passing ci integration tests staticcompilerjl loopvectorizationjl currently run julia x linux mac platforms versions depend staticcompilerjl support package considered experimental necessarily involves lot juggling pointers unsafe julia errors llvmcall instead simpler ccall statically compile smoothly serious bugs undefined behavior please report unexpected bugs prs welcome addition exported names julia base functions extended statictools types staticstring mallocstring stackarray mallocarray include print println error parse read write rand rand using rng initialied staticrng splitmix xoshiro randn randn using rng initialied marsagliapolar boxmuller ziggurat abstractarray abstractstring interfaces relevant stackallocated staticallysized staticstring stackarray package heavily inspired techniques juliasimdmanualmemoryjl package via stridearrayscorejl stridearraysjl obtain fast stackallocated staticallysized arrays staticcompilerfriendly stack limit size larger arrays space allocated malloc mallocarray language memory malloc ed freed malloc staticcompilerable arrays taking risk responsibility consider bump allocator bumperjl printmandeljl limitations standalonecompileable linking libjulia avoid probably gc allocations manual heapallocation malloc calloc stack allocation convincing julia compiler alloca object stack fine const ant global variables type instability cause inexacterror overflowerror int int cause boundserror inbounds else julia checkbounds mandatory consequently inbounds mallocarray stackarray treat accordingly indexing functions inline cause sneaky allocations due boxing feel free inline liberally avoid multithreading microsoft windows supported staticcompiler except via wsl package help avoiding careful write code recommend starting adding features slowly hand surprising range language features multiple dispatch metaprogramming happen compiletime noted manually allocating memory heap malloc calloc operating memory via pointers fine mallocarray mallocstring effectively stepped subset julia call unsafe julia subset step interact objects julia means re dealing objects follow normal julia object model fortunately trouble benefits besides compileability type instability biggest sources unnecessarily bad performance naive julia code especially re multiple dispatch able mistake accident gc means gc pauses including binaries k hello world utilities utilities statictype statictypecontents utilities help convert object similar fields type parameters amenable static compilation statictype mainly useful converting objects heavily paramaterized sciml infrastructure lot main objects diffeqintegrator type parameters default amenable static compilation statictype convert forms help numerical code statically compiled default rules array converted mallocarray string converted mallocstring default rules extended redefined using multiple dispatch context variable note mallocarray mallocstring free examples compiled commandline executables simple commandline executable variable arguments staticcompilerfriendly using statictools function printargs argc int argv ptrptruint construct staticallysized stack allocated staticstring mallocstring heap printf argument count argc argc i input argument string p unsafeload argv pointer str mallocstring p wrap level interface println str free allocate memory println fun time return compile executable using staticcompiler filepath compileexecutable printargs int ptrptruint shell printargs foo argument count printargs foo fun time shell hyperfine printargs hello benchmark printargs hello time mean ms ms user ms system ms range min max ms ms runs warning command ms complete results inaccurate shell ls lh filepath rwxrxr user staff k printargs note resulting executable kilobytes size mallocarrays size determined runtime dynamicallysized arrays allocate mallocarray type using statictools function timestable argc int argv ptrptruint argc return printf incorrect commandline arguments rows argparse int argv commandline argument cols argparse int argv commandline argument mallocarray int undef rows cols inbounds rows cols printf free using staticcompiler filepath compileexecutable timestable int ptrptruint shell ls lh filepath rwxrxr user staff k timestable shell timestable mallocarray reshape reinterpret ed causing allocations unlike base array getindex produces fast views default indexing memorycontiguous slices julia function timestable argc int argv ptrptruint argc return printf incorrect commandline arguments rows argparse int argv commandline argument cols argparse int argv commandline argument mallocarray int undef rows cols inbounds rows cols printf reinterpret int println array reinterpreted int printf free timestable generic function method julia filepath compileexecutable timestable int ptrptruint usersusertimestable shell timestable array reinterpreted int stackarrays size determined compiletime size array compiletime avoid malloc array stack instead fit stack stackarray type julia function stacktimestable stackarrayintundef axes axes print julia filepath compileexecutablestacktimestable usersuserstacktimestable shell stacktimestable random generation julia function randmatrix argc int argv ptrptruint argc return printf stderrp incorrect commandline arguments rows argparse int argv commandline argument cols argparse int argv commandline argument rng staticrng mallocarray float undef rows cols rand rng randrng generate single instead printf free randmatrix generic function method julia compileexecutable randmatrix int ptrptruint usersuserrandmatrix shell randmatrix e e e e e e e e e e e e e e e e e e e e e e e e e shell hyperfine randmatrix benchmark randmatrix time mean ms ms user ms system ms range min max ms ms runs warning command ms complete results inaccurate shell ls alh randmatrix rwxr xr user staff randmatrix loopvectoriztionjl compatibility using staticcompiler using statictools using loopvectorization inline function mul mallocarray mallocarray mallocarray turbo indices indices cmn zero eltype indices cmn cmn return function loopvecmatrix argc int argv ptrptruint argc return printf stderrp incorrect commandline arguments rows argparse int argv commandline argument cols argparse int argv commandline argument lhs mallocarray float undef rows cols turbo axes axes rhs mallocarray float undef cols rows turbo axes axes matrix multiplication mallocarray float undef cols cols mul print stdout printf clean matrices free free free attempt compile path compileexecutable loopvecmatrix int ptrptruint k executable allocates fills multiplies x matrices prints results ms singlethreaded shell loopvecmatrix e e e e e e e e e shell hyperfine loopvecmatrix benchmark loopvecmatrix time mean ms ms user ms system ms range min max ms ms runs shell ls alh loopvecmatrix rwxrxr cbkeller staff k loopvecmatrix compiled dylib shared libraries calling compiled julia library python example compile shared library call language example able call nice fast loopvectorizationjl based mul function python julia using staticcompiler using statictools using loopvectorization using base refvalue inline function mul mallocarray mallocarray mallocarray turbo indices indices cmn zero eltype indices cmn cmn return accept pointers mallocarrays mul ref ref ref mul note specify contrete type argument compiling mallocarra specifically mallocarrayfloat aka mallocmatrixfloat tt refvaluemallocmatrixfloat refvaluemallocmatrixfloat refvaluemallocmatrixfloat compileshlib mul tt mulinplace filename libmul note shared libraries limited argcint argvptrptruint principle pass usually easiest pass plain native types else pointers complicated objects mallocarray qualify latter hence passing pointers refs python import ctypes ct import numpy np class mallocmatrix ct structure fields pointer ct cvoidp length ct cint s ct cint s ct cint def mmptr ptr ctypes dataas ct cvoidp mallocmatrix ptr ct cint size ct cint shape ct cint shape return ct byref lib ct cdll libmuldylib np ones np ones np ones aptr mmptr bptr mmptr cptr mmptr lib juliamulinplace cptr bptr aptr note basically mimiced structure mallocarray julia struct struct mallocarray pointer ptr length int size ntuple int python class class mallocmatrix ct structure fields pointer ct cvoidp length ct cint s ct cint s ct cint particular integers s s integers size specifically ntuple int talking d array note flip python rowmajor contrast julia columnmajor wrap ref ctbyref passing shared library results lib juliamulinplace cptr bptr aptr array timeit lib juliamulinplace cptr bptr aptr ns ns loop mean std dev runs loops timeit np matmul s ns loop mean std dev runs loops x faster numpymatmul x matrix counting time obtain pointers calling compiled julia library julia julia using libdl lib libdl dlopen libmul libdl dlext libdl rtldlocal mulinplace libdl dlsym lib juliamulinplace mallocarray float undef mallocarray float undef mallocarray float undef ra rb rc ref ref ref pa pb pc pointerfromobjref ra pointerfromobjref rb pointerfromobjref rc ccall mulinplace int ptr ptr ptr pc pa pb libdl dlclose lib x table julia ccallmulinplace int ptr ptr ptr pc pa pb julia mallocmatrixfloat julia using benchmarktools julia benchmark ccallmulinplace int ptr ptr ptr pc pa pb benchmarktoolstrial samples evaluations range min max ns ns gc min max time median ns gc median time mean ns ns gc mean ns histogram logfrequency time ns memory estimate bytes allocs estimate calling compiled julia library compiled julia course bring circle using statictools staticcompiler function dlmul lib statictools dlopen libmuldylib mulinplace statictools dlsym lib juliamulinplace mallocarray float undef fill mallocarray float undef fill mallocarray float undef fill ra rb rc ref ref ref gc preserve ra rb rc begin pa pb pc pointerfromobjref ra pointerfromobjref rb pointerfromobjref rc ptrcall mulinplace pc ptr pa ptr pb ptr int statictools dlclose lib printf compileexecutable dlmul shell dlmul e e e e e e e e e e e e e e e e e e e e e e e e e linking existing libraries compilation existing shared libraries linked specifying relevant compiler flags compilation gcc clang example following equivalent example explicitly dlopen ed libmul using statictools staticcompiler function dlmul mallocarray float undef fill mallocarray float undef fill mallocarray float undef fill ra rb rc ref ref ref gc preserve ra rb rc begin pa pb pc pointerfromobjref ra pointerfromobjref rb pointerfromobjref rc symbolcall juliamulinplace pc ptr pa ptr pb ptr int printf compileexecutable dlmul cflags lmul shell dlmul e e e e e e e e e e e e e e e e e e e e e e e e e complicated example link compile time mpi message passing interface performance computing via staticmpijl merely provides convenience functions symbolcall relevant functions libmpidylib julia using staticcompiler statictools staticmpi julia function mpihello argc argv mpiinit argc argv comm mpicommworld worldsize worldrank mpicommsize comm mpicommrank comm printf hello worldrank worldsize processors mpifinalize mpihello generic function method julia compileexecutable mpihello int ptrptruint cflags lmpi optlocallibmpichmp lmpi instructs compiler link libmpidylib optlocallibmpichmp provides path local mpich installation libmpi found ld warning object file mpihello built osx version linked userscodestatictoolsjlmpihello shell mpiexec np mpihello hello processors hello processors hello processors hello processor