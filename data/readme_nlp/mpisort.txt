mpisort eggs basket sorting elements spread processors processor able hold elements difficult source implementations charm library provides mpisort function distributed mpibased sorting algorithms following standard julia basesort signature moment optimised algorithm provided sihsort sampling interpolated histograms sorting algorithm pronounced sigh sort mpirelated optimised minimum interrank communication memory footprint features require distributed data fits memory single node io comparisonbased data additional optimisations numeric elements optimised minimum mpi communication julia threads sharedmemory node nodelocal arrays sizes sorting try balance elements held mpi rank abstractvector including accelerators gpus todo test julia typeinference optimisations wonders implements standard julia sort api naturally custom data comparisons orderings etc example file mpisortjl run mpiexec julia threads mpisortjl using mpi using mpisort using random initialise mpi communicator ranks rank index ranks mpi init comm mpi commworld rank mpi commrank comm nranks mpi commsize comm generate local array mpi rank elements rng xoshiro rank numelements rank localarray rand rng numelements sort arrays mpi ranks alg sihsort comm sortedlocalarray mpisort localarray alg alg print local array sequentially nranks rank rank sortedlocalarray alg stats mpi barrier comm note data redistributed nodes vector size change hence basesort input vector mutated vector potentially size elements returned reason function signature mpisort return value exact inputs basesort sorting settings automatically mpicommworld communicator save sorting stats sortedlocalarray mpisort localarray alg sihsort reverse sorting specify communicator explicitly sortedlocalarray mpisort localarray alg sihsort comm rev true specify key sort sortedlocalarray mpisort localarray alg sihsort key sortedlocalarray mpisort localarray alg sihsort reverse save sorting stats alg sihsort comm sortedlocalarray mpisort localarray alg alg alg stats splitters nranks elements splitting arrays nodes alg stats numelements nranks integers specifying elements node local sorter alg sihsort comm default standard basesort alg sihsort comm quicksort specify algorithm passed basesort algalgorithm alg sihsort comm mysorter pass function sorts local vector communication memory footprint optimised collective mpi communication gather bcast reduce bcast alltoall allreduce alltoallv aware io based algorithm communication please issue total elements spread mpi ranks rank memory footprint sihsort frac epsilon samples extracted node following p log except final redistribution single array length frac epsilon memory footprint depends nodes involved hence scalable thousands mpi ranks spare nodes benchmark references algorithm builds prior art harsh kale solomonik histogram sort sampling followed main ideas theoretical results deterministic sampling original communication interpolation optimisations sundar malhotra biros hyksort variant hypercube quicksort distributed memory architectures shi schaeffer parallel sorting regular sampling solomonik kale lv highly scalable parallel sorting john lapeyre integer base logarithm byrne wilcox lc churavy mpi jl julia bindings message passing interface absolute heroes mpi joy julia license mpisortjl mitlicensed enjoy