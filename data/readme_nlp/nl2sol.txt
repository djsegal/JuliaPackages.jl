sol linear squar optim sol solv linear squar minim sum vector size return struct type optim multivariateoptimizationresult contain relev info julia optim modul doc info wrap fortran version code residu jacobian function expect arg prealloc valu array actual alloc julia function sol pass fortran subroutin sol installaton pkg add sol exampl usag sol sol use sol function rosenbrock res return function rosenbrock jac jac jac jac jac jac return jac function main println sol rosenbrock result sol rosenbrock res rosenbrock jac quiet true println result main altern write jacobian sno finit differ approxim jacobian jacobian avail sno check correct provid array complet exampl look exampl usag sol sno use sol function rosenbrock res return function main println nso rosenbrock set default result sno rosenbrock res println result main background wrap fortran code origin netlib version sol linear squar optim program detail transact mathemat softwar tom paper denni gay welsch adapt nonlinear squar algorithm acm transact mathemat softwar tom volum issu sept acm york usa denni gay welsch algorithm sol adapt nonlinear squar algorithm acm transact mathemat softwar tom volum issu sept acm york usa origin sol fortran sourc code appear tom algorithm sol version code download netlib archiv dep src sol directori singl blob file name sol netlib orig blob broken individu sourc file comment code code enabl version ad cmake file build code run test run fortran test coverag manual instal coverag respect origin fortran test code live separ subdirectori dep src test learn build run test coverag sol dep src cmakelist txt wrapper code ad use interfac facil julia ccall cfunction etc sol call direct julia runtest test directori exampl use julia call sol use julia function calcul residu jacobian call signitur sol simplifi version complet version function sol res function jac function init maxit maxit maxfunccal maxfunccal tolx tolx tolabsfunc tolabsfunc tolrelfunc tolrelfunc quiet true requir argument function calcul residu vector funtion calcul jacobian initi start guess linear paramet measur fit length residu vector return res function option argument control converg criteria altern version requir call function set default function return integ real array pass sol call sequenc look set default chang default valu insid result sol res jac init advantag form control tune paramet sol avail chang valu array avail status valu array document program paper optim solut compet direct levenberg marquardt lsqfit modul differ algorithm sol quasi newton method bfgs dfp care expect sol perform model residu optimum perform start guess optimim limit support julia itr revers communic request residu jacobian updat export sol converg test strategi optim levenberg marquardt make appl appl comparison challeng note julia wrapper sol alloc memori residu jacobian sol print detail iter summari set keyword paramet quiet fals result sol rosenbrock res rosenbrock jac quiet fals