nlsoljl linear squares optimization nlsoljl solves linear squares minimizes sum vector size returns struct type optimmultivariateoptimizationresults contains relevant info julia optim module docs info wrapping fortran version code residual jacobian functions expected args preallocated values arrays actually allocated julia function nlsol passing fortran subroutine nlsol installaton pkgaddnlsol example usage nlsolnlsol using nlsol function rosenbrockres return function rosenbrockjac jac jac jac jac jac return jac function main printlnnlsol rosenbrock result nlsolrosenbrockres rosenbrockjac quiettrue printlnresult main alternatively write jacobian nlsno finite difference approximation jacobian jacobian available nlsno check correctness provide iv arrays complete example look example usage nlsolnlsno using nlsol function rosenbrockres return function main printlnnlnso rosenbrock iv nlsetdefaults result nlsnorosenbrockres iv printlnresult main background wrapped fortran code original netlib version nlsol linear squares optimization program detailed transactions mathematical software toms papers dennis gay welsch adaptive nonlinear squares algorithm acm transactions mathematical software toms volume issue sept pp acm york ny usa dennis gay welsch algorithm nlsol adaptive nonlinear squares algorithm acm transactions mathematical software toms volume issue sept pp acm york ny usa original nlsol fortran source code appears toms algorithm nlsol version code downloaded netlib archived depssrcnlsol directory single blob file named nlsolnetliborig blob broken individual source files commented code code enables f version added cmake files building code running tests running fortran tests coverage manual installation coverage respectable original fortran test code lives separate subdirectory depssrctests learn build run tests coverage nlsoljldepssrccmakeliststxt wrapper code added using interface facilities julia ie ccall cfunction etc nlsol called directly julia runtestsjl test directory examples using julia call nlsol using julia functions calculate residual jacobian calling signitures nlsol simplified version complete version function nlsolresfunction jacfunction initx maxiterdfmaxiter maxfunccalldfmaxfunccall tolxdftolx tolabsfuncdftolabsfunc tolrelfuncdftolrelfunc quiettrue required arguments function calculates residual vector funtion calculates jacobian initial starting guess linear parameters measurements fitting length residual vector returned resfunction optional arguments control convergence criteria alternative version requires call function set defaults function returns integer real array passed nlsol calling sequence look iv setdefaults change default values inside iv results nlsolres jac initx iv advantage form control tuning parameters nlsol available changing values iv arrays available status values arrays documented program paper optimization solution compete directly levenbergmarquardt lsqfit module differs algorithm nlsol quasinewton method bfgs dfp care expect nlsol perform models residuals optimum perform starting guess optimim limitations supported julia nlitr reverse communication request residual jacobian updates exported nlsol convergence testing strategy optimlevenbergmarquardt makes apples apples comparisons challenging note julia wrapper nlsol allocates memory residual jacobian nlsol print detailed iteration summaries setting keyword parameter quiet false ie result nlsolrosenbrockres rosenbrockjac quietfals