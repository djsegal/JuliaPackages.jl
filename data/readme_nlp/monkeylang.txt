monkeylang monkey programming language written julia table contents monkeylang using monkey julia compile monkeylangjl standalone executable start repl documentation summary syntax overview operators return variable bindings scopes global scope local scope closure scope currentclosure scope literals integer boolean null string array hash function built functions typearg string arg arg null lenarg integer arg string string null arg array arg string string null arg array restarg string string null restarg array array null pusharg array arg array pusharg hash arg arg hash advanced examples custom map function custom reduce function macro system using monkey julia start repl julia using monkeylang startrepl evaluate monkey programs using string macros using monkeylang monkeyeval monkeyvm monkeyjulia compile monkeylangjl standalone executable clone repo run build root directory caution compilation minutes start repl start repl julia script julia repl import pkg pkg add monkeylang using monkeylang monkeylang startrepl monkeylang startrepl usevm true vm press ctrl ctrl exit repl compiled monkeylangjl locally directly start repl monkey repl monkey repl vm vm documentation created document reference writing interpreter rsmonkeylang please note mistakes summary syntax variable bindings class functions closures arithmetic expressions built functions syntax overview example fibonacci function fibonacci fn else else fibonacci fibonacci fibonacci supports else exists else exist true else supports loops operators supports operations true false hello world return returns value immediately processing executed true return identity fn return identity monkey variable bindings variable bindings supported programming languages implemented variables defined using keyword variables redefined scope reassigned format identifier expression define identifier expression reassign example foobar add alias foobar identity fn scopes monkey types scopes global scope variables defined top level visible modified global variable fn fn modifies global variable return return local scope variables defined loops functions scope modified scope inner loops scopes local variable modifies local variable closure scope function captures global variables visible free variables variables modified function fn fn captured free variable return return function remains unchanged currentclosure scope specially named function defined scope modified body fn error reassign current function defined redefinition ok fn literals five types literals implemented integer integer represents integer value floating handled format example boolean boolean represents boolean value format true false example true false truthy false falsy true null null represents null condition null evaluated falsy format null example null else string string represents string double quotes string concatenated format value example monkey programming language monkey programming language hello world hello world array array represents contiguous element element contain data types format expression expression example fn add true arr true fn arr arr arr arr hash hash expresses data associating keys values format expression expression expression expression example hash name jimmy age true boolean integer hash name hash ge hash true hash hash function function supports functions supported programming languages format fn parameter parameter block statement example add fn return add add fn add return exist returns result evaluated expression addthree fn calltwotimes fn calltwotimes addthree passing functions functions closures evaluation function parameters left memoized fibonacci function implemented fibonacci fn else else type null push fibonacci fibonacci evaluated means updated fibonacci fibonacci called fibonacci fibonacci push fibonacci built functions following built functions typearg string return type arg string type integer type string type false boolean arg arg null outputs specified value stdout playground output console hello world lenarg integer string returns characters array returns elements hash returns keyvalue pairs len monkey len len arg string string null returns character beginning string string empty return null instead null arg array returns element beginning array array empty return null instead null arg string string null returns element string string empty return null instead null arg array returns element array array empty return null instead null restarg string string null returns string element removed string empty return null instead rest rest null restarg array array null returns array element removed array empty return null instead rest rest null pusharg array arg array returns array element specified added push pusharg hash arg arg hash returns hash arg arg added arg exists value updated arg push push advanced examples custom map function map fn arr iter fn arr accumulated len arr accumulated else iter rest arr push accumulated arr iter arr double fn map double custom reduce function reduce fn arr initial iter fn arr result len arr result else iter rest arr result arr iter arr initial sum fn arr reduce arr fn initial el initial el sum macro system lost chapter implemented monkeylangjl provides powerful macro system example unless macro condition consequence alternative quote unquote condition unquote consequence else unquote alternative unless repl enter contents single line characters enjoy monkey