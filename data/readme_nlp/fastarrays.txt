fastarrays formerly called flexiblearrays fast multidimensional arrays arbitrary lower upper bounds fixed compile time improve efficiency background sometimes arrays lower index bound question performance convenience example quantum ranging adding time index array looks tedious type declaration sometimes size particular array dimension ahead time question efficiency indexing multidimensional array significantly efficient sizes dimensions ahead time package fastarrays provides define multidimensional array types lower upper index bounds chosen freely generates efficient code bounds ahead time example using fastarrays x fixedsize array const arrdx fastarray a arrdx float undef d array lower index bounds const arrdlb fastarray a arrdlb float undef generic array bounds determined creation time const arrdgeneric fastarray a arrdgeneric float undef mixed x array fastarray floatundef arrays empty fastarray fastarray intundef trivial d array type holding scalar value fastarray int fast arrays accessed regular arrays using notation getindex setindex functions noticed slightly unusual notation fast arrays implementationwise set bounds kept fixed determine parameterized type array choices fixed array bounds correspond types fastarray function returns respective type creating type currently fast arrays support resizing reshaping subarrays adding straightforward designed fastarrays reasons model quantum range noticed version respecived code significantly faster setting array sizes compile time julia confirmed generated machine code simpler course provides benefit array accessing actually bottleneck code manual array dimension lower upper bound fixed flexible fixed bounds objects type flexible bounds chosen array allocated julia array types correspond fastarray types lower bounds fixed upper bounds flexible internally fixed bounds represented tuple integers dimspec ntuple unionvoid int dimension fixed bounds set via range lbub define bounds integer lb define lower bound leaving upper bound flexible colon indicate lower upper bounds flexible instead define fixed bounds via tuple type dimspec array allocated flexible bounds set conversely colon indicates flexible bounds bounds fixed integer ub defines upper bound lower bound fixed range lbub defines lower upper bounds element integer tuple lb defines lower bound upper bound fixed fast array type subtype abstractfastarray element type rank abstract subtype densearray available array functions define fast array type fastarray dimspec example const myarraytype fastarray allocate array fastarray dimspec type undef flexible bounds example create array bounds myarray myarraytype float undef element type eltype arr fastarray eltype typefastarray example eltype myarray eltype myarraytype rank dimension ndims arr fastarray ndims typefastarray example ndims myarray ndims myarraytype array length length arr fastarray bounds fixed array length obtained type length typefastarray example length myarray array bounds sizes lbnd arr fastarray int ubnd arr fastarray int size arr fastarray int lbnd arr fastarray ubnd arr fastarray size arr fastarray fixed bounds sizes obtained type lbnd typefastarray val ubnd typefastarray val size typefastarray val lbnd typefastarray ubnd typefastarray size typefastarray example lbnd myarray ubnd myarray val size myarray lbnd myarray ubnd myarray size myarray access array elements getindex arr fastarray int int setindex arr fastarray val int int example myarray myarray