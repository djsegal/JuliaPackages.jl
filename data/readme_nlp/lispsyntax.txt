lispsyntaxjl clojure lisp syntax julia package provides lispjulia syntax translator convenience macros lisp defn fib fib fib test lisp fib test fib lispsyntaxjl implemented expression translator lispclojure syntax julia ast julia compiler jit multipledispatch infrastructure code generation execution lispsyntaxjl clojure lisp meaningful semantics entirely juliabased similar schemelisp net result lispsyntaxjl alternative expression syntax julia implemention clojure lisp special forms def symbol init quote form defn symbol param expr defmacro symbol param expr lambda param expr fn param expr binding expr global symbol test expr binding expr import package notable differences symbol names julia symbol naming result julia syntax restrictions maintained lispsyntaxjl reference global variables function scopes julia requires declaration global symbols referenced function scope functions declare symbols global via special form global symbol binding forms implemented clojure awesome destructuring binds special forms requiring bindings fn parameter lists etc currently implemented lack looprecur currently implemented clojure julia currently support tco macroimplementation tail call rewriting appropriate julia optional typing currently implemented named functions julia methods efficiency functions defined defn translated normal julia function expressions means act named lambdas local scope method definition currently implemented implemented probably implementation clojure sophisticated dispatch system macros differences macros defined lispsyntaxjl look standard lisp macros expressions special objects julia expressions returned macros require special translation step generate julia expression trees result lispsyntaxjl macros directly translated julia macros called via special syntax macro expr macro hygiene follows julia approach hygenicdefault explicit escaping using esc opposite clojure macros explicit hygiene specially named variables julia string macro dispatch supported macros rstr julia called via currently call via standard macro syntax rstr string repl mode lispsyntaxjl provides convenience repl alleviating type lisp top level expression repl mode simply initialize julia using lispsyntax julia lispsyntax initrepl repl mode lisp mode initialized press enter backspace exit type re ready lisp j reduce j defn fib fib fib fib generic function method j fib return julia prompt simply type backspace type ctrl access fuctions defined julia fib fib generic function method julia fib create customized repl todo support exceptions straight forward currently implemented optional typing support method definition structs aggregate types special dispatch string macro forms modules import vs using vs include using currently implemented confusingly matches clojure import form varargs named argu