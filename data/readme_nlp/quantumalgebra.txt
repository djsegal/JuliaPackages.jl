quantumalgebrajl quantum operator algebra julia package quantum operator algebra algebra commuting operators julia supporting bosonic fermionic level system operators arbitrary names indices sums indices defines opinionated canonical form normal plus additional rules automatically simplify expressions recommended interface display latex formulas jupyter notebooks convenient output formatting documentation kept date recommended look commit messages idea features etc check notebooks examples folder viewed online nbviewer tried interactively binder updates v major revision breaking changes backend completely rewritten code efficient dealing expressions interface cleaned changes canonical normal form automatically enforced default transform expressions normal form normalform automatic conversion normal form convenient interactive enabled quantumalgebraautonormalformtrue alternatively setting environment variable quantumalgebraautonormalform true value parseboolvalue parses true using quantumalgebra function obtain expectation values expval instead expval expvalascorrs express expectation value correlator cumulant expansion ab ab corresponding extensions products operators note single operator distinguish formally clarity function juliaexpression converts quantumalgebra object julia expression helps using quantumalgebra programatically derive codes numerical implementation object contain bare operators expectation values correlators documentation details quantumalgebra expressions printed pretty format terminal etc overview basic functions create quantumalgebra expressions type quexpr inds adaginds annihilation creation operators bosonic mode inds fdaginds annihilation creation operators fermionic mode xinds yinds zinds pauli matrices level system tls pinds minds excitation deexcitation operators level system tls indices functions arbitrary indices arguments integers symbolic symbolic indices single unicode character possibly integer subindex julia using quantumalgebra julia julia adag julia fdag i i julia x i k ijk define bosonicfermioniclevel system operators set macros bosonops name defines functions name namedag bosonic species name fermionops name defines functions name namedag fermionic species name tlsxyzops name defines functions name name name pauli matrices level system species name tlspmops name defines functions name name level system excitation deexcitation operators species name julia bosonops quantumalgebra opconstructors quantumalgebra opconstructors bdag julia bdag operators names assumed belong species commute fermions desired named operators refer kinds species localized itinerant electrons achieved macro anticommutingfermiongroup creates fermionic operators mutually anticommute julia anticommutingfermiongroup julia normalform paramnamesymbolinds create named parameter purely real conjugated complex conjugated complex parameters conveniently parameters entered string macros prnameinds pcnameinds real complex parameters julia pr gij ijk julia pr gij param j true julia pc param true arithmetic operations adjoint supported exponents nonnegative integers types integrating automatically julia adag x julia im adag x julia bare quantumalgebra expression quexpr quexpr indquexpr represent analytic sum index ind summed indices semantic meaning index expression replaced special numbered sum index julia normalformquexpr converts expression defined canonical achieve canonical form relevant commutators etc expression written single product sum expressions essentially normal creation annihilation operators middle additional conventions normal form hopefully unique contexts interactive convenient automatically transform expressions normal form enabled calling quantumalgebraautonormalformtrue alternatively setting environment variable quantumalgebraautonormalform true value parseboolvalue parses true using quantumalgebra julia normalform adag ij expvalquexpr represent expectation value julia expval adag expvalascorrsquexpr represent expectation value correlators cumulant expansion julia expvalascorrs adag commquexprquexpr calculate commutator ab ba julia comm adag julia normalform comm adag avac vaca simplify operators assuming applied vacuum left respectively precise avac returns vaca functions automatically apply normalform assure operators simplified note vacuum level systems interpreted lower julia avac julia avac adag ij julia avac adag adag julia vaca adag adag julia avac x julia avac z vacexpval calculates vacuum expectation value expectation value defined result guaranteed contain operators julia vacexpval adag julia vacexpval adag adag sqrt factorial julia vacexpval adag adag sqrt factorial julia vacexpval x juliaexpression obtain julia expression automatically build codes implementing equations derived quantumalgebra expectation value correlator treated separate array daggers represented valid identifiers appear array names note expectation values correlators distinguished expressions julia juliaexpression expvalascorrs adag a aa note expressions treated arrays indices zerodimensional arrays scalar quantities exclusively useful clean resulting expression macrotools remove julia juliaexpression expval adag x aa default level system operators represented pauli matrices calling p m results expressed julia p julia m changed calling quantumalgebrausepmtrue mode fundamental operators expressions written terms note mixing conventions expression supported suggested set flag beginning calculation julia quantumalgebra usepm true julia p julia x julia z citing quantumalgebra academic appreciate citation citationbib relevant refer