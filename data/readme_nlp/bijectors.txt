bijectorsjl package implements set functions transforming constrained random variables simplexes intervals euclidean space main functions implemented package link invlink logpdfwithtrans distributions distributions supported realdistribution unioncauchy gumbel laplace logistic noncentralt normal normalcanon tdist positivedistribution unionbetaprime chi chisq erlang exponential fdist frechet gamma inversegamma inversegaussian kolmogorov lognormal noncentralchisq noncentralf rayleigh weibull unitdistribution unionbeta ksonesided noncentralbeta simplexdistribution uniondirichlet pdmatdistribution unioninversewishart wishart transformdistribution union truncated continuousunivariatedistribution exported names distributionsjl package reexported bijectors bijectorsjl provides nice interface maps composition inversion etc following table lists mathematical operations bijector corresponding code bijectorsjl operation method automatic inverse b b b b b b b b b b stackb b inverse logdet logabsdetjac ad logdet withlogabsdetjacobian b transformed rand supportb bijector logdet log forward table denotes bijector denotes jacobian evaluated b denotes pushforward denotes sampled distribution density automatic column table refers required implement feature custom bijector ad refers implemented automatically using automatic differentiation forwarddiffjl functions link maps sample random distribution dist support value example julia using bijectors julia dist beta beta float julia rand dist julia link dist invlink inverse link function example julia invlink dist julia true logpdfwithtrans log transformed probability density function distribution dist sample example julia using bijectors julia dist dirichlet dirichlet float alpha julia rand dist element arrayfloat julia logpdfwithtrans dist false ignoring transformation julia logpdfwithtrans dist true considering transformation bijector interface bijector differentiable bijection differentiable inverse basically primary application bijector profitable business transforming usually continuous probability densities transfrom random variable bijector canonical density det jacobian inverse transform evaluated pushforward measure theory plenty reasons zero probability support closed interval ad worry reaching boundary beta support transform beta density support instead compute derivative logpdf wrt transform useful inference methods hamiltonian montecarlo derivative logpdfcomputation wrt input constructing parameterized bijector consider transforming simple density mvnormal match complex density class bijectors normalizing flows nfs compositions differentiable invertible neural networks composition particular family parameterized bijectors example basic usage logpdfwithtrans methods package provides composable interface bijector types consider example beta julia using random random seed julia using bijectors using bijectors logit julia dist beta beta float julia rand dist julia bijector dist bijection logit float julia bijectordistribution returns corresponding constrainedunconstrained bijection beta indeed logit resulting logit bijector method logit defined allowing call function comparing example linkdist convince julia link dist true inversion invlink julia inverse inverse logitfloat logit float julia julia invlink dist true pretty neat huh inverselogit bijector defined ibinverselogit inverse transformation logit note inverse isa inverse inverse exp simply log inverseexp isa log true composition compose bijectors julia idy composedtupleinverselogitfloat logitfloat inverse logitfloat logit float logit float julia idy true composed isa bijector julia idx inverse idy composedtupleinverselogitfloat logitfloat inverse logitfloat logit float logit float julia idx true logpdf transformeddistribution seen replicate functionality provided link invlink replicate logpdfwithtrans instead provide transformeddistribution distribution implementing distribution interface distributionsjl julia using bijectors transformeddistribution julia td transformed dist transformeddistribution betafloatlogitfloatunivariate dist beta float transform logit float julia td isa univariatedistribution true julia logpdf td julia logpdfwithtrans dist true computing logpdftd td transformed distribution corresponding beta makes semantic sense compute pdf transformed variable using untransformed variable logpdfwithtrans julia logpdfforward td logabsdetjac withlogabsdetjacobian computation logpdf logpdfforward compute logabsdetjacobianinverse logabsdetjacobian respectively computation available using logabsdetjac method julia logabsdetjac julia logabsdetjac notice julia logabsdetjac logabsdetjac true differentiable bijection differentiable inverse compute logabsdetjac logabsdetjac actually efficient return logabsdetjac instead bijectors easy compute forward pass expensive compute avoid backwards using withlogabsdetjacobian comes julia withlogabsdetjacobian similarily julia withlogabsdetjacobian inverse purpose withlogabsdetjacobian necessarily forward function access original value transformed value compute logabsdetjac direction furthermore lot re lot computation computation logabsdetjac viceversa withlogabsdetjacobian advantage opportunities implemented sampling transformeddistribution shown replicate existing functionality transformeddistribution isa distribution rand julia rand td julia inverse td transform transform interval convenient computations assuming input real line univariate advi example real utility transformeddistribution apparent using transformeddist bijector transformed distribution corresponding beta called transformeddist simply alias transformeddist bijectordist remember bijectordist returns constrainedconstrained bijector particular distribution course construct transformeddistribution using bijectors dist particularly useful called automatic differentiation variational inference advi advi approximate constrained distribution beta follows sample normal parameters normal transform supportbeta transform differentiable bijection differentiable inverse bijector defines probability density support beta course unlikely density approximation creating distribution trivial bijector transformeddistribution julia dist beta beta float julia bijector dist logit float julia inverse inverse logitfloat logit float julia td transformed normal transformeddistribution normalfloatinverselogitfloatunivariate dist normal float transform inverse logitfloat logit float julia rand td worth noting supportbeta closed interval constrainedunconstrained bijection logit defined map interval course implementation detail continuous bijection exists closed interval boundaries closed interval measure zero affecting resulting density support entire real line practice means td transformed beta inverse td transform rand td result sample arbitrarily close disclaimer numerical accuracy limited re lucky multivariate advi example multivariate advi using stacked bijector stacked combine univariate multivariate bijectors singe multivariate bijector vector length transform entry using exp entry using log stacked easy efficient representing bijector julia random seed julia using bijectors exp log simplexbijector julia original distributions dists beta inversegamma dirichlet julia construct corresponding ranges ranges julia idx julia length dists dists push ranges idx idx length global idx idx length julia ranges element array julia base distribution meanfield normal numparams ranges julia mvnormal zeros numparams ones numparams diagnormal dim julia construct transform bs bijector dists constrainedunconstrained bijectors dists logit float log simplexbijector true julia ibs inverse bs invert unconstrainedconstrained inverse logitfloat logit float exp inverse simplexbijectortrue simplexbijector true julia sb stacked ibs ranges stacked bijector stackedtupleinverselogitfloat exp inversesimplexbijector true inverse logitfloat logit float exp inverse simplexbijectortrue simplexbijector true julia meanfield normal unconstrainedconstrained stacked bijector td transformed sb julia rand td element arrayfloat julia true true julia true true julia sum true true normalizing flows application normalizing flows usually sampling multivariate normal distribution transforming target distribution using invertible neural networks currently transforms available bijectorsjl planarlayer radiallayer create flow single planarlayer julia mvnormal zeros ones julia planarlayer planarlayer arrayfloatarrayfloat julia flow transformed transformeddistributionmvnormalfloatpdmats pdiagmatfloatarrayfloat arrayfloat planarlayerarrayfloat arrayfloat multivariate dist diagnormal dim transform planarlayer arrayfloatarrayfloat julia flow isa multivariatedistribution true sample using rand compute logpdf distribution julia rand flow element arrayfloat julia logpdf flow inverse julia rand flow dist element arrayfloat julia logpdfforward flow efficent accurate similarily multivariate advi example stacked bounded flow julia mvnormal zeros ones julia ibs inverse bijector inversegamma beta julia sb stack ibs stackedibs stackedibs lengthibs stackedtupleexp inverselogitfloat exp inverse logitfloat logit float julia sb planarlayer composedtupleplanarlayerarrayfloat arrayfloat stackedtupleexp inverselogitfloat planarlayer arrayfloatarrayfloat stackedtupleexp inverselogitfloat exp inverse logitfloat logit float julia td transformed julia rand td element arrayfloat julia true julia true fit flow julia using tracker julia planarlayer param construct parameters using param planarlayer trackedarrayarrayfloattrackedarrayarrayfloat tracked tracked tracked julia flow transformed transformeddistributionmvnormalfloatpdmats pdiagmatfloatarrayfloat arrayfloat planarlayertrackedarrayarrayfloat trackedarrayarrayfloat multivariate dist diagnormal dim transform planarlayer trackedarrayarrayfloattrackedarrayarrayfloat tracked tracked tracked julia rand flow tracked element arrayfloat julia rand flow dist element arrayfloat julia tracker logpdfforward flow backprob julia tracker grad arrayfloat easily create complex flows simply planarlayer planarlayer radiallayer useful fluxjl fluxparams extract parameters julia using flux julia flux params flow params tracked tracked tracked useful function forwarddistribution method similar withlogabsdetjacobianbijector sense forward pass entire process sample transform returns useful quantities process using efficent computation path julia logjac logpdfy forward flow sample transform returns useful quantities pass tracked logabsdetjac tracked logpdf tracked method example useful computing quantities expected lower bound elbo transformed distribution joint density analytical expression available approximate elbo monte carlo estimate term elbo entropy base density analytically using analytical expression entropy using monte carlo estimate rest terms elbo estimate lower variance monte carlo estimate entire expectation bibliography rezende mohamed variational inference normalizing flows arxiv kucukelbir tran ranganath gelman blei automatic differentiation variational inference arxiv