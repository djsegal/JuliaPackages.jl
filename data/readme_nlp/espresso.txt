espresso expression transformation package symbolic manipulation espresso provides functions finding matching substituting rewriting julia ast examples match power expression extract argument pat x starting placeholder placeholder matches ex matchex pat ex dictsymbol entry x placeholder x captured symbol function calls arguments pat f a a match arguments ex quote foo bar baz findex pat ex element array foo bar baz substitute symbol quux ex subs ex dict quux x quux rewrite function calls corresponding broadcasting ex foo bar expression pat f a match recursively pattern rpat f a rewrite pattern rewriteall ex pat rpat foo bar rewritejl expression transformation functions parameters expression graph sometimes sophisticated transformations including depending argument types espresso parse expressions graph basic calls assignments using exgraph type ex exgraph ex example values exgraphs learns types vars evaluate evaluate expressions fill values intermediate nodes exgraph exnodeinput exnodeinput exnodeconstanttmp exnodecalltmp tmp exnodeconstanttmp exnodecalltmp tmp exnodecalltmp tmp exnodecall tmp tmp representation somewhat cryptic flexible example using easily rid common subexpressions g eliminatecommon exgraph exnodeinput exnodeinput exnodeconstanttmp exnodecalltmp tmp exnodecalltmp tmp exnodecall tmp tmp toexpr toexprkw construct julia expression exgraph toexprkw g quote tmp tmp tmp tmp tmp tmp tmp somewhat outdated document