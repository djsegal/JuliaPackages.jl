ignitejl welcome ignitejl julia port python library ignite simplifying neural network training validation loops using events handlers ignitejl provides simple flexible engine event system allowing easy composition training pipelines various events artifact saving metric logging model validation eventbased training abstracts training loop replacing engine wraps process function consumes single batch data iterable data loader produces batches data events corresponding event handlers attached engine configured fire specific training event handlers flexibile compared approaches callbacks handlers callable multiple handlers attached single event multiple events trigger handler custom events defined fire userspecified training makes adding functionality training pipeline easy minimizing modify existing code quick start example demonstrates ignitejl train simple neural network key features note training step factored training loop trainstep process function takes batch training data computes training loss gradients updates model parameters data loaders iterable collection dataloader mlutilsjl using ignite using flux zygote optimisers mlutils training neural network build simple neural network initialize adam optimizer model chain dense tanh dense optim optimisers setup optimisers adam f model create mock data data loaders xtrain xtest rand reshape range length ytrain ytest xtrain xtest traindataloader dataloader xtrain ytrain batchsize shuffle true partial false evaldataloader dataloader xtest ytest batchsize shuffle false create training engine engine reference parent trainer engine created batch batch training data retrieved iterating traindataloader optional return value stored traineroutput function trainstep engine batch batch gs zygote withgradient sum abs model global optim model optimisers update optim model gs return dict loss trainer engine trainstep start training ignite run trainer traindataloader maxepochs epochlength periodically evaluate model real power ignitejl comes adding events training engine evaluate model th training epoch easily incorporated modify training code create evaluator engine consumes batches evaluation data add event handlers evaluator engine accumulate running average evaluation metrics batches evaluation data onlinestatsjl easy add event handler trainer runs evaluator evaluation data loader training epochs using onlinestats mean fit tracking evaluation metrics create evaluation engine using syntax evaluator engine engine batch batch ypred model evaluate model single batch validation data return dict ytrue ypred ypred result stored evaluatoroutput add events evaluation engine track metrics addeventhandler evaluator started engine evaluator starts initialize running mean engine metrics dict abserr mean fields added engine dynamically addeventhandler evaluator iterationcompleted engine iteration compute eval metrics predictions engine output engine metrics abserr fit abs ytrue ypred vec add event trainer runs evaluator epochs addeventhandler trainer epochcompleted engine ignite run evaluator evaldataloader info evaluation metrics abserr evaluator metrics abserr run trainer periodic evaluation ignite run trainer traindataloader maxepochs epochlength artifact saving logging artifacts easily added trainer modifying code example save current model optimizer disk epochs using bsonjl using bson save save model optimizer epochs addeventhandler trainer epochcompleted engine save modelandoptimbson model optim info saved model optimizer disk trigger multiple functions event multiple event handlers added event addeventhandler trainer completed engine runs training completed addeventhandler trainer completed engine runs training completed function runs attach handler multiple events boolean operators combine events addeventhandler trainer epochcompleted completed engine runs th epoch training completed throttledevent epochcompleted epochcompleted eventfilter throttlefilter addeventhandler trainer throttledevent engine runs rd epoch s passed firing define custom events custom events created fired userdefined stages training process example suppose define events fire start finish backward pass optimizer step define event types subtype abstractloopevent fire appropriate trainstep process function using fireevent struct backwardstarted abstractloopevent struct backwardcompleted abstractloopevent struct optimstepstarted abstractloopevent struct optimstepcompleted abstractloopevent function trainstep engine batch batch compute gradients loss respect model fireevent engine backwardstarted gs zygote withgradient sum abs model engine gradients gs engine accessed event handlers fireevent engine backwardcompleted update model parameters fireevent engine optimstepstarted global optim model optimisers update optim model gs fireevent engine optimstepcompleted return dict loss trainer engine trainstep add event handlers custom events usual addeventhandler trainer backwardcompleted engine code runs th backward pass completed page generated using literatejl