sortperfjl module test performance sorting algorithms purpose module test performance sort related algorithms julia example output version prerelease run stdsorttestssortalgssortperfsortalgs insertionsort heapsort mergesort quicksort radixsort timsort typessortperfstdtypes int int int float float string range array size powers replicates ltfunctionisless functionidentity sort options revboolfalse forward saveboolfalse create save timing tsv pdf plot prefixsortperf prefix saved files test individual algorithms sortperfalgorithm data size replicatesxxx examples sortperfquicksort int test quicksort random ints sortperfmergesort float string test mergesort float s strings sortperfquicksort mergesort timsort test quicksort mergesort timsort int float float string arrays int float float string ranging elements elements replicates powers run test times parameters accepted sort passed sorting tests actual tests run include sorting arrays following characteristics random sorted reversed sorted random exchanges sorted random values appended unique values equal quicksort median killer half descending half ascending tests inspired similar tests sortperf python details suggestions based basic tests table notes julia implementations various algorithms table indicates recommended sort algorithm size items type string floating integer data random means data permuted randomly structured means data contains partially sorted runs adding random data sorted array unique indicates data contains unique values unstable stable unstable stable strings random structured unique float random structured unique int random structured ut unique key symbol algorithm heapsort insertionsort mergesort quicksort timsort ut timsortunstable radixsort current recommendations except pathological arrays sorted quicksort unstable mergesort stable sorting arrays sections sorted data timsort structured handle reversesorted data repeat elements unstable version timsort contributed julia soon handle numerical data ints floats structure radixsort choice except bit values bit integers span range values memory tight quicksort algorithm concern pathological heapsort stable algorithms additional memory timsort probably frugal composite types behave sorting application test algorithms data package facilit