oopmacro julia package writing julia object oriented programming style usage example basic class define class defining functions plain julia generic functionkeyword arguments supported using oopmacro class simplecls begin field field int field int supports style function declaration fun self simplecls self field fun self begin self field function fun self self field generic function supported fun int self simplecls self field fun int self begin self field function fun int self self field class simplecls begin field int fun self self field fun self self field simplecls fun s simplecls fun s note instead fun fun former style performance cost constructor native julia constructor using oopmacro class consnative begin field int field int consnative f begin self f self field f self cnative consnative alternatively python style init provide oopmacro using oopmacro class coninit begin field int field int init self f f begin self field f f f self field f else self field f cinitb coninit f inheritance concrete class inheritance supported multiple class inheritance supported call super python using oopmacro using base test class parent begin pfield int pfun self self pfield pfunadd self self pfield class parent begin pfield int pfun self self pfield pfunadd self self pfield class child parent parent begin cfield int pfun self self cfield pfunadd self self cfield cfunsuper self super parent pfun self cfunaddsuper self super parent pfunadd self cfunsuper self super parent pfun self cfunaddsuper self super parent pfunadd self parent child pvalue pfield pvalue pfield cvalue cfield test pfun pvalue test pfun cvalue test pfunadd pvalue test pfunadd cvalue testthrows methoderror pfunadd test cfunsuper pvalue test cfunaddsuper pvalue test cfunsuper pvalue test cfunaddsuper pvalue future write unit test function clsutil oopmacroimpl override getproperty natural usage methods maybe require manually setting self arg declaring methods specify static object method type generic paramet