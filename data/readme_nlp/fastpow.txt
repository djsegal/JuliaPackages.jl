fastpow package provides macro fastpow speed computation integer powers julia expression transforming optimal sequences multiplications slight sacrifice accuracy compared julia built function optimizes powers form particular optimal additionchain exponentiation literal integer powers larger powers repeated squaring reduce power addition chains example fastpow requires multiplications correct answer relative error e ulps vs default correct answer relative error e ulps slower note apply fastpow macro block julia code example fastpow function foo sin sqrt return applies fastpow transformation literal integer exponent function foo alternative fastpow julia built fastmath macro enables various llvm optimizations including faster integer powers using repeated multiplication advantages fastpow guarantees optimal additionchain exponentiation exponentiating julia type complex matrices whereas llvm optimize set hardware numeric typ