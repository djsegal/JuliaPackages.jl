astarsearchjl algorithm julia space search algorithms implemented baseline package exports astar function provides generic implementation algorithm type totally unrestricted provide functions neighbour optionally heuristic goal algorithm path implemented exported functions explore space exported depthfirst breadthfirst iterativedeepening functions intended transparent drop replacement astar function able heuristic installation julia pkg repl type add astarsearch usage astarneighbours start goal heuristicdefaultheuristic costdefaultcost isgoaldefaultisgoal hashfnhash timeoutinf maxcostinf execute algorithm path start reach goal condition arguments mandatory optional returns structure status field symbol success algorithm found path start goal timeout algorithm timed partial path returned path field nopath algorithm path goal path returned fields path array start goal found cost cost returned path closedsetsize algorithm tested goal size closed set opensetsize set algorithm arguments neighbours function takes returns neighbour array iterable start starting type completely unrestricted goal goal type unrestricted usually start heuristic function goal returns estimate cost reach goal estimate optimistic path notice path expensive guaranteed optimal path multiply heuristic constant algorithm usually faster cost function takes current neighbour returns cost transition default transitions cost isgoal function takes goal evaluates goal reached default hashfn function takes returns compact representation dictionary key usually uint int string default base hash function field composite avoid duplications warning arrays fields return hash time please pass hashfn returns value timeout timeout algorithm stops returning partial path lowest heuristic default unrestricted please notice algorithm wil run specified time maxcost maximum bound accumulated cost path result nopath result path goal cost exists default inf enableclosedset track visited nodes avoid visiting disable loop space graph default true uninformed search algorithms package exports uninformed search algorithms compare performance astar explicit heuristic cost interface function identical algorithm drop replacement astar parameters cost heuristic wil ignored heuristic cost maxcost instead maxdepth parameter limit depth search exported functions depthfirst breadthfirst iterativedeepening depth algorithm expands neighbours neighbours maxdepth limit reached enableclosedset enabled default avoid loops hide paths goal multiple paths breadth algorithm searches depth ensuring solution found usually slower iterative deepening algorithm iteratively executes depth search levels maxdepth properties breadth speed depth search enableclosedset disabled default depth internally examples algorithm solve shortest paths mazes sorts puzzles puzzle maze example puzzle solver test folder path maze using manhattan heuristic following using test using astarsearch directions seen cartesian indexes added position position const cartesianindex const cartesianindex const left cartesianindex const cartesianindex const directions left manhattan distance positions maze matrix manhattan cartesianindex cartesianindex sum abs check maze filter moves walls function mazeneighbours maze res cartesianindex directions size maze size maze maze push res return res function solvemaze maze start goal currentmazeneighbours mazeneighbours maze exported search functions share interface heuristic cost return astar currentmazeneighbours start goal heuristic manhattan free cell wall maze start cartesianindex goal cartesianindex res solvemaze maze start goal test res status success test res path cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex cartesianindex test res cost breaking changes removed maxdepth parameter improve memory usage maxcost powerful removed abstractastarsearch base struct astar function supported interface package release base astar api changes requiring neighbours function argument third argument starting goal functions heuristic cost isgoal optional keyword arguments expect arguments current goal cost function subtyping api main method renamed astar instead search release introduces strict type checking requiring uniformity types cost heuristics improve performance type errors probably default cost int provided float heuristic provide cost function returns float cast heuristic int