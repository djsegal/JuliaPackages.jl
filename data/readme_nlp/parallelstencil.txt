parallelstenciljl parallelstencil empowers domain scientists write architectureagnostic level code parallel performance stencil computations gpus cpus performance similar cuda achieved typically improvement performance reached using cudajl array programming example shallow ice solver juliacon achieved nearly times performance corresponding cudajl array programming implementation absolute terms reached theoretical upper performance bound nvidia p gpu defined effective throughput metric teff note teff common throughput metrics section performance metric gpu performance solver reported green cpu performance blue parallelstencil relies native kernel programming capabilities cudajl basethreads performance computations gpus cpus respectively seamlessly interoperable implicitglobalgridjl renders distributed parallelization stencilbased gpu cpu applications regular staggered grid trivial enables close ideal weak scaling realworld applications thousands gpus moreover parallelstencil enables hiding communication computation simple macro call particular restrictions package communication parallelstencil designed conjunction implicitglobalgridjl simplest usage domainscientists rendering fast interactive development massively scalable performance multigpu applications readily accessible furthermore developed selfcontained approach solving nonlinear multiphysics gpu supercomputers julia relying parallelstencil implicitglobalgridjl parallelstencil feature hide communication computation showcased close ideal weak scaling demonstrated porohydromechanical realworld application gpus piz daint supercomputer particularity parallelstencil enables writing single level julia code deployed cpu gpu conjuction implicitglobalgridjl julia code run single cpu thread thousands gpuscpus contents parallelization macro call stencil computations mathclose notation lines example deployable gpu cpu lines multixpu example seamless interoperability communication packages hiding communication support architectureagnostic low level kernel programming module documentation callable julia repl ijulia concise singlemultixpu miniapps dependencies installation questions comments discussions references parallelization macro call simple call parallel parallelize function launch package underneath parallelization defined call initparallelstencil beforehand supported cudajl running gpu basethreads cpu following example outlines run parallel computations gpu using native kernel programming capabilities cudajl underneath omitted lines represented omitted arguments initparallelstencil cuda parallel function diffusiondstep parallel diffusiondstep note arrays automatically allocated hardware chosen computations gpu cpu using provided allocation macros zeros ones rand stencil computations mathclose notation parallelstencil provides submodules computing finite differences mathclose notation finitedifferencesd finitedifferencesd finitedifferencesd custom macros extend finite differences submodules stencilbased numerical methods readily plugged following example complete function computing time step heat diffusion solver using finitedifferencesd using parallelstencil finitedifferencesd parallel function diffusiondstep t ci lam dt dx dy dz inn t inn dt lam inn ci dxi dx dyi dy dzi dz return macros example described module documentation callable julia repl ijulia julia using parallelstencilfinitedifferencesd julia help inn inn select inner elements corresponds help dxi dxi compute nd differences adjacent elements dimension select inner elements remaining dimensions corresponds innyzdxa note dyi dzi perform analogue operations dxi dimension respectively type finitedifferencesd julia repl explore provided macros lines example deployable gpu cpu concise heat diffusion solver parallelstencil simple boolean usegpu defines runs gpu cpu environment variable julianumthreads defines cores latter const usegpu true using parallelstencil using parallelstencil finitedifferencesd static usegpu initparallelstencil cuda float else initparallelstencil threads float parallel function diffusiondstep t ci lam dt dx dy dz inn t inn dt lam inn ci dxi dx dyi dy dzi dz return function diffusiond physics lam thermal conductivity cpmin minimal heat capacity lx ly lz length domain dimensions numerics nx ny nz gridpoints dimensions nt time steps dx lx nx space step dimension dy ly ny space step dimension dz lz nz space step dimension array initializations zeros nx ny nz t zeros nx ny nz ci zeros nx ny nz initial conditions heat capacity temperature gaussian anomalies ci cpmin data array exp ix dx lx iy dy ly iz dz lz exp ix dx lx iy dy ly iz dz lz ix size iy size iz size data array exp ix dx lx iy dy ly iz dz lz exp ix dx lx iy dy ly iz dz lz ix size iy size iz size t assign t correct boundary conditions time loop dt min dx dy dz cpmin lam time step d heat diffusion nt parallel diffusiondstep t ci lam dt dx dy dz t t diffusiond corresponding file found lines multixpu example concise multixpu heat diffusion solver parallelstencil conjunction implicitglobalgridjl readily deployed single cpu thread thousands gpuscpus simple boolean usegpu defines runs gpu cpu julianumthreads defines cores latter solver run processes implicitglobalgridjl creates automatically implicit global computational grid based processes solver run based process topology explicitly chosen user automatically determined please refer documentation implicitglobalgridjl information const usegpu true using implicitglobalgrid import mpi using parallelstencil using parallelstencil finitedifferencesd static usegpu initparallelstencil cuda float else initparallelstencil threads float parallel function diffusiondstep t ci lam dt dx dy dz inn t inn dt lam inn ci dxi dx dyi dy dzi dz return function diffusiond physics lam thermal conductivity cpmin minimal heat capacity lx ly lz length domain dimensions numerics nx ny nz gridpoints dimensions nt time steps initglobalgrid nx ny nz dx lx nxg space step dimension dy ly nyg space step dimension dz lz nzg space step dimension array initializations zeros nx ny nz t zeros nx ny nz ci zeros nx ny nz initial conditions heat capacity temperature gaussian anomalies ci cpmin data array exp xg ixdxci lx yg iydyci ly zg izdzci lz exp xg ixdxci lx yg iydyci ly zg izdzci lz ix size iy size iz size data array exp xg ixdx lx yg iydy ly zg izdz lz exp xg ixdx lx yg iydy ly zg izdz lz ix size iy size iz size t assign t correct boundary conditions time loop dt min dx dy dz cpmin lam time step d heat diffusion nt parallel diffusiondstep t ci lam dt dx dy dz updatehalo t t t finalizeglobalgrid diffusiond corresponding file found thanks implicitglobalgridjl function calls added previous single gpucpu solver multixpu solver omitted unmodified lines represented using implicitglobalgrid function diffusiond physics numerics initglobalgrid nx ny nz dx lx nxg space step dimension dy ly nyg space step dimension dz lz nzg space step dimension array initializations initial conditions heat capacity temperature gaussian anomalies ci cpmin data array exp xg ixdxci lx yg iydyci ly zg izdzci lz exp xg ixdxci lx yg iydyci ly zg izdzci lz ix size iy size iz size data array exp xg ixdx lx yg iydy ly zg izdz lz exp xg ixdx lx yg iydy ly zg izdz lz ix size iy size iz size time loop nt updatehalo t finalizeglobalgrid diffusiond resulting movie running application gpus solving heat diffusion heterogeneous heat capacity gaussian anomalies global computational grid size xx grid dimension plane middle dimension corresponding file found seamless interoperability communication packages hiding communication previous multixpu example parallelstencil seamlessly interoperable implicitglobalgridjl priori true communication package allows explicitly decide required communication occurs example mpijl besides mpijl seamlessly interoperable implicitglobalgridjl extend functionality moreover parallelstencil enables hiding communication computation simple call hidecommunication following example communication performed updatehalo package implicitglobalgridjl hidden computations parallel diffusiondstep hidecommunication begin parallel diffusiondstep t te ci lam dt dx dy dz updatehalo t enables close ideal weak scaling realworld applications thousands gpuscpus type hidecommunication julia repl obtain explanation arguments profiling viscous stokes flow application using nvidia visual profiler nvvp graphically exemplifies update velocities kernel split boundary inner domain computations latter overlap mpi communication halo exchange support architectureagnostic low level kernel programming level stencil computations mathclose notation completed indexbased programming using macro parallelindices example following kernel enables setting neumann boundary conditions dimension using finite differences parallelindices ixiz function bcy ix iz ix iz ix iz ix iz return launched follows parallel size size bcy furthermore set architectureagnostic low level kernel language constructs supported parallelindices kernels module documentation callable julia repl ijulia enable explicit usage shared memory heat diffusion example module documentation callable julia repl ijulia module documentation called julia repl ijulia julia using parallelstencil julia help parallelstencil search parallelstencil initparallelstencil module parallelstencil enables domain scientists write level code parallel performance stencil computations deployed gpus cpus overview examples primary macros initparallelstencil parallel hidecommunication zeros ones rand advanced parallelindices parallelasync synchronize macros available parallelindices kernels psshow psprintln advanced griddim blockidx blockdim threadidx syncthreads sharedmem submodules parallelstencilfinitedifferencesd parallelstencilfinitedifferencesd parallelstencilfinitedifferencesd modules generated caller data description macro module type macroname including modulename respectively concise singlemultixpu miniapps miniapps regroup collection various codes leverage parallelstencil implement architectureagnostic level code parallel performance stencil computations gpus cpus miniapps target various challenging domain science studies multiphysics coupling nonlinearities challenge existing solving strategies pseudotransient relaxation delivers implicit solutions differential equations miniapps feature multixpu version combines capabilities parallelstencil implicitglobalgridjl enable multigpu multicpu executions unleashing juliascale performance metric core processors gpus throughputoriented systems massive parallelism hide latency scientific application algorithms require operations flops compared amount bytes accessed main memory significantly memory bound flop metric adequate reporting application performance modern applications status motivated develop memory throughputbased performance evaluation metric teff evaluate performance iterative stencilbased solvers effective memory access aeff gb sum twice memory footprint unknown fields du fields depend history updated iteration fields dk change iteration effective memory access divided execution time iteration tit sec defines effective memory throughput teff gb upper bound teff tpeak measured cpus gpu analogue defining teff metric assume evaluate iterative stencilbased solver size larger cache sizes usage time blocking feasible advantageous reasonable assumption realworld applications concept include fields effective memory access depend history fluxes fields recomputed fly stored chip defining theoretical upper bound teff closer real upper bound progress using simple array broadcasting capabilities gpu cpu arrays julia enable close optimal performance parallelstenciljl permits overcome limitation top figure similar ease programming miniapp content thermomechanical convection app viscous stokes app viscous stokes app acoustic wave app acoustic wave app scalar porosity waves app hydromechanical porosity waves app stay tuned miniapp codes follow similar structure permit serial threaded cpu nvidia gpu execution line miniapp code permits enable cuda gpu backend setting usegpu flag true miniapps interactively executed julia repl includes multixpu versions using single cpu gpu note optimal performance miniapp script miniappcode launched shell using project dependencies project disabling array bound checking checkbounds using optimization level o julia project checkbounds o miniappcode jl note refer documentation supercomputing centre instructions run julia scale instructions running piz daint gpu supercomputer swiss national supercomputing centre found running octopus gpu supercomputer swiss geocomputing centre found thermomechanical convection app app thermalconvectiondjl thermal convection example combines viscous stokes flow advectiondiffusion heat including temperaturedependent shear viscosity miniapp resolves thermal convection cells earth mantle convection plumes gif depicts dimensional temperature field evolving convection cells plumes results obtained running miniapp thermalconvectiondjl viscous stokes app app stokesdjl viscous stokes flow example solves incompressible stokes equations linear shear rheology model configuration represents buoyant inclusion buoyant matrix figure depicts upper panels dynamical pressure field vertical vy velocity lower pannels log vertical momentum balance residual ry log error norm evolution function pseudotransient iterations results obtained running miniapp stokesdjl viscous stokes app apps stokesdjl stokesdmultixpujl viscous stokes flow example solves incompressible stokes equations linear shear rheology model configuration represents buoyant spherical inclusion buoyant matrix figure depicts vertically sliced crosssections upper panels dynamical pressure field vertical vz velocity lower panels log vertical momentum balance residual rz log error norm evolution function pseudotransient iterations numerical resolution xx grid gpus local domain size xx gpu stokesdjl stokesdmultixpujl single multixpu implementations respectively multixpu implementation demonstrates parallelstencil capabilities hide computations communication performed implicitglobalgridjl results obtained running multixpu miniapp stokesdmultixpujl nvidia titan xm gpus distributed physically distinct compute nodes multixpu application permits leverage distributed memory parallelisation enable scale calculations acoustic wave app app acousticdjl acoustic wave example solves acoustic waves using split velocitypressure formulation animation depicts dynamical pressure field evolution function explicit time steps results obtained running miniapp acousticdjl acoustic wave app apps acousticdjl acousticdmultixpujl acoustic wave examples solves acoustic waves using split velocitypressure formulation animation depicts slice dynamical pressure field evolution function explicit time steps achieved numerical resolution xx grid gpus local domain size xx gpu acousticdjl acousticdmultixpujl single multixpu implementation respectively multixpu implementation demonstrates parallelstencil capabilities hide computations communication performed implicitglobalgridjl results obtained running multixpu miniapp acousticdmultixpujl nvidia titan xm gpus distributed physically distinct compute nodes multixpu application permits leverage distributed memory parallelisation enable scale calculations scalar porosity waves app app scalarporowavesdjl scalar porosity waves example solves scalar solitary wave equations assuming total pressure lithostatic eliminating solve total pressure explicitly animation depicts normalised porosity effective pressure fields evolution function explicit time steps top row compaction decompaction rheology identical resulting circular solitary waves rearranging solitons characteristic size bottom row decompaction occurs faster rate compared compaction resulting chimneyshaped features hydromechanical porosity waves app app hydromechdjl hydromechanical porosity wave example resolves solitary waves owing hydromechanical coupling removing lithostatic pressure assumption total fluid pressure explicitly computed nonlinear stokes darcy flow solvers respectively animation depicts formation fluid escape pipes phase media owing decompaction weakening running miniapp hydromechdjl top row evolution porosity distribution effective pressure bottom row darcy flux relative fluid solid motion solid porous matrix deformation dependencies parallelstencil relies julia cuda package cudajl macrotoolsjl staticarraysjl installation parallelstencil installed directly julia package manager repl julia pkg add parallelstencil pkg test parallelstencil questions comments discussions discuss technical issues please post julia discourse gpu topic julia scale topic gpu distributed channels julia slack join visit discuss numericaldomainscience issues please post julia discourse numerics topic modelling simulations topic whichever topic fits issue references omlin rss kwasniewski malvoisin podladchikov solving nonlinear multiphysics gpu supercomputers julia juliacon conference virtual rss reuber omlin multiphysics inversion gpu supercomputers julia juliacon conference virtual rss omlin podladchikov porting massively parallel multigpu application julia nonlinear multiphysics flow solver juliacon conference baltimore usa rss omlin podladchikov nonlinear multiphysics solver cuda mpi julia pasc conference zurich switzerland besard foket de sutter effective extensible programming unleashing julia gpus ieee transactions parallel distributed systems doi tpds besard churavy edelman de sutter rapid software prototyping heterogeneous distributed platforms advances engineering software doi advengsoft mccalpin memory bandwidth machine balance current performance computers ieee computer society technical committee computer architecture tcca newsletter december rss duretz podladchikov resolving hydromechanical coupling dimensions spontaneous channelling porous fluids owing decompaction weakening geophysical journal international ggz