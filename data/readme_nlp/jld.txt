jldjl save load variables julia data format jld jld files conventionally extension jld widely format data storage julia programming language jld specific dialect hdf crossplatform multilanguage data storage format frequently scientific data comparison plain hdf jld files automatically add attributes naming conventions preserve type information object lossless storage arbitrary julia objects complete solution appears julia serializer accessed via serialize deserialize commands serializer interprocess communication term backwards compatibility currently uncertain jldarchives repository exists test compatibility jld file formats choose save data using serializer please file extension jls distinguish files jld files note read jld files trusted sources jld files capable executing arbitrary code read installation julia package manager pkg add jld quickstart jld module begin code using jld save variables care advanced features simple syntax save tmpmyfilejld arr equivalently save tmpmyfilejld explicitly saving arr myfilejld alternatively pass save dictionary keys strings saved variable names values jld file read variables load tmpmyfilejld reads entire file returned dictionary specific request particular variables example loadtmpmyfilejld arr return value arr file assign jld fileio package provide generic interface save load files means user explicitly request jld format saving file save tmpfoo bar ambiguous save tmpfoojld bar jld format inferred file extension using fileio save file format jld tmpfoo bar jld format explicitly requested using fileio encountered loading jld file fileio magic bytes beginning file infer data format convenience macros save load variables save tmpmyfilejld save compress true tmpmyfilejld create file compression mention variables save saves variables current module conversely load pop saved variables directly global workspace current module mind macros significant limitations example load inside function constraints using string interpolation inside filenames etc limitations stem julia compiles functions machine code evaluation introduce variables runtime evaluate expressions workspaces save load functions limitations recommended considerably robust cost slight reduction convenience finegrained control obtained using functional syntax jldopen mydatajld file write file alternatively write file jldopen mydatajld file read file allows add variables generated jld file syntax file jldopenmydatajld fine advantage automatically close file closefile error julia level wrapper providing dictionary interface using jld hdf jldopen testjld file creategroup file mygroup create dset create scalar dataset inside dest rand note features hdf jld files types definitions save objects userdefined type fresh julia session loading objects types defined definition available jld module automatically create types note mytype defined automatically jld mytype defined external module particular module functions types defined jld ensure loaded types suite behaviors provided definition external modules ensure modules available reading variables jld file ensure automatic loading modules addrequire specify dependencies example suppose file mytypesjl default loadpath defined module mytypes export mytype struct mytype value int object type mytype save following jldopen somedatajld file addrequire file mytypes write file cause mytypesjl loaded automatically whenever somedatajld performance please complete documentation particularly section custom serializers complete documentation extensive documentation including information jld format conventions found doc directory test directory contains test scripts demonstrate usage credits simon kornblith tim holy comaintainers primary authors tom short contributed stringtype conversion thanks users reported bugs tested fix