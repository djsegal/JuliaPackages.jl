statefuliterators typed stream iterables julia following stream commands supported read read readbytes readbytes position skip seek seekstart seekend eof readuntil readline addition available peek added example julia using statefuliterators julia statefuliterator statefuliteratorsstatefuliteratorarrayintint julia collect element array julia eltype int julia read julia readbytes element arrayuint x x x x x x x x x x x x x x x x types unlike julia iostream stateful iterators underlying type eltype affects behaviour various methods follows default type read dims similar methods underlying type iterator chunking underlying type subtle affects types underlying type read julia statefuliteratorint statefuliteratorsstatefuliteratorarrayintintint julia read uint element arrayuint x x julia read uint x julia read uint x note third reads start uint comparison read extracts bytes uint single uint explicit iterables follow spirit iter interface common exception task types saved restored methods copy peek position seek seekstart available supported julia statefuliteratortask produce statefuliteratorsstatefuliteratortaskvoidtask runnable xfcefb julia read julia available error task lacks explicit available homeandrewjuliavstatefuliteratorssrcstatefuliteratorsjl bits types methods involving type conversion supported underlying type bits type julia statefuliteratorx x statefuliteratorsstatefuliteratorarrayuintintuintxx julia read uint x julia statefuliteratorx hello world statefuliteratorsstatefuliteratorarrayintxhello world julia read uint error argument abstract type size indeterminate read homeandrewjuliavstatefuliteratorssrcstatefuliteratorsjl offset value returned position seek corresponding iterable integer function skip integer instances underlying type necessarily bytes move warnings efficient using normal iterators ref simple summation using sum million elements twice slow using stateful iterator compared using bare array allocates memory credits thanks okvs efficient data structure efficient inner loop various idea