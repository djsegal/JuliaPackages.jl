nlsolvejl solving linear systems equations julia nlsolvejl julianlsolvers family linear systems equations nlsolve package solves systems nonlinear equations formally multivalued function package looks vector satisfies accuracy package able solve mixed complementarity similar systems nonlinear equations except equality zero allowed inequality boundary condition satisfied formal definition related commands identical api solving fixed taking input function solving simple example consider following bivariate function variables sin exp zero function display write following program using nlsolve function sin exp function exp cos exp nlsolve note function computes residuals nonlinear system stores preallocated vector passed argument similarly function computes jacobian system stores preallocated matrix passed argument residuals jacobian functions shapes calling nlsolve function starting iterative algorithm finally nlsolve function returns object type solverresults particular field zero structure contains solution convergence occurred object type solverresults converged indicates convergence occurred specifying function jacobian various specifying residuals function possibly jacobian functions modifying arguments efficient method minimizes memory allocations following assumed defined function abstractvector abstractvector abstractarray abstractarray computing residual system putting argument specifying jacobian computed finite differencing function compute jacobian computed finite difference syntax simply nlsolve initialx alternatively construct object type oncedifferentiable pass nlsolve initialx initialf similar initialx df oncedifferentiable initialx initialf nlsolve df initialx notice passed initialx initialf constructor df actual initial residual vector initialize cache variables df types dimensions automatic differentiation option function computing jacobian automatic differentiation thanks forwarddiff package syntax simply nlsolve initialx autodiff forward jacobian available addition abstractarray abstractarray function abstractarray abstractarray computing jacobian system syntax example nlsolve initialx specify functions abstractarray abstractarray abstractarray abstractarray arbitrary arrays note assume jacobian passed initialized zero matrix set elements matrix function alternatively construct object type oncedifferentiable pass nlsolve df oncedifferentiable initialx initialf nlsolve df initialx optimization simultaneous residuals jacobian addition function fjabstractarray abstractarray abstractarray computes residual jacobian time following syntax df oncedifferentiable fj initialx initialf nlsolve df initialx function fj optimization cost calling successively syntax possibly improve performance providing fj function available calculating residuals jacobian special syntax arguably simpler approach define function function myfun shared calculations begin shared calculation mutating calculations specific goes mutating calculations specific goes solve using nlsolve onlyfj myfun initialx enable nlsolve efficiently calculate efficient calculating separately functions returning residuals jacobian output assumed function abstractarray returns newlyallocated vector containing residuals simply pass nlsolve automatically detect defined arguments nlsolve initialx note means function method accepts argument method accepts arguments assume argument version mutating described via autodiff keyword finitedifferencing autodifferentiation compute jacobian addition abstractarray function abstractarray returning newlyallocated matrix containing jacobian simply pass nlsolve nlsolve initialx addition function fj returning tuple newlyallocated vector residuals newlyallocated matrix jacobian approach nlsolve fj initialx functions taking scalar arguments function float float takes scalars returns vector tuple containing residuals helper function nary complete syntax nlsolve nary initialx finitedifferencing compute jacobian jacobian sparse jacobian function sparse routines manipulate sparse matrices instead ones increase performance systems means necessarily provide appropriate jacobian type solver feed df oncedifferentiable x f j nlsolve df initialx optional third function fj constructor jacobian note jacobian matrix reset function calls result careful ensure forget overwrite nonzeros elements initialized previous function call doubt sparse matrix beginning function sparse jacobian achieved fill dropzeros remove sparsity pattern fine tunings algorithms currently available choice achieved setting optional method argument nlsolve default algorithm trust region method trust region method solution method relies quadratic approximation squares objective considered valid compact region centered current iterate method selected method trustregion method accepts following custom parameters factor determines size initial trust region size set product factor euclidean norm initialx nonzero else factor default autoscale true variables automatically rescaled scaling factors norms jacobian columns default true newton method linesearch classical newton algorithm optional linesearch method selected method newton method accepts custom parameter linesearch equal function computing linesearch currently available values linesearches package default linesearch performed note assumed passed linesearch function update solution vector evaluate function anderson acceleration method selected method anderson diis pulay mixing method based acceleration fixed iteration x x betax default beta jacobian information linesearch history size controlled parameter corresponds simple fixed iteration values larger history size accelerate iterations values usually increase speed convergence increase storage computation requirements lead instabilities method useful accelerate fixed iteration x x solver reference walker ni anderson acceleration fixed iterations siam journal numerical analysis common options optional arguments nlsolve available algorithms xtol norm difference successive iterates convergence declared default ftol infinite norm residuals convergence declared default e iterations maximum iterations default storetrace trace optimization algorithm stored default false showtrace trace optimization algorithm shown stdout default false extendedtrace additifonal algorithm internals added trace default false fixed fixedpoint wrapper nlsolve maps input function likewise allows convenient solution fixed commonly encountered computational economics notes default method anderson naive picardstyle iteration achieved setting advisable contractions lipschitz constants close convergence fails consider lowering autodifferentiation supported fixedpoint initx method newton autodiff forward tolerances iteration bounds set exactly nlsolve function wrapper fixedpoint initx iterations note supplying derivative appropriately transformed currently map waiting api stabilize mapping mixed complementarity multivariate function vectors solution mixed complementarity mcp vector following holds index fi ai xi bi fi xi ai fi xi bi vector contain elements equal inf vector contain elements equal inf particular elements equal inf elements equal inf mcp exactly equivalent multivariate root finding described package solves mcps reformulating solution system nonlinear equations described miranda fackler nlsolve sign convention opposite function mcpsolve solves mcps takes arguments nlsolve except vectors immediately follow argument corresponding possibly derivative extra optional argument reformulation values reformulation smooth smooth reformulation using fischer function default robust complex reformulation minmax minmax reformulation faster smooth approximation algebra robust reformulated kinks complete example using nlsolve function mcpsolve inf inf inf inf reformulation smooth autodiff forward solution julia zero element arrayfloat e lower bounds hit third components hence third components function positive solution hand fourth components function zero solution julia similar zero julia zero julia element arrayfloat e e todolist broyden updating jacobian trustregion homotopy methods lmmcp algorithm kanzow related packages jumpjl solve linear equations reformulate optimization linear constraints set equations constraints enter objective function jump currently supports source commercial solvers complementarityjl brings powerful modeling language jumpjl complementarity supports solvers pathsolverjl nlsolvejl references nocedal jorge wright stephen numerical optimization edition springer minpack jorge burt garbow ken hillstrom argonne national laboratory miranda mario fackler paul applied computational economics finance mit press