baobzijl wrapper library baobzi interpolator library tldr baobzi takes function represents adatively tree polynomial interpolants fast accurate basically allows precompute heavy function approximation function magnitude faster operations d functions typically million evaluations depending hardware functions evaluate faster fancy implementations functions log magnitude faster special function evaluations unfortunately baobzi pure julia implementation core library written bindings public api baobzi call function approximate limitations julia due mutability type constraints basically callback function callable double myfuncdouble generate function object language call julia probably shown example functions fit signature identical testfunc simple d example function import baobzi function testfunc xp ptrfloat cdouble unsafeload xp unsafeload xp return center center function rectangular domain hl half widths functions rectangular domain testpoint evaluate dim independent variables function polynomial fit tol e requested precision fit outputfile simpledbaobzi store file splitmultieval split evaluation steps mild performance implications fit function funcapprox baobzi init testfunc dim center hl tol print stats fit procedure baobzi stats funcapprox compare result println baobzi eval funcapprox testpoint testfunc pointer testpoint save function delete baobzi save funcapprox outputfile baobzi free funcapprox restore function compare funcapprox baobzi restore outputfile println baobzi eval funcapprox testpoint testfunc pointer testpoint evaluate function domain rand float baobzi evalmulti funcapprox