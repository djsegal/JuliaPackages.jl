typeparams key feature julia type annotations usually achieve optimal performance example foo runs equally fast regardless foo defined foo fooint float unfortunately exception rule writing struct foo instead struct foo int float discard compiletime type information hence incur significant performance penalty common workaround introduce type parameter field struct foo recovers flexibility optional typing preserves performance compiletime types keeping fields type parameters sync laborious usage package eliminates fuss generic type parameters introducing macro typeparams allows insert type parameters using simple syntax typeparams struct foo supports expressing type constraints zero syntax overhead typeparams struct foo integer real finally typeparams plays features julia language explicit type parameters typeparams struct myvector abstractvector data abstractvector base size myvector size data base getindex myvector int data julia myvector element myvectorint vectorint kwdef macro base kwdef typeparams struct foo julia foo foo int float missing features typeparams currently play inner constructors example following currently typeparams struct foo foo prs welcome acknowledgements package heavily inspired autoparametersjl