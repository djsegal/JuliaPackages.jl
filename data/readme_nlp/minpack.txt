minpack julia interface cminpack rewrite minpack software originally fortran usage usage simple main api methods fsolve function x vectorfloat int length x tol float e showtrace bool false tracing bool false method symbol hybr iterations int typemax int io io stdout kwargs fsolve function function x vectorfloat int length x tol float e showtrace bool false tracing bool false method symbol hybr iterations int typemax int io io stdout kwargs functions accept current call argument fill argument function values jacobian matrix repsectively jacobian passed approximated using finite differences example julia using minpack julia function fvec fvec fvec sin exp fvec julia function fjac fjac fjac fjac exp cos exp fjac exp cos exp fjac generic function methods julia resjac fsolve ones results nonlinear solver algorithm algorithm modified powell user jac expert starting zero e inf norm residuals convergence true message algorithm estimates relative error solution tol total time function calls jacobian calls df dx julia resnojac fsolve ones results nonlinear solver algorithm algorithm modified powell starting zero e inf norm residuals convergence true message algorithm estimates relative error solution tol total time function calls jacobian calls df dx additional available keyword arguments captured kwargs vary method keyword argument method value depending method fsolve calling available methods version pased hybr modified version powell algorithm minpack routine hybrd lm levenbergmarquardt minpack routine lmdif lmdif advanced levenbergmarquardt options available kwargs minpack routine lmdif information hybrd advacned modified version powell algorithm options available kwargs minpack routine hybrd information available methods version passed hybr advacned modified version powell algorithm user supplied jacobian additional arguments available via kwargs minpack routine hybrj information lm advanced levenbergmarquardt user supplied jacobian additional arguments available via kwargs minpack routine lmder inform