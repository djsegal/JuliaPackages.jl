cxxinterfacejl alternative cxxjl cxxwrapjl libraries cxxjl people write code julia whereas cxxwrapjl people write julia code design cxxinterfacejl simpler cxxjl cxxwrapjl wrapper functions written julia generate respective wrapper functions via string manipulation called via ccall string manipulation somewhat tedious advantage supported standard independent compiler julia version current version cxxinterfacejl continue versions julia undue maintenance overhead package supports fortran rust external languages example assume library addintegers provides function namespace ai int addint int int wrap julia look follows using cxxinterface using addintegersjll cxxprelude addintegerscxx include addintegershxx eval cxxfunction fnname addint addint libaddintegers fnresult cint int fnarg cint int fnarg cint int return aiaddint prelude defines name file hold generated code statements beginning file arguments cxxfunction pairs defining happens julia using symbols julia types happens using strings detail wrapper function name addint julia function argument called julia type cint julia int similarly function argument wrapper code string module loaded generate julia function function addint cint cint return ccall addint libaddintegers cint cint cint generate respective code string include addintegershxx extern int addint int int return aiaddint code written file compiled compiler ideally happen binarybuilder build script compiles generated code multiple architecture jll package presumably package called addintegersjll generating code write generated code code using addintegers addintegers writecxxcode convenience generated code contains generated julia code comments code helps understand generated code package stljl script depsbuildjl modifying input output types input types wrapper function result processed julia passed wrapper function example julia addint function expects arguments type cint inconvenient prefer accept arguments type integer automatically converted cint similarly convenient convert result type cint int code generated automatically eval cxxfunction fnname addint aiaddint libaddintegers fnresult cint int int expr convert int expr fnarg cint int integer identity fnarg cint int integer identity return addint extra arguments fnresult fnarg describe final output type initial input type respectively conversion function conversion function acts julia expressions julia code generated function applied run time generated julia function function addint integer integer res ccall addint libaddintegers cint cint cint convert cint convert cint return convert int res generated code unaffected generic functions generate functions run time means types compile time define generic parameterized wrapper function generate series wrapper functions loop types set int int int int types ct cxxtype type nt cxxname ct generate identifier ct eval cxxfunction fnname add add ct libaddintegers fnresult ct fnarg ct fnarg ct return generates julia function add methods integer type note single julia function multiple methods argument types generated wrapper functions linkage overloading type prefix wrapper function name realworld examples package stljl wraps stl types stdmap stdsharedptr stdvector via cxxinterfacejl