appleacceleratejl provides julia interface macos accelerate framework moment package provides access accelerate blas lapack using libblastrampoline framework interface arrayoriented functions provide vectorised form common mathematical functions performance significantly using standard libm functions appear reduced accuracy os requirements macos required run appleacceleratejl especially libblastrampoline forwarding macos versions mileage vary supported functions following functions supported rounding ceil floor trunc round logarithmic exp exp expm log logp log log trigonometric sin sinpi cos cospi tan tanpi asin acos atan atan cis hyperbolic sinh cosh tanh asinh acosh atanh convolution conv xcorr sqrt copysign exponent abs rem note slight differences behaviour base domainerror raised instead nan values returned round breaks ties values fractional choosing nearest value exponent returns floating value type instead int additional functions available rec reciprocal rsqrt reciprocal squareroot sqrt pow power base fdiv divide base sincos returns sin cos example accelerate blas lapack simply load library julia peakflops e julia using appleaccelerate julia peakflops e avoid naming conflicts base methods exported accessed via namespace using appleaccelerate using benchmarktools randn btime exp standard libm function btime appleaccelerate exp accelerate arrayoriented function replacebase macro replaces relevant base methods directly btime sin standard libm function appleaccelerate replacebase sin cos tan btime sin appleaccelerate methods vectorised operations randn fill btime appleaccelerate replacebase parenthesised form infix ops btime output arrays specified arguments functions suffixed zeros float btime appleaccelerate exp warning dimension checks performed functions ensure input output arrays length operations performed specifying output array input array appleaccelerateexp mentioned accelerate docs comment authors indicates saf