lsqfitjl lsqfit package library provides basic squares fitting pure julia mit license basic functionality originally optimjl separated library time lsqfit utilizes levenbergmarquardt algorithm linear fitting basic usage toplevel methods curvefit marginerror useful fitting data linear models following example define model function using lsqfit parameter exponential model array independent variables array model parameters model accept data set argument means write model function applies model dataset apply calculations rows model exp function applies observation function exp dataset denoting observation row simulate data chose true parameters example data xdata independent variables ydata dependent variable xdata range stop length ydata model xdata randn length xdata p ready fit model fit curvefit model xdata ydata p fit composite type lsqfitresult values doffit degrees freedom coeffit fit parameters fitresid residuals vector residuals fitjacobian estimated jacobian solution lb ub inf pbounds start inside bounds optional upper lower bounds free parameters passed argument bounded unbouded variables mixed setting inf lower bounds enforced variable similarly inf fitbounds curvefit model xdata ydata pbounds lower lb upper ub estimate errors fit parameters standard error parameter sigma stderror fit margin error confidence interval parameter significance level marginoferror marginerror fit confidenceinter confidenceinterval fit finite difference method approximate jacobian alternatively function calculates exactly supplied instead function jacobianmodel array float undef length length exp dmodeldp views dmodeldp thanks views allocate memory slice fit curvefit model jacobianmodel xdata ydata p multivariate regression inherently variable entering specify columns appropriately model specification using lsqfit collect range stop length collect range stop length xy hcat function twodgaussian xy amplitude xo yo sigmax sigmay theta offset cos theta sigmax sin theta sigmay sin theta sigmax sin theta sigmay sin theta sigmax cos theta sigmay creating linear meshgrid xy xy xy offset amplitude exp xo xo yo yo return p float data twodgaussian xy p noisy data datanoisy data randn size data fit lsqfit curvefit twodgaussian xy datanoisy p evaluating jacobian using automatic differentiation default calculate jacobian using central finite differences scheme jacobian function provided default central differences accurate forward finite differences expense computational cost switch forward finite differences minpack example specifying fit curvefit model xdata ydata p autodiff finiteforward forward mode automatic differentiation implemented forwarddiffjl using autodiffforwarddiff keyword fit curvefit model xdata ydata p autodiff forwarddiff careful manually restrict types code float forwarddiffjl passing special type functions auto magically calculate value gradient evaluation model jacobian model model jacobian pertinent feature curvefit slow consumes lot memory modelinplace exp function jacobianinplace arrayfloat exp views fit curvefit modelinplace jacobianinplace xdata ydata p inplace true geodesic acceleration package implements optional geodesic acceleration outlined paper enable specify function computing directional derivative function fitted avv parameter preferable set lambda minstepquality curvefit model xdata ydata p avv avvlambda minstepquality avv following form array parameters direction direction dirderiv output vector function necessarily function avv dirderiv v v length xdata compute elements hessian matrix h h xdata exp xdata h h h xdata exp xdata manually compute hv process cumbersome allocating temporary matrices quickly expensive render geodesic acceleration terribly inefficient dirderiv h v h v v h v typically model fit outputs yyym input data xdata avv output array size element hixdata hi hessian matrix output yi respect parameter vector depending size dataset complexity model desired tolerance fit result worthwhile automatic differentiation via zygotejl forwarddiffjl determine directional derivative potentially efficient calculating directional derivative manually additional information lead accurate results example implementation using linearalgebra zygote function avv dirderiv length xdata dirderiv transpose zygote hessian model xdata existing functionality fit curvefitmodel jacobian p kwargs model function takes arguments params jacobian optional function returns jacobian matrix model independent variable dependent variable constrains model optional weight applied residual vector length size empty matrix inverse covariance matrix p initial guess model parameters kwargs tuning parameters fitting passed levenbergmarquardt maxiter showtrace lower upper bounds fit composite type results lsqfitresult performs fit using linear iteration minimize weighted residual model dependent variable data weight neglected example perform unweighted fit unweighted fit numerical equivalent unweighted error estimates handled weighted error estimates weights uniform sigma stderrorfit atol rtol fit result curvefit lsqfitresult type atol absolute tolerance negativity check rtol relative tolerance negativity check returns error uncertainty parameter fit model scaled associated degrees freedom please note local quantity calculated jacobian model evaluated fit result parameter exploration weights provided fits variance estimated mean squared error fits weights provided weights assumed inverse variances covariance matrix errors estimated based jacobian assuming linearization model minimum squared error marginoferror marginerrorfit alpha atol rtol fit result curvefit lsqfitresult type alpha significance level atol absolute tolerance negativity check rtol relative tolerance negativity check returns product standard error critical value parameter alpha significance level confidenceinterval confidenceintervalfit alpha atol rtol fit result curvefit lsqfitresult type alpha significance level atol absolute tolerance negativity check rtol relative tolerance negativity check returns confidence interval parameter alpha significance level covar estimatecovarfit fit result curvefit lsqfitresult type covar parameter covariance matrix calculated jacobian model fit using weights specified inverse covariance observations returns parameter covariance matrix evaluated fit