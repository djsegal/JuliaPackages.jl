raytracingweekend adapted ray tracing weekend peter shirley run options plutoraytracingweekendjl plutojl notebook suited learning alongside re julia beginner quick interactive experimentation selfcontained version matches peter shirley book raytracing weekend adapting julia tips start differs version module srcprotoprotojl short script runs various tests records historical timings ryzen pc suited benchmarking run interactively vscode f julia start repl activate raytracingweekend srcprotoprotojl press shiftenter run lines plots implementation details julia code complicated required optimized execution speed code simplicity plan support running gpu match optimized simd cudarocm performance finally refrained implementing level optimizations bvhs smarter sampling fair comparison implementation using parameterized floating types thanks woclass allows switch float float calculations makes code somewhat complex using vec vec color tried minimize memory allocations allocation stack instead heap using staticarrays plan preallocate rays tensors support parallelism exhausted intrusive lowlevel optimizations fair simdoptimized implementation extent re performance details optimizations please participate discussion git history comments protojl changes occasionally merge pluto notebook competitive targets gpsnoopy ispc vulkan implementations perf tests run ryzen overclocked ubuntu gpsnoopy implementation using gcc modified code run xx instead xx compiled book stdz wall wextra o ffastmath marchznver maincpp lpthread using gcc version ubuntu ubuntu notice ffastmath tried julia version marchznver allows gcc optimize specifically zen cpu architecture physical threads cpu gcc reports threads cpu temperature hovered degrees celsius warm alarming examined code looks using algorithms bvh checked threaded model similar idea gcc tries vectorize code result time book ms s gpsnoopy ispc implementation iiuc ispc customized version specialized simd gpgpu modified code run xx instead xx compiled buildlinuxsh script using ispcvlinux stable compiler version threads fans pushed max temperature hovered degrees celsius idea run temperature feel safer liquidcooled heat sink brief look ispc code guess performance explained optimized memory layout course language compiler focused simd result time book ms impressive speed julia version protojl method protojl uncomment time renderscenerandomspheres elemtypeelemtype tcam run using julia project threads mathmodefast optimize cputargetznver srcprotojl notes following arguments noticeable difference mathmodefast optimize cputargetznver add fastmath lines code try optimize simdloopvectorization float compared versions float float julia implementation currently slower tried running julia profiler probably lowhanging fruits left require algorithmic change version bit mersenne iiuc bit faster compute random sota xoroshiroplus julia results threads ms threads ms s faster equivalent gcc version detailed timings starting original superslow version optimization hours allocations tib gc time image looked weird blurry removing remaining color vec replacing svector hours allocations gib gc time using convertfloat instead myfloat specify return value optionhitrecord hit initialize unnecessary elements hitrecord hours allocations gib gc time worse probably writing lot stack replace myfloat float lots optimizations including inline lots stuff allocations gib gc time hour woclass randfloat avoid floats expected provide speed woclass alias instead struct const hittablelist vectorhittable woclass vec float speed allocations gib gc time hours using single thread threads minutes allocations gib gc time using max bounces looked fine except negatively scaled sphere switching max bounces match version decreased performance allocations gib gc time using inbounds simd lowlevel functions allocations gib gc time note difference due randomness adapt christfoster basegetproperty inline inbounds expect speed eliminate halfpixel offset expect speed fixed thread rngs fixed seeds expecting noticeable change speed using threads ms allocations gib gc time speed currently gc memorybound using threads ms allocations gib gc time adapting julia notes useful re julia start notebook pluto installation usage using web interface plutoraytracingweekendjl file time mins download packages evaluate cells please note julia coding conventions respected project easier follow code tips starting julia consult references type unicode character julia julia help julia cutpaste character particular character typed using vec pressing tab unlike implementation implement chapter separately except instead focused plutojl implementation able run examples book minimal duplication code bother implementing ppm file format support plutojl vscode display images directly saving disk julia row column inverted loops iterate columns code variable names saving final pixels iiuc code coordinate system writing images julia image matrices ny instead row plutojl supports cellscode defined arbitrary tried code lowlevel level practical especially plutojl support moving cell time normalize ray direction instead optionally functions easier reason extra cost probably marginal const nohit hitrecordfloat indicate hit speed probably bad idea references ray tracing weekend peter shirley chrisrackauckhas awesome mit course parallel computing scientific machine learning watched lessons performance optimization learnt lot highly recommend julia raytracers cshenton julia implementation useful starting developed roughly similar tried optimize sophisticated raytracer based excellent book physically based rendering theory implementation example based peter shirley books special thanks woclass recommended major cleanups speedups learnt lot code chrisfoster lots suggestions clean speed code steps shortterm investigate float perf degradation fixed doubled allocations update plutoraytracingweekendjl share twitter etc break code multiple files replace const nohit hitrecordfloat distance check typeindependent rerun float float perf tests read simd libraries try figure approach ll welcome suggestion save image png continue watching mit course term implement rest peter shirley books especially bvhs gpu cuda rocm probably integrate materials hit system concrete tight inner loops idea chrisfoster remaining allocations appear expensive hitrecord stack probably preallocate ray batches don called litterature simplify gpu probably simd implementation implement versions hit scatter etc operate entire tensor efficiently parallelizable simd gpu fieldvector structofarrays vulkan rt interface port failed attempts using basegetproperty vec instead vec meant convenient function somevec somecolor caused allocations call huge bottleneck todo replace lens import basegetproperty function basegetpropertyvecsvector symsymbol todo dictionary maps symbols indices dict sym return vec elseif sym return vec elseif sym return vec else return getfieldvec sym negatively scaled sphere bounces previously bounces max ray path negatively scaled sphere black halo inside increasing bounce count resolved issu