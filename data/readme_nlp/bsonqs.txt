bsonqs fork bsonjl performance loading composite data types particular qs stands quick structs bsonqs appears x faster bson read benchmarks performance section info usage usage original package able drop replacement except alias package name using bsonqs const bson bsonqs currently load function support exotic data types loadcompat instead forms parse function parse unionio string parse unionio string ctx parsectx mmap false provides performance circumstances compatible noted load args parse parsectx args parse loadcompat linux atleast set mmaptrue perfomance loading file partial loading finally experimental interface lazily loading bson document time allows specify type document import mmap afilebson fio io iobuffer mmap mmap fio doc document io defaultmembertype doc parsing defaultmembertype val doc amemberkey doc parsing val doc amemberkey iterate parsing defaultmembertype doc load entire document dict using defaultmembertype dict doc lazy partial loading useful document word partial calling document scan input stream build index considered lazy note automatic caching parsed results specifying concrete type allows parsing skipped performance hints library repetitive datasets concrete types try concrete types structs julia official docs library makes heavy generated type specific functions compilation time original means theory highly irregular datasets original library faster call load dataset contains uncached data types generic bson documents julia type data library faster platform supports mmap faster anyway allows avoid unecessary copies allocations comparison original library bsonqs mmap common dataset pass julia time bson load vggbson allocations gib gc time julia time bsonqs load vggbson allocations gib gc time julia time bsonqs load vggbson mmap true allocations mib gc time performance create benchmark data finally note library mainly serialization code original write performance time writing original bug makes worse write performance pleas