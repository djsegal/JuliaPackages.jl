saferintegers integer types ignore arithmetic overflows underflows copyright jeffrey sarnoff available mit license safer using default int uint types allows overflow underflow errors occur silently notice incorrect values propagate errors difficult recognize package exports safer versions types check overflow underflow basic arithmetic functions processing stop message event overflow underflow machine overhead relative built integer types x background integer overflow occurs integer type increased beyond maximum value integer underflow occurs integer type decreased minimum value signed unsigned values subject overflow underflow julia rollover using int uint types typemax int int typemin int int typemax uint uint typemin uint typemin uint uint typemax uint security implications integer overflow situations secure biohazard int int loop execute highlights package exist require integer calculations secure behaved unsurprising clients expect packageappproduct calculates care correctness software system health assets depends prefer publish research results free error integers package offer saferintegers cleanly alerts otherwise silent package designed easy written performant sorts exported types stable typeofsafeint safeint using saferintegers preclude insecure systems breached test code integer safety saferintegers includejoinpathpackagetestdirectory packagetestsjl includes type modified packagetestsjl current environment integer types packagetestsjl safeinteger types run basic guide safer integers computations using explict digit sequences inside safe integer constructors safeint safeuintxa similarly bitsizenamed versions safeint safeint safeint safeuint safeuint int uint safeint safeuint similarly bitsizenamed versions safeint safeuint arithmetic operators div rem fld mod fld mod overflow underflow aware int uint types fail simple arithmetic continue carrying incorrectness forward validity values obtained difficult ascertain calculations proceed incident safeints operate ints calculation encouter overflow underflow alerted calculation proceed whirl package pkgaddsaferintegers package using saferintegers functions check overflowunderflow automatically abs neg div fld fld cld rem mod mod divrem fldmod fldmod exported types constructors converters safeint safeint safeint safeint safeint safeuint safeuint safeuint safeuint safeuint safesigned safeunsigned safeinteger saferational check overflow multiplied usual int uint types otherwise unsurprising type definitions abstract type safeunsigned unsigned abstract type safesigned signed const safeinteger unionsafeunsigned safesigned thanks mark kittisopikul pr timholy design ratiosjl conversions signedsafesigned returns signed built integer bitwidth unsignedsafeunsigned returns unsigned built integer bitwidth integersafeinteger returns built integer bitwidth signed unsigned safesignedsigned returns safe signed integer bitwidth safeunsignedunsigned returns safe unsigned integer bitwidth safeintegerinteger returns safe integer bitwidth signed unsigned matches supports signbit sign abs abs countones countzeros leadingzeros trailingzeros leadingones trailingones ndigitsz isless isequal div fld fld cld rem mod mod divrem fldmod fldmod zero typemin typemax widen test code integer safety test snippets julia saferintegers begin int safeint julia typeof ans safeint safeint safeint test source file julia cd source file directory julia saferintegers include filename jl benchmarking machine julia vdev using saferintegers using benchmarktools benchmarktools defaultparameters timetolerance noinline function test result true break result return result hundredths round digits sa sb sc sd safeint hundredths belapsed test sa sb sc sd belapsed test hundredths belapsed test sa sb sc sd belapsed test hundredths belapsed test div sa sb sc sd belapsed test div technical notes code updated ago exported abstract types safeinteger safesigned safeunsigned defined originally intended julia advancement active pursuit consistant type abstractions easy safeunsigned unsigned safesigned signed safeinteger integer clean approach holds exported concrete types safeuint safeunsigned unsigned integer real safeint safesigned signed integer real deal benchmarking evaluate appropriateness using saferintegers protect calculations interpolationsjl integer overflow innocent looking linear interpolation warning results compelling encouraging wider application using safeints ratios requires time int ratios merely extra minute ratiospull details formal distinction creation abstract types inheritance hierarchy pervades concrete types cleaner makes reasoning shallow extension abstract inheritance paths simpler announcement result earlier internal limitations julia type patterning embedded unsigned signed integer types developed implemented forced defining abstract types abstract type safeinteger integer abstract type safesigned safeinteger precluded natural pattern type abstraction formed instantiation logic safeunsigned unsigned additional changes bugs limited substantive subdomains found careful users fixed floatsafeinteger mirror floatinteger crosspackage support implementation improvements credits derives roundingintegersjl saferintegers macro machinery heavily informed changeprecisionjl