jai julia accelerator interfaces jai gpu cpu programming interface julia programmers jai focuses reusing fortran application codes codes include directive based gpu programming openacc openmp target package phase development subset mentioned features developed please package risk package features creates shared library preexisting fortran code generates arguments ccall function created shared library simplifies user interface using julia macros takes advantages timejit compilations installation pkg add accelinterfaces quickstart following julia code calculates vector sum main algorithm written fortran using accelinterfaces kerneltext fortran integer lbound ubound fortranopenacc integer acc parallel loop lbound ubound acc parallel loop const const fill const fill const fill const answer fill jaccel myaccel framework fortran gfortran fpic shared jkernel mykernel myaccel kerneltext jlaunch mykernel output assert answer kerneltext variable contains fortran loop actually calculates vector sum versions loop fortran fortranopenacc users select using framework clause jaccel jai directive explained jaccel creates jai accelerator context identify context literal name myaccel framework clause specifies accelerationfortran example user provide jai actual compiler command line generate shared library command line include compiler compiler flags except flag name output file path input source file jkernel creates jai kernel context identify kernel context literal name mykernel clause kernel program written fortran user provide jai kernel program julia string external file path jlaunch syntax similar function calls pair parentheses note space jlaunch mykernel argument name kernel context variable names semicolon input variables kernel output keyword argument specifies names output variables julia tuple please note simple variable names inputs outputs kernel jlaunch example write jlaunchmykernel func outputvector gpu add additional jai directives jenterdata jexitdata jdecel fill jaccel framework fortranopenacc ftn accnoomp fpic shared jkernel mykernel kerneltext jenterdata allocate updateto jlaunch mykernel output jexitdata updatefrom deallocate jdecel assert answer similar fortran example jaccel directive create jai accelerator context example cray compiler wrapper compile fortran program openacc modify compile command fortranopenacc framework clause jai choose content fortranopenacc instead fortran kerneltext text please note add literal name jai accelerator context specifying name jai accelerator context jai creates default jai accelerator name jaiacceldefault skip specifying default name following jai directives shown example jkernel directive creates jai kernel context literal name mykernel allocate clause jenterdata allocates device memory variables updateto clause copies content allocated corresponding device variables jexitdata users copy data device using updatefrom clause deallocate clause deallocates device memory allocated jdecel directive notifies jai user current accelerator context anymore notice jai usage fortranopenacc framework similarity fortran framework usage shown code fortranopenacc supporting fortranopenacc fortran switch jaccel proper information framework compile shown fortranopenacc jaccel myaccel framework fortranopenacc compile ftn accnoomp fpic shared fortran jaccel myaccel framework fortran compile gfortran fpic shared fortram framework jenterdata jexitdata silently exit user maintain jai code supporting multiple acceleration frameworks questions suggestions usage questions suggestions posted issu