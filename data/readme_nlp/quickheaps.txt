versatile binary heaps priority queues julia quickheaps julia package providing versatile binary heaps priority queues data structures flexible significantly faster provided datastructures installation easiest install quickheaps julia package manager using pkg pkg add quickheaps documentation documentation available versions quickheaps release development version speed strengthen sorting algorithms sorting algorithms julia powerful issues sorting algorithms involve lots comparisons faster nan arrays sort assume risk ignored exported methods useful safely called short note bout dealing speed sorting sorting algorithms julia rely check according specified letters lt stands julia sorting methods keyword specify default baseforward singleton type baseforwardordering usual choice basereverse short sorting using following definitions const forward forwardordering const reverse reverseordering lt forwardordering isless lt reverseordering lt fwd isless eventually called operator integers isless execution time concerned floating values isless takes care nan involves overheads strongly impact execution time sorting algorithms simple means ignore nan sorting consists defining types extend method pretty simple using base reverseordering struct fastforwardordering const fastforward fastforwardordering const fastreverse reverseordering fastforward import base lt lt fastforwardordering keyword fastforward fastreverse calls sort methods benefit speed factor free trick implemented datastructures package datastructuresfasterforward datastructuresfasterreverse checking array nan checked linear time arrays floating values following method function hasnans abstractarrayabstractfloat flag false inbounds simd eachindex flag isnan return flag shortcircuit purposely avoided exploit simd optimization rationale arrays nan expect entire array checked simple benchmark follows using benchmarktools rand btime hasnans ns allocations bytes shorter time takes heapify array test applied arrays floating values choose fastslow change behavior sorting methods significantly reduce execution time time integervalued arrays takes time check nan hasnans abstractarrayinteger false additional speed factor achievable proper inline inbounds propagateinbounds macros code implementing sorting algorithms requires modify existing code quickheaps application binary heaps illustration discussion output benchmark ran julia project test benchmarks jl julia amd ryzen threadripper x core processor timings datastructures methods float datastructuresheapify baseforward s allocations bytes datastructuresheapify basereverse s allocations bytes datastructuresheapify datastructuresfasterforward s allocations bytes datastructuresheapify datastructuresfasterreverse s allocations bytes datastructuresheapify quickheapsfastmin s allocations bytes datastructuresheapify quickheapsfastmax s allocations bytes timings quickheaps methods float quickheapsheapify baseforward s allocations bytes quickheapsheapify basereverse s allocations bytes quickheapsheapify datastructuresfasterforward s allocations bytes quickheapsheapify datastructuresfasterreverse s allocations bytes quickheapsheapify quickheapsfastmin s allocations bytes quickheapsheapify quickheapsfastmax s allocations bytes timings datastructures methods float datastructuresisheap baseforward s allocations bytes datastructuresisheap basereverse s allocations bytes datastructuresisheap datastructuresfasterforward ns allocations bytes datastructuresisheap datastructuresfasterreverse ns allocations bytes datastructuresisheap quickheapsfastmin ns allocations bytes datastructuresisheap quickheapsfastmax ns allocations bytes timings quickheaps methods float quickheapsisheap baseforward s allocations bytes quickheapsisheap basereverse s allocations bytes quickheapsisheap datastructuresfasterforward ns allocations bytes quickheapsisheap datastructuresfasterreverse ns allocations bytes quickheapsisheap quickheapsfastmin ns allocations bytes quickheapsisheap quickheapsfastmax ns allocations bytes timings gain speed heapify using instead isless factor binary heap implemented datastructures factor binary heap implemented quickheaps timings heapify quickheaps faster datastructures factor standard orderings factor faster ord