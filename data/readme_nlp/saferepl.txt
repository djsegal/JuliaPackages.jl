saferepl saferepl package allows swap repl meaning julia literals particular loading default replace float literals bigfloat int int int literals bigint literal prefixed left unchanged julia using saferepl julia julia sqrt julia typeof int installation package requires julia version depends subpackage swapliterals described requires julia packages registered installed via using pkg pkg add saferepl pkg add swapliterals custom types literals mean specified via safereplswapliterals arguments function correspond float int int bigint passing means transforming literals type symbol interpreted name function applied value argument defaults bits systems int literals transformed int literals single boolean value passed swapliteralsfalse deactivates saferepl swapliteralstrue reactivates previous setting finally swapliterals activates default setting enabled using saferepl equivalent swapliteralsbigstr meaning bigstr examples julia using bitintegers bitfloats julia swapliterals float int int julia log factorial julia sqrt julia using saferintegers doublefloats julia swapliterals doublefloat safeint safeint julia typeof double julia error overflowerror stacktrace julia error overflowerror overflowed type int stacktrace julia using nemo swapliterals fmpz fmpz fmpz julia factorial julia typeof ans typeof fmpz float julia fmpz currently integer error argumenterror invalid index type fmpz julia quote array indices julia swapliterals false typeof typeof swapliterals act line fmpz float julia typeof typeof int float julia swapliterals true julia typeof typeof fmpz float julia swapliterals activate defaults julia typeof typeof bigint bigfloat substitute literals api swapliterals pass list pairs sourcetype converter sourcetype type converter applied example julia swapliterals char string float float uint uint julia f x x julia using strs swapliterals string str julia typeof asciistr notable exceptions symbol bool literals currently converted swapliterals issue feature string macros int uint bigint pass name string macro string instead symbol macro directly interpret example julia swapliterals int intstr bigint intstr julia typeof int julia digits course input anymore error loaderror overflowerror overflow parsing experimental feature string macro passed interpret float input converted string passed macro julia swapliterals julia e julia swapliterals float bigstr julia julia true julia false julia e julia using decfp swapliterals float dstr julia adventurous literals substituted arrays tuples vector syntax specified respectively vect tuple braces vectors entered delimiters elements separated newline instead specified bracescat example julia swapliterals vect set julia setint elements julia set julia element arrayint question braces syntax valid normaljulia syntax addition previously mentioned converter types symbol string pass function transform julia ast julia makeset ex expr call set expr vect ex args julia swapliterals braces makeset bracescat makeset julia setint elements julia setint elements types stored directly ast using symbol function roughly equivalent using quoting quoting similarly equivalent example julia swapliterals int float julia julia julia swapliterals int float julia julia float float note using functions experimental feature natural question arising pretty quickly quoting interacts quoting contexts particular benchmarktools scalarsubstitutions issue usually quote literal benchmarking bit subtle substituting container literals julia swapliterals false julia btime sum ns allocation bytes julia btime sum ns allocations bytes julia btime sum set ns allocations bytes julia swapliterals vect makeset julia btime sum vector ns allocation bytes julia btime sum benchmarktoolsquoting real ns allocations bytes julia btime sum begin benchmarktoolsquoting real set ns allocations bytes julia btime sum ns allocations bytes using symbol versus function subtle impact benchmarking julia swapliterals false julia btime ns allocations bytes julia btime ns allocations bytes julia swapliterals int julia julia btime ns allocations bytes julia swapliterals int julia julia dump expr head symbol call args array symbol bigint alloc int size int ptruint x bigint alloc int size int ptruint xda julia btime ns allocations bytes finally experimental feature expressions involving transformed mechanism example julia swapliterals ex expr symbol uppercase string ex args ex args julia equivalent source code via swapliterals macro swapliterals package roughly api swapliterals function using swapliterals swapliterals begin typeof tuplebigfloatbigint swapliterals shorter version defaults note try repl saferepl active typeof tuplebigfloatbigint try swapliteralsfalse deactivate saferepl pair api available possibility pass converters literal array clarity swapliterals int swapliterals int int float begin typeof tuplebigfloatbigintbigint note passing global function converter transform ast cf previous section fail visual indicator saferepl active following startupjl file modify color prompt modify text prompt tweak using repl atreplinit repl repl interface repl setupinterface repl juliamode repl interface modes oldprefix juliamode promptprefix juliamode promptprefix function isdefined main saferepl saferepl isactive base textcolors yellow else oldprefix oldprompt juliamode prompt juliamode prompt function isdefined main saferepl saferepl isactive safejulia else oldprompt switching easily forth set keybinding activate deactivate saferepl ctrl followed ctrl putting following startupjl using repl const mykeys dict function swapliterals saferepl isactive repl lineedit refreshline atreplinit repl repl interface repl setupinterface repl extrareplkeymap mykeys cf manual details note replsetupinterface called set keybinding custom prompt shown section atreplinit calls combined atreplinit repl repl interface repl setupinterface repl extrareplkeymap mykeys juliamode repl interface modes modify juliamode caveats package tested bits architectures risks guarantee bits architectures using types default repl reveal missing methods types render repl usable ideal opportunity ticketissues corresponding projects meantime mitigated using bigint bigfloat literals instead int float function calls expensive timewise memorywise saferepl offers trade default julia repl panacea float literals stored float julia ast meaning information lost julia using saferepl swapliterals float julia print print julia equivalent julia earlier pass bigstr float converter try mitigate currently default alternative produce results bigstr call rationalize converting float experimental option saferepl implicitly insert calls rationalize enabled calling floatsuserationalizetrue julia bigfloat bigfloat rationalize julia swapliterals float bigfloat julia julia swapliterals float saferepl floatsuserationalize true julia julia julia swapliterals float bigstr rationalize julia safe totally user julia users disappointed encounter unsafe arithmetic operations due integer overflow example safe saferepl understood tonguecheek applies default setting overflows disappear package julia unsafe soft example julia swapliterals int int julia alternatives julia easiest alternative probably custom repl mode replmakerjl example set lines swapliterals backend replmaker mode validjulia function defined readme julia literalsswapper swapliterals literalsswapper int int float bigstr julia function bigparse expr meta parse literalsswapper expr julia initrepl bigparse prompttext bigjulia promptcolor red startkey modename mode validinputchecker validjulia swapliteralsliteralsswapper function takes list pairs meaning swapliterals note currently public api swapliterals couple packages macro similar swapliterals changeprecisionjl changeprecision macro reinterprets floating literals floatsproducing functions rand saferintegersjl saferintegers macro wraps integers using saferintegers typ