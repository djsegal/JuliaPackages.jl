genericarpackjl purejulia translation arpack library generic realvalued types julia dependency linearalgebrajl standard library includes selfcontained blas routines generic tools requires currently symmetric arpack solver implemented using genericarpack using doublefloats symmetricspranddouble julia eigs ncv genericarpackarpackeigen eigenspace lm values element vectordouble library supports mixed precision carefully julia eigsfloat float ncv float vectors float arnoldi info double values element vectorfloat library precision types double float okay notes using precision types fairly trivial julia genericarpackjl specialized hermitian eigensolver limited testing useful complexvalued svd using symmetric solver arpackjl packages arpackjl krylovkitjl arnoldimethodjl rationale compiled arpack library wrapped julia time translation library julia rationale available minimal dependencies fortran compiler platform multithread safe fortran arpack code segfault called multiple threads static variables allocated thread course downside moment symmetric hermitian translated require fair amount dedicated effort prototyped path key functionality arpack tremendous amount functionality symmetric julia magic hermitian solvers implemented list functionality testing real symmetric generalized symmetric shift invert mixed precision complex hermitian generalized symmetric shift invert mixed precision real complex svd via normal equations mixed precision singular subspace estimation details functionality arpack symmetric eigensolver functionality ported entirety symmetric eigensolver status information postbeta edge beta edges appear alpha limited testing simple probably prealpha limited virtually testing issues coded idea code functionality types status notes simple real symmetric eigenvalues float postbeta bitwise matches arpackjll generalized real symmetric eigenvalues float beta bitwise matches arpackjll singular value decomposition float beta normal equations sorry gene simple shiftinvert symmetric eigenvalues float prealpha tested generalized shiftinvert symmetric eigenvalues float prealpha tested generalized buckle symmetric eigenvalues float prealpha tested generalized cayley symmetric eigenvalues float prealpha tested complex simple complex hermitian eigenvalues complexf alpha specialized solver arpackjl generalized complex hermitian eigenvalues complexf alpha complex singular value decomposition complexf alpha precision simple real symmetric eigenvalues double floatx etc alpha specialized solver arpackjl generalized real symmetric eigenvalues double floatx etc alpha singular value decomposition double floatx etc alpha mixed type previous allows mixed types alpha specialized solver arpackjl exotic features usercomputed shifts coded shift invert buckling cayley complexf float coded shift invert buckling cayley precision coded using precision types genericarpackjl taxing extensive floating thresholds sometimes perfectly supported auxilary packages quadmathjl directly modification quadmathjl note operations quadmathjl allocate whereas libraries instance genericmatvecmul matrix float allocate calls doublefloatsjl using double types x faster giving constants fix using doublefloats genericarpackfixdoublefloats executed run macroexpand genericarpackfixdoublefloats defines linearalgebrafloatmin maxit eigenvalue computation multifloatsjl execute using multifloats genericarpackfixmultifloats executed run macroexpand genericarpackfixmultifloats defines eps multifloat type maxit eigenvalue computation intmultifloat history started project learn various ideas goal exercise port doubleprecision arpack symmetric matrices julia including arpack stuff exactly arpack pure julia implementation exactly executing roughly sequence floating operations levels expected compilers compiling code goal juliaize package close fortran able replace calls julia arpacksaupd arpackseupd call fortran library code easier features genericarpackjl implement superior interfaces internal function changes okay arpack various debugging timing stuff julia simplifications function computes single int rewrite return int writing array fortran implement implicitrestarteigensolveretc simple trust arpack understand exactly symmetric arpack solver fortranjulia compiler learn intimate details help teaching document cool stuff arpack bitwise equivalent floating results float types seek understand