methodchainsjl welcome ambitious somewhat experimental fun approach generalize method chaining function composition install add https github com uniment methodchains jl using methodchains mc method chaining macro installed invoke macro single expression mc invoke entire block expressions mc function foo execute line repl run methodchains initrepl worry typing mc time repl vscode ijulia trouble moment vscode repl shiftenter ctrlenter reason recommended repl definitely add startupjl file fun using methodchains methodchains initrepl basic basic idea method chain simple object call sequence functions equivalent none beeswax calling functions sequence equivalent handy chaining syntax chain element dandy myarrlength prop example julia randn maximum sqrt julia step method chain call instead immediately executing called chainlink chainlinks singleinput singleoutput functions defined chaining syntax construct chainlink immediately call takes compile time putting chain suffix position unless function clojurestyle transducer chainlink chances functions compose perfectly situation happens real life handle english language reserve pronoun object local temporary name allow short flexible manipulations spliced larger functions methodchains julia julia julia julia understand run macroexpand julia macroexpand mc constructing chainlink function created julia macroexpand mc methodchainlink symbol begin pretty simple neh keyword defined locally inside chain step takes value expression chain simply executed result overwrites otherwise assumed evaluates function called result assigned map map couple examples julia julia julia julia sum maximum minimum julia sum sqrt julia split parse int join rule call expression leave intact assign actually bit complicated pretty natural straightforward check julia const avg len length sum len chainlink generic function method julia const stdev avg avg sqrt julia avg stdev julia dict keys dictsymbol int entries note expressions separated commas semicolons namely regarding expressions inside curly braces expression assignment leave intact assign allows local variables assigned expression type returns loop executed result assigned note apply function calls println expression callable type comprehension generator tuple vector called simply assigned expression expression simply executed assigned otherwise assumed expression evaluates callable called assigned default behavior sequence expressions delimited semicolons newlines delimit commas calculate multiple values collect tuple desired override default behavior method calling explicit assignment examples examples map join parse int operator precedence julia julia examples pipejl readme getangle block chaining julia filter isodd map sum sqrt example chainjl readme df dropmissing filter id groupby combine age sum example datapipesjl readme julia split map split symbol parse int namedtuple julia hehe eachmatch map parse int join saving chainlink julia chainlink split parse int join julia chainlink transducer chain example presentation processbags mapcatting unbundlepallet filtering isnonfood mapping labelheavy processbags airplane pallets advanced fun chaining syntax allows basic composition basic collections advanced stuff instead normal function call syntax expression re presumed call function otherwise manipulate object default behavior frequently enables concise expressions hints ide autocomplete type object re call function providing natural flow object passes sequence transformations finally calling chain immediately expr expr allocate function compile time minimized shorthand creating locallyscoped variables experimental feature syntax please play offer feedback multichains discussed dimensional chains wherein single object undergoes sequence transformations time express dimensional chains wherein multiple objects spread space undergo transformation chains occasionally interact time syntax similar vector matrix building semicolons newlines separate rows horizontal whitespace separates expressions row newlines delimit rows semicolons optional suggest skip bottom look examples gain motivation syntax return example result chain equivalent notice expression represents chains elements input argument splatted top row values waterfall bottom collected tuple pronoun local chain pronoun time appears row collects previous row tuple example im real imag complex input argument splatted top row row columns splat element row copied bottom chains interacted collected splatted complex constructor question reader copying value preferred behavior copying sequence suppose line line current behavior copy maybe copy behavior fixed feedback welcome presumed line expressions splat previous line expression line individual chains terminate values collected chains commence values discarded causes respective chains return value simple tuple values drop question reader dropping rightmost values preferred behavior drop left values duplicated starting chains collect return value chains instantiated assignment previous values splatted rows return value little funky playing expressions instructive weirdly therapeutic try fun question line happens add deeper discuss understand create multichain method chain multiple columns background chain started background chain local keywords defined keyword acts keyword behavior explore bit expressions expressions called instead assigned single chains variables defined multichain local chain row column starts subchains begin execution background chain paused local variables background chain accessible subchains except course subchain local defined subchains begin local values elements background chain collection nominally tuple subchains exceed length copied chains values multiple chains exist tuple chains values value splatted row slurps values row columns changes object splatted row accessed subchains halted destroying locallydefined variables inventory chains local values collected intuitive consequence behavior multichain access repeatedly remember causes assignment deeper deeper nested tuple julia okay exactly operate re multichain operate run macroexpand mc behavior intuitive unambiguous examples standard deviation variance maximum absolute deviation julia avg len length sum len avg stdev var mad abs avg avg maximum sqrt notice continuation chain line behavior experimental guaranteed future pending final decision character language ve perfect defined operator note desired chain shorter chain adjacent chains package operations inside context chain syntax transformed function needn declared inspect intermediate values midchain julia avg len length sum len avg stdev var mad abs avg avg maximum sqrt fft butterfly mc const toyfft setup vectorcomplexf length return else base exp im butterfly toyfft toyfft xx x x x x vectorcomplexf functioning recursive fft note radix arrays length power performance front fourteen lines ten excluding comments beat monster fftw optimized hilt memoization store twiddle factors cute toy expected definitely dft nave matrix multiplication time resource consumption versus log fft julia mc function dft length exp im dft generic function method julia randn btime toyfft btime dft ns allocations bytes ns allocations bytes julia randn btime toyfft btime dft ns allocations kib ns allocations bytes julia randn btime toyfft btime dft ns allocations kib s allocations kib julia randn btime toyfft btime dft s allocations kib s allocations kib julia randn btime toyfft btime dft s allocations kib s allocations kib julia randn btime toyfft btime dft s allocations kib s allocations kib julia randn btime toyfft btime dft s allocations kib s allocations kib julia randn btime toyfft btime dft s allocations kib ms allocations mib julia randn btime toyfft btime dft s allocations kib ms allocations mib julia randn btime toyfft btime dft s allocations kib ms allocations mib julia randn btime toyfft btime dft s allocations mib ms allocations mib julia randn btime toyfft btime dft s allocations mib ms allocations mib julia randn btime toyfft btime dft ms allocations mib allocations gib julia randn btime toyfft btime dft ms allocations mib allocations gib julia randn btime toyfft btime dft ms allocations mib allocations gib glhf performance considerations defining chainlink chain function created run particular type compiled called chain chain contrast calling directly function created compiled execution occurs minimum time resources save chain global object recommended set constant value const avoid typeinstability causes slower runtime julia chain julia btime chain ns allocations bytes julia const chainconst julia btime chainconst ns allocations bytes namely chain const type runtime boxed return value unknown boxed true global variable performing benchmarks careful ensure correct measured example try julia btime ns allocations bytes element vectorfloat julia julia btime ns allocation bytes element vectorfloat test appears method chain caused extra runtime extra allocation artifact measurement technique easily confirm julia btime ns allocations bytes element vectorfloat julia btime ns allocation bytes element vectorfloat errata debate multithreading implemented nice macros easier call println otherwise ignore expression return value perfectly add subchain splatting rows splatting vertically arranged expressions returns returns unfortunately returns parser tell apart pretty unfortunate mentioned copy values chains drop chains leftaligned aligned etc creates chainlink parses thankfully degenerate surprising readme discuss type assertions statements recurs