look fromfilejl probably patmodulesjl writing modular reusable code julia harder languages access particular file include file include otherwise definitions evaluated multiple times possibly contexts bad start happening file include hard re code previous practice include master global file else implicitly assume whatever include ing included include global file little tracking actually depends hard maintain scale projects larger files patmodulesjl solution documentation installation add patmodules example look example quick example particular notice subpackagejl subpackagejl explicitly depend subpackageutilsjl errors due redefining module utilsjl subpackageutilsjl create modules name clashing examplejl include subpackage folder specifying subpackage descend subsubpackages file run stand implicit assumptions context file include remind include import using julia briefly include copypastes contents file file note considered bad move code stackoverflow post meanwhile import using objects defined module available module means writing reusable code re forced include contents file visible import using access julia afterwards besides step process bit ugly issues mentioned introduction patmodulesjl patmodulesjl introduces macros mainmodule auxmodule write single include folder file name subpackagesubpackagejl denoted main module equivalent initpy python file auxiliary module syntax mainmodule auxmodule name import import begin module contents example auxmodule myamazingmodule anothermodule begin function myamazingfunction anothermodule somefunctionality file top level single mainmodule auxmodule name file example subpackageutilsjl auxmodule utils top level argument tuple strings specifying import auxiliary modules folder names subfolders associated main modules level folder contents files include correct manner import ed automatically example subpackagejl access prefer using automatically mainmodule auxmodule instead exampleuse access subsubfolder subsubsubfolder etc importing subfolder dotted look example examplejl access subpackage try include subsub directly behaviour dangerous result mutually unintelligible copies code compiled recall patmodulesjl sought fix access globally installed module outside project import using usual block auxmodule mainmodule outside contents module normal julia access nonlocal module import using import mypackage note include guaranteed happen automatically provided relevant module imported patmodulesjl level advanced notes lowerlevel interface patmodulesjl makes available macro called module definition created context outer module called save include ing module multiple mainmodule auxmodule rely worry importing multiple times look exampleonce example mirrors main example mainmodule auxmodule converted implemented sensible alternative creating sorts import systems emulate python store modules global sysmodules python route import calls build tree modules linearise topological sort relative specified root entry main advantage approach macro expansion result looks normal julia involve magic metaprogramming involved approaches probably means patmodulesjl able introduced incrementally project surprises future couple nice add add option rename imported add include happen modules enclosing global scopes import mymodule guarantee includ