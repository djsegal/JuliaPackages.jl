micrologging micrologging prototype implementation logging frontend interface ported base julia brought features julia base documentation overview logging frontend julia logging ecosystem start micrologging contains bits pieces logging backends somewhat dormant maintaining following list libraries ecosystem hope eventually mature composable system log routing storage pretty printing standard logging library provides default logger consolelogger basic filtering pretty printing log records terminal combines convenient composable features single logger type frontend extensions progressloggingjl provides convenient frontend macros including progress makes easy emit log records tracking progress looping constructs routing transformation loggingextrasjl provides generic log transformation filtering routing functionality mutate messages chain duplicate stream log records multiple streams discard messages based predicate etc sinks terminalloggersjl library advanced terminalbased pretty printing log records including fancy progress bars markdown formatting tensorboardloggerjl log structured numeric data tensorboard backend logrollerjl backend rotating log files hit size limit loggingextrasjl provides simple filelogger sink install pkg add micrologging quickstart example using micrologging info logging macros debug message debugging filtered default info information normal program operation warn potential detected error definitely wrong info support key value pairs asdf globallogger consolelogger stderr micrologging info info progress logging sleep info algorithm progress info log record filtering debug begin error executed unless logging debug level message configurelogging minlevel debug debug logging enabled debug level warn log suppression iteration maxlog maxlog module logtest using micrologging function debug message logtest info message logtest warn message logtest error message logtest logtest configurelogging logtest minlevel error info set log filtering error level logtest module logtest info taskbased log dispatch using dynamic scoping function someoperation info dispatches current task logger global logger logstream iobuffer withlogger simplelogger logstream info logging redirected someoperation info logs captured separately withlogger block logstring strip string logstream info formatting logs crash application info blah error intentional error configurelogging minlevel info micrologging implementation choices filtering filtering log messages cheap users feel free leave available commenting otherwise disabling compile time achieve filter entire log message log record metadata determined following design challenge allow filtering log records record constructed logging libraries basic level filtering achieved based log level represents verbosityseverity debug info warning error etc messages verbose currently minimum level filtered simple effective efficient pass filter naturally filtering occur based log message log record metadata micrologging filtering controlled using configurelogging function configures filtering current logger configurelogging minlevel debug efficiency disablelogging function globally disable logging log loggers logging macros efficiency dictate filtering decision loggingspecific user code run implies logging macro insert test branch log record creation passed closure gather information lexical scope look create logger current module compile time considerations indicate macro nice effect visually simple info value achieve filtering example currently expands info micrologging minenabledlevel logger currentlogger shouldlog logger info logmsg currentlogger info value logging context dispatch log record various types context associated types context include static lexical context based location code local variables line file function module dynamic caller context current stack trace data visible consider example context passed femtolisp bindings construct dynamic data context context created data structures available log record creation log context dispatch log record appropriate handler code enrich log record data program code processes log message created choose lexical vs dynamic scope look log handler code micrologging chooses dynamically scoped log handler bound current task understand choice consider audiences logging library package authors emit logs simple caring dispatched application authors care complete application built packages control log records dispatched control created application programmers tend calling functions packages achieve overall task dynamic scoping log handlers easy control log dispatch based task logger mylogger withlogger logger package foo package bar package baz notably approach matter deeply nested call tree various functions called packagefoo author packages logging libraries look log handler lexical scope implies global entry log dispatch example python community settled using module contexts dispatch log messages todo double check metadata automatically included log record useful metadata automatically generated record module location file line id unique symbol logger invocation efficiency messages cost following fast debug begin complex calculation det det fixme writ