testitemrunnerjl overview package runs testitem tests usage writing tests framework package write tests inside testitem macros test item unit code individually run entirely self contained testitem executed code test item placed julia module module run typical testitem look testitem tests begin foo bar test length test bar note argument testitem macro name test item followed begin block contains actual test code note load test package package testing automatically loaded testitem inside test code run code package finally standard base library test macros test function returns correct results testitem macros jl julia file package functions testing traditionally julia files test folder writing test items inside regular package code test code inside code files actual package add testitemsjl package regular dependency package testitems exports testitem macro else main package file look module mypackage using testitems function foo return testitem test foo begin foo bar test barbar adding tests regular package minimal runtime overhead package testitems package defines testitem macro testitem macro returns test code essentially removed package user loads writing test items test files testitem test files inside test folder folder package test files included testruntestsjl file standalone files typical test file testtestfoojl look testitem test foo begin foo bar test bar note testitems package file file testtestfoojl run entire file skip using testitems test item options set specific options individual testitem moment framework supports namely tag system option control default imports tags assign arbitrary tags testitem tag symbol assign multiple tags testitem tags easily select subsets testitem execution example assigns skipci tag testitem testitem test foo tags skipci begin foo bar test bar default imports write testitem default package tested test package imported via invisible using statement desirable control behavior testitem level via defaultimports option accepts bool value disable default imports write testitem test foo defaultimports false begin using mypackage test foo bar test bar note add line using mypackage test manually testitem access foo function test macro running tests moment run testitem integrated test ui julia vs code extension package testitemrunnerjl test item detection based syntactic analysis code package run detect test items execution engines instead look jl files package folder identify testitem calls provide run integrating base test system tests run user calls regular base test functionality tests run ci runs simply add package testitemrunnerjl test dependency package add content testruntestsjl file using testitemrunner runpackagetests sometimes convenient run detected testitem subset specify custom filter function achieve filter function called detected testitem return bool value indicating particular testitem executed example example run testitem skipci tag assigned using testitemrunner runpackagetests filter ti skipci ti tags value passed custom filter function fields extract information test item name name testitem string filename absolute filename file testitem defined tags vectorsymbol tags defined particular testitem print summary test results testitems pass verbosetrue using testitemrunner runpackagetests verbose tru