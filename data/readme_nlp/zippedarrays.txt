zipping julia arrays zippedarrays julia package zip abstract arrays accessing elements simultaneously instance assuming julia arrays using zippedarrays zippedarray builds zipped array instance syntax yields tuple syntax equivalent arrays zipped indices returned axes method build uninitialized zipped array size dims elements tuples items types t t etc call zippedarray tuplett undef dims example zippedarray tupleintfloat undef builds dimensional array size elements tuples type tupleintfloat compared zip function provides means iterate arguments zipped array accessed random reading writing makes zipped arrays useful multikey sorting instance sort zippedarray lt ifelse sort vectors values increasing equality values increasing zipped array simple immutable structure wrapped arguments zippedarray zipped arrays costless build example build array elements pairs values zipped array built using zippedarrays rand float rand int zippedarray yields true comparison arrays virtually object building requires copy array elements hardly requires additional memory sizes indeed julia sizeof julia sizeof depend architecture bit processor thanks lining functions optimizations zipped array faster instance arrays defined using benchmarktools function sumfirst abstractarraytuple inbounds simd eachindex return btime sumfirst s allocations bytes btime sumfirst ns allocations byt