thunksjl thunksjl provides simple implementation thunk lazy computation sophisticated macro lazy rewrites arbitrary julia expressions lazy evaluation strategy thunk represents computation run reify meaning real reified thunk caches value computation core implementation loc consider taking peak complexity lies lazy macro supports lazy evaluation nearly julia expression including dot broadcasting indexing keyword arguments blocks comprehensions thunks composed meaning transform existing julia code lazy evaluation prepending lazy implementation approximates laziness pure functional languages haskell memoizing call means computation captured thunk run times subsequent calls reusing sharing result previous evaluation installation julia add thunks usage note example execute nearly instantly due laziness whereas eager equivalent minute thunk sleep thunk identity equivalent line lazy identity equivalent lazy yy identity thunk assert evaluated false assert reify assert evaluated true assert evaluated false lazy macro supports code blocks lazy begin sleep abc sum assert typeof thunk assert typeof int assert typeof abc thunk assert reify abc lazy aims support arbitrary julia expressions test lazy begin true ones zeros collect identity repeat repeat assert reify assert evaluated false assert sum reify assert evaluated true usage examples seen tests limitations currently using lazy nested blocks supported acknowledgements thunksjl inspired thunk implementation fantastic daggerjl intended lightweight performant alternative scheduling cap