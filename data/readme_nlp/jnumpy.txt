jnumpy writing performance extensions python minutes install jnumpy requirements python install python package jnumpy following command pip install julianumpy note jnumpy install julia jnumpyhome julia installation available usage create python package example write export julia functions file examplesrcexamplejl module example using typython using typython cpython exportpy function matmul abstractarray abstractarray array return function init exportpymodule example begin jlmatmul pyfunc matmul following code optional makes python code loading faster time precompile init create exampleprojecttoml follows name example required julia entry module deps specify julia dependencies initialize import julia functions exampleinitpy import jnumpy np call npsetjuliamirrorserver set julia package server leave argument server empty automatically search nearest mirror np initjl np initproject file example import jlmatmul all jlmatmul enjoy python extension package structure python extension package ls example initpy projecttoml src examplesrc examplejl example import jlmatmul np array np array jlmatmul array environment variables jnumpyhome home directory jnumpyspecific settings default value jnumpy julia executable jnumpy installs julia jnumpyhome using typyjlexe path julia executable typyjlopts commandline options launching julia jnumpy runs julia default environment pathpackagejnumpyjnumpyenv custom environment set projectdir typyjlopts arguments passed julia examples examples demo directory examples standalone python packages created using jnumpy imported jnumpy installed demobasic tiny python package example jnumpy demokmeans tiny python package wrapping parallelkmeansjl produces x performance gain scikitlearn demofft tiny python package wrapping fftwjl indirectly gpllicenced fftw library allows users access fft plans accelerating ffts contributions source contributions kindly accepted appreciated including bug reports documentations pull requests suggest