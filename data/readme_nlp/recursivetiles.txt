recursivetiles installation using pkg pkg add recursivetiles description data arranged array slice corresponds single data slices information repeated repeated information viewed index common repeated information slice consider slices arranged repetitions index contiguous scenario repeated information forms contiguous partition refer contiguous partition value common index tile abstract tile piece mosaic host array contiguous repetition index slices serves demarcate extent tile naturally consider augmentation additional index spans multiple tiles view additional index defining contiguous partition elements partitions defined original index words tile tiles arrive following abstraction tile comprised elements demarcation tile occurs contiguous repetition index consequently augmentation index define partitioning elements multiple augmentations recursively define partitions elements partitions construction proceeds outermost index defines outermost partition partitioned according successive index package provides composable types provide succinct method construction recursively tiled slices arrays usage recursive partitioning quantities serve indices fruitfully expressed composition types composite direct construction tiles arbitrary depth direct construction individual tiles scheme consisting transformation constructs element tile transformation constructs index tile single tile constructed tilescheme multiple tiles using partition tilesscheme index added extending scheme wrapping extendscheme scheme extendscheme index added transformation constructs index presence multiple indices indicated extendscheme type inner partitions exist hence tileextendscheme call partition inner index call tile partition ultimately returning tile outer index vector tiles respective inner index proceeds recursively arbitrary indices added extending via extendscheme wraps tedious write extendscheme wrap hence scheme macro provided facilitate scheme h h h equivalent extendschemeextendschemeextendschemescheme h h h reader agree specification via macro easier read note serve index naturally terms integer ntuple thereof typebased limitations exist choose example tuplestring int float vector type application calls requirement isequal return sensible result type interface abstracttile type subtype abstractvector hence interface types returned package abstractarray specializations hash isequal isless exist enable set operations sorting comparison etc respect presence index held tile specializations normally visible user applied serve encourage user treat tile abstractarray recommendations tile defined contiguous repetition value call index produced transformation slice easier achieve tiling transforming array appropriate sorting appropriate dimensions appropriate tuple finally constructing tiling scheme easier reason index indices naturally apply value base value returned recursive tiling defines partitions based transformation slice literal values specify literal value means contiguous occurrences index belong separate partitions note contrast groupby operation imply occurrences index belong partition conventions calls tile tiles assumed desired treated abstractarray commonly means using eachrow eachcol eachslice actually passes eachslice dims distinction scheme extendscheme exists signaling purposes call tile scheme base signals applied entirety whereas extendscheme signals partitioned according inner index defined entity wrapped extendschemescheme extendschemeextendscheme scheme extendscheme applied partition partition consists contiguous range value hence value serves index partition tile tileabstractscheme called assumed outermost index applies entirety scheme applied entirety tileabstractextendscheme called assumed outermost index applies entirety inner index index schemeextendscheme extended defines ranges ranges found entitywrapped called contiguous range thereby returning tile inner tiles bearing outer index index exists tile simply op entitywrapped unwrapped passed tile scheme index scheme wrapped extendscheme outer index extendscheme equivalent outer index scheme hence expressed scheme tiles tilesabstractscheme called index assumed define ranges found scheme called contiguous slice producing vector tiles bears index defined contiguous slice tilesabstractextendscheme called behavior outer index defined assumed define ranges found extendscheme called contiguous slice examples simple simple example consider matrix third columns contain indices partition matrix normal circumstances applied entire slice opt sum produces distinct values aids illustration julia begin julia julia eachrow julia scheme sum partitions call via tile yielding total tiles julia tile element tilevectortilevectorint int tupleint int tilevectorint int tupleint int tupleint int julia julia julia getproperty element vectortupleint partitions partitions resultant slice yielding tiles consists tiles consists tiles julia xs tiles element vectortilevectortilevectorint int tupleint int tilevectorint int tupleint int tupleint int julia getproperty xs element vectortupleint julia map getproperty xs element vectorvectortupleint sort tiling example sort array prior tiling consider following matrix julia begin third begin julia sort array form contiguous repetitions conversely contiguous repetitions original array intentional sorting destroy structure julia sortslices dims matrix julia scheme third julia eachrow julia xs tiles element vectortilevectortilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tupleint int julia x x xs julia x element tilevectortilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tupleint int julia x element tilevectortilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tilevectortilevectorchar char tupleint int tilevectorchar char tupleint int tupleint int tupleint int look indices julia x x julia getproperty x element vectortupleint julia getproperty x element vectortupleint julia map getproperty x element vectorvectortupleint julia map getproperty x element vectorvectortupleint various abstractarray multidimensional methods apply agnostic particular subtype abstractarray demonstrated somewhat contrived examples julia begin third begin julia julia reshape reshape unitrangeint eltype int julia eachcol julia scheme sum signbit third julia xs tiles element vectortilevectorint int tuplebool bool julia x x xs julia x element tilevectorint int tuplebool bool julia x element tilevectorint int tuplebool bool julia x x true false julia using offsetarrays julia oa reshape offsetarray reshape unitrangeint eltype int indices julia ob eachcol oa julia xs tiles ob true dimension partition function simple clarity julia julia reshape reshape unitrangeint eltype int julia eachslice dims slicesbase reshapedarrayint unitrangeint tuple tuplecolon int int tuplebase onetoint base onetoint subarrayint base reshapedarrayint unitrangeint tuple tuplebase slicebase onetoint int int true julia scheme sum signbit julia xs tiles element vectortilevectorint int tuplebool bool julia x x xs julia x sum true julia x sum true julia vcat xs vec sum dims true example fun julia scheme sum abs sum julia xs tiles element vectortilevectorint int tuplebool bool julia getproperty xs element vectortuplebool julia x x x xs julia x sum true julia x sum true julia x sum true julia vcat xs vec sum dims true limitations originally indicated projecttoml package requires julia provides updated eachslice returns type conforms abstractarray interface julia eachslice returns iterator permit efficient partitioning algorithms expect methods package throw accordingly note supported feasible circumstances package julia calling collect iterator returned eachslice lack support author recommend practice due substantial performance degradation entail