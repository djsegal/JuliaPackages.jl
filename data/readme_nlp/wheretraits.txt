wheretraitsjl welcome wheretraitsjl package exports powerful macro traits extend julia syntax support traits definitions addition wheretraits comes standardized resolve ambiguities traits defining traits traitsorder installation import install running using pkg pkg add wheretraits package loading using wheretraits brings traits namespace addition traitsorder resolving ambiguities usage traits traits supports following extensions julia syntax dispatch functions returning bool traits isodd traits isodd dispatch functions returning traits base iteratorsize basehasshape traits iterators repeated dispatch upperbounds functions returning types traits eltype true traits false true false arbitrary expressions creates optimal code via standard julia compiler usage traitsorder resolving ambiguities wheretraits comes special support resolving ambiguities traits dispatch hood traits normal function dispatch achieve speed flexibility julia function dispatch lead ambiguities traits easily happen defines traits standard dispatch using traits look looks using wheretraits defined version traits conflict eltype eltype wins traits conflict base iteratorsize basehasshape iteratorsize wins traits definition ambiguity julia conflict iterators countfrom eltype wins julia conflict hello world iteratorsize wins ambiguous vector proper ambiguity error stating fix julia conflict error disambiguity found please specify traits following traitsorder main conflict a t t begin eltype a base iteratorsize a stacktrace resolve ambiguity traits defined traitsorder takes respective function signature followed begin block traits dominant top hence executing example traitsorder eltype winning trait traitsorder main conflict a t t begin eltype a base iteratorsize a look resolved julia conflict eltype wins alternatively traitsorder define custom resolution traits function conflict eltype base iteratorsize basehasshape custom implementation immediately resolve correctly julia conflict custom implementation details look documentation limitations optimal code warning dispatch dynamic functions able create optimal code traits function supports proper typeinference baseisempty typeinference return true false static inspection hence slower dynamic code keyword arguments keyword arguments moment support wheretraits dispatch passed symbol level extended syntax currently implemented symbol level traits functions baseiteratorsize qualified iteratorsize assuming imported import base iteratorsize treated functions despite try style top level currently toplevel functions supported syntax stores information previous function definitions stores globally macros informed defined function wheretraits support innerfunctions test package traits macro currently testtestset macro usually encounter standard dispatch probably tests nevertheless workaround wheretraitsjl exports traitstest macro variant fails investigated maybe change testtestset traits packages attempts add traits julia emphasis aspects traits interfaces simpletraitsjl binarytraitsjl canonicaltraitsjl