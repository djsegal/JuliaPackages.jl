argumentmodesjl package provides type mode seen extension val mode intended type function method argument specialization mode type contains list accepted symbols flags dispatch choose method argument value mode instance containes symbols list accepted symbols declared type argument presumed mode replacement using ordinary symbol function argument flag parameter mode allows explicitly declare function argument set symbols flags distinct list accepted symbols function methods dispatch process chooses method respect lists indirectly performs typo control example moderead modewrite modewrite sync correspond depending design methods explicitly meaning value function argument provided useful distinct meaning argument type example suppose function processes arraytyped objects arbitrary dimensions declare methods processing single object iteratable collection objects difficult distinct methods using type argument mean process single object process objects using mode declaration method collection user allowed explicitly indicate passed call single object modecollection collection objects example julia println modeiterator printlnvalues iterator modefromargs printlnfromargs function unionint mode int checkmode println checkmode println checkmode println isa int println generic function methods julia methods methods generic function modeiterator main repl modefromargs main repl unionint mode int main repl main repl julia julia modeiterator values iterator julia modefromargs fromargs julia julia mode julia modefromargs iterator error methoderror method matching mode iterator unitrange fromargs int closest candidates modefromargs repl repl stacktrace toplevel scope repl detailed description mechanics detailed description mechanics type specialized mode type modest st determined collection symbols s s type symbol corresponding types t t type datatype union datatype instance mode mode additionally contains values v s type t param denote collection st instance specialized type mode type param param allows dispatch choose appropriate method function based param constructor type specialization mode s t s t construct specialization modest st type argument function method declaration argument type accept instances mode param param t absent type declaration defaults example mode int tupleint string symbol added argument constructor call indicate concrete type unionall option added auxiliary purposes useful note nonconventional syntax brackets code type declaration look similar presentation type name function signature constructors instance mode s v s v construct instance modestypeofv stypeofv values v v v omited defaults example mode hello world mode construct instance mode value type value set subsequent call instances joined operator example mode mode mode hello world equivalent mode hello world operations instance m mmode mode return instance symbol value type m m join m m throws argumenterror m m contain symbols keys values pairs return symbols values pairs symbols values s s ssymbol return value s tuple values s s contains value return throw argumenterror otherwise checkmode check mode contains prescribed symbols possibly action checkmode checkmode symbol checkmode ssymbol ssymbol checkmode ssymbol ssymbol tests mode contains prescribed symbols st form function tests presence nd form function tests operation symbol omited symbols s s contains exactly prescribed collection symbols contain prescribed symbols rd form function tests symbols s s provided return s s return added function call test positive contains prescribed symbols added function call test positive contains prescribed symbols true called arguments similarly test true called arguments performance series tests current implementation mode compiles function arguments method dispatch runtime overhead using considered tests tests compiletime overhead julia s call mode mode ms call signature sufficiently changes unfortunatelly found reduce lat