coiljl experimental package lower execute julia tensor operations iree compiler stack using mlir coil exports function coilcompile returns function leverages mlir iree compiler stack produce hopefully faster version goals following perform model analysis optimizations fuse re operations function calls fold model hyperparameters unrolling loops control flow etc evaluate hardware accelerators using iree runtime note note coil currently meet goals learn mlir iree example usage coilcompile return equivalent hopefully faster function note julia function compile called julia using coil flux julia dense dense relu dense relu parameters julia compileddense coil compile dense generic function method julia randn float julia compileddense f julia compileddense f julia dense f niceties include codemlir codelinalg macros julia using coil julia sum exp generic function method julia codemlir float mmodule module func func arg tensor xf f cst arith constant dense e tensor f reduced linalg reduce ins arg tensor xf outs cst tensor f dimensions f init f math exp f arith addf init f linalg yield f c arith constant index mhlo reshape reduced tensor f tensor xf extracted tensor extract c tensor xf return extracted f tracing trace functions coil leverages umlautjl converts functions linearized tapes replaces lowerable calls tape mlir operations julia calls replaced mlir operation struct code io etc transformation produce tape tensor arithmetic operations lifted mlir dialects consider input tape fluxdense layer bias relu activation julia import coiltracing julia dense dense relu dense relu parameters julia randnfloat julia tape tracingtracedense ctxtracingcontextdense julia tape inp densetypeofrelu matrixfloat vectorfloat inp matrixfloat const fastacttypeofnnlibfastact getproperty typeofrelu const const typeof getproperty weightmatrixfloat matrixfloat getproperty biasvectorfloat broadcasted broadcasted broadcasted broadcasted materializematrixfloat julia tracingcompiletapetape verbosetrue tapecoiltracingcontext inp densetypeofrelu matrixfloat vectorfloat inp matrixfloat getproperty weightmatrixfloat getproperty biasvectorfloat call matrixfloat call struct calls following generated mlir function julia coil codemlir dense mmodule module func func dense arg tensor xxf arg tensor xxf arg tensor xf tensor xxf mhlodot arg arg tensor xxf tensor xxf tensor xxf mhlobroadcastindim arg broadcastdimensions dense tensor xi tensor xf tensor xxf mhlo add tensor xxf tensor empty tensor xxf cst arith constant dense e tensor xxf arith maxf cst tensor xxf return tensor xxf control flow due umlautjl control flow input function arguments means loops conditions unrolled applied linear tape building build iree shared library callable julia custom fork git clone cd iree git checkout buildcoil git submodule update init cmake gninja ireebuild dcmakebuildtyperelwithdebinfo direeenableassertions dcmakeccompilerclang dcmakecxxcompilerclang direehaldrivervulkan direetargetbackendvulkanspirv direeenablelld cmake build ireebuild target ireeruntimeruntimeshared build runtime library ireebuild folder runtime library libruntimesharedshared contains bytecode interpreter hardware drivers run iree programs compiler library libireecompiler containing mlir iree specific passes downloaded using artifacts official releases linux x glibc package instantiated libraries provided jll packages built using binary builder dependencies package tested julia release special version compilerplugintoolsjl installed compilerplugintoolsjl coil pkg add references onnxjl coil takes similar approach onnxjl lowers mlir modules instead onnx operations xlajl xla lowers julia ir xla hlo execute tpu interestingly tensor shape inference embedded julia type system whereas coil runtime values collected trac