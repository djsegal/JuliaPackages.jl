ptools collection utilities parallel computation julia currently following available workerset ability logically pool set workers specific tasks pfork parallelism using unix fork system call servertasks running tasks simply processes incoming requests loop useful situations maintained function calls maintained retrieved using tasklocalstorage methods sharedmemory useful event parallel procesing single multicore machine avoids overhead associated sendingrecieving data sets queuedtasks schedule tasks executed remote worker processes setchange priorities task control execution platforms tested ubuntu osx sharedmemory windows servertasks pfork unix implementation workerset workerset array process ids workerset created using workersetarrayinteger mode mode wsmoderr wsmodeff wsmoderr enables workers roundrobin fashion wsmodeff tracks workers busy sends request free queues requests workers set busy remotecall functions extended support workerset remotecallwsworkerset args remotecallfetchwsworkerset args remotecallwaitwsworkerset args behaviour except functions executed processes belonging workerset follow model specified mode pfork unix fork system call execute function parallel pforknforksinteger function args forks nforks times executes child parameter forked child index pfork returns array size nforks nth element value returned nth forked child passing huge amounts data function child process issue fork event parent process shared memory segment children visibility modify segment bother returning huge amounts data currently executed nprocs model incompatible worker model unpredictable behavior function executed forked children calls yield tasks concurrently active compute bound usage server tasks typical usage pattern startstasks start server tasks optionally shared memory mappings execute series functions parallel tasks using multiple invocations pmapstasks somefunction someotherfunction someotherfunction stopstasks stop server tasks free shared memory required user specified functions pmapstasks store retrieve information using tasklocalstorage functions example shared memory server tasks understand available example specify shared memory configuration using ptools shmcfg shmcfgsvar int shmcfgsvar uint line requests k int array bound svar x uint array bound svar start tasks startstasksshmcfg ntasks countstasks tasks started symbols shared memory segments added task local storage handle returned shared memory segments mapped current tasks local storage note nprocs worker julia processes start server tasks nprocs ntasks prepare arguments pmap call offsetlist ntasks ntaskslist ntasks ntasks execute function parallel resp pmapstasks offset ntasks begin local refernces shared memory mapped arrays svar tasklocalstoragesvar svar tasklocalstoragesvar mypid myid offsetntasks svar mypid true offsetlist ntaskslist access shared memory segments view changes svar tasklocalstoragesvar printlnsvar svar values updated server tasks finally stop tasks stopstasks shmcfg causes tasks stopped shared memory unmapped exported functions servertasks startstasksshmcfgfalse shmpfxfalse shmcfg optional parameter shmcfgnamesymbol type dims arrayshmcfg returns handle set servertasks pmapstasksstasks function lsts similar pmap except parameter handle returned starttasks note length lsts servertasks identical stopstasksstasks shmcfgfalse shmpfxfalse stops tasks frees shared memory countstasksstasks returns servertasks partition compute job note shmpfx set distinct string sharing server users multiple self concurrent jobs active exported functions shared memory support pmapshmcreateshmcfg shmpfx creates maps shared memory segments global symbols julia process shmcfg shmcfgnamesymbol type dims arrayshmcfg unlinkshmshmcfg shmpfx frees shared memory note single run shmpfx passed value methods linux view shared memory mappings devshm event abnormal program termination unlinkshm called manually delete segments allocated program name segments form devjuliashmpfxsymbolnam