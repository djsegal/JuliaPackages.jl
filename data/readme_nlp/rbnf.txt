restructured bnf restructured bnfrbnf aims generating parsers requiring redundant coding programmers rbnf designed maintainability unlike regex rbnf readability makes sense syntax level conciseness avoid selfrepeating parser generators efficiency rbnf specifies semantics customizable parsing algorithms extensibility mix julia metaprogramming notations define parserslexers taking advantage bnf source block lexers parsers generated data type definitions representing tokenizers asts modern facilities parsing introduced notations dedicated escaping lexers makes super convenient implement lexers nested comments string literals str quote notations grammar macros makes super easy achieve code reuse rbnf join separator rule rule separator rule join generates parser parse implementation efficiency rudimentary implementation parser combinator direct left recursions supported implicitly plus indirect left recursions supported note currently lack analyses optimizations lead expressiveness performance severe concerned real time applications figure solid compile parser definitions bottom parsers left recursions capability processing context sensitive check following projects achieved researching basic usage rules mutually referenced structures defining language firstly immutable object denote language using rbnf struct yourlang rbnf parser yourlang begin ignore tokenizer names ignored ignoremystring mychar reserved reserved identifiers strings symbols bool literals allowed strings regarded reserved keywords reserved true else grammar define grammar rules following statement defines grammar node note structure named structnode defined node combination rules following statement defines alias combination rules alias combination rules token define tokenizers corresponding lexers mystring abc mychar myregex myquote quote beginstring endstring endstring tokens rbnf runlexer yourlang sourcecode ast ctx rbnf runparser parserdefinedingrammarsection tokens tokenizer unlike parser generators talking rust rbnf provides rich information tokenizers struct token lineno int colno int offset int str string span int type parameter denote class tokenizer belongs instance tokenizer denotes reserved keywords type tokenreserved tokenizer handled lexer token identifier zazzaz ll type tokenidentifier sequence grammar parses tokenstr tokenstr outputs list tokenstr tokenstr fields grammar parses tokenstr tokenstr outputs structctokenstr tokenstr rule produce instances automatically generated data types structc specify names generated structs rbnf typename yourlanguage name symbol transform name structc rbnf typename yourlanguage name symbol symbol struct name custom data types firstly define data type global scope current module struct token token grammar parses tokenstr tokenstr outputs tokenstr tokenstr tuple grammar parses tokenstr tokenstr outputs tuple tokenstr tokenstr currently parser allowed literals grammar parse tokenstrnota nota optional grammar parse tokenizers tokenstr tokenstr tokenstr outputs tokenstr tokenstr tokenstr respectively repeat grammar parse alternative grammar parse keyword grammar hd cond exp br exp else br exp note else parse tokenreservedstr type tokenreserved aware aware lexerhereafter matching else produce tokenizer typed token typed tokenreserved rewrite grammar abnoa abnoa produces tokenstr parsed successfully parameterised polymorphisms firstly define function global scope join separator rule rule separator rule inside rbnfparser lang begin write grammar list join expression list parse list expressions separated define expression directrecur provided supporting direct left recursions directrecur begin init prefix recur parse aaa tokena tokena tokena directrecur begin init prefix recur parse aaa tokena tokena tokena