abstractdifferentiation motivation package implements abstract interface differentiation julia particularly useful implementing abstract algorithms requiring derivatives gradients jacobians hessians multiple depending specific automatic differentiation packages user interfaces julia automatic differentiation packages count hands packages user interfaces backendagnostic interface request function value gradient example avoid combinatorial explosion code trying support differentiation package julia algorithm package requiring gradients derivatives situation dire combine differentiation backends create backend loading abstractdifferentiation load abstractdifferentiation recommended import abstractdifferentiation ad ad alias access names inside abstractdifferentiation using ad instead typing name abstractdifferentiation abstractdifferentiation backends abstractdifferentiation construct backend instance abadabstractbackend using favorite differentiation package julia supports abstractdifferentiation particular adreverseruleconfigbackendruleconfig chainrulesjl compatible reverse mode differentiation package following backends temporarily available abstractdifferentiation soon corresponding package loaded thanks weak dependencies julia requiresjl julia versions adforwarddiffbackend forwarddiffjl adfinitedifferencesbackend finitedifferencesjl adreversediffbackend reversediffjl adtrackerbackend trackerjl adzygotebackend zygotejl special adreverseruleconfigbackend term backend objects defined respective packages enforce abstractdifferentiation interface example julia import abstractdifferentiation ad zygote julia ab ad zygotebackend abstractdifferentiation reverseruleconfigbackend zygotezygoteruleconfigzygotecontext zygote zygoteruleconfig zygotecontext zygote context julia log sum exp generic function method julia ad gradient ab rand derivatives build backends using adhigherorderbackend instance abf forwardmode automatic differentiation backend abr reversemode automatic differentiation backend construct backend forwardreversemode automatic differentiation adhigherorderbackendabf abr construct backend reverseforwardmode automatic differentiation adhigherorderbackendabr abf backendagnostic interface following list functions officially supported differentiation interface abstractdifferentiation derivativegradientjacobianhessian following list functions request derivative gradient jacobian hessian function value ds adderivativeabadabstractbackend xs computes derivatives ds wrt xs using backend ab ds tuple derivatives element xs gs adgradientabadabstractbackend xs computes gradients gs wrt inputs xs using backend ab gs tuple gradients element xs js adjacobianabadabstractbackend xs computes jacobians js wrt inputs xs using backend ab js tuple jacobians element xs adhessianabadabstractbackend computes hessian wrt input using backend ab hessian currently supports single input value derivativegradientjacobianhessian following list functions request function value derivative gradient jacobian hessian request function value gradient hessian singleinput functions ds advalueandderivativeabadabstractbackend xs computes function value xs derivatives ds wrt xs using backend ab ds tuple derivatives element xs gs advalueandgradientabadabstractbackend xs computes function value xs gradients gs wrt inputs xs using backend ab gs tuple gradients element xs js advalueandjacobianabadabstractbackend xs computes function value xs jacobians js wrt inputs xs using backend ab js tuple jacobians element xs advalueandhessianabadabstractbackend computes function value hessian wrt input using backend ab hessian currently supports single input advaluegradientandhessianabadabstractbackend computes function value gradient hessian wrt input using backend ab hessian currently supports single input jacobian vector products aka pushforward operation goes names refer chainrules documentation terminology single input single output function jacobian pushforward operator pff equivalent applying function tangent vector following functions request function returns pushforward operatorfunction request pushforward function pff function inputs xs pff adpushforwardfunctionabadabstractbackend xs returns pushforward function pff function inputs xs pff function accepts tangents vs input tuple length equal length tuple xs single input pff accept single input instead tuple valueandpff advalueandpushforwardfunctionabadabstractbackend xs returns function valueandpff accepts tangent vs input tuple length equal length tuple xs single input valueandpff accept single input instead tuple valueandpff returns tuple namely value xs output pushforward operator vector jacobian products aka pullback operation goes names refer chainrules documentation terminology single input single output function jacobian pullback operator pbf equivalent applying function cotangent vector following functions request pullback operatorfunction function value request pullback function pbf function inputs xs pbf adpullbackfunctionabadabstractbackend xs returns pullback function pbf function inputs xs pbf function accepts cotangents vs input tuple length equal outputs single output pbf accept single input instead tuple valueandpbf advalueandpullbackfunctionabadabstractbackend xs returns function valueandpbf accepts cotangent vs input tuple length equal outputs single output valueandpbf accept single input instead tuple valueandpbf returns tuple namely value xs output pullback operator lazy operators struct lazy derivativegradientjacobianhessian function operator apply lazy operator value tuple correct shape lazy derivativegradientjacobianhessian ld lazyderivativeababstractbackend xs returns operator ld multiplying derivative xs apply operator multiplication ld single input tuple length xs multiple inputs array tuples lg lazygradientababstractbackend xs returns operator lg multiplying gradient xs apply operator multiplication lg single input tuple length xs multiple inputs lh lazyhessianababstractbackend returns operator lh multiplying hessian scalarvalued function apply operator multiplication lh lh vector appropriate length lj lazyjacobianababstractbackend xs returns operator lj multiplying jacobian xs apply operator multiplication lj lj vector tuple vectors multiple inputs lj tuple multiply outputs lj tuple otherwise scalar vector appropriate length citing package package please cite package article schaferabstractdifferentiation title abstractdifferentiation jl backendagnostic differentiable programming julia author schfer frank tarek mohamed white lyndon rackauckas chris journal neurips differentiable programming workshop