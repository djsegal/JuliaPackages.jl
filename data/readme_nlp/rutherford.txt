rutherfordjl generic ui programming julia language implement generic programming system rutherfordjl aims extend capability ui programming couple complications firstly uis mutate data depend normal function data format convert move uis convert mutations mutations generated dynamically asynchronously easy secondly ui opinions normally functions computing defined wrong ui data sensible uis generated difference trivial colour change ultimately mean author generic ui assume access data mutate exactly user ui look writing generic uis fools errand lot firstly define structure ui define interactions users perform describe mutations result provide sensible defaults user specific stuff access data look mutations interpreted ultimately mean user plonk ui component gradually specialise functions solution surprisingly simple uis naturally described using tree data structure behaviour tree generic matter using custom types uniquely tag tree user specialise mind look api api componentnamesymbol creates type ui tree enable users specialise rest rutherfordjl api drawcontext data user else component datatype override default rendering defining draw method context using doodlecomponent data creating component define argument version creating datatype define single argument version datacontext data parameter draw generated data component convert format component expecting juno juno integration matter loading file atom julia add atominitcoffee require process env home kipreposjkrosorutherfordjljunojs add juliaconfigstartupjl eval isinteractive probably add keyboard shortcuts atomkeymapcson platformdarwin itemviews atomtexteditordatagrammarsource juliamini cmdctrlenter juliaclientevalblock cmdaltctrlenter juliaclienteval cmdctrlbackspace juliaclientresetmodul