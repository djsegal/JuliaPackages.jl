scalarradau solve scalar differential equation accuracy efficiency stability using benchmarktools scalarradau plots cos radau plot legend false xlabel ylabel linrange zeros length btime radau s allocations kib module contains lightweight implementation classic th radau iia method scalar ordinary differential equation ode julia algorithm famously effective stability ode solving method priority stiffly accurate stable implementation follows description chapter iv solving ordinary differential equations ii ernst hairer gerhard wanner basic description step size adaptive initial step size chosen automatically functions implemented typeflexible dependent variable y yout restricted real ode type stable probably return real dense output continuous solutions implemented using cubic hermite interpolation approximate jacobian evaluation performed simple finite difference costs function evaluation attempted step equation scalar th radau method stages jacobian matrix static arrays efficient quasinewton iterations implementation designed scenario scalar ode solved repeatedly stability solver module originally written solve schwarzschild equation radiative transfer clearskyjl stability properties solver crucial prevent physical overshoots solver functions specialize directly ode provided slightly differentialequationsjl step system defining ode function solving function solve stiff system odes instead scalar equation look specifically vector implementation radau method called radauiia nice mathematical overview radau methods check stiff differential equations solved radau methods scalarradau install using julia package manager julia add scalarradau solve ode define function pass radau function using scalarradau param radau snippet solves equation dydx starting returns spaced solution interval function callable object called param arguments solution control output function radau yout xout y x x param rtol e atol e facmax facmin e maxnewt maxstep maxfail mandatory function arguments yout vector output written xout sorted vector values output sampled scalar ode form dydx param y initial value x starting x integration optional param argument default type meant scenarios extra information accessible ode function passed whenever called coordinates output xout x x ascending checked integrity integrating check performed x x integration backward solving values yout added overwritten means yout nans zero values calling radau result prefill yout zeros keyword arguments rtol relative error tolerance atol absolute error tolerance facmax maximum fraction step size increase compared previous step facmin minimum fraction step size decrease compared previous step kappa stopping tolerance newton iterations epsilon fraction current step size finite difference jacobian approximation maxnewt maximum newton iterations step size reduction maxstep maximum steps solver stops throws error maxfail maximum newton convergence failures error maxnewt maxstep maxfail arguments restricted integers set inf effectively disable functions described available output options convenient version internally spaced output spaced output example function definition radau y x x nout param kwargs specify output nout argument keyword arguments default values solution vectors returned output compute value integration interval x function radau y x x param kwargs keyword arguments default values identical funct