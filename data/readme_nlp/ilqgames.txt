ilqgamesjl ilqgamesjl framework rapidly designing solving nonlinear sum differential games built iterative linearquadratic game approximations brief introduction framework benchmarks implementation found short workshop manuscript finally paper demonstrates flexibility performance ilqgamesjl combining particlefilter scheme reason uncertainty differential games realtime installation julia repl run using pkg pkg add packagespec url example example players controlling single dunicycle player controls steering player controls acceleration describe dynamics define unicycle subtype controlsystem type implement differential equation overloading dx type using ilqgames import ilqgames dx parameters inputs sampling time horizon nx nu t gamehorizon setup dynamics struct unicycle controlsystemtnxnu differential equation uncycle px py phi dx cs unicycle svector cos sin dynamics unicycle setup costs setup costs encoding players objectives derive custom subtype playercost simply hand cost function lambda function functionplayercost player unicycle stay close origin player close costs functionplayercost functionplayercost indices inputs player controls playerinputs svector svector solve game information construct game generalgame gamehorizon playerinputs dynamics costs solve initial conditions x automatic differentiation save specify compute lq approximations system solver choose initial conditions solve ms automatic differentiation solver ilqsolver x svector converged trajectory strategies solve solver x finally visualize path unicycle follows position visualization indices correspond px py positionindices tuple svector note plottraj call animated animated plot instead animated plottraj trajectory red green playerinputs gamehorizon minimalexamplegif equilibrium solution player accelerates reach desired speed player steers unicycle figure stay close origin