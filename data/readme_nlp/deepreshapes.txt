deepreshapes extends reshape arbitrarily nested structures tuple array source target provides deep flatten function transforms structures flat vector pretty julia consider registering package code review actually please look useful ready issue note julia provides deepreshape function transform structure data deepreshape deepreshape deepreshape float float int potentially nested structures tuple array actual scalar values contained optimize linear function optimization frameworks nlopt optim require supply cost gradient functions expect operate plain vectorfloat purpose algorithms expressed naturally terms structured data consider example popular backpropagation algorithm training neural networks outline gradient calculation look function costandgradient vectormatrixfloat weight matrices neuron layer vectorvectorfloat bias vectors neuron layer vectormatrixfloat vector receive resulting weight gradients vectorvectorfloat vector receive resulting bias gradients feedforward backpropagation obtain intermediate results calculate gradients fill result vectors calculate return cost optimization function directly optimization package expects plain vectors using nlopt initializeparameters flatten vector optimization optldlbfgs length minobjectiveoptimization costandgradient define result optimizeoptimization flattening initial parameters easy flatten using deepreshapes flattenfloat costandgradient simply wrap original calculation deepreshape function costandgradientvectorfloat vectorfloat deepreshape specification original structure obtained calling describe initial parameters flattening original calculation flattenfloat calculate return cost deep reshape consists independent processes producer recursively walks input produce scalar values consumer consumes values object according structure specification result deepreshapeinput specification source input object default producer descends arrays tuples considers else scalar deepreshape deepreshape objects descend overridden optional deep argument deepreshape deep range input type deep considered iterable contained values produced input considered scalar produced directly recursion target produced scalars assigned objects construction according specification following format empty tuple describes value type describes value type tuple integer dimensions describes dimensions tuple type integer type dimensions describes array element type dimensions tuple recursively describes tuple contained value describes entry result array recursively describes array simple inputs recursively consisting tuple array scalars describe returns corresponding specification describe int int directly deepreshape specifications nested deepreshape flatten pack convenience function flatten recursively flattens input vector optionally fixed target type scalars converted flattennested flattenint nested similar pack function returns flattened vector original structure defined describe reverse flattening flattened packint intint deepreshapeflatten