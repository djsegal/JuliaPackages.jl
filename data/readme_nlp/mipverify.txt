mipverifyjl package evaluating robustness neural networks using mixed integer programming mip companion paper details results evaluating robustness neural networks mixed integer programming vincent tjeng kai xiao russ tedrake getting started installation couple minutes including installing julia documentation installation instructions quickstart guide additional examples companion repository provides code examples loading models saved common frameworks tools verify neural networks neural networks trained optimize training accuracy shown vulnerable adversarial examples perturbations input potentially leading changes output context image classification perturbed input indistinguishable original input lead misclassifications target category chosen adversary body proposing defense methods produce classifiers robust adversarial examples defense evaluated via attacks local optima guarantee defense actually increases robustness classifier produced fortunately evaluate robustness adversarial examples principled fashion option determine test input minimum distance closest adversarial example call minimum adversarial distortion option determine adversarial test accuracy proportion test set bounded perturbation causes misclassification increase mean minimum adversarial distortion adversarial test accuracy indicates improvement robustness determining minimum adversarial distortion input proving bounded perturbation input causes misclassification corresponds solving optimization piecewiselinear neural networks optimization expressed mixedinteger linear programming milp features mipverifyjl translates query robustness neural network input milp solved optimizer supported jump efficient solves enabled tight specification relu maximum constraints progressive bounds tightening approach time spent refining bounds provide additional information improve formulation package provides level abstractions common types neural network layers layers linear transformations connected convolution averagepooling layers layers piecewiselinear functions relu maximumpooling layers support bounding perturbations perturbations bounded infty norm perturbations image convolved adversarial blurring kernel utility functions evaluating robustness network multiple samples dataset support pausing resuming evaluation running optimizers parameters mnist cifar datasets verification sample neural networks including networks verified paper results brief modified version table paper report adversarial error classifiers bounded perturbations infinity normbound eps verifier time limit s sample imposed gaps bounds correspond optimizer reached time limit samples error mnist test set samples dataset training approach eps lower bound pgd error lower bound upper bound soa upper bound name package mnist wong et al mnistwkalinfauthors mnist ragunathan et al mnistrslalinfauthors values column represent previous art soa described paper neural network available import via listed name using getexamplenetworkparams citing library article tjengevaluating title evaluating robustness neural networks mixed integer programming author tjeng vincent xiao kai tedrake russ journal arxiv preprint arxiv