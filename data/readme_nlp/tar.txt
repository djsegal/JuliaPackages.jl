tarjl tar package list extract create posix tar archives tarballs specified posix designed support using tar format mechanism sending trees files system historical files restoration system design goal tar intentionally ignores metadata included tar format sense data transfer package aim read create legacy posix variants tar format support reading gnu name link extensions api usage public api tar includes five functions type create creates tarball disk file tree extract extracts tarball disk file tree list lists contents tarball vector header objects rewrite rewrite tarball standard format create produces treehash compute tree hash content tarball default git sha header struct representing metadata tar considers tar entry none exported recommended usage import tar access names qualified tarcreate tarextract tarcreate create predicate dir tarball skeleton tarball predicate string bool dir abstractstring tarball unionabstractstring abstractcmd io skeleton unionabstractstring abstractcmd io create tar archive tarball directory dir resulting archive written path tarball path specified temporary path created returned function call tarball io object tarball content written handle instead handle left predicate function passed called system path encountered recursively searching dir path included tarball predicatepath true predicatepath returns false directory directory excluded entirely directory included archive skeleton keyword passed file io handle skeleton generate tarball create skeleton file passing skeleton keyword extract command create called skeleton file extracted files changed identical tarball recreated skeleton predicate arguments tarextract extract predicate tarball dir skeleton none copysymlinks auto setpermissions true dir predicate header bool tarball unionabstractstring abstractcmd io dir abstractstring skeleton unionabstractstring abstractcmd io copysymlinks bool setpermissions bool extract tar archive tarball located path tarball directory dir tarball io object instead path archive contents read io stream archive extracted dir existing empty directory existent path created directory dir specified archive extracted temporary directory returned extract predicate function passed called header object encountered extracting tarball entry extracted predicatehdr true selectively extract archive skip entries cause extract throw error record extracted extraction process passed predicate function header object somewhat modified raw header tarball path field normalized remove entries replace multiple consecutive slashes single slash entry type hardlink link target path normalized match path target entry size field set size target path seen file skeleton keyword passed skeleton extracted tarball written file io handle skeleton file recreate identical tarball passing skeleton keyword create function skeleton predicate arguments copysymlinks true instead extracting symbolic links extracted copies link internal tarball internal symlinks link etcpasswd copied symlinks cyclic copied instead skipped default extract detect symlinks created dir automatically copy symlinks created setpermissions false permissions set extracted files tarlist list tarball strict true vectorheader list callback tarball strict true callback header data tarball unionabstractstring abstractcmd io strict bool list contents tar archive tarball located path tarball tarball io handle read tar contents stream returns vector header structs header details callback provided instead returning vector headers callback called header useful items tarball examine items prior error tarball callback function accept argument type vectoruint vectorpairsymbol string called representation raw header data single byte vector vector pairs mapping field names raw data field fields concatenated result raw data header default list error encounters tarball contents extract function refuse extract strictfalse skip checks list contents tar file extract extract beware malicious tarballs sorts crafty unexpected try trick bad tarball argument skeleton file extract create list detect file header appropriately list iterate headers skeleton file tarrewrite rewrite predicate oldtarball newtarball newtarball predicate header bool oldtarball unionabstractstring abstractcmd io newtarball unionabstractstring abstractcmd io rewrite oldtarball standard format create generates checking contain cause extract raise error functionally equivalent tar create tar extract predicate oldtarball newtarball extracts disk instead seek function navigate tarball data newtarball argument passed tarball written temporary file path returned predicate function passed called header object encountered extracting oldtarball entry skipped unless predicatehdr true selectively rewrite archive skip entries cause extract throw error record content encountered rewrite process passed predicate function header object somewhat modified raw header tarball path field normalized remove entries replace multiple consecutive slashes single slash entry type hardlink link target path normalized match path target entry size field set size target path seen file tartreehash treehash predicate tarball algorithm gitsha skipempty false hash string predicate header bool tarball unionabstractstring abstractcmd io algorithm abstractstring skipempty bool compute tree hash value file tree tarball contains default git tree hashing algorithm sha secure hash function current versions git means tarball file tree git represent files symlinks empty directories hash value computed function hash value git compute file tree note tarballs represent file trees empty directories git store function generate hashes default skipempty change behavior hash tarball omits empty directories short hash function agrees git trees git represent extends consistent domain hashable trees trees git represent predicate function passed called header object encountered processing tarball entry hashed predicatehdr true selectively hash archive skip entries cause extract throw error record extracted hashing process passed predicate function header object somewhat modified raw header tarball path field normalized remove entries replace multiple consecutive slashes single slash entry type hardlink link target path normalized match path target entry size field set size target path seen file currently supported values algorithm gitsha default gitsha basic algorithm gitsha replaces sha hash function sha hash function git transition using future due attacks sha support file tree hashing algorithms added future skipempty option controls directories tarball recursively contain files symlinks included hash ignored hashing content tarball file tree care directories empty ones including computed hash default function provide option skip empty directories git refuses store empty directories ignore try add repo compute reference tree hash adding files git repo git tree hash hash value match hash value computed treehash skipemptytrue words option allows treehash emulate git hash tree empty directories hashing trees contain empty directories git repo recommended hash using tool ignore empty directories tarheader header type struct representing essential metadata single record tar file definition struct header path string path relative root type symbol type indicator mode uint modepermissions viewed octal size int size record data bytes link string target path symlink types represented following symbols file hardlink symlink chardev blockdev directory fifo unknown types typeflag character symbol note extract refuses extract records types file symlink directory list list kinds records called strictfalse compression typical compress tarballs saving transferring unix tradition tar package compression instead makes easy compose api external compression tools simplest read compressed archive commandline tool decompress example tar list gzcat tarball tar extract gzcat tarball spawn gzcat tarball command read uncompressed tarball data output process close process creating tarball gzip command nearly easy tar create dir pipeline gzip tarball assumes dir directory archive tarball path create compressed archive compress decompress tarball process various transcodingstreams packages using codeczlib targz tarball write true tar gzipcompressorstream targz tar create dir tar close tar assumes dir directory archive tarball path create compressed archive decompress process similar manner using codeczlib targz tarball tar gzipdecompressorstream targz dir tar extract tar close tar assumes tarball path compressed archive extract api comparison commandline tar helpful compare tar api commandline tar unlike tar tarcreate function include path tell bundle resulting tar file location data data tarcreatedir tarball roughly equivalent running following tar command tar tarball dir cd dir ls words tar told change directory dir constructing tarball include toplevel items directory path prefix note command emulate behavior tarcreate sort entries records user information modification times exact permissions coaxing commandline tar programs omit portable information portable git compatible sort trivial extraction tarextracttarball dir roughly equivalent following commands test dir mkdir dir tar tarball dir mx tar told change directory dir extracting tarball extract path relative directory option tells tar ignore modification times recorded tarball files directories natural modification times current user elevated privileges tar command attempt change owner files recorded tarball whereas tarextract tar command try restore permissions respecting current umask user administrator tarextract behaves users ignoring userpermission information aside plain files executable owner suppress behaviors gnu tar owner permissions options options broadly supported tar commands options support behaviors design features unlike tar command line tool originally designed archive data restore system replica thereof tar package designed using tar format transfer trees files directories system design goal means metadata fields supported tar format default historical tar tools supported tar short choice features defaults tar designed support transfer data backup restoration tar format example record name id user owns file recording information makes perfect sense using tarballs backup tar program run root restoring data restore original owner file directory hand ownership information using tar format transfer data system user names ids systems tool run root change owner extracts data transfer ownership metadata disregarded recorded similarly makes little sense using tarballs data transfer copy modification time file source system time stamps unlikely relevant destination system clock skew systems mean time stamps source appear future destination confuse programs perceived attempted security breach tar command line tools print warnings extracting files time stamps future using tar format data transfer ignore time stamps extracted contents natural modification times features defaults tar package guided principle tar format transmitting data tool backup restoration tar format archival purposes using traditional command line tool gnu tar hand tar format transmit data system file types tar designed transmission file directory trees supports following file types plain files directories symlinks hardlinks extracted copies tar package support file types tar format represent including character devices block devices fifos attempt create extract archive contains kinds entries tar raise error list contents tarball containing kinds entries passing strictfalse flag list function option list raises error extract time stamps accordance design goal data transfer tool tar package record set modification times tarball creation extraction creating tarball sets time stamp entry representing unix epoch jan st extracting tarball ignores time stamps entries extracted content natural modification times based file directory extracted future optional support added recording restoring time stamps users tar ignores user names ids creating extracting tarballs due names ids source destination systems match names ids changed tar run elevated privileges means probably sense try restore ownership transferring data means probably accordingly tar disregards user names ids creating extracting tarballs creation id fields recorded names fields recorded empty string extracting tarball user fields ignored entirely extracted content owned current user unlikely support added recording restoring ownership files directories functionality makes sense using tar format backup purpose served using command line tar tool permissions comes permissions tar records restores significant bit information plain files executable owner permission information recorded restored directories symlinks bit information supported file systems platforms coincidence information git records choice makes tar behavior portable means safe extract contents tarballs generated unsafe permission combinations o world writable executable modes normalized following manner creation extraction files executable owner archivedrestored mode o files executable owner archivedrestored mode o directories symlinks archived mode o directories symlinks restored default modes extracting tarball contents tar respects system umask similar administrative permission limits posix systems exact permissions extracted tree contents permissive permissive observe tar extracting tarball contents permissive modes please file issue using julia versions prior windows support querying setting executable bit broken files created executable julia versions correctly read write executable permissions using windows acls tarballs created extracted windows apprpriate permissions future optional support added recording restoring exact permission modes extent permissions supported systems posix systems permissions necessarily approximation posix mode strings supported systems reproducibility information tar records permissions information git considers significant recording hashing tree contents admittedly coincidence result useful consequence tar design following properties create tarball file tree extract tree git tree hash original git checkout file tree archive using tar resulting tar archive file caveat mind git ignores directories recursively contain directories unless file symlink git acknowledge existence subdirectory means trees git tree hash produce tarballs subdirectories containing files symlinks git ignore subdirectories tar git tree hash produce tarballs identical file trees produce identical tarballs tarball remain stable future versions tar package note canonical tarball format changed slightly release package release canonical format includes directories canonical tarball format whereas previously empty directories omitted existence implied contents absence explicit directory entries tarballs confused external tooling deemed worth format change avoid treehash function compute gitstyle tree hash contents tarball extract moreover tarballs created tar package hash contain file tree true identical tarballs hash tarballs created tar represent file tree skipemptytrue option treehash compute hash git assign tree ignoring empty directori