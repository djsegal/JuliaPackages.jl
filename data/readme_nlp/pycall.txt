calling python functions julia language package provides ability directly call interoperate python julia language import arbitrary python modules julia call python functions automatic conversion types julia python define python classes julia methods share data structures julia python copying installation julia package manager run pkgaddpycall install files julia required development version pycall available switch installing package run pkg add packagespec name pycall rev master pkg build pycall default mac windows systems pkgaddpycall pkgbuildpycall condajl package install minimal python distribution via miniconda private julia path conda julia package install python packages import conda print condapythondir directory python installed gnulinux systems pycall default using python program otherwise python path advantage condabased configuration particularly compelling installing pycall packages pyplotjl sympyjl automatically install python dependencies exploit packages pyimportconda function described specifying python version version python default change python version setting python environment variable path python python etc executable rerunning pkgbuildpycall julia envpython path python executable envpython rawpythonxpythonexe example windows raw escape pythonxpythonexe envpython usrbinpython example nix pkgbuildpycall note rerun pkgbuildpycall python program changes significantly switch python distro switch python python force julia python distribution via conda simply set envpython empty string rerun pkgbuildpycall current python version stored pyversion global variable pycall module look pycalllibpython name python library pycallpyprogramname python program name using conda python pycallconda true technically pycall python program se links directly libpython library location libpython running python pkgbuild subsequent builds pycall update package via pkgupdate python executable name default unless set python environment variable delete file pkgdirpycalldepspython note python virtualenvs aware pycall virtualenv built default switch virtualenvs switch pycall virtualenv switch virtualenvs run rmpkgdirpycalldepspython pkgbuildpycall alternatively python virtual environments section switching virtual environment runtime note usually libraries installed python pyenv macos requires install env pythonconfigureoptsenableframework pyenv install enthought canopy python distribution currently supported rule tend recommend anaconda python distribution macos windows using julia conda package minimize headaches usage simple example call python mathsin function using pycall math pyimportmath mathsinmathpi returns type conversions automatically performed numeric boolean string io stream dateperiod function types tuples arrayslists dictionaries types python functions convertedpassed julia functions vice versa types supported via generic pyobject type multidimensional arrays exploit numpy array interface conversions python julia default passed julia python copy python julia copy copy conversion python julia arrays achieved pyarray type keyword arguments passed example matplotlib pyplot keyword arguments specify plot options functionality accessed julia plt pyimportmatplotlibpyplot rangestoppilength sin cos pltplot colorred linewidth linestyle plt integration julia graphics backends avoid function recommend using matplotlib via julia pyplot module arbitrary julia functions passed python routines taking function arguments example root cos call newton solver scipyoptimize via pyimportscipyoptimize newton cos macro exists mimicking python statement example pywith pybuiltinfiletxt begin writehello type specified example override automatic conversion pyobject similarly context manager returns type automatically converted julia type override via pywith exprpyobject familiar python easier py py equivalent python eval exec respectively py import numpy np def sinpi return npsinnppi py sinpi execute script via pyinclude pasted py string creating julia module useful pattern define python functions classes julia init julia function py module mymodule using pycall function init py import numpy np def return npsin npcos py py note python code py example evaluated python namespace dedicated mymodule python function accessed outside mymodule troubleshooting solutions common default pycall include current directory python search path load python module current directory run pushfirstpyimportsyspath python object interfaces pycall provides routines manipulating python objects julia via type pyobject described control types data passed julia python access additional python functionality especially conjunction lowlevel interfaces described types pyobject pycall module provides type pyobject wrapper pyobject python api representing reference python object constructors pyobject provided julia types pycall supplies convert pyobject convert pyobjects julia types currently types supported integer real complex booleans strings io streams datesperiods functions tuples arrayslists thereof planned julia symbols converted python strings pyobject attribute julia equivalent attribute python automatic type conversion attribute pyobject type conversion attribute instead keyspyobject function returns array available attribute symbols pyobject key equivalent key python automatic type conversion pyobject type conversion pyobject key sometype key supply default value key found key default sometype key default similarly set key val equivalent key val python delete key equivalent del key python integer indices julia equivalent python call pyobject via args python assuming object callable python explicit pycall form useful julia specify return type pystr pyrepr analogous str repr python respectively arrays pyarray julia python assuming numpy installed true default conda julia array numpycompatible elements converted pyobject numpy wrapper data copying data julia arrays stored columnmajor numpy supports columnmajor arrays default numpy arrays created python rowmajor python packages throw error try pass columnmajor numpy arrays deal pyreversedims pass julia array rowmajor numpy array dimensions reversed example xx julia array pyreversedims passes xx numpy rowmajor array copy underlying data vectoruint object julia default converted python bytearray object bytes object instead function pybytes python julia multidimensional numpy arrays ndarray supported converted native julia array type makes copy data alternatively pycall module provides type pyarray subclass abstractarray implements copy wrapper numpy array currently numeric types objects pyarray return type pycall returning ndarray call pyarraypyobject ndarray object technically pyarray python object numpy array interface provide data pointer shape information conversely passing arrays python julia array types converted pyobject types copy via numpy passed pycall arguments pyvector pycall module provides type pyvector subclass abstractvector implements copy wrapper arbitrary python list sequence object unlike pyarray pyvector type limited numpy arrays using pyarray latter efficient pyvector return type pycall returning list sequence object including tuples call pyvectorpyobject sequence object pyvector supports usual index referencing assignment delete pop operations copy converts ordinary julia vector pydict similar pyvector pycall provides type pydict subclass association implements copy wrapper python dictionary object implementing mapping protocol pydict return type pycall returning dictionary call pydictpyobject dictionary object default pydict dictionary actually pyany pyany performs runtime type inference python dictionary fixed types instead pydict key value types respectively currently passing julia dictionaries python makes copy julia dictionary pytextio julia io streams converted python objects implementing rawiobase interface binary python python code notably unpickling expects stream implementing textiobase interface differs rawiobase mainly read readall functions return strings byte arrays pass io stream textio object call pytextioioio convert determine automatically python stream argument return strings binary data unlike python julia files separately text binary modes determine conversion simply file pyany pyany type conversions tell pycall detect python type runtime convert corresponding native julia type pycallfunc pyany convertpyany pyobject automatically convert result native julia type convenient lead slightly worse performance due overhead runtime typechecking julia jit compiler infer type calling python pycall automatically makes appropriate type conversions julia types based runtime inspection python objects control type conversions copy pyarray python multidimensional array copying array achieved using lowerlevel functions using pycall python return type improve performance eliminating overhead runtime type inference providing type information julia compiler pycallfunctionpyobject returntypetype args call python function typically looked module args standard julia types converted automatically corresponding python types converting return value returntype returntype pyobject return unconverted python object reference pyany request automated conversion convenience macro pycall exists automatically converts pycall functionargsreturntype pycallfunctionreturntypeargs py evaluates python code equivalent python eval function returns result converted pyany alternatively py returns raw pyobject manually converted desired interpolate julia variables expressions python code except python strings contained python code interpolates value converted pyobject expressiondata passed string ordinary julia string interpolation pysum calls python sum function julia array returning contrast interpolated expression value expression inserted string python code allowing generate python code via julia expressions example julia py returns string py returns py pass multiline string string contain arbitrary python code single expression evaluated return value useful define purepython functions equivalent python exec function define python global multiline py string retrieve julia subsequently evaluating py py inside julia module python namespace dedicated julia module define python function using py module worrying name clash python code note python functions defined init effect python occurred toplevel julia scope runtime precompiled modules execute python script file running pyinclude pasted script py string pyinclude support interpolating julia variables var script pure python pybuiltin look string symbol global python builtins string returns pyobject symbol returns builtin converted pyany py look builtins python globals occasionally pass keyword argument python reserved word julia example calling function fail function reserved word julia lowerlevel julia syntax function calling julia python julia functions converted callable python objects easily call julia python via callback function arguments pyjulia module allows call julia directly python pycall conversions julia function args ordinarily converted callable python object args converts python arguments julia arguments default pyany conversion calls converts julia return value python object default pyobject conversion exert lowerlevel control argumentreturn conversions calling pyfunction pyfunctionret documentation pyfunction pyfunctionret information defining python classes pydef creates python class methods implemented julia instance pyimportnumpypolynomial pydef mutable struct doubler polynomial function initself self mymethodself arg arg xself self function xsetself newval self newval doublerx essentially equivalent following python code import numpypolynomial class doublernumpypolynomialpolynomial def initself self def mymethodself arg return arg property def xself return self xsetter def xself newval self newval doublerx method arguments return values automatically converted julia python python special methods supported len add etc pydef allows multiple inheritance python classes pydef mutable struct sometype baseclass baseclass example using tkinter using pycall tk pyimporttkinter pydef mutable struct sampleapp initself args kwargs begin initself args kwargs selflabel tklabeltexthello world selflabelpackpadx pady app sampleapp appmainloop class variables supported using pycall pydef mutable struct objectcounter objcount class variable function initpyobject objectcounterobjcount gui event loops python packages graphical user interface gui notably plotting packages matplotlib mayavi chaco convenient start gui event loop processes mouse clicks asynchronous task julia gui responsive blocking julia input prompt pycall includes functions implement event loops common crossplatform gui toolkits wxwidgets gtk version via pygtk version via pygobject qt via pyqt pyside python modules set gui event loop via pyguistartguisymbolpygui gui wx gtk gtk tk qt start respective toolkit event loop qt pyqt pyside preferring former require instead qtpyqt qtpyside respectively defaults return value pygui returns current default gui passing gui argument changes default gui equivalent calling pyguigui start event loops gui toolkit run simultaneously calling pyguistart toolkit except change current pygui default pygui return current default gui toolkit symbol default gui set tk qt wx gtk gtk corresponding python package installed pyguiguisymbol changes default gui gui pyguistopguisymbolpygui stop running event loop gui defaults current return value pygui returns true event loop running false otherwise gui facilities python libraries simply start appropriate toolkit eventloop importing library explicitly tell library gui toolkit interactive mode desired easier convenient wrapper modules popular python libraries pyplot module julia lowlevel python api access call lowlevel functions python api using ccall pysymfuncsymbol function pointer pass ccall symbol func python api call int pyisinitialized ccallpysympyisinitialized int pycall defines typealias pyptr pythonobject argument types pythonobject arguments correctly converted type pythonobjectpyptr creates julia wrapper pyptr return value pyobject convert routines mentioned convert julia types pyobject references reference returned python function immediately convert pyptr return values pythonobject objects python reference counts decremented object garbage collected julia pythonobjectccallfunc pyptr python routines return borrowed reference instead pyincrefpyobject obtain reference call pyincrefpyobject pydecrefpyobject manually incrementdecrement reference count sometimes lowlevel functions steal reference return borrowed function pyerrcheckmsgabstractstring check python exception thrown throw julia exception includes msg python exception object python exception status cleared calling pyerrclear function pytypequerypyobject returns native julia type converted pyobject pyisinstancepyobject symbol query python type identifier global pytypeobject python api pyisinstance pydicttype checks python dictionary alternatively pyisinstancepyobject pyobject performs check python type object pytypeofpyobject returns python type equivalent type python using pycall julia modules pycall julia code including julia modules care required using pycall precompiled julia modules key remember python objects pyobject contain pointers memory allocated python runtime pointers saved precompiled constants precompiled library reloaded pointers contain valid memory addresses solution fairly simple python objects create functions called module loaded safe store python object global variable initialized automatically module loaded initialize variable module init function typestable global constant initialize constant pynull top level copy function module init function mutate actual value example suppose module scipyoptimize module load module module loaded store global constant scipyopt precompile module safe precompile module mymodule using pycall const scipyopt pynull function init copy scipyopt pyimportconda scipyoptimize scipy access scipyoptimize functions scipyoptnewton instead pyimport function pyimportconda argument name anaconda package provides module importing scipyoptimize fails user installed scipy automatically install scipy retry pyimport pycall configured conda python install anacondabased python distro user installation privileges throw error explaining scipy installed explain configure pycall conda installed automatically call pyimportcondamodule package channel specify optional anaconda channel installing standard anaconda packages python virtual environments python virtual environments created venv virtualenv pycall provided python executable virtual environment linked libpython pycall note virtual environments created conda supported pycall virtual environment set environment variable pycalljlruntimepython importing pycall path python executable example source path bin activate activate virtual environment system shell julia start julia julia env pycalljlruntimepython sys python pathbinpython julia using pycall julia pyimport sys executable pathbinpython similarly pythonhome path changed environment variable pycalljlruntimepythonhome author package written steven johnson