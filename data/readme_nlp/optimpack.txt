optimpackjl documentation license build status code coverage optimpackjl julia interface optimpack library solving scale optimization installation installation using precompiled libraries julia session press enter pkg repl type following commands pkg add https github com emmt optimpack jl install build package package code using optimpack installation compiled libraries default package manager attend download precompiled optimpack libraries architecture compile libraries provided optimpackbuilder project system supported platforms optimpack libraries compiled installed intructions official optimpack repository define environment variables building optimpackjl package environment variables specifies path optimpack dynamic libraries environment variables set starting julia julia repl instance env optimpackopklib usrlocallib env optimpackcobylalib usrlocallib env optimpackbobyqalib usrlocallib env optimpacknewuoalib usrlocallib proceed installation method press enter pkg repl type following commands pkg add https github com emmt optimpack jl url gitgithubcomemmtoptimpackjl ssh instead https define environment variables adding optimpackjl package rebuild package pkg build optimpack unconstrained minimization nonlinear smooth function methods optimpack minimize nonlinear smooth multivariate function constraints linear conjugate gradient nlcg implemented nlcg limited memory variable metric method vmlm implemented vmlm vmlm efficient nlcg require memory easiest minimizers provide julia function fg charge computing value function gradient variables function form function fg store gradient function compute function value return return function value arguments julia arrays types dimensions entry storing variables exit storing gradient user defined function return function value nonlinear conjugate gradient nlcg solution computed implemented nonlinear conjugate gradient methods nlcg fg x method x initial value variables data type dimensions solution x julia dense array dimensions elements type float float argument method optional choose implemented methods keyword verb set true print information iteration keywords described following subsections method settings nonlinear conjugate gradient methods mainly compute search direction conjugate gradient iteration writes x x alpha d alpha step length search direction d derived gradient x objective function current x previous search direction d update rule depends specific method typically d x beta d beta computed following recipes choose recipe value method argument set following values optimpacknlcgfletcherreeves fletcher reeve method optimpacknlcghestenesstiefel hestenes stiefel method optimpacknlcgpolakribierepolyak polak ribire polyak method optimpacknlcgfletcher fletcher conjugate descent method optimpacknlcgliustorey liu storey method optimpacknlcgdaiyuan dai yuan method optimpacknlcgperryshanno perry shanno update rule optimpacknlcghagerzhang hager zhang method values bitwise ed following bits optimpacknlcgpowell force parameter beta nonnegative optimpacknlcgshannophua guess step length following prescription shanno phua instance method optimpack nlcgpolakribierepolyak optimpack nlcgpowell merely corresponds prp algorithm polak ribire polyak method optimpack nlcgperryshanno optimpack nlcgshannophua merely corresponds nonlinear conjugate gradient method implemented conmin shanno phua default settings nonlinear conjugate gradient const optimpack nlcgdefault optimpack nlcghagerzhang optimpack nlcgshannophua stopping criteria nonlinear conjugate gradient methods iterative algorithms convergence assumed achieved euclidean norm gradient threshold pseudocode criterion max gatol grtol x euclidean norm gradient current solution x euclidean norm initial gradient x gatol absolute threshold parameter grtol relative threshold parameter keywords gatol grtol specify values parameters default ones gatol grtol e desirable limit time spent algorithm keywords maxiter maxeval available specify maximum iterations evaluations algorithm respectively default values means restrictions algorithm safely stopped acceptable iterate maximum allowed function evaluations slightly exceed value maxeval line search settings keyword lnsrch specify line search method default nlcg fg x method lnsrch ls ls implemented line search methods ls optimpack armijolinesearch ftol ls optimpack morethuentelinesearch ftol gtol xtol ls optimpack nonmonotonelinesearch mem ftol amin amax ftol tolerance function reduction armijo wolfe condition gtol tolerance gradient strong wolfe condition xtol relative precision step length set machine relative precision default mem previous steps remember nonmonotone line search keywords amin amax set lower steplength bound upper steplength relative bound trigger bissection nonmonotone line search default values spg nonmonotone line search mem ftol e amin amax line search safeguarded imposing lower upper bounds step nlcg vmlm keywords stpmin stpmax specify step bounds relatively size step line search default values stpmin e stpmax e specified stpmin stpmax variable metric limited memory vmlm alternatively solution computed limited memory version variable metric method implementing bfgs updates vmlm fg x optional argument previous steps memorize default arguments meaning nlcg keywords verb gatol grtol lnsrch stpmin stpmax specified vmlm meaning nlcg addition keywords specify scale inverse hessian variable metric method via scaling keyword scaling optimpack scalingnone unit scaling scaling scaling optimpack scalingorenspedicato scale gamma scaling optimpack scalingbarzilaiborwein scale gamma denotes inner product previous step gradient difference spectral projected gradient method spectral projected gradient spg method birgin martinez raydan solving constrained optimization usage spg method documented lowlevel interface operations vectors create vector space vectors dimensions dims element type space optimpack densevectorspace dims float float type alias cfloat cdouble dims tuple dimensions wrap vector specific julia array vect optimpack wrap space arr space optimpack shaped vector space arr julia array element type dimension list array match vector space method available change contents vector optimpack wrap vect arr arr julia array constraints element type dimensions apply note arr dense array type densearray elements shaped vectors supposed stored contiguously memory optimpack offers possibility create custom vector spaces exploited near future allow flavors julia arrays error management runtime errors throw julia except