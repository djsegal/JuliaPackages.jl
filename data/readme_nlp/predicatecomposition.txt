predicatecomposition package defines functions logical composition predicate functions functions return boolean functions functions functions arguments return function julia implements efficiently permits compact notation selecting specific elements collections logical compositions ff args f args f args ff args f args f args numerical comparisons functions functions compare output values functions max min sum arbitrary arguments create functions normally return numerical logical values isequal ff args f args f args isless ff args f args f args islesseq ff args f args f args isgreater ff args f args f args isgreatereq ff args f args f args max fs args max args fs min fs args min args fs sum fs args args fs aliases convenient typing define following aliases using operators predefined meaning julia type tab type tab isequal type equivtab isless type prectab islesseq type preceqtab isgreater type succtab isgreatereq type succeqtab caution operators predefined meaning precedence addition operators comparison operators statement length length parsed length length function length length instead probably desired length length logically compose functions explicitly add parentheses length length complete list operator precedence rules examples lengthfromto length length equivalent lengthfromto length length compact notation particular advantageous passing function argument filter similar functions compare filter length length collection filter length length collection assuming functions countapples countoranges countlemons count apples oranges lemons data structure describing fruit basket filter max countapplescountorangescountlemons fruitbaskets instead filter max countapples countoranges countlemons fruitbaskets fruit baskets apples oranges lemon