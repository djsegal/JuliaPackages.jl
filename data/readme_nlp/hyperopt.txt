hyperopt package perform hyperparameter optimization currently supports random search latin hypercube sampling bayesian optimization usage package designed facilitate addition optimization logic existing code usually write code try hyper parameters hand realize structured approach finding hyper parameters designed package optimization logic wrapped existing code user specify variables optimize candidate values ranges variables level example add hyperparameter optimization existing pseudo code manuallyselectedvalue othervalue cost trainmodel wrap hyperopt ho hyperopt numberofsamples candidatevalues othercandidatevalues cost trainmodel details macro hyperopt takes loop initial argument determining samples draw sample strategy specified specifying special keyword sampler sampleropts available options randomsampler lhsampler clhsamplerdimscontinuous categorical continuous hyperband innerrandomsampler subsequent arguments loop specifies names candidate values hyper parameters linrange true false explinrange useful strategy achieve loguniform sampling logarithmically spaced vector explinrange example parameters expression sent macro hold value sampled corresponding candidate vector iteration resulting object hohyperoptimizer holds sampled parameters function values minimumminimizer maximummaximizer properties hominimizer plotted using plotho plotsjl exact syntax various samplers shown testfile fairly readable example using hyperopt true sum function minimize main macro argument loop interpreted iterations except hyperband optimizer ho hyperopt sampler randomsampler default none provided linrange true false exp linrange print false true true false true true false true true true false false false hyperopt hyperoptimizer iterations int params tuplesymbolsymbolsymbol candidates array abstractarray history array results array sampler hyperopt randomsampler julia bestparams minf ho minimizer ho minimum real true julia printmin ho true visualize result plotting hyperoptimizer plotho allow determine parameters performance etc type hyperoptimizer iterable iterates specified iterations iteration providing sample parameter vector ho hyperoptimizer linrange true false randn ho println false true true false false true false true true true hyperoptimizer track function values hyperopt manually store data consider pattern ho hyperoptimizer linrange true false randn ho res computations push ho history categorical variables randomsampler clhsampler support categorical variables natural floating representation functions hyperopt fun tanh relu trainnetwork fun hyperopt sampler clhsampler dims categorical continuous fun tanh relu param linrange trainnetwork fun param sampler randomsampler baseline default none chosen hyperband innerrandomsampler runs expression varying amount resources allocating resources promising hyperparameters info hyperband iterations lhsampler random search caveat lhsampler candidate vectors equal length hob hyperopt sampler lhsampler linrange repeat true false exp linrange candidate vectors length candidates repeated times categorical clhsampler circumvents hob hyperopt sampler clhsampler dims continuous categorical continuous linrange true false exp linrange hyperband hyperband innerrandomsampler implements hyperband novel banditbased approach hyperparameter optimization maximum amount resources parameter roughly determines proportion trials discarded round successive halving using hyperband expression inside hyperopt macro takes form following pseudocode ho hyperopt resources sampler hyperband inner randomsampler linrange exp linrange query initialized res optimize resources uninitialized start optimization using selected hyper parameters else res optimize resources value continue optimization minimum res getstate res return minimum value continue optimization resources increased defining variable resources inside loop grows according hyperband algorithm interpret resources entirely user time limit maximum iterations else simple example using hyperband optim resources control maximum calls objective function using optim sum hohb hyperopt resources sampler hyperband inner randomsampler linrange exp linrange res optim optimize simulatedannealing optim options fcallslimit round int resources optim minimum res optim minimizer res plot hohb complicated example explores optim optimizers inner optimizer hohb hyperopt resources sampler hyperband inner randomsampler algorithm simulatedannealing particleswarm neldermead bfgs newtontrustregion linrange exp linrange algorithm x else x println resources algorithm typeof algorithm name name res optim optimize x algorithm optim options timelimit resources showtrace false optim minimum res algorithm optim minimizer res function vector interface hyperband called standard optimizer interface objective function takes scalar resources vector parameters returns objective value vector parameters example using hyperopt using optim optimize options minimum minimizer sum objective function resources real pars abstractvector res optimize pars simulatedannealing options timelimit resources minimum res minimizer res candidates linrange exp linrange vector vectors parameters nice names plots hohb hyperband objective candidates threads true bohb bohb robust efficient hyperparameter optimization scale refines hyperband replacing random sampler bayesianoptimizationbased sampler simply replace sampler hyperband bohbdimsdims examples example bohb familiar previous examples using optim hb hyperopt sampler hyperband inner randomsampler linrange exp linrange res optim optimize neldermead optim options fcallslimit round int optim minimum res optim minimizer res bohb simply replace inner sampler change randomsampler bohb remember specify dimension types bohb bohb hyperopt sampler hyperband inner bohb dims hyperopt continuous hyperopt continuous linrange exp linrange res optim optimize neldermead optim options fcallslimit round int optim minimum res optim minimizer res using bohb kernel density estimator estimate hyperparameters balance exploration exploitation based previous observations setting variable tuple estimated set hyperparameters loop consequence returned optimminimizerres previous example tuple holding values hyperparameter previous example note bohb currently handles continuous variables issue discussion adding support categorical variables parallel execution macro phyperopt hyperopt distributes computation available workers usual caveats apply code loaded workers etc phyperopt accepts optional argument pmap function args pmapargs onerror macro thyperopt threadpoolstmap evaluate objective available threads beware memory consumption objective allocates lot memori