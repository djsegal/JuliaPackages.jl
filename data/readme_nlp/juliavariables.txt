juliavariables solve function solve scopes simplified julia expression variables symbol transformed var struct var name symbol ismutable bool isshared bool isglobal bool expressions wrapped exprscoped bounds freevars boundinits innerexpression example solve solvefromlocal julia using mlstyle julia unwrapscoped ex match ex begin expr scoped unwrapscoped expr head args expr head map unwrapscoped args unwrapscoped generic function method julia quote function solvefromlocal rmlines unwrapscoped quote mut shared function mut shared julia quote function solve rmlines expr scoped bounds var freevars var boundinits symbol quote global function expr scoped bounds var local freevars var boundinits symbol quote local julia quote function solvefromlocal rmlines expr scoped bounds varmut shared freevars var boundinits symbol quote mut shared function expr scoped bounds var freevars varmut shared boundinits symbol quote mut shared simplifyex expressions accepted input solve solvefromlocal provide handy api apply conversions arbitrary expressions simplified expressions julia quote function rmlines simplifyex quote function function function reason couple api solve user aware exists destructive operations expressing scope information instance impossible inject scope information body ast shape expr expr block expr block body exprblock body actually subscope scope inherited ruins handy especially top tree visiting scoped expressions due uselessness scoping messy asts body analyses ugly implement simplified expressions finally understood concerns safe return restructured expression injecting scope information compose simplifyex solve gain handy api mysolve solve simplifyex mysolvefromlocal solvefromlocal simplifyex