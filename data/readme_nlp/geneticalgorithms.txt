geneticalgorithmsjl lightweight framework simplifies process creating genetic algorithms running parallel basic usage simple equality b c d e solution create module start creating file module ga module loaded framework inside run algroithm module equalityga implement ga interface inside define entity entity inherit abstract geneticalgorithmsentity framework look createentity function create initial population type equalitymonster entity abcde array fitness equalitymonster array int equalitymonster abcde abcde function createentity num simplicity sake limit values abcde integers equalitymonster rand int note equalitymonster field fitness default field framework store entities calculated fitness access elsewhere ga change behavior overload fitnessentityequalitymonster score create fitness function framework expect fitness function single entity return fitness score function fitness ent expression b c d e close score ent abcde ent abcde ent abcde ent abcde ent abcde abs score note islessentity entity return fitness fitness entities scores closer define specialized isless function isless lhs equalitymonster rhs equalitymonster abs lhs fitness abs rhs fitness entities groupentities operates population array entities sorted score run task expected emit entities passed crossover function groupentitites provides nice terminate ga stop simply produce function groupentities pop pop fitness return simple naive groupings pair entitiy length pop produce define crossover crossover parents produce child entity grab properties random parents function crossover child equalitymonster grab element random parent numparents length length abcde parent rand uint numparents child abcde parent abcde child define mutation mutate operates single entity responsible deciding actually mutate function mutate ent crazy mutate time rand float return randelement rand uint ent abcderandelement rand int run ga using geneticalgorithms require geneticalgorithmstestequalitygajl model runga equalityga initialpopsize population model population ga exit