fastrunningmedianjl julia package allows calculate running median fast installation julia execute add fastrunningmedian level api fastrunningmedianrunningmedian function runningmedian input windowsize tapering symmetric run median filter windowsize input array return result taperings tapering decides behaviour input taperings mirror symmetric respect middle input array available taperings symmteric sym ensure window symmetric output array growing shrinking window output length input windowsize odd windowsize output element asymmetric asym adds removes element calculating output value creates asymmetric windowing edges array input output windowsize elements asymmetrictruncated asymtrunc asymmetric truncated beginning match size symmetric none tapering towards input elements output windowsize choose windowsize elements output array lie middle input elements continuous underlying axis performance underlying algorithm scale log input size windowsize source taperings visualized data shown cross windows visualized colored boxes input grey performance comparison window sizes package performs calling runmed turlach implementation written window sizes stuetzle implementation outperforms package overhead rcall worth development fast implementation window sizes ongoing corresponding issues details contrast package sortfiltersjl supports arbitrary probability levels example calculate quantiles notebook create graph benchmark folder ran ik gb ram editing browsing background stateful api fastrunningmedian provides stateful api streaming data reduce ram consumption build level api fastrunningmedianmedianfilter type medianfilter firstval windowsize int real construct stateful running median filter manipulate grow roll shrink query median length windowsize isfull source fastrunningmediangrow function grow mf medianfilter val grow mf value val mf grow beyond maximum window size error thrown probably roll element pushed onto circular buffer source fastrunningmedianroll function roll mf medianfilter val roll window position replacing element ciruclar buffer value val error mf grow mf maximum capacity source fastrunningmedianshrink function shrink mf medianfilter shrinks mf removing element circular buffer error mf contains element medianfilter zero elements median source fastrunningmedianmedian function median mf medianfilter determine current median mf implementation elements medianfilter odd lowheap element bigger highheap top element lowheap median elements medianfilter heaps size median mean top elements source baselength function length mf medianfilter returns elements stateful median filter mf equal length internal circular buffer source fastrunningmedianwindowsize function windowsize mf medianfilter returns windowsize stateful median filter mf equal capacity internal circular buffer source fastrunningmedianisfull function isfull mf medianfilter returns true length stateful median filter mf equals windowsize source sources hardle steiger optimal median smoothing published journal royal statistical society series applied statistics vol pp implement custom double heap heaps datastructuresjl keywords running median rolling median moving median