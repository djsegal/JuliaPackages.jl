modifyfield package julia package provides macros modifyfield modifyfields modifytupleentry macro modifyfield intended modify field object immutable composite type sits inside container illustrate issue consider following immutable structure immutable immut intfldint isaddedbool suppose array type immut following loop loop intfld isadded true unfortunately code snippet illegal modifies field immutable object aside immut declared plain composite type type declaration immutable code loop fine julia programmers immutable composite types containers plain composite types former packed densely memory yield performance instead obtain effect legally via loop intfld immutintfld true code unwieldy composite type fields hard read source bugs arguments immut constructor incorrectly macro example include declaration using modifyfield write loop intfld modifyfield isadded true modifyfield macro allows code mimics clean syntax loop hood providing implementation equivalent loop original version code vavasis metaprogramming val type types julia dispatching correct routine greatly improved simon byrne incorporation macros generated functions user prefers invoke function macro following statement effect loop intfld copyandmodify valisadded true note macro intended immutable objects container immutable objects bound plain julia variable julia using modifyfieldmodifyfield julia immutfalse immutfalse julia modifyfield intfld immutfalse composite types occur inside larger containers performance usually attained declaring objects type immutable especially frequently modifying fields type immutable stylistically preferred context modifying multiple fields macro provided modifying multiple fields time efficient modifying time example usage immutable immut intfldint isaddedbool xxfloat array immut entries following loop changes fields entry modifyfields intfld isadded true slightly odd syntax chosen field names close corresponding values improve readability parenthesized argument modifyfields macro name single field followed comma syntax matches julia tuple syntax modifyfields intfld equivalent modifyfield intfld modifying tuple entries similarly package provides macro modifying tuple entries example execution julia using modifyfieldmodifytupleentry julia true true julia modifytupleentry false falsetrue equivalent functional call julia using modifyfieldcopyandmodifytup julia true true julia copyandmodifytup val true truetrue immutables implementation modifytupleentry actually copies entire tuple couple cautionary notes macro modifytupleentry requires literal integer subscript example tuple variable expression functioncall version copyandmodifytup variable subscript val argument leads loss performance compiler determine argument types method dispatch happens run time main purpose macro tuples packed inside container performance setting modifying bare tuples example cell array array preferable tupl