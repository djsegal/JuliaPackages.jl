arraymeta rationale abstractness lack thereof fallback implementations array operations base julia left unsatisfied fallback methods array operations assume presence efficient elementwise access getindex operation indexlinear indexcartesian hard reconcile abstraction distributed blocked arrays resulting darray implementations wrap operation abstractarray wrapping operations trivial map reduce trivial wrap reducedim broadcast wrappers constantly updated sync base set features julia versions operations involve similar boilerplate code dimensionality checks reflection output array type dimensions operations optimized memory locality implementations leading complex code strictly exist package aims evolve means available express array operations level currently basic idea arrayop array type implementations array operations fall section learn arrayop macro arrayop level elementwise access distributed arrrays implement efficiently hypothetically arrayop macro moved base array operations base broadcast reducedim implemented base using delete lot array code base replace simpler arrayop expressions complex array types darray example wrap operation arrayop operations defined base array type package daggerjl array implementation example optimizations multithreading memorylocality speed operations array ecosystem arrayop macro arrayop macro express array operations denoting dimensions input arrays interact produce dimensions output array notation similar einstein notation equivalent tensoroperationsjl comparison added features support operations notation described examples collect reshape ones transpose equivalent arrayop elementwise arg equivalent sin arrayop sin elementwise args equivalent arrayop elementwise constant equivalent im arrayop im reduce default reduce note returns dimensional array note dimension left lhs expression reduced einsten notation default reducer arrayop reduce userspecified function arrayop reducedim defaults reducer arrayop equivalent reducedim arrayop equivalent reducedim arrayop equivalent squeezereducedim aplstyle reducedim reducedim userspecified function arrayop equivalent prod broadcast arrayop arrayop matmul arrayop note expressions generate loops perform required operation hence implement array operations noted comments expression arrayop overwriting notice instead expressions currently abstractarrays specialized efficiency dagger arrays examples dimensional arrays notation trivially generalizes dimensions example aids genericness potentially base define reducedim example function dimensional array generated function reducedim dim abstractarray valdim idxin symbol ndims idxout copy idxin idxoutdim arrayop idxout idxin allowing efficiently abstractarrays specialized dagger arrays array specialized implementation arrayop blocked iteration arrayop tilediterationjl perform operations cacheefficient demo consider dimensional permutedims julia rand julia btime arrayop ms allocations mib julia btime permutedims ms allocations mib presumably base permutedims efforts block inputs leading cache misses arrayop version julia btime ms allocations mib julia btime arrayop ms allocations mib opportunities syntactically rewrite arrayop faster allocates temporaries speed operations permutedimsarray step lowering arrayop expression intermediate form arrayop expr simply translates arrayoplower expr goal lower lower expression type assign contains lhs rhs consisting combination indexing map types indexing indexsym indexsym indexing indexsym indexconstint map lowering assignlowering lowering reductionidentity eltype rhs indexing indexsym lhs creates similar assign lhs contains indexingallocvar indexsym denoting output array named allocated iterated try expressions lower macro lowered types representing lowered form expression parameterized types arguments allowing functions steps dispatch generate efficient code tailored specific expression specific array types step calling arrayop entry generated world lowered object expression step passed arrayop default arrayopop calls arrayoptype lhs array op dispatch implementations based type array lhs arrayop able pick implementations normal arrays dagger arrays arrayoptypeallocvar op special tries allocate lhs calling arraymetaallocarray calls arrayoptype lhs op step generating loop expressions task arrayop act generated function returns code perofm operation code abstractarrays srcimplabstractjl dagger implementation srcimpldaggerjl acheive dagger implementation generating loop expressions interestingly rewriting lowered form step lowered form act chunks darray handled abstractarray implementation practical dispatch blasgemm loop reordering improvements blocked iteration optimizations permutedimsarray communication computation time optimizations dagger la tensor contraction engine researchy formalize interface array types implement implementation sparse matrices implementation indexedtable axisarrays autodifferentiation explore operations express arrayop mapslices getindex stencils differences tensoroperationsjl jutho tensoroperationsjl inspired package lot codebase tailored specifically tensors real complex contraction transposition conjugation multiplication scalars package aims cover features framework notable additions arrays type julia function combining arrays reducing dimensions constants arguments opposed allowing scalar multiplication offsets supports indexing dimensions constants arrayop support operations reducedim finally dispatch system pick implementations array types dagger array operations implemented exampl