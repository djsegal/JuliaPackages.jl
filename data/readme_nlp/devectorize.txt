devectorize julia framework devectorized evaluation devectorize julia framework provides macros functions devectorize vector expression devectorize users write computations level vectorized time enjoying runtime performance devectorized loops devectorize automatically translates vectorized expressions faster tightloops results x x performance gain devectorize programming languages including julia expressions immediately evaluated construction simple strategy results optimal behaviors example include creation unnecessary temporaries repeated memory roundtrips consider following example immediate evaluation temporaries respectively storing results array traversed twice moreover computation arrays memorybound runtime performance depends times scan arrays formula efficient evaluate expressed using loops follows length zeros piece code results pass creating temporary arrays lowlevel loops difficult read write maintain combine elegance level expressions performance lowlevel loops answer look examples hold evaluation temporaries assignment happens integrated loop emitted compute results pass powerful metaprogramming framework julia makes achieve goal using incredibly simple syntax taking advantage framework devectorize provides macro devec devec statement exactly except macro devec performs magic translating formula pass loop scenes remaining organized section basic usage introduces devectorize improve performance code design framework provides brief overview framework structures basic usage install package using julia official package manager pkg add devectorize updated switch devectorize master branch git pull commits ordinary remember macro devec putting assignments devectorize automatically translate expressions efficient loops example write devec exp sum inspect code generated devectorize inspectdevec macro inspectdevec exp sum statement prints generated codes prior evaluating benchmark table benchmark results typical julia vec devec handcoded loop simpleewise x x complexewise x x shiftdot x x colwisesum x x rowwisesum x x colwiseeucdist x x result obtained julia commit fb mac os using script testbenchdevecjl comes devectorize package vectorized julia code baseline report performance gains example baseline takes sec devec takes sec gain x codes tagged devec macro typically performs x x faster vectorized codes comparable sometimes slightly faster handcoded loop note devectorize recognizes subset expressions julia commonly subset listed elementwise map arrays devec devec sin exp log list operators functions currently supported devectorize max min clamp blend sqrt cbrt sqr rcp floor ceil round trunc exp log log exp log expm logp sin cos tan asin acos atan sinh cosh tanh asinh acosh atanh erf erfc gamma lgamma digamma notes operator supported entail complex semantics depending arguments runtime users express elementwise multiplication division perfectly supported devectorize functions sqr rcp blend base module julia provided devectorize extensions easier write vectorized expressions devec simple references devec devec devec sin simple reference means reference expressions following forms integer symbol refers integer variable reference expressions appear left hand assignment support flexible references planned future releases note write devectorize emit codes creates array store results bound process entails overhead inferring type shape result creating array created eliminate runtime overheads writing results directly written array created evaluation opassignment devec devec sin devectorize automatically translate ordinary assignment expressions colwiserowwise reduction devec sum devec maximum sin devec mean devectorize currently recognizes five reduction functions sum maximum minimum mean dot hybrid expressions consider example devec sum seemingly simple expression actually requires loops evaluate computing sum toplevel elementwise expression devectorize recognizes situations emit correct codes perform evaluation example devectorize break expression ones devec tmp sum devec tmp note devectorize breaks expressions tries generate memory traversals block expressions devec begin sin cos sum exp maximum current implementation devectorize simply devectorizes assignment expression respectively future version sophisticated algorithm identify opportunities sharing computation expressions design framework devectorize process translating julia expression devectorized codes goes stages translate julia expression typed expression enriched semantic information using texpr compile typed expression devectorized codes using compile takes steps decompose expression sequence basic expressions break hybrid expression block expression compose loops basic expression via factory using compose integrate generated loops code block return typed expressions julia front parses input expression instance expr contains syntatic information semantic information generate code understand semantics meaning expression reduction elementwise transformation express semantics expression devectorize establishes type hierarchy srctexprjl hierarchy briefly summarized follows texpr tewise serve elementwise argument tscalar scalar tnum numerical literals tscalarsym symbol scalar result reduction trefscalar trefscalar tsym symbol refers variable array scalar tref trefd trefd trefcol trefrow tmap elementwise map sin treduc reduction sum sum tcolwisereduc columnwise reduction trowwisereduc rowwise reduction tassign asssignment sin cos tblock block expressions function texpr defined srctexprjl takes instance expr argument analyzes expression recognized returns typed expression instance texpr otherwise raises error specific throws exception type deerror analysis performed texpr relies semantic information provided functions srcfuntraitsjl functions tell sin elementwise mapping takes argument sum reduction tell result type information element type promotetypeeltype eltype bool contexts framework extensible devectorize introduces notion context refers specific setting codes generated cpu simd cuda opencl etc abstract type evalcontext srccompilebasejl super class contexts current version devectorize provides specific context type namely scalarcontext expressions mapped devectorized loops future contexts introduced simd cuda providing users options choose specific emit evaluation code expressions compilation function compile takes arguments context typed expression returns generated codes function driver actually delegates code generation functions composeinit generating codes initialization composemain generating main loops functions provided specific reduce complexity implementation compile function performs preprocessing includes translates blocks hybrid expressions sequence basic expressions identifies trivial assignments simply emits note simply bounds name object referred involve real computation precautions prevent potential alias example translates sin statements tmp sin trivial assignment tmp temporary name generated using gensym avoid collision names processing implemented simpler taking account intricacies functions generate codes scalarcontext srcscalarbackendjl code composition routines srcscalarbackendjl recursive kernel composition generate loop kernels expression example generates getvalue getvalue getvalue terminals getvalue overloaded function ensure correct behavior scalar array takes generated kernel combines operator emits getvalue getvalue likewise emits getvalue getvalue getvalue composemain function generate loop generated kernel loop bodi