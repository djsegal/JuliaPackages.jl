easyranges range expressions easier julia easyranges julia package dedicated life easier integer cartesian indices ranges package exports macros range reverserange single expression rewrite extended syntax rules produce int valued index range step range instance cartesianindices macros step sign result usage using easyranges brings macros range reverserange scope macros range expr reverserange expr evaluate expression expr special rules integers cartesian indices ranges integers cartesian indices treated specifically integers converted int ranges int valued ranges tuples integers tuples int arithmetic expressions involving indices ranges yield lightweight efficient ranges integers cartesian indices ranges produced range resp reverserange positive resp negative steps operators shift index ranges operator method intersect yield intersection ranges ranges ranges indices indices indices operator stretch ranges produce centered ranges operator shrink ranges shown example rules useful writing readable ranges loops sacrificing efficiency definitions easyranges indices integers ranges means ranges integers supertype ordinalrangeintint indices cartesian indices ranges means ranges cartesian indices supertype cartesianindices shift operations range reverserange expressions index range shifted operators amount specified index range equivalent range equivalent range equivalent range equivalent integervalued ranges shifted integer offset range range range range range using broadcasting operators except result int valued range step sign kept positive example reversemacro yields ranges negative steps reverserange reverserange reverserange reverserange cartesian ranges shifted cartesian index penalties execution time usually extra allocations range cartesianindices cartesianindex cartesianindices range cartesianindex cartesianindices cartesianindices range cartesianindices cartesianindex cartesianindices range cartesianindex cartesianindices cartesianindices similar broadcasting operators except lightweight instance cartesianindices positive increment produced intersecting range reverserange expressions operator obtained typing cap pressing tab key repl method intersect yield intersection ranges ranges ranges indices indices indices intersection indices yield range empty integers range else examples range range empty range range cartesianindex cartesianindex cartesianindices intersection index range index yields index range singleton belongs empty belong range else range idem examples range singleton range range empty range range intersection ranges range cartesianindices cartesianindex cartesianindices syntaxes supported julia range macro guarantees return int valued range forward positive step stretching range reverserange expressions operator obtained typing pm pressing tab key repl stretch ranges produce centered ranges expression yields index range stretched amount specified index assuming unit range range range integers integer dimensional cartesian dimensional cartesian index range shown expression range step preserved operation except result positive step expression i index i index offset yields index range centered assuming unit range range i i i sign correction range empty i integers i range integers dimensional cartesian index i range cartesian indices i integer tuple integers dimensional cartesian index specifying i single integer dimensional cartesian index identical specifying amount stretching dimension shrinking range reverserange expressions operator obtained typing mp pressing tab key repl shrink ranges expression yields result range index range shrink amount specified index range installation easyranges package official julia package installed follows using pkg pkg add easyranges example easyranges useful write readable expressions ranges loops instance suppose compute discrete correlation follows sum valid indices assuming abstract vectors julia equivalent code eachindex zero jfirst max firstindex firstindex jlast min lastindex lastindex jfirst jlast suitable type promotetypeeltype eltype expressions jfirst jlast ensure bounds code multidimensional arrays writes cartesianindices zero jfirst max cartesianindices cartesianindices jlast min cartesianindices cartesianindices jfirst jlast multidimensional cartesian indices julia helps lot code applicable whatever dimensions note syntax jfirstjlast supported cartesian indices julia syntactic sugar using broadcasting operator operator shortcut function intersect code rewritten cartesianindices zero cartesianindices cartesianindices efficient readable indeed statement cartesianindices cartesianindices makes loop indices cartesianindices cartesianindices required bounds principles applied unidimensional code eachindex zero eachindex eachindex suppose compute discrete convolution instead sum code multidimensional arrays writes cartesianindices zero cartesianindices cartesianindices cartesianindices cartesianindices latter equivalent cartesianindices simple change results dramatic slowdown expression cartesianindices yields array cartesian indices expression cartesianindices yields instance cartesianindices using range macro easyranges discrete correlation discrete convolution write discrete correlation cartesianindices zero range cartesianindices cartesianindices discrete convolution cartesianindices zero range cartesianindices cartesianindices require broadcasting operators aforementioned issue using macros range reverserange advantages result guaranteed int valued efficient indexing step increment consecutive indices result direction range yields positive step reverserange yields negative step syntax range expressions simplified extended operators stretching shrinking available base julia syntax extended package developed disturbing packages typepiraci