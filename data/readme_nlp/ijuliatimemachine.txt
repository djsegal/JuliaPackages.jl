ijuliatimemachine package provides capabilities useful running computational experiments ijulia notebooks allows return variables previous past useful run experiments julia cells minutes complete reexamine variables cell written allows spawn process run thread writing cells future process sandboxes variables impact cells especially useful plan run similar experiments copy paste modify cells running documentation found installation using pkg pkg add ijuliatimemachine running jupyter notebook start time machine typing import ijuliatimemachine name package commands require prefix recommend renaming tm ijuliatimemachine rest docs assume renamed tm time machine lot type tm time instead type using ijuliatimemachine export function vars macro past check threads available type threads nthreads thread macro modern computers allow thread configuration jupyter notebook starts threads running jupyter cell type export julianumthreads jupyter notebook mac following line file profile zshrc export julianumthreads course replace threads usually twice cores start julia auto option check threads chooses start basic usage note ijulia provides history functionality maintains dictionaries store input contents output ans cell answer computed cell examine cell time type tmpast look dictionary variables cell type tmvars stop saving type tmsavingfalse especially useful ijuliatimemachine causing errors start type tmsavingtrue ijuliatimemachine run tmunhook prevent ijuliatimemachine saving variable run tmdontsave free memory type tmclearpast saved information tmclearpastcells clears iterator range cells clears variables saved saved data kept structure internally call varchive stored tmvx save variables recover restarting jupyter save variable example using bson vars notebookbson vx tm vx load access dictionaries variables using tmvarsvx variables cell type vxold bson load vars notebookbson vx tm vars vxold picking variables dictionary slow emulate past macro variables dictionary main typing tmdicttomaintmvarsvxold course dictionary tmvarsvxold run code thread using tmthread cell examples tm thread myintensivefunction tm thread begin computationally intense lines tmrunning track cells running tmfinished course track stopped default notifications finished cells printed terminal jupyter started tmnotifyterminal choose notifications printed current jupyter cell setting tmnotifyjupytertrue demonstration time machine action examples directory saved jupyter notebook html pdf errors ijuliatimemachine develops cause strange errors appear cell usual reason type variable handle easy solution prevent saving variable dontsave fix probably disable time machine following command tm unhook contributing please help improve understands julia macros internals job feel free file issues create pull requests touch danielspielmanyaleedu improve worth save datatypes achievable past trickier threads consistent solution copy save functions create gui track spawned processes running finished features figure create tests package difficulty run inside jupyter issues output thread supposed stdout winds whatever cell current terrific capture instead ideally play sometimes error error running finalizer errorexceptionconcurrency violation detected details time machine saves variables main stores tmvx data structure described varchivejl time machine saves variables copied deepcopy particular save functions nice add copy functions track variables hashes using tmhash robust basehash variables store data hash lost unlikely notebooks heuristic probabilistic analysis hashing suggests chance collision variables saving features using ijulia postexecutehook processes launched thread postexecute hooks fire job finishes jobs finish putting data save queue data saved vx preexecute phase cell execution using preexecute hook queue managed spinlock threads write time acknowledgements development package supported simons investigator award daniel spielman