mixtapejl build status coverage documentation note usage package requires julia add mixtape mixtapejl static method overlay optimization tool operates julia type inference allows precisely insert semanticintruding changes lowered code replace codeinfo preoptimize codeinfo create forms static analysis tools uninferred codeinfo optimization allows customize optimization pipeline allowing users write semanticpreserving passes corecompilerircode operate inference note mixtapejl manages code cache execution engine llvmjl gpucompilerjl julia native pipeline closer separate compiler pipeline future mixtapejl integrated otherwise exposed standard apis compiler respects similar cassettejl completely static note architecture package found reader look kernelcompilerjl enzymejl julia frontend brutus compiler interface gpucompilerjl understand bit doubt afraid typeinferjl julia ssa form ir interfaces using mixtape using mixtape jit emit loadabi import mixtape compilationcontext allow transform optimize mixtapejl exports set interfaces allows interact aspects julia type inference modify lowered code method instances placement runtime cache code executed selfmanaged code generation pipeline code generation pipeline llvmjl gpucompilerjl infrastructure words futz stuff refactoring stuff interfaces documented experimental package pairs codeinfotoolsjl examples easy start simple recursive musings considered interpreters package contribution upsides completely static rely recursive pollution call stack overdub issue transforms operate pretype inference semanticintruding changes happen type inference runs lowered method body mixtapejl manages code cache interact native runtime system downsides mixtapejl custom execution engine gpucompilerjl code causes gpucompilerjl fail cause mixtapejl fail practice means pipeline dispatch tuples union specify dynamic typ