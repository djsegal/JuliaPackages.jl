vectorizedreduction installation using pkg pkg add vectorizedreduction usage library provides vectorized multithreading versions following functions mapreduce common derived functions reduce sum prod minimum maximum extrema count findmin findmax argmin argmax logsumexp softmax logsoftmax safe versions avoid underflowoverflow naming convention follows vectorized threading version prefixed vectorized threading version prefixed vt single exception rule vectorized threading versions functions listed prefixed vv avoid name collisions loopvectorization vectorizedstatistics library provides common reductions follow naming convention mapreducethen apply function element reduce result dimensions dims using binary function op apply result distances manhattan euclidean chebyshe minkowski norms norm treating arbitrary slices via dims keyword deviances counteq countne meanad maxad mse rmse means mean geomean harmmean entropies crossentropy shannonentropy collisionentropy minentropy maxentropy renyientropy divergences kldivergence gkldiv renyidivergence motivation writing numerical code wish perform reduction multiple dimensions natural means expressing relevant mathematical operation readers acquainted loopvectorizationjl immediately comes mind writing loops inevitably performance gain neverending pursuit fast code write loops produces specific code tailored dimensions instead liked write generic code parameterizing function index set dimensions package attempts resolve perpetual dilemma using metaprogramming hope time question worthwhile write loops gain performance lose genericity base implementation confidently reach vectorized versions provided package diving topics salient comments foremost package intended univeral replacement base implementations functions scope functions provided package limited numerical code subject restrictions imposed loopvectorization user encouraged familiarize package moreover exist limitations vfindmin friends resolved workaround provided performance cost user useful expanded capabilities vfindmin vfindmax base aspect author hopes rectify user encouraged read additional commentary strictly commentary provide dims directly kwargs optional performance enhancement arrays define multidimensional mapreduce specifies index set dimensions dims reduction occur base passes dims using keyword arguments sum dims sometimes incurs overhead ns admittedly negligible wishes ensure costs avoided interface supports direct calls provide init dims positional arguments consider replacing vectorized versions assumptions inherently unordered probablilty success independent index independent random permutation effective vector reduction occurs reasonable assumption types data monte carlo simulations inherent solution ode simply cos analysis hold inherent exists probability success depends caller exercise judgment based success land inevitably specific unable offer advice inherently unordered data define probability success probability true probability false cumulative probability evaluating elements pr binomial define linearized cost model time required evaluate element length vector denote t vectorized evaluation time element t vectorized evaluation time element crude estimate expected cost call t vectorized evaluation optimal t t rearranging vectorized optimal tt intuitively tt larger vectorized option optimal holding tt constant increasing results rapid decrease required vectorized option optimal consider following examples denoting tt julia generic function method julia element vectorfloat julia element vectorfloat due current implementation details base breakout occurs reduction carried entire array occur reducing subset dimensions current advice vany vall unless reducing entire array consider examples simple examples simple comparison julia rand julia benchmark mapreduce abs dims benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns s gc mean memory estimate bytes allocs estimate julia benchmark vvmapreduce abs dims benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns ns gc mean memory estimate bytes allocs estimate julia benchmark extrema dims benchmarktools trial samples evaluations range min max s s gc min max time median s gc median time mean s ns gc mean memory estimate bytes allocs estimate julia benchmark vvextrema dims benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns s gc mean memory estimate kib allocs estimate varargs examples somewhat standard fare convenient expressing bayesian computations julia a a a a rand rand rand rand julia benchmark mapreduce a a a a dims benchmarktools trial samples evaluations range min max s ms gc min max time median s gc median time mean s s gc mean memory estimate kib allocs estimate julia benchmark vvmapreduce a a a a dims benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns s gc mean memory estimate bytes allocs estimate strange stuff posterior predictive transformations julia benchmark vvmapreduce ifelse a a a benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns ns gc mean memory estimate bytes allocs estimate using ifelse boolean slow demonstration julia benchmark vvmapreduce a a a benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns ns gc mean memory estimate bytes allocs estimate mean posterior predictive transformation encounter bayesian model checking provides convenient example wishes compute pr y ydyd imagine a represents y a represents test variable samples computed functional markov chain samples pr computed vvmapreduce a a length a probability wish functionals purpose compute vvmapreduce a a length a functional vvmapreduce abs abs a a length a express commonly encountered reductions ease fused postreduction operator specified mean squared error vvmapreduce abs a a dims size a size a euclidean distance vvmapreduce abs a a dims findmin findmax examples examples extended syntax using vfindmin dims vfindmin dims former latter applies vfindmax vargmin vargmax easy express extended syntax efficient julia b b b rand rand rand julia b b b julia findmax vfindmax b b b true julia benchmark findmin b b b benchmarktools trial samples evaluations range min max s s gc min max time median s gc median time mean s s gc mean memory estimate kib allocs estimate julia benchmark vfindmin b b b benchmarktools trial samples evaluations range min max ns ns gc min max time median ns gc median time mean ns ns gc mean memory estimate bytes allocs estimate multidimensional example julia benchmark findmin abs b b b dims benchmarktools trial samples evaluations range min max s ms gc min max time median s gc median time mean s s gc mean memory estimate kib allocs estimate julia benchmark vfindmin abs b b b dims benchmarktools trial samples evaluations range min max ns s gc min max time median ns gc median time mean ns s gc mean memory estimate kib allocs estimate mapreducethen examples examples seemingly strange useful concept mapreduce op apply element result posttransform fused output array populated single pass hence mapreducethen op happens familiar quantities follow pattern shown l norm julia rand julia benchmark vmapreducethen abs dims benchmarktools trial samples evaluations range min max s s gc min max time median s gc median time mean s s gc mean memory estimate bytes allocs estimate julia benchmark mapreduce abs dims benchmarktools trial samples evaluations range min max s s gc min max time median s gc median time mean s ns gc mean memory estimate kib allocs estimate euclidean distance julia euclidean dims mapreduce abs dims dims julia veuclidean dims vmapreducethen abs dims dims julia benchmark veuclidean dims benchmarktools trial samples evaluations range min max s s gc min max time median s gc median time mean s ns gc mean memory estimate bytes allocs estimate julia benchmark euclidean dims benchmarktools trial samples evaluation range min max s ms gc min max time median s gc median time mean s s gc mean memory estimate kib allocs estimate acknowledgments original motivation vectorized multithreaded multidimensional findmin taking variable array arguments story similarity findmin mapreduce motivated broad approach initial attempt visible attic deliver performance apparent comparison elrod approach multidimensional forms vectorizedstatistics appreciated beauty branching generated functions decided tour lowhanging fruit package result future postreduction operators reductions index subsets dimension actual documentation elsewhere loopvectorizationjl package tulliojl express reductions using index not