symboliccontrolsystems utilities controlsystemsjl types sympyjl symbolicsjl symbols coefficients generation code filtering lti systems package exports names type sympysym laplace transform variables build symbolic transfer functions build symbolic transfer functions symbolicsjl symbols create using using symbolics variables installation users typically install controlsystemsbase symboliccontrolsystems controlsystemsbase contains basic controlsystems functionality system types etc symboliccontrolsystems using pkg pkg add controlsystemsbase symboliccontrolsystems usage examples julia using controlsystemsbase symboliccontrolsystems julia vars define sympy symbolic variables julia sample time julia tf tf transferfunctioncontinuous sisorationalsym continuous time transfer function model julia gd tustin discretize julia sym convert transferfunction symbolic expression julia ex define symbolic expression julia tf ex convert symbolic expression transferfunction transferfunctioncontinuous sisorationalsym continuous time transfer function model julia replace symbols t d w define system parameters julia gd symnum gd pair t d w transferfunctiondiscretefloat sisorationalfloat e e e e sample time discrete time transfer function model latexstring julia latextf dfracws dw dw w w code generation function code symboliccontrolsystemsccodeltisystem returns string code filtering signal linear system symbolic variables expected inputs generated function transferfunction handled concept static variables variable remembers value function invocation signature generated function transferfunction expects input arguments alphabetical except input comes code generation systems multiple inputs outputs mimo handled statespace systems call ss convert transfer function statespace system usage example follows using controlsystemsbase symboliccontrolsystems vars define symbolic variables sample time tf tf gd tustin discretize code symboliccontrolsystems ccode gd cse true path mktempdir filename joinpath path code outname joinpath path write joinpath path filename code run gcc filename lm shared outname test code generates output lsim julia function clsim libc libdl dlopen outname lib fn libc libdl dlsym lib transferfunction map ccall fn float float float float float randn random input signal t d w define system parameters clsim t d w filter function filter gd symnum gd pair t d w replace symbols numeric constants y lsim ss gd filter using julia using plots linearalgebra test test norm y norm y e plot lab layout plot y lab code julia sp linestyle solid dash display note numerical accuracy usual caveats transferfunction filtering applies transfer functions cause numerical consider filtering transfer function series convert system balanced statespace system generate code instead lecture notes slide onwards controlsystems docs numerical accuracy function converts transfer function statespace system performs automatic balancing code gain scheduled systems following example writes code interpolates linear systems interpolation vector defines interpolation system example doublemassspring damper inertia load allowed vary function doublemassmodel jl inertia load jm inertia motor spring constant c dampings c c jm c c jm jm c jm jl c jl jl c c jl jm ss inertias interpolation sys cd doublemassmodel inertia inertia symboliccontrolsystems printcarray stdout sys massspringdamper print code functions interpolation system matrices docstring printcarray customization opt