parallelmagics safe parallelism using compiler analysis parallelmagicsjl aiming providing safe parallelism julia programmers brainer parallelism using compiler analysis code parallelized compiler guarantees safety wishlist static dynamic detection programs worth parallelizing wishlist diagnosis mechanisms understanding fixing parallelizability program package incomplete party trick usable library demo parallelmagicsjl provides apis parallelmagicssum autoparallelize invocation provides macro importall equivalent using parallelmagics sum reduce map autoparallelize supported functions current lexical scope repl session julia using parallelmagics julia parallelmagics importall parallelmagics version sum etc julia sum parallelmagics sum true parallelmagicsjl enable remark julia parallelmagics enableremark calling parallelmagics functions automagically parallelize function julia sum sin info auto parallelized sinceparallelmagicsjl compiler analysis userdefined functions iterator comprehensions julia userdefinedfunction sin julia sum userdefinedfunction isodd info auto parallelized parallelmagicsjl refuses parallelize invocation api compiler prove functions computing result accessing objects provided user effectfree example writing global variable considered effectful parallelmagicsjl refuses call function updates global variable parallel julia evil julia sum global evil sin info failed auto parallelize bug note result parallelized computation tree parallel sequential implementations moment parallelmagicsjl exports magicex executor various juliafolds packages floopsjl using floops using parallelmagics function xs floop magicex xs reduce sin return evil function bad xs floop magicex xs global evil reduce sin return julia info auto parallelized julia bad info failed auto parallelize acknowledgements approach heavily relies various improvements julia compiler keno fischer ref julialangjulia shuhei kadowaki ref julialangjulia