platformawarejl package improving practice platformaware programming julia helps hpc package developers write code versions computationally intensive functions kernels according assumptions features execution platform platformaware programming define platformaware programming practice coding computationally intensive functions called kernels using appropriate abstractions programming interfaces performance tuning techniques advantage features target execution platform practice programming hpc applications platformaware programming especially suitable developer employing heterogeneous computing resources accelerators gpus fpgas mics especially conjunction multicore cluster computing example suppose package developer providing specialized kernel implementation nvidia a tensor core gpus meeting demand users specific cloud provider offering virtual machines accelerators model developer cuda programming device supported computing capability users require support cloud providers support accelerator models vendors example amd instinct mi intel agilex series fpga soc fpga scenario developer challenge coding deploying multiple devices typical platformaware programming scenario platformawarejl useful becoming increasingly common heterogeneous computing platforms increases accelerate ai data analytics applications target users platformawarejl aimed primarily package developers dealing hpc concerns especially using heterogenous computing resources assume package users using package operations concerned implemented usage tutorial simple example readers reproduce test platformawarejl features consider performing convolution operation using fast fourier transform fft user implement fftconv function fft function offered userdefined package called myfftjl capable performing fft accelerator gpu using myfft fftconv fft conj fft tutorial create myfftjl demonstrating basics install platformawarejl create platformaware package creating myfftjl project julia repl shown screenshot run generate myfftjl create project called myfftjl run cdmyfftjl move directory created project activate enable current project myfftjl current julia repl session operations create standard hello world project contents following snapshot installing platformawarejl coding platformaware package add platormawarejl dependency myfftjl running following command julia repl add platformaware load platfomawarejl package using platformaware import platformaware read output message platformtoml platform description file containing set keyvalue pairs describing feature underlying platform created user running platformwaresetup performs sequence feature detection operations platform platformtoml written humaneditable format modified users add undetected platform features ignore detected features sketching myfftjl code implement fft kernel function edit srcmyfftjl file sketch code fft kernel methods module myfft import platformaware setup platorm features parameters platform feature platform feature acceleratorcount platform feature acceleratorapi fallback kernel platform default fft opencl kernel called platform aware fft acceleratorcount atleast acceleratorapi api opencl cuda kernel platform aware fft acceleratorcount atleast acceleratorapi api cuda export fft sequence platorm feature macro declarations specifies set platform parameters subsequent kernel method declarations assumptions distinguish refer table list supported platform parameters default included fft kernel methods differentiated using parameters acceleratorcount acceleratorapi denote respectively assumptions accelerator devices native api support platorm default macro declares default kernel method called none assumptions kernel methods declared using platform aware macro calls valid default kernel unique avoid ambiguity finally kernels accelerators support opencl cuda apis declared using macro platform aware list platform parameters declared regular parameters braces types denote assumptions example atleast denotes quantifier representing units resource api cuda api opencl denote types qualifiers refer cuda opencl apis programmer careful declare kernel methods overlapping assumptions avoid ambiguities dependencies adding code kernels add code load dependencies directly adding following code srcmyfftjl file import platformaware import cuda import opencl import clfft import fftw add cudajl opencljl clfftjl ffftjl dependencies myfftjl execute following commands julia repl add cuda opencl clfft fftw note clfftjl available juliahub due compatibility issues recent versions julia clfftjl maintainers address issue error clfft dependency clfftjl fork running add performance optimization advantage platformaware features selectively load dependencies speeding loading myfftjl declare kernel function called whichapi srcmyfftjl platform feature declaration platform default whichapi fftw platform aware whichapi acceleratorapi api cuda cufft platform aware whichapi acceleratorapi api opencl clfft add code selective dependency loading api whichapi api cufft import cuda elseif api clfft import opencl import clfft else api fftw import fftw srcmyfftjl code finally complete code srcmyfftjl implementation kernel methods module myfft using platformaware platform feature platform feature acceleratorcount platform feature acceleratorapi platform default whichapi fftw platform aware whichapi acceleratorcount atleast acceleratorapi api cuda cufft platform aware whichapi acceleratorcount atleast acceleratorapi api opencl clfft api whichapi info seleted fft api api api cufft using cuda const cufft cuda cufft elseif api clfft using opencl using clfft const clfft clfft else api fftw using fftw const fftw fftw fallback kernel platform default fft fftw fft opencl kernel platform aware function fft acceleratorcount atleast acceleratorapi api opencl eltype ctx queue cl createcomputecontext bufx cl buffer ctx copy hostbuf clfft plan ctx size clfft setlayout interleaved interleaved clfft setresult inplace clfft bake queue clfft enqueuetransform forward queue bufx reshape cl read queue bufx size cuda kernel platform aware fft acceleratorcount atleast acceleratorapi api cuda cufft fft cuarray export fft module myfft running testing fft kernel methods test fft convolution julia repl session myfftjl directory execute following commands note receive ambiguity error executing fftconv panic read paragraphs import pkg pkg activate using myfft function fftconv imgkrn padkrn zeros size img copyto padkrn cartesianindices krnkrn cartesianindices krn fft img conj fft padkrn img rand float image krn rand float kernel fftconv imgkrn fft kernel method corresponds current platformtoml selected platformtoml created default kernel method selected reader consult platformtoml file platform features detected platformawaresetup reader selected fft api logging messages using myfft carefully modifying platformtoml file reader test kernel methods example nvidia gpu recognized platformawaresetup acceleratorapi entry platformtoml probably include supported cuda opencl versions example nvidia geforce mx gpu acceleratorapi cudaopenclunsetunsetopenglvulkandirectx lead ambiguity error multiple dispatch able distinguish opencl cuda kernel methods based acceleratorapi parameter alternatives edit platformtoml setting cuda opencl platform type cuda opencl unset acceleratorapi entry select manually kernel method selected modify cuda kernel signature including example acceleratormanufacturernvidia list platform parameters nvidia gpus preference cuda opencl applied accelerators vendors recommended guideline suggest following guideline package developers advantage platformwarejl identify kernel functions functions computational requirements package natural candidates exploit parallel computing acceleration resources provide default fallback method kernel function using platform default macro identify target execution platforms provide specialized methods kernel function choose set execution platforms kernels select platforms kernel independently helping choice look following information sources table supported platform parameters help assumptions platformawarejl allow target execution platorm database supported platform features features models processors accelerators currently suported platformawarejl described amd accelerators processors intel accelerators processors nvidia accelerators platform select define set assumptions features guide implementation decisions define assumptions platform leading multiple implementations kernel platform example decide implement parallel algorithms solve according nodes interconnection characteristics cluster provide platformaware methods kernel function using platform aware macro implementing testing platformaware methods list platform parameters assumptions target execution platform optionally instruct platformawarejl parameters using platform feature macro contributing contributions welcome feature requests suggestions please issue encounter license platformawarejl licensed mit licens