iprofilejl package contains instrumenting profiler julia language profilers mainly code optimization particularly bottlenecks sampling profiler base package contain sampling profiler moved julia proper built sampling profiler fewer limitations package recommended essentially documentation api reference sampling profiler fixing bugs package anymore happy accept pull requests instrumenting profiler instrumenting profiler provides detailed information including times line executed total run time spent line instrumenting profiler requires code automatically modified encapsulating iprofile begin significant performance cost installation julia package manager pkg add iprofile usage starts similarly using iprofile encapsulate code macro call iprofile begin function f int return function f float return function f return f iprofile begin load file execute code profile f f f uint f view execution times type iprofile report various options controlling profiling iprofile report display cumulative profiling results iprofile timings accumulated start zero iprofile profiling remove iprofile begin blocks iprofile profiling tips using instrumenting profiler discard results run include overhead jitcompile subfunctions primary source variability garbage collector runs instrumentation lines execution time added time line code contributes fastrunning line puzzlingly slow reduce variance run gc profiling code tends accumulate bunch temporaries cleaned middle run calling gc beginning cause collector run code time misleading consistent result approach multiple runs explicit gc hope collector runs run cost line probably reflected runs shortest time line limitations instrumenting profiler instrumenting profiling adds performance overhead significant prevent subsection code profiled encapsulating inside begin block block profiled individual lines inside block separately timed profiler tries compensate overhead reported times naturally leads degree uncertainty execution time individual lines significantly currently profiler compensate instrumentation profiled subfunctions consequently recommended avoid profiling nested code chunk probably pick individual functions functions profile separately limitations addressed sampling profiler consequently probably start sampling profiler instrumenting profiler detailed attention particular function warr