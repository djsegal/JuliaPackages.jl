nlopt module julia module provides julialanguage interface freesource nlopt library nonlinear optimization nlopt provides common interface optimization algorithms including global local optimization algorithms using function values derivativefree algorithms exploiting usersupplied gradients algorithms unconstrained optimization boundconstrained optimization nonlinear inequalityequality constraints nlopt introduction overview types addresses nlopt accessing specialized api using generic mathoptinterface mathprogbase interfaces nonlinear optimization methods documented installation julia install nloptjl package package manager pkgaddnlopt windows os platforms nlopt binaries automatically installed platforms julia attempt build nlopt source compiler installed using mathoptinterface nlopt implements mathoptinterface interface nonlinear optimization means interchangeably optimization packages modeling packages jump providing handwritten derivatives note nlopt exploit sparsity jacobians nlopt solver named nloptoptimizer takes parameters algorithm stopval ftolrel ftolabs xtolrel xtolabs constrtolabs maxeval maxtime initialstep population seed vectorstorage algorithm parameter required optional meaning acceptable values parameters except constrtolabs match descriptions specialized nlopt api constrtolabs parameter absolute feasibility tolerance applied constraints tutorial following example code solves nonlinearly constrained minimization nlopt tutorial using nlopt function myfunc vector grad vector length grad grad grad sqrt return sqrt function myconstraint vector grad vector length grad grad grad opt opt ldmma opt lowerbounds inf opt xtolrel e opt minobjective myfunc inequalityconstraint opt myconstraint e inequalityconstraint opt myconstraint e minfminxret optimize opt numevals opt numevals function evaluations println minf minx numevals iterations returned ret output iterations returned xtolreached nlopt interfaces languages create opt object analogous nloptopt encapsulates dimensionality algorithm ldmma various functions specify constraints stopping criteria aspects solved using jump interface nlopt using jump using nlopt model model nlopt optimizer setoptimizerattribute model algorithm ldmma a b a b variable model x variable model x nlobjective model min sqrt x nlconstraint model x a x b nlconstraint model x a x b setstartvalue x setstartvalue x jump optimize model println objectivevalue model value x value x output note mathoptinterface interface sets slightly convergence tolerances default default values nloptdefaultoptions dictionary outputs identical algorithms local optimizer set localoptimizer model model nlopt optimizer setoptimizerattribute model algorithm auglag setoptimizerattribute model localoptimizer ldlbfgs parametrize local optimizer pass nloptopt interface model model nlopt optimizer setoptimizerattribute model algorithm auglag localoptimizer nlopt opt ldlbfgs numvariables localoptimizer xtolrel e setoptimizerattribute model localoptimizer localoptimizer numvariables variables optimization reference main purpose section document syntax unique features julia interface detail underlying features please refer documentation nlopt reference using julia api nlopt julia julia program include line using nlopt imports nlopt module symbols alternatively import nlopt nlopt symbols namespace prefix functions nlopt nloptopt opt type nlopt api revolves object type opt via functions acting object parameters optimization specified dimensions algorithm stopping criteria constraints objective function etcetera finally calls optimize function perform optimization object normally created via constructor opt opt algorithm algorithm nlopt algorithms values dimensionality optimization parameters whereas algorithms specified nloptalgorithm constants form nloptldmma nloptlncobyla etcetera julia algorithm values symbols form ldmma lncobyla etcetera nlopt prefix replaced create julia symbol copyoptopt function copy object equivalent nloptcopy api error functions exception thrown algorithm dimension parameters object immutable changed constructing object query object ndims opt opt algorithm string description algorithm via algorithmname opt opt objective function objective function specified setting properties opt minobjective opt maxobjective depending wishes minimize maximize objective function respectively function form function vector grad vector length grad set grad gradient return value return value value function float array length optimization parameters dimension passed opt constructor addition argument grad empty lengthgrad grad float array length return set gradient function respect optimization parameters grad return contain partial derivative grad empty optimization algorithms gradient information algorithms listed derivativefree grad argument empty computed algorithms gradient information grad empty calls note grad modified function means using indexing operations grad overwrite contents grad example grad x grad array x overwriting contents instead explicit loop grad x bound constraints bound constraints specified setting properties opt lowerbounds lb unionabstractvectorreal opt upperbounds ub unionabstractvectorreal lb ub real arrays length dimension passed opt constructor convenience instead single scalar lb ub set lowerupper bounds optimization parameters single constant retrieve values lowerupper bounds properties opt lowerbounds opt upperbounds return vectorfloat arrays specify unbounded dimension inf nonlinear constraints nonlinear constraints specify nonlinear inequality equality constraints functions inequalityconstraint opt opt fc tol equalityconstraint opt opt tol arguments fc form objective function optional tol arguments specify tolerance defaults zero judging feasibility purposes stopping optimization default tol optinequalityconstraint fc optequalityconstraint hc call function adds constraint set constraints replacing constraints remove inequality equality constraints call following functions removeconstraints opt opt vectorvalued constraints nonlinear constraints specify vectorvalued nonlinear inequality equality constraints functions inequalityconstraint opt opt tol abstractvector equalityconstraint opt opt tol abstractvector tol array tolerances constraint dimension dimensionality constraint determined lengthtol constraint function form function result vector vector grad matrix length grad set grad gradient result value c result value c result float array length equals dimensionality constraint length tol return set constraint results float array length dimension passed opt constructor return value function ignored addition argument grad empty lengthgrad grad d array size return set gradient function respect optimization parameters grad return contain partial derivative grad empty optimization algorithms gradient information algorithms listed derivativefree grad argument empty computed algorithms gradient information grad empty calls inequality constraint corresponds equality constraint corresponds tolerance tol purposes termination criteria add multiple vectorvalued constraints scalar constraints stopping criteria explained api reference introduction multiple options stopping criteria specify unspecified stopping criteria disabled innocuous defaults stopping criteria property optopt object set value stopping criterion meanings criterion exactly api opt stopval stop objective value stopval found defaults inf opt ftolrel opt ftolabs relative absolute tolerance function value defaults opt xtolrel opt xtolabs absolute relative tolerances optimization parameters default xtolabs set scalar tolerance inputs vector length dimension specified opt constructor tolerance parameter opt maxeval stop function evaluations exceeds mev negative limit default opt maxtime stop optimization time exceeds negative limit default forced termination caller wish force optimization halt reason unknown nlopt example user presses ctrl error sort objective function throwing exception inside objectiveconstraint functions optimization halted gracefully exception thrown caller regarding exceptions julia equivalent nloptforcedstop api throw forcedstop exception performing optimization desired optimization parameters specified object optopt perform optimization calling optfoptxret optimize opt opt abstractvector input array length dimension opt constructor giving initial guess optimization parameters return value optx array containing optimized values optimization parameters optf contains optimized value objective function ret contains symbol indicating nlopt return code alternatively optfoptxret optimize opt opt vectorfloat modifies returning optx failure negative return codes optimize throws exception exceptions return values return values return values api except nlopt prefix replaced return values success xtolreached etcetera instead nloptsuccess etcetera exceptions error codes api replaced julia api thrown exceptions following exceptions thrown various routines objectiveconstraint functions throw exception execution optimize caught nlopt optimization halted gracefully optoptimize rethrow exception caller localsubsidiary optimization algorithm algorithms especially mlsl auglag optimization algorithm subroutine typically local optimization change local search algorithm tolerances setting opt localoptimizer localopt opt localopt opt object parameters determine local search algorithm stopping criteria algorithm parameters objective function bounds nonlinearconstraint parameters localopt ignored dimension localopt match opt makes copy localopt object freely change original localopt afterwards affecting opt initial step size api set initial step sizes derivativefree optimization algorithms via optinitialstep property opt initialstep dx dx array nonzero initial steps dimension single wish initial steps dimensions initialstepoptopt abstractvector returns initial step starting guess optimizeopt stochastic population api set initial population stochastic optimization algorithms property opt population population zero default implies heuristic default decided individual algorithms pseudorandom stochastic optimization algorithms nlopt pseudorandom generated mersenne twister algorithm based code makoto matsumoto default seed random generated system time sequence pseudorandom time run program deterministic sequence pseudorandom sequence run run set seed calling nlopt srand seed integer reset seed based system time call nloptsrandtime normally call called automatically useful rerandomize pseudorandom calling nloptsrand set deterministic seed vector storage limitedmemory quasinewton algorithms api set stored vectors limitedmemory quasinewton algorithms via integervalued property opt vectorstorage default nlopt heuristic nonzero value determined individual algorithms version version nlopt global variable nloptversion versionnumber versionnumber built julia type julia standard library author module initially written steven johnson subsequent contributions authors git histori