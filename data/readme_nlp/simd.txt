simd explicit simd vectorization julia julia ci v nightly overview package allows programmers explicitly simdvectorize julia code ideally compiler julia llvm able automatically especially straightforwardly written code practice variety reasons programmer left uncertainty code actually vectorized usually look generated machine code determine compiler actually vectorized code exposing simd vector types corresponding operations programmer explicitly vectorize code guarantee generated machine code efficient relieves compiler determining legal vectorize code deciding beneficial rearranging code synthesize vector instructions simple example manually vectorized code adds arrays using simd function vadd xs vector ys vector typevec assert length ys length xs assert length xs lane vecrange inbounds length xs xslane yslane simplify example code vector type vec passed explicitly additional type argument routine called vaddxs ys vecfloat note code expected outperform standard scalar operation julia optimizer easily rewrite simd hood merely shown illustration load store data vector using simdjl simd vector operations simd vectors similar fixedsize arrays simple types element types supported bool int uint float simd package provides usual arithmetic logical operations simd vectors abs cbrt ceil copysign cos div exp exp exp flipsign floor fma inv isfinite isinf isnan issubnormal log log log muladd rem round sign signbit sin sqrt trunc vifelse currently missing exponent ldexp significand trigonometric functions operators functions applied elementwise applied element parallel yielding simd vector result means multiplying vectors yields vector comparing vectors yields vector booleans behaviour strange slightly unusual corresponds machine instructions provided hardware usually vectorize loops simd package provides conversion operators scalars tuples simd vectors simd vectors tuples additionally getindex setindex functions access individual vector elements simd vectors immutable tuples setindex note exclamation mark name returns modified vector create vector elements float xs vec float create vector tuple convert tuple ys vec float ys ntuple float ys y ys getindex update element vector ys base setindex ys ys reduction operations reduction operations reduce simd vector scalar following reduction operations provided maximum minimum sum prod example vec float sum reduce bit operations julia vec uint uint x x x x julia reduce x julia reduce x overflow operations overflow operations operation flag indicates result operation overflowed note julia llvm julia functions basecheckedaddwithoverflow basecheckedsubwithoverflow basecheckedmulwithoverflow extended vec julia vec int int julia base checked addwithoverflow int bool julia base checked addwithoverflow int int true julia base checked subwithoverflow int bool julia base checked mulwithoverflow int bool saturation arithmetic saturation arithmetic version arithmetic operations limited fixed range minimum maximum value result operation maximum value result set clamped maximum minimum clamped minimum julia vec int int julia simd addsaturate int julia simd subsaturate int fastmath simdjl hooks fastmath macro operations fastmath block sets fast flag floating intrinsics supports operations compare example generated code following functions f f fastmath vec float codenative f tuple debuginfo none codenative f tuple debuginfo none normal caveats using fastmath naturally applies accessing arrays using explicit simd vectorization convenient allocate arrays arrays scalars arrays vectors vload vstore functions allow reading vectors writing vectors arrays accessing contiguous array elements arr vector float undef xs vload vec float arr vstore xs arr vload call reads vector size array reads arr similarly vstore call writes vector xs array elements arr values read stored contiguous locations vgather function load vector called gather operation idx vec vgather arr idx likewise storing contiguous locations scatter vscatter function arr zeros vec idx vec vscatter arr idx vload vstore vgather vscatter written using indexing notation lane vecrange arrlane vload arrlane vstore idx vec arridx vgather arridx vscatter inbounds usage note vload vstore etc default check indices bounds array boundschecks using inbounds macro inbounds vload crucial performance vector shuffles vector shuffle available shufflevector function example vec int vec int mask shufflevector val mask int mask specifies vector elements counted starting follow llvm convention care values result vector symbol undef simd vector type result simd vector element type length mask function specialized value mask val construction call operand version function vec int mask shufflevector val mask int representing simd vector types julia llvm simd vectors represented via special vector type llvm supports vectors primitive types integers including booleans floating pointers llvm directly provides arithmetic logic operations add subtract bit shift select etc vector types example adding represented llvm res fadd double arg arg adding vectors looks res fadd double arg arg implementing simd operations julia principle straightforward application llvmcall principle function floatx floatx llvmcall res fadd double ret double res floatx tuplefloatx floatx julia representation datatype floatx slightly complex ntuple element type specially marked wrapped type basevecelement ntuple basevecelementfloat julia implements special rule translates tuples element type basevecelement llvm vectors tuples translated llvm arrays tuple elements type otherwise llvm structures representation drawbacks tedious define arithmetic operations simd vectors define arithmetic julia tuple types defined additional methods generic tuples code break result define simd vector type vec struct vec elts ntuplevecel