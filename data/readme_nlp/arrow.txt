deprecation notice package deprecated favor juliadataarrowjl writing package featherjl reads writes legacy feather v files feather v deprecated favor feather v implemented juliadataarrowjl unlikely featherjl maintained future recommend using featherjl pyarrow convert data feather format arrow pure julia implementation apache arrow data standard package provides julia abstractvector objects referencing data conforms arrow standard allows users seamlessly interface arrow formatted data deal existing julia code please document description arrow memory layout warning package julia ptr pointer objects unsafe methods performance reasons principle package completely safe little loss performance waiting performance improvements base arrowjl tested safe proper usage user arrowjl objects reference appropriate locations data user example arrowjl object reference data past array resulting program segfault installation import pkg pkg add arrow arrow categoricalarrays dependency missings arrowvector objects arrow package exposes arrowvector abstractvector objects provide interface arrow formatted data providing methods convert julia objects arrow data format simplest primitive arrowvector object maintains reference data buffer vectoruint describes contiguous subset automatically convert underlying data type demand primitive type describe bits type elements types isbits true particular strings following example create primitive address subset buffer data underlying data create buffer buff reinterpret uint data simple arrow format julia memory format coincide primitive int buff arguments buffer start location length returns returns arrow vector returns arrow vector assignment supported abstractprimitive types change reflected buff data primitive buffer reference create arrowformat arrowformat function automatically determines appropriate arrowvector provided array rawvalues returns created buffer vectoruint indexing arrowvector returns ordinary julia arrays containing data stored arrow buffer arrowvector objects built combinations primitive enter primitive repl list constructors note follows explicit methods constructing arrowvector type raw data buffer bit confusing subbuffer locations track strongly suggested locate interface described section nullableprimitive type arrow format supports arrays bits type elements null provide nullableprimitive abstractvectorunionmissing type hood nullableprimitive type pair primitive references primitiveuint bit mask describing elements nullableprimitive null references underlying data following example create nullableprimitive existing buffer buff xd reinterpret uint bitsxd nullableprimitive float buff arguments buffer bitmask location values location length returns returns missing returns missing assignment supported nullableprimitive change reflected buff nullableprimitive missing buffer reference create create seperate buffers bit mask values create contiguous buffer containing nullableprimitive array missing arrowformat missing arrowformat automatically determine arrowvector type rawvalues bitmask returns xd enter nullableprimitive repl list constructors list type underlying dataformat arbitrary length objects strings complicated objects require dedicated type provide list abstractvector containing values contained strings objects contain offsets describing string arrow format suggests offsets int length example offs reinterpret uint int vals convert vectoruint abcdefg buff offs vals type parameters list return type offsets type integer list stringint buff length offs uint length vals arguments buffer offsets location values location length list value type values length alternatively construct values separately primitive uint buff length offs length vals list stringint buff arguments buffer offset location length values primitive create piece individually primitive int buff note int type required offsets arrow format primitive uint buff length offs length vals list string returns abc returns de returns fg returns normal vectorstring copies data error assignments currently supported list types list abc de fg create data list array abc de fg require contiguous buffer arrowformat abc de fg arrowformat automatically determines arrowvector type rawvalues offsets returns reinterpretuint rawvalues values returns convertvectoruint abcdefg note list nullablelist constructor abstractvector values type example uint warning currently values offsets boundschecked performance reasons means extra offsets properly constructed recommended arrowformat list offsets construct offsets manually enter list repl list constructors nullablelist type nullablelist abstractvectorunionmissing type nullablelist list nullableprimitive primitive addition offsets values contains bit mask describing elements null probably predict example look bmask x bitsx offs reinterpret uint int vals convert vectoruint abcdefg buff bmask offs vals nullablelist stringint buff length offs uint length vals arguments buffer bit mask location offsets location values location list length values type values length provide piece separately primitive uint buff required eltype uint primitive int buff required eltype int primitive uint buff length offs length vals nullablelist stringint returns abc returns missing returns fg de error assignments currently supported list types create lists primitives involve copying nullablelist primitiveuintint creating data familiar nullablelist abc missing fg nullablelist array abc missing fg arrowformat abc missing fg enter nullablelist repl list constructors dictencoding type arrow format supports dictionary encoding arrays means simply instead array short array containing view values array contains pointers values required arrow standard int provides compressing arrays relatively values repeated arrowjl julia package categoricalarraysjl support functionality categoricalarray dictionary encoded default converted arrow array objects aspect confusing references required based indices contrary julia based approach else practice matter references constructed manually following real constructed data described refs primitive int vals list fire walk dictencoding refs vals returns fire return walk returns fire walk create julia data dictencoding fire walk benefit dictencoding list arrowformat automatically convert categoricalarray object arrow formatted dictencoding arrowformat categorical fire walk note indexing dictencoding object return objects type vector exception indexing categoricalarray returned equivalently categorical retrieve slices categoricalarray categorical function categorical slice bitprimitive nullablebitprimitive types arrow format specifies bool stored single bits special type required store arrow formatted bool data analogous julia bitvector object note stopping serializing julia bool bit readable outside julia arrowformat automatically convert abstractvectorbool abstractvectorunionboolmissing bitprimitive nullablebitprimitive respectively types provide usual constructors seen types serializing julia data stopping storing julia bitstype data necessarily specified arrow format example primitivecomplex expected arrowvector objects deliberately designed construct output depends type parameter arrowformat pick appropriate arrowvector arrow formatting data hidden conversions happening hood type parameter arrowvector object serialize type isbits true principle serialize complicated types using list caveat type explicitly described arrow standard readable outside julia locate interface vectoruint locating data objects pedantic arrowvector objects wrong memory locations lead scary undefined behavior arrow provides interface significantly easier provided metadata sufficiently organized interface check locations specify proper alignment guarantee correctness idea create julia struct somehow represent metadata various objects access following assume defined struct objmetadata whatever locate objects determine types goes type parameters limited object arbitrarily define appropriate methods described call locate data obj data data buffer return type container constructed obj objmetadata automatically create arrowvector object represents data type parameter provide specifies return type example construct list locatedata string obj nullablebitprimitive locatedata unionboolmissing obj minimal interface minimal implementing locate interface requires defining following methods locate length obj objmetadata length elements arrowvector locate values obj objmetadata location values return value data char data lists locate valueslength obj objmetadata length values subbuffer elements primitives lists locate bitmask obj objmetadata location null bitmask locate offsets obj objmetadata location offsets buffer course define subset example primitive define locatelength locatevalues lists needn define locatevalueslength locateoffsets overriding defaults interface adequate purposes example define methods listed offsets type default int arrow format standard furthermore type arrowvector determined desired return value primitive bitstypes list strings nullableprimitive unionmissing bitstype etc override defaults detailed methods value data specified defining locatevalues methods value data type overall container return type override locate values obj objmetadata locate values locate values obj locate valueslength obj slightly values constructor list values list return type locate values type obj objmetadata locate values uint locate values obj locate valueslength obj reason define locatebitmask defined locatebitmask locate bitmask obj objmetadata locate bitmask locate bitmask obj locateoffsets override default offset type int locate offsets obj objmetadata locate offsets int locate offsets obj described override default container types recommended useful custom types remember usable outside julia locate containertype typecustomtype obj objmetadata nullableprimitive returned value type paramters constructors receiving arguments receive defined locate methods listed previous section course constructors return proper type output writing data writing somewhat simpler reading arrow figure convert ordinary julia data arrow formatted data addition arrowformat functions writing data rawpadded writepadded rawpadded takes primitive argument returns properly arrow padded vectoruint appropriate writing data directly arrow formatted buffer writepadded write properly padded array io object nullablelist data writepadded io bitmask offsets values write bitmask offsets values contiguously properly padded dictencoding data writepadded io references writes references writepadded io levels offsets bitmask values writes nullablelist following table subbuffers relevant arrowvector subbuffers accessed primitive simply example bitmask isa arrowvectorunionmissing returns primitive representing null bit mask values bitmask offsets primitive nullableprimitive list nullablelist bitprimitive nullablebitprimitive dictencoding bit complicated contain types references data pool accessed references pool respectively datetime arrowjl provides arrow formatted datetime objects julia equivalents arrowdatestampdatesdate arrowtimestampdatesdatetime arrowtimeofdaydatestime arrowformat function automatically convert objects julia dates types appropriate arrow format constructing various arrowvector objects conversion specified explicitly primitivetimeofday vectordatestime stopping serializing julia dates objects readable outside julia units datetime timeofday stored specified datestimeperiod example store datetime resolution converttimestampdates datetime example writing development example package built arrowjl fork featherjl todo lot performance pass performance ok according basic sanity checks code neither optimized thoroughly benchmarked extensive unit tests hopefully soon support arrow struct