traitwrappersjl traitsystem object trait type accessible via function object popular trait system julia holy traits please emergent features julialang ii traits discusses holy traits examples blogs traits systems julia based using traits arguments multiple arguments receive traits treatment holy traits feel unsatisfying indeed sometimes code harder read traitwrapperjl concieved solve issues traitwrappersjl explored illustrated examples sections abstracttraitwrapper type abstracttraitwrapper type defines method objectabstracttraitwrapper return object trait using traitwrappersjl example implementing iterable trait haseltype holy trait implementation looks using base haseltype fnholy itr fn iteratoreltype itr itr fnholyn haseltype itr begin println itr eltype defined println itr equivalent implementation using traitwrappersjl firstly define traitwrapper type struct eltypetypetraitwrapper iteratoreltype abstracttraitwrapper object eltypetypetraitwrapper typeofiteratoreltype fntw itr fntw eltypetypetraitwrapper itr fntw itr eltypetypetraitwrapper haseltype begin println itr eltype defined println object itr function argument traits traitwrapper attractive imagine arguments receive traits treatment holy traits harder read fnholy traita traitb traitc fnholy sometraita sometraitb sometraitc begin versus using traitwrappersjl fntw traitawrapper traitbwrapper traitcwrapper fntw traitawrapper traitbwrapper traitcwrapper begin object object object pros cons approach traitwrapperjl easier argument relies trait rely positional conventions unwieldy arguments rely traits traitwrapperjl enhances readability arguments rely traits technically package implement traitwrapper idea using package indicates using traitwrappers explanation concept example example using traitwrappersjl lies jlboostjl package jlboostjl tree boosting algorithm predict function score iterable trees dataframe object introduction traitwrappersjl function signature looked function predict jlts abstractvector df abstractdataframe abstractjlboosttree mapreduce predict df jlts arguments jlts df using mapreduce function actually don require jlts abstractvectorabstractjlboosttree df abstractdataframe jlts iterable eltypejlts abstractjlboosttree df supports df column syntax naturally traits fit nicely holy traits functions look function predict jlts df predict iterable jlts columnaccessible df jlts df function predict iterable columnaccessible jlts df abstractjlboosttree mapreduce predict df jlts feels unsatisfying implementation using traitwrappersjl struct iterabletraitwrapper abstracttraitwrapper object iterabletraitwrapper begin hasmethod iterate tuple else throw iterable struct columnaccessibletraitwrapper traitwrapper object columnaccessibletraitwrapper begin hasmethod getindex tuple typeof symbol else throw columnaccessible traits signature easy associate traits arguments please note dynamic relies checking method exists dynamic type constructors compiled lead inefficient code address consider using tricksjl statishasmethod function note tricksjl julia function predict jlts df predict iterabletraitwrapper jlts columnaccessibletraitwrapper df function predict jlts iterabletraitwrapper df columnaccessible mapreduce predict object df object jlts finally traits function signature added double arguments conclusion hope traitwrapper makes clearer trait corresponds argument easier express argument expected trait