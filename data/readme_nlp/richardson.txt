richardson package julia richardson package provides function extrapolate extrapolates function x evaluating geometric sequence x optionally x key algorithm richardson extrapolation using nevilleaitken tableau adaptively increases degree extrapolation polynomial convergence achieved desired tolerance convergence stalls due floating errors allows obtain x accuracy assuming x taylor series power series course notes prof flaherty rpi usage extrapolate contract x zero power atol rtol atol sqrt maxeval typemax int breaktol extrapolate f x evaluating x x using richardson extrapolation starting x returns tuple f err estimated x error estimate return value type supporting norm operations normed vector space similarly x normed vector space extrapolate performs richardson extrapolation x takes limit goes x direction step richardson extrapolation shrinks x factor contract stopping estimated error maxrtolnormf atol estimated error increases breaktol due numerical errors computation returns finite value nan inf evaluated maxeval times note function converge zero specify nonzero atol set default depends scaleunits alternatively extrapolate halt limited floating precision passing breaktolinf useful force extrapolate continue shrinking polynomial extrapolation initially failing converge possibly cost extraneous function evaluations x inf extrapolate computes limit using geometrically increasing values factors contract starting x computed accurately efficiently severe cancellation errors oscillate x x typical scale function varies significantly technically richardson extrapolation assumes x expanded power series power default power corresponds ordinary taylor series assuming analytic x true obtain slow convergence extrapolate pass value power power puiseux powerseries expansion conversely function x x x taylor series contains powers accelerate convergence passing power extrapolate fhitr power atol rtol maxeval typemax int breaktol inf similar extrapolate performs richardson extrapolation sequence values takes iterable collection fhitr sequence tuples decreasing contract keyword argument contraction factors determined sequence values contract amount tolerances atol rtol default default examines values fhitr collection otherwise keyword arguments meanings extrapolate extrapolate fh abstractvector power atol rtol maxeval typemax int breaktol inf similar extrapolatefhitr performs richardson extrapolation array fh tuples decreasing overwrites array fh intermediate calculations array fh vector tuple values type type extrapolated result floating type fh contain float function extrapolating floatingvalued examples example extrapolate sin correct answer starting printing value step algorithm passed argument extrapolate julia syntax conveniently define multiline anonymous function pass extrapolate rtol e sin giving output e e evaluates function sin values returns accurate machine precision error e returned error estimate e conservative typical extrapolating behaved functions sin symmetric function taylor series contains powers exploit accelerate convergence functions passing power extrapolate extrapolate rtol e power sin converged machine precision exact result function evaluations fewer infinite limits using x keyword argument compute limit x pass x inf compute limit accomplished internally change variables performing richardson extrapolation example extrapolate x inf e correct result machine precision extrapolating series nice application infinite limits extrapolating infinite series start integer default contract increase factor iteration exact integer terms series example suppose computing infinite series famous basel converges compute brute force terms accuracy julia sum julia sum e julia sum e terms digits instead extrapolate starting term julia val err extrapolate x inf sum int e julia val e terms extrapolated value accurate digits numerical derivatives classic application richardson extrapolation accurate evaluation derivatives via finitedifference approximations analytical derivatives automatic differentiation typically vastly efficient available example richardson extrapolation forwarddifference approximation error decreases naive application yield huge cancellation error floating roundoff effects differentiate sin correct answer cos starting extrapolate rtol sin sin rtol extrapolate function terminate finite steps detects improvements limited floating error e e e output differs cos e returned error estimate little conservative unlike sin example extrapolate able attain machine precision floating cancellation error function severe able surprisingly close possibility finitedifferencerichardson combination suggested ridders computed derivatives simultaneously using centerdifference approximation requires evaluations particular centerdifference approximations h fh errors h plug functions simultaneously extrapolate share evaluations using vectorvalued function returning moreover centerdifference approximations functions identical pass power extrapolate exploit power taylor expansion function implementing ideas returns function riddersderiv atol rtol atol sqrt eps typeof float real contract f val err extrapolate atol atol rtol rtol contract contract power f return val val code efficient using staticarraysjl vector original paper ridders accomplishes similar lines ti calculator code level languages example julia riddersderiv rtol sin evaluates derivatives sin obtains correct answer cos sin decimal digits respectively using function evaluations handling problematic convergence useful consider finitedifference approximation derivative function computing limit goes zero similar function pole blows means taylor series converges values avoid pole richardson extrapolation essentially approximating taylor series means extrapolation process converge starting extrapolation halt wrong answer lack convergence easily observed set correct derivative consider happens starting compared julia extrapolate reaching power series begin converge extrapolate returned wrong answer error estimate result garbage contrast start converges fine returns correct answer nearly machine precision julia extrapolate e e e e course function blows easy choose initial persuade extrapolate job automatically trick breaktol keyword argument breaktol defaults means extrapolate error estimate increases factor iteration ordinarily breakdown convergence arises hit limits floating precision halting extrapolation converge continued shrinking simply set breaktolinf force extrapolation continue initial julia extrapolate breaktol inf e e e e e continues extrapolating reaches values powerseries converges returns correct answer nearly machine precision reach machine precision set rtol extrapolate function automatically discards initial polynomial extrapolation fail