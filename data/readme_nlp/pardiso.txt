pardisojl pardisojl package provides interface using pardiso intel mkl pardiso julia language pardisojl valid license pardiso mkl library installed package available free charge replaces alters functionality linked libraries installation package installed pkgaddpardiso follow installation instructions install pardiso library mkl pardiso default julia automatically install suitable mkl platform self installed mkl follow instructions set mklroot environment variable mkl getting started manual thorough guide set variable correctly typically executing source optintelmklbin intel running program files xintelswtoolscompilersandlibrarieswindowsmklbinmklvarsbat intel run pkgbuildpardiso run pardisoshowbuildlog build log additional information note mklroot environment variable set whenever using library pardiso pardiso library libpardisowinxdll libpardisomacosxdylib folder set environment variable juliapardiso folder example create entry envjuliapardiso userspardiso juliaconfigstartupjl file download pardiso library folder perform platform specific steps run pkgbuildpardiso run pardisoshowbuildlog build log additional information note weird errors mkl pardiso observed pardiso enabled library pardiso problematic mkl mkl pardiso ot disable paridso setting environment variable juliapardiso rerunning build pardiso linux macos specific version gfortran corresponding pardiso library installed openmp installed install fast installation blas lapack preferably single threaded pardiso handles threading using example openblas basic usage section explain solve equations using pardisojl default settings library advanced users section creating pardisosolver pardisosolver created pardisosolver solving pardiso mklpardisosolver solving mkl pardiso object hold settings solver passed solve functions following sections instance pardisosolver mklpardisosolver referred ps solving solving equations solve solve functions following signatures solveps solves ax returns solveps solves ax stores symbols added extra argument solve transposed conjugate transposed system equations respectively example solving system real equations hand ps pardisosolver sparse rand rand zeros solve ps happened result julia x arrayfloat schur complement partitioned matrix schur complement cab found function schurcomplement following signatures schurcomplementps returns schur complement submatrix size submatrix schur complement schurcomplementps returns schur complement submatrix submatrix defined nonzero rows sparsevector sparsematrix symbols added extra argument solve transposed conjugate transposed system equations respectively example finding schur complement ps pardisosolver float rng mersennetwister sprand rng inv matrix sprand rng sprand rng sprand rng schurcomplement ps julia arrayfloat check validity comparing explicity form julia norm e instability schur complement computation complex matrices setting threads threads set mkl pardiso pardiso mkl pardiso setnprocs ps sets threads getnprocs ps threads pardiso threads set creation pardisosolver looking environment variable ompnumthreads julia example envompnumthreads note ompnumthreads set pardiso loaded changed runtime threads pardisosolver retrieved getnprocsps advanced usage section discusses advanced usage pardisojl terminology section please refer pardiso manual mkl pardiso section using functionality section calls solve functions instead directly function pardiso ps ensure properties set overwritten getmatrixps return matrix suitable pardiso depending matrix type ps set parameter symbol representing solve normal transposed conjugated system represented respectively ease pardisojl provides enums options exported explicitly imported qualified module name enum input key options corresponding integer manuals setting matrix type matrix type explicitly set setmatrixtypeps key key following meaning enum integer matrix type realsym real structurally symmetric realsymposdef real symmetric positive definite realsymindef real symmetric indefinite complexstructsym complex structurally symmetric complexhermposdef complex hermitian positive definite complexhermindef complex hermitian indefinite complexsym complex symmetric realnonsym real nonsymmetric complexnonsym complex nonsymmetric matrix type solver retrieved getmatrixtypeps setting solver pardiso supports direct iterative solvers solver set setsolverps key key following meaning enum integer solver directsolver sparse direct solver iterativesolver multirecursive iterative solver setting phase depending phase calls solve pardiso mentioned phase set setphaseps key key meaning enum integer solver execution steps analysis analysis analysisnumfact analysis numerical factorization analysisnumfactsolverefine analysis numerical factorization solve iterative refinement numfact numerical factorization selectedinversion selected inversion numfactsolverefine numerical factorization solve iterative refinement solveiterativerefine solve iterative refinement solveiterativerefineonlyforward mkl phase forward substitution solveiterativerefineonlydiag mkl phase diagonal substitution available solveiterativerefineonlybackward mkl phase backward substitution releaselumnum release internal memory matrix mnum releaseall release internal memory matrices setting iparm dparm explicitly advanced users explicitly set retrieve iparm dparm parameters getters setters getiparm ps iparm getiparms ps iparm setiparm ps sets iparm getdparm ps dparm getdparms ps dparm setdparm ps sets dparm set default values iparm dparm call pardisoinitps default values depend solver matrix type set setting message level pardiso print timings statistics solving setmsglvlps key key meaning enum integer solver messageleveloff statistics printed messagelevelon statistics printed matrix vector checkers pardiso comes matrix vector checkers check consistency integrity input data called functions printstats ps checkmatrix ps checkvec ps mkl pardiso instead setting iparm calling pardiso mnum maxfct perm set retrieved functions setmnum ps getmnum ps setmaxfct ps getmaxfct ps getperm ps setperm ps perm perm vectorint schur complement pardisops syntax compute schur compelement described answer retrieved pardisogetschurps lowlevel api compute schur complement custom iparms setiparmps set schur complement block size setiparmps set phase analyze factorize setphaseps compute schur complement calling pardisops dummy vector lengthsize shares element type retrieve pardisogetschurps potential gotchas julia csc sparse matrices pardiso expects csr matrix seen transposes solve ax transpose flag iparam set symmetric matrices pardiso diagonal stored sparse structure diagonal element happens manual recommends adding eps diagonal suspect values diagonal elements stored sparse structure unless iparm values iparm ignored default values solving symmetric matrix pardiso expects upper triangular julia csc matrices means pass tril pardiso function checkmatrix managed matrix valid format contributions suggestions idea improving package please file issue create pr