portfolioopt simple package portfolio optimization po formulations using jumpjl installation current package unregistered add follows julia add https github com andrewrosemberg portfolioopt jl git po strategies core functionalities package implementations risk measures type portfolioriskmeasure random variable representing period portfolio return define objective terms type objectiveterm risk constraints type riskconstraint po formulation type portfolioformulation realistic applications decision maker limited information individual asset returns described ambiguity sets type ambiguityset object containing limited information asset returns random variables currently acceptable ambiguityset centeredambiguityset centered usually continuous multivariate sampleable distributions type dirac decision maker absolute certainty po returns continuous multivariate distribution type sampleablemultivariate continuous decision maker confidently estimate distribution period returns distributionally robust ambiguity sets set distributions equally true distribution type momentuncertainty robust uncertainty sets decision maker infer support true distribution viewed distributionally robust ambiguity sets containting single distributions type budgetset type ellipticalset currently implemented portfolioriskmeasure expected return expectedreturn variance square root portfolio variance sqrtvariance conditional expected return conditionalexpectedreturn called conditional value risk cvar expected shortfall expected utility expectedutility computes expected value specified hopefully concave utility function concaveutilityfunction implemented piecewise concave utility function piecewiseutility ambiguityset sets distributions determine distribution definition portfolioriskmeasure choice imposed user level robustness type robustness estimatedcase dealing centeredambiguityset user add robustness default worstcase decision maker worst distribution ambiguity set portfolioriskmeasure define riskconstraint objectiveterm portfolioformulation parsed details jumpmodel using portfoliomodel function addition objectiveterm coneregularizer defined cone set norm linear transformation default identity volumemarket portfoliomodel modifies existing model jumpmodel decision variables created ideally bounded budget bound constraints help users define market constraints fees clearing processess package implements interface optimalbidsjl framework generic markets simple market type called volumemarket volumemarket represents market models allow strategic agent bid market price decision restricted amountvolume traded available assets current implementation allows user specify budgetreal total amount resourcesvolume invested usually sum vector individual invested amounts norm volumefeereal cost unit volume invested allowshortsellingbool true allows decision variables negative riskfreeratereal risk free return return money invested instance volumemarket defined call marketmodel create jumpmodel equivalent constraints objective terms variables created moreover strategic objective terms constraints added top model passed changebids volumemarket object modify volumebidsvectorreal alternatively changebids receive calculated bids chosen elsewhere portfolioformulation leaving creating jumpmodel adding constraints objective terms market based strategy based function market defined strategic bids volumebids cleared using function clearmarket receives volumemarket clearingpricesvectorreal help backtesting type volumemarkethistory created contain marketvolumemarket underlying market specifications historyclearingprices vector vectors representing historical returns assets index vector timestamp historyriskfreerates vector riskfree rates index vector timestamp timestamp timestamps indexing historical asset riskfree returns instances volumemarkethistory input sequentialbacktestmarket function provides basic backtest using provided strategy volumemarkethistory specified daterange eltype timestamp extras benchmarks available functions receive parameters inputs output weights portfolio summing maximum wealth defined parameters mainly simple rules analytical solutions simple po formulations maxsharpe equalweights normally package focus available forecasting functionalities exception univariate prediction forecasting function exported mixedsignalspredictreturn testutils extra testing utilities available submodule called testutils gettestdata returns timearray prices assets meanvariance example markowitz empirical forecaster simple example backtest available strategy using cosmo using distributions using portfolioopt using portfolioopt testutils read prices prices gettestdata numd numa size prices assets days calculating returns returnsseries percentchange prices backtest parameters defaultsolver optimizerwithattributes cosmo optimizer verbose false maxiter daterange timestamp returnsseries backtest backtestresults dict backtestresults epmarkowitzlimitvar sequentialbacktestmarket volumemarkethistory returnsseries daterange market pastreturns ext parameters maxstd marketbudget market standard deviation limit kback forecaster lookback prep numd numa size pastreturns returns values pastreturns empirical forecast meanvariance returns kback mvnormal po formulation formulation portfolioformulation maxsense maximization objectiveterm expectedreturn objective max expected return forecasted distribution riskconstraint sqrtvariance lessthan maxstd risk limit po standard deviation changebids market formulation defaultsolver example markowitz empirical forecaster soyster uncertainty box l regularizer backtestresults epmarkowitzwithsoysterl sequentialbacktestmarket volumemarkethistory returnsseries daterange market pastreturns ext parameters maxstd marketbudget market marketbudget market lpenalty kback prep numd numa size pastreturns returns values pastreturns empirical forecast meanvariance returns kback mvnormal formulation portfolioformulation maxsense objective terms objectiveterm expectedreturn max expected return forecasted distribution objectiveterm coneregularizer moi normonecone numa lpenalty regularize decisions norm regularizer lpenalty coeficient risk constraints riskconstraint sqrtvariance lessthan maxstd limit po standard deviation riskconstraint expectedreturn budgetset maximum abs returns dims numa worstcase greaterthan worst return changebids market formulation defaultsolver plot results using plots using plotsplotmeasures plt plottitleculmulative wealth xlabeltime ylabelwealth legendoutertopright leftmarginmm strategyname recorders backtestresults plotplt axesgetrecordsrecorderswealth getrecordsrecorderswealthdata labelstrategyname plt