contexttrackingjl contexttracking track execution context context data kept stack data structure function called context saved function exits context restored user changes context execution data visible current deeper stack frames usage embarassingly simple annotate functions ctx macro attach context data using memo macro access context data using context function motivation suppose processing web request create correlation id track request include request id whenever write log file processing request somewhat redundant log data multiple times invaluable debugging production imagine users hitting web service time look log file interleaving confusing context context data stored stack structure naturally gain knowledge deeper execution stack naturally forget details execution stack unwinds design memoize valuable knowledge log file example using contexttracking ctx function foo memo bar ctx function bar context info context data data result julia foo info context data data dict entries context object context function returns context object following properties id context id unique taskthread data data tracked context default dict path call path array function names recorded ctx generations context levels stack hexid id represented hexadecimal string julia ctx function foo memo context id path data return julia foo id xaf path foo data dict ctx macro annotating function ctx macro function body wrapped code saves restores context consider following example ctx function foo info inside foo translated function foo try inserted code save context info code inside foo finally inserted code restore context purpose saverestore operation guarantee context data visible current execution chain inside current function subsequent functions called memo macro memo macro assign data current context consider following example memo translated val push contexttracking context val highly recommended memo functions annotated ctx macro failing leak data parent function context usually desirable effect threadsafe context function returns context object unique thread async task context data managed properly run program using multiple threads async example run program threads context return separate context called individual threads likewise async tasks julia using base threads julia threads nthreads julia threads threads println thread threadid context context hexid thread context xbcd thread context xba thread context xb thread context xc dict storing context context type allows container type requirement container type implement following functions base push accepting pairsymbol base getindex retrieving context value symbol base length base empty base iterate related projects probably achieve similar result using cassettejl