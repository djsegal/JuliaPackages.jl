surrealnumbers intro package implementing surreal system invented john horton conway explained knuth surreal exstudents pure mathematics found total happiness intended useful educational test julia itseld educational write terms learning julia task painful matlab easy julia helpful hope trying learn surreal learn lot easily brushed gone theorems background surreal surreal taught properties tricky defined recursively start nice set operations definition follows surreal pair sets surreal call left set xl set xr left set set technically left set gt starting empty sets surreal usually denoted zero additive identity bracket pipe notation denote xl xr empty spaces clearer coding efficient defined empty set day generation surreals created terms initial day create generation meaning corresponding traditional consistent interpretation standard mathematical operators defined surreals reiterate tricky recursive comparitors hence valid surreal recursively investigating component sets survey tutorial surreal write purpose simply introduce key reasons implementing julia enables users define performance types types recursively defined languages achieve performance easy julia example start examples using package installing package create basic surreals using constructor ii conversion real iii couple special functions zero constructors includes extra string call shorthand surreal printing constructor operators leave blank empty set designated julia typing emptyset tab julia using surrealnumbers julia zerosurrealshort julia x surrealshort julia x surrealshort x julia xsomething surrealshort x julia xhalf convertsurrealshort commands create surreals starting zero recursive construction surreal value start convert rational value surreal type surrealshort named subset surreals implemented finite representations called short surreals aliases code surrealfinite started fundamental type surrealdyadic reasons described note output varies shorthand defined outputs bold shorthand otherwise bracket format components bracket format shorthand defined command pf julia println xhalf xhalf julia pfxhalf julia println standard arithmetic operators division restrictions julia x xhalf produce sequence convert real julia float x xhalf picture recursion using dot separately installed graphviz julia file testdotdot julia fid file julia surrealdotfid x xhalf julia closefid julia rundot tsvg file following result note red notations added manually box surreal designated top box left sets corresponding boxes links shown red left blue recursion recursion stops zero started little implementation icky bits implementation details surreals sets julia set type implementation wise sorted arrays surreals bet exchanges cost constructing surreal reduced cost operations throughout lifetime surreal julia creates suite array functions automagically define scalars using arrays low pain surreals sets elements texts write sets surreals include real infinity epsilon require infinitely sets xl xr ideas using lazy evaluation fleshed moment restrict finite surreals surreals finite sets xl xr type surreal abstract type subtype real useful subtype surrealshort finite means representation finite finite pretty rich set cover entire set rationals dyadic rationals words plan add surrealtrans transfinites surreals infinite representations little harder leave moment actual type structure minus constructor code struct surrealshort surreal shorthandstring arraysurrealshort arraysurrealshort uint note addition shorthand string carries little bit extra information pretty printing hence debugging little easier variable contains hash value surreal calculated time avoids incurring cost recursive calculation time value hash speed operations dyadic dyadic rational denominator exact power form note github mathjax interpret maths frac dyadic finite representation surreal finite surreal represents dyadic easiest represent dag directed acyclic graph constructions shown little limiting restricted set remember floating dyadics binary integer significand multiplied power binary exponent called exponent finite floating finite surreal representation start writing type dyadics useful realise irony surreals exactly useful converting surreal description surreal generates form forms satisfy rules arithmetic times identify real forms equate real sets forms equivalent sense equiv leq leq loosely analogy rationals forms value usually call distinguish equality forms identical equivalence value programming terms equal airyfairy notion equivalence equality equivalence meanings hence relation defined test equivalence separate btw hit weirdnesses julia time redefine operators comparators whatever type redefine equiv blog read suggests core operation cause user broke tell tests tested object piece memory mess anyway defined congruence cong check equivalence equality value surreal forms create represent real chose call canonical form define standard zero integers dyadic fraction frac odd negative identity xr xl set conversions implemented includes dyadics hence floats note recursion inherent constructionconversion care particularly floats create variable exhausts stack current code clever checking examples julia pf convertsurrealshort julia pf convertsurrealshort julia pf convertsurrealshort pf function print prints left sets surreal real equivalent shorthand converting surreal real conversion canonical forms relatively easy remember canonical forms counterintuitive instance naively expect form mapped mean sets xl xr simplest xl xr form equivalent note texts written leq whereas writing gt original definition intended care empty set equally define gt synonomous leq move conway defines surreal xl xr simplest satisfies xl lt lt xr simplest means comes earliest generation secret conversion recursion tricks equivalent surreal convert directly negative identity xr xl importantly lt lt simplest dyadic rational xl lt lt xr interval simplest means denominator lowest power preference denomator ldots latter simple modification standard binary search simplified version shown true xl xr return elseif xl elseif xr rules allow convert convert range gt subtract surreal additive identity convert result recursively add time real convert negative apply rule result world beautiful code improved inefficiency warrants implementations operators standard functions operators follow standard surreal definitions defining julia easy recursive guess inefficient demanding computations easy understand instance surrealshort surrealshort surrealshortxl xl xr xr notice exploiting julia natural extension operators scalar vectors reasons using arrays instead sets xl xr appealling write y y addition defined scalar surreal type additional definitions particular appealling scalar addition operator recursively defined terms vectorscalar addition mutiplication bit bugbear misinterpreted definition definition multiplication xl xr yl yr terms xl yl xl yl assumed operator definition standard surreal addition sets surreals instead entire expression interpreted pairs elements xl yl perform computation form set results easy trying underlying canonical forms sets elements broken multiplication created products canonical forms cleaned misunderstanding code note simple computations generate canonical forms aim package people experiment otherwise laborious calculate simplest none texts simplest useful example understand surreals following obtained multiplying canonical form naively operators applied canonical forms resulted canonical forms form complex moreover superficially recurse surreal appears twice tree form defined terms tree dependent surreal parent equal equivalent parent defined terms simpler forms equivalent pieces toolkit standard expect able round sign isinteger implemented hopefully easily added approaches intrinsic surreal arithmetic sign abs implemented using native surreal arithmetic operators result looks exactly signsurrealshort zero zero zero abssurrealshort zero actually define abs free julia similar operation defined absreal real feature julia type hierarchy multiple dispatch function selection approach function definition somewhat cheat involves converting real using appropriate operation field tried avoid approach moment simplify function approach complex math functions logs trig functions approach mathematical definitions pure surreal terms obscure cheat pieces hard implement namely division division defined surreals simple divisions result dyadic rational hence infinite representations surreal class finite surreals defined closed division eventually solved outputting finite surreal moment implemented division dividing divisor numerator dyadic easy implemented terms multiplication moment requires cheat converting rational check requires conversion command designed structure unless shorthand defined surreal simple conversions set aids viewing surreals succintly sometimes deeper shorthand defined command pf deeper stop layer shorthand recursion implemented output surreal form dot syntax graphviz function surrealdot output dot file parsed assuming graphvis installed commands using surrealnumbers s convertsurrealshort file testdotsdot fid file surrealdotfid s closefid rundot tsvg file x surrealshort convertsurrealshort surrealshort file testdotxdot fid file surrealdotfid x closefid rundot tsvg file produces figures illustrating recursive definition surreal note tree representations inefficient surreal forms repeated code includes function surrealdag exactly generate dag directed acyclic graph representation surreal code testtestdotjl examples uniquely surreal functions pieces unique surreals generation generation surreal generation surreals construct easy implement recursively generation comes knuth story called birth day surreal generation function cdot sup xl cup xr implicitly generation tree depth viewed recursive tree shown generation xl xr defined simplest xl lt lt xr lowest birth day note equivalence class forms forms generation canonicalise convert surreal equivalent canonical form easiest implement similar cheat convert real convert equivalent surreal canonical form arrays surreals mentioned arrays surreals earlier implementation instead sets nice julia array operators functions free create scalar operators instance write convertsurrealshort broadcasts convert function array integers create array containing respective surreals likewise comprehensions construct arrays convertsurrealshort construct iterator floor promotion rules defined iterator convertsurrealshort convertsurrealshort arrays sets constructor surreal reduce set sorted array containing unique elements julia nice sort unique functions rely hash functions add hash recursive arrays surreals hash function help implement types isequal implies hashhash argument mixed results linked idea separate congruent comparisons hash based forms equal equivalent julia syntax simple concise specifying hashes believe recursive function hash fast speed pieces code afford recurse time instead hash value calculated time stored surreal data structure call function defined hash constructor temporary surreals created multiplication particular avoiding overhead fine comments bother tell horribly inefficient surreals created numerical computing mind inefficient calculations reasonably excluding addition nullops learning julia absorbing style guide code morphing efficient stylish note exploring entire chunk surreals transfinite represented day time gods willing implementations surreals instance coq coq haskell integers haskell haskell integers javascript mathematica generation lua python implemented python ruby languages appropriate task learn julia moreover incomplete code instance none aware implement division julia toolkit limited version division included information surreals examples examples code included little real creating surreals start creating surreals x surrealshort x surrealshort x x surrealshort x x surrealshort x xx x surrealshort xxx x x surrealshort x x surrealshort x x x surrealshort xx x surrealshort xxx x xxx zerox zerosurrealshort x s convertsurrealshort s convertsurrealshort check values using float convert standard floating note shorthand empty array surreal helpful try printing various forms prints s pfs println operations surreals arrays surreals test operations variables expected results comparisons x x x x x x x x x x x x addition subtraction x x x x x x x x x x x x x x x multiplication xx x xx x xx x convertsurrealshortconvertsurrealshort convertsurrealshort division xx x x x x xx x xx x floatxx floatxfloatx convertsurrealshort convertsurrealshort convertsurrealshort simple functions simple numerical functions advanced ones log specific surreals generation returns generation birth day surreal canonicalise reduces canonical form surreal generation zerosurrealshort canonicalise convertsurrealshortconvertsurrealshort convertsurrealshort converting standard real examples convert rationals floats convertrational convertsurrealshort float x convert rational surrealshort convertstring x conversion automatically applied promotion rules x x x canonicalise x x final notes total implementation little lines code doubt expert julia deal tighter concentrated code easy understand super concise little project lot easier julia surreals trying build learn moving brilliant idea correct thinking impossible build matlab required deal automagical pieces julia help