fvcfdjl fvcfdjl simple explicit compressible euler solver d unstructured polyhedral meshes code compact read individual usersdevelopers lines makes excellent hands introduction cfd code originally final project graduate numerical methods class starting additional projects lowoverhead numerical research property value mesh format openfoam output format vtu solution ascii restart files convective schemes jst musclroe gradient schemes greengauss weighted squares time discretization transient explicit rungekutta time discretization steady explicit local timestepping dependencies writevtk ongoing projects include implementation adaptive meshing implicit timestepping contributions welcome started instructions install fvcfd run included example developers look familiar data structures represent mesh current solution fvcfdjl install start julia julia activate julia package manager julia recommended install julia package pkg add fvcfd install directly github pkg add activate local copy code run julia repository main directory pkg activate optional run tests ensure installation pkg test fvcfd press backspace exit package manager run example example scripts run simple included stored examples run clone repository convenient git clone start julia main directory git repository location file stored julia execute example script run julia includeexamplesshocktubejl simulation completes view solutionxxvtu files created using postprocessing tool paraview sample results forward steptitle animation mach forward step transient d quadratic uniform mesh third shuosher timestepping cfl jst convective discretization originally woodward collela openfoam comparison results available greenshields et al transonic naca mach aoa degrees euler time integration jst convective discretization transonic naca using local timestepping note animation speeds look similar correspond equal amounts computational time frame animation global timestepping corresponds solver iterations frame animation local timestepping corresponds solver iterations supersonic wedge mach degree ramp angle triangular mesh euler time integration jst convective discretization properties correspond su tutorial mesh compatibility note getting errors trying load openfoam mesh try running mesh openfoam renumbermesh utility standardize formatting renumbermesh overwrite execute inside openfoam directory mesh files generated constantpolymesh helpful fvcfd current mesh parser flexible openfoam re improving look readoffile functions meshjl fairly straightforward improve functions accept whatever variation mesh format meshing tool generating developers running tests local copy code start julia main git directory julia enter package manager julia activate current directory environment pkg activate run tests pkg test fvcfd tests defined files named testtestjl add tests existing files create ones follow naming pattern ex testtestmynewcodejl tests discoveredrun testruntestsjl pkg runs tell test fvcfd newcomers julia julia dynamicallytyped language makes extensive time compilation jit scientific computing approach deliver approximating speed combined simplicity python unfortunately compilation execution mixed julia speed immediately obvious compilation julia user experience time execute piece code julia performs typeinference compiles code able infer types runs result takes expect run code time compared languages python fortunately run code instances julia cache compiled code recompile change subsequent runs faster advantage start instance julia run code repeatedly closing repl cause function executedcompiled instance julia remains cached available repl closed instances julia stateful lead unexpectedreplicable behavior code deleted function brand instance julia executing code check restarting julia running codetests scratch significant changes typestability julia developer experience delving previous topic bit julia execute code distinct compiled compiledinterpreted imagine executing compiled code magnitude faster interpreting code julia compile code advantage step writing performance julia code ensure julia compile able compile code julia types variables involved times allows julia allocate appropriate amount memory variable understandinterpret data stored julia infer variable types type annotations type inference whenever functions return variables consistent type typestable function similarly avoid changing types variables functions variables typestable julia codewarntype macro check typestability common workflow start creating prototype worrying excessively type stability performance resulting code similar python project progresses code speed increased dramatically adding type annotations minor refactoring rewrite language information julia documentation julia performance tips julia performance tips nomenclature simple variables var meaning units internal energy kg pressure pa rho density kg temperature velocity flux variables var meaning definition xmom momentum rho ev total energy rho rhoup flux momentum rho rhouevpu direction flux total energy ev references referred throughout code moukalled et al finite volume method computational fluid dynamics advanced introduction openfoam matlab hoffman numerical methods engineers scientists versteeg et al introduction computational fluid dynamics finite volume method nd edition anderson computational fluid dynamics basics appl