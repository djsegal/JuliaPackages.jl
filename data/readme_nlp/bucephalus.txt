bucephalusjl bucephalusjl package aims automate solution heterogeneousagent economic models using modelbased reinforcement learning progress expect model converge correctly stage usage install package run julia command line add tutorials documentation package severely documented moment formal documentation currently confined readme functionlevel documentation added seriously reworking backend existing packages thorough documentation added time package ready public consumption roadmap re project feel free contact github jeffreyesun email jesun princeton dot edu package designed solve heterogenousagent macroeconomic models market spatial segmentation models agents interact environment agent individual wealth environment variables common agents total factor productivity agents choices period maximize net value future period utilities called return rl individual stochasticity takes form random variables drawn period inputs transition function key detail framework agents assumed representative internalize individual effects aggregate quantities roadmap framework bucephalus components model object represents description heterogenousagent economic model learning algorithm model object attempts solve policy function value function steady distribution model future aim include solvers package easy accessible interface defining solvers learning algorithms model object model object description model solved described using julia macros hood syntax defining models macros examples model description found examples folder example model object defined algorithm called using train function syntax model defined defining agent types possibly segmentations locations defining variables nine stages variables terms computed course single iteration simulation parameters set constants beginning model definition changed variables variables define economy beginning period output transition function dependent variables variables depend variables parameters output transition function equilibrium variables conventionally prices variables defined terms equilibrium condition market clearing conditions equilibriumdependent variables variables depend equilibrium earlierstage variables choice variables variables chosen agents output policy function choicedependent variables include utility reward shock varaibles variables specified random distribution inputs transition function model stochasticity variables strictly speaking variables assigned rule computing transition functions variable following components stage determining computed simulation model host agent type segmentation model level model variable specific example variable model host common agents total factor productivity variable agent type host specific agent wealth labor endowment variable segmentation host value segmentation example variable locationspecific productivity value location function distribution defining determines variable computed drawn syntax looks vartype hostvarinputvar inputvar fvarinputvarinputvar input variable inputvar host host function implicitly individual value inputvar input vector values input refinputvar statedep hhmeanpeerwealthrefwealth meanwealth somewhat stage example choice variables associated function distribution implicitly policy function macro defining variable create julia variable macro calling context name model variable example statevar hh lognormal unrolled bucephalusaddstatevariablehh float initlognormal segmentations additional variable type match provided additional operators variables bymembers match defines relationship agent segmentation location example agent simply belong single location relations residence workplace location value declared using matchvar macro matchvar hhresidencematchloc rand nhh defines variable residence variable agent type hh takes loc value resulting variable residence property host hh partnerhost loc term match hopes day supporting relations agents spouse landlord construct var matchvar construct acts variable host construct host matchvar var variable partnerhost matchvar example rent residence refers rent agent residence location rent locationspecific value rent residence computed finding residence location agent returning rent location construct bymembersvar matchvar similarly construct acts variable host bymembers construct partnerhost matchvar var variable host host matchvar example bymemberswealth residence refers vector wealth values residents location descriptions abstract please check examples action learning algorithm learning algorithm currently implemented modelbased actorcritic algorithm details tailored standard feature setting differentiate transition function allows automatic differentiation directly compute derivative future respect continuous action update policy function parameters directly computing derivative value function respect policy function parameters representation pseudocode algorithm algorithmpseudocodepdf note performance improvement obtained specifying model equilibrium variables inputs actions agents choose expenditure instead quantities choice valid regardless prices limitations algorithm limitations algorithm perform presence strong convexities value function policy function network parameters updated using gradient descent stuck local minima steady model ergodic algorithm fail cover space steady traversed simply simulating model forward algorithm fail cover steady space steady exhibits pathdependence future try remedy providing option begin simulation various starting simulating parallel periodically restarting simulation random initial currently inputs policy function specified manually performance poor entire space unnecessary implementing generalized moments deepham roadmap replace handcoded backend existing packages improvement package addition significantly reducing size source code implement generalized moments deepham segmentations implement nested generalized moments set generalized moments computed segmentation set computed using vector generalized moments segmentation input implement solvers learning algorithms including bruteforce solver robust strategies draw starting learning episodes allow user configure method implement methods test optimality policy networks euler equation errors allow agents internalize effect aggregate quantities models monopolistic competit