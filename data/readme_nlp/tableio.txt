tableio glue package reading writing tabular data aims provide uniform api reading writing tabular data multiple sources package intelligent sense automatically selects reading writing methods depending file extension supported formats csv via json via zipped csv json via jdf via parquet via apache arrow via excel xlsx via sqlite via postgresql via note csvjl required postgresql read stata dta spss dat sas sasbdat via hdf pandas format via pandasjl requires python pandas pytables installed python underlying packages direct dependencies tableio installed automatically reduction installation size package load time installation python requirements pandas hdf following julia commands envpython separate conda environment julia using pkg pkgaddpycall conda pandas pkgbuildpycall using conda condaaddpandas condaaddpytables installation using pkg pkgaddtableio using tableio using specific format corresponding package installed imported add jdf import jdf using jdf file format specific library imported installed error message raised reading data function readtable reads data source file database returns tablejl interface creating dataframe using tableio dataframes csv format using csv df dataframereadtablemydatacsv copycolsfalse keyword arguments passed csv reader csvjl df dataframereadtablemydatazip copycolsfalse zipped csv format assuming file archive json format using dates jsontables df readtablemydatajson dataframe note dataframe copycolsfalse wrong column types dfmydatecol datesdfmydatecol dates imported strings default manually converted df readtablemydatazip mydatajson dataframe binary formats using jdf df dataframereadtablemydatajdf copycolsfalse jdf compressed binary format using parquet df dataframereadtablemydataparquet copycolsfalse parquet using arrow df dataframereadtablemydataarrow copycolsfalse apache arrow import pandas using naming conflict df dataframereadtablemydatahdf key copycolsfalse hdf via pandas excel using xlsx df dataframereadtablemydataxlsx copycolsfalse imports st sheet df dataframereadtablemydataxlsx myawesomesheet copycolsfalse imports named sheet sqlite using sqlite df dataframereadtablemydatadb mytable copycolsfalse sqlite file table name alternatively sqlite database objects using sqlite sqlitedb sqlitedbmydatadb df dataframereadtablesqlitedb mytable copycolsfalse sqlite database connection table name postgresql using libpq csv csv required writetable postgresql depends csv postgresconn libpqconnectiondbnamepostgres userpostgres df dataframereadtablepostgresconn mytable copycolsfalse reading postgres connection statfilesjl integration using statfiles df dataframereadtablemydatadta copycolsfalse stata df dataframereadtablemydatasav copycolsfalse spss df dataframereadtablemydatasasbdat copycolsfalse sas data formats supporting multiple tables inside file function listtables returns alphabetically sorted list table names tablenames listtablesfilename writing data function writetable writes tablejl compatible data source file databse using tableio dataframes csv format using csv writetablemydatacsv df writetablemydatazip df zipped csv inner file name table stored csv format file name zip archive json format using jsontables writetablemydatajson df dictionary arrays writetablemydatajson df orientationobjecttable dictionary arrays writetablemydatajson df orientationarraytable array dictionaries writetablemydatazip mydatajson df explicitly file name inside zip archive otherwise csv format binary formats using jdf writetablemydatajdf df jdf compressed binary format using parquet writetablemydataparquet df parquet note date element type supported using arrow writetablemydataarrow df apache arrow import pandas using naming conflict writetablemydatahdf key df hdf via pandas excel writetablemydataxlsx testsheet df creates sheet defined name sqlite using sqlite writetablemydatadb mytable df sqlite file table exist sqlitedb sqlitedbmydatadb writetablesqlitedb mytable df sqlite database connection postgresql using libpq csv postgresconn libpqconnectiondbnamepostgres userpostgres writetablepostgresconn mytable df table exist compatible input data statfilesjl integration writetable supported additionally export tabular data julia code jl files writetablemydatajl mytable df read data corresponding julia source code file included includemydatajl assert dataframemytable df conversions pass output readtable directly input writetable converting tabular data formats name joinpathtestpath testzip zipped csv name joinpathtestpath testxjdf binary name joinpathtestpath testxxlsx excel name joinpathtestpath testxdb sqlite writetablename readtablename writetablename readtablename writetablename mytable readtablename dfrecovered dataframereadtablename mytable copycolsfalse plutoui integration plutojl notebook tableio directly plutouijl filepicker output example run plutojl notebook using plutoui tableio dataframes bind plutouifilepicker pick supported file type df dataframereadtable copycolsfalse functionality supported file formats corresponding import packages installed required import automatically testing postgresql component requires running postgresql database unit tests database started using following command docker run rm detach name testlibpqjl postgreshostauthmethodtrust postgres disclaimer encounter warnings warning package tableio csv dependencies tableio checked development added csv dependency updated primary environment manifest file try pkgresolve otherwise report issue tableio loading csv tableio project dependency future warnings tableio suppressed please ignore tableio purposely included libraries specific file formats depend