servermetricsjl server metrics allow engineers instrument code expose useful information happening server program running single machine metrics primarily numeric representations current disk using moment event counters requests handle currently flavors metrics supported gauge represent current measure bytes stored disk value fluctuate change time counter count events aggregations values time guarantee value counter decreases usually matters value changes time backends supported datadog prometheus examples directory set configuration basic operation library allows user construct counter gauge individually preferably wrapped metriccollection structures metrics collections registered default registry custom registries registration metrics unique names assigned metric registries set publish registered metrics variety backends specifically library offers statsdexporter periodically send udp messages statsd backend prometheus compatible http request handler serve registered metric metrics custom http endpoint metric labels metrics scalars single labels sparse matrices related measures tracked example http response tracking break action http response code simply create gauge counter list labels value type responsestotal counter action string responsecode int manipulate metrics pass label assignments inc responsestotal action responsecode inc responsestotal action responsecode mind following rules invalid labels set manipulating metrics labels missing unkown labels set label value wrong type library log error drop operation floor ensure bugs instrumentation crash service production metric limited distinct values distinguished unique labelvalue assignments limit reached recently cell deleted limit ensure poorly written instrumentation code able leak memory incur excessive datadog costs pay cell cause performance issues instrumentation code instrumenting code instrument module server metrics create subclass servermetricsabstractmetriccollection hold metrics using servermetrics base kwdef struct mymodulemetrics abstractmetriccollection lunchesconsumed counter hungerlevel gauge hunger starts metrics exposed production monitoring systems default create global const instance structure add default metric registry module init using following const metrics mymodulemetrics function init servermetrics publishmetricsfrom metrics instrument code manipulating metrics metrics instance function eatlunch inc metrics lunchesconsumed dec metrics hungerlevel eat lunch function exerciselittle inc metrics hungerlevel exercises function exercisealot inc metrics hungerlevel exercises naming conventions starting units included metric name example gauge metric tracking memory called memoryusagebytes word indicate system exporting metric sense multitiered pagermemoryusagebytes juliamemoryusagebytes change type existing metric backward compatibility reasons imagine rollout multiple versions running exporting types metric look create metric name change types testing locally prometheus grafana test metrics locally depending platform assuming linux follow default installation instructions configure prometheus scrape local instance adding following section prometheusyml jobname localjob scrapeinterval s staticconfigs targets localhostport starting grafana connect prometheus data source access exported metr