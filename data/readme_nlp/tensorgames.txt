tensorgamesjl efficient functionality computing mixedstrategy nash equilibrium multiplayer finite action sum game path solver compute via pathsolverjl usage supply vector cost tensors player input function computeequilibrium costtensorsjjjn cost faced player player plays action j player plays action j etc additional functionality provided via chainrulescorejl automatically differentiate solutions respect elements cost tensors example julia costtensors randn julia sol computeequilibrium costtensors julia sol element vectorvectorfloat function expectedcostsol costtensor compute equilibrium cost player objective represented costtensor equilibrium found minimum strategy weights enforced words fixed strategies players player strategy optimal minimum weight specified julia costtensors randn julia sol computeequilibrium costtensors julia sol element vectorvectorfloat additional examples usage test directory checks satisfaction equilibrium conditions derivative correctness perform