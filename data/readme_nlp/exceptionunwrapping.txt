exceptionunwrappingjl exceptionunwrappingjl provides exception handling utilities allow inspecting unwrapping wrapped exceptions mean exception type embeds exception common example taskfailedexception wraps task exception caused task fail example exception types salsajl api haswrappedexception exceptiontypebool iswrappedexceptionbool unwrapexceptionexceptionwrapper wrappedexception unwrapexceptionnormalexception normalexception unwrapexceptionuntil exceptiontypeexceptiontype unwrapexceptiontorootexceptionwrapper wrappedexception unwrapexceptiontorootnormalexception normalexception usage library provides wrapped exception type register package simply adding method unwrapexception exceptionunwrapping unwrapexception mywrappedexception exception client code haswrappedexception unwrapexceptionuntil catch blocks try catch haswrappedexception boundserror unwrapexceptionuntil boundserror boundserror else rethrow finally improve robustness client tests via testthrowswrapped testthrowswrapped assertionerror mypossiblymultithreadedfunction motivating example stable exception handling adding concurrency library break users exception handling start using concurrency exception handling bit weird julia cooperative multithreading designed composable fundamental principle changing syncronous code run concurrently task changes types exceptions code throw consider example silly program handle type exception boundserror meaningful action user try function getandsortnamesbyfirstletter try names readline libary sort function supposed wicked fast return librarysort names catch isa boundserror println oops entered empty name please try user shot return getandsortnamesbyfirstletter else rethrow unknown error julia getandsortnamesbyfirstletter valentin oops entered empty name please try valentin jane element arraystring jane valentin happens library decides parallelize sorting function wicked faster lol faster demonstrates librarysort args kwargs fetch threads spawn sort args kwargs happens library inadvertently broken caller julia getandsortnamesbyfirstletter nathan error taskfailedexception boundserror attempt access string index stacktrace checkbounds strings basic jl inlined codeunit strings string jl inlined getindex strings string jl inlined usersnathandalyjuliadevexceptionunwrappingsrcexceptionunwrappingjl inlined lt var string string jl sort arraystring int int basesortinsertionsortalg var sort jl sort arraystring int int basesortmergesortalg var arraystring library promised return boundserror supposed handle unwrap taskfailedexception encounters maybe user taskfailedexception user code comfortable depending boundserror coming lambda provided directly exceptions produced code path error handling possibly poorly tested conundrum solution exceptionunwrappingjl solution exceptionunwrappingjl user structures execption checks using exceptionunwrapping continue despite changes underlying concurrency model function getandsortnamesbyfirstletter try names readline libary sort function supposed wicked fast return librarysort names catch exceptionunwrapping check is boundserror or wrapping boundserror haswrappedexception boundserror println oops entered empty name please try user shot return getandsortnamesbyfirstletter else rethrow unknown error regardless librarysort using tasks internally exactly composable multithreading julia getandsortnamesbyfirstletter nathan oops entered empty name please try nathan martin element arraystring martin nathan terminology wrapped exceptions vs exception causes julia exception caused exception exception thrown catch block finally block situation package addressing example julia try throw errorexception catch throw errorexception error stacktrace top level scope repl caused exception stacktrace top level scope repl situation covered julia standard library functions basecatchstack return stack exceptions thrown print caused display instead package dealing wrapped exceptions term coining refer exceptions embed exception inside add information context exception mechanism cross boundary task