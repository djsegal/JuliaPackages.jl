debugjl v prototype interactive debugger julia language bug reports feature suggestions welcome package supports evaluation expressions local scope installation julia install debug package pkgadddebug interactive usage import debug package using debug debug macro mark code able step bp macro set breakpoint interactive debugging commence breakpoint encountered conditional version bp break debug global module scope access scopes surround piece code analyzed following singlecharacter commands special meaning display help text step step enclosed scope step current scope continue breakpoint list source lines current line source file information available default cmd print cmd evaluated current scope quit debug session calls errorinterrupted else parsed evaluated current scope evaluate variable named entered space prepended example following file called examplejl using debug debug function test bp push bp println test julia terminal julia includeexamplejl hometoivojuliadebugtestexamplejl bp debug defined debug debug hometoivojuliadebugtestexamplejl bp debug hometoivojuliadebugtestexamplejl push debug hometoivojuliadebugtestexamplejl push debug debug hometoivojuliadebugtestexamplejl push debug debug debug debug hometoivojuliadebugtestexamplejl push debug debug hometoivojuliadebugtestexamplejl push debug debug push foo foo debug hometoivojuliadebugtestexamplejl bp println debug foo debug foo julia considerations parallel code debug package written support parallel execution mind instrumentation code inserted debug macro intended code sent process run thread cause trouble julia serialization code instrumentation code contains references data structures cycles reasons recommended code inside debug macro invocation run thread process additionally wrap code notrap macro debug features localscope inside ensure instrumentation generated code question passed consequently stepping code wrapped notrap experimental features interpolations entered code currently evaluated context debugsession module expression evaluated context current scope debugger internal available mechanism manipulated influence debugging current node current scope bp setnode enabled breakpoints nobp setnode disabled bp breakpoints pre dictnode grafts nodes refer positions instrumented code represented nodes decorated ast produced original code breakpoints manipulated using pushbp set breakpoint current node deletebp unset breakpoint current node pushnobp ignore bp breakpoint current node examples written pushbp code snippets grafted instrumented code pre code execute execution current node nodes current node examples nodes found navigating current node support evaluation code local scope design julia eval function allows evaluate code global module scope allows kinds optimizations compiler local variables debug package able evaluate code local scopes entered debug prompt main functionality package provides standalone feature allow evaluation local scope code instrumented create scope objects contain getter setter functions local variable accesible scope code wrapped inside debug macro retrieve current scope object using localscope macro minimal code instrumentation desired code wrapped debug macro wrapped notrap macro notrap macro disable stepping wrapped code allow localscope macro scope objects created entering scopes nested localscope invocation scope object available local variables read assigned indexing corresponding symbols listed using keysscope expressions evaluated scope using debugeval function using debug debug notrap function outer localscope local inner pos outer pos inner inner localscope outer inner outer inner keysouter keysinner inner println outer inner variable scopes outerpos innerpos pos refers variables inner outer printlnnsetting inner inner assigns single variable outer inner values updated println debugevalinner evaluate expression inner scope produces output keysouter setsymbolouterposinner keysinner setsymbolouterposinner outer inner outerpos outer innerpos inner setting inner outer inner debugevalinner seen evaluate code local scope change values variables define variables local scope expression passed debugeval evaluated inside block scope custom traps instrument macro similarly debug macro takes argument trap function called expression lies directly block example loaddebugjl using base debug firstline function trapnodenode scopescope global firstline firstline nodelocline firstline line nodelocline firstline printline line debugevalscope line printtx debugevalscope line printtk debugevalscope println instrument trap function line line line line line line produces output scope argument passed trap function debugevalscope ex evaluate expression ex scope instrument relies function debuggraftinstrument allows specify nodes add traps foundations debug package code analyzing scoping symbols piece code modify code allow piece code evaluated particular piece code interactive debug facility built top debug macro triggers steps code passed debug analyzed decorated ast built nodes type debugastnode format identical julia native ast format nodes track parent static scope location source code code instrumented insert trap calls stepping entryexit scope blocks etc scope object contains getter setter functions visible local symbol created entry block lies environment code passed debugeval analyzed debug code grafted supplied scope replacing readwrite variable call corresponding gettersetter function visible grafted code issues tried encode scoping rules julia accurately bound missed scoping rules blocks etc global scope accurate code macro expansions tagged wrong source file issues found issues page bug reports feature requests welcom