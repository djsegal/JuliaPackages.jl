bsonifyjl bsonifyjl julia package painlessly converting julia data structures bson binary json bson json data storage format designed efficient fast store binary data supported languages native mongodb database system bsonifyjl stores data bson document minimal metadata stored efficient convenient communication systems resulting bson document stored mongodb database files via mongocjl bsonifyjl handle data structure including primitive types arbitrary composite types defined modules data structures nested recursive data structures complicated parametrised types type unions example using bsonify dates import mongoc define custom parametric struct struct mystruct mydatetime datetime myarray array myparametric mydict dict mynamedtuple namedtuple tupleint float mychild unionmystruct support recursive structures type unions define custom type custom struct mytype mystructuint string create data mydata mytype answer dict answer mytype split question answer learned time dict sweet child println mydata mydata convert data bson bson mongoc bson mydata println bson bson convert bson custom type myreconstituteddata astype mytype bson println myreconstituteddata myreconstituteddata result mydata mystructuint stringdatetimet answer xa dictuint stringx x answer f mystructuint stringdatetimet question answer learned time x dictuint string f sweet child bson bson mydatetime date tz myarray answer myparametric mydict answer mynamedtuple mychild mydatetime date tz myarray question answer learned time myparametric mydict mynamedtuple mychild sweet child myreconstituteddata mystructuint stringdatetimet answer xa dictuint stringx x answer f mystructuint stringdatetimet question answer learned time x dictuint string f sweet child usage exporting bson bsonifyjl extends mongocjl api handle arbitrary types creating bson documents convert data bson document pass mongocbson function mybson mongoc bson mydata note root bson document dictionary structure value passed mongocbson keyvalue mapping acceptable keyvalue mappings dict composite type struct instances extends abstractdict specifically mapping keys fields accessible via keys fieldnames functions save data root keyvalue mapping create bson document single key myarray mapped data store store array bson document myarray mybson mongoc bson myarray myarray importing bson convert data stored bson document julia data structure astypetype data function astype accepts arguments type convert bson document data bson document create instance whatever type passed values specified bson document recursively example mydata astype mytype mybson retrieve array stored exporting bson section myarray astype arrayint mybson myarray note stored array myarray key retrieve array using key bson document passing astype storing bson documents files mongodb read write data bson files mongodb documentation mongocjl license source code package bsonifyjl licensed mit license alternative related libraries mongocjl allows converting simple data structures dicts arrays bson bsonifyjl partly built top mongocjl bsonjl allows converting complex data structures bson stores type metadata bson producing larger imho harder interpret bson documents requires specifying module namespace restore complexcustom types type bsonifyjl jsonjl similar api json bson