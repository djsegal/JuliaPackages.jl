resourcecontextsjl resourcecontexts experimental julia package composable resource management blocks resources objects cleanup code run finalize example file handles temporary files directories background task currently handled blocks macro calls defines context functions functions abstractcontext argument associate resources context package provides contextbased overrides base functions mktemp mktempdir cd run lock redirectstdoutstderrstdin context macro associates context current code block passed context functions invoked context block exits cleanup code associated context runs defer macro defers arbitrary cleanup expression current context examples manging resources blocks file read lines close function context readlines tmphitxt create temporary file ensure cleaned afterward context function path io mktemp write io content flush io info mktemp output path ispath path isopen io read path string acquire pair locks release opposite function lk reentrantlock lk reentrantlock context begin lock lk lock lk info hi locked section islocked lk islocked lk info outside locked section islocked lk islocked lk start ten external processes wait finish continuing context begin run sleep rand functions pass resources callers functions called fooargs passed current context argument foocurrentcontext args called foo defined using context automatically defer resource cleanup caller using defer example returning bare ptr temporary buffer function rawbuffer len buf vector uint undef len defer gc preserve buf pointer buf context begin len ptr rawbuffer len gc gc buf preserved regardless call gc unsafestore ptr xff defer zeroing secret buffer caller function createsecret buf base secretbuffer write buf rand uint super secret seek buf defer base shred buf buf context begin buf createsecret info secret byte read buf buf shreded interop blockbased resource management available enterdo function steal inside block available context block repl function resourcefunc function arg info setting resources fakeresource fakeresource arg info tear resources normal usage resourcefunc info resource ready safely access resource repl enterdo resourcefunc interop finalizerbased resource management special function detachcontextcleanup detach context cleanup current context block associate finalization instead lexical resource management dynamic resource management example create temporary directory files return directory name string clean directory dir finalized dir context begin dir mktempdir writejoinpathdir filetxt content writejoinpathdir filetxt content resourcecontextsdetachcontextcleanupdir design standard solution julian resource management block severe ergonomic disadvantages extremely inconvenient repl intermediate resources entering context block creates highly nested code resources visually confusing excess nesting leads deep stack traces custom cleanup code separated resource creation finally block ergonomic factors mean people prefer scoped form argued suffers severe disadantages resources leak finalized gc people forget guard resource cleanup try finally finalizers run restricted environment errors occur outside original context resource created makes unstructured error handling impossible propagate errors natural functions return objects resources alive holding references returned object hold reference resource bad implementer reduces composability combine desired return type arbitrary resources multiple returns objectresource unnatural forces user unpack return values solution package macro proxy proposed postfix syntax adds ideas user able forget prevent introducing context calling convention resource creation functions current abstractcontext passed argument context macro creates context lexical scope macro syntactic sugar calling current context resource creation functions able compose desired object return type arbitrary resources preserves composability block form rejecting conflation returned object resources break familiar apis standard file handles returned filename stream interface resource cleanup language integration look language feature replaced postfix proposed defer keyword special behavior ignoring return value similar code runs inside finally sense value returned defer particular observed frequently leads introduction temporary variables simply transfer result expression occurring prior defer line context implicit function boundaries global blocks potentially scopes functions getting correct tricky design example looping constructs introduce implicit context user disable particular using example function createsecret buf base secretbuffer write buf rand uint super secret seek buf defer base shred buf buf createsecret info secret byte read buf buf shredded concerned definition createsecret hides calling convention explicitly annotating passed context transparent syntax existing macro annotations nospecialize attach metadata function arguments example function createsecret passcontext ctx abstractcontext buf base secretbuffer write buf rand uint super secret seek buf defer base shred buf references resource cleanup defer syntax postfix syntax close default cleanup macro proxy syntax benefits drawbacks syntax ergonomic composability benefits finalizers discussed length julialangjulia previous prototype deferjl similar macrobased syntax structured concurrency cancellation closely related julialangjulia viewing async tasks type resource task nursury context