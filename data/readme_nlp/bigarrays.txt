bigarraysjl cutout saving arbitrary chunks julia backends local cloud storages introduction booming scale d image datasets augmentation sample embedding physical sectioning modern electon light microscopes expanded field view magnitudes resolution result seen booming scale d image datasets world recent scale image data fit computer memory traditional standalone software able handle datasets managing datasets including injecting cutout visualization challenging getting urgent current solutions image handling solutions precomputed image pyramids called mipmaps normally images chopped blocks multiple resolution levels blocks normally compressed variaty algorithms gzip jpeg resolution blocks normally called mip level mip levels normally built using recursive downsampling data management software normally designed optimized storage backend solutions classified according storage architecture traditional block storage backend blocks saved file blocks located disk seek avoid filesystem search overhead internal filesystem increased software complexity dataset size limited largest file size filesystem blocks realigned based space filling curves hilbert curve faster reading neighboring blocks size dataset limited largest file size local storage single file adavantage modern redundant array independent disks raid system parallel bandwidth io block io normally taking advantage bandwidth block size normally latency dominant factor performance raid system bigger latency perform worse single disk example commercialized amira lda format based approach traditional file system storage blocks managed local filesystem files shared machines using network file system normally slower block storage file search overhead normally distributed servers mordern object storage backend google cloud storage aws s meta data separated managed dedicated metadata servers io distributed data servers object storage normally web api easy share files fast easy share complex software maintainance cost storage backend advantages disadvantages example block storage fast easy share amira lda format file system easy share normally slower tdat object storage fast easy share expansive bossdb importance scale visualization traditionally images visualized standalone softwares single workstation exist sophesticated softwares visualize scale image datasets amiraavizo trackem requires special setup users rise julia data science data scientists prototyping dynamically typed language matlab python algorithms stable start reimplement algorithm faster statically typed language production run julia designed solve language data scientists julia interactively realevalprintloop repl terminal jupyter notebooks mean time julia code compiled native machine code fast execution thanks design time compilation type inference julia getting popular data scientists explore data develop algorithms interactively deploy code process scale datasets design bigarraysjl bigarraysjl designed separation frontend backend front provide julia array interface indexing syntax backend abstracted keyvalue store storage backend provide keyvalue indexing interface saved format consistent neuroglancer direct visualization exploration scale image volume bigarrays support compression methods fine control speed compression ratio features serverless clients communicate storage backends directly cutout performed client multiple processes cpu cores arbitrary subset cutout saving chunk size aligned extensible multiple backends arbitrary shape dataset boundary curve arbitrary dataset size theory tested dataset size tb multiple chunk compression algorithms highly scalable due serverless design multiple data types support negative coordinate supported backends local file system google cloud storage aws s storage backends mounted local filesystem example shared file system supported mounting files local directory cloud storage mounted via local file system backend compression decompression algorithm compression decompression gzip zstd blosclz jpeg notethat jpeg decompression code commented default due imagemagickjl issue import imagemagick load correct version libraries supported data types bool uint uint uint uint float float easy add please raise issue installation install julia repl press enter package management mode add bigarrays usage bigarrays limit dataset size reading index outside existing file range return array filled zeros setup info file info file json file defines configuration dataset defined neuroglancer backend local binary file using bigarrays using bigarrays bindicts ba bigarray bindict pathdataset ba normal array returned cutout result offsetarray normal julia array parent function examples check tests development bigarrays level architecture transform keyvalue store backend julia array frontend provide interface abstractarray implement getindex setindex functions add backend backends keyvalue stores add backend simply following wrap keyvalue store julia abstractdict type bindicts example example implement basegetindex basesetindex functions bindicts example implement getinfo function return string info file defined neuroglanc