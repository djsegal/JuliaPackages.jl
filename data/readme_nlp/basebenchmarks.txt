basebenchmarksjl package collection julia benchmarks track performance julia language basebenchmarks written using benchmarktools package highly suggest skimming benchmarktools manual using basebenchmarks locally loading running benchmarks basebenchmarks contains amount code suitable precompilation loading code annoyingly time run benchmarks solve basebenchmarks allows dynamically load benchmark suites julia using basebenchmarks toplevel benchmarkgroup empty load child julia basebenchmarks suite element benchmarktools benchmarkgroup tags example load linalg basebenchmarkssuite optionally pass benchmarkgroup argument load linalg julia basebenchmarks load linalg element benchmarktools benchmarkgroup tags linalg element benchmarkgroup array example load benchmarks basebenchmarkssuite pass benchmarkgroup argument load benchmarks instead julia basebenchmarks loadall loading string loading linalg loading parallel loading tuple loading micro loading io loading scalar loading sparse loading simd loading loading array loading sort loading shootout benchmarks loaded run benchmarktoolsbenchmarkgroup run benchmarks matching tag query run basebenchmarks suite tagged array linalg simd run specific benchmark run basebenchmarks suite linalg arithmetic run single benchmark run basebenchmarks suite scalar fastmath add complexfloat equivalent form makes easy copy paste ids benchmark reports run basebenchmarks suite scalar fastmath add complexfloat benchmarktools repository documentation benchmarktoolsbenchmarkgroup features regression classification filtering parameter tuning leaf iteration mappingfiltering etc recipe testing julia pr locally re collaborator trigger julia nanosoldier bot automatically test performance pr vs julia master branch bot purpose final performance matters identify require local performance testing procedure testing julia pr locally run benchmarks save results using master julia build run benchmarks save results using pr julia build load compare results looking regressions profile regressions opportunities performance improvements steps build julia appropriate branch run following code execute benchmarks save results replacing filename actual unique file name using benchmarktools basebenchmarks basebenchmarks loadall load benchmarks results run basebenchmarks suite verbose true run benchmarks benchmarktools save filenamejson results save results json file load results check regressions replacing json file names actual file names using benchmarktools basebenchmarks master benchmarktools load masterjson pr benchmarktools load prjson regs regressions judge minimum pr minimum master benchmarkgroup containing regressions pairs leaves regs array id trialjudgement pairs tests resulted regressions magnitude example pairs look element array string join benchmarktools trialjudgement time regression tolerance memory invariant tolerance io read readstring benchmarktools trialjudgement time regression tolerance memory invariant tolerance pair structured benchmark id trialjudgement benchmark examine benchmarks detail try fix regressions ioreadreadstring id shown example examine benchmark currentlybuilt branch loaded benchmark parent element id io julia using benchmarktools basebenchmarks julia showall basebenchmarks load io element benchmarktools benchmarkgroup tags io element benchmarktools benchmarkgroup tags read element benchmarktools benchmarkgroup tags buffer stream string readstring benchmarktools benchmark read benchmarktools benchmark run benchmark calling runbasebenchmarkssuiteioreadreadstring profile using profile profile run basebenchmarks suite io read readstring profiling benchmark profileprint profileviewview analyze bottlenecks led regression contributing performance tracker benefit benchmarks benchmark depends base julia code welcome pr master branch contribution tips guidelines benchmarks depend base julia benchmarktools write benchmarks feel free wip pr help newly defined functions calls measured perf prepended name makes easier benchmark entry code try reuse existing tags tags lowercase singular benchmark requires significant amount code wrap module version basebenchmarks ci benchmarks added basebenchmarks via ci execution parameters tuned cached nanosoldier benchmark cluster suitable running process performed periodically request master branch merged nanosoldier branch nanosoldier pulls nanosoldier branch running benchmark job whatever currently nanosoldier branch ci