utilities coding julia arrays julia package provides methods types deal variety array types subtypes abstractarray exist julia help building custom array types sacrificing performances useful implement methods process arrays generic rubber indices constants type dots hit tab key array indexation left justify indices instance assuming array following equalities hold object seen advantage rubber index automatically expands list colons correct indices expressions readable idea comes yorick language dave munro rubber index setting values instance fill ones copy idem faster copy set elements leadingtrailing indices specified cartesian indices type cartesianindex technically constant defined rubberindex rubberindex singleton type represents indices call colons tuple colons compile time faster call colonsval warning current limitation rubber index confuse interpretation token appearing index list rubber index beacuse parser wrongly assumes rubber index counts single dimension token appears rubber index example rand ok throws boundserror array objects defining custom array objects julia array interface powerful flexible tempting define custom array types julia types behave arrays sacrificing efficiency arraytools package provides simple means define array types values accessed array stored array concrete type embedded object instance simple type inherit lineararray cartesianarray depending index style embedded array indexlinear indexcartesian extend baseparent method custom type returns embedded array instance instance course replacing ellipsis using arraytools pseudoarrays struct customarray lineararray arr array array type linear index style etc inline base parent customarray arr result instances customarray seen instances abstractarray behave implement linear indexing apart extend baseparent method interface lineararray provide methods indexation getting dimensions element type etc derived custom type override definitions optimized suitable methods specialized custom array type custom array type based array index style indexcartesian instead indexlinear example custom type derived cartesianarray instead lineararray array object index checking requires efficient implementation baseaxes method specialize default implementation inline base axes cartesianarray axes parent array objects properties example custom array objects arraytools package provides annotatedarray objects store values arrays properties stored dictionary named tuple type parameters element type values array dimensions array type object storing properties building annotated arrays easy using arraytools annotatedarrays dims float annotatedarray zeros dims units photons x y annotatedarray undef dims units m x y initial properties specified keywords call constructor properties symbolic names value array contents array zeros array contents created constructor undefined values indexing integers cartesian indices accessing values array contents indexing symbols accessing properties example x yields x idem units yields photons units idem set values array contents sum yields sum values gizmo set property gizmo idem pop gizmo yields property value delete creating annotated array summarized using arraytools annotatedarrays annotatedarray arr prop annotatedarray init dims prop arr existing array expression result array prop specifies initial properties type array element init usually undef dims tuple array dimensions arr existing array object created reference array hence share contents caller call copyarr avoid applies initial properties specified dictionary properties prop specified keywords keyvalue pairs dictionary named tuple avoid ambiguities styles mixed examples using arraytools annotatedarrays arr zeros annotatedarray arr units m x y annotatedarray arr units m x y annotatedarray arr units m x y annotatedarray arr units m x y examples yield annotated array properties symbolic keys type value third example yields annotated array properties string keys type value properties dynamic modified deleted properties inserted fourth example yields annotated array properties stored named tuple immutable symbolic keys accessing property via syntax objkey symbolic textual keys via syntax objkey accessing immutable properties fastest accessing textual properties objkey slowest involves converting symbol string initially specified keywords keyvalue pairs properties stored dictionary key type specialized efficiency value type flexibility specific properties key value types explicitly specify dictionary call annotatedarray instance annotatedarray arr dict symbolint yields annotated array properties symbolic keys integer values type int property key types limited symbol string avoid ambiguities key types specialized inherit types integer cartesianindex reserved indexing array contents annotated arrays dictionary unspecified properties stored initially empty dictionary symbolic keys value type dictsymbol iterating annotated array iterating array values iterate properties call properties method returns object storing properties dims float length dims annotatedarray zeros dims units m x y properties println similar types provided metaarrays metadataarrays imagemetadata tools array indexing allindices method takes array arguments yields efficient iterator visiting indices index arguments behavior similar eachindex method except allindices throws dimensionmismatch exception arrays axes safe specify inbounds simd loop allindices eachindex allindices methods useful writing loops array elements agnostic specfic indexing rule suitable algorithms efficient easier write involved arrays indexed single based index using arraytools provides tofastarray checks array suitable fast indexing single integer starting returned caller otherwise contents converted suitable array type implementing fast indexing returned caller check array suitable fast indexing call isfastarray bool multiple arguments checked time isfastarray isfastarray isfastarray isflatarray array storage calling ccall compiled function coded language fortran etc array arguments storage assumed languages safe pass pointer array compiled function typically ensure elements stored memory contiguously columnmajor ckecked calling isflatarray bool arguments isflatarray bool array flat storage possibly element type call toflatarray eltype returns requirements hold converts suitable array form faq difference indexstyle defined base julia indexingtrait defined arraytools indexstyle indexlinear array efficiently indexed integer multidimensional columnmajor access elements possibility indexstyle indexcartesian indexingtrait fastindexing indexstyle indexlinear holds array standard based indices difference basehasoffsetaxes provided julia hasstandardindexing provided arraytools caller hasstandardindexingargs yields opposite result basehasoffsetaxesargs furthermore hasstandardindexing bit faster installation arraytools official julia package easy install julia hit key switch package manager repl pkg prompt type pkg add arraytool