irkgausslegendrejl irkgausslegendrejl efficient julia implementation implicit rungekutta gausslegendre th method method integrated differentialequationsjl ecosystem performance precision integration required julia version description julia implementation th implicit rungekutta integrator irkgl stage irk scheme based gausslegendre nodes accuracy numerical integration stiff ode systems algorithm supports adaptive timesteping mixed precision multithreading solve fast accuracy family implicit rungekutta schemes based collocation gausslegendre nodes symplectic superconvergent s method internal nodes convenient precision numerical integration hamiltonian systems constant timestep size stiff implementations based fixed iterations recommended believe necessarily hamiltonian stiff ode systems implicit rungekutta methods implemented fixed iteration competitive precision computations accuracy requirements exceeds double precision arithmetic installation package installed using julia using pkg julia pkg add irkgausslegendrejl julia using irkgausslegendre solver options available common arguments dt stepsize saveeverystep default true adaptive true adaptive timestepping false fixed timestepping maxiters maximum iterations stopping common arguments initialinterp initialization method stages false simplest initialization true default interpolating stage values previous step mstep output saved mstep steps default myoutputs default false maxtrials maximum attempts accept adaptive step size threading false default sequential execution numerical integration true parallel execution stagewise parallelization mixedprecision false default true combine base precision arithmetic precision specified lowprectype variable lowprectype float float nrmbits bits remove applying stop criterion return codes solution types retcode field returns symbol signifying error solution retcodes follows returncodesuccess integration completed erroring returncodefailure uncategorized failures errors example burrau bodies masses attract according newtonian law gravitation masses particles m m m initially located apexes triangle corresponding masses opposite particles free move plane triangle rest initially szebehely burrau bodies proceedings national academy sciences united america vol issue pp postscript file step defining solve numerically define type giving equation initial condition timespan solve using irkgausslegendre using plots linearalgebra latexstrings function nbodyode dugm length gm du qi gmi gm du qj gmj gm qij qi qj auxij qij qij qij qij qij qij du gmj auxij qij du gmi auxij qij return gm length gm zeros size q reshape v reshape u array float undef u v u q tspan prob odeproblem nbodyodeutspangm step solving defining solve using solve sol solve prob irkgl adaptive true reltol e abstol e step analyzing solution orbits bodylist body body body pl plot title burrau adaptive aspectratio ulist sol tlist sol xlist map ulist ylist map ulist pl plot xlistylist label bodylist plot pl step size plot xlabel ylabel step size title adaptive step size steps sol sol plot sol steps energyerror function nbodyenergy gm length gm zerouel zero eltype zerouel zerouel qi vi gmi gm gmi vi vi vi vi vi vi qj gmj gm qij qi qj gmi gmj norm qij setprecision bigfloat ubig bigfloat u gmbig bigfloat gm e nbodyenergy ubiggmbig e map nbodyenergy bigfloat gmbig sol e plot title energy error xlabel ylabel elta plot sol log abs e label examples benchmark examples implementation details antoana makazaga murua ander reducing monitoring round error propagation symplectic implicit rungekutta schemes numerical algorithm