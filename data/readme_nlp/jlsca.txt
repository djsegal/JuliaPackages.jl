jlsca toolbox julia computational dpa channel attack supports conditional averaging analog measurements conditional bitwise sample reduction whiteboxes threaded tiled incremental correlation statistics parallelization multicore multimachine correlation power analysis cpa profiled linear regression analysis lra mutual information analysis mia aes encdec backwardforward box attacks backwardforward box round attacks aes encdec chosen input mixcolumn attack whitebox models aes inv mul klemsa destdestdestdes encdec backwardforward attack sha backwardforward attack hmac key analysis key rank evolution csv output inspector trace set input output split sample data raw binary daredevil input output trace alignment using fft convolution trace alignment using dynamic time warping related toolbox playing picoscope example examplespiposcopejl fast acquisition riscure pinata board using scope rapid block mode check file header piposcopejl information free fast versatile time wrote initially started ceesbart breunesse ilya kizhvatov pysca shamelessly baseline ruben muijrers contributed bit compression whiteboxes conditional bitwise sample reduction thanks albert spruyt ideas suggestions jlsca codebase funded reassure project toolbox officially supported maintained riscure crashes feature requests please contact github code hosted write issue pull request installation install julia tested prior compatible julia executable path notably windows users start julia repl executing julia repl type using pkg pkgaddpackagespecurl close julia prompt running interact jlsca run scripts command line interactive julia repl via jupyter notebooks described readme elegant powerful jupyter approach described includes solution riscure rhme sca challenges multithreading versus multiprocessing various components conditional averaging conditional sample reduction incremental correlation jlsca split run parallel worker processes component jlsca currently threaded incremental correlation statistics single cpu multiple cores running incremental correlation multiple threads single process probably outperform splitting multiple processes single thread reason parallel processes single cpu thrash cache threaded implementation incremental correlation tiled cache friendly usually choosing workers cpus threads hardware cores single cpu preferred course milage vary julia default single worker single thead worker change run julia julia workers processes master process workers machine julianumthreads julia julia process threads bit unfortunate interface unified parallelized components jlsca run split multiple machines found time experiment todo list create cluster nodes dualxeon cpu fast shared filesystem input trace sets accessible worker lean simple implementation cluster linux nfs ssh node julia deployed nodes using machinefile option described easiest unleash jlsca parallel abilities running cmd line step installation performed git clone jlsca julia user directory juliavjlsca jlsca library script files jlsca examples directory scripts perform various attacks combination settings supported jlsca attack parameters example key extracted file name hard coded attack defaults cpa single bit hw attack change editing main files library code src touched file mainnonincjl file performs vanilla correlation statistics input trace set vanilla meaning compute correlation entire sample hypothesis matrices memory starting playing implementing statistics attacks main parallelization complain specify multiple processes px julia command line example julia examplesmainnonincjl destracestdesencbaaccccatrs backwards attack applies mainxxxjl files julia examplesmainnonincjl destracestdesencbaaccccatrs backward file maincondavgjl file performs vanilla correlation statistics run conditional averager trace set input job parallelized example processes adding command line julia examplesmaincondavgjl aestracesaessbciphfeccafbffddfdcbaatrs file maincondredjl file perform vanilla correlation statistics conditionally sample reduced trace sets check source conditionalbitwisereductionjl useful whiteboxes bit vector sample data floating process parallelized julia examplesmaincondredjl destracesdesenccaafeetrs file maincondredwbaesjl file combines klemsa leakage models tackling dual aes conditional bit wise reduction parallelized maincondredwbaesjl attack params hardcoded aes trace sets edit main file pass else aes apply whitebox data paramsdataoffset maincondredwbaesjl input paramsdirection forward output paramsdirection backward parallelized example julia examplesmaincondredwbaesjl aestracesaessbciphfeccafbffddfdcbaatrs file maininccpajl file perform correlation attack using incremental correlation statistics inspector implements attack modules parallelize multithread attack example julianumthreads julia examplesmaininccpajl aestracesaesmcinvciphdaeeebaaeedadtrs hacking stuff means look mainxxxjl files pick matches closest copy change accordingly details set parameters data sample passes attack parameters supported attacks aessboxattack aesmcattack dessboxattack shainputattack shaoutputattack defined attackaescorejl attackdescorejl attackshacorejl example following creates forward aes attack attack bits intermediate vanilla cpa define attack attack aessboxattack attack mode cipher attack keylength kl attack direction forward analysis analysis cpa analysis leakages bit combine dpaattack attack field accessible paramsattack paramsanalysis params dpaattack attackanalysis analysisleakages list objects type inherits leakage implements leak function look scaleakagesjl hw bit type leakges implemented attack hw instead write params analysis leakages hw attack hd box set desaes attacks params attack xor true configuring forward attack tell jlsca offset input trace data params dataoffset means input data start trace data julia offsets based run attack backwards output data located input type params attack direction backward params dataoffset attack key bytes write params targetoffsets collect key bytes write params targetoffsets lra instead cpa params analysis lra params analysis basismodel basismodelsinglebits fat disclaimer currently lra supports bit model aes mc attack understand attack choosing bit basis model results invertible matrices crash mia instead lra params analysis mia params analysis samplebuckets params analysis leakages hw samplebuckets value buckets samples observations split sample type real samples floats add sample pass addsamplepasstrs float lra mia bit hacky subject change passing attack phase data attack inner rounds key material recovered earlier jlsca automagically default example aes consists separate attacks attack round aes tell jlsca setting attack parameter params phases round key printed hex string labeled phase input console cut paste information phase ran phase data paramsphaseinput params phases phase params phaseinput hexbytes aabbccddeeff passes processors attacks jlsca instances traces type implementations type jlsca inspectortrace representing inspector trace set splitbinary representing completely flat split data samples example daredevil types simply providing access trace data files addition functionality suppose example inspector trace set follows reads meta data corresponding trace set disk read data file trs inspectortrace blatrs read trace tuple data corresponding samples data sample trs suppose absolute samples time read trace course simply run abssamples pass trs instance jlsca library example performs dpa attack file modify code call abssamples instead add sample pass trs object pass simply function run trace moment read add function abs trs objet addsamplepass trs abs read trace data samples trs samples contain absolute add passes executed add example samples addsamplepass trs compute spectrum addsamplepass trs real fft similar mechanism exists data trace set means function adddatapass internally jlsca function add cipher round functions attack users perspective data pass filtering traces example consider trace set tvla traces byte data field set x random input x semiconstant input attack using random traces write return traces data byte set x adddatapass trs x vector uint undef push sample data pass stack passes pop added calling popsamplepass popdatapass conditional averaging potential post processors conditional averaging conditional averaging implemented trace post processor framework automatically analysis instances cpa mia lra incrementalcpa average measurements aes max averages key byte offset des sbox des roundout returned getnumberofaverages type condavg conditionalaveragejl averager julia newly added threads module default single thread set julianumthreads environment variable threads faster input samples using threads currently speed process laptop profiled data passes configured adddatapass determine data conditional averaging operates aes simply input output des input output data bit picked recombined key simply average individual input bytes function round attackdescorejl example data preprocessed fed conditional averager parallelization currently parallelized post processors conditional bitwise sample reduction conditional averaging incremental correlation statistics provided mainxxxjl files run px run processors local trace set input available processes currently parallelize post processor splitbytracesblock means process visit subset traces required trace conditional averaging means process memory trace data moved interpreted traces split blocks process process etc splitbytracessliced splitbytracesblock process takes trace process takes trace etc parallelization tightly coupled post processors pass splitxxx instance post processor instance mainxxxjl test runs jlsca julia package runs tests testruntestsjl trigger pkgtestjlsca julia repl julia testruntestsjl jlsca source directory typically juliavjlscasrc