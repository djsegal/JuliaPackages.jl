finchjl documentation build status try online finch adaptable juliajulia compiler loop nests sparse structured multidimensional arrays addition supporting sparse arrays finch handle custom operators fill values zero runs repeated values special structures clustered nonzeros triangular patterns finch allows write loops dense compile sparse compiler takes care applying rules avoid redundant computation finch supports statements custom user types functions users add rewrite rules inform compiler special userdefined properties optimizations modify indexing expressions express sparse convolution describe windows structured arrays example program calculates minimum maximum sum variance sparse vector reading vector reading nonzero values using finch fiber sl fsprand scalar xmin scalar inf xmax scalar inf xsum scalar xvar scalar finch begin xmin min xmax max xsum xvar array formats finch described recursively mode mode semantically array finch understood tree level tree corresponds dimension edge corresponds index example fibersl constructs float cscformat sparse matrix fiberslsl constructs dcscformat hypersparse matrix example columnmajor sparse matrixvector multiply fiber rand fiber sl fsprand fiber finch begin heart finch powered domain specific language coiteration breaking structured iterators control flow units call looplets looplets lowered progressively stages rewriting simplification technologies enabling finch described manuscript installation julia repl install stable version running julia using pkg pkg add finch