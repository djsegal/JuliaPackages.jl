vectorinterface documentation build status license julia interface proposal vector objects motivation package proposes julia interface vector objects set methods supported types representing objects interpreted living vector space unified interface useful collection methods write collection algorithms universal agnostic manner unfortunately current interfaces existing julia ecosystem adequate purpose context recall basic properties vectors vector space vector space set objects called vectors basic properties vectors added commutative neutral element inverses neutral element called zero vector vectors rescaled scalar coefficient taking values underlying scalar field relations vector addition distributivity operations rise construction linear combinations top properties vector spaces practical applications structure inner product norm finally useful vector spaces admit finite basis vector written linear combination finite basis vectors quantities science engineering scientific computing behave vectors typically real complex underlying field quantities belong manifold derivatives tangents cotangents automatic differentiation importantly algorithms formulated using basic operations linear combinations inner products combination recipe spitting vectors applying linear map gradient optimization ode integrators krylov methods current situation julia elementary julia type acts vector vector extension subtype abstractarray types subtypes abstractarray vectors conceptually types representing functions approxfun ecoystem tangent types ad ecosystem gripes julia interface lack thereof access basic vector operations makes writing generic algorithms hard particular vector addition vector rescaling simply efficiency able operations instances abstractarray using linearalgebra includes lot stuff vector rescaling abstractarray family rmul lmul mul interface conflated concept matrix multiplication etc whereas concepts scale method analogy corresponding method blas level julia versions perfect matrix times diagonal matrix vector addition hand options methods cryptic axpy axpby methods referring blas level analogues unjulian interface vector modified final argument programming scalar field reals complex course specific scalar type vectors natively rescaled instance abstractarray type obtained eltype eltype iteration interface types iteration behaviour distinct vector behaviour overload eltype purposes example base nested array type vectorvector constitutes set vectors scalar type eltype equal vector zero vector associated vector zero fine interface defined neutral element respect zero nested array fail implemented furthermore zero vector fill abstractarray abstractarray specific interface solution restort scaling zero using rmul available closely related previous able create equivalent vectors modified scalar type vectors abstractarray similar arrayspecific method fails nested arrays vector objects programming belong finitedimensional vector space abstractarray dimension length interface iteration length types incompatibility eltype structured arrays length express vector space dimension uppertriangular natural vector space dimension inner product norm corresponds julia methods linearalgebradot linearalgebranorm unlike previous dot norm natively support nested arrays dot loose implementation happily computes inner product probably vectors vector space dot particular dot norm accept tuples whereas tuples behave vectors respect previous methods zero summary main actually formal standardized vector interface julia despite broad potential applicability writing generic algorithms standardized interfaces containers abstractarray iterators conflated hypothetical vector interface existing solutions ecosystems responded hiatus krylov optimization packages merely restrict applicability instances abstractarray simply vector fortran analogues probably differentialequationsjl ecosystem restricting abstractarray remember correctly provides bunch packages recursivearraytoolsjl arrayinterfacejl accommodate complex finally ad ecosystem zygotejl chainrulesjl custom tangent types define operations using lot internal machinery destructure custom types forcing subtype abstractarray unsatisfactory solution vector objects naturally represented respect basis notion indexing finitedimensional abstractarray container interface distinct vector space interface solution vectorinterfacejl tried create simple package resolve gripes hope useful community eventually evolve standardized interface value comments bikeshedding tried design compatible linearalgebra stealing names commit type piracy currently vectorinterfacejl provides following minimalistic interface scalartype accesses native scalar type vector object type domain scalartypetypeof zerovector zerovector zerovector produce zero vector type method tries mutable types whereas third method inspired bangbangjl tries otherwise comment ideally zerovector functionality provided basezero zerovector creates zero vector similar type modified scalar type zerovector sets equal zero vector scalar type changed finally zerovector reduces zerovector scalartype comment tendency zero uninitialized memory fine merge concept constructing vector scalar type constructing zero vector scale scale scale rescale vector scalar coefficient method tries fail converted scalartype contains immutable contents whereas third method bangbangstyle unified solution scale scale rescale storing result add add add compute selfexplanatory method stores result errors third method tries store error inner equivalent dot sometimes bit efficient strict arguments allows norm simply reexports linearalgebranorm methods implemented instances type scalars vectors abstractarray abstractarray nested array addition interface currently defined tuples named tuples arbitrary nesting instances vectorntuplematrixfloat currently supported furthermore methods recursively try maximally mean nested vectors rmul outer array inner arrays using regular multiplication allocate inner arrays example contrast scale inner arrays free allocations similarly scale course outer tuple inner tuple inner array hence return value scale course operation questions development decisions tuples actually supported base treated vectors supported dot norm currently tuples named tuples supported request vectordim function name debate probe vector space dimension function currently defined linearalgebradot exported inner dot looseness dot concern dot currently exported inner preferred method inner products fallbacks user types implement rmul mul axpy axpby dot latter relating previous question currently fallback methods intention remove fallbacks future versions comments welcome actually subtype abstractarray linearalgebra behave vector sense instances represent zero vector rescaled changing type namely unituppertriangular unitlowertriangular fixed unit diagonal prevents types constituting vector space unit diagonal poses issues broadcasting operations preserving ones rare operations preserving zeros structured unstructured spars