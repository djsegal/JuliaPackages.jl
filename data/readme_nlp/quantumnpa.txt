quantumnpa code npa julia development names functions entire project change prerequisites using pkg pkg add combinatorics jump scs blockdiagonals try include quantumnpajl using quantumnpa dot line typo code able call internal functions conveniently instead include qnpajl load function global variable main module examples maximise chsh level hierarchy julia dichotomic a a b b julia a b b a b b a b a b a b a b julia npamax maximise svetlichny level julia dichotomic julia generic function method julia a b c a b c a b c a b c a b c a b c a b c a b c julia npamax note spaces string party labels aa zz aaa zzz maximise modified chsh level julia npamax a a b b a b b specify equality inequality arguments using eq ge keyword arguments lists operators expectation values respectively set lower bound zero example maximise a subject ab b ab b julia npamax a eq a b b id a b b id maximise a a subject a a a a julia npamax a a ge id a a id a a maximise a a subject a a a a julia npamax a a eq a a ge a a examples dichotomic variables projectors supported maximise ch form chsh julia pa pa projector julia pb pb projector julia npamax pa pb pa pb pb pa pb pb julia sqrt maximise cglmp level julia npamax cglmp julia sqrt function cglmp defined qnpajl construct cglmp operator maximise global guessing probability pgab chsh setting using statistics create projectors keyword argument true means operator corresponding numbered output directly set identity minus ones example pa id pa pe id pe pe pe meant collinsgisin projection npa code convenient pa projector true pb projector true pe projector true chsh sqrt expectation value probability eve correctly guesses alice bob joint outcome sum pa pb pe ideal chshviolating correlations mixed noise actual constraints imposed expectation values operators array constraints pa id pa id pb id pb id pa pb sqrt id pa pb sqrt id pa pb sqrt id pa pb sqrt id returns level using default scs solver npamax eq constraints quantumnpa calls scs solver default require license solve npa relaxation quantum optimisation keyword argument solver specify solve using mosek license file julia using mosektools julia npamax solver mosek optimizer change default solver specify time julia setsolver mosek optimizer construct jump model solve separately julia model npajump solver scs optimizer jump model minimization variables objective function type affexpr affexpr mathoptinterfaceequaltofloat constraints vectorvariableref mathoptinterfacepositivesemidefiniteconetriangle constraint model mode automatic cachingoptimizer emptyoptimizer solver name scs julia optimize model scs v splitting conic solver brendan donoghue stanford university variables constraints cones primal zero dual free vars psd vars ssize settings epsabs e epsrel e epsinfeas e alpha scale e adaptivescale maxiters normalize rhox e accelerationlookback accelerationinterval lin sys sparse direct nnz nnz iter pri res dua res gap obj scale time e e e e e e e e e e e e status solved timings total e setup e solve e lin sys e cones e accel e objective julia objectivevalue model call npajump solver keyword argument solver assigned assign jump model using jump setoptimizer function suppress output solver calling npajump keyword argument verbose set false using jump setsilent function returned jump model basic features arithmetic conjugates types operators associate parties moment dichotomic fourier projector unitary zbff operators brownfawzifawzi method identity represented variable id predefined julia id id julia projector pa julia pa projector julia pb projector julia pa pa julia pa pb pa pb julia pb pa pa pb julia pa pa julia pa pa pa julia ua unitary julia ua conj ua ua ua ua ua julia pa pa ua ua ua julia conj pa ua ua ua julia pa pa ua ua ua ua ua ua pa ua ua ua ua ua ua julia conj id pa pa ua ua ua ua ua ua pa julia id pa id ua ua ua pa julia id ua ua ua pa ua ua ua pa ua ua ua pa julia conj id pa pa ua ua ua ua ua ua pa julia ze zbff julia pa pb ze ze pa pb ze ze julia conj pa pb ze ze julia fa fourier a julia fa id julia fa a julia conj fa a julia fa id julia fa a julia conj fa fa id julia fa fa a julia conj fa fa a julia a a dichotomic julia b b dichotomic julia a b b a b b a b a b a b a b julia id a a b b a a b b a a b b a a b b examples illustrate basic manipulation monomials polynomials kinds operator expressions note polynomials matrix coefficients julia id a id a julia id b id b julia id a b a b dimensions coefficients expressions added subtracted multiplied match polynomials matrix coefficients library represent npa moment matrix functions create monomials parameters dichotomic party input fourier party input power projector party output input false unitary party index conj false zbff party index conj false party strictly positive integer vector strictly positive integers strictly increasing representing operator associated party uppercase alphabetic character string alphabetic characters corresponding parties increasing separated underscores party ab party ab party vector abc party vector parties converted stored internally inside monomials vectorintegers form operators associated parties considered commute intersection party vectors empty parameters called input output index integers arrays ranges integers parameter conj optional defaults false omitted projectors range inputs value fourth parameter defaults false setting true indicates intend range outputs represent set measurement outcomes projector identity minus sum preceding projectors party labels parties aa zz starting party aaa zzz aware operators printed julia unitary ua julia dichotomic ua julia id julia ua ua julia conj id julia ua ua julia conj ua ua examples illustrating calling projector function julia projector arraymonomial pa pa pa pa julia projector true array pa pa pa pa id pa pa id pa pa julia zbff element arraymonomial za za za examples illustrating commutation relations dichotomic operators julia a a dichotomic julia b b dichotomic julia ac dichotomic julia a b a b julia b a a b julia a ac a ac julia ac a ac a julia a b ac a b ac julia a b ac a b a b b ac a julia a b ac a b a ac a julia a b a b julia ac b ac a julia ac a b evaluations notice b starts a moves front expression ac added a ac cancelled writing macros automatically create variables using standard names moment create dichotomic variables dichotomic a a b b macro invocation essentially running following a dichotomic a dichotomic b dichotomic b dichotomic dichotomic special relations moment types operators example mix projectors dichotomic operators unless consider unrelated julia dichotomic projector a pa julia dichotomic projector id id a pa finally worth stressing operators objects manipulated sorts types objects julia putting arrays data structures example dichotomic returns dimensional array dichotomic operators vector expressions julia dichotomic element vectormonomial a a julia dichotomic element vectormonomial b b julia matrixint julia a b a b a b a b julia kron element vectorunionmonomial polynomial a b a b a b a b julia kron a b a b a b a b julia id kron adjoint vectorunionmonomial polynomial eltype unionmonomial polynomial id a a b b a b a b a b a b julia matrixmonomial id a a b b a b a b a id a a a b a b a a b a a b a a a id a b a b b b b a b a b id b b a a b b b a b a b b b id a b b a a b b a a b a a b b a a a a b b a b b a a b a b b a a a b b a a a b a a b b a a b b id b b a b a a b b a b b a b b id analysing modifying deconstructing operators monomials polynomials objects types polynomial consisting single monomial multiplied printed monomial julia projector pa julia typeof monomial julia pa julia typeof polynomial julia a b a b a b a b julia typeof polynomial ensure object polynomial promote calling polynomial argument polynomial julia polynomial id julia polynomial id id julia polynomial a b a b a b a b julia typeof element arraydatatype polynomial polynomial polynomial note polynomial returned copy original means modifying modify object julia true julia a julia a a b a b a b a b create copy polynomial safely modify changing original call copy function julia a b b a b b a b a b a b a b julia copy a b a b a b a b julia false julia a julia a a b a b a b a b julia a b a b a b a b examples suggest access modify coefficient associated monomial using julia a b julia a monomials polynomial calling monomials function julia monomials base keyset dictmonomial entries keys a b a b a b a b polynomials act iterators pairs nonzero coefficients monomials contexts iterator expected julia collect element vector pair monomial a b pair monomial a b pair monomial a b pair monomial a b julia printf d a b a b a b a b iterate monomials lexicographical call sort polynomial julia sort printf d a b a b a b a b help analyse function operators return individual operators monomials polynomials collections operators instance maximise local guessing probability chsh setting using statistics represent objective polynomial list constraint polynomials expectation values set zero a a dichotomic b b dichotomic e dichotomic objective a e constraints a a b b a b id a b id a b id a b id assuming variable definitions operators function immediately level operators julia operators objective constraints setmonomial elements a a b b e operators optionally keyword argument byparty set false default setting true level operators party returns dictionary parties operators associated parties julia operators objective constraints byparty true dictintegersetmonomial entries set monomialb b set monomiale set monomiala a useful constructing operators intermediate levels npa hierarchy npa example short example operators appear npa moment matrix level chsh covers upper triangular treats monomials conjugates a a dichotomic b b dichotomic ops id a a b b ops sort set o o o ops o ops indices dict indexedops collect enumerate ops indexedops indexedops conj min conj haskey indices push indices else indices julia sort collect indices printf s id a a b b a a a b a b a b a b b b a a a a a a a a b a a b a b b a b b b b b b b b a a a a a a a b a a a b a a a b a a a b a a b b a a b b a b b b a b b b a b b b a b b b b b b b example min conj conjugate comes lexicographically comparisons monomials defined julia a a true julia a a false julia a a true julia a a a true sort reason inequalities compare monomials polynomials polynomials julia a a true julia a a error methoderror method matching isless monomial polynomial comments implementation section details operators implemented mainly people understand code modify basic idea library npa hierarchy method pretty straightforward types operators supported compute operator products appearing upper triangular moment matrix check relations results translate constraints moment matrix main library aims add support julia arithmetic automatically simplifying products types operators commonly encountered quantum optimisation handled npa hierarchy main types operator defined code abstract operator type defined srcopsprimitivejl concrete subtypes dichotomic etc defined srcopspredefinedjl corresponding types supported operator types objects types internally meant created manipulated directly user monomial defined srcopsmonomialjl represent products operators associated parties polynomial defined srcopspolynomialjl represent linear combinations monomials operator operator abstract type essentially means collective name concrete types throughout code assumed common properties interchangeable significant extent particular passed arguments functions conj base concrete subtypes dichotomic structs representing types operators supported fields depends type example dichotomic objects field index index projector output input unitaries integer index boolean conj field tracking conjugated objects basic operator types structs containing data created calling constructors functions capitalised names types example julia dichotomic julia fieldnames dichotomic input julia input julia projector p julia fieldnames projector output input julia output input julia unitary true julia fieldnames unitary index conj julia index conj true note constructors exported quantumnpa module prefix names quantumnpadichotomic load codebase includeqnpajl call file srcopsprimitivejl defines default implementations key functions supported operators overriden default behaviour correct example conj defined generically operators return original operator base conj operator fine operators meant hermitian julia cx conj julia cx true hermitian types conjugates determined depending type specialised versions conj instance unitary objects conj field version conj specialised unitaries toggles definition generated macro amounts base conj unitary unitary index conj version called conj called unitary argument julia conj true julia conj u julia conj false multiply operators especially product operators simplified determined generic specialised versions base generic version base operator operator means default rule concatenate operators multiplied represented list multiplicative coefficient allows possibility scaling factors appearing multiplications future unnormalised projector squares multiple currently operators defined codebase coefficient zero implementation sufficient operator types practice generic multiplication rule usually fallen multiply operators types julia operator p multiplication operators type usually handled specialised versions dichotomic objects simplest nontrivial multiplication rules product dichotomic operators identity input fields otherwise concatenate implementation function base dichotomic dichotomic return input input empty vector represent identity products represented vectors dimensional arrays operators function joinops defined near beginning srcopsprimitivejl determines multiply products takes vectors operators opsx opsy basically takes multiplies element opsx opsy repeats result representing identity returns concatenation remaining elements opsx empty product remaining opsy example invocation julia element vectoroperator julia element vectoroperator p julia joinops operator p monomial monomial basic type operator meant created manipulated normal quantumnpa represent products operators parties structs field word contains vector p ops p ops pairs party vectors p p etc vectors operators ops ops type joinops function described associated parties look contents monomial accessing word field julia a a dichotomic julia pb projector julia ue ue unitary julia a a pb ue ue a a pb ue ue julia word element vectortuplevectorint vectoroperator p u u party vectors left example vectors integers representing party parties operators associated valid party vectors vectors integers integers strictly increasing integer party vector considered lexicographically precede length length length length contain single party required operators associated parties commute intersection party vectors empty commutes commutes commute example monomial objects meant represent monomials reduced canonical form monomial considered correctly reduced form party vectors valid appear lexicographic commutation relations allow basically means party vector immediately followed party vector precede lexicographically nonzero intersection vectors operators nonempty reduced example valid vector contain dichotomic operator twice unitary conjucate directly following key functions particularly base conj adjoint responsible maintaining conventions return monomials described canonical form assuming inputs canonical form recommended build monomials start monomials containing single operator multiply construct monomials monomial containing operator created calling monomial function party vector operator arguments julia monomial dichotomic a julia word element vectortuplevectorint vectoroperator construct monomial calling monomial array pairs party vectors vectors operators argument readable makes easy generate invalid monomials avoided polynomial polynomial objects represent linear combinations monomials a a b single field terms dictionary mapping monomials coefficients julia id a a id a a julia terms dictmonomial entries id a a terms nonzero coeffients stored arithmetic functions indexed assignment setindex makes create remove pairs coefficient zero setting term zero deletes dictionary julia id a a julia a a julia id julia terms dictmonomial entry id zero polynomial represented empty dictionary versions polynomial constructor basic takes dictionary mapping monomials coefficients simply terms field meant internally care create invalid polynomials break assumptions elsewhere library julia polynomial dict a a a a julia false versions create polynomial input argument returns zero polynomial monomial monomial polynomial julia polynomial julia polynomial id julia polynomial a a julia polynomial a a julia polynomial id mentioned latter returns polynomial input fourth define multiplication monomial srcopspolynomialjl base monomial polynomial base monomial polynomial acknowledgements started development library postdoc laboratoire information quantique universit libre de bruxelles belgium november continued project quantinuum