hashidsjl julia port javascript hashids implementation website installation install run julia pkg replmode pkg add hashids install development version run following command instead pkg add hashids master run built unit tests pkg test hashids verify functioning properly machine usage import hashids module using statement julia using hashids basic usage configure default parameters julia conf hashids configure encode single integer julia encode conf mj decode hash returns element integer array julia decode conf xoz element arrayint encode integers julia encode conf elfkrio julia encode conf elfkrio decode hash returns elements integer array julia decode conf buvjfxm element arrayint using custom salt hashids supports salting hashes accepting salt value don decode hashes provide unique string hashidsconfigure julia conf hashids configure salt salt julia encode conf nvb generated hash changes whenever salt changed julia conf hashids configure salt equivalent hashidsconfiguresalt salt julia encode conf ojk salt string characters provides decent randomization controlling hash length default hashes shortest reason increase hash length obfuscate integer hash passing minlength hashidsconfigure hashes padded extra characters julia conf hashids configure minlength julia encode conf qvolejrejnmgqb using custom alphabet set custom alphabet hashes default alphabet abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz lowercase letters hashes pass following custom alphabet julia conf hashids configure alphabet abcdefghijklmnopqrstuvwxyz julia encode conf kekmyzyk custom alphabet contain characters emojis alphabet encode hex instead useful encode mongo objectids julia conf hashids configure julia hashid encodehex conf ffbcfcd ylwjluqxqxmly julia hex decodehex conf hashid ffbcfcd please note equivalent julia conf hashids configure julia hashid encode conf xffbcfcd yqpjlzgzjlwkgev julia hex string decode conf hashid base ffbcfcd difference built encodehex result length contained leading zeros example encodehexconf encode qexogk decode length information preserved randomness primary purpose hashids obfuscate ids meant tested security purposes compression algorithm try hashes unguessable unpredictable repeating repeating patterns identical hash julia conf hashids configure salt julia encode conf wccwce valid incremented julia encode conf krhnurhptkcjidtwcsx julia encode conf nv julia encode conf m julia encode conf yd julia encode conf l julia encode conf rd curses code written intent placing generated hashes visible url makes unfortunate generated hashes accidentally formed bad word algorithm tries avoid generating common english curse words placing following letters int int int bigint julia supports bitrange integers int uint int uint int uint int uint int uint bigint standard api encode decoding hashid algorithm tries decode system int type int x architecture overflow bitrange automatically expanded int int bigint throw error license mit license license file hashids source projects commercial product