simdpiratesjl deprecated simdpiratesjl deprecated favor vectorizationbasejl library serves primary purposes letting users write explicit simd code serving codegen backend libraries loopvectorizationjl major driving factor api divergence simdjl simdpiratesjl codegen lot easier multiple dispatch heavy lifting code correct based type information major differences vload vstore api zerobased indexing behavior function input types julia using simdpirates julia rand ptra stridedpointer warning garbage collected julia vload ptra julia vload ptra type mm represents indexing vector julia vload ptra mm svec float julia linearalgebra adjointfloatarrayfloat julia vload ptra mm svec float julia linearalgebra adjointfloatarrayfloat julia vload ptra mm svec float julia linearalgebra adjointfloatarrayfloat julia vload ptra mm mm svec float julia getindex ref linearalgebra adjointfloatarrayfloat index using vectors julia si svec ntuple core vecelement val julia vload ptra si svec float julia linearalgebra adjointfloatarrayfloat api vstoreabstractstridedpointer similar index determines elements stored scalar stored implied elements manually reduce vector store scalar location sum prod operation assumed operations bitmasks placed affter index tuple perform masked loadsstores useful dealing arrays example using single api types determing behavior simplifies simd code geneartion macros generated functions single version code producing expressions handle various contingencies move meta programming multiple dispatch mm type represents indexing abstractarray locations mm reflected arithmetic operations julia mm mm julia mm svec int offseting increments index multiplying multiply step allows implement cartesian indexing simply dot product cartesian indices strides array care avoid multiplying mm instances whenever convert mm svec equivalent behavior loadsstores elements inferior performance discontiguous memory accesses whenever stride equal compile time commonly stride exploited documenation begins simdpiratesjl library simd intrinsics code stolen authors maintainers deserve credit aside pirating code simdpirates provides pirate macro imagine re commiting type piracy julia macroexpand pirate v v v v simdpirates vmuladd v v simdpirates vmul v v functions simdpiratesvmuladd simdpiratesvmul methods defined ntuplecorevecelementunionfloatfloat substituting base functions methods appropriate definitions base types actual piracy recomended approach svec struct wrapped vector overloads julia vbroadcast val svec float welcome code changes library submit simdjl highlights generating random vectors re simd generation random please vectorizedrngjl julia svec ntuple val core vecelement rand svec float julia svec ntuple val core vecelement rand svec float julia svec ntuple val core vecelement rand svec float fast flags common operators allow contractions julia foo foo generic function method julia foo foo foo generic function methods results following asm julia codenative debuginfonone foo text vmovupd rsi zmm vmovupd rdx zmm vfmsubpd rcx zmm zmm vmovapd zmm rdi movq rdi rax vzeroupper retq nop julia codenative debuginfonone foo text vmovupd rsi zmm vmulpd rdx zmm zmm vmovapd zmm rdi movq rdi rax vzeroupper retq nopl rax arithmetic argument foo reduced single vfmsubpd instruction vectorized fused multiplication subtraction packed double precision argument version dropped producing vmulpd vectorized multiplication packed doubles implementing compensated algorithms simdpirates provides functions prevent optimizations julia efoo simdpirates evsub simdpirates evmul efoo generic function method julia efoo efoo efoo generic function methods julia codenative debuginfo none efoo text vmovupd rsi zmm vmulpd rdx zmm zmm vsubpd rcx zmm zmm vmovapd zmm rdi movq rdi rax vzeroupper retq nop julia codenative debuginfo none efoo text vmovupd rsi zmm vmulpd rdx zmm zmm vmovapd zmm rdi movq rdi rax vzeroupper retq nopl rax allides subtracting multiplication subtraction contracted additions changes related memory management prefered means masking bitmasks instead ntuplecorevecelementbool bitmasks extremely efficient avx architectures note bool byte i i note zero extensions truncations convert fourth ellided compiler advantage bit representation convenient generate masks means vectorized comparison example loop length using vectors width julia julia uint ans uint xf julia bitstring ans julia rand julia vload val pointer xf svec float efficient means safely calculating remaining iterations loop segfaulting bounds library provides cartesian indexing vectorizationbasejl stridedpointer note pointers arrays based indices appropriate julia randn julia using vectorizationbase julia vload val stridedpointer svec float julia linearalgebra adjointfloatarrayfloat strided pointer handle unit strides nthe axis julia randn julia vloadval stridedpointerview svecfloat julia view linearalgebraadjointfloatarrayfloat julia julia codenative debuginfonone vloadval stridedpointerview text movq rsi rax movq rsi rcx leaq rax r imulq rdx rax imulq rdx rcx addq rax rcx shlq rcx addq rsi rcx vpbroadcastq r zmm vpbroadcastq rcx zmm movabsq rax imm xfccf vpmullq rax zmm zmm vpaddq zmm zmm zmm kxnorw k k k vgatherqpd zmm zmm k vmovapd zmm rdi movq rdi rax vzeroupper retq nopw csraxrax vgatherqpd instruction load unevenly spaced data note efficient vmovpd importantly means write function taking arrays arguments passes view stride function produce correct answer else fun inline function testcore ptrai ptr ptrbi ptr ptrci ptr val ptrb ptrbi ptrc ptrci ptra ptrai simdpirates lifetimestart ptrai val vectorizationbase pickvector wshift vectorizationbase pickvectorwidthshift incr sizeof wshift wshift vb vload ptrb vc vload ptrc vstore ptra vmul vb vc ptra incr ptrb incr ptrc incr ptra ptrai vbroadcast zero wshift vadd vload ptra ptra incr simdpirates lifetimeend ptrai val vsum testsplit pd pointer testcore pd pd pd val function takes dot product stupid multiplies elementwise storing results preallocated storage summing elements julia rand julia buff view julia view julia view julia using random julia rand rand fill buff julia julia testsplit julia buff linearalgebra adjointfloatsubarrayfloat arrayfloat tuplebase slicebase onetointint true contents buff unchanged actually store julia codellvm debuginfonone testsplit define double juliatestsplit jlvaluet addrspace nonnull align dereferenceable top addrspacecast jlvaluet addrspace jlvaluet addrspace addrspacecast jlvaluet addrspace jlvaluet bitcast jlvaluet i load i i align getelementptr i i i getelementptr i i i call void llvmlifetimestartpi i i nonnull ptri bitcast i double resi load double double ptri align ptri bitcast i double resi load double double ptri align resi fmul reassoc nnan ninf nsz arcp contract double resi resi getelementptr i i i getelementptr i i i ptri bitcast i double resi load double double ptri align ptri bitcast i double resi load double double ptri align resi fmul reassoc nnan ninf nsz arcp contract double resi resi getelementptr i i i getelementptr i i i ptri bitcast i double resi load double double ptri align ptri bitcast i double resi load double double ptri align resi fmul reassoc nnan ninf nsz arcp contract double resi resi getelementptr i i i getelementptr i i i ptri bitcast i double resi load double double ptri align ptri bitcast i double resi load double double ptri align resi fmul reassoc nnan ninf nsz arcp contract double resi resi resi fadd reassoc nnan ninf nsz arcp contract double resi resi resi fadd reassoc nnan ninf nsz arcp contract double resi resi resi fadd reassoc nnan ninf nsz arcp contract double resi resi call void llvmlifetimepi i i nonnull vec shufflevector double resi double undef i i i i i vec shufflevector double resi double undef i i i i i vec fadd double vec vec vec shufflevector double vec double undef i i i vec shufflevector double vec double undef i i i vec fadd double vec vec vec shufflevector double vec double undef i zeroinitializer vec shufflevector double vec double undef i i vec fadd double vec vec res extractelement double vec i ret double res indeed stores lifetime declared contents undefined function expires write unfortunately optimization extremely brittle hard advantage possibility aliasing example trigger calculating constant offsets base pointer llvm figure alias