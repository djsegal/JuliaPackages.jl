conditionaljump package built top jump provides basic automatic generation indicator variables allow limited statements form condition implies constraint convex optimizations automatically introducing binary indicator variables using interval arithmetic choose appropriate formulation please note package developed maintained jump developers usage basic implications using jump cbc conditionaljump model solver cbcsolver variable bounds variables currently requirement variable require whenever implies objective min solve assert getvalue assert getvalue warmstarting solver mixedinteger models perform feasible initial solution assigned initial values variables using jump setvalue function conditionaljump values add starting values binary indicator variables warmstart function using jump cbc conditionaljump model solver cbcsolver variable bounds variables currently requirement variable require whenever implies objective min guess solution setvalue setvalue warmstart solve assert getvalue assert getvalue fixing binary values sometimes useful write model implication constraints choose solve model implications fixed example wish try solving model call warmstartmodel true values previously set setvalue determine exactly sets constraints applied concretely model solver cbcsolver variable bounds variables currently requirement variable require whenever implies objective min set indicator variables note fix optimization simply requires implications depend fixed set containing means fixed equal setvalue warmstart true solve assert getvalue assert getvalue model solver cbcsolver variable bounds variables currently requirement variable require whenever implies objective min set indicator variables note fix optimization simply requires implications depend fixed set containing means fixed equal implication fixed equal setvalue warmstart true solve assert getvalue assert getvalue disjunctions package provides ifelse macro create simple statements optimization variables example write simple update function function update else julia update variables julia model julia variable julia update error methoderror method matching isless int jumpvariable closest candidates isless real abstractfloat operators jl isless real forwarddiffdual home rdeits julia v forwarddiff src dual jl isless real real operators jl stacktrace update jumpvariable repl replace statement ifelse function magically function update ifelse macro jump define variable type commit type piracy defining julia update julia model julia variable julia update using easily write optimizations repeated applications update function modelpredictive control application model solver cbcsolver variable ys push ys update ys objective max sum ys solve assert getvalue ys optimal solution objective maximize sum variables ys update rule require solution look due limits suboptimal objective value indicator constraints indeed optimal solution complicated disjunctions conditional statement expressed form else switch macro explicitly switch note using switch promising set providing completely cover feasible set write switch complementarity disjunctions final type conditional express disjunction simply exactly conditions holds disjunction macro handles model variable disjunction create complementarity constraints require product expressions equal zero require instead require model variable variable disjunction implementation notes indicator constraints currently enforced using formulation formulation transforming constraint implies constraint restricted sufficiently essentially unbounded constraint reduces desired key successfully applying formulation choosing value restrict value create numerical difficulties solver conditionaljumpjl intervalarithmeticjl solve appropriate value automatically idea bounds upper lower bounds jump model compute exactly complicated expressions implies x y x handled automatically intervalarithmeticjl propagate intervals various functions example look model model solver cbcsolver variable bounds variables currently requirement variable require whenever implies objective min constraints generated indicator variable z z sufficiently values range create numer