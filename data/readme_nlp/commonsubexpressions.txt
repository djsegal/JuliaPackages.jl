commonsubexpressionsjl julia package provides cse macro performs common subexpression elimination means piece code foo function foo evaluated times cse macro produce code moves expression loop foo foo foo evaluates foo arbitrarily complex nested expressions handled result efficient code cse inv inv invh inv gplusw invh gplusw gplusw invh wrap entire function definitions code blocks cse function foo caveats package results correct please carefully report issues function called block wrapped cse macro pure function effects cse macro enforce verify function effects common subexpression elimination change behavior program effects happen expected brief aside function purity pure function effects function effects mean calling somehow changes program beyond value returns trivial function effect fcounter function global fcounter fcounter increases counter fcounter time called addition function mutates input arguments pure changing input arguments constitutes effect visualization cse transformation visualized using treeviewjl package simple example package currently construct dataflow graph dataflowjl instead performs relatively simple steps initialize set disqualified symbols initialize list setup commands walk expression tree repeatedly performing steps assignment operation encountered add target assignment disqualified symbols function call encountered function arguments constants symbols symbols disqualified replace function call current expression newly generated symbol append setup commands expression performs function call assigns symbol return transformed expression setup commands prepended simple procedure ensures cache functions inputs change code block assuming function calls pure requir