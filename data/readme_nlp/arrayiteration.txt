arrayiteration update described moved julia item efficient synchronizable iterators main benefit sparse matrix algebra key solved julia sparse matrix types sparsematrixscs diagonal bidiagonal tridiagonal symtridiagonal wrappers adjoint transpose compose types plus types packages implementing efficient algorithms require methods pair types goal package simply define iterators matrix type define reasonablyefficient fallback method repository contains candidate generation interface handling arrays julia programming language interconnected advantages relaxes assumptions built julia current array api employs indirection create opportunities performance flexibility particular arrayiteration relaxes following assumptions array dimensions indexed size arrays stored column major dimension linear cartesian indexing efficient access elements array generic code support abstractarray choice visit elements aka generic sparse array handling time writing relaxations handled comfortably missing substantial components api summary handful functions inds inds returns unitrangeint specifying indexes dimension default value size override specific array types oa offsetarray type definition example update axes modern julia sync sync similar zip adds extra constraint corresponding elements whereas zip employs independent iterators sync makes specify particular array type efficient access pattern consistent efficient patterns array types simple example rowmajor arrays vs columnmajor arrays cacheefficiency dictates ideally accessed memory storage arrays preferred access patterns sync ed choose common access pattern makes remain consistent iterator hints index value stored algorithms benefit able iterate particular dimension array algorithms linear algebra matrixmultiplication factorizations fall category iterators expensive construct example construct efficient iterator visits range rows column sparse matrix search vector indexes iteration occur inside sync block time spent constructing iterator wasted sync overrides efficient access pattern favor easily synchronized iterator solve creation iterator hints types store user choices performing detailed computation sync takes iterator hints converts actual iterators synchronization required performs task arrayarray basis name pun eachindex index equivalent eachindex takes iterationhint provided index converts actual iterable functions create iterator hints index result iteration indexes array value iteration entries stored visiting stored indexesvalues sparse array common syntax index return indexes array index visit rows th column iterating return single index accessing elements words index sum chosen values th column note single index code alternatively written value using special shortcut advantage syntax allows customization particular iterator example reshapedarray efficient iterator references parent array reshaped array likewise efficiently support sparse arrays write stored stored zero elements contribute sum combine stored hints example index stored corresponding index array sparsity stored result huge efficiency gains thanks multiple dispatch cost handling dense arrays worth noting contrast subarray indexes returned index correspond original array shifted indexes subarray help synchronizing operations arrays naturally iterate columns entire array index value stored support cartesian range consistent conventional size range status api fairly supported except syncstored essentially missing credits julialangjulia useful influenced current design framework