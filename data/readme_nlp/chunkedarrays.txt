chunkedarraysjl chunkedarraysjl package increasing performance arrays generated inside loops basic benchmarks chunked arrays faster naive approaches using random loop reasons including simd generating random generators using rand faster generating random separate calls rand chunkedarrays allows generate arrays larger amounts provides convenient wrapper hide details included ability generate buffer parallel allows utilize array chunk replaced chunk generated process maximizing efficiency installation install package simply pkg add chunkedarrays using chunkedarrays note version v version targets julia v current master changes v date version v compatibility check vcompat branch using package define chunkedarray forms chunkedarray chunkfunc function buffersize int buffersizedefault type floatparallel paralleldefault chunkedarray chunkfunc function outputsize ntuple buffersize int buffersizedefault type floatparallel paralleldefault chunkedarray chunkfuncrandprototype abstractarray buffersize buffersizedefaultparallel paralleldefault generate value array function chunked examples example wished generate bunch standard normal random loop naive via loopsize randn chunkedarray outputs standard normal random definition following chunkrand chunkedarray randn loopsize chunkrand constructor chunkedarraychunkfuncfunctionbuffersizeintbuffersizedefaulttypefloatparallelparalleldefault buffer size parallel generation note running multiple processes parallel generation instead wished generate randn time loop specify dimensions chunkrand chunkedarray randn loopsize chunkrand simply prototype chunkrand chunkedarray randn loopsize chunkrand generate standard normals similar benchmarks benchmarks found test folder runs required ci little difference loop size increases difference grows const loopsize const buffsize const numruns test results average time thousand thousand altogether hundred hundred beginning pre rands chunked rands premade chunked rands buffer chunked rands direct chunked rands max buffer parallel chunked rands buff