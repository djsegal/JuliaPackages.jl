reducejl symbolic parser generator julia language expressions using reduce algebra term rewriter premise reducejl based idea symbol expr types translated computer algebra rewrite commands automatically parsed julia asts essentially extending julia language programable symbolic ast rewrite environment reduce system algebraic computations mathematicians scientists engineers exact arithmetic using integers fractions arbitrary precision numerical approximation polynomial rational function algebra factorization expansion polynomials rational functions differentiation integration multivariable functions exponential logarithmic trigonometric hyperbolic output results variety formats automatic user controlled simplification expressions substitutions pattern matching expressions quantifier elimination decision interpreted logic solution ordinary differential equations calculations wide variety special transcendental functions calculations involving matrices numerical symbolic elements matrix commutative algebra powerful intuitive userlevel programming language generating optimized numerical programs symbolic input dirac matrix calculations energy physicists solution single simultaneous equations interface applying symbolic manipulation julia expressions using reduce term rewrite system reduce expressions rexpr objects parse julia expr objects vice versa interface link communicates interprets via various reduce output modes using rcall method level reducejulia syntax parsergenerator walks arbitrary expression rewrite mathematical code import operators reduce using code generation apply arbitrary computational expressions interactive reduce repl julia terminal window activated key extended arithmetic operators compute symbol expr types provides hundreds internal external methods supporting argument types additional packages depend reducejl maintained juliareducepkg upstream reduce software created anthony hearn maintained collaborators sourceforge package heavily modifed version nathan smith maximajl additional features setup reduce package provides base functionality julia reduce expressions provided redcsl path gnulinuxosxwindows pkgbuildreduce automatically download precompiled binary running unix operating system build script download source attempt compile redcsl success depends build tools installed automated testing travis ci appveyor using linux osx windows operational using reduce julia pkg add reduce pkg build reduce julia using reduce reduce free csl version revision march users wish experimentally apply additional precompilation enable extra precompilation scripts setting environment variable envredpre julia effective reduce compiled view documentation stable features examples reduce package julia language created mathematics computer algebra research upstream developed reduce software please consider donating thanks appreciation julia project interfacing upstream reduce language liberapay github sponsors patreon contribute documentation tests examples repository usage extended algebraic symbolic expression mode reducejl activated forceimportjl force using reduce algebra locally extends native julia functions symbol expr types current module extending global methods alternatively methods provides accesed prefixing algebra front method reduce expressions encapsulated rexpr objects manipulated julia using standard syntax create expression object using rexprexpression string constructor expression additionally arbitrary julia expressions parsed directly using rexprexpr constructor internally rexpr objects represented array accessed calling str object reduce julia standard arithmetic operations extended symbol expr types julia julia ans julia limit ans inf julia abstract syntax trees automatically converted sequences reduce statements using rexpr constructor return parsed julia quote blocks usig parse rcall method evaluate type expression julia int sin im pi rcall multiple equivalent achieving result julia int sin im output rcall input type julia intsin rcall cossin rcallexprswitches evaluate expr using reduce mode switches expand factor latex julia im int rexpr pi int julia rcall ans horner parse quote im sqrt atan sqrt log log mathematical operators reduce modes applied directly expr rexpr objects julia expr function fun return horner function fun return additionally reduce switch statements macros control evaluation expressions julia rounded factor core features corresponding julia method language features implemented directly evaluated rcall using synergy julia syntax julia expr product rcall bigstr squash function provides reduce program blocks simplified functions julia expr function example quote target target squash factor function example program variable symbolic variables loading packages packages shipped reduce loaded loadpackage method example optimize method available julia loadpackage scope julia algebra optimize quote g g g g g g g g g g g g g g g g g packages loaded predefined julia dispatch methods matrices special support symbolic matrices added reducealgebra methods julia array jacobian method added reducelinalg package dedicated linalg extra package included reduce binaries julia using reducelinalg julia eqns x x x x x xt x xt x xtt xtt xtt xt xttt xtt xtt x x x x x x x sin x element arrayexpr x x x x xt x xt x x xt xttt xtt xtt xtt x x xtt xtt x x x x x sin x julia vars x x x x x x xt xt xt xt xt xtt xtt julia jacobian eqns vars reduce mat array package provides demonstration additional reduce methods imported julia output mode various output modes supported repl default nat output mode displayed rexpr objects julia sin im cos mathconstants rexpr sqrt cos sinh output printed screen calling printnat method direclty convert julia expression object latex code using latex method julia print latex sin cos mathconstants begin displaymath cos left left left sqrt sin displaymath internally command essentially expands rcallsin cosmathconstantslatex print equivalent ijulia display output rexpr objects rendered latex rlfi reduce package latex mode repl interface similar help shell modes julia reduce provides reduce repl mode pressing shift character julia terminal prompt output nat mode reduce df atan goldenratio sqrt sqrt troubleshooting reduce repl appearing pressed reduce pipe broken session restored simply calling reducereset requiring restart julia reloading package kills currently running reduce session reinitializes otherwise questions gitterdiscourse submit issue pullrequest require additional features noticed unusual edge behavior abstracttensors interoperability importing abstracttensorsjl module reduce able correctly bypass operations tensoralgebra elements correct methods scope reducealgebra module requires additional overhead grassmannjl reduce packages abstracttensors interoperability interface enables separate precompilation background reduce package currently provides robust interface directly csl version reduce julia language repl achieved interfacing abstract syntax tree expr objects parser generator rexpr objects using iobuffer communicate redpsl reduce system scalar vector matrix algebra computer supports arbitrary precision numerical approximation interfaces gnuplot provide graphics interactively simple calculations provides programming language syntax similar modern programming languages reduce distinguished history computer algebra systems systems address issues sometimes emphasis axiom macsyma maxima maple mathematica reduce implemented lisp axiom macsyma completely hidden casual user reduce primarily runs portable standard lisp psl codemist standard lisp csl included sourceforge distribution psl established compiles machine code whereas csl compiles byte code hence psl faster csl available wider range platforms releases reducejl enable application various reduce functionality packages manipulate julia language simplify compute program expressions runtime intended symbolic precomputation required numerical algorithm code generation julia level performance dynamic programming language numerical computing provides sophisticated compiler distributed parallel execution numerical accuracy extensive mathematical function library julia base library written julia integrates mature breed source fortran libraries linear algebra random generation signal processing string processing strongest legacy lisp julia language metaprogramming support lisp julia represents code data structure language code represented objects created manipulated language program transform generate code allows sophisticated code generation extra build steps allows true lispstyle macros operating level abstract syntax tre