sequentialmontecarlojl package provides light interface serial multithreaded implementation sequential monte carlo smc algorithm smc random algorithm approximate numerical integration sampling documentation examples helpful getting started getting package pkg add sequentialmontecarlo quick start load package using sequentialmontecarlo define particle consisting float mutable struct floatparticle float floatparticle initial distribution standard normal markov transitions define stationary markov chain function newparticle floatparticle rng int particle floatparticle newparticle randn rng else newparticle particle randn rng log potential function potential function exp function lg int particle floatparticle return particle particle pedagogical example deduce etap hatetap essentially potential functions stop markov chain exploding favouring values closer addition hatp sqrt specify model using lg stating maximum length model specifying types particle particle scratch space latter scratch space required model smcmodel lg floatparticle create smc inputoutput struct specifying particles algorithm run steps thread run serial particle system recorded smcio smcio modelparticle modelpscratch true run algorithm twice timing times time include compilation overhead time allocations apart associated using time macro time smc model smcio time smc model smcio check approximations smciologzhats close true values println vector log sqrt println smcio logzhats check moments etap resp hatetap close resp println sequentialmontecarlo alletas smcio false println sequentialmontecarlo alletas smcio false println sequentialmontecarlo alletas smcio true println sequentialmontecarlo alletas smcio true try threadsnthreads threads instead time algorithm compilation overheads time parallel smc implementation allocations time allocation parallel region algorithm regions step algorithm due julia multithreading interface nthreads threads nthreads smcio smcio modelparticle modelpscratch nthreads true time smc model smcio time smc model smcio