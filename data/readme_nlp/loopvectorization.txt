loopvectorization installation using pkg pkg add loopvectorization loopvectorization supported julia tested julia nightly warning misusing loopvectorization serious consequences inbounds misusing lead segfaults memory corruption expect time turbo macro block code indexing array bounds turbo perform bounds checking iterating empty collection iterating empty loop eachindexfloat undefined behavior result bounds memory accesses ensure loops behave correctly relying specific execution turbo re operations loops inside scope correctness depend particular implement cumsum turbo using multiple loops level nested loops usage library provides turbo macro prefix loop broadcast statement tries vectorize loop improve runtime performance macro assumes loop iterations reordered currently supports simple nested loops loop bounds inner loops constant iterations outer loop single loop level loop nest limitations removed future version benchmarks please documentation benchmarks versus base julia clang icc ifort gfortran eigen believe code compiler flags improved submit benchmarks julia code using loopvectorization tested performance regressions semiregular basis please feel free file issue pr code sample examples dot product llvmjulia default generate essentially optimal code primary vectorized loop dot product vectorized loop computes simdvectorwidth iterations time cpu running benchmarks float data simdvectorwidth meaning compute iterations time llvm slow handling tails lengthiterations reason benchmark plots performance drop size remainder increases simple loops dot product loopvectorizationjl optimization handle tails efficiently julia using loopvectorization benchmarktools julia function mydot inbounds simd eachindex mydot generic function method julia function mydotavx turbo eachindex mydotavx generic function method julia rand rand julia btime mydot ns allocations bytes julia btime mydotavx performance similar ns allocations bytes julia rand rand julia btime mydot loops shorter remainder slow ns allocations bytes julia btime mydotavx performance remains unchanged ns allocations bytes matrix multiply vectorize fancier loops familiar example dive julia function mygemm inbounds fastmath axes axes cmn zero eltype axes cmn cmn mygemm generic function method julia function mygemmavx turbo axes axes cmn zero eltype axes cmn cmn mygemmavx generic function method julia julia c matrix float undef randn randn julia c similar c c similar c julia benchmark mygemmavx c benchmarktools trial memory estimate bytes allocs estimate minimum time s gc median time s gc mean time s gc maximum time s gc samples evals sample julia benchmark mygemm c benchmarktools trial memory estimate bytes allocs estimate minimum time ms gc median time ms gc mean time ms gc maximum time ms gc samples evals sample julia using linearalgebra test julia test c c test passed julia blas setnumthreads blas vendor mkl julia benchmark mul c benchmarktools trial memory estimate bytes allocs estimate minimum time s gc median time s gc mean time s gc maximum time s gc samples evals sample julia test c c test passed julia e e e e produce macro kernel implementation matrix multiplication able handle matrices perform blocking packing arrays prevent operations memory bottlenecked day loopvectorization try model costs memory movement l l cache generate loops macro kernel following low et al view tool generating efficient computational kernels leaving tasks parallelization cache efficiency broadcasting example straightforward operation expressed via broadcasting typed lazy matrix multiplication operator julia using loopvectorization linearalgebra benchmarktools test blas setnumthreads julia rand rand rand rand julia x view julia x turbo view julia test x x test passed julia buf matrix float undef size size julia buf similar x julia btime x view mul buf buf s allocations bytes julia btime turbo x view s allocations bytes julia test x x test passed julia amulbtest x view julia amulbtest x view julia test x x test passed lazy matrix multiplication operator escapes broadcasts fuses easy write code avoids intermediates recommend checking splitting operation pieces isolating matrix multiplication increases performance especially matrices separate multiplication leverage blas advantage threads improve optimizations loopvectorization improve note loops faster broadcasting behavior broadcasts determined runtime information dimensions leading dimension size broadcasted compile time julia function amulbtest bkbn turbo axes axes bk cmn zero eltype axes cmn bk bn cmn amulbtest generic function method julia amulbtest x view julia test x x test passed julia benchmark amulbtest x view benchmarktools trial memory estimate bytes allocs estimate minimum time s gc median time s gc mean time s gc maximum time s gc samples evals sample dealing structs key turbo macro performance gains leveraging knowledge exactly data float int handled cpu strightforward generalize turbo macro arrays containing structs matrixcomplexfloat instead currently recommended users wishing apply turbo arrays structs packages structarraysjl transform array element struct struct element array using structarraysjl write matrix multiply gemm kernel matrices complexfloat complexint using loopvectorization linearalgebra structarrays benchmarktools test blas setnumthreads blas vendor const matrixfint unionmatrixfloat matrixint function mulavx matrixfint matrixfint matrixfint turbo size size cmn zero eltype size cmn cmn function muladdavx matrixfint matrixfint matrixfint factor turbo size size cmn zero eltype size cmn factor cmn const structmatrixcomplexfint unionstructarraycomplexf structarraycomplexint function mulavx structmatrixcomplexfint structmatrixcomplexfint structmatrixcomplexfint mulavx re re re muladdavx re im im mulavx im re im muladdavx im im re mulavx kernel accept structarray matrices complex multiply efficiently julia julia structarray randn complexf julia structarray randn complexf julia c structarray matrix complexf undef julia c collect similar c julia btime mulavx c s allocations bytes julia btime mul c collect collect collect structarray regular array s allocations bytes julia test c c test passed similar approaches kernels variety numeric struct types dual doublefloats etc packages using loopvectorization gaiusjl mablasjl octavianjl paddedmatricesjl recursivefactorizationjl snparraysjl tulliojl dianoiamljl tropicalgemmjl trixijl vectorizedstatisticsjl nanstatisticsjl vectorizedreductionjl dynamicexpressionsjl pysr symbolicregressionjl re using loopvectorization please feel free file pr adding list