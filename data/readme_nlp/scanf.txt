scanf scanf scans utfencoded input streams strings creates output data according format string mimics behaviour function name usage julia using scanf julia scanf prime za int string prime collect data happy tuple julia scanf inf uint int x inf scan datetime string note ms default values julia scanf format dd dddd julia ms scanf t int zeros int int features scanf provides macro scanfio formatstring args function scanfio scanfformat args format string string literal evaluated macro expansion time alternatively scanfformatformatstring scanfformatabstractstring create format object function call arguments default values types real abstractchar abstractstring ptr abstractvectorchar concrete subtypes real abstractchar abstractstring ptr numeric format specifiers compatible numeric arguments string conversion errors happen float int numeric arg type wide value boundary values correct sign stored inf format specifiers compatible arguments char char string char character string output data returned tuple including assigned values element value parsed default value assigned value corresponding element arg default value derived form default argument vector object output values additionally stored format strings follow definition scanf reference adaptations unicode characters supported format strings input data format strings whitespace specifiers ascii space characters input data characters isspace true skipped whitespace specifier format string form format specifications supported optional type modifiers etc ignored target type derived corresponding default argument instead type specifier width specified corresponding argument type char string type specifier nc width field argument type string vectorchar vector re resized characters actually read type specifier returns integer value character offset input data consumed scanf type specifier requires ptr default argument return value calls amount output arguments followed output data trailing ones maybe default values contrast arguments counted implementation input stream exhausted character read eofindicator returned assigned values format specifiers whitespace characters zero isspace true consumed input stream format specifier literal character character read compared literal character equal consumed otherwise process fails format specifier character processed character read assigned output argument character available process fails format specifier processed data consumed eof returned current read position returned description derived reference scanf function reads input stream io control string format specifies admissible input sequences interpreted using subsequent arguments define type converted input arguments match format specifiers required format format composed zero directives ascii whitespace characters ordinary utf character neither ascii whitespace character conversion specification conversion specification introduced character following appear sequence optional assignmentsuppressing character optional decimal integer zero specifies maximum field width characters optional length modifier implementation conversion specifier character specifies type conversion applied scanf function executes directive format directives executed directive fails detailed function returns failures described input failures due occurrence encoding error unavailability input characters matching failures due inappropriate input directive composed whitespace character executed reading input whitespace character remains unread characters read directive fails directive ordinary character executed reading character stream character differs directive directive fails differing subsequent characters remain unread similarly file encoding error read error prevents character read directive fails directive conversion specification defines set matching input sequences described specifier conversion specification executed following steps input whitespace characters specified isspace function skipped unless specification includes specifier whitespace characters counted specified field width input item read stream unless specification includes specifier input item defined sequence input characters exceed specified field width prefix matching input sequence character input item remains unread length input item zero execution directive fails condition matching failure unless file encoding error read error prevented input stream input failure except specifier input item directive count input characters converted type appropriate conversion specifier corresponding argument input item matching sequence execution directive fails condition matching failure unless assignment suppression indicated result conversion pushed ouput tuple result conversion represented output type conversion error thrown optional length modifiers ll hh accepted type specifier characters otherwise ignored conversion specifiers meanings matches optionally signed decimal integer format expected subject sequence parse base function integer type argument matches optionally signed integer format expected subject sequence parse base function matches optionally signed octal integer format expected subject sequence parse base function matches optionally signed decimal integer format expected subject sequence parse base function matches optionally signed hexadecimal integer format expected subject sequence thew parse base function matches optionally signed floating infinity nan format expected subject sequence parse function floating type matches sequence characters exactly specified field width field width directive argument type string char vectorchar field width char type character stored matches empty sequence whitespace characters argument types matches nonempty sequence characters set expected characters scanset argument types conversion specifier includes subsequent characters format string including matching bracket characters brackets scanlist compose scanset unless character left bracket circumflex scanset contains characters appear scanlist circumflex bracket conversion specifier begins bracket character scanlist following bracket character matching bracket specification otherwise following bracket character specification character scanlist character character defines range character left character defining range integer range unicode codepoints characters empty ranges ignored matches set sequences set sequences produced conversion printf function corresponding argument type ptr type input item converted pointer value implementationdefined manner input item value converted earlier program execution pointer results compare equal value otherwise behavior conversion undefined input consumed corresponding argument integer type converted characters read input stream call scanf function execution directive increment assignment count returned completion execution scanf function conversion specification includes assignmentsuppressing character argument consumed optional width field ignored matches single character conversion assignment occurs complete conversion specification words treated single ordinary character conversion specification invalid behavior undefined conversion specifiers valid behave respectively trailing white space including line characters left unread unless matched directive success literal matches suppressed assignments directly determinable via direct