introduction lerche german lark partial port lark grammar processor python julia lark grammars unchanged lerche installation julia repl using pkg pkgaddlerche documentation quick start notes lark users lerche reads lark ebnf grammars produce parser parser provided text conforming grammar produces parse tree tree visited transformed using rules rule function named production arguments called argument rule object subtype visitor transformer ebnf grammar parse text data structure follows define subtypes transformer visitor instances passed argument appropriate rule instance hold information transformation wish concrete type define visittokensmynewtype false processing token values faster leaving default true production grammar wish process write rule identical name production rule prefixed macro rule argument array containing arguments grammar production rule prefixed macro inlinerule following arguments refer argument grammar production token wish process define identicallynamed method rules precede terminal macro instead rule grammar string variable mygrammar text parsed transformed string variable mytext transformer subtype mytransformer following commands produce data structure text using lerche lark mygrammarparser lalr lexer contextual create parser lerche parse mytext create parse tree lerche transform mytransformer transform parse tree realworld example usage file citation publishing lerche useful please consider citing lerche paper issues please raise issues using lerche github issue tracker contributions contributions types welcome examples include improvements processing speed improved documentation links projects using lerche commenting triaging issues straightforward contribution fork repository changes create pull request notes lark users please read lark documentation converting lark programs written python lerche programs written julia changes outlined transformer visitor classes subtypes transformervisitor class method calls julia method calls instance type argument replacing self transformation visitor rules preceded rule macro inline rules inlinerule macro token processing methods terminal argument transformer visitor rules variable desired transformervisitor type grammars containing backslashdouble quote sequences fixed grammars containing backslash denote byte value fixed inconsistencies lark earley cyk grammars implemented dynamic lexer implemented errors messages attached bottom exception type hierarchy types contents unexpectedinput exception unexpectedcharacter exception message included puppetparser invoked parse error functional issues correctly interpreting import paths imported grammars please raise issue happens choice regex engine tree structure bytestring choices available sense julia implementation notes hints lerche currently based lark priority maintaining fidelity lark example global regex flags integers lark integers lerche means look values changed julian approach future rule inlinerule macros define methods lerche function transformerfunc julia multiple dispatch select appropriate method runtime terminal similarly defines methods tokenfunc parsing k file suggest lerche times faster lark cpython parsing parser generation slower optimisation techniques applied calculating storing grammar julia const variable top level package allow precompiled avoid grammar reanalysis time package load