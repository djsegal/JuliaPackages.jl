introduct lerch german lark partial port lark grammar processor python julia lark grammar unchang lerch quick start note lark user lerch read lark ebnf grammar produc parser parser provid text conform grammar produc pars tree tree visit transform use rule julia method argument rule object subtyp visitor transform name rule product call defin subtyp transform visitor dispatch appropri rule subtyp hold inform wish concret type prefix subtyp definit contain rule product grammar wish transform write rule ident name product rule prefix rule argument array contain argument grammar product rule prefix inlin rule follow argument refer argument grammar product near top modul contain subtyp rule rule holder line unnecessari futur real world exampl usag file note lark user pleas read lark document convert lark program written python lerch program written julia chang outlin note version contain rule rule holder macro simplifi transform visitor class type class method call julia method call type argument replac self transform visitor declar singl modul macro rule holder line type definit transform visitor declar subtyp appropri visitor transform type preced macro contain rule transform visitor rule preced rule macro inlin rule inlin rule macro argument transform visitor rule variabl desir transform visitor type grammar contain backslash doubl quot sequenc fix grammar contain backslash denot byte valu fix grammar lark grammar unchang lerch caveat note guarante appli sequenc charact interpret julia python languag parser particular note follow differ raw string julia written raw string content instead python string content sequenc insid python raw quot delimit string encod charact sequenc correspond singl quot analog julia obtain charact sequenc julia input backslash quot sequenc requir lark grammar repres doubl quot lark grammar defin sequenc backslash quot repres quot charact remain string julia pre process unicod escap recognis uxxxx python combin insert particular byte valu string avoid use julia keyword true fals name rule alias lark grammar chang exampl follow exampl simpl json parser implement grammar written json grammar raw start valu valu object array string sign true fals null null array valu valu object pair pair pair string valu string escap string import common escap string import common sign import ignor detail grammar syntax refer lark document item transform pars exampl immedi string subtyp transform pass addit keyword argument creat parser method name match rule name alia argument subtyp transform call whenev rule match method prefix rule macro pars tree children collect singl array argument inlin rule macro pars tree children singl argument rule holder modul contain rule struct treetojson transform inlin rule string treetojson replac rule array treetojson array rule pair treetojson tupl rule object treetojson dict inlin rule treetojson base pars float rule null treetojson rule treetojson true rule treetojson fals rule defin treetojson subtyp rule name match rule alia name grammar exampl whenev string rule match enclos doubl quot drop sequenc replac doubl quot final creat parser call lark constructor json parser lark json grammar parser lalr lexer standard transform treetojson pars json call lerch pars method json parser argument text pars argument lerch pars json parser test json exampl avail exampl directori studi exampl test directori contain simpl exampl correct construct grammar inconsist lark earley cyk grammar implement dynam lexer implement error messag attach bottom except type hierarchi type content unexpectedinput except unexpectedcharact messag includ implement note lerch current notic slower lark despit advantag julia compil plenti improv effort julia effici trick prioriti maintain fidel lark python yield implement use julia channel rule holder contain rule macro implement store rule inform dictionari local call modul store inform lerch data structur outsid lerch modul ideal julia multipl dispatch mechan select appropri rule reliabl rule name string dispatch method name found