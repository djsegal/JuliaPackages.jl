parameterspacepartitions parameter space partitioning model assessment method mapping regions parameter space qualitative data patterns parameter space partitioning mcmc sampling explore parameter space chain searches region parameter space specific pattern space sampled chain created newly discovered pattern iteration proposal sampled uniformly surface hyperspere dimensions parameter space example simple example parameter space partitioning applied cube regions equal volume load dependencies step load dependences session using distributions parameterspacepartitions using parameterspacepartitions testmodels using random dataframes random seed model function define model accepts vector parameters returns data predictions function model imported testmodels illustration simple example model returns parameter inputs substantive model returned value model predictions model parms args kwargs parms pattern function function categorizes predicted data qualitative pattern minimum pattern function recieve data input example pattern function pfun imported testmodels function illustration pfun requires location parameters hypercube object contains partition boundaries dimension pfun categorizes location dimension returns vector representing pattern example pattern indicates location partition axis axis axis function pfun location hypercube hypercube args kwargs pbounds hypercube pbounds nb length pbounds nd length location vals fill nd nd nb location pbounds location pbounds vals continue return vals model configuration set ndims npart create cube total regions dimensions hypbercue ndims partitions dimension npart boundaries code bounds contains upper lower boundaries dimension addition define hypercube object containing boundaries partition boundaries stored variable called pbounds example partitions equally spaced dimension unit cube alternatively unequal spacing increase difficulty exploring parameter space partition boundaries bounds fill ndims pbounds range npart hypercube hypercube pbounds starting sampling algorim requires starting begin exploring parameter space starting wrapped vector starting sampled uniformly unit cube using bounds ensure starting allowable ranges starting sufficient example seeding sampling algorithm multiple starting improve performance starting nstart sample function sample bounds map rand uniform bounds initial starting initparms map sample bounds nstart option configuration configure options define improve performance algorithm search radius configuration challenge balance tradeoff exploration exploitation radius stay region subspace region fail regions contrast radius regions found defined pitt et al noted acceptance rate heuristic hard requirement options stores bounds initial parameters threading enabled setting paralleltrue exploration revealed threading advantageous evaluation time reaches millisecond otherwise threading overhead reduce speed algorithm options options radius bounds niters initparms pass custom adaption function via keyword adaptradius default adaption function adjusts radius achieve acceptance rate additional information configuring default adaption function found via help feature adapt partitions requisite functions options specified explore parameter space function findpartitions accepts model function pattern function pfun options object additional arguments keyword arguments pfun results findpartitions model pfun options hypercube results vector results objects containing following information iter iteration algorithm chainid index chain chain parms vector parameters pattern target pattern chain acceptance vector indicating proposal accepted accepted parms accepted proposal accepted parms previous iteration results facilitate analysis convert results dataframe destructure parameter vector individual columns parameter df dataframe results parmnames symbol ndims transform df parms identity parmnames code block minimum maximum partition groupby df pattern summary combine p minimum p maximum p minimum p maximum p minimum p maximum sort shown algorithm found partitions addition size partition approximately expect dataframe row pattern pminimum pmaximum pminimum pmaximum pminimum pmaximum array float float float float float float volume estimation function estimatevolume approximates volume region using ellipsoid based covariance sampled region groupby df pattern dfvolume combine estimatevolume model pfun bounds hypercube parmnames dfvolume volume dfvolume x sum dfvolume x expected volume percentage estimates close dataframe row pattern x volume array float float visualization following code visualize results expected cube partitioned color coded regions using glmakie colorschemes statsbase transform pattern integer id transform df pattern denserank patternid scatter df p df p df p color df patternid axis type axis markersize colormap colorschemes seaborndeep colors grid true references pitt kim navarro myung global model analysis parameter space partitioning psychological review