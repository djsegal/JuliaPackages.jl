typedpolynomials typedpolynomialsjl provides implementation multivariate polynomial interface multivariatepolynomialsjl using strongly typed variables package identity variable encoded type variables types allows type system handle operations computing intersection monomials variables compiletime features handling variables type level makes constructing variables monomials terms efficient dynamicpolynomialsjl despite heavy type system package generated functions compatible static compilation tested caveats distinction package variable name identity variables named exactly object regardless created variables set variables compiletime performance overall dynamicpolynomialsjl change future usage easiest create variables polyvar macro julia polyvar declare variable named assign local variables names julia typeof typedpolynomials variable julia typeof typedpolynomials variable multiplying variables creates monomial vector variables contained monomial julia xy julia typeof typedpolynomials monomial julia typeof typedpolynomials monomial multiplying monomial variable variable monomial creates term julia julia typeof typedpolynomials terminttypedpolynomials monomial julia typeof typedpolynomials termfloattypedpolynomials monomial addition subtraction terms monomials variables creates polynomial julia julia typeof polynomial true julia examples differentiation substitution using typedpolynomials using test polyvar assigns resp variable name resp test differentiate compute derivative respect test differentiate compute gradient test replace test replace occurence test evaluate vectors variables polyvar macro create tuple variables automatically using typedpolynomials rand polyvar assign tuple variables x x x sum x x x x vec corresponds dot vec convert tuple vector