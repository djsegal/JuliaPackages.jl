precompilesignaturesjl package reads method signatures package generates precompile directives concrete signature usage add package package foo pkg activate foo foo pkg add precompilesignatures add precompilesignaturesfoo module logic example module foo using precompilesignatures precompilesignatures generate run precompile directives precompilesignatures foo module package package precompile directives searching concrete types method signatures example function function int float return package generate precompile tuple typeof int float package create precompile directives int float float float following method definitions function return unionintfloat float splitting union types disabled setting splitunionfalse note unfortunately writing function unionfloatfloat float return generate precompile directives float float signature simplified julia internals julia unionint julia methods sig tuple typeof words package easily extract types mentioned union package reduce time depends package signatures package concretely typed arguments precompile directives added types inside methods inferred performance gained adding directives indication package time time eval precompilablesprecompilesignatures reduced mib allocations plutojl compile time benchmark faster gib allocations fonspplutojl details obtained julia beta package compare running code precompilation phase packages nowadays run code precompilation phase example time writing makiejl runs srcprecompilesjl function precompile ccall jlgeneratingoutput cint return ax pl scatter ax pl lines figure axis return srcmakiejl base version include precompilesjl precompile happens code lines executed precompilation phase running code julia compile methods run code contrast precompilesignaturesjl call precompile directives precompilelines unitrangeint benefit actually run code able precompile types infered methods recursively ttfx performance package lies actually calling code calling code calling precompile firstly strength package automatically decide precompile manually figure code run secondly strength package lies codebases code easily called precompilation phase example code effects disk network operations package compare snoopcompile package snoopcompilejl generate precompile directives package reading code signatures snoopcompile runs code directives snoopcompile runs code directives running code takes example generate lot precompile directives plutojl run tests takes minutes conversely package takes generate directives modules pluto practise means package regenerate directives start package whereas snoopcompile directives cached stored repository signatures package creates precompilesignatures precompilables foo foo name package created signatures valid default package verify precompile directives avoid breaking precompilation worst scenarios verify directives debugging purposes types precompilesignatures precompilables foo assert precompile types foo name package notes unfortunately inference run method precompiled information julialangjulia comment related discussions aspect progress example recent pr merged related cache external codeinstances julialangjulia julia package expected bigger difference tim