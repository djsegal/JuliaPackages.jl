nearestneighborsjl nearestneighborsjl package written julia perform nearest neighbor searches creating tree currently types trees available brutetree actually tree linearly searches brute force fashion metric kdtree kd tree recursively split using hyperplanes kdtree axis aligned metrics euclidean chebyshev minkowski cityblock balltree recursively split bounded hyperspheres metric trees created following syntax brutetree data metric leafsize reorder kdtree data metric leafsize reorder balltree data metric leafsize reorder data data build tree matrix size nd np insert tree nd dimensionality np vector vectors fixed dimensionality nd type specifically data vector subtype abstractvector eltype length defined example d svector float eltype float length defined metric metric defaults euclidean metric types defined distancesjl packages define metrics simply creating types subtypes metric leafsize keyword argument determines stop splitting tree trade traversing tree evaluate metric function increasing reorder keyword argument building tree close distance close memory helps cache locality copy original data original data left unmodified significant impact performance default set true trees nearestneighborsjl static means added removed created tree examples creating trees using nearestneighbors data rand create trees kdtree kdtree data leafsize balltree balltree data minkowski reorder false brutetree brutetree data nearest neighbor knn searches knn search nearest neighbors method knn tree sortres false skip alwaysfalse idxs dists tree tree instance vector matrix nearest neighbors vector represents single matrix nearest neighbors column computed vector vectors element outer vector considered sortres optional determines results sorted returning results sorted increasing distance skip optional predicate determine skipped example iterating visited performance query query multiple times query convenience closest nearest neighbor call nn instead cleaner result nn tree skip alwaysfalse idxs dists examples using nearestneighbors data rand rand kdtree kdtree data idxs dists knn kdtree true idxs element arrayint dists element arrayfloat multiple rand idxs dists knn kdtree true idxs element arrayarrayint dists element arrayarrayfloat static vectors svector idxs dists knn kdtree true idxs element arrayint dists element arrayfloat range searches range search neighbors range method inrange tree sortres false idxs note performance reasons distances returned arguments inrange knn except sortres sorts returned index vector example using nearestneighbors data rand rand balltree balltree data idxs inrange balltree true element arrayint neighborscount inrangecount balltree true function count allocating arrays indexes using disk data sets default trees store copy data provided construction problematic data sets larger available memory mmap data store data outside tree datafreetree strip constructed tree data field relink data stage example using disk data set looks using mmap ndim ndata data mmap mmap datafilename matrixfloat ndim ndata data rand float ndim ndata create example data dftree datafreetree kdtree data dftree stores indexing data structures passed saved reloaded independently data perform lookups dftree relinked underlying data tree injectdata dftree data yields kdtree knn tree data perform operations usual author kristoffer carlsson kristofferc kristoffercarlssonchalmerss