redisjl redisjl featured redis client julia programming language implementation attempt easy understand minimalistic api mirrors actual redis commands closely basics redisjl api resides redis module using redis main entrypoint api redisconnection represents stateful tcp connection single redis server instance single constructor allows user set parameters supplying usual redis defaults redisconnection created access expected redis commands conn redisconnection host port db password conn redisconnectionhost port db passwordsupersecure set conn foo bar conn foo returns bar string normally accepted keywords passed type passed type method string function set conn keyword value conn keyword returns value redis command julia function call command redis commands spaces spaces replaced underscores familiar available redis commands convention api relatively straightforward understand exceptions convention due conflicts julia type key command keytype eval scripting command evalscript user finished interacting redis connection destroyed prevent resource leaks disconnect conn disconnect function connection types detailed commands options redis commands complex syntax allows options passed command redisjl supports options final varargs parameter functions example scan options passed individual strings function mentioned earlier keywords types passed options coerced string scan conn match foo scan conn count users api improved provide custom functions complex commands exception option syntax functions zinterstore zunionstore specific implementations allow ease due complexity pipelining redisjl supports pipelining pipelineconnection commands executed standard redis commands pipeline openpipeline conn set pipeline somekey somevalue commands sent directly redis server waiting response responses read time future using readpipeline command responses readpipeline pipeline responses ok current pipelineconnection implementation threadsafe multiple threads require access redis pipelines separate pipelineconnection created thread limitation addressed future commit transactions redisjl supports multiexec transactions methods using redisconnection directly using specialized transactionconnection derived parent connection transactions using redisconnection user build transaction single time execute server simplest send commands redis cli multi conn set conn foo bar conn foo returns queued exec conn returns ok bar conn foo returns bar note final call exec redisconnection returned normal transactions using transactionconnection user planning using multiple transactions connection sense user separate connection transactional transactionconnection identical redisconnection except multi block user manually call multi transactionconnection trans opentransaction conn set trans foo bar trans foo returns queued exec trans returns ok bar trans foo returns queued multi trans throws serverexception notice subtle difference previous example calling exec transactionconnection placed multi block returning normal redisconnection pubsub redisjl provides support redis pubsub publishing accomplished using command normal publish conn channel hello world subscriptions handled using subscriptionconnection similar transactionconnection subscriptionconnection constructed existing redisconnection created subscriptionconnection maintains simple event loop call user defined function whenever message received specified channel push sub opensubscription conn subscribe sub baz publish conn baz foobar returns foobar multiple channels subscribed providing dictstring function subscriptionmessage push sub opensubscription conn dict string function baz bar println subscribe sub publish conn baz foobar returns foobar publish conn bar written stdout pattern subscription psubscribe function channels unsubscribed unsubscribe punsubscribe note event loop spawned threadsspawn currently runs subscriptionconnection disconnected regardless subscriptions client active event loop error handling improved update api subscription error handling subscriptionconnection instance created via opensubscription spawns routine runs background process events received server redisjl encounters error loop default behavior disregard error continue user finer control error handling opensubscription accepts optional function parameter final argument provided redisjl call provided function passing caught exception parameter sentinel redisjl provides functionality interacting redis sentinel instances sentinelconnection sentinel functionality ping implemented sentinel functions sentinel sentinelconnection constructor options redisconnection sentinelmasters sentinel returns arraydictstring string master info sentinelconnection subscribableconnection allowing user build subscriptionconnection monitoring cluster health sentinel messages redis sentinel documentation information notes actual api usage found testredistestsjl redis commands returning nil following methods return union value corresponding redis nil strings conn nonexistentkey mgetconn nonexistentkey nonexistentkey nonexistentkey lists lindexconn nonexistentlist lindexconn oneelementlist lpopconn nonexistentlist rpopconn nonexistentlist rpoplpushconn nonexistentlist somelist llenconn somelist sets spopconn emptyset srandmemberconn emptyset sorted sets zrankconn orderedset nonexistentmember zrevrankconn orderedset nonexistentmember zscoreconn orderedset nonexistentmember hashes hgetconn somehash nonexistentfield hmgetconn somehash nofield nofield