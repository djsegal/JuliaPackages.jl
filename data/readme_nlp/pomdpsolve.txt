pomdpsolvejl julia wrapper pomdpsolve program orginally developed brown university pomdpsjl interface package code available tony cassandra page pomdpsolve program solves partially observable markov decision processes pomdps taking model specification producing value function action policy employs algorithms exact approximate installation installing pomdpsjl run following commands julia repl add pomdpsolve example using pomdpsolve using pomdpmodels defines tigerpomdp pomdp tigerpomdp solver pomdpsolvesolver solve solver pomdp returns alphavectorpolicy parameters following parameters stdout filename type abstractstring units filename default stdout pomdpsolve program displays status progress information stdout redirected file instead provide file name parameter specifying option simply information normal stdout randseed seedseedseed type tupleintintint default init via system time functionality requires random able reproduce run executing random seed parameter allows set initial random seed specifying string consisting integers separated colon setting value result random seed pseudorandomized based system clock statsummary flag type bool default false pomdpsolve program capable keeping various statistical information solves track stats print set flag true memorylimit limit type int units bytes valid typemaxint default inf parameter allows set upper bound amount memory program memory threshold met program execution terminated specifying parameter upper bound imposed pomdpsolve program os naturally timelimit limit type int units valid typemaxint default inf parameter allows set upper bound amount time program run amount time elapsed program execution terminated specifying parameter upper bound imposed pomdpsolve program terminalvalues initialpolicyfilename type abstractstring units filename value iteration assumes lifetime decision maker values accrued corresponds terminal value function zeroes essentially default starting program parameter set terminal value function serves seed initial starting value iteration effectively allows output value iteration run send input file format input file identical output file format program alpha file horizon value type int units iteration valid typemaxint default run convergence value iteration iterative finite horizon solutions various reasons pomdpsolve terminate fixed iterations aka epochs set value positive default value iteration run iterations converge infinite horizon solution discount value type float valid default sets discount factor value iteration dictates relative usefulness future rewards compared immediate rewards stopcriteria value type symbol valid exact weak bellman default weak epoch value iteration check solutions converged near optimal infinite horizon solution determine stopping condition exact semantics described time stopdelta value type float valid inf default e checking stopping criteria value iteration epoch stopping condition types toleranceprecision calculations parameter allows set precision saveall flag type bool default false normally final solution saved file write solution epoch value iteration set flag true epoch appened filenames output vivariation flag type symbol valid normal zlz adjustableepsilon fixedsolnsize default normal independent particular algortihms computing iteration value iteration variations value iteration meant help speed convergence attempt description semantics startepsilon value type float valid typemaxfloat solving using adjustableepsilon method value iteration specify staring precision starting precision endepsilon value type float valid typemaxfloat solving using adjustableepsilon method value iteration specify staring precision precision epsilonadjust value type float valid typemaxfloat solving using adjustableepsilon method value iteration specify staring precision increment adjustment precision increment maxsolnsize value type float valid typemaxfloat solving using fixedsolnsize method define maximal size soltuion tolerate sets limit historylength value type int units epochs valid typemaxint using adjustableepsilon value iteration variant compare solution sizes rpevious epochs whethere solutions staying relatively constant size define past window length tolerance variation solution size care parameter defines length epoch window history determining time adjust precision value iteration solution historydelta value type int valid typemaxint using adjustableepsilon value iteration variant compare solution sizes previous epochs solutions staying relatively constant size define past window length tolerance variation solution size care parameter defines tolerance consider solutions size domcheck flag type bool default true computationally simple precision domination check discover useless components value function useful circumstances pruneepsilon value type float valid typemaxfloat default e prune sets value function components precision actor parameter epsilon value type float valid typemaxfloat default e main precision setting parameter effect preciseness solution procedures lpepsilon value type float valid typemaxfloat default e solution procedures employ linear programming algorithms thisk precision level inside linear programming routines projpurge value type symbol valid none domonly normalprune epsilonprune default normalprune step algorithms compute forward projection previous iteration solution components combinations comprise current solution prior emplying algorithm combinations heart pomdp solution algorithms employ process pruning projected set reducing complexity algorithms parameter decides type pruning step details semantics type pruning qpurge value type symbol valid none domonly normalprune epsilonprune default normalprune algorithms separately solve individual actions merge results individual action solutions referred functions merging pruning process choose premerge pruning sets simplifies merging process parameter defines method premerge pruning witnesspoints flag type bool default false keeping witness means track individual found rise individual value function components help speed solution process algrand valid type int units valid typemaxint speed discovery initial shape value function randomly generating finding value function components technique parameter zero value prunerand valid type int units valid typemaxint pruning sets value function components random set help speed pruning process parameter specified zero define random method value type symbol valid enum twopass linsup witness incprune grid mcgs default incprune pomdpsolve program implements differnt algorithms selects details method provided enumpurge value type symbol valid none domonly normalprune epsilonprune default normalprune using enumeration method times set value function components pruned purged useless components define pruning method algorithm incprune value type symbol valid normal restrictedregion generalized default normal incremental pruning algorithm variations parameter selects variation discuss nuances variations fgtype value type symbol valid simplex pairwise search initial default initial finite grid method set belief compute generate grid parameter selects technique discuss details fgpoints value type int valid typemaxint default finite grid method set belief compute generate grid parameter selects maximum generated process fgsave flag type bool default false finite grid method set belief compute parameter saving belief external file mcgstrajlength value type int valid typemaxint default montecarlo gaussseidel method using trajectories belief space lay grid compute optimal value funciton parameter defines lengths trajectories mcgsnumtraj value type int valid typemaxint default montecarlo gaussseidel method trajectories belief space lay grid compute optimal value funciton parameter defines trajectories mcgstrajitercount value type int valid typemaxint default montecarlo gaussseidel method using trajectories belief space lay grid compute optimal value funciton parameter defines value function update iterations set trajectories mcgsprunefreq value type int valid typemaxint default montecarlo gaussseidel method using trajectories belief space lay grid compute optimal value funciton parameter defines frequently prune set newly created value function facets generation value function fgpurge value type symbol valid none domonly normalprune epsilonprune default normalprune defines technique pruning finite grid method verbose value type symbol valid context lp global timing stats cmdline main alpha proj crosssum agenda enum twopass linsup witness incprune lpinterface vertexenum mdp pomdp param parsimonious region approxmcgs zlzspeedup finitegrid mcgs main module pomdpsolve separately controlled extra debugging output concerned option debugging module input technically repeatable pomdpsolve license pomdpsolvejl tony cassandra pomdpsolve library pompdsolve library following external libraries licenses lpsolve unclear license version source available laspack custom licens