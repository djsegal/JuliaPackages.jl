commutativeringsjl introduction software start computer algebra system specialized discrete calculations integer modular arithmetic fractional polynomials multivariate polynomials galois fields gf supported polynomials extended quotient rings package seen replacement nemojl abstractalgebrajl serious understood sandbox try simpler api rings freely combined example polynomials quotient ring prime frac rational functions integer coefficients gf polynomials galois field quotient rings include ideal major importance multivariate polynomials mentioned examples elementary examples ring structures liberately combined fractional fields quotient rings polynomials previously defined structures rational functions fractions polynomials polynomial coefficients example current standard library modules rational polynomial besides numeric subtypes support modular calculations integers original motivation writing piece sofware tried handle polynomials quotient ring obvious embedding ring elements julia language example exploit polynomial calculations polynomial package correspondence julia types structures algebraic stuctures idea born define abstract concrete types julia objects types representing ring elements operate types class objects julia define combinations language affine ring homomorphisms strucurerespecting mappings rings differnt natural representation argumentfunctions methods corresponding domains typical canonical homomorphisms conveniently implemented constructors exploitation julia structures contrast alternative package abstractalgebra defines separate types ring elements ring classes elements keeping explicit link owner structure distinct variants rings type parameters example type parameters specify implementation restictions example typically integer types representation objects correspondence algebraic julia categories algebraic julia example category ring abstract type abstract type ring algebraic structure concrete type struct zzmodint zz specialisation ring type inclusion zzint ring ring element object isa basic binary operations binary operator homomorphism method canonical constructor usage example julia using commutativerings starting calculation quotient field julia julia zzp zz zzmod int julia modulus zzp julia z zzp julia z zzp julia z z julia z z julia inv z julia z using prime parameter class identified arbitrary symbol julia zzbig zz zzmod symbol bigint julia modulus zzbig julia zb zzbig julia zb modulus zzbig fermat little theorem primes polynomials element type zz julia zzp univariatepolynomialzzmod int julia monom julia julia coeff element arrayzzmod int julia julia gcd julia julia julia error domainerror divide stacktrace installation wip version press v pkg add commutativerings updating registry juliaregistriestoml resolving package versions changes juliaenvironmentsvprojecttoml changes juliaenvironmentsvmanifesttoml press backspace julia using commutativerings info precompiling commutativerings adfac e f fbbe commutativerings pkg test testing commutativerings test summary pass total generic test summary pass total typevars test summary pass total zz test summary pass total qq test summary pass total zzmod test summary pass total univarpolynom test summary pass total multivarpolynom test summary pass total ideal test summary pass total fraction test summary pass total quotient test summary pass total factorization test summary pass total galoisfields test summary pass total numbertheory test summary pass total enumerations test summary pass total linearalgebra testing commutativerings tests passed implementation details classes name supertype description constructor remarks ring abstract supertype ring classes fractionfield ring abstract ring fractions ring quotientring ring abstract quotient factor ring ring polynomial ring abstract polynomials ring zztype ring integer type integer julia type zzmodtype quotientring zz quotient class modulo integer julia value type qqtype fractionfield rational integer rationaltype supports integer julia integer rings frac fractionfield fractions typically polynomials quotient quotientring ring modulo element ideal univariatepolynomial polynomial ring polynomials symbol multivariatepolynomial polynomial list distinct variable names galoisfield quotientring gf efficient implementation galois fields details class construction complete julia type type parameters specified defines singleton algebraic class int zp zzmodint quotient classes polynomials convenient constructors look typical mathematical notation symbols define name variables uni multivariate polynomial ring ideal element represents corresponding principal ideal zzint monom notion implemented julia integer types type piracy julia int error methoderror method matching typeint int ideals ideals denoted ideal elements ideal convenience principal ideals support ideal ideal integer zzint z z z z ideal z z z z noted r zero ideal containing zero element unit elements currently expression polynomial rings generating element ideal internally unit multiple stored achieve standard form example monic univariate polynomial multiple generating elements attempt standardize reduce stored base example unique factorization domain gcd stored ideals useful multivariate polynomials represented minimal base constructors elements class names concrete types serve constructor names means class name element integers elements rings natuarally embedded polynomial rings method call monom constructs monic monomials negative integers extended multivariate monom mathematical operations operation operator remarks add operations basebitintegers throw overflow subtract unary multiply integer power basepowerbysquares divide dividable remainder divrem complete integer division div quotient integer division rem remainder integer division gcd classical euclid algorithm gcdx extended euclid algorithm pdivrem pseudo division polynomials rings pdivrem base ring pgcd pseudo gcd pgcd pgcdx pseudo gcdx pgcdx base ring iszero test element zeroelement ring zero zero element ring isone test element element ring element ring isunit test element invertible ring deg degree polynomial zero polynomials ord univariate polynomial power nozero term lc leading coefficient polynomial otherwise identity ismonom short isonelc ismonic polynomials form base ring integer monom return monomial polygon degree isirreducible polynomial split trivial factors irreducibles generate irreducible polynomials degree factor factorize univariate polynomials finite fields integers modulus quotient rings galois fields defining polynomial characteristic ring positive integer otherwise dimension galois fields vector spaces ring elements ring infinite element positive integer otherwise basetype ring type representative basetype ring naturally embedded depth ring nesting depth value representant element stored value galois fields polynomial derive formal derivation polynomial power series inv inverse isunit inv composeinv composition inverse power series dervive composeinv det detminant matrix ring elements resultant resultant univariate polynomials discriminant discriminant univariate polynomial signedsubresultantpolynomials efficient algorithm subresultant polynomials associated classes algebraic structure corresponds parameterized julia type struct example represent zz abstract type ring ringclass struct zzmod integer ringzzmodringclass val subtypes ringclass containers constant type variables hold values specific algebraic structure stored type paramters happens example modulus example bigint polynomial classes unused user deal types define ring structures access type variables implementation method gettypevartypering provides ringclass object complete type ring types typically provide accessor functions obtain type specific values modulus characteristic dimension etc try codetyped dimensiongf efficient generated code univariate polynomials ring type class polynomials created symbol defines name indeterminate polynomials class obtained constructor univariatepolynomial conveniently monom finite field means zz galoisfield following options available univariate polynomials checked isirreducible irreducibility factor delivers list irreducible factors factorization implemented univariate polynomials integers example type zzbigint finite fields function irreducible delivers irreducible polynomial degree irreducible polynomials degree obtained irreducibles iterator allows apply iteratorsfilter list polynomials degree subset irreducibles numirreducibles galois fields finite fields prime integer represented quotient ring univariate polynomials zz irreducible monic polynomial degree short zz implementation galois field identified zz using modulus method return polynomial actually implementation monic polynomial degree constructing class gf galoisfield brute force search polynomials performed using efficient method detect irreducibility monom zz generates field applying addition multiplication operations calculated gf restrict selection generate multiplicative subgroup gf multiplication time efficiency algebraic operations improved avoiding expensive multiplicative calculations quotient ring logarithmic tables size element represented integer corresponds polynomial degree canonical manner example p maps uniquley x using galois fields construct galois field conveniently gf julia prime julia gf gf galoisfield julia modulus selected irreducible polynomial distinct name indeterminate julia julia easy obtain standard monom julia generates multiplicative subgroup julia integers mapped field element arraygaloisfield julia monom root zeros allzeros julia element arraygaloisfield julia unique element arraygaloisfield linear algebra matrices vectors ring elements supported understood following methods handle vector spaces und subspaces operation remarks nullspace null space kernel matrix intersect instesection subspaces sum sum subspaces rank rank matrix square matrix following methods exist operation remarks inv matrix inverse using generic lu factorization det determinant using generic lu factorization adjugate regular inv det characteristicpolynomial companion collides polynomialscompanion inv det adjugate element type polynomial widened frac multivariate polynomials example usage julia zz zzmod int julia multivariatepolynomialzzmod int symbol inttuple julia generators julia julia julia julia julia element arraymultivariatepolynomialzzmod int symbol inttuple julia groebnerbase element arraymultivariatepolynomialzzmod int symbol inttuple julia zz multivariatepolynomialzzmod int symbol inttuple julia generators julia element arraymultivariatepolynomialzzmod int symbol inttuple julia groebnerbase element arraymultivariatepolynomialzzmod int symbol inttuple example grbner base julia element arraymultivariatepolynomialzzmod int symbol inttuple julia groebnerbase element arraymultivariatepolynomialzzmod int symbol inttuple power series laurent series field characteristic example qq define formal power series precision univariate polynomials mind terms indicate precision expression support relative precision means zero coefficients capped precision indicator lower degree polynomials exact inverse defined power series elements coefficient invertible qq means except implementation actually supports formal laurent series composeinv function delivers power series expansion functions powerseries qqbigint powerseries qqbigint julia monom julia julia ex sum factorial julia inv ex julia inv ex ex julia ex julia exm sum factorial julia composeinv exm julia lg sum julia composeinv lg exm true comparison abstractalgebra julia using commuatativerings julia using benchmarktools julia gf zzmod int julia polynomialring univariatepolynomialzzmod int julia monom julia residuering y julia polynomialring julia monom julia julia julia julia julia btime resultant ms allocations mib mod acknowledgements package inspired library cocoalib found cocoalib factorization integer polynomials follows knuths infamous book art computer programming chapter signedresultantpolynomials book algorithms computation mathematics basu et al power series algorithms partially wikipedia article formal power series copyright klaus crusius released mit licens