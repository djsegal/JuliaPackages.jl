odinn oggm global glacier model differential equation neural networks global glacier model using universal differential equations model discover processes climateglacier interactions odinnjl neural networks differential equations combine mechanistic models describing glacier physical processes ice creep basal sliding surface mass balance machine learning neural networks learn equations interpreted mathematical form using sindy update original equation process odinn global glacier model oggm maussion et al basic framework retrieve topographical climate data initial simulations calling python julia using pycall simulations processing performed julia benefitting performance sciml ecosystem overview odinnjl workflow perform functional inversions glacier physical processes using universal differential equations parameters function determining physical process d expressed neural network nn optimized minimize loss function example physical inferred law constrained climate data proxies design climate data glacier mass balance downscaled depends updated solver dynamically updating simulation timestep installing odinn install odinn environment repl julia enter pkg mode v pkg activate myenvironment activate whatever path julia environment myenvironment pkg add odinn odinn initialization integration oggm multiprocessing call oggm python julia python installation julia using pycall recommend splitting julia odinn python oggm files separate folders chose name julia python placed root level indicated oggm documentation installing oggm create dedicated conda environment oggmenv environment install oggm massbalance sandbox following instructions repository path conda environment specified envpython variable julia pycall configuration easy implement requires activating conda environment time run odinn machine terminal julia session run conda activate oggmenv replace oggmenv whatever conda environment installed oggm mbsandbox configure pycall python path conda environment julia start julia session julia global env python read python string trim backspace julia import pkg pkg build pycall julia exit run code using odinn julia session using odinn start odinn pycall correctly configured configuration step time odinn able correctly python libraries change conda environment repeat steps step start julia session import odinn run script odinn toymodeljl run odinn using multiprocessing enable using following command julia processes odinn enablemultiprocessing processes odinn multiprocessing run python julia running commands available pycall documentation idea recommend checking toy model example toymodeljl using oggm initial conditions trainingsimulations odinn oggm utilizing tools retrieve rgi data topographical data climate data datasets oggm shop data specify initial simulations retrieve climate data force model related mass balance ice flow dynamics models written julia allows run tests toy model glacier earth choose glacier specify rgi id running toy model demostration toy model showcased srcscriptstoymodeljl projecttoml includes required dependencies running code zero install libraries using pkginstantiate include package project manifest pkgresolve instantiating project replace preamble srcscriptstoymodeljl import pkg pkg activate dirname base currentproject pkg instantiate pkg precompile upcoming changes stable api designed available release plan start using model please contact recommend wait release smoother experi